This file documents why the various tests have been rebaselined.

array-every.html
--------------------------
V8 has a more informative type error message when a non-function is
passed to Array.prototype.every.

array-foreach.html
--------------------------
V8 has a more informative type error message when a non-function is
passed to Array.prototype.foreach.

array-some.html
--------------------------
V8 has a more informative type error message when a non-function is
passed to Array.prototype.some.

assign.html
object-extra-comma.html
property-getters-and-setters.html
regexp-range-out-of-order.html
regexp-no-extensions.html
regexp-test-null-string.html
array-functions-non-arrays.html
--------------------------
Only error messages are different.

deep-recursion.html
--------------------------
It takes more than 1000 recursive calls to get a stack overflow in V8.
We differ from the upstream expected results because the v8 exception message
doesn't have a trailing period.  This is intentional for consistency.

function-decompilation-operators.html
function-prototype.html
function-names.html
--------------------------
Output format of an empty function is different.

toString-and-valueOf-override-diff-win.txt
--------------------------
This test differs only in text.  V8 typeerror messages are slightly
different, and the global object is of type global instead of 'Window'

kde\crash-2-expected.txt
--------------------------
V8 prints "Stack overflow" to console.

cyclic-prototypes-expected.txt
exception-thrown-from-new
--------------------------
Exception text is different in v8

exception-sequencing-binops2-excepted.txt
--------------------------
V8 follows the ECMA 262 specification w.r.t. the evaluation order of
comparisons. The latest JSC doesn't.

prefix-syntax.html
postfix-syntax.html
--------------------------
V8 throws syntax errors at parse time whereas KJS throws reference
errors at runtime for invalid pre- and postfix syntax.

regexp-caching.html
--------------------------
The KJS behavior is a bug, http://bugs.webkit.org/show_bug.cgi?id=16514

regexp-compile.html
--------------------------
We print the empty regexp differently (KJS: //, V8: /(?:)/), see
http://bugzilla.mozilla.org/show_bug.cgi?id=225550

modify-non-reference.html
--------------------------
Only printing of functions and error messages differ.

toString-stack-overflow.html
--------------------------
KJS has an extra period "." after the error message.  V8 does not.

recursion-limit-equal.html
regexp-compile-crash.html
--------------------------
Only difference is error message written to the console.

regexp-charclass-crash.html
--------------------------
This tests arbitrary limits on the sizes of regexps allowed by JSCRE.
We allow larger regexp and therefore this test gives no exception.

number-toString
--------------------------
We generate rather big representation in radices different from 10.  
So does KJS.  The difference is the arbitrary number of digits 
generated (we generate a bit more than KJS).  Also, KJS has an arbitrary 
delta that they check for during conversion - this sometimes allow them 
to generate a shorter representation (however, it is still the wrong 
solution).  We are no worse than KJS.

number-to-precision
number-to-fixed
--------------------------
We trust dtoa to give us the right decimal representation of 
floating-point numbers.  KJS apparently does something else.
Our behavior is consistent with Firefox (and is what the test
expects).

number-to-exponential
--------------------------
We trust dtoa to give us the right decimal representation of 
floating-point numbers.  KJS apparently does something else.
Our behavior is consistent with Firefox (and is what the test
expects).  In addition, KJS has an inconsistent error message
for out of range arguments to toExponential.

function-toString-object-literals
--------------------------
Only difference is the parse error message.

regexp-overflow
--------------------------
This tests artificial limits on the size of regexps.  We allow larger
regexps than JSCRE.

eval-keyword-vs-function
eval-cross-window
--------------------------
Only difference is the value of toString() on the window object.

constructor-attributes
--------------------------
The only difference is that V8 defines the constructor attribute on the
prototype for DOM objects just as for other objects.
The V8 implementation is consistent with the JavaScript specification and IE.

function-dot-arguments-and-caller
--------------------------
The only difference is that V8 defines the caller of a custom toString function
as the function that calls toString() on the object. This treatment is
consistent with Firefox.  

regexp-no-extensions
--------------------------
The outcome of this test depends on a bug in Safari's implementation
of regexp octal escapes.
