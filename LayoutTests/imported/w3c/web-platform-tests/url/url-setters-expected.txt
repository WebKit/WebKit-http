
PASS Loading data… 
PASS URL: Setting <a://example.net>.protocol = '' The empty string is not a valid scheme. Setter leaves the URL unchanged. 
PASS <a>: Setting <a://example.net>.protocol = '' The empty string is not a valid scheme. Setter leaves the URL unchanged. 
PASS <area>: Setting <a://example.net>.protocol = '' The empty string is not a valid scheme. Setter leaves the URL unchanged. 
PASS URL: Setting <a://example.net>.protocol = 'b' 
PASS <a>: Setting <a://example.net>.protocol = 'b' 
PASS <area>: Setting <a://example.net>.protocol = 'b' 
PASS URL: Setting <javascript:alert(1)>.protocol = 'defuse' 
PASS <a>: Setting <javascript:alert(1)>.protocol = 'defuse' 
PASS <area>: Setting <javascript:alert(1)>.protocol = 'defuse' 
PASS URL: Setting <a://example.net>.protocol = 'B' Upper-case ASCII is lower-cased 
PASS <a>: Setting <a://example.net>.protocol = 'B' Upper-case ASCII is lower-cased 
PASS <area>: Setting <a://example.net>.protocol = 'B' Upper-case ASCII is lower-cased 
PASS URL: Setting <a://example.net>.protocol = 'é' Non-ASCII is rejected 
PASS <a>: Setting <a://example.net>.protocol = 'é' Non-ASCII is rejected 
PASS <area>: Setting <a://example.net>.protocol = 'é' Non-ASCII is rejected 
PASS URL: Setting <a://example.net>.protocol = '0b' No leading digit 
PASS <a>: Setting <a://example.net>.protocol = '0b' No leading digit 
PASS <area>: Setting <a://example.net>.protocol = '0b' No leading digit 
PASS URL: Setting <a://example.net>.protocol = '+b' No leading punctuation 
PASS <a>: Setting <a://example.net>.protocol = '+b' No leading punctuation 
PASS <area>: Setting <a://example.net>.protocol = '+b' No leading punctuation 
PASS URL: Setting <a://example.net>.protocol = 'bC0+-.' 
PASS <a>: Setting <a://example.net>.protocol = 'bC0+-.' 
PASS <area>: Setting <a://example.net>.protocol = 'bC0+-.' 
PASS URL: Setting <a://example.net>.protocol = 'b,c' Only some punctuation is acceptable 
PASS <a>: Setting <a://example.net>.protocol = 'b,c' Only some punctuation is acceptable 
PASS <area>: Setting <a://example.net>.protocol = 'b,c' Only some punctuation is acceptable 
PASS URL: Setting <a://example.net>.protocol = 'bé' Non-ASCII is rejected 
PASS <a>: Setting <a://example.net>.protocol = 'bé' Non-ASCII is rejected 
PASS <area>: Setting <a://example.net>.protocol = 'bé' Non-ASCII is rejected 
PASS URL: Setting <http://test@example.net>.protocol = 'file' Can’t switch from URL containing username/password/port to file 
PASS <a>: Setting <http://test@example.net>.protocol = 'file' Can’t switch from URL containing username/password/port to file 
PASS <area>: Setting <http://test@example.net>.protocol = 'file' Can’t switch from URL containing username/password/port to file 
FAIL URL: Setting <gopher://example.net:1234>.protocol = 'file' assert_equals: expected "gopher://example.net:1234/" but got "gopher://example.net:1234"
FAIL <a>: Setting <gopher://example.net:1234>.protocol = 'file' assert_equals: expected "gopher://example.net:1234/" but got "gopher://example.net:1234"
FAIL <area>: Setting <gopher://example.net:1234>.protocol = 'file' assert_equals: expected "gopher://example.net:1234/" but got "gopher://example.net:1234"
PASS URL: Setting <wss://x:x@example.net:1234>.protocol = 'file' 
PASS <a>: Setting <wss://x:x@example.net:1234>.protocol = 'file' 
PASS <area>: Setting <wss://x:x@example.net:1234>.protocol = 'file' 
PASS URL: Setting <file://localhost/>.protocol = 'http' Can’t switch from file URL with no host 
PASS <a>: Setting <file://localhost/>.protocol = 'http' Can’t switch from file URL with no host 
PASS <area>: Setting <file://localhost/>.protocol = 'http' Can’t switch from file URL with no host 
PASS URL: Setting <file:///test>.protocol = 'gopher' 
PASS <a>: Setting <file:///test>.protocol = 'gopher' 
PASS <area>: Setting <file:///test>.protocol = 'gopher' 
PASS URL: Setting <file:>.protocol = 'wss' 
PASS <a>: Setting <file:>.protocol = 'wss' 
PASS <area>: Setting <file:>.protocol = 'wss' 
FAIL URL: Setting <http://example.net>.protocol = 'b' Can’t switch from special scheme to non-special assert_equals: expected "http://example.net/" but got "b://example.net/"
FAIL <a>: Setting <http://example.net>.protocol = 'b' Can’t switch from special scheme to non-special assert_equals: expected "http://example.net/" but got "b://example.net/"
FAIL <area>: Setting <http://example.net>.protocol = 'b' Can’t switch from special scheme to non-special assert_equals: expected "http://example.net/" but got "b://example.net/"
FAIL URL: Setting <file://hi/path>.protocol = 's' assert_equals: expected "file://hi/path" but got "s://hi/path"
FAIL <a>: Setting <file://hi/path>.protocol = 's' assert_equals: expected "file://hi/path" but got "s://hi/path"
FAIL <area>: Setting <file://hi/path>.protocol = 's' assert_equals: expected "file://hi/path" but got "s://hi/path"
FAIL URL: Setting <https://example.net>.protocol = 's' assert_equals: expected "https://example.net/" but got "s://example.net/"
FAIL <a>: Setting <https://example.net>.protocol = 's' assert_equals: expected "https://example.net/" but got "s://example.net/"
FAIL <area>: Setting <https://example.net>.protocol = 's' assert_equals: expected "https://example.net/" but got "s://example.net/"
FAIL URL: Setting <ftp://example.net>.protocol = 'test' assert_equals: expected "ftp://example.net/" but got "test://example.net/"
FAIL <a>: Setting <ftp://example.net>.protocol = 'test' assert_equals: expected "ftp://example.net/" but got "test://example.net/"
FAIL <area>: Setting <ftp://example.net>.protocol = 'test' assert_equals: expected "ftp://example.net/" but got "test://example.net/"
FAIL URL: Setting <mailto:me@example.net>.protocol = 'http' Cannot-be-a-base URL doesn’t have a host, but URL in a special scheme must. assert_equals: expected "mailto:me@example.net" but got "http://me@example.net/"
FAIL <a>: Setting <mailto:me@example.net>.protocol = 'http' Cannot-be-a-base URL doesn’t have a host, but URL in a special scheme must. assert_equals: expected "mailto:me@example.net" but got "http://me@example.net/"
FAIL <area>: Setting <mailto:me@example.net>.protocol = 'http' Cannot-be-a-base URL doesn’t have a host, but URL in a special scheme must. assert_equals: expected "mailto:me@example.net" but got "http://me@example.net/"
FAIL URL: Setting <ssh://me@example.net>.protocol = 'http' Can’t switch from non-special scheme to special assert_equals: expected "ssh://me@example.net" but got "http://me@example.net/"
FAIL <a>: Setting <ssh://me@example.net>.protocol = 'http' Can’t switch from non-special scheme to special assert_equals: expected "ssh://me@example.net" but got "http://me@example.net/"
FAIL <area>: Setting <ssh://me@example.net>.protocol = 'http' Can’t switch from non-special scheme to special assert_equals: expected "ssh://me@example.net" but got "http://me@example.net/"
FAIL URL: Setting <ssh://me@example.net>.protocol = 'gopher' assert_equals: expected "ssh://me@example.net" but got "gopher://me@example.net"
FAIL <a>: Setting <ssh://me@example.net>.protocol = 'gopher' assert_equals: expected "ssh://me@example.net" but got "gopher://me@example.net"
FAIL <area>: Setting <ssh://me@example.net>.protocol = 'gopher' assert_equals: expected "ssh://me@example.net" but got "gopher://me@example.net"
PASS URL: Setting <ssh://me@example.net>.protocol = 'file' 
PASS <a>: Setting <ssh://me@example.net>.protocol = 'file' 
PASS <area>: Setting <ssh://me@example.net>.protocol = 'file' 
FAIL URL: Setting <ssh://example.net>.protocol = 'file' assert_equals: expected "ssh://example.net" but got "file://example.net/"
FAIL <a>: Setting <ssh://example.net>.protocol = 'file' assert_equals: expected "ssh://example.net" but got "file://example.net/"
FAIL <area>: Setting <ssh://example.net>.protocol = 'file' assert_equals: expected "ssh://example.net" but got "file://example.net/"
FAIL URL: Setting <nonsense:///test>.protocol = 'https' assert_equals: expected "nonsense:///test" but got "https://test/"
FAIL <a>: Setting <nonsense:///test>.protocol = 'https' assert_equals: expected "nonsense:///test" but got "https://test/"
FAIL <area>: Setting <nonsense:///test>.protocol = 'https' assert_equals: expected "nonsense:///test" but got "https://test/"
PASS URL: Setting <http://example.net>.protocol = 'https:foo : bar' Stuff after the first ':' is ignored 
PASS <a>: Setting <http://example.net>.protocol = 'https:foo : bar' Stuff after the first ':' is ignored 
PASS <area>: Setting <http://example.net>.protocol = 'https:foo : bar' Stuff after the first ':' is ignored 
PASS URL: Setting <data:text/html,<p>Test>.protocol = 'view-source+data:foo : bar' Stuff after the first ':' is ignored 
PASS <a>: Setting <data:text/html,<p>Test>.protocol = 'view-source+data:foo : bar' Stuff after the first ':' is ignored 
PASS <area>: Setting <data:text/html,<p>Test>.protocol = 'view-source+data:foo : bar' Stuff after the first ':' is ignored 
PASS URL: Setting <http://foo.com:443/>.protocol = 'https' Port is set to null if it is the default for new scheme. 
PASS <a>: Setting <http://foo.com:443/>.protocol = 'https' Port is set to null if it is the default for new scheme. 
PASS <area>: Setting <http://foo.com:443/>.protocol = 'https' Port is set to null if it is the default for new scheme. 
PASS URL: Setting <file:///home/you/index.html>.username = 'me' No host means no username 
PASS <a>: Setting <file:///home/you/index.html>.username = 'me' No host means no username 
PASS <area>: Setting <file:///home/you/index.html>.username = 'me' No host means no username 
PASS URL: Setting <unix:/run/foo.socket>.username = 'me' No host means no username 
PASS <a>: Setting <unix:/run/foo.socket>.username = 'me' No host means no username 
PASS <area>: Setting <unix:/run/foo.socket>.username = 'me' No host means no username 
PASS URL: Setting <mailto:you@example.net>.username = 'me' Cannot-be-a-base means no username 
PASS <a>: Setting <mailto:you@example.net>.username = 'me' Cannot-be-a-base means no username 
PASS <area>: Setting <mailto:you@example.net>.username = 'me' Cannot-be-a-base means no username 
PASS URL: Setting <javascript:alert(1)>.username = 'wario' 
PASS <a>: Setting <javascript:alert(1)>.username = 'wario' 
PASS <area>: Setting <javascript:alert(1)>.username = 'wario' 
PASS URL: Setting <http://example.net>.username = 'me' 
PASS <a>: Setting <http://example.net>.username = 'me' 
PASS <area>: Setting <http://example.net>.username = 'me' 
PASS URL: Setting <http://:secret@example.net>.username = 'me' 
PASS <a>: Setting <http://:secret@example.net>.username = 'me' 
PASS <area>: Setting <http://:secret@example.net>.username = 'me' 
PASS URL: Setting <http://me@example.net>.username = '' 
PASS <a>: Setting <http://me@example.net>.username = '' 
PASS <area>: Setting <http://me@example.net>.username = '' 
PASS URL: Setting <http://me:secret@example.net>.username = '' 
PASS <a>: Setting <http://me:secret@example.net>.username = '' 
PASS <area>: Setting <http://me:secret@example.net>.username = '' 
PASS URL: Setting <http://example.net>.username = '\0	
\r !"#$%&'()*+,-./09:;<=>?@AZ[\]^_`az{|}~Éé' UTF-8 percent encoding with the userinfo encode set. 
PASS <a>: Setting <http://example.net>.username = '\0	
\r !"#$%&'()*+,-./09:;<=>?@AZ[\]^_`az{|}~Éé' UTF-8 percent encoding with the userinfo encode set. 
PASS <area>: Setting <http://example.net>.username = '\0	
\r !"#$%&'()*+,-./09:;<=>?@AZ[\]^_`az{|}~Éé' UTF-8 percent encoding with the userinfo encode set. 
PASS URL: Setting <http://example.net>.username = '%c3%89té' Bytes already percent-encoded are left as-is. 
PASS <a>: Setting <http://example.net>.username = '%c3%89té' Bytes already percent-encoded are left as-is. 
PASS <area>: Setting <http://example.net>.username = '%c3%89té' Bytes already percent-encoded are left as-is. 
PASS URL: Setting <sc:///>.username = 'x' 
PASS <a>: Setting <sc:///>.username = 'x' 
PASS <area>: Setting <sc:///>.username = 'x' 
PASS URL: Setting <javascript://x/>.username = 'wario' 
PASS <a>: Setting <javascript://x/>.username = 'wario' 
PASS <area>: Setting <javascript://x/>.username = 'wario' 
PASS URL: Setting <file://test/>.username = 'test' 
PASS <a>: Setting <file://test/>.username = 'test' 
PASS <area>: Setting <file://test/>.username = 'test' 
PASS URL: Setting <file:///home/me/index.html>.password = 'secret' No host means no password 
PASS <a>: Setting <file:///home/me/index.html>.password = 'secret' No host means no password 
PASS <area>: Setting <file:///home/me/index.html>.password = 'secret' No host means no password 
PASS URL: Setting <unix:/run/foo.socket>.password = 'secret' No host means no password 
PASS <a>: Setting <unix:/run/foo.socket>.password = 'secret' No host means no password 
PASS <area>: Setting <unix:/run/foo.socket>.password = 'secret' No host means no password 
PASS URL: Setting <mailto:me@example.net>.password = 'secret' Cannot-be-a-base means no password 
PASS <a>: Setting <mailto:me@example.net>.password = 'secret' Cannot-be-a-base means no password 
PASS <area>: Setting <mailto:me@example.net>.password = 'secret' Cannot-be-a-base means no password 
PASS URL: Setting <http://example.net>.password = 'secret' 
PASS <a>: Setting <http://example.net>.password = 'secret' 
PASS <area>: Setting <http://example.net>.password = 'secret' 
PASS URL: Setting <http://me@example.net>.password = 'secret' 
PASS <a>: Setting <http://me@example.net>.password = 'secret' 
PASS <area>: Setting <http://me@example.net>.password = 'secret' 
PASS URL: Setting <http://:secret@example.net>.password = '' 
PASS <a>: Setting <http://:secret@example.net>.password = '' 
PASS <area>: Setting <http://:secret@example.net>.password = '' 
PASS URL: Setting <http://me:secret@example.net>.password = '' 
PASS <a>: Setting <http://me:secret@example.net>.password = '' 
PASS <area>: Setting <http://me:secret@example.net>.password = '' 
PASS URL: Setting <http://example.net>.password = '\0	
\r !"#$%&'()*+,-./09:;<=>?@AZ[\]^_`az{|}~Éé' UTF-8 percent encoding with the userinfo encode set. 
PASS <a>: Setting <http://example.net>.password = '\0	
\r !"#$%&'()*+,-./09:;<=>?@AZ[\]^_`az{|}~Éé' UTF-8 percent encoding with the userinfo encode set. 
PASS <area>: Setting <http://example.net>.password = '\0	
\r !"#$%&'()*+,-./09:;<=>?@AZ[\]^_`az{|}~Éé' UTF-8 percent encoding with the userinfo encode set. 
PASS URL: Setting <http://example.net>.password = '%c3%89té' Bytes already percent-encoded are left as-is. 
PASS <a>: Setting <http://example.net>.password = '%c3%89té' Bytes already percent-encoded are left as-is. 
PASS <area>: Setting <http://example.net>.password = '%c3%89té' Bytes already percent-encoded are left as-is. 
PASS URL: Setting <sc:///>.password = 'x' 
PASS <a>: Setting <sc:///>.password = 'x' 
PASS <area>: Setting <sc:///>.password = 'x' 
PASS URL: Setting <javascript://x/>.password = 'bowser' 
PASS <a>: Setting <javascript://x/>.password = 'bowser' 
PASS <area>: Setting <javascript://x/>.password = 'bowser' 
PASS URL: Setting <file://test/>.password = 'test' 
PASS <a>: Setting <file://test/>.password = 'test' 
PASS <area>: Setting <file://test/>.password = 'test' 
PASS URL: Setting <sc://x/>.host = '\0' Non-special scheme 
FAIL <a>: Setting <sc://x/>.host = '\0' Non-special scheme assert_equals: expected "sc://x/" but got "sc://\0/"
FAIL <area>: Setting <sc://x/>.host = '\0' Non-special scheme assert_equals: expected "sc://x/" but got "sc://\0/"
PASS URL: Setting <sc://x/>.host = '	' 
PASS <a>: Setting <sc://x/>.host = '	' 
PASS <area>: Setting <sc://x/>.host = '	' 
PASS URL: Setting <sc://x/>.host = '
' 
PASS <a>: Setting <sc://x/>.host = '
' 
PASS <area>: Setting <sc://x/>.host = '
' 
PASS URL: Setting <sc://x/>.host = '\r' 
PASS <a>: Setting <sc://x/>.host = '\r' 
PASS <area>: Setting <sc://x/>.host = '\r' 
PASS URL: Setting <sc://x/>.host = ' ' 
FAIL <a>: Setting <sc://x/>.host = ' ' assert_equals: expected "sc://x/" but got "sc:// /"
FAIL <area>: Setting <sc://x/>.host = ' ' assert_equals: expected "sc://x/" but got "sc:// /"
FAIL URL: Setting <sc://x/>.host = '#' assert_equals: expected "sc:///" but got "sc://#/"
FAIL <a>: Setting <sc://x/>.host = '#' assert_equals: expected "sc:///" but got "sc://#/"
FAIL <area>: Setting <sc://x/>.host = '#' assert_equals: expected "sc:///" but got "sc://#/"
FAIL URL: Setting <sc://x/>.host = '/' assert_equals: expected "sc:///" but got "sc:////"
FAIL <a>: Setting <sc://x/>.host = '/' assert_equals: expected "sc:///" but got "sc:////"
FAIL <area>: Setting <sc://x/>.host = '/' assert_equals: expected "sc:///" but got "sc:////"
FAIL URL: Setting <sc://x/>.host = '?' assert_equals: expected "sc:///" but got "sc://?/"
FAIL <a>: Setting <sc://x/>.host = '?' assert_equals: expected "sc:///" but got "sc://?/"
FAIL <area>: Setting <sc://x/>.host = '?' assert_equals: expected "sc:///" but got "sc://?/"
PASS URL: Setting <sc://x/>.host = '@' 
FAIL <a>: Setting <sc://x/>.host = '@' assert_equals: expected "sc://x/" but got "sc://@/"
FAIL <area>: Setting <sc://x/>.host = '@' assert_equals: expected "sc://x/" but got "sc://@/"
FAIL URL: Setting <sc://x/>.host = 'ß' assert_equals: expected "sc://%C3%9F/" but got "sc://xn--zca/"
FAIL <a>: Setting <sc://x/>.host = 'ß' assert_equals: expected "sc://%C3%9F/" but got "sc://xn--zca/"
FAIL <area>: Setting <sc://x/>.host = 'ß' assert_equals: expected "sc://%C3%9F/" but got "sc://xn--zca/"
PASS URL: Setting <https://x/>.host = 'ß' IDNA Nontransitional_Processing 
PASS <a>: Setting <https://x/>.host = 'ß' IDNA Nontransitional_Processing 
PASS <area>: Setting <https://x/>.host = 'ß' IDNA Nontransitional_Processing 
PASS URL: Setting <mailto:me@example.net>.host = 'example.com' Cannot-be-a-base means no host 
PASS <a>: Setting <mailto:me@example.net>.host = 'example.com' Cannot-be-a-base means no host 
PASS <area>: Setting <mailto:me@example.net>.host = 'example.com' Cannot-be-a-base means no host 
PASS URL: Setting <data:text/plain,Stuff>.host = 'example.net' Cannot-be-a-base means no password 
PASS <a>: Setting <data:text/plain,Stuff>.host = 'example.net' Cannot-be-a-base means no password 
PASS <area>: Setting <data:text/plain,Stuff>.host = 'example.net' Cannot-be-a-base means no password 
PASS URL: Setting <http://example.net>.host = 'example.com:8080' 
PASS <a>: Setting <http://example.net>.host = 'example.com:8080' 
PASS <area>: Setting <http://example.net>.host = 'example.com:8080' 
PASS URL: Setting <http://example.net:8080>.host = 'example.com' Port number is unchanged if not specified in the new value 
PASS <a>: Setting <http://example.net:8080>.host = 'example.com' Port number is unchanged if not specified in the new value 
PASS <area>: Setting <http://example.net:8080>.host = 'example.com' Port number is unchanged if not specified in the new value 
FAIL URL: Setting <http://example.net:8080>.host = 'example.com:' Port number is unchanged if not specified assert_equals: expected "http://example.com:8080/" but got "http://example.com:0/"
FAIL <a>: Setting <http://example.net:8080>.host = 'example.com:' Port number is unchanged if not specified assert_equals: expected "http://example.com:8080/" but got "http://example.com:0/"
FAIL <area>: Setting <http://example.net:8080>.host = 'example.com:' Port number is unchanged if not specified assert_equals: expected "http://example.com:8080/" but got "http://example.com:0/"
PASS URL: Setting <http://example.net>.host = '' The empty host is not valid for special schemes 
PASS <a>: Setting <http://example.net>.host = '' The empty host is not valid for special schemes 
PASS <area>: Setting <http://example.net>.host = '' The empty host is not valid for special schemes 
FAIL URL: Setting <view-source+http://example.net/foo>.host = '' The empty host is OK for non-special schemes assert_equals: expected "view-source+http:///foo" but got "view-source+http://example.net/foo"
FAIL <a>: Setting <view-source+http://example.net/foo>.host = '' The empty host is OK for non-special schemes assert_equals: expected "view-source+http:///foo" but got "view-source+http://example.net/foo"
FAIL <area>: Setting <view-source+http://example.net/foo>.host = '' The empty host is OK for non-special schemes assert_equals: expected "view-source+http:///foo" but got "view-source+http://example.net/foo"
PASS URL: Setting <a:/foo>.host = 'example.net' Path-only URLs can gain a host 
PASS <a>: Setting <a:/foo>.host = 'example.net' Path-only URLs can gain a host 
PASS <area>: Setting <a:/foo>.host = 'example.net' Path-only URLs can gain a host 
PASS URL: Setting <http://example.net>.host = '0x7F000001:8080' IPv4 address syntax is normalized 
PASS <a>: Setting <http://example.net>.host = '0x7F000001:8080' IPv4 address syntax is normalized 
PASS <area>: Setting <http://example.net>.host = '0x7F000001:8080' IPv4 address syntax is normalized 
FAIL URL: Setting <http://example.net>.host = '[::0:01]:2' IPv6 address syntax is normalized assert_equals: expected "http://[::1]:2/" but got "http://example.net/"
FAIL <a>: Setting <http://example.net>.host = '[::0:01]:2' IPv6 address syntax is normalized assert_equals: expected "http://[::1]:2/" but got "http://[:0/"
FAIL <area>: Setting <http://example.net>.host = '[::0:01]:2' IPv6 address syntax is normalized assert_equals: expected "http://[::1]:2/" but got "http://[:0/"
PASS URL: Setting <http://example.net>.host = 'example.com:80' Default port number is removed 
PASS <a>: Setting <http://example.net>.host = 'example.com:80' Default port number is removed 
PASS <area>: Setting <http://example.net>.host = 'example.com:80' Default port number is removed 
PASS URL: Setting <https://example.net>.host = 'example.com:443' Default port number is removed 
PASS <a>: Setting <https://example.net>.host = 'example.com:443' Default port number is removed 
PASS <area>: Setting <https://example.net>.host = 'example.com:443' Default port number is removed 
PASS URL: Setting <https://example.net>.host = 'example.com:80' Default port number is only removed for the relevant scheme 
PASS <a>: Setting <https://example.net>.host = 'example.com:80' Default port number is only removed for the relevant scheme 
PASS <area>: Setting <https://example.net>.host = 'example.com:80' Default port number is only removed for the relevant scheme 
FAIL URL: Setting <http://example.net/path>.host = 'example.com/stuff' Stuff after a / delimiter is ignored assert_equals: expected "http://example.com/path" but got "http://example.com/stuff/path"
FAIL <a>: Setting <http://example.net/path>.host = 'example.com/stuff' Stuff after a / delimiter is ignored assert_equals: expected "http://example.com/path" but got "http://example.com/stuff/path"
FAIL <area>: Setting <http://example.net/path>.host = 'example.com/stuff' Stuff after a / delimiter is ignored assert_equals: expected "http://example.com/path" but got "http://example.com/stuff/path"
PASS URL: Setting <http://example.net/path>.host = 'example.com:8080/stuff' Stuff after a / delimiter is ignored 
PASS <a>: Setting <http://example.net/path>.host = 'example.com:8080/stuff' Stuff after a / delimiter is ignored 
PASS <area>: Setting <http://example.net/path>.host = 'example.com:8080/stuff' Stuff after a / delimiter is ignored 
FAIL URL: Setting <http://example.net/path>.host = 'example.com?stuff' Stuff after a ? delimiter is ignored assert_equals: expected "http://example.com/path" but got "http://example.com/?stuff/path"
FAIL <a>: Setting <http://example.net/path>.host = 'example.com?stuff' Stuff after a ? delimiter is ignored assert_equals: expected "http://example.com/path" but got "http://example.com/?stuff/path"
FAIL <area>: Setting <http://example.net/path>.host = 'example.com?stuff' Stuff after a ? delimiter is ignored assert_equals: expected "http://example.com/path" but got "http://example.com/?stuff/path"
PASS URL: Setting <http://example.net/path>.host = 'example.com:8080?stuff' Stuff after a ? delimiter is ignored 
PASS <a>: Setting <http://example.net/path>.host = 'example.com:8080?stuff' Stuff after a ? delimiter is ignored 
PASS <area>: Setting <http://example.net/path>.host = 'example.com:8080?stuff' Stuff after a ? delimiter is ignored 
FAIL URL: Setting <http://example.net/path>.host = 'example.com#stuff' Stuff after a # delimiter is ignored assert_equals: expected "http://example.com/path" but got "http://example.com/#stuff/path"
FAIL <a>: Setting <http://example.net/path>.host = 'example.com#stuff' Stuff after a # delimiter is ignored assert_equals: expected "http://example.com/path" but got "http://example.com/#stuff/path"
FAIL <area>: Setting <http://example.net/path>.host = 'example.com#stuff' Stuff after a # delimiter is ignored assert_equals: expected "http://example.com/path" but got "http://example.com/#stuff/path"
PASS URL: Setting <http://example.net/path>.host = 'example.com:8080#stuff' Stuff after a # delimiter is ignored 
PASS <a>: Setting <http://example.net/path>.host = 'example.com:8080#stuff' Stuff after a # delimiter is ignored 
PASS <area>: Setting <http://example.net/path>.host = 'example.com:8080#stuff' Stuff after a # delimiter is ignored 
FAIL URL: Setting <http://example.net/path>.host = 'example.com\stuff' Stuff after a \ delimiter is ignored for special schemes assert_equals: expected "http://example.com/path" but got "http://example.com/stuff/path"
FAIL <a>: Setting <http://example.net/path>.host = 'example.com\stuff' Stuff after a \ delimiter is ignored for special schemes assert_equals: expected "http://example.com/path" but got "http://example.com/stuff/path"
FAIL <area>: Setting <http://example.net/path>.host = 'example.com\stuff' Stuff after a \ delimiter is ignored for special schemes assert_equals: expected "http://example.com/path" but got "http://example.com/stuff/path"
PASS URL: Setting <http://example.net/path>.host = 'example.com:8080\stuff' Stuff after a \ delimiter is ignored for special schemes 
PASS <a>: Setting <http://example.net/path>.host = 'example.com:8080\stuff' Stuff after a \ delimiter is ignored for special schemes 
PASS <area>: Setting <http://example.net/path>.host = 'example.com:8080\stuff' Stuff after a \ delimiter is ignored for special schemes 
PASS URL: Setting <view-source+http://example.net/path>.host = 'example.com\stuff' \ is not a delimiter for non-special schemes, but still forbidden in hosts 
FAIL <a>: Setting <view-source+http://example.net/path>.host = 'example.com\stuff' \ is not a delimiter for non-special schemes, but still forbidden in hosts assert_equals: expected "view-source+http://example.net/path" but got "view-source+http://example.com\\stuff/path"
FAIL <area>: Setting <view-source+http://example.net/path>.host = 'example.com\stuff' \ is not a delimiter for non-special schemes, but still forbidden in hosts assert_equals: expected "view-source+http://example.net/path" but got "view-source+http://example.com\\stuff/path"
PASS URL: Setting <view-source+http://example.net/path>.host = 'example.com:8080stuff2' Anything other than ASCII digit stops the port parser in a setter but is not an error 
PASS <a>: Setting <view-source+http://example.net/path>.host = 'example.com:8080stuff2' Anything other than ASCII digit stops the port parser in a setter but is not an error 
PASS <area>: Setting <view-source+http://example.net/path>.host = 'example.com:8080stuff2' Anything other than ASCII digit stops the port parser in a setter but is not an error 
PASS URL: Setting <http://example.net/path>.host = 'example.com:8080stuff2' Anything other than ASCII digit stops the port parser in a setter but is not an error 
PASS <a>: Setting <http://example.net/path>.host = 'example.com:8080stuff2' Anything other than ASCII digit stops the port parser in a setter but is not an error 
PASS <area>: Setting <http://example.net/path>.host = 'example.com:8080stuff2' Anything other than ASCII digit stops the port parser in a setter but is not an error 
PASS URL: Setting <http://example.net/path>.host = 'example.com:8080+2' Anything other than ASCII digit stops the port parser in a setter but is not an error 
PASS <a>: Setting <http://example.net/path>.host = 'example.com:8080+2' Anything other than ASCII digit stops the port parser in a setter but is not an error 
PASS <area>: Setting <http://example.net/path>.host = 'example.com:8080+2' Anything other than ASCII digit stops the port parser in a setter but is not an error 
PASS URL: Setting <http://example.net/path>.host = 'example.com:65535' Port numbers are 16 bit integers 
PASS <a>: Setting <http://example.net/path>.host = 'example.com:65535' Port numbers are 16 bit integers 
PASS <area>: Setting <http://example.net/path>.host = 'example.com:65535' Port numbers are 16 bit integers 
PASS URL: Setting <http://example.net/path>.host = 'example.com:65536' Port numbers are 16 bit integers, overflowing is an error. Hostname is still set, though. 
PASS <a>: Setting <http://example.net/path>.host = 'example.com:65536' Port numbers are 16 bit integers, overflowing is an error. Hostname is still set, though. 
PASS <area>: Setting <http://example.net/path>.host = 'example.com:65536' Port numbers are 16 bit integers, overflowing is an error. Hostname is still set, though. 
PASS URL: Setting <http://example.net/>.host = '[google.com]' Broken IPv6 
FAIL <a>: Setting <http://example.net/>.host = '[google.com]' Broken IPv6 assert_equals: expected "http://example.net/" but got "http://[google.com]/"
FAIL <area>: Setting <http://example.net/>.host = '[google.com]' Broken IPv6 assert_equals: expected "http://example.net/" but got "http://[google.com]/"
PASS URL: Setting <http://example.net/>.host = '[::1.2.3.4x]' 
FAIL <a>: Setting <http://example.net/>.host = '[::1.2.3.4x]' assert_equals: expected "http://example.net/" but got "http://[:0/"
FAIL <area>: Setting <http://example.net/>.host = '[::1.2.3.4x]' assert_equals: expected "http://example.net/" but got "http://[:0/"
PASS URL: Setting <http://example.net/>.host = '[::1.2.3.]' 
FAIL <a>: Setting <http://example.net/>.host = '[::1.2.3.]' assert_equals: expected "http://example.net/" but got "http://[:0/"
FAIL <area>: Setting <http://example.net/>.host = '[::1.2.3.]' assert_equals: expected "http://example.net/" but got "http://[:0/"
PASS URL: Setting <http://example.net/>.host = '[::1.2.]' 
FAIL <a>: Setting <http://example.net/>.host = '[::1.2.]' assert_equals: expected "http://example.net/" but got "http://[:0/"
FAIL <area>: Setting <http://example.net/>.host = '[::1.2.]' assert_equals: expected "http://example.net/" but got "http://[:0/"
PASS URL: Setting <http://example.net/>.host = '[::1.]' 
FAIL <a>: Setting <http://example.net/>.host = '[::1.]' assert_equals: expected "http://example.net/" but got "http://[:0/"
FAIL <area>: Setting <http://example.net/>.host = '[::1.]' assert_equals: expected "http://example.net/" but got "http://[:0/"
FAIL URL: Setting <file://y/>.host = 'x:123' assert_equals: expected "file://y/" but got "file://x:123/"
FAIL <a>: Setting <file://y/>.host = 'x:123' assert_equals: expected "file://y/" but got "file://x:123/"
FAIL <area>: Setting <file://y/>.host = 'x:123' assert_equals: expected "file://y/" but got "file://x:123/"
PASS URL: Setting <file://y/>.host = 'loc%41lhost' 
PASS <a>: Setting <file://y/>.host = 'loc%41lhost' 
PASS <area>: Setting <file://y/>.host = 'loc%41lhost' 
FAIL URL: Setting <file://hi/x>.host = '' assert_equals: expected "file:///x" but got "file://hi/x"
FAIL <a>: Setting <file://hi/x>.host = '' assert_equals: expected "file:///x" but got "file://hi/x"
FAIL <area>: Setting <file://hi/x>.host = '' assert_equals: expected "file:///x" but got "file://hi/x"
PASS URL: Setting <sc://test@test/>.host = '' 
PASS <a>: Setting <sc://test@test/>.host = '' 
PASS <area>: Setting <sc://test@test/>.host = '' 
PASS URL: Setting <sc://test:12/>.host = '' 
PASS <a>: Setting <sc://test:12/>.host = '' 
PASS <area>: Setting <sc://test:12/>.host = '' 
PASS URL: Setting <sc://x/>.hostname = '\0' Non-special scheme 
FAIL <a>: Setting <sc://x/>.hostname = '\0' Non-special scheme assert_equals: expected "sc://x/" but got "sc://\0/"
FAIL <area>: Setting <sc://x/>.hostname = '\0' Non-special scheme assert_equals: expected "sc://x/" but got "sc://\0/"
PASS URL: Setting <sc://x/>.hostname = '	' 
PASS <a>: Setting <sc://x/>.hostname = '	' 
PASS <area>: Setting <sc://x/>.hostname = '	' 
PASS URL: Setting <sc://x/>.hostname = '
' 
PASS <a>: Setting <sc://x/>.hostname = '
' 
PASS <area>: Setting <sc://x/>.hostname = '
' 
PASS URL: Setting <sc://x/>.hostname = '\r' 
PASS <a>: Setting <sc://x/>.hostname = '\r' 
PASS <area>: Setting <sc://x/>.hostname = '\r' 
PASS URL: Setting <sc://x/>.hostname = ' ' 
FAIL <a>: Setting <sc://x/>.hostname = ' ' assert_equals: expected "sc://x/" but got "sc:// /"
FAIL <area>: Setting <sc://x/>.hostname = ' ' assert_equals: expected "sc://x/" but got "sc:// /"
FAIL URL: Setting <sc://x/>.hostname = '#' assert_equals: expected "sc:///" but got "sc://#/"
FAIL <a>: Setting <sc://x/>.hostname = '#' assert_equals: expected "sc:///" but got "sc://#/"
FAIL <area>: Setting <sc://x/>.hostname = '#' assert_equals: expected "sc:///" but got "sc://#/"
FAIL URL: Setting <sc://x/>.hostname = '/' assert_equals: expected "sc:///" but got "sc://x/"
FAIL <a>: Setting <sc://x/>.hostname = '/' assert_equals: expected "sc:///" but got "sc://x/"
FAIL <area>: Setting <sc://x/>.hostname = '/' assert_equals: expected "sc:///" but got "sc://x/"
FAIL URL: Setting <sc://x/>.hostname = '?' assert_equals: expected "sc:///" but got "sc://?/"
FAIL <a>: Setting <sc://x/>.hostname = '?' assert_equals: expected "sc:///" but got "sc://?/"
FAIL <area>: Setting <sc://x/>.hostname = '?' assert_equals: expected "sc:///" but got "sc://?/"
PASS URL: Setting <sc://x/>.hostname = '@' 
FAIL <a>: Setting <sc://x/>.hostname = '@' assert_equals: expected "sc://x/" but got "sc://@/"
FAIL <area>: Setting <sc://x/>.hostname = '@' assert_equals: expected "sc://x/" but got "sc://@/"
PASS URL: Setting <mailto:me@example.net>.hostname = 'example.com' Cannot-be-a-base means no host 
PASS <a>: Setting <mailto:me@example.net>.hostname = 'example.com' Cannot-be-a-base means no host 
PASS <area>: Setting <mailto:me@example.net>.hostname = 'example.com' Cannot-be-a-base means no host 
PASS URL: Setting <data:text/plain,Stuff>.hostname = 'example.net' Cannot-be-a-base means no password 
PASS <a>: Setting <data:text/plain,Stuff>.hostname = 'example.net' Cannot-be-a-base means no password 
PASS <area>: Setting <data:text/plain,Stuff>.hostname = 'example.net' Cannot-be-a-base means no password 
PASS URL: Setting <http://example.net:8080>.hostname = 'example.com' 
PASS <a>: Setting <http://example.net:8080>.hostname = 'example.com' 
PASS <area>: Setting <http://example.net:8080>.hostname = 'example.com' 
PASS URL: Setting <http://example.net>.hostname = '' The empty host is not valid for special schemes 
PASS <a>: Setting <http://example.net>.hostname = '' The empty host is not valid for special schemes 
PASS <area>: Setting <http://example.net>.hostname = '' The empty host is not valid for special schemes 
FAIL URL: Setting <view-source+http://example.net/foo>.hostname = '' The empty host is OK for non-special schemes assert_equals: expected "view-source+http:///foo" but got "view-source+http://example.net/foo"
FAIL <a>: Setting <view-source+http://example.net/foo>.hostname = '' The empty host is OK for non-special schemes assert_equals: expected "view-source+http:///foo" but got "view-source+http://example.net/foo"
FAIL <area>: Setting <view-source+http://example.net/foo>.hostname = '' The empty host is OK for non-special schemes assert_equals: expected "view-source+http:///foo" but got "view-source+http://example.net/foo"
PASS URL: Setting <a:/foo>.hostname = 'example.net' Path-only URLs can gain a host 
PASS <a>: Setting <a:/foo>.hostname = 'example.net' Path-only URLs can gain a host 
PASS <area>: Setting <a:/foo>.hostname = 'example.net' Path-only URLs can gain a host 
PASS URL: Setting <http://example.net:8080>.hostname = '0x7F000001' IPv4 address syntax is normalized 
PASS <a>: Setting <http://example.net:8080>.hostname = '0x7F000001' IPv4 address syntax is normalized 
PASS <area>: Setting <http://example.net:8080>.hostname = '0x7F000001' IPv4 address syntax is normalized 
FAIL URL: Setting <http://example.net>.hostname = '[::0:01]' IPv6 address syntax is normalized assert_equals: expected "http://[::1]/" but got "http://example.net/"
FAIL <a>: Setting <http://example.net>.hostname = '[::0:01]' IPv6 address syntax is normalized assert_equals: expected "http://[::1]/" but got "http://example.net/"
FAIL <area>: Setting <http://example.net>.hostname = '[::0:01]' IPv6 address syntax is normalized assert_equals: expected "http://[::1]/" but got "http://example.net/"
FAIL URL: Setting <http://example.net/path>.hostname = 'example.com:8080' Stuff after a : delimiter is ignored assert_equals: expected "http://example.com/path" but got "http://example.net/path"
FAIL <a>: Setting <http://example.net/path>.hostname = 'example.com:8080' Stuff after a : delimiter is ignored assert_equals: expected "http://example.com/path" but got "http://example.net/path"
FAIL <area>: Setting <http://example.net/path>.hostname = 'example.com:8080' Stuff after a : delimiter is ignored assert_equals: expected "http://example.com/path" but got "http://example.net/path"
FAIL URL: Setting <http://example.net:8080/path>.hostname = 'example.com:' Stuff after a : delimiter is ignored assert_equals: expected "http://example.com:8080/path" but got "http://example.net:8080/path"
FAIL <a>: Setting <http://example.net:8080/path>.hostname = 'example.com:' Stuff after a : delimiter is ignored assert_equals: expected "http://example.com:8080/path" but got "http://example.net:8080/path"
FAIL <area>: Setting <http://example.net:8080/path>.hostname = 'example.com:' Stuff after a : delimiter is ignored assert_equals: expected "http://example.com:8080/path" but got "http://example.net:8080/path"
FAIL URL: Setting <http://example.net/path>.hostname = 'example.com/stuff' Stuff after a / delimiter is ignored assert_equals: expected "http://example.com/path" but got "http://example.com/stuff/path"
FAIL <a>: Setting <http://example.net/path>.hostname = 'example.com/stuff' Stuff after a / delimiter is ignored assert_equals: expected "http://example.com/path" but got "http://example.com/stuff/path"
FAIL <area>: Setting <http://example.net/path>.hostname = 'example.com/stuff' Stuff after a / delimiter is ignored assert_equals: expected "http://example.com/path" but got "http://example.com/stuff/path"
FAIL URL: Setting <http://example.net/path>.hostname = 'example.com?stuff' Stuff after a ? delimiter is ignored assert_equals: expected "http://example.com/path" but got "http://example.com/?stuff/path"
FAIL <a>: Setting <http://example.net/path>.hostname = 'example.com?stuff' Stuff after a ? delimiter is ignored assert_equals: expected "http://example.com/path" but got "http://example.com/?stuff/path"
FAIL <area>: Setting <http://example.net/path>.hostname = 'example.com?stuff' Stuff after a ? delimiter is ignored assert_equals: expected "http://example.com/path" but got "http://example.com/?stuff/path"
FAIL URL: Setting <http://example.net/path>.hostname = 'example.com#stuff' Stuff after a # delimiter is ignored assert_equals: expected "http://example.com/path" but got "http://example.com/#stuff/path"
FAIL <a>: Setting <http://example.net/path>.hostname = 'example.com#stuff' Stuff after a # delimiter is ignored assert_equals: expected "http://example.com/path" but got "http://example.com/#stuff/path"
FAIL <area>: Setting <http://example.net/path>.hostname = 'example.com#stuff' Stuff after a # delimiter is ignored assert_equals: expected "http://example.com/path" but got "http://example.com/#stuff/path"
FAIL URL: Setting <http://example.net/path>.hostname = 'example.com\stuff' Stuff after a \ delimiter is ignored for special schemes assert_equals: expected "http://example.com/path" but got "http://example.com/stuff/path"
FAIL <a>: Setting <http://example.net/path>.hostname = 'example.com\stuff' Stuff after a \ delimiter is ignored for special schemes assert_equals: expected "http://example.com/path" but got "http://example.com/stuff/path"
FAIL <area>: Setting <http://example.net/path>.hostname = 'example.com\stuff' Stuff after a \ delimiter is ignored for special schemes assert_equals: expected "http://example.com/path" but got "http://example.com/stuff/path"
PASS URL: Setting <view-source+http://example.net/path>.hostname = 'example.com\stuff' \ is not a delimiter for non-special schemes, but still forbidden in hosts 
FAIL <a>: Setting <view-source+http://example.net/path>.hostname = 'example.com\stuff' \ is not a delimiter for non-special schemes, but still forbidden in hosts assert_equals: expected "view-source+http://example.net/path" but got "view-source+http://example.com\\stuff/path"
FAIL <area>: Setting <view-source+http://example.net/path>.hostname = 'example.com\stuff' \ is not a delimiter for non-special schemes, but still forbidden in hosts assert_equals: expected "view-source+http://example.net/path" but got "view-source+http://example.com\\stuff/path"
PASS URL: Setting <http://example.net/>.hostname = '[google.com]' Broken IPv6 
FAIL <a>: Setting <http://example.net/>.hostname = '[google.com]' Broken IPv6 assert_equals: expected "http://example.net/" but got "http://[google.com]/"
FAIL <area>: Setting <http://example.net/>.hostname = '[google.com]' Broken IPv6 assert_equals: expected "http://example.net/" but got "http://[google.com]/"
PASS URL: Setting <http://example.net/>.hostname = '[::1.2.3.4x]' 
PASS <a>: Setting <http://example.net/>.hostname = '[::1.2.3.4x]' 
PASS <area>: Setting <http://example.net/>.hostname = '[::1.2.3.4x]' 
PASS URL: Setting <http://example.net/>.hostname = '[::1.2.3.]' 
PASS <a>: Setting <http://example.net/>.hostname = '[::1.2.3.]' 
PASS <area>: Setting <http://example.net/>.hostname = '[::1.2.3.]' 
PASS URL: Setting <http://example.net/>.hostname = '[::1.2.]' 
PASS <a>: Setting <http://example.net/>.hostname = '[::1.2.]' 
PASS <area>: Setting <http://example.net/>.hostname = '[::1.2.]' 
PASS URL: Setting <http://example.net/>.hostname = '[::1.]' 
PASS <a>: Setting <http://example.net/>.hostname = '[::1.]' 
PASS <area>: Setting <http://example.net/>.hostname = '[::1.]' 
PASS URL: Setting <file://y/>.hostname = 'x:123' 
PASS <a>: Setting <file://y/>.hostname = 'x:123' 
PASS <area>: Setting <file://y/>.hostname = 'x:123' 
PASS URL: Setting <file://y/>.hostname = 'loc%41lhost' 
PASS <a>: Setting <file://y/>.hostname = 'loc%41lhost' 
PASS <area>: Setting <file://y/>.hostname = 'loc%41lhost' 
FAIL URL: Setting <file://hi/x>.hostname = '' assert_equals: expected "file:///x" but got "file://hi/x"
FAIL <a>: Setting <file://hi/x>.hostname = '' assert_equals: expected "file:///x" but got "file://hi/x"
FAIL <area>: Setting <file://hi/x>.hostname = '' assert_equals: expected "file:///x" but got "file://hi/x"
PASS URL: Setting <sc://test@test/>.hostname = '' 
PASS <a>: Setting <sc://test@test/>.hostname = '' 
PASS <area>: Setting <sc://test@test/>.hostname = '' 
PASS URL: Setting <sc://test:12/>.hostname = '' 
PASS <a>: Setting <sc://test:12/>.hostname = '' 
PASS <area>: Setting <sc://test:12/>.hostname = '' 
PASS URL: Setting <http://example.net>.port = '8080' 
PASS <a>: Setting <http://example.net>.port = '8080' 
PASS <area>: Setting <http://example.net>.port = '8080' 
PASS URL: Setting <http://example.net:8080>.port = '' Port number is removed if empty is the new value 
PASS <a>: Setting <http://example.net:8080>.port = '' Port number is removed if empty is the new value 
PASS <area>: Setting <http://example.net:8080>.port = '' Port number is removed if empty is the new value 
PASS URL: Setting <http://example.net:8080>.port = '80' Default port number is removed 
PASS <a>: Setting <http://example.net:8080>.port = '80' Default port number is removed 
PASS <area>: Setting <http://example.net:8080>.port = '80' Default port number is removed 
PASS URL: Setting <https://example.net:4433>.port = '443' Default port number is removed 
PASS <a>: Setting <https://example.net:4433>.port = '443' Default port number is removed 
PASS <area>: Setting <https://example.net:4433>.port = '443' Default port number is removed 
PASS URL: Setting <https://example.net>.port = '80' Default port number is only removed for the relevant scheme 
PASS <a>: Setting <https://example.net>.port = '80' Default port number is only removed for the relevant scheme 
PASS <area>: Setting <https://example.net>.port = '80' Default port number is only removed for the relevant scheme 
PASS URL: Setting <http://example.net/path>.port = '8080/stuff' Stuff after a / delimiter is ignored 
PASS <a>: Setting <http://example.net/path>.port = '8080/stuff' Stuff after a / delimiter is ignored 
PASS <area>: Setting <http://example.net/path>.port = '8080/stuff' Stuff after a / delimiter is ignored 
PASS URL: Setting <http://example.net/path>.port = '8080?stuff' Stuff after a ? delimiter is ignored 
PASS <a>: Setting <http://example.net/path>.port = '8080?stuff' Stuff after a ? delimiter is ignored 
PASS <area>: Setting <http://example.net/path>.port = '8080?stuff' Stuff after a ? delimiter is ignored 
PASS URL: Setting <http://example.net/path>.port = '8080#stuff' Stuff after a # delimiter is ignored 
PASS <a>: Setting <http://example.net/path>.port = '8080#stuff' Stuff after a # delimiter is ignored 
PASS <area>: Setting <http://example.net/path>.port = '8080#stuff' Stuff after a # delimiter is ignored 
PASS URL: Setting <http://example.net/path>.port = '8080\stuff' Stuff after a \ delimiter is ignored for special schemes 
PASS <a>: Setting <http://example.net/path>.port = '8080\stuff' Stuff after a \ delimiter is ignored for special schemes 
PASS <area>: Setting <http://example.net/path>.port = '8080\stuff' Stuff after a \ delimiter is ignored for special schemes 
PASS URL: Setting <view-source+http://example.net/path>.port = '8080stuff2' Anything other than ASCII digit stops the port parser in a setter but is not an error 
PASS <a>: Setting <view-source+http://example.net/path>.port = '8080stuff2' Anything other than ASCII digit stops the port parser in a setter but is not an error 
PASS <area>: Setting <view-source+http://example.net/path>.port = '8080stuff2' Anything other than ASCII digit stops the port parser in a setter but is not an error 
PASS URL: Setting <http://example.net/path>.port = '8080stuff2' Anything other than ASCII digit stops the port parser in a setter but is not an error 
PASS <a>: Setting <http://example.net/path>.port = '8080stuff2' Anything other than ASCII digit stops the port parser in a setter but is not an error 
PASS <area>: Setting <http://example.net/path>.port = '8080stuff2' Anything other than ASCII digit stops the port parser in a setter but is not an error 
PASS URL: Setting <http://example.net/path>.port = '8080+2' Anything other than ASCII digit stops the port parser in a setter but is not an error 
PASS <a>: Setting <http://example.net/path>.port = '8080+2' Anything other than ASCII digit stops the port parser in a setter but is not an error 
PASS <area>: Setting <http://example.net/path>.port = '8080+2' Anything other than ASCII digit stops the port parser in a setter but is not an error 
PASS URL: Setting <http://example.net/path>.port = '65535' Port numbers are 16 bit integers 
PASS <a>: Setting <http://example.net/path>.port = '65535' Port numbers are 16 bit integers 
PASS <area>: Setting <http://example.net/path>.port = '65535' Port numbers are 16 bit integers 
PASS URL: Setting <http://example.net:8080/path>.port = '65536' Port numbers are 16 bit integers, overflowing is an error 
PASS <a>: Setting <http://example.net:8080/path>.port = '65536' Port numbers are 16 bit integers, overflowing is an error 
PASS <area>: Setting <http://example.net:8080/path>.port = '65536' Port numbers are 16 bit integers, overflowing is an error 
PASS URL: Setting <non-special://example.net:8080/path>.port = '65536' Port numbers are 16 bit integers, overflowing is an error 
PASS <a>: Setting <non-special://example.net:8080/path>.port = '65536' Port numbers are 16 bit integers, overflowing is an error 
PASS <area>: Setting <non-special://example.net:8080/path>.port = '65536' Port numbers are 16 bit integers, overflowing is an error 
PASS URL: Setting <file://test/>.port = '12' 
PASS <a>: Setting <file://test/>.port = '12' 
PASS <area>: Setting <file://test/>.port = '12' 
PASS URL: Setting <file://localhost/>.port = '12' 
PASS <a>: Setting <file://localhost/>.port = '12' 
PASS <area>: Setting <file://localhost/>.port = '12' 
PASS URL: Setting <non-base:value>.port = '12' 
PASS <a>: Setting <non-base:value>.port = '12' 
PASS <area>: Setting <non-base:value>.port = '12' 
PASS URL: Setting <sc:///>.port = '12' 
PASS <a>: Setting <sc:///>.port = '12' 
PASS <area>: Setting <sc:///>.port = '12' 
PASS URL: Setting <sc://x/>.port = '12' 
PASS <a>: Setting <sc://x/>.port = '12' 
PASS <area>: Setting <sc://x/>.port = '12' 
PASS URL: Setting <javascript://x/>.port = '12' 
PASS <a>: Setting <javascript://x/>.port = '12' 
PASS <area>: Setting <javascript://x/>.port = '12' 
PASS URL: Setting <mailto:me@example.net>.pathname = '/foo' Cannot-be-a-base don’t have a path 
PASS <a>: Setting <mailto:me@example.net>.pathname = '/foo' Cannot-be-a-base don’t have a path 
PASS <area>: Setting <mailto:me@example.net>.pathname = '/foo' Cannot-be-a-base don’t have a path 
PASS URL: Setting <unix:/run/foo.socket?timeout=10>.pathname = '/var/log/../run/bar.socket' 
PASS <a>: Setting <unix:/run/foo.socket?timeout=10>.pathname = '/var/log/../run/bar.socket' 
PASS <area>: Setting <unix:/run/foo.socket?timeout=10>.pathname = '/var/log/../run/bar.socket' 
PASS URL: Setting <https://example.net#nav>.pathname = 'home' 
PASS <a>: Setting <https://example.net#nav>.pathname = 'home' 
PASS <area>: Setting <https://example.net#nav>.pathname = 'home' 
PASS URL: Setting <https://example.net#nav>.pathname = '../home' 
PASS <a>: Setting <https://example.net#nav>.pathname = '../home' 
PASS <area>: Setting <https://example.net#nav>.pathname = '../home' 
FAIL URL: Setting <http://example.net/home?lang=fr#nav>.pathname = '\a\%2E\b\%2e.\c' \ is a segment delimiter for 'special' URLs assert_equals: expected "http://example.net/a/c?lang=fr#nav" but got "http://example.net//a/c?lang=fr#nav"
FAIL <a>: Setting <http://example.net/home?lang=fr#nav>.pathname = '\a\%2E\b\%2e.\c' \ is a segment delimiter for 'special' URLs assert_equals: expected "http://example.net/a/c?lang=fr#nav" but got "http://example.net//a/c?lang=fr#nav"
FAIL <area>: Setting <http://example.net/home?lang=fr#nav>.pathname = '\a\%2E\b\%2e.\c' \ is a segment delimiter for 'special' URLs assert_equals: expected "http://example.net/a/c?lang=fr#nav" but got "http://example.net//a/c?lang=fr#nav"
PASS URL: Setting <view-source+http://example.net/home?lang=fr#nav>.pathname = '\a\%2E\b\%2e.\c' \ is *not* a segment delimiter for non-'special' URLs 
PASS <a>: Setting <view-source+http://example.net/home?lang=fr#nav>.pathname = '\a\%2E\b\%2e.\c' \ is *not* a segment delimiter for non-'special' URLs 
PASS <area>: Setting <view-source+http://example.net/home?lang=fr#nav>.pathname = '\a\%2E\b\%2e.\c' \ is *not* a segment delimiter for non-'special' URLs 
FAIL URL: Setting <a:/>.pathname = '\0	
\r !"#$%&'()*+,-./09:;<=>?@AZ[\]^_`az{|}~Éé' UTF-8 percent encoding with the default encode set. Tabs and newlines are removed. assert_equals: expected "a:/%00%01%1F%20!%22%23$%&'()*+,-./09:;%3C=%3E%3F@AZ[\\]^_%60az%7B|%7D~%7F%C2%80%C2%81%C3%89%C3%A9" but got "a:/%00%01%1F%20!%22%23$%&'()*+,-./09:;%3C=%3E%3F@AZ[\\]^_%60az%7B|%7D~%7F%C3%82%C2%80%C3%82%C2%81%C3%83%C2%89%C3%83%C2%A9"
FAIL <a>: Setting <a:/>.pathname = '\0	
\r !"#$%&'()*+,-./09:;<=>?@AZ[\]^_`az{|}~Éé' UTF-8 percent encoding with the default encode set. Tabs and newlines are removed. assert_equals: expected "a:/%00%01%1F%20!%22%23$%&'()*+,-./09:;%3C=%3E%3F@AZ[\\]^_%60az%7B|%7D~%7F%C2%80%C2%81%C3%89%C3%A9" but got "a:/%00%01%1F%20!%22%23$%&'()*+,-./09:;%3C=%3E%3F@AZ[\\]^_%60az%7B|%7D~%7F%C3%82%C2%80%C3%82%C2%81%C3%83%C2%89%C3%83%C2%A9"
FAIL <area>: Setting <a:/>.pathname = '\0	
\r !"#$%&'()*+,-./09:;<=>?@AZ[\]^_`az{|}~Éé' UTF-8 percent encoding with the default encode set. Tabs and newlines are removed. assert_equals: expected "a:/%00%01%1F%20!%22%23$%&'()*+,-./09:;%3C=%3E%3F@AZ[\\]^_%60az%7B|%7D~%7F%C2%80%C2%81%C3%89%C3%A9" but got "a:/%00%01%1F%20!%22%23$%&'()*+,-./09:;%3C=%3E%3F@AZ[\\]^_%60az%7B|%7D~%7F%C3%82%C2%80%C3%82%C2%81%C3%83%C2%89%C3%83%C2%A9"
PASS URL: Setting <http://example.net>.pathname = '%2e%2E%c3%89té' Bytes already percent-encoded are left as-is, including %2E outside dotted segments. 
PASS <a>: Setting <http://example.net>.pathname = '%2e%2E%c3%89té' Bytes already percent-encoded are left as-is, including %2E outside dotted segments. 
PASS <area>: Setting <http://example.net>.pathname = '%2e%2E%c3%89té' Bytes already percent-encoded are left as-is, including %2E outside dotted segments. 
PASS URL: Setting <http://example.net>.pathname = '?' ? needs to be encoded 
PASS <a>: Setting <http://example.net>.pathname = '?' ? needs to be encoded 
PASS <area>: Setting <http://example.net>.pathname = '?' ? needs to be encoded 
PASS URL: Setting <http://example.net>.pathname = '#' # needs to be encoded 
PASS <a>: Setting <http://example.net>.pathname = '#' # needs to be encoded 
PASS <area>: Setting <http://example.net>.pathname = '#' # needs to be encoded 
PASS URL: Setting <sc://example.net>.pathname = '?' ? needs to be encoded, non-special scheme 
PASS <a>: Setting <sc://example.net>.pathname = '?' ? needs to be encoded, non-special scheme 
PASS <area>: Setting <sc://example.net>.pathname = '?' ? needs to be encoded, non-special scheme 
PASS URL: Setting <sc://example.net>.pathname = '#' # needs to be encoded, non-special scheme 
PASS <a>: Setting <sc://example.net>.pathname = '#' # needs to be encoded, non-special scheme 
PASS <area>: Setting <sc://example.net>.pathname = '#' # needs to be encoded, non-special scheme 
FAIL URL: Setting <file://monkey/>.pathname = '\\' File URLs and (back)slashes assert_equals: expected "file://monkey/" but got "file://monkey///"
FAIL <a>: Setting <file://monkey/>.pathname = '\\' File URLs and (back)slashes assert_equals: expected "file://monkey/" but got "file://monkey///"
FAIL <area>: Setting <file://monkey/>.pathname = '\\' File URLs and (back)slashes assert_equals: expected "file://monkey/" but got "file://monkey///"
FAIL URL: Setting <file:///unicorn>.pathname = '//\/' File URLs and (back)slashes assert_equals: expected "file:///" but got "file://////"
FAIL <a>: Setting <file:///unicorn>.pathname = '//\/' File URLs and (back)slashes assert_equals: expected "file:///" but got "file://////"
FAIL <area>: Setting <file:///unicorn>.pathname = '//\/' File URLs and (back)slashes assert_equals: expected "file:///" but got "file://////"
FAIL URL: Setting <file:///unicorn>.pathname = '//monkey/..//' File URLs and (back)slashes assert_equals: expected "file:///" but got "file://///"
FAIL <a>: Setting <file:///unicorn>.pathname = '//monkey/..//' File URLs and (back)slashes assert_equals: expected "file:///" but got "file://///"
FAIL <area>: Setting <file:///unicorn>.pathname = '//monkey/..//' File URLs and (back)slashes assert_equals: expected "file:///" but got "file://///"
PASS URL: Setting <https://example.net#nav>.search = 'lang=fr' 
PASS <a>: Setting <https://example.net#nav>.search = 'lang=fr' 
PASS <area>: Setting <https://example.net#nav>.search = 'lang=fr' 
PASS URL: Setting <https://example.net?lang=en-US#nav>.search = 'lang=fr' 
PASS <a>: Setting <https://example.net?lang=en-US#nav>.search = 'lang=fr' 
PASS <area>: Setting <https://example.net?lang=en-US#nav>.search = 'lang=fr' 
PASS URL: Setting <https://example.net?lang=en-US#nav>.search = '?lang=fr' 
PASS <a>: Setting <https://example.net?lang=en-US#nav>.search = '?lang=fr' 
PASS <area>: Setting <https://example.net?lang=en-US#nav>.search = '?lang=fr' 
FAIL URL: Setting <https://example.net?lang=en-US#nav>.search = '??lang=fr' assert_equals: expected "https://example.net/??lang=fr#nav" but got "https://example.net/?lang=fr#nav"
FAIL <a>: Setting <https://example.net?lang=en-US#nav>.search = '??lang=fr' assert_equals: expected "https://example.net/??lang=fr#nav" but got "https://example.net/?lang=fr#nav"
FAIL <area>: Setting <https://example.net?lang=en-US#nav>.search = '??lang=fr' assert_equals: expected "https://example.net/??lang=fr#nav" but got "https://example.net/?lang=fr#nav"
PASS URL: Setting <https://example.net?lang=en-US#nav>.search = '?' 
PASS <a>: Setting <https://example.net?lang=en-US#nav>.search = '?' 
PASS <area>: Setting <https://example.net?lang=en-US#nav>.search = '?' 
PASS URL: Setting <https://example.net?lang=en-US#nav>.search = '' 
PASS <a>: Setting <https://example.net?lang=en-US#nav>.search = '' 
PASS <area>: Setting <https://example.net?lang=en-US#nav>.search = '' 
PASS URL: Setting <https://example.net?lang=en-US>.search = '' 
PASS <a>: Setting <https://example.net?lang=en-US>.search = '' 
PASS <area>: Setting <https://example.net?lang=en-US>.search = '' 
PASS URL: Setting <https://example.net>.search = '' 
PASS <a>: Setting <https://example.net>.search = '' 
PASS <area>: Setting <https://example.net>.search = '' 
PASS URL: Setting <a:/>.search = '\0	
\r !"#$%&'()*+,-./09:;<=>?@AZ[\]^_`az{|}~Éé' UTF-8 percent encoding with the query encode set. Tabs and newlines are removed. 
PASS <a>: Setting <a:/>.search = '\0	
\r !"#$%&'()*+,-./09:;<=>?@AZ[\]^_`az{|}~Éé' UTF-8 percent encoding with the query encode set. Tabs and newlines are removed. 
PASS <area>: Setting <a:/>.search = '\0	
\r !"#$%&'()*+,-./09:;<=>?@AZ[\]^_`az{|}~Éé' UTF-8 percent encoding with the query encode set. Tabs and newlines are removed. 
PASS URL: Setting <http://example.net>.search = '%c3%89té' Bytes already percent-encoded are left as-is 
PASS <a>: Setting <http://example.net>.search = '%c3%89té' Bytes already percent-encoded are left as-is 
PASS <area>: Setting <http://example.net>.search = '%c3%89té' Bytes already percent-encoded are left as-is 
PASS URL: Setting <https://example.net>.hash = 'main' 
PASS <a>: Setting <https://example.net>.hash = 'main' 
PASS <area>: Setting <https://example.net>.hash = 'main' 
PASS URL: Setting <https://example.net#nav>.hash = 'main' 
PASS <a>: Setting <https://example.net#nav>.hash = 'main' 
PASS <area>: Setting <https://example.net#nav>.hash = 'main' 
PASS URL: Setting <https://example.net?lang=en-US>.hash = '##nav' 
PASS <a>: Setting <https://example.net?lang=en-US>.hash = '##nav' 
PASS <area>: Setting <https://example.net?lang=en-US>.hash = '##nav' 
PASS URL: Setting <https://example.net?lang=en-US#nav>.hash = '#main' 
PASS <a>: Setting <https://example.net?lang=en-US#nav>.hash = '#main' 
PASS <area>: Setting <https://example.net?lang=en-US#nav>.hash = '#main' 
FAIL URL: Setting <https://example.net?lang=en-US#nav>.hash = '#' assert_equals: expected "https://example.net/?lang=en-US#" but got "https://example.net/?lang=en-US"
FAIL <a>: Setting <https://example.net?lang=en-US#nav>.hash = '#' assert_equals: expected "https://example.net/?lang=en-US#" but got "https://example.net/?lang=en-US"
FAIL <area>: Setting <https://example.net?lang=en-US#nav>.hash = '#' assert_equals: expected "https://example.net/?lang=en-US#" but got "https://example.net/?lang=en-US"
PASS URL: Setting <https://example.net?lang=en-US#nav>.hash = '' 
PASS <a>: Setting <https://example.net?lang=en-US#nav>.hash = '' 
PASS <area>: Setting <https://example.net?lang=en-US#nav>.hash = '' 
FAIL URL: Setting <http://example.net>.hash = '#foo bar' assert_equals: expected "http://example.net/#foo%20bar" but got "http://example.net/#foo bar"
FAIL <a>: Setting <http://example.net>.hash = '#foo bar' assert_equals: expected "http://example.net/#foo%20bar" but got "http://example.net/#foo bar"
FAIL <area>: Setting <http://example.net>.hash = '#foo bar' assert_equals: expected "http://example.net/#foo%20bar" but got "http://example.net/#foo bar"
FAIL URL: Setting <http://example.net>.hash = '#foo"bar' assert_equals: expected "http://example.net/#foo%22bar" but got "http://example.net/#foo\"bar"
FAIL <a>: Setting <http://example.net>.hash = '#foo"bar' assert_equals: expected "http://example.net/#foo%22bar" but got "http://example.net/#foo\"bar"
FAIL <area>: Setting <http://example.net>.hash = '#foo"bar' assert_equals: expected "http://example.net/#foo%22bar" but got "http://example.net/#foo\"bar"
FAIL URL: Setting <http://example.net>.hash = '#foo<bar' assert_equals: expected "http://example.net/#foo%3Cbar" but got "http://example.net/#foo<bar"
FAIL <a>: Setting <http://example.net>.hash = '#foo<bar' assert_equals: expected "http://example.net/#foo%3Cbar" but got "http://example.net/#foo<bar"
FAIL <area>: Setting <http://example.net>.hash = '#foo<bar' assert_equals: expected "http://example.net/#foo%3Cbar" but got "http://example.net/#foo<bar"
FAIL URL: Setting <http://example.net>.hash = '#foo>bar' assert_equals: expected "http://example.net/#foo%3Ebar" but got "http://example.net/#foo>bar"
FAIL <a>: Setting <http://example.net>.hash = '#foo>bar' assert_equals: expected "http://example.net/#foo%3Ebar" but got "http://example.net/#foo>bar"
FAIL <area>: Setting <http://example.net>.hash = '#foo>bar' assert_equals: expected "http://example.net/#foo%3Ebar" but got "http://example.net/#foo>bar"
FAIL URL: Setting <http://example.net>.hash = '#foo`bar' assert_equals: expected "http://example.net/#foo%60bar" but got "http://example.net/#foo`bar"
FAIL <a>: Setting <http://example.net>.hash = '#foo`bar' assert_equals: expected "http://example.net/#foo%60bar" but got "http://example.net/#foo`bar"
FAIL <area>: Setting <http://example.net>.hash = '#foo`bar' assert_equals: expected "http://example.net/#foo%60bar" but got "http://example.net/#foo`bar"
FAIL URL: Setting <a:/>.hash = '\0	
\r !"#$%&'()*+,-./09:;<=>?@AZ[\]^_`az{|}~Éé' Simple percent-encoding; nuls, tabs, and newlines are removed assert_equals: expected "a:/#%01%1F%20!%22#$%&'()*+,-./09:;%3C=%3E?@AZ[\\]^_%60az{|}~%7F%C2%80%C2%81%C3%89%C3%A9" but got "a:/#%00%01%1F !\"#$%&'()*+,-./09:;<=>?@AZ[\\]^_`az{|}~%7F%C2%80%C2%81%C3%89%C3%A9"
FAIL <a>: Setting <a:/>.hash = '\0	
\r !"#$%&'()*+,-./09:;<=>?@AZ[\]^_`az{|}~Éé' Simple percent-encoding; nuls, tabs, and newlines are removed assert_equals: expected "a:/#%01%1F%20!%22#$%&'()*+,-./09:;%3C=%3E?@AZ[\\]^_%60az{|}~%7F%C2%80%C2%81%C3%89%C3%A9" but got "a:/#%00%01%1F !\"#$%&'()*+,-./09:;<=>?@AZ[\\]^_`az{|}~%7F%C2%80%C2%81%C3%89%C3%A9"
FAIL <area>: Setting <a:/>.hash = '\0	
\r !"#$%&'()*+,-./09:;<=>?@AZ[\]^_`az{|}~Éé' Simple percent-encoding; nuls, tabs, and newlines are removed assert_equals: expected "a:/#%01%1F%20!%22#$%&'()*+,-./09:;%3C=%3E?@AZ[\\]^_%60az{|}~%7F%C2%80%C2%81%C3%89%C3%A9" but got "a:/#%00%01%1F !\"#$%&'()*+,-./09:;<=>?@AZ[\\]^_`az{|}~%7F%C2%80%C2%81%C3%89%C3%A9"
PASS URL: Setting <http://example.net>.hash = '%c3%89té' Bytes already percent-encoded are left as-is 
PASS <a>: Setting <http://example.net>.hash = '%c3%89té' Bytes already percent-encoded are left as-is 
PASS <area>: Setting <http://example.net>.hash = '%c3%89té' Bytes already percent-encoded are left as-is 
PASS URL: Setting <javascript:alert(1)>.hash = 'castle' 
PASS <a>: Setting <javascript:alert(1)>.hash = 'castle' 
PASS <area>: Setting <javascript:alert(1)>.hash = 'castle' 

