
Harness Error (TIMEOUT), message = null

TIMEOUT Service worker test setup Test timed out
FAIL ReadableStream with byte source: read()ing from a closed stream still transfers the buffer assert_not_equals: a different ArrayBuffer must underlie the value got disallowed value object "[object ArrayBuffer]"
FAIL ReadableStream with byte source: read()ing from a stream with queued chunks still transfers the buffer assert_not_equals: a different ArrayBuffer must underlie the value got disallowed value object "[object ArrayBuffer]"
FAIL ReadableStream with byte source: enqueuing an already-detached buffer throws assert_throws: enqueuing an already-detached buffer must throw function "() => c.enqueue(view)" did not throw
TIMEOUT ReadableStream with byte source: reading into an already-detached buffer rejects Test timed out
FAIL ReadableStream with byte source: respond() throws if the BYOB request's buffer has been detached (in the readable state) assert_throws: respond() must throw if the corresponding view has become detached function "() => c.byobRequest.respond(1)" did not throw
FAIL ReadableStream with byte source: respond() throws if the BYOB request's buffer has been detached (in the closed state) assert_throws: respond() must throw if the corresponding view has become detached function "() => c.byobRequest.respond(0)" did not throw
FAIL ReadableStream with byte source: respondWithNewView() throws if the supplied view's buffer has been detached (in the readable state) assert_throws: respondWithNewView() must throw if passed a detached view function "() => c.byobRequest.respondWithNewView(view)" did not throw
FAIL ReadableStream with byte source: respondWithNewView() throws if the supplied view's buffer has been detached (in the closed state) assert_throws: respondWithNewView() must throw if passed a (zero-length) view whose buffer has been detached function "() => c.byobRequest.respondWithNewView(zeroLengthView)" threw object "RangeError: Invalid value for view.byteLength" ("RangeError") expected object "TypeError" ("TypeError")

