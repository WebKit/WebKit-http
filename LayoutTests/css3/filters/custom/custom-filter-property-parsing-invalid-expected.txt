Test the parsing of custom() function of the -webkit-filter property.

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".



Empty function : custom()
PASS cssRule.type is 1
PASS declaration.length is 0
PASS declaration.getPropertyValue('-webkit-filter') is null

No values 1 : custom(,)
PASS cssRule.type is 1
PASS declaration.length is 0
PASS declaration.getPropertyValue('-webkit-filter') is null

No values 2 : custom(,,)
PASS cssRule.type is 1
PASS declaration.length is 0
PASS declaration.getPropertyValue('-webkit-filter') is null

Too many shaders 1 : custom(url(shader1) url(shader2) url(shader2))
PASS cssRule.type is 1
PASS declaration.length is 0
PASS declaration.getPropertyValue('-webkit-filter') is null

Too many shaders 2 : custom(none none none)
PASS cssRule.type is 1
PASS declaration.length is 0
PASS declaration.getPropertyValue('-webkit-filter') is null

Too many shaders 3 : custom(none url(shader1) url(shader2) url(shader2))
PASS cssRule.type is 1
PASS declaration.length is 0
PASS declaration.getPropertyValue('-webkit-filter') is null

Mix function as vertex shader : custom(mix(url(shader)))
PASS cssRule.type is 1
PASS declaration.length is 0
PASS declaration.getPropertyValue('-webkit-filter') is null

Mix function with wrong name : custom(none fn(url(shader)))
PASS cssRule.type is 1
PASS declaration.length is 0
PASS declaration.getPropertyValue('-webkit-filter') is null

Mix function with 0 args : custom(none mix())
PASS cssRule.type is 1
PASS declaration.length is 0
PASS declaration.getPropertyValue('-webkit-filter') is null

Mix function with first arg not a URI : custom(none mix(none))
PASS cssRule.type is 1
PASS declaration.length is 0
PASS declaration.getPropertyValue('-webkit-filter') is null

Mix function with second arg not a blend mode or alpha compositing mode : custom(none mix(url(shader) 0))
PASS cssRule.type is 1
PASS declaration.length is 0
PASS declaration.getPropertyValue('-webkit-filter') is null

Mix function with third arg not a blend mode or alpha compositing mode : custom(none mix(url(shader) normal 0))
PASS cssRule.type is 1
PASS declaration.length is 0
PASS declaration.getPropertyValue('-webkit-filter') is null

Mix function with two blend modes : custom(none mix(url(shader) multiply screen))
PASS cssRule.type is 1
PASS declaration.length is 0
PASS declaration.getPropertyValue('-webkit-filter') is null

Mix function with two alpha compositing modes : custom(none mix(url(shader) source-over destination-over))
PASS cssRule.type is 1
PASS declaration.length is 0
PASS declaration.getPropertyValue('-webkit-filter') is null

Mix function with alpha compositing mode 'plus-darker', which should only apply to -webkit-background-composite : custom(none mix(url(shader) plus-darker))
PASS cssRule.type is 1
PASS declaration.length is 0
PASS declaration.getPropertyValue('-webkit-filter') is null

Mix function with alpha compositing mode 'plus-lighter', which should only apply to -webkit-background-composite : custom(none mix(url(shader) plus-lighter))
PASS cssRule.type is 1
PASS declaration.length is 0
PASS declaration.getPropertyValue('-webkit-filter') is null

Mix function with alpha compositing mode 'highlight', which should only apply to -webkit-background-composite : custom(none mix(url(shader) highlight))
PASS cssRule.type is 1
PASS declaration.length is 0
PASS declaration.getPropertyValue('-webkit-filter') is null

Mix function with 4 args : custom(none mix(url(shader) multiply clear normal))
PASS cssRule.type is 1
PASS declaration.length is 0
PASS declaration.getPropertyValue('-webkit-filter') is null

Mix function with comma separators : custom(none mix(url(shader), multiply, clear))
PASS cssRule.type is 1
PASS declaration.length is 0
PASS declaration.getPropertyValue('-webkit-filter') is null

Mix function with comma terminator : custom(none mix(url(shader), multiply clear,))
PASS cssRule.type is 1
PASS declaration.length is 0
PASS declaration.getPropertyValue('-webkit-filter') is null

Mix function with one comma : custom(none mix(,))
PASS cssRule.type is 1
PASS declaration.length is 0
PASS declaration.getPropertyValue('-webkit-filter') is null

No shader : custom(none, 10 20)
PASS cssRule.type is 1
PASS declaration.length is 0
PASS declaration.getPropertyValue('-webkit-filter') is null

Too many mesh sizes : custom(none, 10 20 30)
PASS cssRule.type is 1
PASS declaration.length is 0
PASS declaration.getPropertyValue('-webkit-filter') is null

Wrong mesh-box type - 'padding' : custom(url(shader), padding)
PASS cssRule.type is 1
PASS declaration.length is 0
PASS declaration.getPropertyValue('-webkit-filter') is null

Wrong mesh-box type - 'none' : custom(url(shader), none)
PASS cssRule.type is 1
PASS declaration.length is 0
PASS declaration.getPropertyValue('-webkit-filter') is null

More mesh-box types : custom(url(shader), padding-box filter-box)
PASS cssRule.type is 1
PASS declaration.length is 0
PASS declaration.getPropertyValue('-webkit-filter') is null

Wrong order for mesh-detached and mesh-box type : custom(url(shader), detached padding-box)
PASS cssRule.type is 1
PASS declaration.length is 0
PASS declaration.getPropertyValue('-webkit-filter') is null

Wrong order for mesh size and mesh-box type : custom(url(shader), padding-box 10)
PASS cssRule.type is 1
PASS declaration.length is 0
PASS declaration.getPropertyValue('-webkit-filter') is null

Too many mesh sizes with mesh-box type : custom(url(shader), 20 30 40 padding-box)
PASS cssRule.type is 1
PASS declaration.length is 0
PASS declaration.getPropertyValue('-webkit-filter') is null

Invalid comma between mesh-sizes : custom(url(shader), 20, 40 padding-box)
PASS cssRule.type is 1
PASS declaration.length is 0
PASS declaration.getPropertyValue('-webkit-filter') is null

Invalid comma before mesh type : custom(url(shader), 20, padding-box)
PASS cssRule.type is 1
PASS declaration.length is 0
PASS declaration.getPropertyValue('-webkit-filter') is null

No mesh parameter : custom(url(shader), )
PASS cssRule.type is 1
PASS declaration.length is 0
PASS declaration.getPropertyValue('-webkit-filter') is null

Wrong mesh type - correct identifier is 'detached' : custom(url(shader), detach)
PASS cssRule.type is 1
PASS declaration.length is 0
PASS declaration.getPropertyValue('-webkit-filter') is null

No mesh size : custom(url(shader), , p1 2)
PASS cssRule.type is 1
PASS declaration.length is 0
PASS declaration.getPropertyValue('-webkit-filter') is null

Negative single mesh size : custom(url(shader), -10)
PASS cssRule.type is 1
PASS declaration.length is 0
PASS declaration.getPropertyValue('-webkit-filter') is null

Negative both mesh sizes : custom(url(shader), -10 -10)
PASS cssRule.type is 1
PASS declaration.length is 0
PASS declaration.getPropertyValue('-webkit-filter') is null

Negative and positive mesh size : custom(url(shader), -10 10)
PASS cssRule.type is 1
PASS declaration.length is 0
PASS declaration.getPropertyValue('-webkit-filter') is null

Zero single mesh size : custom(url(shader), 0)
PASS cssRule.type is 1
PASS declaration.length is 0
PASS declaration.getPropertyValue('-webkit-filter') is null

Zero both mesh sizes : custom(url(shader), 0 0)
PASS cssRule.type is 1
PASS declaration.length is 0
PASS declaration.getPropertyValue('-webkit-filter') is null

0 and 1 mesh sizes : custom(url(shader), 0 1)
PASS cssRule.type is 1
PASS declaration.length is 0
PASS declaration.getPropertyValue('-webkit-filter') is null

Too many parameter values : custom(url(shader), p1 1 2 3 4 5)
PASS cssRule.type is 1
PASS declaration.length is 0
PASS declaration.getPropertyValue('-webkit-filter') is null

Invalid parameter types : custom(url(shader), p1 1.0 2.0 'text')
PASS cssRule.type is 1
PASS declaration.length is 0
PASS declaration.getPropertyValue('-webkit-filter') is null

No parameter value 1 : custom(url(shader), p1)
PASS cssRule.type is 1
PASS declaration.length is 0
PASS declaration.getPropertyValue('-webkit-filter') is null

No parameter value 2 : custom(url(shader), p1, p2, p3)
PASS cssRule.type is 1
PASS declaration.length is 0
PASS declaration.getPropertyValue('-webkit-filter') is null

One invalid transform : custom(none url(shader), someId invalid_rotate(0deg))
PASS cssRule.type is 1
PASS declaration.length is 0
PASS declaration.getPropertyValue('-webkit-filter') is null

Multiple invalid transforms : custom(none url(shader), someId invalid_rotate(0deg) invalid_perspective(0))
PASS cssRule.type is 1
PASS declaration.length is 0
PASS declaration.getPropertyValue('-webkit-filter') is null

Invalid transform between valid ones : custom(none url(shader), someId rotate(0deg) invalid_rotate(0deg) perspective(0))
PASS cssRule.type is 1
PASS declaration.length is 0
PASS declaration.getPropertyValue('-webkit-filter') is null

Valid transform between invalid ones : custom(none url(shader), someId invalid_rotate(0deg) perspective(0) another_invalid(0))
PASS cssRule.type is 1
PASS declaration.length is 0
PASS declaration.getPropertyValue('-webkit-filter') is null

Valid transform without leading comma : custom(none url(shader) someId perspective(0))
PASS cssRule.type is 1
PASS declaration.length is 0
PASS declaration.getPropertyValue('-webkit-filter') is null

Valid transform with trailing comma : custom(none url(shader), someId perspective(0),)
PASS cssRule.type is 1
PASS declaration.length is 0
PASS declaration.getPropertyValue('-webkit-filter') is null

Valid transform with trailing comma and without leading comma : custom(none url(shader) someId perspective(0),)
PASS cssRule.type is 1
PASS declaration.length is 0
PASS declaration.getPropertyValue('-webkit-filter') is null

Invalid transform with trailing comma : custom(none url(shader), someId invalid_rotate(0deg),)
PASS cssRule.type is 1
PASS declaration.length is 0
PASS declaration.getPropertyValue('-webkit-filter') is null

Invalid transform without leading comma : custom(none url(shader) someId invalid_rotate(0deg))
PASS cssRule.type is 1
PASS declaration.length is 0
PASS declaration.getPropertyValue('-webkit-filter') is null

Empty transform (only the id) : custom(none url(shader), someId)
PASS cssRule.type is 1
PASS declaration.length is 0
PASS declaration.getPropertyValue('-webkit-filter') is null

Empty transform (without the id) : custom(none url(shader),)
PASS cssRule.type is 1
PASS declaration.length is 0
PASS declaration.getPropertyValue('-webkit-filter') is null

Empty transform (two empty commas) : custom(none url(shader),,)
PASS cssRule.type is 1
PASS declaration.length is 0
PASS declaration.getPropertyValue('-webkit-filter') is null

Valid transform with invalid characters : custom(none url(shader),someId rotate(0deg) *.-,)
PASS cssRule.type is 1
PASS declaration.length is 0
PASS declaration.getPropertyValue('-webkit-filter') is null

Empty array() : custom(none url(shader), id array())
PASS cssRule.type is 1
PASS declaration.length is 0
PASS declaration.getPropertyValue('-webkit-filter') is null

One comma in array() : custom(none url(shader), id array(,))
PASS cssRule.type is 1
PASS declaration.length is 0
PASS declaration.getPropertyValue('-webkit-filter') is null

Multile commas in array() : custom(none url(shader), id array(,,,))
PASS cssRule.type is 1
PASS declaration.length is 0
PASS declaration.getPropertyValue('-webkit-filter') is null

Multiple commas with a value in array() : custom(none url(shader), id array(,,1,))
PASS cssRule.type is 1
PASS declaration.length is 0
PASS declaration.getPropertyValue('-webkit-filter') is null

One comma followed by a negative value in array() : custom(none url(shader), id array(,-4))
PASS cssRule.type is 1
PASS declaration.length is 0
PASS declaration.getPropertyValue('-webkit-filter') is null

One comma followed by a value in array() : custom(none url(shader), id array(,4))
PASS cssRule.type is 1
PASS declaration.length is 0
PASS declaration.getPropertyValue('-webkit-filter') is null

One negative value followed by a comma in array() : custom(none url(shader), id array(-4,))
PASS cssRule.type is 1
PASS declaration.length is 0
PASS declaration.getPropertyValue('-webkit-filter') is null

One value followed by a comma in array() : custom(none url(shader), id array(4,))
PASS cssRule.type is 1
PASS declaration.length is 0
PASS declaration.getPropertyValue('-webkit-filter') is null

A series of correct values followed by a comma in array() : custom(none url(shader), id array(1, 2, 3, 4,))
PASS cssRule.type is 1
PASS declaration.length is 0
PASS declaration.getPropertyValue('-webkit-filter') is null

A series of correct values followed by a letter in array() : custom(none url(shader), id array(1, 2, 3, 4, x))
PASS cssRule.type is 1
PASS declaration.length is 0
PASS declaration.getPropertyValue('-webkit-filter') is null

Two commas as separator between values in array() : custom(none url(shader), id array(1, 2, , 4))
PASS cssRule.type is 1
PASS declaration.length is 0
PASS declaration.getPropertyValue('-webkit-filter') is null

Leading comma in array() : custom(none url(shader), id array(,1, 2, 3, 4))
PASS cssRule.type is 1
PASS declaration.length is 0
PASS declaration.getPropertyValue('-webkit-filter') is null

Semicolon separated values in array() : custom(none url(shader), id array(1; 2; 3; 4))
PASS cssRule.type is 1
PASS declaration.length is 0
PASS declaration.getPropertyValue('-webkit-filter') is null

Space separated values in array() : custom(none url(shader), id array(1 2 3 4))
PASS cssRule.type is 1
PASS declaration.length is 0
PASS declaration.getPropertyValue('-webkit-filter') is null

Space separated values with comma terminator in array() : custom(none url(shader), id array(1 2 3 4,))
PASS cssRule.type is 1
PASS declaration.length is 0
PASS declaration.getPropertyValue('-webkit-filter') is null

Space separated values with leading comma in array() : custom(none url(shader), id array(, 1 2 3 4))
PASS cssRule.type is 1
PASS declaration.length is 0
PASS declaration.getPropertyValue('-webkit-filter') is null

NaN in array() : custom(none url(shader), id array(NaN))
PASS cssRule.type is 1
PASS declaration.length is 0
PASS declaration.getPropertyValue('-webkit-filter') is null

NaN and values in array() : custom(none url(shader), id array(1, 2, NaN, 3))
PASS cssRule.type is 1
PASS declaration.length is 0
PASS declaration.getPropertyValue('-webkit-filter') is null

Invalid unit value in array() : custom(none url(shader), id array(1px))
PASS cssRule.type is 1
PASS declaration.length is 0
PASS declaration.getPropertyValue('-webkit-filter') is null

Invalid unit value in array(), second : custom(none url(shader), id array(none))
PASS cssRule.type is 1
PASS declaration.length is 0
PASS declaration.getPropertyValue('-webkit-filter') is null

Invalid unit value in array(), third : custom(none url(shader), id array(1deg))
PASS cssRule.type is 1
PASS declaration.length is 0
PASS declaration.getPropertyValue('-webkit-filter') is null

Invalid unit value in array(), at the end of a partially valid value list : custom(none url(shader), id array(1, 2, 3, 4px))
PASS cssRule.type is 1
PASS declaration.length is 0
PASS declaration.getPropertyValue('-webkit-filter') is null
PASS successfullyParsed is true

TEST COMPLETE

