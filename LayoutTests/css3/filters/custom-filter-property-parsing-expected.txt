Test the parsing of the custom() function of the -webkit-filter property.

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".



Custom with vertex shader : custom(url(vertex.shader))
PASS cssRule.type is 1
PASS declaration.length is 1
PASS removeBaseURL(declaration.getPropertyValue('-webkit-filter')) is 'custom(url(vertex.shader))'
PASS jsWrapperClass(filterRule) is 'CSSValueList'
PASS jsWrapperClass(filterRule.__proto__) is 'CSSValueListPrototype'
PASS jsWrapperClass(filterRule.constructor) is 'CSSValueListConstructor'
PASS filterRule.length is 1
PASS subRule.operationType is WebKitCSSFilterValue.CSS_FILTER_CUSTOM
PASS removeBaseURL(subRule.cssText) is 'custom(url(vertex.shader))'

Custom with fragment shader : custom(none url(fragment.shader))
PASS cssRule.type is 1
PASS declaration.length is 1
PASS removeBaseURL(declaration.getPropertyValue('-webkit-filter')) is 'custom(none url(fragment.shader))'
PASS jsWrapperClass(filterRule) is 'CSSValueList'
PASS jsWrapperClass(filterRule.__proto__) is 'CSSValueListPrototype'
PASS jsWrapperClass(filterRule.constructor) is 'CSSValueListConstructor'
PASS filterRule.length is 1
PASS subRule.operationType is WebKitCSSFilterValue.CSS_FILTER_CUSTOM
PASS removeBaseURL(subRule.cssText) is 'custom(none url(fragment.shader))'

Custom with both shaders : custom(url(vertex.shader) url(fragment.shader))
PASS cssRule.type is 1
PASS declaration.length is 1
PASS removeBaseURL(declaration.getPropertyValue('-webkit-filter')) is 'custom(url(vertex.shader) url(fragment.shader))'
PASS jsWrapperClass(filterRule) is 'CSSValueList'
PASS jsWrapperClass(filterRule.__proto__) is 'CSSValueListPrototype'
PASS jsWrapperClass(filterRule.constructor) is 'CSSValueListConstructor'
PASS filterRule.length is 1
PASS subRule.operationType is WebKitCSSFilterValue.CSS_FILTER_CUSTOM
PASS removeBaseURL(subRule.cssText) is 'custom(url(vertex.shader) url(fragment.shader))'

Custom with mesh size : custom(url(vertex.shader), 10)
PASS cssRule.type is 1
PASS declaration.length is 1
PASS removeBaseURL(declaration.getPropertyValue('-webkit-filter')) is 'custom(url(vertex.shader), 10)'
PASS jsWrapperClass(filterRule) is 'CSSValueList'
PASS jsWrapperClass(filterRule.__proto__) is 'CSSValueListPrototype'
PASS jsWrapperClass(filterRule.constructor) is 'CSSValueListConstructor'
PASS filterRule.length is 1
PASS subRule.operationType is WebKitCSSFilterValue.CSS_FILTER_CUSTOM
PASS removeBaseURL(subRule.cssText) is 'custom(url(vertex.shader), 10)'

Custom with both mesh sizes : custom(none url(fragment.shader), 10 20)
PASS cssRule.type is 1
PASS declaration.length is 1
PASS removeBaseURL(declaration.getPropertyValue('-webkit-filter')) is 'custom(none url(fragment.shader), 10 20)'
PASS jsWrapperClass(filterRule) is 'CSSValueList'
PASS jsWrapperClass(filterRule.__proto__) is 'CSSValueListPrototype'
PASS jsWrapperClass(filterRule.constructor) is 'CSSValueListConstructor'
PASS filterRule.length is 1
PASS subRule.operationType is WebKitCSSFilterValue.CSS_FILTER_CUSTOM
PASS removeBaseURL(subRule.cssText) is 'custom(none url(fragment.shader), 10 20)'

Custom with detached mesh : custom(none url(fragment.shader), detached)
PASS cssRule.type is 1
PASS declaration.length is 1
PASS removeBaseURL(declaration.getPropertyValue('-webkit-filter')) is 'custom(none url(fragment.shader), detached)'
PASS jsWrapperClass(filterRule) is 'CSSValueList'
PASS jsWrapperClass(filterRule.__proto__) is 'CSSValueListPrototype'
PASS jsWrapperClass(filterRule.constructor) is 'CSSValueListConstructor'
PASS filterRule.length is 1
PASS subRule.operationType is WebKitCSSFilterValue.CSS_FILTER_CUSTOM
PASS removeBaseURL(subRule.cssText) is 'custom(none url(fragment.shader), detached)'

Custom with detached and mesh size : custom(none url(fragment.shader), 10 20 detached)
PASS cssRule.type is 1
PASS declaration.length is 1
PASS removeBaseURL(declaration.getPropertyValue('-webkit-filter')) is 'custom(none url(fragment.shader), 10 20 detached)'
PASS jsWrapperClass(filterRule) is 'CSSValueList'
PASS jsWrapperClass(filterRule.__proto__) is 'CSSValueListPrototype'
PASS jsWrapperClass(filterRule.constructor) is 'CSSValueListConstructor'
PASS filterRule.length is 1
PASS subRule.operationType is WebKitCSSFilterValue.CSS_FILTER_CUSTOM
PASS removeBaseURL(subRule.cssText) is 'custom(none url(fragment.shader), 10 20 detached)'

Custom with number parameters : custom(none url(fragment.shader), p1 1, p2 2 3, p3 3 4 5, p4 4 5 6 7)
PASS cssRule.type is 1
PASS declaration.length is 1
PASS removeBaseURL(declaration.getPropertyValue('-webkit-filter')) is 'custom(none url(fragment.shader), p1 1, p2 2 3, p3 3 4 5, p4 4 5 6 7)'
PASS jsWrapperClass(filterRule) is 'CSSValueList'
PASS jsWrapperClass(filterRule.__proto__) is 'CSSValueListPrototype'
PASS jsWrapperClass(filterRule.constructor) is 'CSSValueListConstructor'
PASS filterRule.length is 1
PASS subRule.operationType is WebKitCSSFilterValue.CSS_FILTER_CUSTOM
PASS removeBaseURL(subRule.cssText) is 'custom(none url(fragment.shader), p1 1, p2 2 3, p3 3 4 5, p4 4 5 6 7)'

Custom with float parameters : custom(none url(fragment.shader), p1 1.1, p2 2.2 3.3, p3 3.1 4.1 5.1, p4 4.1 5.2 6.3 7.4)
PASS cssRule.type is 1
PASS declaration.length is 1
PASS removeBaseURL(declaration.getPropertyValue('-webkit-filter')) is 'custom(none url(fragment.shader), p1 1.1, p2 2.2 3.3, p3 3.1 4.1 5.1, p4 4.1 5.2 6.3 7.4)'
PASS jsWrapperClass(filterRule) is 'CSSValueList'
PASS jsWrapperClass(filterRule.__proto__) is 'CSSValueListPrototype'
PASS jsWrapperClass(filterRule.constructor) is 'CSSValueListConstructor'
PASS filterRule.length is 1
PASS subRule.operationType is WebKitCSSFilterValue.CSS_FILTER_CUSTOM
PASS removeBaseURL(subRule.cssText) is 'custom(none url(fragment.shader), p1 1.1, p2 2.2 3.3, p3 3.1 4.1 5.1, p4 4.1 5.2 6.3 7.4)'

Custom with mesh size and number parameters : custom(none url(fragment.shader), 10 20, p1 1, p2 2 3, p3 3 4 5, p4 4 5 6 7)
PASS cssRule.type is 1
PASS declaration.length is 1
PASS removeBaseURL(declaration.getPropertyValue('-webkit-filter')) is 'custom(none url(fragment.shader), 10 20, p1 1, p2 2 3, p3 3 4 5, p4 4 5 6 7)'
PASS jsWrapperClass(filterRule) is 'CSSValueList'
PASS jsWrapperClass(filterRule.__proto__) is 'CSSValueListPrototype'
PASS jsWrapperClass(filterRule.constructor) is 'CSSValueListConstructor'
PASS filterRule.length is 1
PASS subRule.operationType is WebKitCSSFilterValue.CSS_FILTER_CUSTOM
PASS removeBaseURL(subRule.cssText) is 'custom(none url(fragment.shader), 10 20, p1 1, p2 2 3, p3 3 4 5, p4 4 5 6 7)'

Multiple with fragment shader : grayscale() custom(none url(fragment.shader)) sepia()
PASS cssRule.type is 1
PASS declaration.length is 1
PASS removeBaseURL(declaration.getPropertyValue('-webkit-filter')) is 'grayscale() custom(none url(fragment.shader)) sepia()'
PASS jsWrapperClass(filterRule) is 'CSSValueList'
PASS jsWrapperClass(filterRule.__proto__) is 'CSSValueListPrototype'
PASS jsWrapperClass(filterRule.constructor) is 'CSSValueListConstructor'
PASS filterRule.length is 3
PASS subRule.operationType is WebKitCSSFilterValue.CSS_FILTER_GRAYSCALE
PASS removeBaseURL(subRule.cssText) is 'grayscale()'
PASS subRule.operationType is WebKitCSSFilterValue.CSS_FILTER_CUSTOM
PASS removeBaseURL(subRule.cssText) is 'custom(none url(fragment.shader))'
PASS subRule.operationType is WebKitCSSFilterValue.CSS_FILTER_SEPIA
PASS removeBaseURL(subRule.cssText) is 'sepia()'
PASS successfullyParsed is true

TEST COMPLETE

