CONSOLE MESSAGE: The setVersion() method is non-standard and will be removed. Use the "upgradeneeded" event instead.
CONSOLE MESSAGE: The setVersion() method is non-standard and will be removed. Use the "upgradeneeded" event instead.
CONSOLE MESSAGE: The setVersion() method is non-standard and will be removed. Use the "upgradeneeded" event instead.
CONSOLE MESSAGE: The setVersion() method is non-standard and will be removed. Use the "upgradeneeded" event instead.
CONSOLE MESSAGE: The setVersion() method is non-standard and will be removed. Use the "upgradeneeded" event instead.
CONSOLE MESSAGE: The setVersion() method is non-standard and will be removed. Use the "upgradeneeded" event instead.
CONSOLE MESSAGE: The setVersion() method is non-standard and will be removed. Use the "upgradeneeded" event instead.
Test interleaved open/close/setVersion calls in various permutations

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".


indexedDB = self.indexedDB || self.webkitIndexedDB || self.mozIndexedDB || self.msIndexedDB || self.OIndexedDB;

dbname = "open-close-version.html"

TEST: setVersion blocked on open handles
testname = 'test1'
ver = 1
blockedEventFired = false
indexedDB.open(dbname + testname)

h1OpenOnSuccess():
h1 = event.target.result
indexedDB.open(dbname + testname)

h2OpenOnSuccess():
h2 = event.target.result
h1.setVersion(String(ver++))

h2OnVersionChange():
old = 1
new = "1"
scheduling timeout to close h2

h1SetVersionOnBlocked():
blockedEventFired = true

timeoutCallback():
h2.close()

h1SetVersionOnSuccess():

transactionOnComplete():
PASS blockedEventFired is true

TEST: setVersion not blocked if handle closed immediately
testname = 'test2'
ver = 1
blockedEventFired = false
indexedDB.open(dbname + testname)

h1OpenOnSuccess():
h1 = event.target.result
indexedDB.open(dbname + testname)

h1OpenOnSuccess():
h2 = event.target.result
h1.setVersion(String(ver++))

h2OnVersionChange():
old = 1
new = "1"
h2.close()

h1SetVersionOnBlocked():
blockedEventFired = true

h1SetVersionOnSuccess():

transactionOnComplete():
FIXME: blocked should not have fired since connection closed; http://webkit.org/b/71130
FAIL blockedEventFired should be false. Was true.

TEST: open and setVersion blocked if a VERSION_CHANGE transaction is running - close when blocked
testname = 'test3'
ver = 1
blockedEventFired = false
versionChangeComplete = false
errorEventFired = false
indexedDB.open(dbname + testname)

h1OpenOnSuccess():
h1 = event.target.result
indexedDB.open(dbname + testname)

h2OpenOnSuccess():
h2 = event.target.result
h1.setVersion(String(ver++))
h2.setVersion(String(ver++))

h2OnVersionChange():
old = 1
new = "1"

h1SetVersionOnBlocked():
blockedEventFired = true

h1OnVersionChange():
old = 1
new = "2"

h2SetVersionOnBlocked():
h2.close()
indexedDB.open(dbname + testname)

h2SetVersionOnError():
errorEventFired = true

h1SetVersionOnSuccess():

transactionOnComplete():
versionChangeComplete = true

h3OpenOnSuccess():
PASS blockedEventFired is true
PASS versionChangeComplete is true
PASS errorEventFired is true

TEST: open and setVersion blocked if a VERSION_CHANGE transaction is running - just close
testname = 'test4'
ver = 1
blockedEventFired = false
versionChangeComplete = false
indexedDB.open(dbname + testname)

h1OpenOnSuccess():
h1 = event.target.result
indexedDB.open(dbname + testname)

h2OpenOnSuccess():
h2 = event.target.result
h1.setVersion(String(ver++))
indexedDB.open(dbname + testname)
h2.close()

h1SetVersionOnBlocked():
blockedEventFired = true

h1SetVersionOnSuccess():

transactionOnComplete():
versionChangeComplete = true

h3OpenOnSuccess():
FIXME: blocked should not fire as connection was closed. http://webkit.org/b/71130
FAIL blockedEventFired should be false. Was true.
PASS versionChangeComplete is true

TEST: open blocked if a VERSION_CHANGE transaction is running
testname = 'test5'
ver = 1
versionChangeComplete = false
indexedDB.open(dbname + testname)

h1OpenOnSuccess():
h1 = event.target.result
h1.setVersion(String(ver++))
indexedDB.open(dbname + testname)

h1SetVersionOnSuccess():

transactionOnComplete():
versionChangeComplete = true

h2OpenOnSuccess():
h2 = event.target.result
PASS versionChangeComplete is true

TEST: two setVersions from the same connection
testname = 'test6'
ver = 1
versionChangeComplete = false
indexedDB.open(dbname + testname)

h1OpenOnSuccess():
h1 = event.target.result
h1.setVersion(String(ver++))
h1.setVersion(String(ver++))

h1SetVersionOnSuccess1():

transactionOnComplete1():
half done
versionChangeComplete = true

h1SetVersionOnSuccess2():

transactionOnComplete2():
PASS versionChangeComplete is true
PASS successfullyParsed is true

TEST COMPLETE

