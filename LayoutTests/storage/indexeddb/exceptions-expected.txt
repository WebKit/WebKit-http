Test that expected exceptions are thrown per IndexedDB spec.

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".


indexedDB = self.indexedDB || self.webkitIndexedDB || self.mozIndexedDB || self.msIndexedDB || self.OIndexedDB;

dbname = "exceptions.html"
indexedDB.deleteDatabase(dbname)
indexedDB.open(dbname)
store = db.createObjectStore('store')
index = store.createIndex('index', 'id')
store.put({id: 'a'}, 1)
store.put({id: 'b'}, 2)
store.put({id: 'c'}, 3)
store.put({id: 'd'}, 4)
store.put({id: 'e'}, 5)
store.put({id: 'f'}, 6)
store.put({id: 'g'}, 7)
store.put({id: 'h'}, 8)
store.put({id: 'i'}, 9)
store.put({id: 'j'}, 10)
otherStore = db.createObjectStore('otherStore')
inlineKeyStore = db.createObjectStore('inlineKeyStore', {keyPath: 'id'})
request = inlineKeyStore.put({id: 0})
PASS request.readyState is "pending"

3.2.1 The IDBRequest Interface

IDBRequest.error
When the done flag is false, getting this property must throw a DOMException of type InvalidStateError.
Expecting exception from request.error
PASS Exception was thrown.
PASS code is DOMException.INVALID_STATE_ERR
PASS ename is 'InvalidStateError'

IDBRequest.result
When the done flag is false, getting this property must throw a DOMException of type InvalidStateError.
Expecting exception from request.result
PASS Exception was thrown.
PASS code is DOMException.INVALID_STATE_ERR
PASS ename is 'InvalidStateError'

3.2.3 Opening a database

IDBFactory.cmp()
One of the supplied keys was not a valid key.
Expecting exception from indexedDB.cmp(null, 0)
PASS Exception was thrown.
PASS code is 0
PASS ename is 'DataError'
db.close()

3.2.4 Database
indexedDB.open(dbname, 2)

IDBDatabase.createObjectStore()
If an objectStore with the same name already exists, the implementation must throw a DOMException of type ConstraintError.
Expecting exception from db.createObjectStore('store')
PASS Exception was thrown.
PASS code is 0
PASS ename is 'ConstraintError'
If keyPath is not a valid key path then a DOMException of type SyntaxError must be thrown.
Expecting exception from db.createObjectStore('fail', {keyPath: '-invalid-'})
PASS Exception was thrown.
PASS code is DOMException.SYNTAX_ERR
PASS ename is 'SyntaxError'
If the optionalParameters parameter is specified, and autoIncrement is set to true, and the keyPath parameter is specified to the empty string, or specified to an Array, this function must throw a InvalidAccessError exception.
Expecting exception from db.createObjectStore('fail', {autoIncrement: true, keyPath: ''})
PASS Exception was thrown.
PASS code is DOMException.INVALID_ACCESS_ERR
PASS ename is 'InvalidAccessError'
Expecting exception from db.createObjectStore('fail', {autoIncrement: true, keyPath: ['a']})
PASS Exception was thrown.
PASS code is DOMException.INVALID_ACCESS_ERR
PASS ename is 'InvalidAccessError'

IDBDatabase.deleteObjectStore()
There is no object store with the given name, compared in a case-sensitive manner, in the connected database.
Expecting exception from db.deleteObjectStore('no-such-store')
PASS Exception was thrown.
PASS code is DOMException.NOT_FOUND_ERR
PASS ename is 'NotFoundError'

IDBDatabase.transaction()
If this method is called on IDBDatabase object for which a "versionchange" transaction is still running, a InvalidStateError exception must be thrown.
Expecting exception from db.transaction('store')
PASS Exception was thrown.
PASS code is DOMException.INVALID_STATE_ERR
PASS ename is 'InvalidStateError'
One of the names provided in the storeNames argument doesn't exist in this database.
Expecting exception from db.transaction('no-such-store')
PASS Exception was thrown.
PASS code is DOMException.NOT_FOUND_ERR
PASS ename is 'NotFoundError'
The value for the mode parameter is invalid.
Expecting TypeError exception from db.transaction('store', 'invalid-mode')
PASS Exception was thrown.
PASS db.transaction('store', 'invalid-mode') threw TypeError: Type error
The function was called with an empty list of store names
Expecting exception from db.transaction([])
PASS Exception was thrown.
PASS code is DOMException.INVALID_ACCESS_ERR
PASS ename is 'InvalidAccessError'

One more IDBDatabase.createObjectStore() test:
If this function is called from outside a "versionchange" transaction callback ... the implementation must throw a DOMException of type InvalidStateError.
Expecting exception from db.createObjectStore('fail')
PASS Exception was thrown.
PASS code is DOMException.INVALID_STATE_ERR
PASS ename is 'InvalidStateError'

One more IDBDatabase.deleteObjectStore() test:
If this function is called from outside a "versionchange" transaction callback ... the implementation must throw a DOMException of type InvalidStateError.
Expecting exception from db.deleteObjectStore('fail')
PASS Exception was thrown.
PASS code is DOMException.INVALID_STATE_ERR
PASS ename is 'InvalidStateError'

Prepare an object store and index from an inactive transaction for later use.
finishedTransaction = inactiveTransaction = db.transaction('store')
storeFromInactiveTransaction = inactiveTransaction.objectStore('store')
indexFromInactiveTransaction = storeFromInactiveTransaction.index('index')
request = storeFromInactiveTransaction.openCursor()
cursorFromInactiveTransaction = request.result

3.2.5 Object Store
ro_transaction = db.transaction('store', 'readonly')
storeFromReadOnlyTransaction = ro_transaction.objectStore('store')
rw_transaction = db.transaction('store', 'readwrite')
store = rw_transaction.objectStore('store')

IDBObjectStore.add()
This method throws a DOMException of type ReadOnlyError if the transaction which this IDBObjectStore belongs to is has its mode set to "readonly".
Expecting exception from storeFromReadOnlyTransaction.add(0, 0)
PASS Exception was thrown.
PASS code is 0
PASS ename is 'ReadOnlyError'
The transaction this IDBObjectStore belongs to is not active.
Expecting exception from storeFromInactiveTransaction.add(0, 0)
PASS Exception was thrown.
PASS code is 0
PASS ename is 'TransactionInactiveError'
The data being stored could not be cloned by the internal structured cloning algorithm.
Expecting exception from store.add(self, 0)
PASS Exception was thrown.
PASS code is DOMException.DATA_CLONE_ERR

IDBObjectStore.clear()
This method throws a DOMException of type ReadOnlyError if the transaction which this IDBObjectStore belongs to is has its mode set to "readonly".
Expecting exception from storeFromReadOnlyTransaction.clear()
PASS Exception was thrown.
PASS code is 0
PASS ename is 'ReadOnlyError'
The transaction this IDBObjectStore belongs to is not active.
Expecting exception from storeFromInactiveTransaction.clear()
PASS Exception was thrown.
PASS code is 0
PASS ename is 'TransactionInactiveError'

IDBObjectStore.count()
If the optional key parameter is not a valid key or a key range, this method throws a DOMException of type DataError.
Expecting exception from store.count({})
PASS Exception was thrown.
PASS code is 0
PASS ename is 'DataError'
The transaction this IDBObjectStore belongs to is not active.
Expecting exception from storeFromInactiveTransaction.count()
PASS Exception was thrown.
PASS code is 0
PASS ename is 'TransactionInactiveError'

IDBObjectStore.delete()
This method throws a DOMException of type ReadOnlyError if the transaction which this IDBObjectStore belongs to is has its mode set to "readonly".
Expecting exception from storeFromReadOnlyTransaction.delete(0)
PASS Exception was thrown.
PASS code is 0
PASS ename is 'ReadOnlyError'
If the key parameter is not a valid key or a key range this method throws a DOMException of type DataError.
Expecting exception from store.delete({})
PASS Exception was thrown.
PASS code is 0
PASS ename is 'DataError'
The transaction this IDBObjectStore belongs to is not active.
Expecting exception from storeFromInactiveTransaction.add(0, 0)
PASS Exception was thrown.
PASS code is 0
PASS ename is 'TransactionInactiveError'

IDBObjectStore.get()
If the key parameter is not a valid key or a key range, this method throws a DOMException of type DataError.
Expecting exception from store.get({})
PASS Exception was thrown.
PASS code is 0
PASS ename is 'DataError'
The transaction this IDBObjectStore belongs to is not active.
Expecting exception from storeFromInactiveTransaction.get(0)
PASS Exception was thrown.
PASS code is 0
PASS ename is 'TransactionInactiveError'

IDBObjectStore.index()
There is no index with the given name, compared in a case-sensitive manner, in the connected database.
Expecting exception from store.index('no-such-index')
PASS Exception was thrown.
PASS code is DOMException.NOT_FOUND_ERR
PASS ename is 'NotFoundError'
Occurs if a request is made on a source object that has been deleted or removed, or if the transaction the object store belongs to has finished.
Expecting exception from storeFromInactiveTransaction.index('index')
PASS Exception was thrown.
PASS code is DOMException.INVALID_STATE_ERR
PASS ename is 'InvalidStateError'

IDBObjectStore.openCursor()
If the range parameter is specified but is not a valid key or a key range, this method throws a DOMException of type DataError.
Expecting exception from store.openCursor({})
PASS Exception was thrown.
PASS code is 0
PASS ename is 'DataError'
The transaction this IDBObjectStore belongs to is not active.
Expecting exception from storeFromInactiveTransaction.openCursor()
PASS Exception was thrown.
PASS code is 0
PASS ename is 'TransactionInactiveError'
The value for the direction parameter is invalid.
Expecting TypeError exception from store.openCursor(0, 'invalid-direction')
PASS Exception was thrown.
PASS store.openCursor(0, 'invalid-direction') threw TypeError: Type error

IDBObjectStore.put()
This method throws a DOMException of type ReadOnlyError if the transaction which this IDBObjectStore belongs to is has its mode set to "readonly".
Expecting exception from storeFromReadOnlyTransaction.put(0, 0)
PASS Exception was thrown.
PASS code is 0
PASS ename is 'ReadOnlyError'
The transaction this IDBObjectStore belongs to is not active.
Expecting exception from storeFromInactiveTransaction.put(0, 0)
PASS Exception was thrown.
PASS code is 0
PASS ename is 'TransactionInactiveError'
The data being stored could not be cloned by the internal structured cloning algorithm.
Expecting exception from store.put(self, 0)
PASS Exception was thrown.
PASS code is DOMException.DATA_CLONE_ERR
db.close()
ro_transaction.oncomplete = transactionComplete
rw_transaction.oncomplete = transactionComplete

transactionComplete():
First transaction completed

transactionComplete():
request = indexedDB.open(dbname, 3)
request.onupgradeneeded = onUpgradeNeeded3

IDBObjectStore.createIndex()
If an index with the same name already exists, the implementation must throw a DOMException of type ConstraintError. 
Expecting exception from store.createIndex('index', 'keyPath')
PASS Exception was thrown.
PASS code is 0
PASS ename is 'ConstraintError'
If keyPath is not a valid key path then a DOMException of type SyntaxError must be thrown.
Expecting exception from store.createIndex('fail', '-invalid-')
PASS Exception was thrown.
PASS code is DOMException.SYNTAX_ERR
PASS ename is 'SyntaxError'
If keyPath is an Array and the multiEntry property in the optionalParameters is true, then a DOMException of type InvalidAccessError must be thrown.
Expecting exception from store.createIndex('fail', ['a'], {multiEntry: true})
PASS Exception was thrown.
PASS code is DOMException.INVALID_ACCESS_ERR
PASS ename is 'InvalidAccessError'

IDBObjectStore.deleteIndex()
There is no index with the given name, compared in a case-sensitive manner, in the connected database.
Expecting exception from store.deleteIndex('no-such-index')
PASS Exception was thrown.
PASS code is DOMException.NOT_FOUND_ERR
PASS ename is 'NotFoundError'

One more IDBObjectStore.createIndex() test:
If this function is called from outside a "versionchange" transaction callback ... the implementation must throw a DOMException of type InvalidStateError.
Expecting exception from db.transaction('store').objectStore('store').createIndex('fail', 'keyPath')
PASS Exception was thrown.
PASS code is DOMException.INVALID_STATE_ERR
PASS ename is 'InvalidStateError'

One more IDBObjectStore.deleteIndex() test:
If this function is called from outside a "versionchange" transaction callback ... the implementation must throw a DOMException of type InvalidStateError.
Expecting exception from db.transaction('store').objectStore('store').deleteIndex('fail', 'keyPath')
PASS Exception was thrown.
PASS code is DOMException.INVALID_STATE_ERR
PASS ename is 'InvalidStateError'

3.2.6 Index
indexFromReadOnlyTransaction = db.transaction('store', 'readonly').objectStore('store').index('index')
index = db.transaction('store', 'readwrite').objectStore('store').index('index')

IDBIndex.count()
If the optional key parameter is not a valid key or a key range, this method throws a DOMException of type DataError.
Expecting exception from index.count({})
PASS Exception was thrown.
PASS code is 0
PASS ename is 'DataError'
The transaction this IDBIndex belongs to is not active.
Expecting exception from indexFromInactiveTransaction.count()
PASS Exception was thrown.
PASS code is 0
PASS ename is 'TransactionInactiveError'

IDBIndex.get()
If the key parameter is not a valid key or a key range, this method throws a DOMException of type DataError.
Expecting exception from index.get({})
PASS Exception was thrown.
PASS code is 0
PASS ename is 'DataError'
The transaction this IDBIndex belongs to is not active.
Expecting exception from indexFromInactiveTransaction.get(0)
PASS Exception was thrown.
PASS code is 0
PASS ename is 'TransactionInactiveError'

IDBIndex.getKey()
If the key parameter is not a valid key or a key range, this method throws a DOMException of type DataError.
Expecting exception from index.getKey({})
PASS Exception was thrown.
PASS code is 0
PASS ename is 'DataError'
The transaction this IDBIndex belongs to is not active.
Expecting exception from indexFromInactiveTransaction.getKey(0)
PASS Exception was thrown.
PASS code is 0
PASS ename is 'TransactionInactiveError'

IDBIndex.openCursor()
If the range parameter is specified but is not a valid key or a key range, this method throws a DOMException of type DataError.
Expecting exception from index.openCursor({})
PASS Exception was thrown.
PASS code is 0
PASS ename is 'DataError'
The transaction this IDBIndex belongs to is not active.
Expecting exception from indexFromInactiveTransaction.openCursor()
PASS Exception was thrown.
PASS code is 0
PASS ename is 'TransactionInactiveError'
The value for the direction parameter is invalid.
Expecting TypeError exception from index.openCursor(0, 'invalid-direction')
PASS Exception was thrown.
PASS index.openCursor(0, 'invalid-direction') threw TypeError: Type error

IDBIndex.openKeyCursor()
If the range parameter is specified but is not a valid key or a key range, this method throws a DOMException of type DataError.
Expecting exception from index.openKeyCursor({})
PASS Exception was thrown.
PASS code is 0
PASS ename is 'DataError'
The transaction this IDBIndex belongs to is not active.
Expecting exception from indexFromInactiveTransaction.openKeyCursor()
PASS Exception was thrown.
PASS code is 0
PASS ename is 'TransactionInactiveError'
The value for the direction parameter is invalid.
Expecting TypeError exception from index.openKeyCursor(0, 'invalid-direction')
PASS Exception was thrown.
PASS index.openKeyCursor(0, 'invalid-direction') threw TypeError: Type error

3.2.7 Cursor
transaction = db.transaction(['store', 'inlineKeyStore'], 'readwrite')
request = transaction.objectStore('store').openCursor()
cursor = request.result
request = transaction.objectStore('store').index('index').openKeyCursor()
keyCursor = request.result
request = transaction.objectStore('store').openCursor(IDBKeyRange.lowerBound(-Infinity), 'prev')
reverseCursor = request.result
request = transaction.objectStore('inlineKeyStore').openCursor()
inlineCursor = request.result

IDBCursor.advance()
Calling this method more than once before new cursor data has been loaded is not allowed and results in a DOMException of type InvalidStateError being thrown.
If the value for count is 0 (zero) or a negative number, this method must throw a JavaScript TypeError exception.
Expecting TypeError exception from cursor.advance(0)
PASS Exception was thrown.
PASS cursor.advance(0) threw TypeError: Type error
cursor.advance(1)
Expecting exception from cursor.advance(1)
PASS Exception was thrown.
PASS code is DOMException.INVALID_STATE_ERR
PASS ename is 'InvalidStateError'
The transaction this IDBCursor belongs to is not active.
Expecting exception from cursorFromInactiveTransaction.advance(1)
PASS Exception was thrown.
PASS code is 0
PASS ename is 'TransactionInactiveError'

IDBCursor.continue()
The parameter is not a valid key.
Expecting exception from cursor.continue({})
PASS Exception was thrown.
PASS code is 0
PASS ename is 'DataError'
The parameter is less than or equal to this cursor's position and this cursor's direction is "next" or "nextunique".
Expecting exception from cursor.continue(-Infinity)
PASS Exception was thrown.
PASS code is 0
PASS ename is 'DataError'
The parameter is greater than or equal to this cursor's position and this cursor's direction is "prev" or "prevunique".
Expecting exception from reverseCursor.continue(100)
PASS Exception was thrown.
PASS code is 0
PASS ename is 'DataError'
Calling this method more than once before new cursor data has been loaded is not allowed and results in a DOMException of type InvalidStateError being thrown.
cursor.continue()
Expecting exception from cursor.continue()
PASS Exception was thrown.
PASS code is DOMException.INVALID_STATE_ERR
PASS ename is 'InvalidStateError'
The transaction this IDBCursor belongs to is not active.
Expecting exception from cursorFromInactiveTransaction.continue()
PASS Exception was thrown.
PASS code is 0
PASS ename is 'TransactionInactiveError'

IDBCursor.delete()
If this cursor's got value flag is false, or if this cursor was created using openKeyCursor a DOMException of type InvalidStateError is thrown.
Expecting exception from keyCursor.delete()
PASS Exception was thrown.
PASS code is DOMException.INVALID_STATE_ERR
PASS ename is 'InvalidStateError'
The transaction this IDBCursor belongs to is not active.
Expecting exception from cursorFromInactiveTransaction.delete()
PASS Exception was thrown.
PASS code is 0
PASS ename is 'TransactionInactiveError'

IDBCursor.update()
If this cursor's got value flag is false or if this cursor was created using openKeyCursor. This method throws a DOMException of type InvalidStateError.
Expecting exception from keyCursor.update({})
PASS Exception was thrown.
PASS code is DOMException.INVALID_STATE_ERR
PASS ename is 'InvalidStateError'
If the effective object store of this cursor uses in-line keys and evaluating the key path of the value parameter results in a different value than the cursor's effective key, this method throws a DOMException of type DataError.
Expecting exception from inlineCursor.update({id: 1})
PASS Exception was thrown.
PASS code is 0
PASS ename is 'DataError'
If the structured clone algorithm throws an exception, that exception is rethrown.
Expecting exception from cursor.update(self)
PASS Exception was thrown.
PASS code is DOMException.DATA_CLONE_ERR
The transaction this IDBCursor belongs to is not active.
Expecting exception from cursorFromInactiveTransaction.update({})
PASS Exception was thrown.
PASS code is 0
PASS ename is 'TransactionInactiveError'
readOnlyTransaction = db.transaction('store', 'readonly')
request = readOnlyTransaction.objectStore('store').openCursor()
cursorFromReadOnlyTransaction = request.result

One more IDBCursor.delete() test:
This method throws a DOMException of type ReadOnlyError if the transaction which this IDBCursor belongs to has its mode set to "readonly".
Expecting exception from cursorFromReadOnlyTransaction.delete()
PASS Exception was thrown.
PASS code is 0
PASS ename is 'ReadOnlyError'

One more IDBCursor.update() test:
This method throws a DOMException of type ReadOnlyError if the transaction which this IDBCursor belongs to has its mode set to "readonly".
Expecting exception from cursorFromReadOnlyTransaction.update({})
PASS Exception was thrown.
PASS code is 0
PASS ename is 'ReadOnlyError'

3.2.8 Transaction

IDBTransaction.abort()
If this transaction is finished, throw a DOMException of type InvalidStateError. 
Expecting exception from finishedTransaction.abort()
PASS Exception was thrown.
PASS code is DOMException.INVALID_STATE_ERR
PASS ename is 'InvalidStateError'
If the requested object store is not in this transaction's scope.
Expecting exception from db.transaction('store').objectStore('otherStore')
PASS Exception was thrown.
PASS code is DOMException.NOT_FOUND_ERR
PASS ename is 'NotFoundError'
PASS successfullyParsed is true

TEST COMPLETE

