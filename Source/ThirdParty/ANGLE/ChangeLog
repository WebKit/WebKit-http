2013-10-24  Mark Rowe  <mrowe@apple.com>

        Remove references to OS X 10.7 from Xcode configuration settings.

        Now that we're not building for OS X 10.7 they're no longer needed.

        Reviewed by Anders Carlsson.

        * Configurations/Base.xcconfig:
        * Configurations/DebugRelease.xcconfig:

2013-10-24  Mark Rowe  <mrowe@apple.com>

        <rdar://problem/15312643> Prepare for the mysterious future.

        Reviewed by David Kilzer.

        * Configurations/Base.xcconfig:
        * Configurations/DebugRelease.xcconfig:

2013-10-10  Mark Rowe  <mrowe@apple.com>

        <rdar://problem/13341666> WebKit should always build against an SDK.

        Have all projects default to building against the OS X Internal SDK for the Production
        configuration. For the Debug and Release configurations, look for UseInternalSDK.xcconfig
        to determine whether the OS X Internal SDK should be used. If not, use the normal OS X SDK.

        Reviewed by Dan Bernstein.

        * Configurations/Base.xcconfig:
        * Configurations/DebugRelease.xcconfig:

2013-10-08  Alex Christensen  <achristensen@webkit.org>

        Generate pdb files for debugging ANGLE DLLs.
        https://bugs.webkit.org/show_bug.cgi?id=122530

        Reviewed by Brent Fulgham.

        * ANGLE.vcxproj/libEGLCommon.props:
        * ANGLE.vcxproj/libGLESv2Common.props:
        Generate debug information.

2013-10-03  Dan Bernstein  <mitz@apple.com>

        <rdar://problem/15116673> [mac] Build failure when the source directory is not named ANGLE
        https://bugs.webkit.org/show_bug.cgi?id=122307

        Reviewed by Mark Rowe.

        * ANGLE.xcodeproj/project.pbxproj: Ensure that the symlink to SRCROOT in
        DerivedSources/ANGLE is named ANGLE.

2013-09-29  Darin Adler  <darin@apple.com>

        Take some Xcode advice about turning on additional warnings in ANGLE and gtest
        https://bugs.webkit.org/show_bug.cgi?id=122087

        Reviewed by Mark Rowe.

        * Configurations/Base.xcconfig: Add some of the warnings that Xcode 5 suggested.
        * src/compiler/preprocessor/Tokenizer.l: Defined YY_NO_INPUT so we don't compile
        an unused function and get a warning.

2013-09-29  Darin Adler  <darin@apple.com>

        Use RenderElement instead of RenderObject in many places
        https://bugs.webkit.org/show_bug.cgi?id=122078

        Reviewed by Andreas Kling.

        * ANGLE.xcodeproj/project.pbxproj: Let Xcode do its thing to this file.

2013-09-24  Mark Rowe  <mrowe@apple.com>

        <rdar://problem/14971518> WebKit should build against the Xcode default toolchain when targeting OS X 10.8

        Reviewed by Dan Bernstein.

        * Configurations/Base.xcconfig:

2013-09-06  peavo@outlook.com  <peavo@outlook.com>

        [Win][WebGL] WebGL rendering is slow.
        https://bugs.webkit.org/show_bug.cgi?id=120841

        Reviewed by Brent Fulgham.

        Rendering WebGL content is slow on Windows, because lots of debug information is written to debug.txt.

        * ANGLE.vcxproj/ANGLERelease.props: Disable logging in release builds.

2013-09-05  Dan Bernstein  <mitz@apple.com>

        INSTALL_PATH_PREFIX is used even when not installing
        https://bugs.webkit.org/show_bug.cgi?id=120818

        Reviewed by Darin Adler.

        * Configurations/ANGLE.xcconfig: Changed the definition of PRIVATE_HEADERS_FOLDER_PATH
        to include INSTALL_PATH_PREFIX only when installing.

2013-08-17  David Kilzer  <ddkilzer@apple.com>

        ANGLE fails to build with trunk clang: error: 'register' storage class specifier is deprecated [-Werror,-Wdeprecated-register]
        <http://webkit.org/b/119931>
        <rdar://problem/14763822>

        Reviewed by Darin Adler.

        * src/compiler/glslang.l:
        * src/compiler/glslang_lex.cpp:
        * src/compiler/preprocessor/Tokenizer.cpp:
        * src/compiler/preprocessor/Tokenizer.l:
        Add pragma statements to ignore -Wdeprecated-register warnings
        in generated code.  Also ignore -Wunknown-pragmas so this
        doesn't cause a build failure in older versions of clang.

2013-08-16  Commit Queue  <commit-queue@webkit.org>

        Unreviewed, rolling out r153749.
        http://trac.webkit.org/changeset/153749
        https://bugs.webkit.org/show_bug.cgi?id=119892

        The bison generation of the glslang* files has now been fixed. (Requested by zdobersek on #webkit).

        * GNUmakefile.am: Preserve the libANGLE.la dependency on the ANGLE's GNUmakefile.am.

2013-08-15  Allan Sandfeld Jensen  <allan.jensen@digia.com>

        ANGLE doesn't build with bison 3.0
        https://bugs.webkit.org/show_bug.cgi?id=119798

        Reviewed by Antti Koivisto.

        Make glslang.y compatible with bison 3.0, by using %lex-param
        to set YYLEX_PARAM and getting rid of useless YYID macro.

        * src/compiler/glslang.y:

2013-08-09  Zoltan Arvai  <zarvai@inf.u-szeged.hu>

        [Qt] Buidfix after r153664. Adding ANGLE_WEBKIT_WIN definition.
        https://bugs.webkit.org/show_bug.cgi?id=119577

        Reviewed by Allan Sandfeld Jensen.

        * Target.pri:

2013-08-08  Alex Christensen  <achristensen@apple.com>

        Link to correct DirectX libraries for Win64 ANGLE build.
        https://bugs.webkit.org/show_bug.cgi?id=119600

        Reviewed by Brent Fulgham.

        * ANGLE.vcxproj/DirectX32.props: Added with x86 DirectX library directory.
        * ANGLE.vcxproj/DirectX64.props: Added with x64 DirectX library directory.
        * ANGLE.vcxproj/libEGL.vcxproj:
        * ANGLE.vcxproj/libGLESv2.vcxproj:
        Use DirectX32.props and DirectX64.props.
        * ANGLE.vcxproj/libEGLCommon.props:
        * ANGLE.vcxproj/libGLESv2Common.props:
        Removed DirectX library directory.

2013-07-23  David Farler  <dfarler@apple.com>

        Provide optional OTHER_CFLAGS, OTHER_CPPFLAGS, OTHER_LDFLAGS additions for building with ASAN
        https://bugs.webkit.org/show_bug.cgi?id=117762

        Reviewed by Mark Rowe.

        * Configurations/DebugRelease.xcconfig:
        Add ASAN_OTHER_CFLAGS, CPLUSPLUSFLAGS.

2013-08-06  Zan Dobersek  <zdobersek@igalia.com>

        webkit-gtk fails to build with bison-3.0
        https://bugs.webkit.org/show_bug.cgi?id=119373

        Reviewed by Gustavo Noronha Silva.

        * GNUmakefile.am: Stop relying on generated glslang_tab.(cpp|h) and glslang.cpp sources as Bison 3.0
        produces non-compilable source code. Instead, compile these pregenerated files as they're included in
        the tree. Originally, the ANGLE source tree provides these files as generated by Bison 2.7, but they're
        at the moment regenerated with Bison 2.3 when the third-party ANGLE source is being updated.

2013-08-05  Alex Christensen  <achristensen@apple.com>

        Added optimizations to Windows ANGLE builds.
        https://bugs.webkit.org/show_bug.cgi?id=119500

        Reviewed by Brent Fulgham.

        * ANGLE.vcxproj/ANGLERelease.props: Added.
        * ANGLE.vcxproj/libEGL.vcxproj:
        * ANGLE.vcxproj/libGLESv2.vcxproj:
        * ANGLE.vcxproj/preprocessor.vcxproj:
        * ANGLE.vcxproj/translator_common.vcxproj:
        * ANGLE.vcxproj/translator_glsl.vcxproj:
        * ANGLE.vcxproj/translator_hlsl.vcxproj:
        Use ANGLERelease.props for Release, Release_WinCairo, and Production configurations.

2013-08-02  Alex Christensen  <achristensen@apple.com>

        Soft link ANGLE on Windows.
        https://bugs.webkit.org/show_bug.cgi?id=119452

        Reviewed by Dean Jackson.

        * ANGLE.vcxproj/libEGL.vcxproj:
        * ANGLE.vcxproj/libEGL.vcxproj.filters:
        * ANGLE.vcxproj/libGLESv2.vcxproj:
        * ANGLE.vcxproj/libGLESv2.vcxproj.filters:
        Added soft linking headers.
        * ANGLE.vcxproj/libEGLCommon.props:
        * ANGLE.vcxproj/libGLESv2Common.props:
        * ANGLE.vcxproj/translatorCommon.props:
        Added ANGLE_WEBKIT_WIN macro definition for egl.h and gl2.h.
        * include/EGL/egl.h:
        * include/GLES2/gl2.h:
        Conditionally include soft linking headers based on ANGLE_WEBKIT_WIN macro.
        * include/EGL/eglsoftlinking.h: Added.
        * include/GLES2/gl2softlinking.h: Added.

2013-08-01  Alex Christensen  <achristensen@apple.com>

        Fixed wrong static_casting in ANGLE from r153064.
        https://bugs.webkit.org/show_bug.cgi?id=119296

        Reviewed by Dean Jackson.

        * src/compiler/Intermediate.cpp:
        (TIntermediate::promoteConstantUnion):
        Undid erroneous static_cast change.
        * src/compiler/intermediate.h:
        (TIntermConstantUnion::getIConst):
        (TIntermConstantUnion::getFConst):
        (TIntermConstantUnion::getBConst):
        Made getters use size_t instead of int.

2013-07-29  Carlos Garcia Campos  <cgarcia@igalia.com>

        Unreviewed. Fix make distcheck.

        * GNUmakefile.am: Add missing header files to compilation.

2013-07-29  Alex Christensen  <achristensen@apple.com>

        Separated translator into preprocessor, translator_common,
        translator_hlsl (for libGLESv2), and translator_glsl
        (for ANGLEWebKitBridge).
        https://bugs.webkit.org/show_bug.cgi?id=119221

        Reviewed by Brent Fulgham.

        * ANGLE.vcxproj/ANGLEGenerated.vcxproj:
        Removed unused preprocessor definitions.
        * ANGLE.vcxproj/libEGL.vcxproj:
        * ANGLE.vcxproj/libGLESv2.vcxproj:
        Removed dependency on removed translator project.
        * ANGLE.vcxproj/libGLESv2Common.props:
        Link to translator_hlsl libraries.
        * ANGLE.vcxproj/preprocessor.vcxproj: Added.
        * ANGLE.vcxproj/preprocessor.vcxproj.filters: Added.
        * ANGLE.vcxproj/translator.vcxproj: Removed.
        * ANGLE.vcxproj/translator.vcxproj.filters: Removed.
        * ANGLE.vcxproj/translator_common.vcxproj: Added.
        * ANGLE.vcxproj/translator_common.vcxproj.filters: Added.
        * ANGLE.vcxproj/translator_glsl.vcxproj: Added.
        * ANGLE.vcxproj/translator_glsl.vcxproj.filters: Added.
        * ANGLE.vcxproj/translator_hlsl.vcxproj: Added.
        * ANGLE.vcxproj/translator_hlsl.vcxproj.filters: Added.

2013-07-26  Alex Christensen  <achristensen@apple.com>

        Added module definition file for building libEGL.
        https://bugs.webkit.org/show_bug.cgi?id=119162

        Reviewed by Brent Fulgham.

        * ANGLE.vcxproj/libEGLCommon.props: Added reference to libEGL.def.

2013-07-25  Alex Christensen  <achristensen@apple.com>

        Made Windows build system for ANGLE and removed existing broken build system.
        Removed empty src/libGLESv2/shaders directory and old README files.
        https://bugs.webkit.org/show_bug.cgi?id=119103

        Reviewed by Brent Fulgham.

        * ANGLE.vcxproj: Added.
        * ANGLE.vcxproj/ANGLEGenerated.vcxproj: Added.
        * ANGLE.vcxproj/ANGLEGenerated.vcxproj.filters: Added.
        * ANGLE.vcxproj/libEGL.vcxproj: Added.
        * ANGLE.vcxproj/libEGL.vcxproj.filters: Added.
        * ANGLE.vcxproj/libEGLCommon.props: Added.
        * ANGLE.vcxproj/libGLESv2.vcxproj: Added.
        * ANGLE.vcxproj/libGLESv2.vcxproj.filters: Added.
        * ANGLE.vcxproj/libGLESv2Common.props: Added.
        * ANGLE.vcxproj/translator.vcxproj: Added.
        * ANGLE.vcxproj/translator.vcxproj.filters: Added.
        * ANGLE.vcxproj/translatorCommon.props: Added.
        * src/ANGLE.sln: Removed.
        * src/compiler/preprocessor/preprocessor.vcxproj: Removed.
        * src/compiler/preprocessor/preprocessor.vcxproj.filters: Removed.
        * src/compiler/translator_common.vcxproj: Removed.
        * src/compiler/translator_common.vcxproj.filters: Removed.
        * src/compiler/translator_hlsl.vcxproj: Removed.
        * src/compiler/translator_hlsl.vcxproj.filters: Removed.
        * src/libEGL/README: Removed.
        * src/libEGL/libEGL.vcxproj: Removed.
        * src/libEGL/libEGL.vcxproj.filters: Removed.
        * src/libGLESv2/README: Removed.
        * src/libGLESv2/libGLESv2.vcxproj: Removed.
        * src/libGLESv2/libGLESv2.vcxproj.filters: Removed.
        * src/libGLESv2/shaders: Removed.

2013-07-24  Alex Christensen  <achristensen@apple.com>

        Generate derived files in ANGLE at build time rather than when updating from upstream.
        https://bugs.webkit.org/show_bug.cgi?id=118872

        Reviewed by Mark Rowe.

        * ANGLE.xcodeproj/project.pbxproj: Made Derived Sources target which calls DerivedSources.make,
        moved generated files into Derived Sources group.
        * DerivedSources.make: Added.

2013-07-24  Zan Dobersek  <zdobersek@igalia.com>

        Unreviewed. Setting the svn:eol-style=native property on the ANGLE.sln file.

        * src/ANGLE.sln: Added property svn:eol-style.

2013-07-24  Gabor Abraham  <abrhm@inf.u-szeged.hu>

        [Qt] Buildfix after r153064. Add Uniform files to the Target.pri.

        Reviewed by Csaba Osztrogonác.

        * Target.pri:

2013-07-23  Alex Christensen  <achristensen@apple.com>

        Updated ANGLE to latest git commit (047373aa3eb408be62be52ade840fa5f11e72337).
        Added missing ANGLE files except unused tests, extensions, samples, build, and .git directories.
        Ran Bison after making some changes to fix compile errors (see below).

        https://bugs.webkit.org/show_bug.cgi?id=118550

        Reviewed by Dean Jackson.

        * ANGLE.plist: Updated from svn to git.
        * ANGLE.xcodeproj/project.pbxproj: Renamed DetectRecursion to DetectCallDepth.
        * AUTHORS: Added.
        * CONTRIBUTORS: Added.
        * DEPS: Added.
        * GNUmakefile.am: Renamed DetectRecursion to DetectCallDepth and added Uniform.cpp.
        * LICENSE: Added.
        * README.chromium: Added.
        * Target.pri: Renamed DetectRecursion to DetectCallDepth.
        * codereview.settings: Added.
        * include/EGL/eglext.h:
        * include/GLES2/gl2ext.h:
        * include/GLSLANG/ShaderLang.h:
        * src/ANGLE.sln: Added.
        * src/build_angle.gyp: Added.
        * src/build_angle.gypi: Added.
        * src/common/RefCountObject.cpp:
        * src/common/angleutils.h:
        (ArraySize):
        (SafeRelease):
        * src/common/debug.cpp:
        * src/common/debug.h:
        * src/common/system.h:
        * src/common/version.h:
        * src/compiler/64bit-lexer-safety.patch: Added.
        * src/compiler/BaseTypes.h:
        (getQualifierString):
        * src/compiler/CodeGenHLSL.cpp:
        (ConstructCompiler):
        * src/compiler/Common.h:
        * src/compiler/Compiler.cpp:
        (TCompiler::TCompiler):
        (TCompiler::Init):
        (TCompiler::compile):
        (TCompiler::InitBuiltInSymbolTable):
        (TCompiler::detectCallDepth):
        (TCompiler::limitExpressionComplexity):
        (TCompiler::getResources):
        * src/compiler/ConstantUnion.h:
        (ConstantUnion::ConstantUnion):
        * src/compiler/DetectCallDepth.cpp: Added.
        (DetectCallDepth::FunctionNode::FunctionNode):
        (DetectCallDepth::FunctionNode::getName):
        (DetectCallDepth::FunctionNode::addCallee):
        (DetectCallDepth::FunctionNode::detectCallDepth):
        (DetectCallDepth::FunctionNode::reset):
        (DetectCallDepth::DetectCallDepth):
        (DetectCallDepth::~DetectCallDepth):
        (DetectCallDepth::visitAggregate):
        (DetectCallDepth::checkExceedsMaxDepth):
        (DetectCallDepth::resetFunctionNodes):
        (DetectCallDepth::detectCallDepthForFunction):
        (DetectCallDepth::detectCallDepth):
        (DetectCallDepth::findFunctionByName):
        * src/compiler/DetectCallDepth.h: Added.
        (DetectCallDepth::getInfoSink):
        * src/compiler/DetectRecursion.cpp: Removed.
        * src/compiler/DetectRecursion.h: Removed.
        * src/compiler/Diagnostics.cpp:
        (TDiagnostics::writeInfo):
        * src/compiler/ForLoopUnroll.cpp:
        (ForLoopUnroll::evaluateIntConstant):
        * src/compiler/InfoSink.cpp:
        (TInfoSinkBase::prefix):
        (TInfoSinkBase::location):
        (TInfoSinkBase::message):
        * src/compiler/InfoSink.h:
        * src/compiler/Initialize.cpp:
        (InsertBuiltInFunctions):
        (IdentifyBuiltIns):
        (InitExtensionBehavior):
        * src/compiler/Initialize.h:
        * src/compiler/Intermediate.cpp:
        (TIntermediate::addSymbol):
        (TIntermediate::addBinaryMath):
        (TIntermediate::addAssign):
        (TIntermediate::addIndex):
        (TIntermediate::addUnaryMath):
        (TIntermediate::setAggregateOperator):
        (TIntermediate::addConversion):
        (TIntermediate::growAggregate):
        (TIntermediate::makeAggregate):
        (TIntermediate::addSelection):
        (TIntermediate::addComma):
        (TIntermediate::addConstantUnion):
        (TIntermediate::addSwizzle):
        (TIntermediate::addLoop):
        (TIntermediate::addBranch):
        (TIntermUnary::promote):
        (TIntermBinary::promote):
        (CompareStruct):
        (CompareStructure):
        (TIntermConstantUnion::fold): Added implied static_casts to fix compiling errors on Mac.
        (TIntermediate::promoteConstantUnion):
        * src/compiler/OutputGLSL.cpp:
        (TOutputGLSL::visitSymbol):
        * src/compiler/OutputGLSL.h:
        * src/compiler/OutputGLSLBase.cpp:
        (TOutputGLSLBase::writeVariableType):
        (TOutputGLSLBase::writeConstantUnion):
        (TOutputGLSLBase::visitBinary):
        (TOutputGLSLBase::visitAggregate):
        (TOutputGLSLBase::getTypeName):
        (TOutputGLSLBase::structDeclared):
        (TOutputGLSLBase::declareStruct):
        * src/compiler/OutputGLSLBase.h:
        * src/compiler/OutputHLSL.cpp:
        (sh::OutputHLSL::OutputHLSL):
        (sh::OutputHLSL::getUniforms):
        (sh::OutputHLSL::header):
        (sh::OutputHLSL::visitSymbol):
        (sh::OutputHLSL::visitBinary):
        (sh::OutputHLSL::visitAggregate):
        (sh::OutputHLSL::visitSelection):
        (sh::OutputHLSL::visitLoop):
        (sh::OutputHLSL::handleExcessiveLoop):
        (sh::OutputHLSL::argumentString):
        (sh::OutputHLSL::typeString):
        (sh::OutputHLSL::textureString):
        (sh::OutputHLSL::initializer):
        (sh::OutputHLSL::addConstructor):
        (sh::OutputHLSL::writeConstantUnion):
        (sh::OutputHLSL::decorateUniform):
        (sh::OutputHLSL::decorateField):
        (sh::OutputHLSL::registerString):
        (sh::OutputHLSL::samplerRegister):
        (sh::OutputHLSL::uniformRegister):
        (sh::OutputHLSL::declareUniform):
        (sh::OutputHLSL::glVariableType):
        (sh::OutputHLSL::glVariablePrecision):
        * src/compiler/OutputHLSL.h:
        * src/compiler/ParseHelper.cpp:
        (TParseContext::parseVectorFields):
        (TParseContext::parseMatrixFields):
        (TParseContext::error):
        (TParseContext::warning):
        (TParseContext::assignError):
        (TParseContext::unaryOpError):
        (TParseContext::binaryOpError):
        (TParseContext::precisionErrorCheck):
        (TParseContext::lValueErrorCheck):
        (TParseContext::globalErrorCheck):
        (TParseContext::reservedErrorCheck):
        (TParseContext::constructorErrorCheck):
        (TParseContext::voidErrorCheck):
        (TParseContext::boolErrorCheck):
        (TParseContext::samplerErrorCheck):
        (TParseContext::structQualifierErrorCheck):
        (TParseContext::parameterSamplerErrorCheck):
        (TParseContext::containsSampler):
        (TParseContext::arraySizeErrorCheck):
        (TParseContext::arrayQualifierErrorCheck):
        (TParseContext::arrayTypeErrorCheck):
        (TParseContext::arrayErrorCheck):
        (TParseContext::nonInitConstErrorCheck):
        (TParseContext::nonInitErrorCheck):
        (TParseContext::paramErrorCheck):
        (TParseContext::extensionErrorCheck):
        (TParseContext::isExtensionEnabled):
        Replaced auto with std::map<std::string, TBehavior>::const_iterator to fix Qt and EFL compiling errors.
        (TParseContext::findFunction):
        (TParseContext::executeInitializer):
        (TParseContext::addConstructor):
        (TParseContext::constructBuiltIn):
        (TParseContext::constructStruct):
        (TParseContext::addConstVectorNode):
        (TParseContext::addConstMatrixNode):
        (TParseContext::addConstArrayNode):
        (TParseContext::addConstStruct):
        (TParseContext::enterStructDeclaration):
        (TParseContext::structNestingErrorCheck):
        (TParseContext::addIndexExpression):
        * src/compiler/ParseHelper.h:
        (TParseContext::TParseContext):
        (TParseContext::pragma):
        * src/compiler/PoolAlloc.cpp:
        (TPoolAllocator::allocate):
        * src/compiler/ShHandle.h:
        (TShHandleBase::getAsTranslatorHLSL):
        * src/compiler/ShaderLang.cpp:
        (ShInitBuiltInResources):
        (ShGetInfoPointer):
        * src/compiler/SymbolTable.cpp:
        (TType::TType):
        (TType::buildMangledName):
        (TType::getObjectSize):
        (TStructure::containsArrays):
        (TStructure::buildMangledName):
        (TStructure::calculateObjectSize):
        (TStructure::calculateDeepestNesting):
        (TSymbolTableLevel::relateToExtension):
        * src/compiler/SymbolTable.h:
        (TSymbol::relateToExtension):
        (TSymbol::getExtension):
        (TVariable::TVariable):
        (TVariable::setQualifier):
        (TVariable::shareConstPointer):
        (TSymbolTableLevel::insert):
        (TSymbolTable::insertConstInt):
        (TSymbolTable::insertBuiltIn):
        * src/compiler/TranslatorHLSL.cpp:
        (TranslatorHLSL::TranslatorHLSL):
        (TranslatorHLSL::translate):
        * src/compiler/TranslatorHLSL.h:
        (TranslatorHLSL::getAsTranslatorHLSL):
        (TranslatorHLSL::getUniforms):
        * src/compiler/Types.h: Removed enum bit fields to fix gcc compiler errors.
        (TField::TField):
        (TField::type):
        (TField::name):
        (NewPoolTFieldList):
        (TStructure::TStructure):
        (TStructure::name):
        (TStructure::fields):
        (TStructure::mangledName):
        (TStructure::objectSize):
        (TStructure::deepestNesting):
        (TType::TType):
        (TType::elementRegisterCount):
        (TType::totalRegisterCount):
        (TType::clearArrayness):
        (TType::getStruct):
        (TType::setStruct):
        (TType::getMangledName):
        (TType::getDeepestStructNesting):
        (TType::isStructureContainingArrays):
        (TPublicType::setBasic):
        * src/compiler/Uniform.cpp: Added.
        (sh::Uniform::Uniform):
        * src/compiler/Uniform.h: Added.
        * src/compiler/VariableInfo.cpp:
        (getUserDefinedVariableInfo):
        * src/compiler/glslang.l:
        * src/compiler/glslang.y: Moved YYLTYPE definition into %union to work with Bison 2.3.
        * src/compiler/glslang_lex.cpp:
        (yy_get_previous_state):
        (yy_try_NUL_trans):
        (yyget_lloc):
        (yyset_lloc):
        (string_input):
        (check_type):
        (reserved_word):
        (glslang_scan):
        * src/compiler/glslang_tab.cpp:
        (yyerror):
        * src/compiler/glslang_tab.h:
        * src/compiler/intermOut.cpp:
        (TOutputTraverser::visitUnary):
        (TOutputTraverser::visitAggregate):
        (TOutputTraverser::visitConstantUnion):
        * src/compiler/intermediate.h:
        (TIntermNode::TIntermNode):
        (TIntermNode::~TIntermNode):
        (TIntermNode::getLine):
        (TIntermNode::setLine):
        (TIntermNode::getAsLoopNode):
        (TIntermTyped::totalRegisterCount):
        (TIntermTyped::elementRegisterCount):
        (TIntermTyped::getArraySize):
        (TIntermConstantUnion::getIConst):
        (TIntermConstantUnion::getFConst):
        (TIntermConstantUnion::getBConst):
        (TIntermAggregate::TIntermAggregate):
        (TIntermTraverser::TIntermTraverser):
        (TIntermTraverser::getMaxDepth):
        (TIntermTraverser::incrementDepth):
        * src/compiler/localintermediate.h:
        * src/compiler/parseConst.cpp:
        (TConstTraverser::visitSymbol):
        (TConstTraverser::visitBinary):
        (TConstTraverser::visitUnary):
        (TConstTraverser::visitAggregate):
        (TConstTraverser::visitSelection):
        (TConstTraverser::visitConstantUnion):
        (TConstTraverser::visitLoop):
        (TConstTraverser::visitBranch):
        (TIntermediate::parseConstTree):
        * src/compiler/preprocessor/64bit-tokenizer-safety.patch: Added.
        * src/compiler/preprocessor/Tokenizer.cpp:
        (yy_get_previous_state):
        (yy_try_NUL_trans):
        * src/compiler/preprocessor/Tokenizer.l:
        * src/compiler/preprocessor/preprocessor.vcxproj: Added.
        * src/compiler/preprocessor/preprocessor.vcxproj.filters: Added.
        * src/compiler/timing/RestrictVertexShaderTiming.cpp:
        (RestrictVertexShaderTiming::visitSymbol):
        * src/compiler/translator_common.vcxproj: Added.
        * src/compiler/translator_common.vcxproj.filters: Added.
        * src/compiler/translator_hlsl.vcxproj: Added.
        * src/compiler/translator_hlsl.vcxproj.filters: Added.
        * src/libEGL/Config.cpp: Added.
        (egl::Config::Config):
        (egl::Config::getHandle):
        (egl::SortConfig::SortConfig):
        (egl::SortConfig::scanForWantedComponents):
        (egl::SortConfig::wantedComponentsSize):
        (egl::SortConfig::operator()):
        (egl::ConfigSet::ConfigSet):
        (egl::ConfigSet::add):
        (egl::ConfigSet::size):
        (egl::ConfigSet::getConfigs):
        (egl::ConfigSet::get):
        * src/libEGL/Config.h: Added.
        * src/libEGL/Display.cpp: Added.
        (egl::Display::getDisplay):
        (egl::Display::Display):
        (egl::Display::~Display):
        (egl::Display::initialize):
        (egl::Display::terminate):
        (egl::Display::getConfigs):
        (egl::Display::getConfigAttrib):
        (egl::Display::createWindowSurface):
        (egl::Display::createOffscreenSurface):
        (egl::Display::createContext):
        (egl::Display::restoreLostDevice):
        (egl::Display::destroySurface):
        (egl::Display::destroyContext):
        (egl::Display::notifyDeviceLost):
        (egl::Display::recreateSwapChains):
        (egl::Display::isInitialized):
        (egl::Display::isValidConfig):
        (egl::Display::isValidContext):
        (egl::Display::isValidSurface):
        (egl::Display::hasExistingWindowSurface):
        (egl::Display::initExtensionString):
        (egl::Display::getExtensionString):
        (egl::Display::initVendorString):
        (egl::Display::getVendorString):
        * src/libEGL/Display.h: Added.
        (egl::Display::getRenderer):
        * src/libEGL/Surface.cpp: Added.
        (egl::Surface::Surface):
        (egl::Surface::~Surface):
        (egl::Surface::initialize):
        (egl::Surface::release):
        (egl::Surface::resetSwapChain):
        (egl::Surface::resizeSwapChain):
        (egl::Surface::swapRect):
        (egl::Surface::getWindowHandle):
        (egl::SurfaceWindowProc):
        (egl::Surface::subclassWindow):
        (egl::Surface::unsubclassWindow):
        (egl::Surface::checkForOutOfDateSwapChain):
        (egl::Surface::swap):
        (egl::Surface::postSubBuffer):
        (egl::Surface::getWidth):
        (egl::Surface::getHeight):
        (egl::Surface::isPostSubBufferSupported):
        (egl::Surface::getSwapChain):
        (egl::Surface::setSwapInterval):
        (egl::Surface::getTextureFormat):
        (egl::Surface::getTextureTarget):
        (egl::Surface::setBoundTexture):
        (egl::Surface::getBoundTexture):
        (egl::Surface::getFormat):
        * src/libEGL/Surface.h: Added.
        * src/libEGL/libEGL.cpp: Added.
        (validateDisplay):
        (validateConfig):
        (validateContext):
        (validateSurface):
        * src/libEGL/libEGL.def: Added.
        * src/libEGL/libEGL.rc: Added.
        * src/libEGL/libEGL.vcxproj: Added.
        * src/libEGL/libEGL.vcxproj.filters: Added.
        * src/libEGL/main.cpp: Added.
        (DllMain):
        (egl::setCurrentError):
        (egl::getCurrentError):
        (egl::setCurrentAPI):
        (egl::getCurrentAPI):
        (egl::setCurrentDisplay):
        (egl::getCurrentDisplay):
        (egl::setCurrentDrawSurface):
        (egl::getCurrentDrawSurface):
        (egl::setCurrentReadSurface):
        (egl::getCurrentReadSurface):
        (egl::error):
        * src/libEGL/main.h: Added.
        (egl::error):
        (egl::success):
        * src/libEGL/resource.h: Added.
        * src/libGLESv2/BinaryStream.h: Added.
        (gl::BinaryInputStream::BinaryInputStream):
        (gl::BinaryInputStream::read):
        (gl::BinaryInputStream::skip):
        (gl::BinaryInputStream::offset):
        (gl::BinaryInputStream::error):
        (gl::BinaryInputStream::endOfStream):
        (gl::BinaryOutputStream::BinaryOutputStream):
        (gl::BinaryOutputStream::write):
        (gl::BinaryOutputStream::length):
        (gl::BinaryOutputStream::data):
        * src/libGLESv2/Buffer.cpp: Added.
        (gl::Buffer::Buffer):
        (gl::Buffer::~Buffer):
        (gl::Buffer::bufferData):
        (gl::Buffer::bufferSubData):
        (gl::Buffer::getStorage):
        (gl::Buffer::size):
        (gl::Buffer::usage):
        (gl::Buffer::getStaticVertexBuffer):
        (gl::Buffer::getStaticIndexBuffer):
        (gl::Buffer::invalidateStaticData):
        (gl::Buffer::promoteStaticUsage):
        * src/libGLESv2/Buffer.h: Added.
        * src/libGLESv2/Context.cpp: Added.
        (gl::makeStaticString):
        (gl::Context::Context):
        (gl::Context::~Context):
        (gl::Context::makeCurrent):
        (gl::Context::markContextLost):
        (gl::Context::isContextLost):
        (gl::Context::setClearColor):
        (gl::Context::setClearDepth):
        (gl::Context::setClearStencil):
        (gl::Context::setCullFace):
        (gl::Context::isCullFaceEnabled):
        (gl::Context::setCullMode):
        (gl::Context::setFrontFace):
        (gl::Context::setDepthTest):
        (gl::Context::isDepthTestEnabled):
        (gl::Context::setDepthFunc):
        (gl::Context::setDepthRange):
        (gl::Context::setBlend):
        (gl::Context::isBlendEnabled):
        (gl::Context::setBlendFactors):
        (gl::Context::setBlendColor):
        (gl::Context::setBlendEquation):
        (gl::Context::setStencilTest):
        (gl::Context::isStencilTestEnabled):
        (gl::Context::setStencilParams):
        (gl::Context::setStencilBackParams):
        (gl::Context::setStencilWritemask):
        (gl::Context::setStencilBackWritemask):
        (gl::Context::setStencilOperations):
        (gl::Context::setStencilBackOperations):
        (gl::Context::setPolygonOffsetFill):
        (gl::Context::isPolygonOffsetFillEnabled):
        (gl::Context::setPolygonOffsetParams):
        (gl::Context::setSampleAlphaToCoverage):
        (gl::Context::isSampleAlphaToCoverageEnabled):
        (gl::Context::setSampleCoverage):
        (gl::Context::isSampleCoverageEnabled):
        (gl::Context::setSampleCoverageParams):
        (gl::Context::setScissorTest):
        (gl::Context::isScissorTestEnabled):
        (gl::Context::setDither):
        (gl::Context::isDitherEnabled):
        (gl::Context::setLineWidth):
        (gl::Context::setGenerateMipmapHint):
        (gl::Context::setFragmentShaderDerivativeHint):
        (gl::Context::setViewportParams):
        (gl::Context::setScissorParams):
        (gl::Context::setColorMask):
        (gl::Context::setDepthMask):
        (gl::Context::setActiveSampler):
        (gl::Context::getReadFramebufferHandle):
        (gl::Context::getDrawFramebufferHandle):
        (gl::Context::getRenderbufferHandle):
        (gl::Context::getArrayBufferHandle):
        (gl::Context::getActiveQuery):
        (gl::Context::setEnableVertexAttribArray):
        (gl::Context::getVertexAttribState):
        (gl::Context::setVertexAttribState):
        (gl::Context::getVertexAttribPointer):
        (gl::Context::setPackAlignment):
        (gl::Context::getPackAlignment):
        (gl::Context::setUnpackAlignment):
        (gl::Context::getUnpackAlignment):
        (gl::Context::setPackReverseRowOrder):
        (gl::Context::getPackReverseRowOrder):
        (gl::Context::createBuffer):
        (gl::Context::createProgram):
        (gl::Context::createShader):
        (gl::Context::createTexture):
        (gl::Context::createRenderbuffer):
        (gl::Context::createFramebuffer):
        (gl::Context::createFence):
        (gl::Context::createQuery):
        (gl::Context::deleteBuffer):
        (gl::Context::deleteShader):
        (gl::Context::deleteProgram):
        (gl::Context::deleteTexture):
        (gl::Context::deleteRenderbuffer):
        (gl::Context::deleteFramebuffer):
        (gl::Context::deleteFence):
        (gl::Context::deleteQuery):
        (gl::Context::getBuffer):
        (gl::Context::getShader):
        (gl::Context::getProgram):
        (gl::Context::getTexture):
        (gl::Context::getRenderbuffer):
        (gl::Context::getReadFramebuffer):
        (gl::Context::getDrawFramebuffer):
        (gl::Context::bindArrayBuffer):
        (gl::Context::bindElementArrayBuffer):
        (gl::Context::bindTexture2D):
        (gl::Context::bindTextureCubeMap):
        (gl::Context::bindReadFramebuffer):
        (gl::Context::bindDrawFramebuffer):
        (gl::Context::bindRenderbuffer):
        (gl::Context::useProgram):
        (gl::Context::linkProgram):
        (gl::Context::setProgramBinary):
        (gl::Context::beginQuery):
        (gl::Context::endQuery):
        (gl::Context::setFramebufferZero):
        (gl::Context::setRenderbufferStorage):
        (gl::Context::getFramebuffer):
        (gl::Context::getFence):
        (gl::Context::getQuery):
        (gl::Context::getArrayBuffer):
        (gl::Context::getElementArrayBuffer):
        (gl::Context::getCurrentProgramBinary):
        (gl::Context::getTexture2D):
        (gl::Context::getTextureCubeMap):
        (gl::Context::getSamplerTexture):
        (gl::Context::getBooleanv):
        (gl::Context::getFloatv):
        (gl::Context::getIntegerv):
        (gl::Context::getQueryParameterInfo):
        (gl::Context::applyRenderTarget):
        (gl::Context::applyState):
        (gl::Context::applyShaders):
        (gl::Context::applyTextures):
        (gl::Context::readPixels):
        (gl::Context::clear):
        (gl::Context::drawArrays):
        (gl::Context::drawElements):
        (gl::Context::sync):
        (gl::Context::recordInvalidEnum):
        (gl::Context::recordInvalidValue):
        (gl::Context::recordInvalidOperation):
        (gl::Context::recordOutOfMemory):
        (gl::Context::recordInvalidFramebufferOperation):
        (gl::Context::getError):
        (gl::Context::getResetStatus):
        (gl::Context::isResetNotificationEnabled):
        (gl::Context::getMajorShaderModel):
        (gl::Context::getMaximumPointSize):
        (gl::Context::getMaximumCombinedTextureImageUnits):
        (gl::Context::getMaxSupportedSamples):
        (gl::Context::getMaximumRenderTargets):
        (gl::Context::supportsEventQueries):
        (gl::Context::supportsOcclusionQueries):
        (gl::Context::supportsBGRATextures):
        (gl::Context::supportsDXT1Textures):
        (gl::Context::supportsDXT3Textures):
        (gl::Context::supportsDXT5Textures):
        (gl::Context::supportsFloat32Textures):
        (gl::Context::supportsFloat32LinearFilter):
        (gl::Context::supportsFloat32RenderableTextures):
        (gl::Context::supportsFloat16Textures):
        (gl::Context::supportsFloat16LinearFilter):
        (gl::Context::supportsFloat16RenderableTextures):
        (gl::Context::getMaximumRenderbufferDimension):
        (gl::Context::getMaximumTextureDimension):
        (gl::Context::getMaximumCubeTextureDimension):
        (gl::Context::getMaximumTextureLevel):
        (gl::Context::supportsLuminanceTextures):
        (gl::Context::supportsLuminanceAlphaTextures):
        (gl::Context::supportsDepthTextures):
        (gl::Context::supports32bitIndices):
        (gl::Context::supportsNonPower2Texture):
        (gl::Context::supportsInstancing):
        (gl::Context::supportsTextureFilterAnisotropy):
        (gl::Context::getTextureMaxAnisotropy):
        (gl::Context::getCurrentReadFormatType):
        (gl::Context::detachBuffer):
        (gl::Context::detachTexture):
        (gl::Context::detachFramebuffer):
        (gl::Context::detachRenderbuffer):
        (gl::Context::getIncompleteTexture):
        (gl::Context::skipDraw):
        (gl::Context::setVertexAttrib):
        (gl::Context::setVertexAttribDivisor):
        (gl::Context::initExtensionString):
        (gl::Context::getExtensionString):
        (gl::Context::initRendererString):
        (gl::Context::getRendererString):
        (gl::Context::blitFramebuffer):
        * src/libGLESv2/Context.h: Added.
        (gl::VertexAttribute::VertexAttribute):
        (gl::VertexAttribute::typeSize):
        (gl::VertexAttribute::stride):
        * src/libGLESv2/Fence.cpp: Added.
        (gl::Fence::Fence):
        (gl::Fence::~Fence):
        (gl::Fence::isFence):
        (gl::Fence::setFence):
        (gl::Fence::testFence):
        (gl::Fence::finishFence):
        (gl::Fence::getFenceiv):
        * src/libGLESv2/Fence.h: Added.
        * src/libGLESv2/Float16ToFloat32.cpp: Added.
        (gl::float16ToFloat32):
        * src/libGLESv2/Float16ToFloat32.py: Added.
        (convertMantissa):
        (convertExponent):
        (convertOffset):
        * src/libGLESv2/Framebuffer.cpp: Added.
        (gl::Framebuffer::Framebuffer):
        (gl::Framebuffer::~Framebuffer):
        (gl::Framebuffer::lookupRenderbuffer):
        (gl::Framebuffer::setColorbuffer):
        (gl::Framebuffer::setDepthbuffer):
        (gl::Framebuffer::setStencilbuffer):
        (gl::Framebuffer::detachTexture):
        (gl::Framebuffer::detachRenderbuffer):
        (gl::Framebuffer::getRenderTargetSerial):
        (gl::Framebuffer::getDepthbufferSerial):
        (gl::Framebuffer::getStencilbufferSerial):
        (gl::Framebuffer::getColorbuffer):
        (gl::Framebuffer::getDepthbuffer):
        (gl::Framebuffer::getStencilbuffer):
        (gl::Framebuffer::getDepthOrStencilbuffer):
        (gl::Framebuffer::getReadColorbuffer):
        (gl::Framebuffer::getReadColorbufferType):
        (gl::Framebuffer::getFirstColorbuffer):
        (gl::Framebuffer::getColorbufferType):
        (gl::Framebuffer::getDepthbufferType):
        (gl::Framebuffer::getStencilbufferType):
        (gl::Framebuffer::getColorbufferHandle):
        (gl::Framebuffer::getDepthbufferHandle):
        (gl::Framebuffer::getStencilbufferHandle):
        (gl::Framebuffer::getDrawBufferState):
        (gl::Framebuffer::setDrawBufferState):
        (gl::Framebuffer::isEnabledColorAttachment):
        (gl::Framebuffer::hasEnabledColorAttachment):
        (gl::Framebuffer::hasStencil):
        (gl::Framebuffer::usingExtendedDrawBuffers):
        (gl::Framebuffer::completeness):
        (gl::DefaultFramebuffer::DefaultFramebuffer):
        (gl::Framebuffer::getSamples):
        (gl::DefaultFramebuffer::completeness):
        * src/libGLESv2/Framebuffer.h: Added.
        * src/libGLESv2/HandleAllocator.cpp: Added.
        (gl::HandleAllocator::HandleAllocator):
        (gl::HandleAllocator::~HandleAllocator):
        (gl::HandleAllocator::setBaseHandle):
        (gl::HandleAllocator::allocate):
        (gl::HandleAllocator::release):
        * src/libGLESv2/HandleAllocator.h: Added.
        * src/libGLESv2/Program.cpp: Added.
        (gl::AttributeBindings::AttributeBindings):
        (gl::AttributeBindings::~AttributeBindings):
        (gl::InfoLog::InfoLog):
        (gl::InfoLog::~InfoLog):
        (gl::InfoLog::getLength):
        (gl::InfoLog::getLog):
        (gl::InfoLog::appendSanitized):
        (gl::InfoLog::append):
        (gl::InfoLog::reset):
        (gl::Program::Program):
        (gl::Program::~Program):
        (gl::Program::attachShader):
        (gl::Program::detachShader):
        (gl::Program::getAttachedShadersCount):
        (gl::AttributeBindings::bindAttributeLocation):
        (gl::Program::bindAttributeLocation):
        (gl::Program::link):
        (gl::AttributeBindings::getAttributeBinding):
        (gl::Program::unlink):
        (gl::Program::isLinked):
        (gl::Program::getProgramBinary):
        (gl::Program::setProgramBinary):
        (gl::Program::release):
        (gl::Program::addRef):
        (gl::Program::getRefCount):
        (gl::Program::getProgramBinaryLength):
        (gl::Program::getInfoLogLength):
        (gl::Program::getInfoLog):
        (gl::Program::getAttachedShaders):
        (gl::Program::getActiveAttribute):
        (gl::Program::getActiveAttributeCount):
        (gl::Program::getActiveAttributeMaxLength):
        (gl::Program::getActiveUniform):
        (gl::Program::getActiveUniformCount):
        (gl::Program::getActiveUniformMaxLength):
        (gl::Program::flagForDeletion):
        (gl::Program::isFlaggedForDeletion):
        (gl::Program::validate):
        (gl::Program::isValidated):
        * src/libGLESv2/Program.h: Added.
        * src/libGLESv2/ProgramBinary.cpp: Added.
        (gl::str):
        (gl::UniformLocation::UniformLocation):
        (gl::ProgramBinary::ProgramBinary):
        (gl::ProgramBinary::~ProgramBinary):
        (gl::ProgramBinary::getSerial):
        (gl::ProgramBinary::issueSerial):
        (gl::ProgramBinary::getPixelExecutable):
        (gl::ProgramBinary::getVertexExecutable):
        (gl::ProgramBinary::getGeometryExecutable):
        (gl::ProgramBinary::getAttributeLocation):
        (gl::ProgramBinary::getSemanticIndex):
        (gl::ProgramBinary::getUsedSamplerRange):
        (gl::ProgramBinary::usesPointSize):
        (gl::ProgramBinary::usesPointSpriteEmulation):
        (gl::ProgramBinary::usesGeometryShader):
        (gl::ProgramBinary::getSamplerMapping):
        (gl::ProgramBinary::getSamplerTextureType):
        (gl::ProgramBinary::getUniformLocation):
        (gl::ProgramBinary::setUniform1fv):
        (gl::ProgramBinary::setUniform2fv):
        (gl::ProgramBinary::setUniform3fv):
        (gl::ProgramBinary::setUniform4fv):
        (gl::transposeMatrix):
        (gl::ProgramBinary::setUniformMatrix2fv):
        (gl::ProgramBinary::setUniformMatrix3fv):
        (gl::ProgramBinary::setUniformMatrix4fv):
        (gl::ProgramBinary::setUniform1iv):
        (gl::ProgramBinary::setUniform2iv):
        (gl::ProgramBinary::setUniform3iv):
        (gl::ProgramBinary::setUniform4iv):
        (gl::ProgramBinary::getUniformfv):
        (gl::ProgramBinary::getUniformiv):
        (gl::ProgramBinary::dirtyAllUniforms):
        (gl::ProgramBinary::applyUniforms):
        (gl::ProgramBinary::packVaryings):
        (gl::ProgramBinary::linkVaryings):
        (gl::ProgramBinary::load):
        (gl::ProgramBinary::save):
        (gl::ProgramBinary::getLength):
        (gl::ProgramBinary::link):
        (gl::ProgramBinary::linkAttributes):
        (gl::ProgramBinary::linkUniforms):
        (gl::ProgramBinary::defineUniform):
        (gl::ProgramBinary::generateGeometryShaderHLSL):
        (gl::ProgramBinary::generatePointSpriteHLSL):
        (gl::ProgramBinary::decorateAttribute):
        (gl::ProgramBinary::isValidated):
        (gl::ProgramBinary::getActiveAttribute):
        (gl::ProgramBinary::getActiveAttributeCount):
        (gl::ProgramBinary::getActiveAttributeMaxLength):
        (gl::ProgramBinary::getActiveUniform):
        (gl::ProgramBinary::getActiveUniformCount):
        (gl::ProgramBinary::getActiveUniformMaxLength):
        (gl::ProgramBinary::validate):
        (gl::ProgramBinary::validateSamplers):
        (gl::ProgramBinary::Sampler::Sampler):
        (gl::AttributeSorter::AttributeSorter):
        (gl::AttributeSorter::operator()):
        (gl::ProgramBinary::sortAttributesByLayout):
        * src/libGLESv2/ProgramBinary.h: Added.
        (gl::UniformLocation::UniformLocation):
        * src/libGLESv2/Query.cpp: Added.
        (gl::Query::Query):
        (gl::Query::~Query):
        (gl::Query::begin):
        (gl::Query::end):
        (gl::Query::getResult):
        (gl::Query::isResultAvailable):
        (gl::Query::getType):
        * src/libGLESv2/Query.h: Added.
        * src/libGLESv2/Renderbuffer.cpp: Added.
        (gl::RenderbufferInterface::RenderbufferInterface):
        (gl::RenderbufferInterface::addProxyRef):
        (gl::RenderbufferInterface::releaseProxy):
        (gl::RenderbufferInterface::getRedSize):
        (gl::RenderbufferInterface::getGreenSize):
        (gl::RenderbufferInterface::getBlueSize):
        (gl::RenderbufferInterface::getAlphaSize):
        (gl::RenderbufferInterface::getDepthSize):
        (gl::RenderbufferInterface::getStencilSize):
        (gl::RenderbufferTexture2D::RenderbufferTexture2D):
        (gl::RenderbufferTexture2D::~RenderbufferTexture2D):
        (gl::RenderbufferTexture2D::addProxyRef):
        (gl::RenderbufferTexture2D::releaseProxy):
        (gl::RenderbufferTexture2D::getRenderTarget):
        (gl::RenderbufferTexture2D::getDepthStencil):
        (gl::RenderbufferTexture2D::getWidth):
        (gl::RenderbufferTexture2D::getHeight):
        (gl::RenderbufferTexture2D::getInternalFormat):
        (gl::RenderbufferTexture2D::getActualFormat):
        (gl::RenderbufferTexture2D::getSamples):
        (gl::RenderbufferTexture2D::getSerial):
        (gl::RenderbufferTextureCubeMap::RenderbufferTextureCubeMap):
        (gl::RenderbufferTextureCubeMap::~RenderbufferTextureCubeMap):
        (gl::RenderbufferTextureCubeMap::addProxyRef):
        (gl::RenderbufferTextureCubeMap::releaseProxy):
        (gl::RenderbufferTextureCubeMap::getRenderTarget):
        (gl::RenderbufferTextureCubeMap::getDepthStencil):
        (gl::RenderbufferTextureCubeMap::getWidth):
        (gl::RenderbufferTextureCubeMap::getHeight):
        (gl::RenderbufferTextureCubeMap::getInternalFormat):
        (gl::RenderbufferTextureCubeMap::getActualFormat):
        (gl::RenderbufferTextureCubeMap::getSamples):
        (gl::RenderbufferTextureCubeMap::getSerial):
        (gl::Renderbuffer::Renderbuffer):
        (gl::Renderbuffer::~Renderbuffer):
        (gl::Renderbuffer::addRef):
        (gl::Renderbuffer::release):
        (gl::Renderbuffer::getRenderTarget):
        (gl::Renderbuffer::getDepthStencil):
        (gl::Renderbuffer::getWidth):
        (gl::Renderbuffer::getHeight):
        (gl::Renderbuffer::getInternalFormat):
        (gl::Renderbuffer::getActualFormat):
        (gl::Renderbuffer::getRedSize):
        (gl::Renderbuffer::getGreenSize):
        (gl::Renderbuffer::getBlueSize):
        (gl::Renderbuffer::getAlphaSize):
        (gl::Renderbuffer::getDepthSize):
        (gl::Renderbuffer::getStencilSize):
        (gl::Renderbuffer::getSamples):
        (gl::Renderbuffer::getSerial):
        (gl::Renderbuffer::setStorage):
        (gl::RenderbufferStorage::RenderbufferStorage):
        (gl::RenderbufferStorage::~RenderbufferStorage):
        (gl::RenderbufferStorage::getRenderTarget):
        (gl::RenderbufferStorage::getDepthStencil):
        (gl::RenderbufferStorage::getWidth):
        (gl::RenderbufferStorage::getHeight):
        (gl::RenderbufferStorage::getInternalFormat):
        (gl::RenderbufferStorage::getActualFormat):
        (gl::RenderbufferStorage::getSamples):
        (gl::RenderbufferStorage::getSerial):
        (gl::RenderbufferStorage::issueSerial):
        (gl::RenderbufferStorage::issueCubeSerials):
        (gl::Colorbuffer::Colorbuffer):
        (gl::Colorbuffer::~Colorbuffer):
        (gl::Colorbuffer::getRenderTarget):
        (gl::DepthStencilbuffer::DepthStencilbuffer):
        (gl::DepthStencilbuffer::~DepthStencilbuffer):
        (gl::DepthStencilbuffer::getDepthStencil):
        (gl::Depthbuffer::Depthbuffer):
        (gl::Depthbuffer::~Depthbuffer):
        (gl::Stencilbuffer::Stencilbuffer):
        (gl::Stencilbuffer::~Stencilbuffer):
        * src/libGLESv2/Renderbuffer.h: Added.
        (gl::RenderbufferInterface::~RenderbufferInterface):
        * src/libGLESv2/ResourceManager.cpp: Added.
        (gl::ResourceManager::ResourceManager):
        (gl::ResourceManager::~ResourceManager):
        (gl::ResourceManager::addRef):
        (gl::ResourceManager::release):
        (gl::ResourceManager::createBuffer):
        (gl::ResourceManager::createShader):
        (gl::ResourceManager::createProgram):
        (gl::ResourceManager::createTexture):
        (gl::ResourceManager::createRenderbuffer):
        (gl::ResourceManager::deleteBuffer):
        (gl::ResourceManager::deleteShader):
        (gl::ResourceManager::deleteProgram):
        (gl::ResourceManager::deleteTexture):
        (gl::ResourceManager::deleteRenderbuffer):
        (gl::ResourceManager::getBuffer):
        (gl::ResourceManager::getShader):
        (gl::ResourceManager::getTexture):
        (gl::ResourceManager::getProgram):
        (gl::ResourceManager::getRenderbuffer):
        (gl::ResourceManager::setRenderbuffer):
        (gl::ResourceManager::checkBufferAllocation):
        (gl::ResourceManager::checkTextureAllocation):
        (gl::ResourceManager::checkRenderbufferAllocation):
        * src/libGLESv2/ResourceManager.h: Added.
        * src/libGLESv2/Shader.cpp: Added.
        (gl::Shader::Shader):
        (gl::Shader::~Shader):
        (gl::Shader::getHandle):
        (gl::Shader::setSource):
        (gl::Shader::getInfoLogLength):
        (gl::Shader::getInfoLog):
        (gl::Shader::getSourceLength):
        (gl::Shader::getTranslatedSourceLength):
        (gl::Shader::getSourceImpl):
        (gl::Shader::getSource):
        (gl::Shader::getTranslatedSource):
        (gl::Shader::getUniforms):
        (gl::Shader::isCompiled):
        (gl::Shader::getHLSL):
        (gl::Shader::addRef):
        (gl::Shader::release):
        (gl::Shader::getRefCount):
        (gl::Shader::isFlaggedForDeletion):
        (gl::Shader::flagForDeletion):
        (gl::Shader::initializeCompiler):
        (gl::Shader::releaseCompiler):
        (gl::Shader::parseVaryings):
        (gl::Shader::resetVaryingsRegisterAssignment):
        (gl::Shader::uncompile):
        (gl::Shader::compileToHLSL):
        (gl::Shader::parseType):
        (gl::Shader::compareVarying):
        (gl::VertexShader::VertexShader):
        (gl::VertexShader::~VertexShader):
        (gl::VertexShader::getType):
        (gl::VertexShader::uncompile):
        (gl::VertexShader::compile):
        (gl::VertexShader::getSemanticIndex):
        (gl::VertexShader::parseAttributes):
        (gl::FragmentShader::FragmentShader):
        (gl::FragmentShader::~FragmentShader):
        (gl::FragmentShader::getType):
        (gl::FragmentShader::compile):
        * src/libGLESv2/Shader.h: Added.
        (gl::Varying::Varying):
        (gl::Attribute::Attribute):
        * src/libGLESv2/Texture.cpp: Added.
        (gl::Texture::Texture):
        (gl::Texture::~Texture):
        (gl::Texture::setMinFilter):
        (gl::Texture::setMagFilter):
        (gl::Texture::setWrapS):
        (gl::Texture::setWrapT):
        (gl::Texture::setMaxAnisotropy):
        (gl::Texture::setUsage):
        (gl::Texture::getMinFilter):
        (gl::Texture::getMagFilter):
        (gl::Texture::getWrapS):
        (gl::Texture::getWrapT):
        (gl::Texture::getMaxAnisotropy):
        (gl::Texture::getLodOffset):
        (gl::Texture::getSamplerState):
        (gl::Texture::getUsage):
        (gl::Texture::isMipmapFiltered):
        (gl::Texture::setImage):
        (gl::Texture::setCompressedImage):
        (gl::Texture::subImage):
        (gl::Texture::subImageCompressed):
        (gl::Texture::getNativeTexture):
        (gl::Texture::hasDirtyImages):
        (gl::Texture::resetDirty):
        (gl::Texture::getTextureSerial):
        (gl::Texture::getRenderTargetSerial):
        (gl::Texture::isImmutable):
        (gl::Texture::creationLevels):
        (gl::Texture2D::Texture2D):
        (gl::Texture2D::~Texture2D):
        (gl::Texture2D::addProxyRef):
        (gl::Texture2D::releaseProxy):
        (gl::Texture2D::getTarget):
        (gl::Texture2D::getWidth):
        (gl::Texture2D::getHeight):
        (gl::Texture2D::getInternalFormat):
        (gl::Texture2D::getActualFormat):
        (gl::Texture2D::redefineImage):
        (gl::Texture2D::setImage):
        (gl::Texture2D::bindTexImage):
        (gl::Texture2D::releaseTexImage):
        (gl::Texture2D::setCompressedImage):
        (gl::Texture2D::commitRect):
        (gl::Texture2D::subImage):
        (gl::Texture2D::subImageCompressed):
        (gl::Texture2D::copyImage):
        (gl::Texture2D::copySubImage):
        (gl::Texture2D::storage):
        (gl::Texture2D::isSamplerComplete):
        (gl::Texture2D::isMipmapComplete):
        (gl::Texture2D::isCompressed):
        (gl::Texture2D::isDepth):
        (gl::Texture2D::createTexture):
        (gl::Texture2D::updateTexture):
        (gl::Texture2D::convertToRenderTarget):
        (gl::Texture2D::generateMipmaps):
        (gl::Texture2D::getRenderbuffer):
        (gl::Texture2D::getRenderTarget):
        (gl::Texture2D::getDepthStencil):
        (gl::Texture2D::levelCount):
        (gl::Texture2D::getStorage):
        (gl::TextureCubeMap::TextureCubeMap):
        (gl::TextureCubeMap::~TextureCubeMap):
        (gl::TextureCubeMap::addProxyRef):
        (gl::TextureCubeMap::releaseProxy):
        (gl::TextureCubeMap::getTarget):
        (gl::TextureCubeMap::getWidth):
        (gl::TextureCubeMap::getHeight):
        (gl::TextureCubeMap::getInternalFormat):
        (gl::TextureCubeMap::getActualFormat):
        (gl::TextureCubeMap::setImagePosX):
        (gl::TextureCubeMap::setImageNegX):
        (gl::TextureCubeMap::setImagePosY):
        (gl::TextureCubeMap::setImageNegY):
        (gl::TextureCubeMap::setImagePosZ):
        (gl::TextureCubeMap::setImageNegZ):
        (gl::TextureCubeMap::setCompressedImage):
        (gl::TextureCubeMap::commitRect):
        (gl::TextureCubeMap::subImage):
        (gl::TextureCubeMap::subImageCompressed):
        (gl::TextureCubeMap::isSamplerComplete):
        (gl::TextureCubeMap::isCubeComplete):
        (gl::TextureCubeMap::isMipmapCubeComplete):
        (gl::TextureCubeMap::isCompressed):
        (gl::TextureCubeMap::createTexture):
        (gl::TextureCubeMap::updateTexture):
        (gl::TextureCubeMap::convertToRenderTarget):
        (gl::TextureCubeMap::setImage):
        (gl::TextureCubeMap::faceIndex):
        (gl::TextureCubeMap::redefineImage):
        (gl::TextureCubeMap::copyImage):
        (gl::TextureCubeMap::copySubImage):
        (gl::TextureCubeMap::storage):
        (gl::TextureCubeMap::generateMipmaps):
        (gl::TextureCubeMap::getRenderbuffer):
        (gl::TextureCubeMap::getRenderTarget):
        (gl::TextureCubeMap::levelCount):
        (gl::TextureCubeMap::getStorage):
        * src/libGLESv2/Texture.h: Added.
        * src/libGLESv2/Uniform.cpp: Added.
        (gl::Uniform::Uniform):
        (gl::Uniform::~Uniform):
        (gl::Uniform::isArray):
        (gl::Uniform::elementCount):
        * src/libGLESv2/Uniform.h: Added.
        * src/libGLESv2/angletypes.h: Added.
        * src/libGLESv2/constants.h: Added.
        * src/libGLESv2/libGLESv2.cpp: Added.
        (validImageSize):
        (checkTextureFormatType):
        (validateSubImageParams2D):
        (validateSubImageParamsCube):
        (validReadFormatType):
        * src/libGLESv2/libGLESv2.def: Added.
        * src/libGLESv2/libGLESv2.rc: Added.
        * src/libGLESv2/libGLESv2.vcxproj: Added.
        * src/libGLESv2/libGLESv2.vcxproj.filters: Added.
        * src/libGLESv2/main.cpp: Added.
        (DllMain):
        (gl::makeCurrent):
        (gl::getContext):
        (gl::getNonLostContext):
        (gl::getDisplay):
        (gl::error):
        * src/libGLESv2/main.h: Added.
        (gl::error):
        * src/libGLESv2/mathutil.h: Added.
        (gl::Vector4::Vector4):
        (gl::isPow2):
        (gl::log2):
        (gl::ceilPow2):
        (gl::clamp):
        (gl::clamp01):
        (gl::unorm):
        (gl::supportsSSE2):
        (gl::float32ToFloat16):
        (rx::Range::Range):
        * src/libGLESv2/precompiled.cpp: Added.
        * src/libGLESv2/precompiled.h: Added.
        * src/libGLESv2/renderer: Added.
        * src/libGLESv2/renderer/Blit.cpp: Added.
        (rx::Blit::Blit):
        (rx::Blit::~Blit):
        (rx::Blit::initGeometry):
        (rx::Blit::setShader):
        (rx::Blit::setVertexShader):
        (rx::Blit::setPixelShader):
        (rx::Blit::getSurfaceRect):
        (rx::Blit::boxFilter):
        (rx::Blit::copy):
        (rx::Blit::formatConvert):
        (rx::Blit::setFormatConvertShaders):
        (rx::Blit::copySurfaceToTexture):
        (rx::Blit::setViewport):
        (rx::Blit::setCommonBlitState):
        (rx::Blit::render):
        (rx::Blit::saveState):
        (rx::Blit::restoreState):
        * src/libGLESv2/renderer/Blit.h: Added.
        * src/libGLESv2/renderer/BufferStorage.cpp: Added.
        (rx::BufferStorage::BufferStorage):
        (rx::BufferStorage::~BufferStorage):
        (rx::BufferStorage::getSerial):
        (rx::BufferStorage::updateSerial):
        (rx::BufferStorage::markBufferUsage):
        * src/libGLESv2/renderer/BufferStorage.h: Added.
        * src/libGLESv2/renderer/BufferStorage11.cpp: Added.
        (rx::BufferStorage11::BufferStorage11):
        (rx::BufferStorage11::~BufferStorage11):
        (rx::BufferStorage11::makeBufferStorage11):
        (rx::BufferStorage11::getData):
        (rx::BufferStorage11::setData):
        (rx::BufferStorage11::clear):
        (rx::BufferStorage11::getSize):
        (rx::BufferStorage11::supportsDirectBinding):
        (rx::BufferStorage11::markBufferUsage):
        (rx::BufferStorage11::getBuffer):
        * src/libGLESv2/renderer/BufferStorage11.h: Added.
        * src/libGLESv2/renderer/BufferStorage9.cpp: Added.
        (rx::BufferStorage9::BufferStorage9):
        (rx::BufferStorage9::~BufferStorage9):
        (rx::BufferStorage9::makeBufferStorage9):
        (rx::BufferStorage9::getData):
        (rx::BufferStorage9::setData):
        (rx::BufferStorage9::clear):
        (rx::BufferStorage9::getSize):
        (rx::BufferStorage9::supportsDirectBinding):
        * src/libGLESv2/renderer/BufferStorage9.h: Added.
        * src/libGLESv2/renderer/Fence11.cpp: Added.
        (rx::Fence11::Fence11):
        (rx::Fence11::~Fence11):
        (rx::Fence11::isFence):
        (rx::Fence11::setFence):
        (rx::Fence11::testFence):
        (rx::Fence11::finishFence):
        (rx::Fence11::getFenceiv):
        * src/libGLESv2/renderer/Fence11.h: Added.
        * src/libGLESv2/renderer/Fence9.cpp: Added.
        (rx::Fence9::Fence9):
        (rx::Fence9::~Fence9):
        (rx::Fence9::isFence):
        (rx::Fence9::setFence):
        (rx::Fence9::testFence):
        (rx::Fence9::finishFence):
        (rx::Fence9::getFenceiv):
        * src/libGLESv2/renderer/Fence9.h: Added.
        * src/libGLESv2/renderer/FenceImpl.h: Added.
        (rx::FenceImpl::FenceImpl):
        (rx::FenceImpl::~FenceImpl):
        (rx::FenceImpl::setStatus):
        (rx::FenceImpl::getStatus):
        (rx::FenceImpl::setCondition):
        (rx::FenceImpl::getCondition):
        * src/libGLESv2/renderer/Image.cpp: Added.
        (rx::Image::Image):
        (rx::Image::loadAlphaDataToBGRA):
        (rx::Image::loadAlphaDataToNative):
        (rx::Image::loadAlphaFloatDataToRGBA):
        (rx::Image::loadAlphaHalfFloatDataToRGBA):
        (rx::Image::loadLuminanceDataToNativeOrBGRA):
        (rx::Image::loadLuminanceFloatDataToRGBA):
        (rx::Image::loadLuminanceFloatDataToRGB):
        (rx::Image::loadLuminanceHalfFloatDataToRGBA):
        (rx::Image::loadLuminanceAlphaDataToNativeOrBGRA):
        (rx::Image::loadLuminanceAlphaFloatDataToRGBA):
        (rx::Image::loadLuminanceAlphaHalfFloatDataToRGBA):
        (rx::Image::loadRGBUByteDataToBGRX):
        (rx::Image::loadRGBUByteDataToRGBA):
        (rx::Image::loadRGB565DataToBGRA):
        (rx::Image::loadRGB565DataToRGBA):
        (rx::Image::loadRGBFloatDataToRGBA):
        (rx::Image::loadRGBFloatDataToNative):
        (rx::Image::loadRGBHalfFloatDataToRGBA):
        (rx::Image::loadRGBAUByteDataToBGRA):
        (rx::Image::loadRGBAUByteDataToNative):
        (rx::Image::loadRGBA4444DataToBGRA):
        (rx::Image::loadRGBA4444DataToRGBA):
        (rx::Image::loadRGBA5551DataToBGRA):
        (rx::Image::loadRGBA5551DataToRGBA):
        (rx::Image::loadRGBAFloatDataToRGBA):
        (rx::Image::loadRGBAHalfFloatDataToRGBA):
        (rx::Image::loadBGRADataToBGRA):
        * src/libGLESv2/renderer/Image.h: Added.
        (rx::Image::~Image):
        (rx::Image::getWidth):
        (rx::Image::getHeight):
        (rx::Image::getInternalFormat):
        (rx::Image::getActualFormat):
        (rx::Image::markDirty):
        (rx::Image::markClean):
        (rx::Image::setManagedSurface):
        * src/libGLESv2/renderer/Image11.cpp: Added.
        (rx::Image11::Image11):
        (rx::Image11::~Image11):
        (rx::Image11::makeImage11):
        (rx::Image11::generateMipmap):
        (rx::Image11::isDirty):
        (rx::Image11::updateSurface):
        (rx::Image11::redefine):
        (rx::Image11::isRenderableFormat):
        (rx::Image11::getDXGIFormat):
        (rx::Image11::loadData):
        (rx::Image11::loadCompressedData):
        (rx::Image11::copy):
        (rx::Image11::getStagingTexture):
        (rx::Image11::getStagingSubresource):
        (rx::Image11::createStagingTexture):
        (rx::Image11::map):
        (rx::Image11::unmap):
        * src/libGLESv2/renderer/Image11.h: Added.
        * src/libGLESv2/renderer/Image9.cpp: Added.
        (rx::Image9::Image9):
        (rx::Image9::~Image9):
        (rx::Image9::generateMip):
        (rx::Image9::makeImage9):
        (rx::Image9::generateMipmap):
        (rx::Image9::copyLockableSurfaces):
        (rx::Image9::redefine):
        (rx::Image9::createSurface):
        (rx::Image9::lock):
        (rx::Image9::unlock):
        (rx::Image9::isRenderableFormat):
        (rx::Image9::getD3DFormat):
        (rx::Image9::getSurface):
        (rx::Image9::setManagedSurface):
        (rx::Image9::updateSurface):
        (rx::Image9::loadData):
        (rx::Image9::loadCompressedData):
        (rx::Image9::copy):
        * src/libGLESv2/renderer/Image9.h: Added.
        (rx::Image9::isDirty):
        * src/libGLESv2/renderer/ImageSSE2.cpp: Added.
        (rx::Image::loadRGBAUByteDataToBGRASSE2):
        (rx::Image::loadAlphaDataToBGRASSE2):
        * src/libGLESv2/renderer/IndexBuffer.cpp: Added.
        (rx::IndexBuffer::IndexBuffer):
        (rx::IndexBuffer::~IndexBuffer):
        (rx::IndexBuffer::getSerial):
        (rx::IndexBuffer::updateSerial):
        (rx::IndexBufferInterface::IndexBufferInterface):
        (rx::IndexBufferInterface::~IndexBufferInterface):
        (rx::IndexBufferInterface::getIndexType):
        (rx::IndexBufferInterface::getBufferSize):
        (rx::IndexBufferInterface::getSerial):
        (rx::IndexBufferInterface::mapBuffer):
        (rx::IndexBufferInterface::unmapBuffer):
        (rx::IndexBufferInterface::getIndexBuffer):
        (rx::IndexBufferInterface::getWritePosition):
        (rx::IndexBufferInterface::setWritePosition):
        (rx::IndexBufferInterface::discard):
        (rx::IndexBufferInterface::setBufferSize):
        (rx::StreamingIndexBufferInterface::StreamingIndexBufferInterface):
        (rx::StreamingIndexBufferInterface::~StreamingIndexBufferInterface):
        (rx::StreamingIndexBufferInterface::reserveBufferSpace):
        (rx::StaticIndexBufferInterface::StaticIndexBufferInterface):
        (rx::StaticIndexBufferInterface::~StaticIndexBufferInterface):
        (rx::StaticIndexBufferInterface::reserveBufferSpace):
        (rx::StaticIndexBufferInterface::lookupRange):
        (rx::StaticIndexBufferInterface::addRange):
        * src/libGLESv2/renderer/IndexBuffer.h: Added.
        (rx::StaticIndexBufferInterface::IndexRange::operator<):
        * src/libGLESv2/renderer/IndexBuffer11.cpp: Added.
        (rx::IndexBuffer11::IndexBuffer11):
        (rx::IndexBuffer11::~IndexBuffer11):
        (rx::IndexBuffer11::initialize):
        (rx::IndexBuffer11::makeIndexBuffer11):
        (rx::IndexBuffer11::mapBuffer):
        (rx::IndexBuffer11::unmapBuffer):
        (rx::IndexBuffer11::getIndexType):
        (rx::IndexBuffer11::getBufferSize):
        (rx::IndexBuffer11::setSize):
        (rx::IndexBuffer11::discard):
        (rx::IndexBuffer11::getIndexFormat):
        (rx::IndexBuffer11::getBuffer):
        * src/libGLESv2/renderer/IndexBuffer11.h: Added.
        * src/libGLESv2/renderer/IndexBuffer9.cpp: Added.
        (rx::IndexBuffer9::IndexBuffer9):
        (rx::IndexBuffer9::~IndexBuffer9):
        (rx::IndexBuffer9::initialize):
        (rx::IndexBuffer9::makeIndexBuffer9):
        (rx::IndexBuffer9::mapBuffer):
        (rx::IndexBuffer9::unmapBuffer):
        (rx::IndexBuffer9::getIndexType):
        (rx::IndexBuffer9::getBufferSize):
        (rx::IndexBuffer9::setSize):
        (rx::IndexBuffer9::discard):
        (rx::IndexBuffer9::getIndexFormat):
        (rx::IndexBuffer9::getBuffer):
        * src/libGLESv2/renderer/IndexBuffer9.h: Added.
        * src/libGLESv2/renderer/IndexDataManager.cpp: Added.
        (rx::IndexDataManager::IndexDataManager):
        (rx::IndexDataManager::~IndexDataManager):
        (rx::indexTypeSize):
        (rx::convertIndices):
        (rx::computeRange):
        (rx::IndexDataManager::prepareIndexData):
        (rx::IndexDataManager::getCountingIndices):
        * src/libGLESv2/renderer/IndexDataManager.h: Added.
        * src/libGLESv2/renderer/InputLayoutCache.cpp: Added.
        (rx::InputLayoutCache::InputLayoutCache):
        (rx::InputLayoutCache::~InputLayoutCache):
        (rx::InputLayoutCache::initialize):
        (rx::InputLayoutCache::clear):
        (rx::InputLayoutCache::applyVertexBuffers):
        (rx::InputLayoutCache::hashInputLayout):
        (rx::InputLayoutCache::compareInputLayouts):
        * src/libGLESv2/renderer/InputLayoutCache.h: Added.
        * src/libGLESv2/renderer/Query11.cpp: Added.
        (rx::Query11::Query11):
        (rx::Query11::~Query11):
        (rx::Query11::begin):
        (rx::Query11::end):
        (rx::Query11::getResult):
        (rx::Query11::isResultAvailable):
        (rx::Query11::testQuery):
        * src/libGLESv2/renderer/Query11.h: Added.
        * src/libGLESv2/renderer/Query9.cpp: Added.
        (rx::Query9::Query9):
        (rx::Query9::~Query9):
        (rx::Query9::begin):
        (rx::Query9::end):
        (rx::Query9::getResult):
        (rx::Query9::isResultAvailable):
        (rx::Query9::testQuery):
        * src/libGLESv2/renderer/Query9.h: Added.
        * src/libGLESv2/renderer/QueryImpl.h: Added.
        (rx::QueryImpl::QueryImpl):
        (rx::QueryImpl::~QueryImpl):
        (rx::QueryImpl::getType):
        * src/libGLESv2/renderer/RenderStateCache.cpp: Added.
        (rx::RenderStateCache::RenderStateCache):
        (rx::RenderStateCache::~RenderStateCache):
        (rx::RenderStateCache::initialize):
        (rx::RenderStateCache::clear):
        (rx::RenderStateCache::hashBlendState):
        (rx::RenderStateCache::compareBlendStates):
        (rx::RenderStateCache::getBlendState):
        (rx::RenderStateCache::hashRasterizerState):
        (rx::RenderStateCache::compareRasterizerStates):
        (rx::RenderStateCache::getRasterizerState):
        (rx::RenderStateCache::hashDepthStencilState):
        (rx::RenderStateCache::compareDepthStencilStates):
        (rx::RenderStateCache::getDepthStencilState):
        (rx::RenderStateCache::hashSamplerState):
        (rx::RenderStateCache::compareSamplerStates):
        (rx::RenderStateCache::getSamplerState):
        * src/libGLESv2/renderer/RenderStateCache.h: Added.
        * src/libGLESv2/renderer/RenderTarget.h: Added.
        (rx::RenderTarget::RenderTarget):
        (rx::RenderTarget::~RenderTarget):
        (rx::RenderTarget::getWidth):
        (rx::RenderTarget::getHeight):
        (rx::RenderTarget::getInternalFormat):
        (rx::RenderTarget::getActualFormat):
        (rx::RenderTarget::getSamples):
        * src/libGLESv2/renderer/RenderTarget11.cpp: Added.
        (rx::getRTVSubresourceIndex):
        (rx::getDSVSubresourceIndex):
        (rx::RenderTarget11::RenderTarget11):
        (rx::RenderTarget11::~RenderTarget11):
        (rx::RenderTarget11::makeRenderTarget11):
        (rx::RenderTarget11::getTexture):
        (rx::RenderTarget11::getRenderTargetView):
        (rx::RenderTarget11::getDepthStencilView):
        (rx::RenderTarget11::getShaderResourceView):
        (rx::RenderTarget11::getSubresourceIndex):
        * src/libGLESv2/renderer/RenderTarget11.h: Added.
        * src/libGLESv2/renderer/RenderTarget9.cpp: Added.
        (rx::RenderTarget9::RenderTarget9):
        (rx::RenderTarget9::~RenderTarget9):
        (rx::RenderTarget9::makeRenderTarget9):
        (rx::RenderTarget9::getSurface):
        * src/libGLESv2/renderer/RenderTarget9.h: Added.
        * src/libGLESv2/renderer/Renderer.cpp: Added.
        (rx::Renderer::Renderer):
        (rx::Renderer::~Renderer):
        (rx::Renderer::initializeCompiler):
        (rx::Renderer::compileToBinary):
        * src/libGLESv2/renderer/Renderer.h: Added.
        (getComparableOSVersion):
        (rx::Renderer::getVertexTextureSupport):
        * src/libGLESv2/renderer/Renderer11.cpp: Added.
        (rx::Renderer11::Renderer11):
        (rx::Renderer11::~Renderer11):
        (rx::Renderer11::makeRenderer11):
        (rx::Renderer11::initialize):
        (rx::Renderer11::initializeDevice):
        (rx::Renderer11::generateConfigs):
        (rx::Renderer11::deleteConfigs):
        (rx::Renderer11::sync):
        (rx::Renderer11::createSwapChain):
        (rx::Renderer11::setSamplerState):
        (rx::Renderer11::setTexture):
        (rx::Renderer11::setRasterizerState):
        (rx::Renderer11::setBlendState):
        (rx::Renderer11::setDepthStencilState):
        (rx::Renderer11::setScissorRectangle):
        (rx::Renderer11::setViewport):
        (rx::Renderer11::applyPrimitiveType):
        (rx::Renderer11::applyRenderTarget):
        (rx::Renderer11::applyVertexBuffer):
        (rx::Renderer11::applyIndexBuffer):
        (rx::Renderer11::drawArrays):
        (rx::Renderer11::drawElements):
        (rx::Renderer11::drawLineLoop):
        (rx::Renderer11::drawTriangleFan):
        (rx::Renderer11::applyShaders):
        (rx::Renderer11::applyUniforms):
        (rx::Renderer11::clear):
        (rx::Renderer11::maskedClear):
        (rx::Renderer11::markAllStateDirty):
        (rx::Renderer11::releaseDeviceResources):
        (rx::Renderer11::notifyDeviceLost):
        (rx::Renderer11::isDeviceLost):
        (rx::Renderer11::testDeviceLost):
        (rx::Renderer11::testDeviceResettable):
        (rx::Renderer11::release):
        (rx::Renderer11::resetDevice):
        (rx::Renderer11::getAdapterVendor):
        (rx::Renderer11::getRendererDescription):
        (rx::Renderer11::getAdapterIdentifier):
        (rx::Renderer11::getBGRATextureSupport):
        (rx::Renderer11::getDXT1TextureSupport):
        (rx::Renderer11::getDXT3TextureSupport):
        (rx::Renderer11::getDXT5TextureSupport):
        (rx::Renderer11::getDepthTextureSupport):
        (rx::Renderer11::getFloat32TextureSupport):
        (rx::Renderer11::getFloat16TextureSupport):
        (rx::Renderer11::getLuminanceTextureSupport):
        (rx::Renderer11::getLuminanceAlphaTextureSupport):
        (rx::Renderer11::getTextureFilterAnisotropySupport):
        (rx::Renderer11::getTextureMaxAnisotropy):
        (rx::Renderer11::getEventQuerySupport):
        (rx::Renderer11::getViewportBounds):
        (rx::Renderer11::getMaxVertexTextureImageUnits):
        (rx::Renderer11::getMaxCombinedTextureImageUnits):
        (rx::Renderer11::getReservedVertexUniformVectors):
        (rx::Renderer11::getReservedFragmentUniformVectors):
        (rx::Renderer11::getMaxVertexUniformVectors):
        (rx::Renderer11::getMaxFragmentUniformVectors):
        (rx::Renderer11::getMaxVaryingVectors):
        (rx::Renderer11::getNonPower2TextureSupport):
        (rx::Renderer11::getOcclusionQuerySupport):
        (rx::Renderer11::getInstancingSupport):
        (rx::Renderer11::getShareHandleSupport):
        (rx::Renderer11::getDerivativeInstructionSupport):
        (rx::Renderer11::getPostSubBufferSupport):
        (rx::Renderer11::getMajorShaderModel):
        (rx::Renderer11::getMinorShaderModel):
        (rx::Renderer11::getMaxPointSize):
        (rx::Renderer11::getMaxViewportDimension):
        (rx::Renderer11::getMaxTextureWidth):
        (rx::Renderer11::getMaxTextureHeight):
        (rx::Renderer11::get32BitIndexSupport):
        (rx::Renderer11::getMinSwapInterval):
        (rx::Renderer11::getMaxSwapInterval):
        (rx::Renderer11::getMaxSupportedSamples):
        (rx::Renderer11::getNearestSupportedSamples):
        (rx::Renderer11::getMaxRenderTargets):
        (rx::Renderer11::copyToRenderTarget):
        (rx::Renderer11::copyImage):
        (rx::Renderer11::copyTexture):
        (rx::Renderer11::unapplyRenderTargets):
        (rx::Renderer11::setOneTimeRenderTarget):
        (rx::Renderer11::createRenderTarget):
        (rx::Renderer11::loadExecutable):
        (rx::Renderer11::compileToExecutable):
        (rx::Renderer11::createVertexBuffer):
        (rx::Renderer11::createIndexBuffer):
        (rx::Renderer11::createBufferStorage):
        (rx::Renderer11::createQuery):
        (rx::Renderer11::createFence):
        (rx::Renderer11::getRenderTargetResource):
        (rx::Renderer11::blitRect):
        (rx::Renderer11::readPixels):
        (rx::Renderer11::createImage):
        (rx::Renderer11::generateMipmap):
        (rx::Renderer11::createTextureStorage2D):
        (rx::Renderer11::createTextureStorageCube):
        (rx::getFastPixelCopySize):
        (rx::readPixelColor):
        (rx::writePixelColor):
        (rx::Renderer11::readTextureData):
        (rx::Renderer11::blitRenderbufferRect):
        (rx::Renderer11::resolveMultisampledTexture):
        (rx::Renderer11::getLUID):
        * src/libGLESv2/renderer/Renderer11.h: Added.
        (rx::Renderer11::getDevice):
        (rx::Renderer11::getDeviceContext):
        (rx::Renderer11::getDxgiFactory):
        * src/libGLESv2/renderer/Renderer9.cpp: Added.
        (rx::Renderer9::Renderer9):
        (rx::Renderer9::~Renderer9):
        (rx::Renderer9::makeRenderer9):
        (rx::Renderer9::initialize):
        (rx::Renderer9::initializeDevice):
        (rx::Renderer9::getDefaultPresentParameters):
        (rx::Renderer9::generateConfigs):
        (rx::Renderer9::deleteConfigs):
        (rx::Renderer9::startScene):
        (rx::Renderer9::endScene):
        (rx::Renderer9::sync):
        (rx::Renderer9::createSwapChain):
        (rx::Renderer9::allocateEventQuery):
        (rx::Renderer9::freeEventQuery):
        (rx::Renderer9::createVertexShader):
        (rx::Renderer9::createPixelShader):
        (rx::Renderer9::createVertexBuffer):
        (rx::Renderer9::createIndexBuffer):
        (rx::Renderer9::createBufferStorage):
        (rx::Renderer9::createQuery):
        (rx::Renderer9::createFence):
        (rx::Renderer9::setSamplerState):
        (rx::Renderer9::setTexture):
        (rx::Renderer9::setRasterizerState):
        (rx::Renderer9::setBlendState):
        (rx::Renderer9::setDepthStencilState):
        (rx::Renderer9::setScissorRectangle):
        (rx::Renderer9::setViewport):
        (rx::Renderer9::applyPrimitiveType):
        (rx::Renderer9::getNullColorbuffer):
        (rx::Renderer9::applyRenderTarget):
        (rx::Renderer9::applyVertexBuffer):
        (rx::Renderer9::applyIndexBuffer):
        (rx::Renderer9::drawArrays):
        (rx::Renderer9::drawElements):
        (rx::Renderer9::drawLineLoop):
        (rx::drawPoints):
        (rx::Renderer9::drawIndexedPoints):
        (rx::Renderer9::applyShaders):
        (rx::Renderer9::applyUniforms):
        (rx::Renderer9::applyUniformnfv):
        (rx::Renderer9::applyUniformniv):
        (rx::Renderer9::applyUniformnbv):
        (rx::Renderer9::clear):
        (rx::Renderer9::markAllStateDirty):
        (rx::Renderer9::releaseDeviceResources):
        (rx::Renderer9::notifyDeviceLost):
        (rx::Renderer9::isDeviceLost):
        (rx::Renderer9::testDeviceLost):
        (rx::Renderer9::testDeviceResettable):
        (rx::Renderer9::resetDevice):
        (rx::Renderer9::getAdapterVendor):
        (rx::Renderer9::getRendererDescription):
        (rx::Renderer9::getAdapterIdentifier):
        (rx::Renderer9::getMultiSampleSupport):
        (rx::Renderer9::getBGRATextureSupport):
        (rx::Renderer9::getDXT1TextureSupport):
        (rx::Renderer9::getDXT3TextureSupport):
        (rx::Renderer9::getDXT5TextureSupport):
        (rx::Renderer9::getDepthTextureSupport):
        (rx::Renderer9::getFloat32TextureSupport):
        (rx::Renderer9::getFloat16TextureSupport):
        (rx::Renderer9::getLuminanceTextureSupport):
        (rx::Renderer9::getLuminanceAlphaTextureSupport):
        (rx::Renderer9::getTextureFilterAnisotropySupport):
        (rx::Renderer9::getTextureMaxAnisotropy):
        (rx::Renderer9::getEventQuerySupport):
        (rx::Renderer9::getMaxVertexTextureImageUnits):
        (rx::Renderer9::getMaxCombinedTextureImageUnits):
        (rx::Renderer9::getReservedVertexUniformVectors):
        (rx::Renderer9::getReservedFragmentUniformVectors):
        (rx::Renderer9::getMaxVertexUniformVectors):
        (rx::Renderer9::getMaxFragmentUniformVectors):
        (rx::Renderer9::getMaxVaryingVectors):
        (rx::Renderer9::getNonPower2TextureSupport):
        (rx::Renderer9::getOcclusionQuerySupport):
        (rx::Renderer9::getInstancingSupport):
        (rx::Renderer9::getShareHandleSupport):
        (rx::Renderer9::getDerivativeInstructionSupport):
        (rx::Renderer9::getPostSubBufferSupport):
        (rx::Renderer9::getMajorShaderModel):
        (rx::Renderer9::getMaxPointSize):
        (rx::Renderer9::getMaxViewportDimension):
        (rx::Renderer9::getMaxTextureWidth):
        (rx::Renderer9::getMaxTextureHeight):
        (rx::Renderer9::get32BitIndexSupport):
        (rx::Renderer9::getCapsDeclTypes):
        (rx::Renderer9::getMinSwapInterval):
        (rx::Renderer9::getMaxSwapInterval):
        (rx::Renderer9::getMaxSupportedSamples):
        (rx::Renderer9::getNearestSupportedSamples):
        (rx::Renderer9::getMaxRenderTargets):
        (rx::Renderer9::ConvertTextureInternalFormat):
        (rx::Renderer9::copyToRenderTarget):
        (rx::Renderer9::getBufferPool):
        (rx::Renderer9::copyImage):
        (rx::Renderer9::blitRect):
        (rx::Renderer9::readPixels):
        (rx::Renderer9::createRenderTarget):
        (rx::Renderer9::loadExecutable):
        (rx::Renderer9::compileToExecutable):
        (rx::Renderer9::boxFilter):
        (rx::Renderer9::getTexturePool):
        (rx::Renderer9::createImage):
        (rx::Renderer9::generateMipmap):
        (rx::Renderer9::createTextureStorage2D):
        (rx::Renderer9::createTextureStorageCube):
        (rx::Renderer9::getLUID):
        * src/libGLESv2/renderer/Renderer9.h: Added.
        (rx::Renderer9::getDevice):
        * src/libGLESv2/renderer/ShaderCache.h: Added.
        (rx::ShaderCache::ShaderCache):
        (rx::ShaderCache::~ShaderCache):
        (rx::ShaderCache::initialize):
        (rx::ShaderCache::create):
        (rx::ShaderCache::clear):
        (rx::ShaderCache::createShader):
        * src/libGLESv2/renderer/ShaderExecutable.h: Added.
        (rx::ShaderExecutable::ShaderExecutable):
        (rx::ShaderExecutable::~ShaderExecutable):
        (rx::ShaderExecutable::getFunction):
        (rx::ShaderExecutable::getLength):
        * src/libGLESv2/renderer/ShaderExecutable11.cpp: Added.
        (rx::ShaderExecutable11::ShaderExecutable11):
        (rx::ShaderExecutable11::~ShaderExecutable11):
        (rx::ShaderExecutable11::makeShaderExecutable11):
        (rx::ShaderExecutable11::getVertexShader):
        (rx::ShaderExecutable11::getPixelShader):
        (rx::ShaderExecutable11::getGeometryShader):
        (rx::ShaderExecutable11::getConstantBuffer):
        * src/libGLESv2/renderer/ShaderExecutable11.h: Added.
        * src/libGLESv2/renderer/ShaderExecutable9.cpp: Added.
        (rx::ShaderExecutable9::ShaderExecutable9):
        (rx::ShaderExecutable9::~ShaderExecutable9):
        (rx::ShaderExecutable9::makeShaderExecutable9):
        (rx::ShaderExecutable9::getVertexShader):
        (rx::ShaderExecutable9::getPixelShader):
        * src/libGLESv2/renderer/ShaderExecutable9.h: Added.
        * src/libGLESv2/renderer/SwapChain.h: Added.
        (rx::SwapChain::SwapChain):
        (rx::SwapChain::~SwapChain):
        (rx::SwapChain::getShareHandle):
        * src/libGLESv2/renderer/SwapChain11.cpp: Added.
        (rx::SwapChain11::SwapChain11):
        (rx::SwapChain11::~SwapChain11):
        (rx::SwapChain11::release):
        (rx::SwapChain11::releaseOffscreenTexture):
        (rx::SwapChain11::resetOffscreenTexture):
        (rx::SwapChain11::resize):
        (rx::SwapChain11::reset):
        (rx::SwapChain11::initPassThroughResources):
        (rx::SwapChain11::swapRect):
        (rx::SwapChain11::getOffscreenTexture):
        (rx::SwapChain11::getRenderTarget):
        (rx::SwapChain11::getRenderTargetShaderResource):
        (rx::SwapChain11::getDepthStencil):
        (rx::SwapChain11::getDepthStencilTexture):
        (rx::SwapChain11::makeSwapChain11):
        (rx::SwapChain11::recreate):
        * src/libGLESv2/renderer/SwapChain11.h: Added.
        (rx::SwapChain11::getWidth):
        (rx::SwapChain11::getHeight):
        * src/libGLESv2/renderer/SwapChain9.cpp: Added.
        (rx::SwapChain9::SwapChain9):
        (rx::SwapChain9::~SwapChain9):
        (rx::SwapChain9::release):
        (rx::convertInterval):
        (rx::SwapChain9::resize):
        (rx::SwapChain9::reset):
        (rx::SwapChain9::swapRect):
        (rx::SwapChain9::getRenderTarget):
        (rx::SwapChain9::getDepthStencil):
        (rx::SwapChain9::getOffscreenTexture):
        (rx::SwapChain9::makeSwapChain9):
        (rx::SwapChain9::recreate):
        * src/libGLESv2/renderer/SwapChain9.h: Added.
        * src/libGLESv2/renderer/TextureStorage.cpp: Added.
        (rx::TextureStorageInterface::TextureStorageInterface):
        (rx::TextureStorageInterface::~TextureStorageInterface):
        (rx::TextureStorageInterface::isRenderTarget):
        (rx::TextureStorageInterface::isManaged):
        (rx::TextureStorageInterface::getTextureSerial):
        (rx::TextureStorageInterface::issueTextureSerial):
        (rx::TextureStorageInterface::getLodOffset):
        (rx::TextureStorageInterface::levelCount):
        (rx::TextureStorageInterface2D::TextureStorageInterface2D):
        (rx::TextureStorageInterface2D::~TextureStorageInterface2D):
        (rx::TextureStorageInterface2D::getRenderTarget):
        (rx::TextureStorageInterface2D::generateMipmap):
        (rx::TextureStorageInterface2D::getRenderTargetSerial):
        (rx::TextureStorageInterfaceCube::TextureStorageInterfaceCube):
        (rx::TextureStorageInterfaceCube::~TextureStorageInterfaceCube):
        (rx::TextureStorageInterfaceCube::getRenderTarget):
        (rx::TextureStorageInterfaceCube::generateMipmap):
        (rx::TextureStorageInterfaceCube::getRenderTargetSerial):
        * src/libGLESv2/renderer/TextureStorage.h: Added.
        (rx::TextureStorage::TextureStorage):
        (rx::TextureStorage::~TextureStorage):
        (rx::TextureStorageInterface::getStorageInstance):
        * src/libGLESv2/renderer/TextureStorage11.cpp: Added.
        (rx::TextureStorage11::TextureStorage11):
        (rx::TextureStorage11::~TextureStorage11):
        (rx::TextureStorage11::makeTextureStorage11):
        (rx::TextureStorage11::GetTextureBindFlags):
        (rx::TextureStorage11::IsTextureFormatRenderable):
        (rx::TextureStorage11::getBindFlags):
        (rx::TextureStorage11::getBaseTexture):
        (rx::TextureStorage11::getLodOffset):
        (rx::TextureStorage11::isRenderTarget):
        (rx::TextureStorage11::isManaged):
        (rx::TextureStorage11::levelCount):
        (rx::TextureStorage11::getSubresourceIndex):
        (rx::TextureStorage11::updateSubresourceLevel):
        (rx::TextureStorage11::generateMipmapLayer):
        (rx::TextureStorage11_2D::TextureStorage11_2D):
        (rx::TextureStorage11_2D::~TextureStorage11_2D):
        (rx::TextureStorage11_2D::makeTextureStorage11_2D):
        (rx::TextureStorage11_2D::getRenderTarget):
        (rx::TextureStorage11_2D::getSRV):
        (rx::TextureStorage11_2D::generateMipmap):
        (rx::TextureStorage11_Cube::TextureStorage11_Cube):
        (rx::TextureStorage11_Cube::~TextureStorage11_Cube):
        (rx::TextureStorage11_Cube::makeTextureStorage11_Cube):
        (rx::TextureStorage11_Cube::getRenderTarget):
        (rx::TextureStorage11_Cube::getSRV):
        (rx::TextureStorage11_Cube::generateMipmap):
        * src/libGLESv2/renderer/TextureStorage11.h: Added.
        (rx::TextureStorage11::getRenderTarget):
        (rx::TextureStorage11::generateMipmap):
        * src/libGLESv2/renderer/TextureStorage9.cpp: Added.
        (rx::TextureStorage9::TextureStorage9):
        (rx::TextureStorage9::~TextureStorage9):
        (rx::TextureStorage9::makeTextureStorage9):
        (rx::TextureStorage9::GetTextureUsage):
        (rx::TextureStorage9::IsTextureFormatRenderable):
        (rx::TextureStorage9::isRenderTarget):
        (rx::TextureStorage9::isManaged):
        (rx::TextureStorage9::getPool):
        (rx::TextureStorage9::getUsage):
        (rx::TextureStorage9::getLodOffset):
        (rx::TextureStorage9::levelCount):
        (rx::TextureStorage9_2D::TextureStorage9_2D):
        (rx::TextureStorage9_2D::~TextureStorage9_2D):
        (rx::TextureStorage9_2D::makeTextureStorage9_2D):
        (rx::TextureStorage9_2D::getSurfaceLevel):
        (rx::TextureStorage9_2D::getRenderTarget):
        (rx::TextureStorage9_2D::generateMipmap):
        (rx::TextureStorage9_2D::getBaseTexture):
        (rx::TextureStorage9_2D::initializeRenderTarget):
        (rx::TextureStorage9_Cube::TextureStorage9_Cube):
        (rx::TextureStorage9_Cube::~TextureStorage9_Cube):
        (rx::TextureStorage9_Cube::makeTextureStorage9_Cube):
        (rx::TextureStorage9_Cube::getCubeMapSurface):
        (rx::TextureStorage9_Cube::getRenderTarget):
        (rx::TextureStorage9_Cube::generateMipmap):
        (rx::TextureStorage9_Cube::getBaseTexture):
        (rx::TextureStorage9_Cube::initializeRenderTarget):
        * src/libGLESv2/renderer/TextureStorage9.h: Added.
        (rx::TextureStorage9::getRenderTarget):
        (rx::TextureStorage9::generateMipmap):
        * src/libGLESv2/renderer/VertexBuffer.cpp: Added.
        (rx::VertexBuffer::VertexBuffer):
        (rx::VertexBuffer::~VertexBuffer):
        (rx::VertexBuffer::updateSerial):
        (rx::VertexBuffer::getSerial):
        (rx::VertexBufferInterface::VertexBufferInterface):
        (rx::VertexBufferInterface::~VertexBufferInterface):
        (rx::VertexBufferInterface::getSerial):
        (rx::VertexBufferInterface::getBufferSize):
        (rx::VertexBufferInterface::setBufferSize):
        (rx::VertexBufferInterface::getWritePosition):
        (rx::VertexBufferInterface::setWritePosition):
        (rx::VertexBufferInterface::discard):
        (rx::VertexBufferInterface::storeVertexAttributes):
        (rx::VertexBufferInterface::storeRawData):
        (rx::VertexBufferInterface::reserveVertexSpace):
        (rx::VertexBufferInterface::reserveRawDataSpace):
        (rx::VertexBufferInterface::getVertexBuffer):
        (rx::StreamingVertexBufferInterface::StreamingVertexBufferInterface):
        (rx::StreamingVertexBufferInterface::~StreamingVertexBufferInterface):
        (rx::StreamingVertexBufferInterface::reserveSpace):
        (rx::StaticVertexBufferInterface::StaticVertexBufferInterface):
        (rx::StaticVertexBufferInterface::~StaticVertexBufferInterface):
        (rx::StaticVertexBufferInterface::lookupAttribute):
        (rx::StaticVertexBufferInterface::reserveSpace):
        (rx::StaticVertexBufferInterface::storeVertexAttributes):
        * src/libGLESv2/renderer/VertexBuffer.h: Added.
        * src/libGLESv2/renderer/VertexBuffer11.cpp: Added.
        (rx::VertexBuffer11::VertexBuffer11):
        (rx::VertexBuffer11::~VertexBuffer11):
        (rx::VertexBuffer11::initialize):
        (rx::VertexBuffer11::makeVertexBuffer11):
        (rx::VertexBuffer11::storeVertexAttributes):
        (rx::VertexBuffer11::storeRawData):
        (rx::VertexBuffer11::getSpaceRequired):
        (rx::VertexBuffer11::requiresConversion):
        (rx::VertexBuffer11::getBufferSize):
        (rx::VertexBuffer11::setBufferSize):
        (rx::VertexBuffer11::discard):
        (rx::VertexBuffer11::getVertexSize):
        (rx::VertexBuffer11::getDXGIFormat):
        (rx::VertexBuffer11::getBuffer):
        (rx::copyVertexData):
        (rx::copyFixedVertexData):
        (rx::copyToFloatVertexData):
        (rx::VertexBuffer11::getVertexConversion):
        * src/libGLESv2/renderer/VertexBuffer11.h: Added.
        * src/libGLESv2/renderer/VertexBuffer9.cpp: Added.
        (rx::VertexBuffer9::VertexBuffer9):
        (rx::VertexBuffer9::~VertexBuffer9):
        (rx::VertexBuffer9::initialize):
        (rx::VertexBuffer9::makeVertexBuffer9):
        (rx::VertexBuffer9::storeVertexAttributes):
        (rx::VertexBuffer9::storeRawData):
        (rx::VertexBuffer9::getSpaceRequired):
        (rx::VertexBuffer9::requiresConversion):
        (rx::VertexBuffer9::getVertexSize):
        (rx::VertexBuffer9::getDeclType):
        (rx::VertexBuffer9::getBufferSize):
        (rx::VertexBuffer9::setBufferSize):
        (rx::VertexBuffer9::discard):
        (rx::VertexBuffer9::getBuffer):
        (rx::VertexBuffer9::initializeTranslations):
        (rx::VertexBuffer9::typeIndex):
        (rx::VertexBuffer9::formatConverter):
        (rx::VertexBuffer9::spaceRequired):
        * src/libGLESv2/renderer/VertexBuffer9.h: Added.
        * src/libGLESv2/renderer/VertexDataManager.cpp: Added.
        (rx::elementsInBuffer):
        (rx::VertexDataManager::VertexDataManager):
        (rx::VertexDataManager::~VertexDataManager):
        (rx::directStoragePossible):
        (rx::VertexDataManager::prepareVertexData):
        * src/libGLESv2/renderer/VertexDataManager.h: Added.
        * src/libGLESv2/renderer/VertexDeclarationCache.cpp: Added.
        (rx::VertexDeclarationCache::VertexDeclarationCache):
        (rx::VertexDeclarationCache::~VertexDeclarationCache):
        (rx::VertexDeclarationCache::applyDeclaration):
        (rx::VertexDeclarationCache::markStateDirty):
        * src/libGLESv2/renderer/VertexDeclarationCache.h: Added.
        * src/libGLESv2/renderer/generatemip.h: Added.
        (rx::L8::average):
        (rx::A8L8::average):
        (rx::A8R8G8B8::average):
        (rx::A16B16G16R16F::average):
        (rx::R16F::average):
        (rx::R16G16F::average):
        (rx::A32B32G32R32F::average):
        (rx::R32F::average):
        (rx::R32G32F::average):
        (rx::R32G32B32F::average):
        (rx::GenerateMip):
        * src/libGLESv2/renderer/renderer11_utils.cpp: Added.
        (gl_d3d11::ConvertBlendFunc):
        (gl_d3d11::ConvertBlendOp):
        (gl_d3d11::ConvertColorMask):
        (gl_d3d11::ConvertCullMode):
        (gl_d3d11::ConvertComparison):
        (gl_d3d11::ConvertDepthMask):
        (gl_d3d11::ConvertStencilMask):
        (gl_d3d11::ConvertStencilOp):
        (gl_d3d11::ConvertFilter):
        (gl_d3d11::ConvertTextureWrap):
        (gl_d3d11::ConvertMinLOD):
        (gl_d3d11::ConvertMaxLOD):
        (d3d11_gl::ConvertBackBufferFormat):
        (d3d11_gl::ConvertDepthStencilFormat):
        (d3d11_gl::ConvertRenderbufferFormat):
        (d3d11_gl::ConvertTextureInternalFormat):
        (gl_d3d11::ConvertRenderbufferFormat):
        (gl_d3d11::ConvertTextureFormat):
        (d3d11::SetPositionTexCoordVertex):
        (d3d11::SetPositionDepthColorVertex):
        (d3d11::ComputePixelSizeBits):
        (d3d11::ComputeBlockSizeBits):
        (d3d11::IsCompressed):
        (d3d11::GetTextureFormatDimensionAlignment):
        (d3d11::IsDepthStencilFormat):
        (d3d11::GetDepthTextureFormat):
        (d3d11::GetDepthShaderResourceFormat):
        (d3d11::SetDebugName):
        * src/libGLESv2/renderer/renderer11_utils.h: Added.
        (d3d11::isDeviceLostError):
        * src/libGLESv2/renderer/renderer9_utils.cpp: Added.
        (gl_d3d9::ConvertComparison):
        (gl_d3d9::ConvertColor):
        (gl_d3d9::ConvertBlendFunc):
        (gl_d3d9::ConvertBlendOp):
        (gl_d3d9::ConvertStencilOp):
        (gl_d3d9::ConvertTextureWrap):
        (gl_d3d9::ConvertCullMode):
        (gl_d3d9::ConvertCubeFace):
        (gl_d3d9::ConvertColorMask):
        (gl_d3d9::ConvertMagFilter):
        (gl_d3d9::ConvertMinFilter):
        (gl_d3d9::ConvertRenderbufferFormat):
        (gl_d3d9::GetMultisampleTypeFromSamples):
        (d3d9_gl::GetStencilSize):
        (d3d9_gl::GetAlphaSize):
        (d3d9_gl::GetSamplesFromMultisampleType):
        (d3d9_gl::IsFormatChannelEquivalent):
        (d3d9_gl::ConvertBackBufferFormat):
        (d3d9_gl::ConvertDepthStencilFormat):
        (d3d9_gl::ConvertRenderTargetFormat):
        (d3d9_gl::GetEquivalentFormat):
        (d3d9::IsCompressedFormat):
        (d3d9::ComputeRowSize):
        * src/libGLESv2/renderer/renderer9_utils.h: Added.
        (d3d9::isDeviceLostError):
        * src/libGLESv2/renderer/shaders: Added.
        * src/libGLESv2/renderer/shaders/Blit.ps: Added.
        * src/libGLESv2/renderer/shaders/Blit.vs: Added.
        * src/libGLESv2/renderer/shaders/Clear11.hlsl: Added.
        * src/libGLESv2/renderer/shaders/Passthrough11.hlsl: Added.
        * src/libGLESv2/renderer/shaders/compiled: Added.
        * src/libGLESv2/renderer/shaders/compiled/clear11vs.h: Added.
        * src/libGLESv2/renderer/shaders/compiled/clearmultiple11ps.h: Added.
        * src/libGLESv2/renderer/shaders/compiled/clearsingle11ps.h: Added.
        * src/libGLESv2/renderer/shaders/compiled/componentmaskps.h: Added.
        * src/libGLESv2/renderer/shaders/compiled/flipyvs.h: Added.
        * src/libGLESv2/renderer/shaders/compiled/luminanceps.h: Added.
        * src/libGLESv2/renderer/shaders/compiled/passthrough11vs.h: Added.
        * src/libGLESv2/renderer/shaders/compiled/passthroughlum11ps.h: Added.
        * src/libGLESv2/renderer/shaders/compiled/passthroughlumalpha11ps.h: Added.
        * src/libGLESv2/renderer/shaders/compiled/passthroughps.h: Added.
        * src/libGLESv2/renderer/shaders/compiled/passthroughrgb11ps.h: Added.
        * src/libGLESv2/renderer/shaders/compiled/passthroughrgba11ps.h: Added.
        * src/libGLESv2/renderer/shaders/compiled/standardvs.h: Added.
        * src/libGLESv2/renderer/shaders/generate_shaders.bat: Added.
        * src/libGLESv2/renderer/vertexconversion.h: Added.
        (rx::Identity::convert):
        (rx::Cast::convert):
        (rx::Normalize::convert):
        (rx::FixedToFloat::convert):
        (rx::SimpleDefaultValues::zero):
        (rx::SimpleDefaultValues::one):
        (rx::NormalizedDefaultValues::zero):
        (rx::NormalizedDefaultValues::one):
        (rx::VertexDataConverter::convertArray):
        (rx::VertexDataConverter::pointerAddBytes):
        (rx::VertexDataConverter::copyComponent):
        * src/libGLESv2/resource.h: Added.
        * src/libGLESv2/utilities.cpp: Added.
        (gl::UniformComponentCount):
        (gl::UniformComponentType):
        (gl::UniformComponentSize):
        (gl::UniformInternalSize):
        (gl::UniformExternalSize):
        (gl::VariableRowCount):
        (gl::VariableColumnCount):
        (gl::AllocateFirstFreeBits):
        (gl::ComputePitch):
        (gl::ComputeCompressedPitch):
        (gl::ComputeCompressedSize):
        (gl::IsCompressed):
        (gl::IsDepthTexture):
        (gl::IsStencilTexture):
        (gl::MakeValidSize):
        (gl::ComputePixelSize):
        (gl::IsCubemapTextureTarget):
        (gl::IsInternalTextureTarget):
        (gl::ConvertSizedInternalFormat):
        (gl::ExtractFormat):
        (gl::ExtractType):
        (gl::IsColorRenderable):
        (gl::IsDepthRenderable):
        (gl::IsStencilRenderable):
        (gl::IsFloat32Format):
        (gl::IsFloat16Format):
        (gl::GetAlphaSize):
        (gl::GetRedSize):
        (gl::GetGreenSize):
        (gl::GetBlueSize):
        (gl::GetDepthSize):
        (gl::GetStencilSize):
        (gl::IsTriangleMode):
        (getTempPath):
        (writeFile):
        * src/libGLESv2/utilities.h: Added.
        * src/third_party/murmurhash: Added.
        * src/third_party/murmurhash/LICENSE: Added.
        * src/third_party/murmurhash/MurmurHash3.cpp: Added, replaced tabs with spaces.
        (rotl32):
        (rotl64):
        (getblock):
        (fmix):
        (MurmurHash3_x86_32):
        (MurmurHash3_x86_128):
        (MurmurHash3_x64_128):
        * src/third_party/murmurhash/MurmurHash3.h: Added, replaced tabs with spaces.

2013-07-20  Dean Jackson  <dino@apple.com>

        Updated ANGLE is leaking like a sieve
        https://bugs.webkit.org/show_bug.cgi?id=118939

        Rollout 152863, r152821, r152929 and r152755.

        * ANGLE.plist:
        * ANGLE.xcodeproj/project.pbxproj:
        * DerivedSources.make: Removed.
        * GNUmakefile.am:
        * Target.pri:
        * include/GLSLANG/ShaderLang.h:
        * src/compiler/BaseTypes.h:
        (getQualifierString):
        * src/compiler/Common.h:
        (EncodeSourceLoc):
        (DecodeSourceLoc):
        * src/compiler/Compiler.cpp:
        (TCompiler::TCompiler):
        (TCompiler::Init):
        (TCompiler::compile):
        (TCompiler::detectRecursion):
        * src/compiler/ConstantUnion.h:
        (ConstantUnion::ConstantUnion):
        * src/compiler/DetectCallDepth.cpp: Removed.
        * src/compiler/DetectRecursion.cpp: Added.
        (DetectRecursion::FunctionNode::FunctionNode):
        (DetectRecursion::FunctionNode::getName):
        (DetectRecursion::FunctionNode::addCallee):
        (DetectRecursion::FunctionNode::detectRecursion):
        (DetectRecursion::DetectRecursion):
        (DetectRecursion::~DetectRecursion):
        (DetectRecursion::visitAggregate):
        (DetectRecursion::detectRecursion):
        (DetectRecursion::findFunctionByName):
        * src/compiler/DetectRecursion.h: Renamed from Source/ThirdParty/ANGLE/src/compiler/DetectCallDepth.h.
        * src/compiler/Diagnostics.cpp:
        (TDiagnostics::writeInfo):
        * src/compiler/ForLoopUnroll.cpp:
        (ForLoopUnroll::evaluateIntConstant):
        * src/compiler/InfoSink.cpp:
        (TInfoSinkBase::prefix):
        (TInfoSinkBase::location):
        (TInfoSinkBase::message):
        * src/compiler/InfoSink.h:
        * src/compiler/Initialize.cpp:
        (BuiltInFunctionsCommon):
        (BuiltInFunctionsVertex):
        (TBuiltIns::initialize):
        (IdentifyBuiltIns):
        (InitExtensionBehavior):
        * src/compiler/Intermediate.cpp:
        (TIntermediate::addSymbol):
        (TIntermediate::addBinaryMath):
        (TIntermediate::addAssign):
        (TIntermediate::addIndex):
        (TIntermediate::addUnaryMath):
        (TIntermediate::setAggregateOperator):
        (TIntermediate::addConversion):
        (TIntermediate::growAggregate):
        (TIntermediate::makeAggregate):
        (TIntermediate::addSelection):
        (TIntermediate::addComma):
        (TIntermediate::addConstantUnion):
        (TIntermediate::addSwizzle):
        (TIntermediate::addLoop):
        (TIntermediate::addBranch):
        (TIntermUnary::promote):
        (TIntermBinary::promote):
        (CompareStruct):
        (CompareStructure):
        (TIntermConstantUnion::fold):
        (TIntermediate::promoteConstantUnion):
        * src/compiler/OutputGLSL.cpp:
        (TOutputGLSL::writeVariablePrecision):
        * src/compiler/OutputGLSL.h:
        * src/compiler/OutputGLSLBase.cpp:
        (TOutputGLSLBase::writeVariableType):
        (TOutputGLSLBase::writeConstantUnion):
        (TOutputGLSLBase::visitBinary):
        (TOutputGLSLBase::visitAggregate):
        (TOutputGLSLBase::getTypeName):
        (TOutputGLSLBase::hashFunctionName):
        * src/compiler/OutputGLSLBase.h:
        * src/compiler/OutputHLSL.cpp:
        (sh::OutputHLSL::OutputHLSL):
        (sh::OutputHLSL::header):
        (sh::OutputHLSL::visitSymbol):
        (sh::OutputHLSL::visitBinary):
        (sh::OutputHLSL::visitAggregate):
        (sh::OutputHLSL::visitSelection):
        (sh::OutputHLSL::visitLoop):
        (sh::OutputHLSL::handleExcessiveLoop):
        (sh::OutputHLSL::typeString):
        (sh::OutputHLSL::initializer):
        (sh::OutputHLSL::addConstructor):
        (sh::OutputHLSL::writeConstantUnion):
        (sh::OutputHLSL::decorateField):
        * src/compiler/OutputHLSL.h:
        * src/compiler/ParseHelper.cpp:
        (TParseContext::parseVectorFields):
        (TParseContext::parseMatrixFields):
        (TParseContext::error):
        (TParseContext::warning):
        (TParseContext::assignError):
        (TParseContext::unaryOpError):
        (TParseContext::binaryOpError):
        (TParseContext::precisionErrorCheck):
        (TParseContext::lValueErrorCheck):
        (TParseContext::globalErrorCheck):
        (TParseContext::reservedErrorCheck):
        (TParseContext::constructorErrorCheck):
        (TParseContext::voidErrorCheck):
        (TParseContext::boolErrorCheck):
        (TParseContext::samplerErrorCheck):
        (TParseContext::structQualifierErrorCheck):
        (TParseContext::parameterSamplerErrorCheck):
        (TParseContext::containsSampler):
        (TParseContext::arraySizeErrorCheck):
        (TParseContext::arrayQualifierErrorCheck):
        (TParseContext::arrayTypeErrorCheck):
        (TParseContext::arrayErrorCheck):
        (TParseContext::arraySetMaxSize):
        (TParseContext::nonInitConstErrorCheck):
        (TParseContext::nonInitErrorCheck):
        (TParseContext::paramErrorCheck):
        (TParseContext::extensionErrorCheck):
        (TParseContext::handleExtensionDirective):
        (TParseContext::handlePragmaDirective):
        (TParseContext::findFunction):
        (TParseContext::executeInitializer):
        (TParseContext::addConstructor):
        (TParseContext::constructBuiltIn):
        (TParseContext::constructStruct):
        (TParseContext::addConstVectorNode):
        (TParseContext::addConstMatrixNode):
        (TParseContext::addConstArrayNode):
        (TParseContext::addConstStruct):
        (TParseContext::enterStructDeclaration):
        (TParseContext::structNestingErrorCheck):
        * src/compiler/ParseHelper.h:
        (TParseContext::TParseContext):
        (TParseContext::pragma):
        * src/compiler/PoolAlloc.cpp:
        (TPoolAllocator::allocate):
        * src/compiler/ShHandle.h:
        * src/compiler/ShaderLang.cpp:
        (ShInitBuiltInResources):
        * src/compiler/SymbolTable.cpp:
        (TType::TType):
        (TType::buildMangledName):
        (TType::getStructSize):
        (TType::computeDeepestStructNesting):
        (TType::isStructureContainingArrays):
        (TSymbolTableLevel::relateToExtension):
        (TSymbol::TSymbol):
        (TVariable::TVariable):
        (TVariable::clone):
        (TFunction::TFunction):
        (TFunction::clone):
        (TSymbolTableLevel::clone):
        (TSymbolTable::copyTable):
        * src/compiler/SymbolTable.h:
        (TVariable::TVariable):
        (TVariable::updateArrayInformationType):
        (TVariable::getArrayInformationType):
        (TParameter::copyParam):
        (TFunction::relateToExtension):
        (TFunction::getExtension):
        * src/compiler/Types.h:
        (NewPoolTTypeList):
        (TType::TType):
        (TType::copyType):
        (TType::clone):
        (TType::getObjectSize):
        (TType::getMaxArraySize):
        (TType::setMaxArraySize):
        (TType::clearArrayness):
        (TType::setArrayInformationType):
        (TType::getArrayInformationType):
        (TType::getStruct):
        (TType::setStruct):
        (TType::getTypeName):
        (TType::setTypeName):
        (TType::isField):
        (TType::getFieldName):
        (TType::setFieldName):
        (TType::getMangledName):
        (TType::getDeepestStructNesting):
        (TPublicType::setBasic):
        * src/compiler/VariableInfo.cpp:
        (getUserDefinedVariableInfo):
        * src/compiler/builtin_symbol_table.cpp: Removed.
        * src/compiler/builtin_symbol_table.h: Removed.
        * src/compiler/builtin_symbols.json: Removed.
        * src/compiler/generate_builtin_symbol_table.py: Removed.
        * src/compiler/glslang.l:
        * src/compiler/glslang.y:
        * src/compiler/glslang_lex.cpp:
        (yy_get_previous_state):
        (yy_try_NUL_trans):
        (yy_push_state):
        (yy_pop_state):
        (yy_top_state):
        (string_input):
        (check_type):
        (reserved_word):
        (yyerror):
        (glslang_scan):
        * src/compiler/glslang_tab.cpp:
        * src/compiler/glslang_tab.h:
        * src/compiler/intermOut.cpp:
        (TOutputTraverser::visitUnary):
        (TOutputTraverser::visitAggregate):
        (TOutputTraverser::visitConstantUnion):
        * src/compiler/intermediate.h:
        (TIntermNode::TIntermNode):
        (TIntermNode::getLine):
        (TIntermNode::setLine):
        (TIntermNode::~TIntermNode):
        (TIntermConstantUnion::setUnionArrayPointer):
        (TIntermAggregate::TIntermAggregate):
        (TIntermAggregate::setEndLine):
        (TIntermAggregate::getEndLine):
        (TIntermTraverser::TIntermTraverser):
        (TIntermTraverser::incrementDepth):
        * src/compiler/localintermediate.h:
        * src/compiler/parseConst.cpp:
        (TConstTraverser::visitSymbol):
        (TConstTraverser::visitBinary):
        (TConstTraverser::visitUnary):
        (TConstTraverser::visitAggregate):
        (TConstTraverser::visitSelection):
        (TConstTraverser::visitConstantUnion):
        (TConstTraverser::visitLoop):
        (TConstTraverser::visitBranch):
        (TIntermediate::parseConstTree):
        * src/compiler/timing/RestrictVertexShaderTiming.cpp:
        (RestrictVertexShaderTiming::visitSymbol):
        * src/libEGL/Config.cpp: Removed.
        * src/libEGL/Config.h: Removed.
        * src/libEGL/Display.cpp: Removed.
        * src/libEGL/Display.h: Removed.
        * src/libEGL/README: Added.
        * src/libEGL/ShaderCache.h: Removed.
        * src/libEGL/Surface.cpp: Removed.
        * src/libEGL/Surface.h: Removed.
        * src/libEGL/libEGL.cpp: Removed.
        * src/libEGL/libEGL.def: Removed.
        * src/libEGL/libEGL.rc: Removed.
        * src/libEGL/libEGL.vcxproj: Removed.
        * src/libEGL/libEGL.vcxproj.filters: Removed.
        * src/libEGL/main.cpp: Removed.
        * src/libEGL/main.h: Removed.
        * src/libEGL/resource.h: Removed.
        * src/libGLESv2/BinaryStream.h: Removed.
        * src/libGLESv2/Blit.cpp: Removed.
        * src/libGLESv2/Blit.h: Removed.
        * src/libGLESv2/Buffer.cpp: Removed.
        * src/libGLESv2/Buffer.h: Removed.
        * src/libGLESv2/Context.cpp: Removed.
        * src/libGLESv2/Context.h: Removed.
        * src/libGLESv2/D3DConstantTable.cpp: Removed.
        * src/libGLESv2/D3DConstantTable.h: Removed.
        * src/libGLESv2/Fence.cpp: Removed.
        * src/libGLESv2/Fence.h: Removed.
        * src/libGLESv2/Float16ToFloat32.cpp: Removed.
        * src/libGLESv2/Float16ToFloat32.py: Removed.
        * src/libGLESv2/Framebuffer.cpp: Removed.
        * src/libGLESv2/Framebuffer.h: Removed.
        * src/libGLESv2/HandleAllocator.cpp: Removed.
        * src/libGLESv2/HandleAllocator.h: Removed.
        * src/libGLESv2/IndexDataManager.cpp: Removed.
        * src/libGLESv2/IndexDataManager.h: Removed.
        * src/libGLESv2/Program.cpp: Removed.
        * src/libGLESv2/Program.h: Removed.
        * src/libGLESv2/ProgramBinary.cpp: Removed.
        * src/libGLESv2/ProgramBinary.h: Removed.
        * src/libGLESv2/Query.cpp: Removed.
        * src/libGLESv2/Query.h: Removed.
        * src/libGLESv2/README: Added.
        * src/libGLESv2/Renderbuffer.cpp: Removed.
        * src/libGLESv2/Renderbuffer.h: Removed.
        * src/libGLESv2/ResourceManager.cpp: Removed.
        * src/libGLESv2/ResourceManager.h: Removed.
        * src/libGLESv2/Shader.cpp: Removed.
        * src/libGLESv2/Shader.h: Removed.
        * src/libGLESv2/Texture.cpp: Removed.
        * src/libGLESv2/Texture.h: Removed.
        * src/libGLESv2/TextureSSE2.cpp: Removed.
        * src/libGLESv2/VertexDataManager.cpp: Removed.
        * src/libGLESv2/VertexDataManager.h: Removed.
        * src/libGLESv2/libGLESv2.cpp: Removed.
        * src/libGLESv2/libGLESv2.def: Removed.
        * src/libGLESv2/libGLESv2.rc: Removed.
        * src/libGLESv2/libGLESv2.vcxproj: Removed.
        * src/libGLESv2/libGLESv2.vcxproj.filters: Removed.
        * src/libGLESv2/main.cpp: Removed.
        * src/libGLESv2/main.h: Removed.
        * src/libGLESv2/mathutil.h: Removed.
        * src/libGLESv2/resource.h: Removed.
        * src/libGLESv2/shaders/Blit.ps: Removed.
        * src/libGLESv2/shaders/Blit.vs: Removed.
        * src/libGLESv2/shaders/componentmaskps.h: Removed.
        * src/libGLESv2/shaders/flipyvs.h: Removed.
        * src/libGLESv2/shaders/generate_shaders.bat: Removed.
        * src/libGLESv2/shaders/luminanceps.h: Removed.
        * src/libGLESv2/shaders/passthroughps.h: Removed.
        * src/libGLESv2/shaders/standardvs.h: Removed.
        * src/libGLESv2/utilities.cpp: Removed.
        * src/libGLESv2/utilities.h: Removed.
        * src/libGLESv2/vertexconversion.h: Removed.

2013-07-19  Alex Christensen  <achristensen@apple.com>

        Generate derived files in ANGLE at build time rather than when updating from upstream.
        https://bugs.webkit.org/show_bug.cgi?id=118872

        Reviewed by Mark Rowe.

        * ANGLE.xcodeproj/project.pbxproj: Made Derived Sources target which calls DerivedSources.make,
        moved generated files into Derived Sources group.
        * DerivedSources.make: Added.

2013-07-18  Alex Christensen  <achristensen@apple.com>

        Added previously unincluded files from ANGLE r2426 with these exceptions:
        No gyp files are included.  No WebKit ports use them.
        ANGLE.sln is not included.  I will not use that.
        translator_common and translator_hlsl projects and filters are not included.
        I will need to make a customized translator  project that uses the GLSL translator instead of the HLSL.
        https://bugs.webkit.org/show_bug.cgi?id=118833

        Reviewed by Dean Jackson.

        * src/compiler/builtin_symbols.json: Added.
        * src/compiler/generate_builtin_symbol_table.py: Added.
        (parseBuiltin):
        * src/libEGL: Replaced.
        * src/libEGL/Config.cpp: Added.
        (egl::Config::Config):
        (egl::Config::setDefaults):
        (egl::Config::set):
        (egl::Config::getHandle):
        (egl::SortConfig::SortConfig):
        (egl::SortConfig::scanForWantedComponents):
        (egl::SortConfig::wantedComponentsSize):
        (egl::SortConfig::operator()):
        (egl::ConfigSet::ConfigSet):
        (egl::ConfigSet::add):
        (egl::ConfigSet::size):
        (egl::ConfigSet::getConfigs):
        (egl::ConfigSet::get):
        * src/libEGL/Config.h: Added.
        * src/libEGL/Display.cpp: Added.
        (egl::Display::getDisplay):
        (egl::Display::Display):
        (egl::Display::~Display):
        (egl::Display::initialize):
        (egl::Display::terminate):
        (egl::Display::startScene):
        (egl::Display::endScene):
        (egl::Display::getConfigs):
        (egl::Display::getConfigAttrib):
        (egl::Display::createDevice):
        (egl::Display::initializeDevice):
        (egl::Display::resetDevice):
        (egl::Display::createWindowSurface):
        (egl::Display::createOffscreenSurface):
        (egl::Display::createContext):
        (egl::Display::restoreLostDevice):
        (egl::Display::destroySurface):
        (egl::Display::destroyContext):
        (egl::Display::notifyDeviceLost):
        (egl::Display::isDeviceLost):
        (egl::Display::isInitialized):
        (egl::Display::isValidConfig):
        (egl::Display::isValidContext):
        (egl::Display::isValidSurface):
        (egl::Display::hasExistingWindowSurface):
        (egl::Display::getMinSwapInterval):
        (egl::Display::getMaxSwapInterval):
        (egl::Display::getDevice):
        (egl::Display::getDeviceCaps):
        (egl::Display::getAdapterIdentifier):
        (egl::Display::testDeviceLost):
        (egl::Display::testDeviceResettable):
        (egl::Display::sync):
        (egl::Display::allocateEventQuery):
        (egl::Display::freeEventQuery):
        (egl::Display::getMultiSampleSupport):
        (egl::Display::getDXT1TextureSupport):
        (egl::Display::getDXT3TextureSupport):
        (egl::Display::getDXT5TextureSupport):
        (egl::Display::getDepthTextureSupport):
        (egl::Display::getFloat32TextureSupport):
        (egl::Display::getFloat16TextureSupport):
        (egl::Display::getLuminanceTextureSupport):
        (egl::Display::getLuminanceAlphaTextureSupport):
        (egl::Display::getTextureFilterAnisotropySupport):
        (egl::Display::getBufferPool):
        (egl::Display::getTexturePool):
        (egl::Display::getEventQuerySupport):
        (egl::Display::getDefaultPresentParameters):
        (egl::Display::initExtensionString):
        (egl::Display::getExtensionString):
        (egl::Display::initVendorString):
        (egl::Display::getVendorString):
        (egl::Display::shareHandleSupported):
        (egl::Display::createVertexShader):
        (egl::Display::compileShaderSource):
        (egl::Display::createPixelShader):
        (egl::Display::getVertexTextureSupport):
        (egl::Display::getNonPower2TextureSupport):
        (egl::Display::getOcclusionQuerySupport):
        (egl::Display::getInstancingSupport):
        * src/libEGL/Display.h: Added.
        (getComparableOSVersion):
        (egl::Display::isD3d9ExDevice):
        * src/libEGL/README: Removed.
        * src/libEGL/ShaderCache.h: Added.
        (egl::ShaderCache::ShaderCache):
        (egl::ShaderCache::~ShaderCache):
        (egl::ShaderCache::initialize):
        (egl::ShaderCache::create):
        (egl::ShaderCache::clear):
        (egl::ShaderCache::createShader):
        * src/libEGL/Surface.cpp: Added.
        (egl::Surface::Surface):
        (egl::Surface::~Surface):
        (egl::Surface::initialize):
        (egl::Surface::release):
        (egl::Surface::resetSwapChain):
        (egl::Surface::swapRect):
        (egl::Surface::getWindowHandle):
        (egl::SurfaceWindowProc):
        (egl::Surface::subclassWindow):
        (egl::Surface::unsubclassWindow):
        (egl::Surface::checkForOutOfDateSwapChain):
        (egl::Surface::convertInterval):
        (egl::Surface::swap):
        (egl::Surface::postSubBuffer):
        (egl::Surface::getWidth):
        (egl::Surface::getHeight):
        (egl::Surface::isPostSubBufferSupported):
        (egl::Surface::getRenderTarget):
        (egl::Surface::getDepthStencil):
        (egl::Surface::getOffscreenTexture):
        (egl::Surface::setSwapInterval):
        (egl::Surface::getTextureFormat):
        (egl::Surface::getTextureTarget):
        (egl::Surface::setBoundTexture):
        (egl::Surface::getBoundTexture):
        (egl::Surface::getFormat):
        * src/libEGL/Surface.h: Added.
        (egl::Surface::getShareHandle):
        * src/libEGL/libEGL.cpp: Added.
        (validateDisplay):
        (validateConfig):
        (validateContext):
        (validateSurface):
        * src/libEGL/libEGL.def: Added.
        * src/libEGL/libEGL.rc: Added.
        * src/libEGL/libEGL.vcxproj: Added.
        * src/libEGL/libEGL.vcxproj.filters: Added.
        * src/libEGL/main.cpp: Added.
        (DllMain):
        (egl::setCurrentError):
        (egl::getCurrentError):
        (egl::setCurrentAPI):
        (egl::getCurrentAPI):
        (egl::setCurrentDisplay):
        (egl::getCurrentDisplay):
        (egl::setCurrentDrawSurface):
        (egl::getCurrentDrawSurface):
        (egl::setCurrentReadSurface):
        (egl::getCurrentReadSurface):
        (error):
        * src/libEGL/main.h: Added.
        (error):
        (success):
        * src/libEGL/resource.h: Added.
        * src/libGLESv2: Replaced.
        * src/libGLESv2/BinaryStream.h: Added.
        (gl::BinaryInputStream::BinaryInputStream):
        (gl::BinaryInputStream::read):
        (gl::BinaryInputStream::skip):
        (gl::BinaryInputStream::offset):
        (gl::BinaryInputStream::error):
        (gl::BinaryInputStream::endOfStream):
        (gl::BinaryOutputStream::BinaryOutputStream):
        (gl::BinaryOutputStream::write):
        (gl::BinaryOutputStream::length):
        (gl::BinaryOutputStream::data):
        * src/libGLESv2/Blit.cpp: Added.
        (gl::Blit::Blit):
        (gl::Blit::~Blit):
        (gl::Blit::initGeometry):
        (gl::Blit::setShader):
        (gl::Blit::setVertexShader):
        (gl::Blit::setPixelShader):
        (gl::Blit::getSurfaceRect):
        (gl::Blit::boxFilter):
        (gl::Blit::copy):
        (gl::Blit::formatConvert):
        (gl::Blit::setFormatConvertShaders):
        (gl::Blit::copySurfaceToTexture):
        (gl::Blit::setViewport):
        (gl::Blit::setCommonBlitState):
        (gl::Blit::render):
        (gl::Blit::saveState):
        (gl::Blit::restoreState):
        * src/libGLESv2/Blit.h: Added.
        * src/libGLESv2/Buffer.cpp: Added.
        (gl::Buffer::Buffer):
        (gl::Buffer::~Buffer):
        (gl::Buffer::bufferData):
        (gl::Buffer::bufferSubData):
        (gl::Buffer::getStaticVertexBuffer):
        (gl::Buffer::getStaticIndexBuffer):
        (gl::Buffer::invalidateStaticData):
        (gl::Buffer::promoteStaticUsage):
        * src/libGLESv2/Buffer.h: Added.
        (gl::Buffer::data):
        (gl::Buffer::size):
        (gl::Buffer::usage):
        * src/libGLESv2/Context.cpp: Added.
        (gl::makeStaticString):
        (gl::Context::Context):
        (gl::Context::~Context):
        (gl::Context::makeCurrent):
        (gl::Context::markAllStateDirty):
        (gl::Context::markDxUniformsDirty):
        (gl::Context::markContextLost):
        (gl::Context::isContextLost):
        (gl::Context::setClearColor):
        (gl::Context::setClearDepth):
        (gl::Context::setClearStencil):
        (gl::Context::setCullFace):
        (gl::Context::isCullFaceEnabled):
        (gl::Context::setCullMode):
        (gl::Context::setFrontFace):
        (gl::Context::setDepthTest):
        (gl::Context::isDepthTestEnabled):
        (gl::Context::setDepthFunc):
        (gl::Context::setDepthRange):
        (gl::Context::setBlend):
        (gl::Context::isBlendEnabled):
        (gl::Context::setBlendFactors):
        (gl::Context::setBlendColor):
        (gl::Context::setBlendEquation):
        (gl::Context::setStencilTest):
        (gl::Context::isStencilTestEnabled):
        (gl::Context::setStencilParams):
        (gl::Context::setStencilBackParams):
        (gl::Context::setStencilWritemask):
        (gl::Context::setStencilBackWritemask):
        (gl::Context::setStencilOperations):
        (gl::Context::setStencilBackOperations):
        (gl::Context::setPolygonOffsetFill):
        (gl::Context::isPolygonOffsetFillEnabled):
        (gl::Context::setPolygonOffsetParams):
        (gl::Context::setSampleAlphaToCoverage):
        (gl::Context::isSampleAlphaToCoverageEnabled):
        (gl::Context::setSampleCoverage):
        (gl::Context::isSampleCoverageEnabled):
        (gl::Context::setSampleCoverageParams):
        (gl::Context::setScissorTest):
        (gl::Context::isScissorTestEnabled):
        (gl::Context::setDither):
        (gl::Context::isDitherEnabled):
        (gl::Context::setLineWidth):
        (gl::Context::setGenerateMipmapHint):
        (gl::Context::setFragmentShaderDerivativeHint):
        (gl::Context::setViewportParams):
        (gl::Context::setScissorParams):
        (gl::Context::setColorMask):
        (gl::Context::setDepthMask):
        (gl::Context::setActiveSampler):
        (gl::Context::getReadFramebufferHandle):
        (gl::Context::getDrawFramebufferHandle):
        (gl::Context::getRenderbufferHandle):
        (gl::Context::getArrayBufferHandle):
        (gl::Context::getActiveQuery):
        (gl::Context::setEnableVertexAttribArray):
        (gl::Context::getVertexAttribState):
        (gl::Context::setVertexAttribState):
        (gl::Context::getVertexAttribPointer):
        (gl::Context::getVertexAttributes):
        (gl::Context::setPackAlignment):
        (gl::Context::getPackAlignment):
        (gl::Context::setUnpackAlignment):
        (gl::Context::getUnpackAlignment):
        (gl::Context::setPackReverseRowOrder):
        (gl::Context::getPackReverseRowOrder):
        (gl::Context::createBuffer):
        (gl::Context::createProgram):
        (gl::Context::createShader):
        (gl::Context::createTexture):
        (gl::Context::createRenderbuffer):
        (gl::Context::createFramebuffer):
        (gl::Context::createFence):
        (gl::Context::createQuery):
        (gl::Context::deleteBuffer):
        (gl::Context::deleteShader):
        (gl::Context::deleteProgram):
        (gl::Context::deleteTexture):
        (gl::Context::deleteRenderbuffer):
        (gl::Context::deleteFramebuffer):
        (gl::Context::deleteFence):
        (gl::Context::deleteQuery):
        (gl::Context::getBuffer):
        (gl::Context::getShader):
        (gl::Context::getProgram):
        (gl::Context::getTexture):
        (gl::Context::getRenderbuffer):
        (gl::Context::getReadFramebuffer):
        (gl::Context::getDrawFramebuffer):
        (gl::Context::bindArrayBuffer):
        (gl::Context::bindElementArrayBuffer):
        (gl::Context::bindTexture2D):
        (gl::Context::bindTextureCubeMap):
        (gl::Context::bindReadFramebuffer):
        (gl::Context::bindDrawFramebuffer):
        (gl::Context::bindRenderbuffer):
        (gl::Context::useProgram):
        (gl::Context::linkProgram):
        (gl::Context::setProgramBinary):
        (gl::Context::beginQuery):
        (gl::Context::endQuery):
        (gl::Context::setFramebufferZero):
        (gl::Context::setRenderbufferStorage):
        (gl::Context::getFramebuffer):
        (gl::Context::getFence):
        (gl::Context::getQuery):
        (gl::Context::getArrayBuffer):
        (gl::Context::getElementArrayBuffer):
        (gl::Context::getCurrentProgramBinary):
        (gl::Context::getTexture2D):
        (gl::Context::getTextureCubeMap):
        (gl::Context::getSamplerTexture):
        (gl::Context::getBooleanv):
        (gl::Context::getFloatv):
        (gl::Context::getIntegerv):
        (gl::Context::getQueryParameterInfo):
        (gl::Context::applyRenderTarget):
        (gl::Context::applyState):
        (gl::Context::applyVertexBuffer):
        (gl::Context::applyIndexBuffer):
        (gl::Context::applyShaders):
        (gl::Context::applyTextures):
        (gl::Context::readPixels):
        (gl::Context::clear):
        (gl::Context::drawArrays):
        (gl::Context::drawElements):
        (gl::Context::sync):
        (gl::Context::drawLineLoop):
        (gl::Context::recordInvalidEnum):
        (gl::Context::recordInvalidValue):
        (gl::Context::recordInvalidOperation):
        (gl::Context::recordOutOfMemory):
        (gl::Context::recordInvalidFramebufferOperation):
        (gl::Context::getError):
        (gl::Context::getResetStatus):
        (gl::Context::isResetNotificationEnabled):
        (gl::Context::supportsShaderModel3):
        (gl::Context::getMaximumPointSize):
        (gl::Context::getMaximumVaryingVectors):
        (gl::Context::getMaximumVertexTextureImageUnits):
        (gl::Context::getMaximumCombinedTextureImageUnits):
        (gl::Context::getMaximumFragmentUniformVectors):
        (gl::Context::getMaxSupportedSamples):
        (gl::Context::getNearestSupportedSamples):
        (gl::Context::supportsEventQueries):
        (gl::Context::supportsOcclusionQueries):
        (gl::Context::supportsDXT1Textures):
        (gl::Context::supportsDXT3Textures):
        (gl::Context::supportsDXT5Textures):
        (gl::Context::supportsFloat32Textures):
        (gl::Context::supportsFloat32LinearFilter):
        (gl::Context::supportsFloat32RenderableTextures):
        (gl::Context::supportsFloat16Textures):
        (gl::Context::supportsFloat16LinearFilter):
        (gl::Context::supportsFloat16RenderableTextures):
        (gl::Context::getMaximumRenderbufferDimension):
        (gl::Context::getMaximumTextureDimension):
        (gl::Context::getMaximumCubeTextureDimension):
        (gl::Context::getMaximumTextureLevel):
        (gl::Context::supportsLuminanceTextures):
        (gl::Context::supportsLuminanceAlphaTextures):
        (gl::Context::supportsDepthTextures):
        (gl::Context::supports32bitIndices):
        (gl::Context::supportsNonPower2Texture):
        (gl::Context::supportsInstancing):
        (gl::Context::supportsTextureFilterAnisotropy):
        (gl::Context::supportsDerivativeInstructions):
        (gl::Context::getTextureMaxAnisotropy):
        (gl::Context::getCurrentReadFormatType):
        (gl::Context::detachBuffer):
        (gl::Context::detachTexture):
        (gl::Context::detachFramebuffer):
        (gl::Context::detachRenderbuffer):
        (gl::Context::getIncompleteTexture):
        (gl::Context::skipDraw):
        (gl::Context::isTriangleMode):
        (gl::Context::setVertexAttrib):
        (gl::Context::setVertexAttribDivisor):
        (gl::Context::initExtensionString):
        (gl::Context::getExtensionString):
        (gl::Context::initRendererString):
        (gl::Context::getRendererString):
        (gl::Context::blitFramebuffer):
        (gl::VertexDeclarationCache::VertexDeclarationCache):
        (gl::VertexDeclarationCache::~VertexDeclarationCache):
        (gl::VertexDeclarationCache::applyDeclaration):
        (gl::VertexDeclarationCache::markStateDirty):
        * src/libGLESv2/Context.h: Added.
        (gl::VertexAttribute::VertexAttribute):
        (gl::VertexAttribute::typeSize):
        (gl::VertexAttribute::stride):
        (gl::Context::getBlitter):
        (gl::Context::getDeviceCaps):
        * src/libGLESv2/D3DConstantTable.cpp: Added.
        (gl::D3DConstant::D3DConstant):
        (gl::D3DConstant::~D3DConstant):
        (gl::D3DConstant::addStructMembers):
        (gl::D3DConstantTable::D3DConstantTable):
        (gl::D3DConstantTable::~D3DConstantTable):
        (gl::D3DConstantTable::getConstant):
        (gl::D3DConstantTable::getConstantByName):
        * src/libGLESv2/D3DConstantTable.h: Added.
        (gl::D3DConstantTable::error):
        (gl::D3DConstantTable::constants):
        * src/libGLESv2/Fence.cpp: Added.
        (gl::Fence::Fence):
        (gl::Fence::~Fence):
        (gl::Fence::isFence):
        (gl::Fence::setFence):
        (gl::Fence::testFence):
        (gl::Fence::finishFence):
        (gl::Fence::getFenceiv):
        * src/libGLESv2/Fence.h: Added.
        * src/libGLESv2/Float16ToFloat32.cpp: Added.
        (gl::float16ToFloat32):
        * src/libGLESv2/Float16ToFloat32.py: Added.
        (convertMantissa):
        (convertExponent):
        (convertOffset):
        * src/libGLESv2/Framebuffer.cpp: Added.
        (gl::Framebuffer::Framebuffer):
        (gl::Framebuffer::~Framebuffer):
        (gl::Framebuffer::lookupRenderbuffer):
        (gl::Framebuffer::setColorbuffer):
        (gl::Framebuffer::setDepthbuffer):
        (gl::Framebuffer::setStencilbuffer):
        (gl::Framebuffer::detachTexture):
        (gl::Framebuffer::detachRenderbuffer):
        (gl::Framebuffer::getRenderTargetSerial):
        (gl::Framebuffer::getRenderTarget):
        (gl::Framebuffer::getDepthStencil):
        (gl::Framebuffer::getDepthbufferSerial):
        (gl::Framebuffer::getStencilbufferSerial):
        (gl::Framebuffer::getColorbuffer):
        (gl::Framebuffer::getDepthbuffer):
        (gl::Framebuffer::getStencilbuffer):
        (gl::Framebuffer::getNullColorbuffer):
        (gl::Framebuffer::getColorbufferType):
        (gl::Framebuffer::getDepthbufferType):
        (gl::Framebuffer::getStencilbufferType):
        (gl::Framebuffer::getColorbufferHandle):
        (gl::Framebuffer::getDepthbufferHandle):
        (gl::Framebuffer::getStencilbufferHandle):
        (gl::Framebuffer::hasStencil):
        (gl::Framebuffer::completeness):
        (gl::DefaultFramebuffer::DefaultFramebuffer):
        (gl::Framebuffer::getSamples):
        (gl::DefaultFramebuffer::completeness):
        * src/libGLESv2/Framebuffer.h: Added.
        * src/libGLESv2/HandleAllocator.cpp: Added.
        (gl::HandleAllocator::HandleAllocator):
        (gl::HandleAllocator::~HandleAllocator):
        (gl::HandleAllocator::setBaseHandle):
        (gl::HandleAllocator::allocate):
        (gl::HandleAllocator::release):
        * src/libGLESv2/HandleAllocator.h: Added.
        * src/libGLESv2/IndexDataManager.cpp: Added.
        (gl::IndexDataManager::IndexDataManager):
        (gl::IndexDataManager::~IndexDataManager):
        (gl::convertIndices):
        (gl::computeRange):
        (gl::IndexDataManager::prepareIndexData):
        (gl::IndexDataManager::indexSize):
        (gl::IndexDataManager::typeSize):
        (gl::IndexDataManager::getCountingIndices):
        (gl::IndexBuffer::IndexBuffer):
        (gl::IndexBuffer::~IndexBuffer):
        (gl::IndexBuffer::getBuffer):
        (gl::IndexBuffer::getSerial):
        (gl::IndexBuffer::issueSerial):
        (gl::IndexBuffer::unmap):
        (gl::StreamingIndexBuffer::StreamingIndexBuffer):
        (gl::StreamingIndexBuffer::~StreamingIndexBuffer):
        (gl::StreamingIndexBuffer::map):
        (gl::StreamingIndexBuffer::reserveSpace):
        (gl::StaticIndexBuffer::StaticIndexBuffer):
        (gl::StaticIndexBuffer::~StaticIndexBuffer):
        (gl::StaticIndexBuffer::map):
        (gl::StaticIndexBuffer::reserveSpace):
        (gl::StaticIndexBuffer::lookupType):
        (gl::StaticIndexBuffer::lookupRange):
        (gl::StaticIndexBuffer::addRange):
        * src/libGLESv2/IndexDataManager.h: Added.
        (gl::IndexBuffer::size):
        (gl::StaticIndexBuffer::IndexRange::operator<):
        * src/libGLESv2/Program.cpp: Added.
        (gl::AttributeBindings::AttributeBindings):
        (gl::AttributeBindings::~AttributeBindings):
        (gl::InfoLog::InfoLog):
        (gl::InfoLog::~InfoLog):
        (gl::InfoLog::getLength):
        (gl::InfoLog::getLog):
        (gl::InfoLog::appendSanitized):
        (gl::InfoLog::append):
        (gl::InfoLog::reset):
        (gl::Program::Program):
        (gl::Program::~Program):
        (gl::Program::attachShader):
        (gl::Program::detachShader):
        (gl::Program::getAttachedShadersCount):
        (gl::AttributeBindings::bindAttributeLocation):
        (gl::Program::bindAttributeLocation):
        (gl::Program::link):
        (gl::AttributeBindings::getAttributeBinding):
        (gl::Program::unlink):
        (gl::Program::isLinked):
        (gl::Program::getProgramBinary):
        (gl::Program::setProgramBinary):
        (gl::Program::release):
        (gl::Program::addRef):
        (gl::Program::getRefCount):
        (gl::Program::getProgramBinaryLength):
        (gl::Program::getInfoLogLength):
        (gl::Program::getInfoLog):
        (gl::Program::getAttachedShaders):
        (gl::Program::getActiveAttribute):
        (gl::Program::getActiveAttributeCount):
        (gl::Program::getActiveAttributeMaxLength):
        (gl::Program::getActiveUniform):
        (gl::Program::getActiveUniformCount):
        (gl::Program::getActiveUniformMaxLength):
        (gl::Program::flagForDeletion):
        (gl::Program::isFlaggedForDeletion):
        (gl::Program::validate):
        (gl::Program::isValidated):
        * src/libGLESv2/Program.h: Added.
        * src/libGLESv2/ProgramBinary.cpp: Added.
        (gl::str):
        (gl::Uniform::Uniform):
        (gl::Uniform::~Uniform):
        (gl::Uniform::isArray):
        (gl::UniformLocation::UniformLocation):
        (gl::ProgramBinary::ProgramBinary):
        (gl::ProgramBinary::~ProgramBinary):
        (gl::ProgramBinary::getSerial):
        (gl::ProgramBinary::issueSerial):
        (gl::ProgramBinary::getPixelShader):
        (gl::ProgramBinary::getVertexShader):
        (gl::ProgramBinary::getAttributeLocation):
        (gl::ProgramBinary::getSemanticIndex):
        (gl::ProgramBinary::getUsedSamplerRange):
        (gl::ProgramBinary::usesPointSize):
        (gl::ProgramBinary::getSamplerMapping):
        (gl::ProgramBinary::getSamplerTextureType):
        (gl::ProgramBinary::getUniformLocation):
        (gl::ProgramBinary::setUniform1fv):
        (gl::ProgramBinary::setUniform2fv):
        (gl::ProgramBinary::setUniform3fv):
        (gl::ProgramBinary::setUniform4fv):
        (gl::transposeMatrix):
        (gl::ProgramBinary::setUniformMatrix2fv):
        (gl::ProgramBinary::setUniformMatrix3fv):
        (gl::ProgramBinary::setUniformMatrix4fv):
        (gl::ProgramBinary::setUniform1iv):
        (gl::ProgramBinary::setUniform2iv):
        (gl::ProgramBinary::setUniform3iv):
        (gl::ProgramBinary::setUniform4iv):
        (gl::ProgramBinary::getUniformfv):
        (gl::ProgramBinary::getUniformiv):
        (gl::ProgramBinary::dirtyAllUniforms):
        (gl::ProgramBinary::applyUniforms):
        (gl::ProgramBinary::compileToBinary):
        (gl::ProgramBinary::packVaryings):
        (gl::ProgramBinary::linkVaryings):
        (gl::ProgramBinary::load):
        (gl::ProgramBinary::save):
        (gl::ProgramBinary::getLength):
        (gl::ProgramBinary::link):
        (gl::ProgramBinary::linkAttributes):
        (gl::ProgramBinary::linkUniforms):
        (gl::ProgramBinary::defineUniform):
        (gl::ProgramBinary::createUniform):
        (gl::ProgramBinary::decorateAttribute):
        (gl::ProgramBinary::undecorateUniform):
        (gl::ProgramBinary::applyUniformnbv):
        (gl::ProgramBinary::applyUniformnfv):
        (gl::ProgramBinary::applyUniform1iv):
        (gl::ProgramBinary::applyUniform2iv):
        (gl::ProgramBinary::applyUniform3iv):
        (gl::ProgramBinary::applyUniform4iv):
        (gl::ProgramBinary::applyUniformniv):
        (gl::ProgramBinary::isValidated):
        (gl::ProgramBinary::getActiveAttribute):
        (gl::ProgramBinary::getActiveAttributeCount):
        (gl::ProgramBinary::getActiveAttributeMaxLength):
        (gl::ProgramBinary::getActiveUniform):
        (gl::ProgramBinary::getActiveUniformCount):
        (gl::ProgramBinary::getActiveUniformMaxLength):
        (gl::ProgramBinary::validate):
        (gl::ProgramBinary::validateSamplers):
        (gl::ProgramBinary::getDxDepthRangeLocation):
        (gl::ProgramBinary::getDxDepthLocation):
        (gl::ProgramBinary::getDxCoordLocation):
        (gl::ProgramBinary::getDxHalfPixelSizeLocation):
        (gl::ProgramBinary::getDxFrontCCWLocation):
        (gl::ProgramBinary::getDxPointsOrLinesLocation):
        (gl::ProgramBinary::Sampler::Sampler):
        * src/libGLESv2/ProgramBinary.h: Added.
        (gl::Uniform::RegisterInfo::RegisterInfo):
        (gl::Uniform::RegisterInfo::set):
        (gl::UniformLocation::UniformLocation):
        * src/libGLESv2/Query.cpp: Added.
        (gl::Query::Query):
        (gl::Query::~Query):
        (gl::Query::begin):
        (gl::Query::end):
        (gl::Query::getResult):
        (gl::Query::isResultAvailable):
        (gl::Query::getType):
        (gl::Query::testQuery):
        * src/libGLESv2/Query.h: Added.
        * src/libGLESv2/README: Removed.
        * src/libGLESv2/Renderbuffer.cpp: Added.
        (gl::RenderbufferInterface::RenderbufferInterface):
        (gl::RenderbufferInterface::addProxyRef):
        (gl::RenderbufferInterface::releaseProxy):
        (gl::RenderbufferInterface::getRedSize):
        (gl::RenderbufferInterface::getGreenSize):
        (gl::RenderbufferInterface::getBlueSize):
        (gl::RenderbufferInterface::getAlphaSize):
        (gl::RenderbufferInterface::getDepthSize):
        (gl::RenderbufferInterface::getStencilSize):
        (gl::RenderbufferTexture2D::RenderbufferTexture2D):
        (gl::RenderbufferTexture2D::~RenderbufferTexture2D):
        (gl::RenderbufferTexture2D::addProxyRef):
        (gl::RenderbufferTexture2D::releaseProxy):
        (gl::RenderbufferTexture2D::getRenderTarget):
        (gl::RenderbufferTexture2D::getDepthStencil):
        (gl::RenderbufferTexture2D::getWidth):
        (gl::RenderbufferTexture2D::getHeight):
        (gl::RenderbufferTexture2D::getInternalFormat):
        (gl::RenderbufferTexture2D::getD3DFormat):
        (gl::RenderbufferTexture2D::getSamples):
        (gl::RenderbufferTexture2D::getSerial):
        (gl::RenderbufferTextureCubeMap::RenderbufferTextureCubeMap):
        (gl::RenderbufferTextureCubeMap::~RenderbufferTextureCubeMap):
        (gl::RenderbufferTextureCubeMap::addProxyRef):
        (gl::RenderbufferTextureCubeMap::releaseProxy):
        (gl::RenderbufferTextureCubeMap::getRenderTarget):
        (gl::RenderbufferTextureCubeMap::getDepthStencil):
        (gl::RenderbufferTextureCubeMap::getWidth):
        (gl::RenderbufferTextureCubeMap::getHeight):
        (gl::RenderbufferTextureCubeMap::getInternalFormat):
        (gl::RenderbufferTextureCubeMap::getD3DFormat):
        (gl::RenderbufferTextureCubeMap::getSamples):
        (gl::RenderbufferTextureCubeMap::getSerial):
        (gl::Renderbuffer::Renderbuffer):
        (gl::Renderbuffer::~Renderbuffer):
        (gl::Renderbuffer::addRef):
        (gl::Renderbuffer::release):
        (gl::Renderbuffer::getRenderTarget):
        (gl::Renderbuffer::getDepthStencil):
        (gl::Renderbuffer::getWidth):
        (gl::Renderbuffer::getHeight):
        (gl::Renderbuffer::getInternalFormat):
        (gl::Renderbuffer::getD3DFormat):
        (gl::Renderbuffer::getRedSize):
        (gl::Renderbuffer::getGreenSize):
        (gl::Renderbuffer::getBlueSize):
        (gl::Renderbuffer::getAlphaSize):
        (gl::Renderbuffer::getDepthSize):
        (gl::Renderbuffer::getStencilSize):
        (gl::Renderbuffer::getSamples):
        (gl::Renderbuffer::getSerial):
        (gl::Renderbuffer::setStorage):
        (gl::RenderbufferStorage::RenderbufferStorage):
        (gl::RenderbufferStorage::~RenderbufferStorage):
        (gl::RenderbufferStorage::getRenderTarget):
        (gl::RenderbufferStorage::getDepthStencil):
        (gl::RenderbufferStorage::getWidth):
        (gl::RenderbufferStorage::getHeight):
        (gl::RenderbufferStorage::getInternalFormat):
        (gl::RenderbufferStorage::getD3DFormat):
        (gl::RenderbufferStorage::getSamples):
        (gl::RenderbufferStorage::getSerial):
        (gl::RenderbufferStorage::issueSerial):
        (gl::RenderbufferStorage::issueCubeSerials):
        (gl::Colorbuffer::Colorbuffer):
        (gl::Colorbuffer::~Colorbuffer):
        (gl::Colorbuffer::getRenderTarget):
        (gl::DepthStencilbuffer::DepthStencilbuffer):
        (gl::DepthStencilbuffer::~DepthStencilbuffer):
        (gl::DepthStencilbuffer::getDepthStencil):
        (gl::Depthbuffer::Depthbuffer):
        (gl::Depthbuffer::~Depthbuffer):
        (gl::Stencilbuffer::Stencilbuffer):
        (gl::Stencilbuffer::~Stencilbuffer):
        * src/libGLESv2/Renderbuffer.h: Added.
        (gl::RenderbufferInterface::~RenderbufferInterface):
        * src/libGLESv2/ResourceManager.cpp: Added.
        (gl::ResourceManager::ResourceManager):
        (gl::ResourceManager::~ResourceManager):
        (gl::ResourceManager::addRef):
        (gl::ResourceManager::release):
        (gl::ResourceManager::createBuffer):
        (gl::ResourceManager::createShader):
        (gl::ResourceManager::createProgram):
        (gl::ResourceManager::createTexture):
        (gl::ResourceManager::createRenderbuffer):
        (gl::ResourceManager::deleteBuffer):
        (gl::ResourceManager::deleteShader):
        (gl::ResourceManager::deleteProgram):
        (gl::ResourceManager::deleteTexture):
        (gl::ResourceManager::deleteRenderbuffer):
        (gl::ResourceManager::getBuffer):
        (gl::ResourceManager::getShader):
        (gl::ResourceManager::getTexture):
        (gl::ResourceManager::getProgram):
        (gl::ResourceManager::getRenderbuffer):
        (gl::ResourceManager::setRenderbuffer):
        (gl::ResourceManager::checkBufferAllocation):
        (gl::ResourceManager::checkTextureAllocation):
        (gl::ResourceManager::checkRenderbufferAllocation):
        * src/libGLESv2/ResourceManager.h: Added.
        * src/libGLESv2/Shader.cpp: Added.
        (gl::Shader::Shader):
        (gl::Shader::~Shader):
        (gl::Shader::getHandle):
        (gl::Shader::setSource):
        (gl::Shader::getInfoLogLength):
        (gl::Shader::getInfoLog):
        (gl::Shader::getSourceLength):
        (gl::Shader::getTranslatedSourceLength):
        (gl::Shader::getSourceImpl):
        (gl::Shader::getSource):
        (gl::Shader::getTranslatedSource):
        (gl::Shader::isCompiled):
        (gl::Shader::getHLSL):
        (gl::Shader::addRef):
        (gl::Shader::release):
        (gl::Shader::getRefCount):
        (gl::Shader::isFlaggedForDeletion):
        (gl::Shader::flagForDeletion):
        (gl::Shader::initializeCompiler):
        (gl::Shader::releaseCompiler):
        (gl::Shader::parseVaryings):
        (gl::Shader::uncompile):
        (gl::Shader::compileToHLSL):
        (gl::Shader::parseType):
        (gl::Shader::compareVarying):
        (gl::VertexShader::VertexShader):
        (gl::VertexShader::~VertexShader):
        (gl::VertexShader::getType):
        (gl::VertexShader::uncompile):
        (gl::VertexShader::compile):
        (gl::VertexShader::getSemanticIndex):
        (gl::VertexShader::parseAttributes):
        (gl::FragmentShader::FragmentShader):
        (gl::FragmentShader::~FragmentShader):
        (gl::FragmentShader::getType):
        (gl::FragmentShader::compile):
        * src/libGLESv2/Shader.h: Added.
        (gl::Varying::Varying):
        (gl::Attribute::Attribute):
        * src/libGLESv2/Texture.cpp: Added.
        (gl::ConvertTextureInternalFormat):
        (gl::IsTextureFormatRenderable):
        (gl::GetTextureUsage):
        (gl::MakeValidSize):
        (gl::CopyLockableSurfaces):
        (gl::Image::Image):
        (gl::Image::~Image):
        (gl::Image::redefine):
        (gl::Image::createSurface):
        (gl::Image::lock):
        (gl::Image::unlock):
        (gl::Image::isRenderableFormat):
        (gl::Image::getD3DFormat):
        (gl::Image::getSurface):
        (gl::Image::setManagedSurface):
        (gl::Image::updateSurface):
        (gl::Image::loadData):
        (gl::Image::loadAlphaData):
        (gl::Image::loadAlphaFloatData):
        (gl::Image::loadAlphaHalfFloatData):
        (gl::Image::loadLuminanceData):
        (gl::Image::loadLuminanceFloatData):
        (gl::Image::loadLuminanceHalfFloatData):
        (gl::Image::loadLuminanceAlphaData):
        (gl::Image::loadLuminanceAlphaFloatData):
        (gl::Image::loadLuminanceAlphaHalfFloatData):
        (gl::Image::loadRGBUByteData):
        (gl::Image::loadRGB565Data):
        (gl::Image::loadRGBFloatData):
        (gl::Image::loadRGBHalfFloatData):
        (gl::Image::loadRGBAUByteData):
        (gl::Image::loadRGBA4444Data):
        (gl::Image::loadRGBA5551Data):
        (gl::Image::loadRGBAFloatData):
        (gl::Image::loadRGBAHalfFloatData):
        (gl::Image::loadBGRAData):
        (gl::Image::loadCompressedData):
        (gl::Image::copy):
        (gl::TextureStorage::TextureStorage):
        (gl::TextureStorage::~TextureStorage):
        (gl::TextureStorage::isRenderTarget):
        (gl::TextureStorage::isManaged):
        (gl::TextureStorage::getPool):
        (gl::TextureStorage::getUsage):
        (gl::TextureStorage::getTextureSerial):
        (gl::TextureStorage::issueTextureSerial):
        (gl::TextureStorage::getLodOffset):
        (gl::Texture::Texture):
        (gl::Texture::~Texture):
        (gl::Texture::setMinFilter):
        (gl::Texture::setMagFilter):
        (gl::Texture::setWrapS):
        (gl::Texture::setWrapT):
        (gl::Texture::setMaxAnisotropy):
        (gl::Texture::setUsage):
        (gl::Texture::getMinFilter):
        (gl::Texture::getMagFilter):
        (gl::Texture::getWrapS):
        (gl::Texture::getWrapT):
        (gl::Texture::getMaxAnisotropy):
        (gl::Texture::getUsage):
        (gl::Texture::isMipmapFiltered):
        (gl::Texture::setImage):
        (gl::Texture::setCompressedImage):
        (gl::Texture::subImage):
        (gl::Texture::subImageCompressed):
        (gl::Texture::getTexture):
        (gl::Texture::hasDirtyParameters):
        (gl::Texture::hasDirtyImages):
        (gl::Texture::resetDirty):
        (gl::Texture::getTextureSerial):
        (gl::Texture::getRenderTargetSerial):
        (gl::Texture::isImmutable):
        (gl::Texture::getLodOffset):
        (gl::Texture::creationLevels):
        (gl::Texture::levelCount):
        (gl::Texture::getBlitter):
        (gl::Texture::copyToRenderTarget):
        (gl::TextureStorage2D::TextureStorage2D):
        (gl::TextureStorage2D::~TextureStorage2D):
        (gl::TextureStorage2D::getSurfaceLevel):
        (gl::TextureStorage2D::getBaseTexture):
        (gl::TextureStorage2D::getRenderTargetSerial):
        (gl::Texture2D::Texture2D):
        (gl::Texture2D::~Texture2D):
        (gl::Texture2D::addProxyRef):
        (gl::Texture2D::releaseProxy):
        (gl::Texture2D::getTarget):
        (gl::Texture2D::getWidth):
        (gl::Texture2D::getHeight):
        (gl::Texture2D::getInternalFormat):
        (gl::Texture2D::getD3DFormat):
        (gl::Texture2D::redefineImage):
        (gl::Texture2D::setImage):
        (gl::Texture2D::bindTexImage):
        (gl::Texture2D::releaseTexImage):
        (gl::Texture2D::setCompressedImage):
        (gl::Texture2D::commitRect):
        (gl::Texture2D::subImage):
        (gl::Texture2D::subImageCompressed):
        (gl::Texture2D::copyImage):
        (gl::Texture2D::copySubImage):
        (gl::Texture2D::storage):
        (gl::Texture2D::isSamplerComplete):
        (gl::Texture2D::isMipmapComplete):
        (gl::Texture2D::isCompressed):
        (gl::Texture2D::isDepth):
        (gl::Texture2D::getBaseTexture):
        (gl::Texture2D::createTexture):
        (gl::Texture2D::updateTexture):
        (gl::Texture2D::convertToRenderTarget):
        (gl::Texture2D::generateMipmaps):
        (gl::Texture2D::getRenderbuffer):
        (gl::Texture2D::getRenderTarget):
        (gl::Texture2D::getDepthStencil):
        (gl::Texture2D::getStorage):
        (gl::TextureStorageCubeMap::TextureStorageCubeMap):
        (gl::TextureStorageCubeMap::~TextureStorageCubeMap):
        (gl::TextureStorageCubeMap::getCubeMapSurface):
        (gl::TextureStorageCubeMap::getBaseTexture):
        (gl::TextureStorageCubeMap::getRenderTargetSerial):
        (gl::TextureCubeMap::TextureCubeMap):
        (gl::TextureCubeMap::~TextureCubeMap):
        (gl::TextureCubeMap::addProxyRef):
        (gl::TextureCubeMap::releaseProxy):
        (gl::TextureCubeMap::getTarget):
        (gl::TextureCubeMap::getWidth):
        (gl::TextureCubeMap::getHeight):
        (gl::TextureCubeMap::getInternalFormat):
        (gl::TextureCubeMap::getD3DFormat):
        (gl::TextureCubeMap::setImagePosX):
        (gl::TextureCubeMap::setImageNegX):
        (gl::TextureCubeMap::setImagePosY):
        (gl::TextureCubeMap::setImageNegY):
        (gl::TextureCubeMap::setImagePosZ):
        (gl::TextureCubeMap::setImageNegZ):
        (gl::TextureCubeMap::setCompressedImage):
        (gl::TextureCubeMap::commitRect):
        (gl::TextureCubeMap::subImage):
        (gl::TextureCubeMap::subImageCompressed):
        (gl::TextureCubeMap::isSamplerComplete):
        (gl::TextureCubeMap::isCubeComplete):
        (gl::TextureCubeMap::isMipmapCubeComplete):
        (gl::TextureCubeMap::isCompressed):
        (gl::TextureCubeMap::getBaseTexture):
        (gl::TextureCubeMap::createTexture):
        (gl::TextureCubeMap::updateTexture):
        (gl::TextureCubeMap::convertToRenderTarget):
        (gl::TextureCubeMap::setImage):
        (gl::TextureCubeMap::faceIndex):
        (gl::TextureCubeMap::redefineImage):
        (gl::TextureCubeMap::copyImage):
        (gl::TextureCubeMap::copySubImage):
        (gl::TextureCubeMap::storage):
        (gl::TextureCubeMap::generateMipmaps):
        (gl::TextureCubeMap::getRenderbuffer):
        (gl::TextureCubeMap::getRenderTarget):
        (gl::TextureCubeMap::getStorage):
        * src/libGLESv2/Texture.h: Added.
        (gl::Image::markDirty):
        (gl::Image::markClean):
        (gl::Image::getWidth):
        (gl::Image::getHeight):
        (gl::Image::getInternalFormat):
        (gl::Image::isDirty):
        * src/libGLESv2/TextureSSE2.cpp: Added.
        (gl::Image::loadRGBAUByteDataSSE2):
        (gl::Image::loadAlphaDataSSE2):
        * src/libGLESv2/VertexDataManager.cpp: Added.
        (gl::elementsInBuffer):
        (gl::VertexDataManager::VertexDataManager):
        (gl::VertexDataManager::~VertexDataManager):
        (gl::VertexDataManager::writeAttributeData):
        (gl::VertexDataManager::prepareVertexData):
        (gl::VertexDataManager::spaceRequired):
        (gl::VertexDataManager::checkVertexCaps):
        (gl::VertexDataManager::typeIndex):
        (gl::VertexBuffer::VertexBuffer):
        (gl::VertexBuffer::~VertexBuffer):
        (gl::VertexBuffer::unmap):
        (gl::VertexBuffer::getBuffer):
        (gl::VertexBuffer::getSerial):
        (gl::VertexBuffer::issueSerial):
        (gl::ArrayVertexBuffer::ArrayVertexBuffer):
        (gl::ArrayVertexBuffer::~ArrayVertexBuffer):
        (gl::ArrayVertexBuffer::addRequiredSpace):
        (gl::StreamingVertexBuffer::StreamingVertexBuffer):
        (gl::StreamingVertexBuffer::~StreamingVertexBuffer):
        (gl::StreamingVertexBuffer::map):
        (gl::StreamingVertexBuffer::reserveRequiredSpace):
        (gl::StaticVertexBuffer::StaticVertexBuffer):
        (gl::StaticVertexBuffer::~StaticVertexBuffer):
        (gl::StaticVertexBuffer::map):
        (gl::StaticVertexBuffer::reserveRequiredSpace):
        (gl::StaticVertexBuffer::lookupAttribute):
        (gl::VertexDataManager::formatConverter):
        * src/libGLESv2/VertexDataManager.h: Added.
        (gl::ArrayVertexBuffer::size):
        (gl::VertexDataManager::dirtyCurrentValue):
        * src/libGLESv2/libGLESv2.cpp: Added.
        (validImageSize):
        (checkTextureFormatType):
        (validateSubImageParams2D):
        (validateSubImageParamsCube):
        (validReadFormatType):
        * src/libGLESv2/libGLESv2.def: Added.
        * src/libGLESv2/libGLESv2.rc: Added.
        * src/libGLESv2/libGLESv2.vcxproj: Added.
        * src/libGLESv2/libGLESv2.vcxproj.filters: Added.
        * src/libGLESv2/main.cpp: Added.
        (DllMain):
        (gl::makeCurrent):
        (gl::getContext):
        (gl::getNonLostContext):
        (gl::getDisplay):
        (gl::getDevice):
        (gl::checkDeviceLost):
        (error):
        * src/libGLESv2/main.h: Added.
        (error):
        * src/libGLESv2/mathutil.h: Added.
        (gl::Vector4::Vector4):
        (gl::isPow2):
        (gl::log2):
        (gl::ceilPow2):
        (gl::clamp):
        (gl::clamp01):
        (gl::unorm):
        (gl::supportsSSE2):
        (gl::float32ToFloat16):
        * src/libGLESv2/resource.h: Added.
        * src/libGLESv2/shaders: Added.
        * src/libGLESv2/shaders/Blit.ps: Added.
        * src/libGLESv2/shaders/Blit.vs: Added.
        * src/libGLESv2/shaders/componentmaskps.h: Added.
        * src/libGLESv2/shaders/flipyvs.h: Added.
        * src/libGLESv2/shaders/generate_shaders.bat: Added.
        * src/libGLESv2/shaders/luminanceps.h: Added.
        * src/libGLESv2/shaders/passthroughps.h: Added.
        * src/libGLESv2/shaders/standardvs.h: Added.
        * src/libGLESv2/utilities.cpp: Added.
        (gl::UniformExternalComponentCount):
        (gl::UniformInternalComponentCount):
        (gl::UniformComponentType):
        (gl::UniformComponentSize):
        (gl::UniformInternalSize):
        (gl::UniformExternalSize):
        (gl::VariableRowCount):
        (gl::VariableColumnCount):
        (gl::AllocateFirstFreeBits):
        (gl::ComputePitch):
        (gl::ComputeCompressedPitch):
        (gl::ComputeCompressedSize):
        (gl::IsCompressed):
        (gl::IsDepthTexture):
        (gl::IsStencilTexture):
        (gl::ComputePixelSize):
        (gl::IsCubemapTextureTarget):
        (gl::IsInternalTextureTarget):
        (gl::ConvertSizedInternalFormat):
        (gl::ExtractFormat):
        (gl::ExtractType):
        (gl::IsColorRenderable):
        (gl::IsDepthRenderable):
        (gl::IsStencilRenderable):
        (gl::IsFloat32Format):
        (gl::IsFloat16Format):
        (es2dx::ConvertComparison):
        (es2dx::ConvertColor):
        (es2dx::ConvertBlendFunc):
        (es2dx::ConvertBlendOp):
        (es2dx::ConvertStencilOp):
        (es2dx::ConvertTextureWrap):
        (es2dx::ConvertCullMode):
        (es2dx::ConvertCubeFace):
        (es2dx::ConvertColorMask):
        (es2dx::ConvertMagFilter):
        (es2dx::ConvertMinFilter):
        (es2dx::ConvertPrimitiveType):
        (es2dx::ConvertRenderbufferFormat):
        (es2dx::GetMultisampleTypeFromSamples):
        (dx2es::GetStencilSize):
        (dx2es::GetAlphaSize):
        (dx2es::GetRedSize):
        (dx2es::GetGreenSize):
        (dx2es::GetBlueSize):
        (dx2es::GetDepthSize):
        (dx2es::GetSamplesFromMultisampleType):
        (dx2es::IsFormatChannelEquivalent):
        (dx2es::ConvertReadBufferFormat):
        (dx2es::ConvertBackBufferFormat):
        (dx2es::ConvertDepthStencilFormat):
        (dx::IsCompressedFormat):
        (dx::ComputeRowSize):
        (getTempPath):
        (writeFile):
        * src/libGLESv2/utilities.h: Added.
        (isDeviceLostError):
        * src/libGLESv2/vertexconversion.h: Added.
        (gl::Identity::convert):
        (gl::Cast::convert):
        (gl::Normalize::convert):
        (gl::FixedToFloat::convert):
        (gl::SimpleDefaultValues::zero):
        (gl::SimpleDefaultValues::one):
        (gl::NormalizedDefaultValues::zero):
        (gl::NormalizedDefaultValues::one):
        (gl::VertexDataConverter::convertArray):
        (gl::VertexDataConverter::pointerAddBytes):
        (gl::VertexDataConverter::copyComponent):

2013-07-17  Alex Christensen  <achristensen@apple.com>

        Made a repeatable process for updating ANGLE that does not include manually editing any files.
        https://bugs.webkit.org/show_bug.cgi?id=118815

        Reviewed by Dean Jackson.

        * src/compiler/glslang.y:
        * src/compiler/glslang_lex.cpp:
        * src/compiler/glslang_tab.cpp:
        * src/compiler/glslang_tab.h: Put YYLTYPE definition in %union instead of prologue and ran Bison.

2013-07-16  Alex Christensen  <achristensen@apple.com>

        Update ANGLE from r1987 to r2426 while keeping these changes:
        Keeping #if defined(_MSC_VER) around #pragma warning(disable: 4718) in DependencyGraph.cpp.
        Keeping include khrplatform.h instead of KHR/khrplatform.h in ShaderLang.h.
        Added static_casts in Intermediate.cpp to fix compiling on Mac.
        Changed enum bit fields to just enums for GCC in Types.h to fix compiling for GTK.
        Ran Bison on Mac after removing the unsupported %code tag (See diff uploaded to bug for details).
        Added YYLTYPE definition to glslang_tab.h which would have been put there by the unsupported %code tag.

        https://bugs.webkit.org/show_bug.cgi?id=118550

        Reviewed by Dean Jackson.

        * ANGLE.plist: Updated revision of ANGLE to 2426.
        * ANGLE.xcodeproj/project.pbxproj:
        * GNUmakefile.am:
        * Target.pri:
            Renamed DetectRecursion to DetectCallDepth and added builtin_symbol_table.
        * include/GLSLANG/ShaderLang.h:
        * src/common/version.h:
        * src/compiler/BaseTypes.h:
        (getQualifierString):
        * src/compiler/Common.h:
        * src/compiler/Compiler.cpp:
        (TCompiler::TCompiler):
        (TCompiler::Init):
        (TCompiler::compile):
        (TCompiler::detectCallDepth):
        (TCompiler::enforceTimingRestrictions):
        (TCompiler::limitExpressionComplexity):
        * src/compiler/ConstantUnion.h:
        (ConstantUnion::ConstantUnion):
        * src/compiler/DetectCallDepth.cpp: Added.
        (DetectCallDepth::FunctionNode::FunctionNode):
        (DetectCallDepth::FunctionNode::getName):
        (DetectCallDepth::FunctionNode::addCallee):
        (DetectCallDepth::FunctionNode::detectCallDepth):
        (DetectCallDepth::FunctionNode::reset):
        (DetectCallDepth::DetectCallDepth):
        (DetectCallDepth::~DetectCallDepth):
        (DetectCallDepth::visitAggregate):
        (DetectCallDepth::checkExceedsMaxDepth):
        (DetectCallDepth::resetFunctionNodes):
        (DetectCallDepth::detectCallDepthForFunction):
        (DetectCallDepth::detectCallDepth):
        (DetectCallDepth::findFunctionByName):
        * src/compiler/DetectCallDepth.h: Added.
        (DetectCallDepth::getInfoSink):
        * src/compiler/DetectRecursion.cpp: Removed.
        * src/compiler/DetectRecursion.h: Removed.
        * src/compiler/Diagnostics.cpp:
        (TDiagnostics::writeInfo):
        * src/compiler/ForLoopUnroll.cpp:
        (ForLoopUnroll::evaluateIntConstant):
        * src/compiler/InfoSink.cpp:
        (TInfoSinkBase::prefix):
        (TInfoSinkBase::location):
        (TInfoSinkBase::message):
        * src/compiler/InfoSink.h:
        * src/compiler/Initialize.cpp:
        (TBuiltIns::initialize):
        (IdentifyBuiltIns):
        (InitExtensionBehavior):
        * src/compiler/Intermediate.cpp: Updated and added static_casts to fix build errors on Mac.
        (TIntermediate::addSymbol):
        (TIntermediate::addBinaryMath):
        (TIntermediate::addAssign):
        (TIntermediate::addIndex):
        (TIntermediate::addUnaryMath):
        (TIntermediate::setAggregateOperator):
        (TIntermediate::addConversion):
        (TIntermediate::growAggregate):
        (TIntermediate::makeAggregate):
        (TIntermediate::addSelection):
        (TIntermediate::addComma):
        (TIntermediate::addConstantUnion):
        (TIntermediate::addSwizzle):
        (TIntermediate::addLoop):
        (TIntermediate::addBranch):
        (TIntermUnary::promote):
        (TIntermBinary::promote):
        (CompareStruct):
        (CompareStructure):
        (TIntermConstantUnion::fold):
        (TIntermediate::promoteConstantUnion):
        * src/compiler/OutputGLSL.cpp:
        (TOutputGLSL::visitSymbol):
        * src/compiler/OutputGLSL.h:
        * src/compiler/OutputGLSLBase.cpp:
        (TOutputGLSLBase::writeVariableType):
        (TOutputGLSLBase::writeConstantUnion):
        (TOutputGLSLBase::visitBinary):
        (TOutputGLSLBase::visitAggregate):
        (TOutputGLSLBase::getTypeName):
        (TOutputGLSLBase::hashFunctionName):
        (TOutputGLSLBase::structDeclared):
        (TOutputGLSLBase::declareStruct):
        * src/compiler/OutputGLSLBase.h:
        * src/compiler/OutputHLSL.cpp:
        (sh::OutputHLSL::OutputHLSL):
        (sh::OutputHLSL::header):
        (sh::OutputHLSL::visitSymbol):
        (sh::OutputHLSL::visitBinary):
        (sh::OutputHLSL::visitAggregate):
        (sh::OutputHLSL::visitSelection):
        (sh::OutputHLSL::visitLoop):
        (sh::OutputHLSL::handleExcessiveLoop):
        (sh::OutputHLSL::typeString):
        (sh::OutputHLSL::initializer):
        (sh::OutputHLSL::addConstructor):
        (sh::OutputHLSL::writeConstantUnion):
        (sh::OutputHLSL::decorateField):
        * src/compiler/OutputHLSL.h:
        * src/compiler/ParseHelper.cpp:
        (TParseContext::parseVectorFields):
        (TParseContext::parseMatrixFields):
        (TParseContext::error):
        (TParseContext::warning):
        (TParseContext::assignError):
        (TParseContext::unaryOpError):
        (TParseContext::binaryOpError):
        (TParseContext::precisionErrorCheck):
        (TParseContext::lValueErrorCheck):
        (TParseContext::globalErrorCheck):
        (TParseContext::reservedErrorCheck):
        (TParseContext::constructorErrorCheck):
        (TParseContext::voidErrorCheck):
        (TParseContext::boolErrorCheck):
        (TParseContext::samplerErrorCheck):
        (TParseContext::structQualifierErrorCheck):
        (TParseContext::parameterSamplerErrorCheck):
        (TParseContext::containsSampler):
        (TParseContext::arraySizeErrorCheck):
        (TParseContext::arrayQualifierErrorCheck):
        (TParseContext::arrayTypeErrorCheck):
        (TParseContext::arrayErrorCheck):
        (TParseContext::nonInitConstErrorCheck):
        (TParseContext::nonInitErrorCheck):
        (TParseContext::paramErrorCheck):
        (TParseContext::extensionErrorCheck):
        (TParseContext::findFunction):
        (TParseContext::isVariableBuiltIn):
        (TParseContext::executeInitializer):
        (TParseContext::addConstructor):
        (TParseContext::constructBuiltIn):
        (TParseContext::constructStruct):
        (TParseContext::addConstVectorNode):
        (TParseContext::addConstMatrixNode):
        (TParseContext::addConstArrayNode):
        (TParseContext::addConstStruct):
        (TParseContext::enterStructDeclaration):
        (TParseContext::structNestingErrorCheck):
        * src/compiler/ParseHelper.h:
        (TParseContext::TParseContext):
        (TParseContext::pragma):
        * src/compiler/PoolAlloc.cpp:
        (TPoolAllocator::allocate):
        * src/compiler/ShHandle.h:
        * src/compiler/ShaderLang.cpp:
        (ShInitBuiltInResources):
        * src/compiler/SymbolTable.cpp:
        (TType::TType):
        (TType::buildMangledName):
        (TType::getObjectSize):
        (TStructure::containsArrays):
        (TStructure::buildMangledName):
        (TStructure::calculateObjectSize):
        (TStructure::calculateDeepestNesting):
        (TSymbolTableLevel::relateToExtension):
        * src/compiler/SymbolTable.h:
        (TSymbol::relateToExtension):
        (TSymbol::getExtension):
        (TVariable::TVariable):
        (TVariable::setQualifier):
        (TVariable::shareConstPointer):
        * src/compiler/Types.h: Updated and changed enum bit fields to enums to fix compiling with GCC.
        (TField::TField):
        (TField::type):
        (TField::name):
        (NewPoolTFieldList):
        (TStructure::TStructure):
        (TStructure::name):
        (TStructure::fields):
        (TStructure::mangledName):
        (TStructure::objectSize):
        (TStructure::deepestNesting):
        (TType::TType):
        (TType::clearArrayness):
        (TType::getStruct):
        (TType::setStruct):
        (TType::getMangledName):
        (TType::getDeepestStructNesting):
        (TType::isStructureContainingArrays):
        (TPublicType::setBasic):
        * src/compiler/VariableInfo.cpp:
        (getUserDefinedVariableInfo):
        * src/compiler/builtin_symbol_table.cpp: Added.
        (builtin1):
        (builtin2):
        (builtin3):
        (InsertBuiltInFunctionsCommon):
        (InsertBuiltInFunctionsVertex):
        * src/compiler/builtin_symbol_table.h: Added.
        * src/compiler/glslang.l:
        * src/compiler/glslang.y:
        * src/compiler/glslang_lex.cpp:
        (yy_get_previous_state):
        (yy_try_NUL_trans):
        (yyget_lloc):
        (yyset_lloc):
        (string_input):
        (check_type):
        (reserved_word):
        (glslang_scan):
        * src/compiler/glslang_tab.cpp:
        (yysyntax_error):
        (yyerror):
        (glslang_parse):
        * src/compiler/glslang_tab.h: Readded YYLTYPE definition after Bison removed it.
        * src/compiler/intermOut.cpp:
        (TOutputTraverser::visitUnary):
        (TOutputTraverser::visitAggregate):
        (TOutputTraverser::visitConstantUnion):
        * src/compiler/intermediate.h:
        (TIntermNode::TIntermNode):
        (TIntermNode::~TIntermNode):
        (TIntermNode::getLine):
        (TIntermNode::setLine):
        (TIntermNode::getAsLoopNode):
        (TIntermConstantUnion::getIConst):
        (TIntermConstantUnion::getFConst):
        (TIntermConstantUnion::getBConst):
        (TIntermAggregate::TIntermAggregate):
        (TIntermTraverser::TIntermTraverser):
        (TIntermTraverser::getMaxDepth):
        (TIntermTraverser::incrementDepth):
        * src/compiler/localintermediate.h:
        * src/compiler/parseConst.cpp:
        (TConstTraverser::visitSymbol):
        (TConstTraverser::visitBinary):
        (TConstTraverser::visitUnary):
        (TConstTraverser::visitAggregate):
        (TConstTraverser::visitSelection):
        (TConstTraverser::visitConstantUnion):
        (TConstTraverser::visitLoop):
        (TConstTraverser::visitBranch):
        (TIntermediate::parseConstTree):
        * src/compiler/preprocessor/ExpressionParser.cpp:
        * src/compiler/timing/RestrictVertexShaderTiming.cpp:
        (RestrictVertexShaderTiming::visitSymbol):
            Updated ANGLE to r2426 and ran Bison.

2013-06-17  Darin Adler  <darin@apple.com>

        Sort all the Xcode project files
        https://bugs.webkit.org/show_bug.cgi?id=117696

        Reviewed by Anders Carlsson.

        * ANGLE.xcodeproj/project.pbxproj: Ran the sort-Xcode-project-file script.

2013-04-18  Krzysztof Wolanski  <k.wolanski@samsung.com>

        Add checking whether the compiler allows to use #pragma directive.
        https://bugs.webkit.org/show_bug.cgi?id=114740

        Reviewed by Andreas Kling.

        Some compilers may complain that #pragma warning is an undefined macro.

        * src/compiler/depgraph/DependencyGraph.cpp:

2013-04-11  Andras Becsi  <andras.becsi@digia.com>

        [Qt][Mac] Linking fails with Qt 5.1
        https://bugs.webkit.org/show_bug.cgi?id=114435

        Reviewed by Tor Arne Vestbø.

        Qt 5.1 enables C++11 by default when using clang on Mac
        and links against the libc++ standard library. As a result
        building the QtWebKit shared library fails when linking
        agains the ANGLE intermediate static library because libc++
        misses some symbols needed by ANGLE.
        Disable C++11 for the ANGLE intermediate library to fix the build.

        * ANGLE.pri:

2013-04-10  Benjamin Poulain  <bpoulain@apple.com>

        Mass remove all the empty directories

        Rubberstamped by Ryosuke Niwa.

        * src/libGLESv2/geometry: Removed.

2013-04-08  Ryosuke Niwa  <rniwa@webkit.org>

        Remove ANGLE.gyp
        https://bugs.webkit.org/show_bug.cgi?id=114245

        Unreviewed. Just removing an empty directory.

        * ANGLE.gyp: Removed.

2013-04-04  Martin Robinson  <mrobinson@igalia.com>

        [GTK] Remove the gyp build
        https://bugs.webkit.org/show_bug.cgi?id=113942

        Reviewed by Gustavo Noronha Silva.

        * ANGLE.gyp/ANGLE.gyp: Removed.
        * ANGLE.gypi: Removed.

2013-03-20  Zan Dobersek  <zdobersek@igalia.com>

        [GTK] Build ANGLE sources into a separate library from libWebCore.la
        https://bugs.webkit.org/show_bug.cgi?id=112778

        Reviewed by Martin Robinson.

        * GNUmakefile.am: Added, sets up the libANGLE.la library.

2013-03-05  Kenneth Russell  <kbr@google.com>

        Upgrade ANGLE to r1987
        https://bugs.webkit.org/show_bug.cgi?id=111381

        Reviewed by Dean Jackson.

        * include/GLSLANG/ShaderLang.h:
        * src/common/version.h:
        * src/compiler/Compiler.cpp:
        (TCompiler::TCompiler):
        (TCompiler::Init):
        (TCompiler::compile):
        * src/compiler/ParseHelper.h:
        (TParseContext):
        * src/compiler/ShHandle.h:
        (TCompiler):
        * src/compiler/ShaderLang.cpp:
        (ShInitBuiltInResources):
        * src/compiler/UnfoldShortCircuit.cpp:
        (sh::UnfoldShortCircuit::visitSelection):
        * src/compiler/glslang.l:
        * src/compiler/glslang.y:
        * src/compiler/glslang_lex.cpp:
        (glslang_scan):
        * src/compiler/glslang_tab.cpp:
             Updated ANGLE to r1987.

2013-03-01  Martin Robinson  <mrobinson@igalia.com>

        [GTK] Add ANGLE to the GTK+ gyp build
        https://bugs.webkit.org/show_bug.cgi?id=111128

        Reviewed by Dirk Pranke.

        Add files that build an ANGLE static library for GTK+ using gyp.

        * ANGLE.gyp/ANGLE.gyp: Added.
        * ANGLE.gypi: Added.

2013-02-22  Kenneth Russell  <kbr@google.com>

        Mac OS build broken by new ExpressionParser.cpp
        https://bugs.webkit.org/show_bug.cgi?id=110629

        Unreviewed build fix. Regenerated ExpressionParser with Bison 2.3.

        * src/compiler/preprocessor/ExpressionParser.cpp:

2013-02-21  Zhenyao Mo  <zmo@google.com>

        Roll ANGLE to r1833
        https://bugs.webkit.org/show_bug.cgi?id=110513

        Reviewed by Kenneth Russell.

        Upstream ANGLE r1833 includes webkit side local fixes
        1) r139758 build fix for -Wshorten-64-to-32
        2) r139665 build fix for uninitialized variables

        After this roll, WebKit side ANGLE is the same as upstream ANGLE r1833, except:
        1) include/GLSLANG/ShaderLang.h, where "KHR" is removed from include path.

        With this roll, we have EXT_draw_buffers support.
        
        * ANGLE.xcodeproj/project.pbxproj:
        * Target.pri:
        * include/GLSLANG/ShaderLang.h:
        * src/common/debug.cpp:
        * src/common/system.h: Added.
        * src/common/version.h:
        * src/compiler/ArrayBoundsClamper.cpp: Removed.
        * src/compiler/ArrayBoundsClamper.h: Removed.
        * src/compiler/Compiler.cpp:
        (TCompiler::TCompiler):
        (TCompiler::Init):
        (TCompiler::compile):
        (TCompiler::getArrayBoundsClamper):
        (TCompiler::getArrayIndexClampingStrategy):
        (TCompiler::getBuiltInFunctionEmulator):
        * src/compiler/DetectDiscontinuity.cpp:
        (sh::DetectLoopDiscontinuity::traverse):
        (sh::DetectLoopDiscontinuity::visitLoop):
        (sh):
        (sh::DetectLoopDiscontinuity::visitBranch):
        * src/compiler/DetectDiscontinuity.h:
        (DetectLoopDiscontinuity):
        * src/compiler/Initialize.cpp:
        (InitExtensionBehavior):
        * src/compiler/Intermediate.cpp:
        (TIntermConstantUnion::fold):
        (TIntermTraverser::hash):
        * src/compiler/MapLongVariableNames.cpp:
        (LongNameMap::Size):
        (MapLongVariableNames::mapGlobalLongName):
        * src/compiler/MapLongVariableNames.h:
        (LongNameMap):
        * src/compiler/OutputESSL.cpp:
        (TOutputESSL::TOutputESSL):
        * src/compiler/OutputESSL.h:
        (TOutputESSL):
        * src/compiler/OutputGLSL.cpp:
        (TOutputGLSL::TOutputGLSL):
        * src/compiler/OutputGLSL.h:
        (TOutputGLSL):
        * src/compiler/OutputGLSLBase.cpp:
        (TOutputGLSLBase::TOutputGLSLBase):
        (TOutputGLSLBase::writeConstantUnion):
        (TOutputGLSLBase::visitBinary):
        * src/compiler/OutputGLSLBase.h:
        (TOutputGLSLBase):
        * src/compiler/OutputHLSL.cpp:
        (sh::OutputHLSL::output):
        (sh::OutputHLSL::visitLoop):
        (sh::OutputHLSL::writeConstantUnion):
        * src/compiler/ParseHelper.cpp:
        (TParseContext::constructorErrorCheck):
        (PaParseStrings):
        * src/compiler/ParseHelper.h:
        * src/compiler/ShHandle.h:
        (TCompiler):
        * src/compiler/ShaderLang.cpp:
        (checkActiveUniformAndAttribMaxLengths):
        (checkMappedNameMaxLength):
        (getVariableInfo):
        (ShInitBuiltInResources):
        (ShCompile):
        (ShGetInfo):
        (ShGetActiveAttrib):
        (ShGetActiveUniform):
        (ShGetNameHashingEntry):
        * src/compiler/SymbolTable.h:
        (TFunction::getParamCount):
        (TFunction::getParam):
        (TSymbolTable::setDefaultPrecision):
        * src/compiler/TranslatorESSL.cpp:
        (TranslatorESSL::translate):
        * src/compiler/TranslatorGLSL.cpp:
        (TranslatorGLSL::translate):
        * src/compiler/ValidateLimitations.cpp:
        (ValidateLimitations::validateFunctionCall):
        * src/compiler/VariablePacker.cpp:
        (VariablePacker::GetNumRows):
        * src/compiler/glslang.h:
        * src/compiler/glslang.l:
        * src/compiler/glslang.y:
        * src/compiler/glslang_lex.cpp:
        (string_input):
        (glslang_scan):
        * src/compiler/glslang_tab.cpp:
        * src/compiler/preprocessor/ExpressionParser.cpp:
        * src/compiler/preprocessor/ExpressionParser.y:
        * src/compiler/preprocessor/Input.cpp:
        (pp::Input::Input):
        (pp::Input::read):
        * src/compiler/preprocessor/Input.h:
        (Input):
        (pp::Input::count):
        (pp::Input::string):
        (pp::Input::length):
        (Location):
        * src/compiler/preprocessor/Preprocessor.cpp:
        (pp::Preprocessor::init):
        * src/compiler/preprocessor/Preprocessor.h:
        (Preprocessor):
        * src/compiler/preprocessor/Tokenizer.cpp:
        (pp::Tokenizer::init):
        * src/compiler/preprocessor/Tokenizer.h:
        (Tokenizer):
        * src/compiler/preprocessor/Tokenizer.l:
        * src/third_party: Added.
        * src/third_party/compiler: Added.
        * src/third_party/compiler/ArrayBoundsClamper.cpp: Added.
        (ArrayBoundsClamper::ArrayBoundsClamper):
        (ArrayBoundsClamper::SetClampingStrategy):
        (ArrayBoundsClamper::MarkIndirectArrayBoundsForClamping):
        (ArrayBoundsClamper::OutputClampingFunctionDefinition):
        * src/third_party/compiler/ArrayBoundsClamper.h: Added.
        (ArrayBoundsClamper):
        (ArrayBoundsClamper::Cleanup):
        (ArrayBoundsClamper::GetArrayBoundsClampDefinitionNeeded):
        (ArrayBoundsClamper::SetArrayBoundsClampDefinitionNeeded):
        * src/third_party/compiler/LICENSE: Added.
        * src/third_party/compiler/README.angle: Added.

2013-02-04  David Kilzer  <ddkilzer@apple.com>

        Sort ANGLE Xcode project file.

        * ANGLE.xcodeproj/project.pbxproj:

2013-01-30  David Kilzer  <ddkilzer@apple.com>

        Remove useless comment from Base.xcconfig

        Rubber-stamped by Mark Rowe.

        * Configurations/Base.xcconfig: Remove comment.

2013-01-16  Allan Sandfeld Jensen  <allan.jensen@digia.com>

        Doesn't build with GCC 4.7+
        https://bugs.webkit.org/show_bug.cgi?id=106999

        Reviewed by Csaba Osztrogonác.

        Correct __GNU_C_MINOR__ macro to __GNUC_MINOR__.

        * src/compiler/preprocessor/ExpressionParser.y:

2013-01-15  David Kilzer  <ddkilzer@apple.com>

        BUILD FIX: Add SUPPORTED_PLATFORMS to Base.xcconfig

        * Configurations/Base.xcconfig: Add SUPPORTED_PLATFORMS so that
        Xcode knows we can build this project for all three platforms.
        Previously the Mac OS X SDKs were missing in the scheme picker.

2013-01-15  David Kilzer  <ddkilzer@apple.com>

        Upstream iOS changes for ANGLE project
        <http://webkit.org/b/106913>

        Reviewed by Joseph Pecoraro.

        * ANGLE.xcodeproj/project.pbxproj:
        - Use $(INSTALL_PATH_PREFIX) with CopyFiles build phase paths.
        - Add iOS.xcconfig to project.
        * Configurations/ANGLE.xcconfig:
        - Use INSTALL_PATH_ACTUAL instead of INSTALL_PATH.  (See below.)
        - Use $(INSTALL_PATH_PREFIX) with PUBLIC_HEADERS_FOLDER_PATH.
        * Configurations/Base.xcconfig:
        - Include iOS.xcconfig.
        - Add per-platform values for GCC_ENABLE_OBJC_GC and
          GCC_MODEL_TUNING.
        - Define INSTALL_PATH when building for macosx SDK.
        * Configurations/iOS.xcconfig: Add.  Note that missing include
        files are simply ignored without an error by Xcode.

2013-01-15  David Kilzer  <ddkilzer@apple.com>

        ANGLE should build with -Wshorten-64-to-32
        <http://webkit.org/b/106798>
        <http://code.google.com/p/angleproject/issues/detail?id=396>

        Reviewed by Kenneth Russell.

        Most changes below are simply to document issues with #pragma
        statements per request by upstream.  The change to osinclude.h
        is the only bug fix, which defines OS_TLSIndex in terms of
        pthread_key_t instead of unsigned int since pthread_key_t is a
        64-bit value on 64-bit Mac OS X.

        * Configurations/Base.xcconfig: Enable -Wshorten-64-to-32 by
        setting GCC_WARN_64_TO_32_BIT_CONVERSION to YES.
        * src/compiler/Intermediate.cpp:
        (TIntermTraverser::hash): Add #pragmas for clang to ignore
        -Wshorten-64-to-32 warning.
        * src/compiler/MapLongVariableNames.cpp:
        (LongNameMap::Size): Ditto.
        * src/compiler/ShaderLang.cpp:
        (getVariableInfo): Ditto.
        (ShGetInfo): Ditto.
        * src/compiler/ValidateLimitations.cpp:
        (ValidateLimitations::validateFunctionCall): Ditto.
        * src/compiler/glslang.l: Ditto.
        * src/compiler/glslang_lex.cpp: Ditto.
        * src/compiler/osinclude.h: Change type of OS_TLSIndex to
        pthread_key_t.  Define OS_INVALID_TLS_INDEX by using
        static_cast<OS_TLSIndex>(-1).
        * src/compiler/preprocessor/Input.cpp:
        (pp::Input::Input): Add #pragmas for clang to ignore
        -Wshorten-64-to-32 warning.
        * src/compiler/preprocessor/Tokenizer.cpp: Ditto.
        * src/compiler/preprocessor/Tokenizer.l: Ditto.

2013-01-14  David Kilzer  <ddkilzer@apple.com>

        Remove nonexistent file in ANGLE Xcode project

        * ANGLE.xcodeproj/project.pbxproj: Remove references to
        ossource_nspr.cpp which was removed in r139665.

2013-01-14  Dean Jackson  <dino@apple.com>

        Unreviewed QT build fix.

        * ANGLE.pri:

2013-01-14  Dean Jackson  <dino@apple.com>

        [ANGLE] Update ANGLE in WebKit
        https://bugs.webkit.org/show_bug.cgi?id=106274

        Unreviewed attempted build fix.

        Remove the copy files stage. Make khrplatform.h a public header.

        * ANGLE.xcodeproj/project.pbxproj:
        * include/GLSLANG/ShaderLang.h:

2013-01-14  Max Vujovic  <mvujovic@adobe.com>

        [ANGLE] Update ANGLE in WebKit
        https://bugs.webkit.org/show_bug.cgi?id=106274

        Reviewed by Dean Jackson.

        Update ANGLE to r1641.

        ANGLE parsers were generated with Bison 2.3.

        Additionally, perform the following changes to WebKit's ANGLE build system. Note that these
        changes only apply to WebKit's copy of ANGLE, and do not need to be upstreamed to ANGLE.
        (a) Remove all files in the libEGL and libGLESv2 directories because nobody is using them. 
            Add a README in each directory to explain why their contents are not copied over from
            ANGLE. This simplifies updating ANGLE in the future.
        (b) Remove the build_angle.xcodeproj file that no-one is using. It appears it was copied
            over from a gyp build of ANGLE. The Mac build uses ANGLE.xcodeproj.
        (c) Remove duplicate file entries in ANGLE.xcodeproj. Change its Xcode group structure to
            match ANGLE's directory structure.
        (d) Add a Copy Files task to ANGLE.xcodeproj to put the khrplatform.h header in the right
            place so ShaderLang.h can find it. ShaderLang.h is copied to
            <BuildDir>/usr/local/include/ANGLE/ShaderLang.h during the Copy Headers task, and it
            includes "KHR/khrplatform.h". Thus, we need to copy khrplatform.h to
            <BuildDir>/usr/local/include/ANGLE/KHR/khrplatform.h.

        Additionally, make one build fix in ANGLE source that should be upstreamed to ANGLE:
        (1) Before this patch in ExpressionParser.y, we toggled the "-Wpragmas" flag so compilers
            could ignore the pragmas that they didn't understand instead of generating an error.
            However, clang does not understand "-Wpragmas" itself. Instead, tt understands
            "-Wunknown-pragmas". Now, instead of trying to temporarily ignore pragmas, we apply the
            right flags to the right compiler versions. The new code in ExpressionParser.y looks
            like:

        """
        // Turn off uninitialized variable warnings triggered by the auto-generated pplval variable.
        // On gcc 4.7+, The flag is called "-Wmaybe-uninitialized".
        // On clang and gcc < 4.7, the flag is called "-Wuninitialized".
        #if !defined(__clang__) && ((__GNUC__ == 4 && __GNU_C_MINOR__ >= 7) || __GNUC__ >= 5)
        #pragma GCC diagnostic ignored "-Wmaybe-uninitialized"
        #else
        #pragma GCC diagnostic ignored "-Wuninitialized"
        #endif
        """

        * ANGLE.plist:
        * ANGLE.pri:
        * ANGLE.xcodeproj/project.pbxproj:
        * DerivedSources.pri:
        * Target.pri:
        * include/GLSLANG/ShaderLang.h:
        * src/build_angle.xcodeproj/project.pbxproj: Removed.
        * src/common/angleutils.h:
        * src/common/debug.cpp:
        (gl::ScopedPerfEventHelper::ScopedPerfEventHelper):
        * src/common/debug.h:
        * src/common/version.h:
        * src/compiler/Compiler.cpp:
        (TCompiler::Init):
        (TCompiler::compile):
        (TCompiler::clearResults):
        (TCompiler::collectAttribsUniforms):
        (TCompiler::enforcePackingRestrictions):
        * src/compiler/Diagnostics.cpp:
        (TDiagnostics::TDiagnostics):
        (TDiagnostics::writeInfo):
        (TDiagnostics::print):
        * src/compiler/Diagnostics.h:
        (TDiagnostics::numErrors):
        (TDiagnostics::numWarnings):
        (TDiagnostics):
        * src/compiler/DirectiveHandler.h:
        * src/compiler/HashNames.h: Added.
        * src/compiler/Intermediate.cpp:
        (TIntermTraverser::hash):
        * src/compiler/OutputESSL.cpp:
        (TOutputESSL::TOutputESSL):
        * src/compiler/OutputESSL.h:
        (TOutputESSL):
        * src/compiler/OutputGLSL.cpp:
        (TOutputGLSL::TOutputGLSL):
        * src/compiler/OutputGLSL.h:
        (TOutputGLSL):
        * src/compiler/OutputGLSLBase.cpp:
        (TOutputGLSLBase::TOutputGLSLBase):
        (TOutputGLSLBase::writeVariableType):
        (TOutputGLSLBase::writeFunctionParameters):
        (TOutputGLSLBase::writeConstantUnion):
        (TOutputGLSLBase::visitSymbol):
        (TOutputGLSLBase::visitBinary):
        (TOutputGLSLBase::visitAggregate):
        (TOutputGLSLBase::getTypeName):
        (TOutputGLSLBase::hashName):
        (TOutputGLSLBase::hashVariableName):
        (TOutputGLSLBase::hashFunctionName):
        * src/compiler/OutputGLSLBase.h:
        (TOutputGLSLBase):
        * src/compiler/OutputHLSL.cpp:
        (sh::OutputHLSL::OutputHLSL):
        (sh::OutputHLSL::header):
        (sh::OutputHLSL::visitAggregate):
        (sh::OutputHLSL::visitBranch):
        (sh::OutputHLSL::handleExcessiveLoop):
        * src/compiler/OutputHLSL.h:
        (OutputHLSL):
        * src/compiler/ParseHelper.cpp:
        (TParseContext::error):
        (TParseContext::nonInitConstErrorCheck):
        (PaParseStrings):
        * src/compiler/ParseHelper.h:
        (TParseContext::TParseContext):
        (TParseContext):
        (TParseContext::numErrors):
        * src/compiler/RenameFunction.h:
        (RenameFunction::visitAggregate):
        * src/compiler/ShHandle.h:
        (TCompiler::getHashFunction):
        (TCompiler::getNameMap):
        (TCompiler::getSymbolTable):
        (TCompiler):
        * src/compiler/ShaderLang.cpp:
        (ShInitBuiltInResources):
        (ShGetInfo):
        (ShGetNameHashingEntry):
        * src/compiler/SymbolTable.cpp:
        (TType::TType):
        (TType::isStructureContainingArrays):
        * src/compiler/SymbolTable.h:
        (TSymbolTable::findBuiltIn):
        (TSymbolTable):
        * src/compiler/TranslatorESSL.cpp:
        (TranslatorESSL::translate):
        * src/compiler/TranslatorGLSL.cpp:
        (TranslatorGLSL::translate):
        * src/compiler/Types.h:
        (TType):
        (TPublicType):
        (TPublicType::setBasic):
        (TPublicType::setAggregate):
        (TPublicType::setArray):
        (TPublicType::isStructureContainingArrays):
        * src/compiler/UnfoldShortCircuit.cpp:
        (sh::UnfoldShortCircuit::visitBinary):
        * src/compiler/VariableInfo.cpp:
        (getVariableInfo):
        (getUserDefinedVariableInfo):
        (TVariableInfo::TVariableInfo):
        (CollectAttribsUniforms::CollectAttribsUniforms):
        (CollectAttribsUniforms::visitAggregate):
        * src/compiler/VariableInfo.h:
        (TVariableInfo):
        (CollectAttribsUniforms):
        * src/compiler/VariablePacker.cpp: Added.
        (VariablePacker::GetNumComponentsPerRow):
        (VariablePacker::GetNumRows):
        (TVariableInfoComparer::operator()):
        (VariablePacker::makeColumnFlags):
        (VariablePacker::fillColumns):
        (VariablePacker::searchColumn):
        (VariablePacker::CheckVariablesWithinPackingLimits):
        * src/compiler/VariablePacker.h: Added.
        (VariablePacker):
        * src/compiler/VersionGLSL.cpp:
        (TVersionGLSL::visitAggregate):
        * src/compiler/VersionGLSL.h:
        (TVersionGLSL):
        * src/compiler/glslang.l:
        * src/compiler/glslang.y:
        * src/compiler/glslang_lex.cpp:
        (string_input):
        (glslang_finalize):
        (glslang_scan):
        * src/compiler/glslang_tab.cpp:
        * src/compiler/intermediate.h:
        (TIntermTraverser):
        * src/compiler/osinclude.h:
        (OS_GetTLSValue):
        * src/compiler/ossource_nspr.cpp:
        * src/compiler/preprocessor/DiagnosticsBase.cpp: Added.
        (pp):
        (pp::Diagnostics::~Diagnostics):
        (pp::Diagnostics::report):
        (pp::Diagnostics::severity):
        (pp::Diagnostics::message):
        * src/compiler/preprocessor/DiagnosticsBase.h: Renamed from Source/ThirdParty/ANGLE/src/compiler/preprocessor/new/Diagnostics.h.
        (pp):
        (Diagnostics):
        * src/compiler/preprocessor/DirectiveHandlerBase.cpp: Renamed from Source/ThirdParty/ANGLE/src/compiler/preprocessor/new/DirectiveHandlerBase.cpp.
        (pp):
        (pp::DirectiveHandler::~DirectiveHandler):
        * src/compiler/preprocessor/DirectiveHandlerBase.h: Renamed from Source/ThirdParty/ANGLE/src/compiler/preprocessor/new/DirectiveHandler.h.
        (pp):
        (DirectiveHandler):
        * src/compiler/preprocessor/DirectiveParser.cpp: Renamed from Source/ThirdParty/ANGLE/src/compiler/preprocessor/new/DirectiveParser.cpp.
        (getDirective):
        (isConditionalDirective):
        (isEOD):
        (skipUntilEOD):
        (isMacroNameReserved):
        (isMacroPredefined):
        (pp):
        (DefinedParser):
        (pp::DefinedParser::DefinedParser):
        (pp::DefinedParser::lex):
        (pp::DirectiveParser::DirectiveParser):
        (pp::DirectiveParser::lex):
        (pp::DirectiveParser::parseDirective):
        (pp::DirectiveParser::parseDefine):
        (pp::DirectiveParser::parseUndef):
        (pp::DirectiveParser::parseIf):
        (pp::DirectiveParser::parseIfdef):
        (pp::DirectiveParser::parseIfndef):
        (pp::DirectiveParser::parseElse):
        (pp::DirectiveParser::parseElif):
        (pp::DirectiveParser::parseEndif):
        (pp::DirectiveParser::parseError):
        (pp::DirectiveParser::parsePragma):
        (pp::DirectiveParser::parseExtension):
        (pp::DirectiveParser::parseVersion):
        (pp::DirectiveParser::parseLine):
        (pp::DirectiveParser::skipping):
        (pp::DirectiveParser::parseConditionalIf):
        (pp::DirectiveParser::parseExpressionIf):
        (pp::DirectiveParser::parseExpressionIfdef):
        * src/compiler/preprocessor/DirectiveParser.h: Renamed from Source/ThirdParty/ANGLE/src/compiler/preprocessor/new/DirectiveParser.h.
        (pp):
        (DirectiveParser):
        (ConditionalBlock):
        (pp::DirectiveParser::ConditionalBlock::ConditionalBlock):
        * src/compiler/preprocessor/ExpressionParser.cpp: Renamed from Source/ThirdParty/ANGLE/src/compiler/preprocessor/new/ExpressionParser.cpp.
        (yysyntax_error):
        (yylex):
        (yyerror):
        (pp):
        (pp::ExpressionParser::ExpressionParser):
        (pp::ExpressionParser::parse):
        * src/compiler/preprocessor/ExpressionParser.h: Renamed from Source/ThirdParty/ANGLE/src/compiler/preprocessor/new/ExpressionParser.h.
        (pp):
        (ExpressionParser):
        * src/compiler/preprocessor/ExpressionParser.y: Renamed from Source/ThirdParty/ANGLE/src/compiler/preprocessor/new/ExpressionParser.y.
        * src/compiler/preprocessor/Input.cpp: Renamed from Source/ThirdParty/ANGLE/src/compiler/preprocessor/new/Input.cpp.
        (pp):
        (pp::Input::Input):
        (pp::Input::read):
        * src/compiler/preprocessor/Input.h: Renamed from Source/ThirdParty/ANGLE/src/compiler/preprocessor/new/Input.h.
        (pp):
        (Input):
        (pp::Input::count):
        (pp::Input::string):
        (pp::Input::length):
        (Location):
        (pp::Input::Location::Location):
        (pp::Input::readLoc):
        * src/compiler/preprocessor/Lexer.cpp: Renamed from Source/ThirdParty/ANGLE/src/compiler/preprocessor/new/Lexer.cpp.
        (pp):
        (pp::Lexer::~Lexer):
        * src/compiler/preprocessor/Lexer.h: Renamed from Source/ThirdParty/ANGLE/src/compiler/preprocessor/new/Lexer.h.
        (pp):
        (Lexer):
        * src/compiler/preprocessor/Macro.cpp: Renamed from Source/ThirdParty/ANGLE/src/compiler/preprocessor/new/Macro.cpp.
        (pp):
        (pp::Macro::equals):
        * src/compiler/preprocessor/Macro.h: Renamed from Source/ThirdParty/ANGLE/src/compiler/preprocessor/new/Macro.h.
        (pp):
        (pp::Macro::Macro):
        (Macro):
        * src/compiler/preprocessor/MacroExpander.cpp: Renamed from Source/ThirdParty/ANGLE/src/compiler/preprocessor/new/MacroExpander.cpp.
        (pp):
        (TokenLexer):
        (pp::TokenLexer::TokenLexer):
        (pp::TokenLexer::lex):
        (pp::MacroExpander::MacroExpander):
        (pp::MacroExpander::~MacroExpander):
        (pp::MacroExpander::lex):
        (pp::MacroExpander::getToken):
        (pp::MacroExpander::ungetToken):
        (pp::MacroExpander::isNextTokenLeftParen):
        (pp::MacroExpander::pushMacro):
        (pp::MacroExpander::popMacro):
        (pp::MacroExpander::expandMacro):
        (pp::MacroExpander::collectMacroArgs):
        (pp::MacroExpander::replaceMacroParams):
        * src/compiler/preprocessor/MacroExpander.h: Renamed from Source/ThirdParty/ANGLE/src/compiler/preprocessor/new/MacroExpander.h.
        (pp):
        (MacroExpander):
        (MacroContext):
        (pp::MacroExpander::MacroContext::MacroContext):
        (pp::MacroExpander::MacroContext::empty):
        (pp::MacroExpander::MacroContext::get):
        (pp::MacroExpander::MacroContext::unget):
        * src/compiler/preprocessor/Preprocessor.cpp: Renamed from Source/ThirdParty/ANGLE/src/compiler/preprocessor/new/Preprocessor.cpp.
        (pp):
        (PreprocessorImpl):
        (pp::PreprocessorImpl::PreprocessorImpl):
        (pp::Preprocessor::Preprocessor):
        (pp::Preprocessor::~Preprocessor):
        (pp::Preprocessor::init):
        (pp::Preprocessor::predefineMacro):
        (pp::Preprocessor::lex):
        * src/compiler/preprocessor/Preprocessor.h: Renamed from Source/ThirdParty/ANGLE/src/compiler/preprocessor/new/Preprocessor.h.
        (pp):
        (Preprocessor):
        * src/compiler/preprocessor/SourceLocation.h: Renamed from Source/ThirdParty/ANGLE/src/compiler/preprocessor/new/SourceLocation.h.
        (pp):
        (pp::SourceLocation::SourceLocation):
        (SourceLocation):
        (pp::SourceLocation::equals):
        (pp::operator==):
        (pp::operator!=):
        * src/compiler/preprocessor/Token.cpp: Renamed from Source/ThirdParty/ANGLE/src/compiler/preprocessor/new/Token.cpp.
        (pp):
        (pp::Token::reset):
        (pp::Token::equals):
        (pp::Token::setAtStartOfLine):
        (pp::Token::setHasLeadingSpace):
        (pp::Token::setExpansionDisabled):
        (pp::Token::iValue):
        (pp::Token::uValue):
        (pp::Token::fValue):
        (pp::operator<<):
        * src/compiler/preprocessor/Token.h: Renamed from Source/ThirdParty/ANGLE/src/compiler/preprocessor/new/Token.h.
        (pp):
        (pp::Token::Token):
        (Token):
        (pp::Token::atStartOfLine):
        (pp::Token::hasLeadingSpace):
        (pp::Token::expansionDisabled):
        (pp::operator==):
        (pp::operator!=):
        * src/compiler/preprocessor/Tokenizer.cpp: Renamed from Source/ThirdParty/ANGLE/src/compiler/preprocessor/new/Tokenizer.cpp.
        (yy_buffer_state):
        (yy_trans_info):
        (yyguts_t):
        (yy_get_previous_state):
        (yy_try_NUL_trans):
        (input):
        (pprestart):
        (pp_switch_to_buffer):
        (pp_load_buffer_state):
        (pp_create_buffer):
        (pp_delete_buffer):
        (pp_init_buffer):
        (pp_flush_buffer):
        (pppush_buffer_state):
        (pppop_buffer_state):
        (ppensure_buffer_stack):
        (pp_scan_buffer):
        (pp_scan_string):
        (pp_scan_bytes):
        (yy_fatal_error):
        (ppget_extra):
        (ppget_lineno):
        (ppget_column):
        (ppget_in):
        (ppget_out):
        (ppget_leng):
        (ppget_text):
        (ppset_extra):
        (ppset_lineno):
        (ppset_column):
        (ppset_in):
        (ppset_out):
        (ppget_debug):
        (ppset_debug):
        (ppget_lval):
        (ppset_lval):
        (ppget_lloc):
        (ppset_lloc):
        (pplex_init):
        (pplex_init_extra):
        (yy_init_globals):
        (pplex_destroy):
        (yy_flex_strncpy):
        (yy_flex_strlen):
        (ppalloc):
        (pprealloc):
        (ppfree):
        (pp):
        (pp::Tokenizer::Tokenizer):
        (pp::Tokenizer::~Tokenizer):
        (pp::Tokenizer::init):
        (pp::Tokenizer::setFileNumber):
        (pp::Tokenizer::setLineNumber):
        (pp::Tokenizer::lex):
        (pp::Tokenizer::initScanner):
        (pp::Tokenizer::destroyScanner):
        * src/compiler/preprocessor/Tokenizer.h: Renamed from Source/ThirdParty/ANGLE/src/compiler/preprocessor/new/Tokenizer.h.
        (pp):
        (Tokenizer):
        (Context):
        * src/compiler/preprocessor/Tokenizer.l: Renamed from Source/ThirdParty/ANGLE/src/compiler/preprocessor/new/Tokenizer.l.
        * src/compiler/preprocessor/atom.c: Removed.
        * src/compiler/preprocessor/atom.h: Removed.
        * src/compiler/preprocessor/compile.h: Removed.
        * src/compiler/preprocessor/cpp.c: Removed.
        * src/compiler/preprocessor/cpp.h: Removed.
        * src/compiler/preprocessor/cppstruct.c: Removed.
        * src/compiler/preprocessor/generate_parser.sh: Renamed from Source/ThirdParty/ANGLE/src/compiler/preprocessor/new/generate_parser.sh.
        * src/compiler/preprocessor/memory.c: Removed.
        * src/compiler/preprocessor/memory.h: Removed.
        * src/compiler/preprocessor/new/DiagnosticsBase.cpp: Removed.
        * src/compiler/preprocessor/new/new_file.cpp: Removed.
        * src/compiler/preprocessor/new/new_file2.cpp: Removed.
        * src/compiler/preprocessor/new/preprocessor.vcproj: Removed.
        * src/compiler/preprocessor/numeric_lex.h: Added.
        (pp):
        (pp::numeric_base_int):
        (pp::numeric_lex_int):
        (pp::numeric_lex_float):
        * src/compiler/preprocessor/parser.h: Removed.
        * src/compiler/preprocessor/pp_utils.h: Renamed from Source/ThirdParty/ANGLE/src/compiler/preprocessor/new/pp_utils.h.
        * src/compiler/preprocessor/preprocess.h: Removed.
        * src/compiler/preprocessor/scanner.c: Removed.
        * src/compiler/preprocessor/scanner.h: Removed.
        * src/compiler/preprocessor/slglobals.h: Removed.
        * src/compiler/preprocessor/symbols.c: Removed.
        * src/compiler/preprocessor/symbols.h: Removed.
        * src/compiler/preprocessor/tokens.c: Removed.
        * src/compiler/preprocessor/tokens.h: Removed.
        * src/libEGL/Config.cpp: Removed.
        * src/libEGL/Config.h: Removed.
        * src/libEGL/Display.cpp: Removed.
        * src/libEGL/Display.h: Removed.
        * src/libEGL/README: Added.
        * src/libEGL/Surface.cpp: Removed.
        * src/libEGL/Surface.h: Removed.
        * src/libEGL/libEGL.cpp: Removed.
        * src/libEGL/libEGL.def: Removed.
        * src/libEGL/libEGL.rc: Removed.
        * src/libEGL/libEGL.vcproj: Removed.
        * src/libEGL/main.cpp: Removed.
        * src/libEGL/main.h: Removed.
        * src/libEGL/resource.h: Removed.
        * src/libGLESv2/Blit.cpp: Removed.
        * src/libGLESv2/Blit.h: Removed.
        * src/libGLESv2/Buffer.cpp: Removed.
        * src/libGLESv2/Buffer.h: Removed.
        * src/libGLESv2/Context.cpp: Removed.
        * src/libGLESv2/Context.h: Removed.
        * src/libGLESv2/Fence.cpp: Removed.
        * src/libGLESv2/Fence.h: Removed.
        * src/libGLESv2/Framebuffer.cpp: Removed.
        * src/libGLESv2/Framebuffer.h: Removed.
        * src/libGLESv2/HandleAllocator.cpp: Removed.
        * src/libGLESv2/HandleAllocator.h: Removed.
        * src/libGLESv2/IndexDataManager.cpp: Removed.
        * src/libGLESv2/IndexDataManager.h: Removed.
        * src/libGLESv2/Program.cpp: Removed.
        * src/libGLESv2/Program.h: Removed.
        * src/libGLESv2/ProgramBinary.cpp: Removed.
        * src/libGLESv2/ProgramBinary.h: Removed.
        * src/libGLESv2/Query.cpp: Removed.
        * src/libGLESv2/Query.h: Removed.
        * src/libGLESv2/README: Added.
        * src/libGLESv2/Renderbuffer.cpp: Removed.
        * src/libGLESv2/Renderbuffer.h: Removed.
        * src/libGLESv2/ResourceManager.cpp: Removed.
        * src/libGLESv2/ResourceManager.h: Removed.
        * src/libGLESv2/Shader.cpp: Removed.
        * src/libGLESv2/Shader.h: Removed.
        * src/libGLESv2/Texture.cpp: Removed.
        * src/libGLESv2/Texture.h: Removed.
        * src/libGLESv2/VertexDataManager.cpp: Removed.
        * src/libGLESv2/VertexDataManager.h: Removed.
        * src/libGLESv2/libGLESv2.cpp: Removed.
        * src/libGLESv2/libGLESv2.def: Removed.
        * src/libGLESv2/libGLESv2.rc: Removed.
        * src/libGLESv2/libGLESv2.vcproj: Removed.
        * src/libGLESv2/main.cpp: Removed.
        * src/libGLESv2/main.h: Removed.
        * src/libGLESv2/mathutil.h: Removed.
        * src/libGLESv2/resource.h: Removed.
        * src/libGLESv2/utilities.cpp: Removed.
        * src/libGLESv2/utilities.h: Removed.
        * src/libGLESv2/vertexconversion.h: Removed.

2012-12-18  Max Vujovic  <mvujovic@adobe.com>

        [ANGLE] Use of uninitialized memory in ArrayBoundsClamper
        https://bugs.webkit.org/show_bug.cgi?id=105218

        Reviewed by Dean Jackson.

        TIntermBinary::addIndexClamp is uninitialized when the compile flag 
        SH_CLAMP_INDIRECT_ARRAY_BOUNDS is not set. Then, addIndexClamp is used in OutputGLSLBase. 
        CSS Shaders needs to do a first validation pass without the SH_CLAMP_INDIRECT_ARRAY_BOUNDS 
        flag and its effects. However, sometimes addIndexClamp is true, which inserts clamping code
        that causes a shader to fail compilation at the WebGL level.

        * src/compiler/intermediate.h:
        (TIntermBinary::TIntermBinary):

2012-10-29  Anders Carlsson  <andersca@apple.com>

        Build WebKit as C++11 on Mac
        https://bugs.webkit.org/show_bug.cgi?id=100720

        Reviewed by Daniel Bates.

        * Configurations/Base.xcconfig:
        Add CLANG_CXX_LANGUAGE_STANDARD=gnu++0x.

2012-10-28  Mark Rowe  <mrowe@apple.com>

        Simplify Xcode configuration settings that used to vary between OS versions.

        Reviewed by Dan Bernstein.

        * Configurations/Base.xcconfig:
        * Configurations/DebugRelease.xcconfig:

2012-10-28  Mark Rowe  <mrowe@apple.com>

        Remove references to unsupported OS and Xcode versions.

        Reviewed by Anders Carlsson.

        * Configurations/Base.xcconfig:
        * Configurations/CompilerVersion.xcconfig: Removed.
        * Configurations/DebugRelease.xcconfig:

2012-10-27  Dan Bernstein  <mitz@apple.com>

        REAL_PLATFORM_NAME build setting is no longer needed
        https://bugs.webkit.org/show_bug.cgi?id=100587

        Reviewed by Mark Rowe.

        Removed the definition of REAL_PLATFORM_NAME and replaced references to it with references
        to PLATFORM_NAME.

        * Configurations/Base.xcconfig:
        * Configurations/CompilerVersion.xcconfig:

2012-10-18  Dean Jackson  <dino@apple.com>

        Shader translator needs option to clamp uniform array accesses in vertex shaders
        https://bugs.webkit.org/show_bug.cgi?id=98977
        https://code.google.com/p/angleproject/issues/detail?id=49

        Reviewed by Alok Priyadarshi and Ken Russell.

        WebGL does not allow GLSL code to index a uniform array outside its bounds. Add a
        flag to the ANGLE compiler to insert clamp statements around such indexing.
        Since it is possible to access vec2/3/4 and mat2/3/4 components by array indexing,
        they must be similarly clamped.

        Unfortunately, it is currently not possible to always determine that the indexing is
        operating on a uniform variable. For example, suppose we have "uniform mat4 a". ANGLE
        is currently not able to tell us that the rvalue of "a[0]" is a uniform, just that
        it has a size of 4. Therefore, the clamping is done on all indirect array indexing.

        This will have a performance impact. Future enhancements may be able to determine
        cases where the clamping is not necessary. Currently only direct indexing is skipped
        (i.e. looking up a value using a constant index).

        The clamp insertion is only performed on the GLSL output. Direct3D already guarantees
        that out-of-bounds uniform array access returns a zero value.

        * ANGLE.xcodeproj/project.pbxproj:
        * Target.pri:
        * include/GLSLANG/ShaderLang.h: New compiler option.
        * src/compiler/ArrayBoundsClamper.cpp: Added.
        (ArrayBoundsClamper::ArrayBoundsClamper):
        (ArrayBoundsClamper::OutputClampingFunctionDefinition): Injects a clamping function for integers into GLSL source.
        (ArrayBoundsClamper::MarkIndirectArrayBoundsForClamping): Examines the AST looking for non-direct array indexing.
        * src/compiler/ArrayBoundsClamper.h: Added.
        (ArrayBoundsClamper):
        (ArrayBoundsClamper::GetArrayBoundsClampDefinitionNeeded):
        (ArrayBoundsClamper::SetArrayBoundsClampDefinitionNeeded): Marks the object as needing to output the clamping function.
        (ArrayBoundsClamper::Cleanup): Resets the state so that subsequent runs start fresh.
        * src/compiler/Compiler.cpp:
        (TCompiler::compile): Run the clamping code if the compile option was set.
        (TCompiler::clearResults):
        (TCompiler::getArrayBoundsClamper):
        * src/compiler/OutputGLSLBase.cpp:
        (TOutputGLSLBase::visitBinary): If the expression has been flagged, insert an appropriate "clamp" statement.
        * src/compiler/ShHandle.h:
        (TCompiler):
        * src/compiler/TranslatorESSL.cpp:
        (TranslatorESSL::translate):
        * src/compiler/TranslatorGLSL.cpp:
        (TranslatorGLSL::translate):
        * src/compiler/intermOut.cpp:
        (TType::getCompleteString): Add array size to intermediate tree output.
        * src/compiler/intermediate.h:
        (TIntermBinary::setAddIndexClamp): New flag for indicating a binary expression needs clamping.
        (TIntermBinary::getAddIndexClamp):
        (TIntermBinary):

2012-09-13  Mark Rowe  <mrowe@apple.com>

        <rdar://problem/12255720> Fix the build with newer Clang

        Reviewed by Sam Weinig.
        
        Clang generates a warning about the inclusion of trailing commas on the final enum item as it's apparently
        a C++11 extension. Remove them.
        
        * src/compiler/BaseTypes.h:
        * src/compiler/ExtensionBehavior.h:
        * src/compiler/ParseHelper.cpp:
        (TParseContext::parseVectorFields):
        * src/compiler/intermediate.h:

2012-09-13  Simon Hausmann  <simon.hausmann@nokia.com>

        [Qt] The ANGLE build on Windows breaks with GnuWin32's flex because it is too old
        https://bugs.webkit.org/show_bug.cgi?id=96359

        Reviewed by Tor Arne Vestbø.

        GnuWin32's flex is 2.5.4 and that is too old for ANGLE's preprocessor
        lexer. The only viable alternative I could find on Windows that provides
        binaries is the winflexbison distribution (http://sourceforge.net/projects/winflexbison/),
        so let's use that one instead.

        * DerivedSources.pri:

2012-09-12  Simon Hausmann  <simon.hausmann@nokia.com>

        [Qt] Build on Windows requires bison/flex in PATH
        https://bugs.webkit.org/show_bug.cgi?id=96358

        Reviewed by Tor Arne Vestbø.

        Use MAKEFILE_NOOP_COMMAND instead of the \n\t trick to generate a dummy command. Otherwise
        the PATH prepend trick will break because it generates a command line along the lines of
        (set PATH="...") && with just that trailing ampersand pair.

        * DerivedSources.pri:

2012-09-10  Dean Jackson  <dino@apple.com>

        [Apple] Install plist for Apple Open Source build system
        https://bugs.webkit.org/show_bug.cgi?id=96345

        Reviewed by Mark Rowe.

        Apple's build system requires a couple of files that describe where
        the 3rd party Open Source library came from, and what license it
        uses. These files are copied into /usr/local when the project is
        being installed.

        * ANGLE.plist: Added.
        * ANGLE.txt: Added.
        * ANGLE.xcodeproj/project.pbxproj:

2012-09-06  Andras Becsi  <andras.becsi@nokia.com>

        [ANGLE] Fix the build with gcc 4.7
        https://bugs.webkit.org/show_bug.cgi?id=95989

        Reviewed by Csaba Osztrogonác.

        The build fails because of a bogus warning about the auto-generated
        pplval variable. Unfortunately the warning is called -Wuninitialized
        in gcc 4.6 and -Wmaybe-uninitialized in gcc 4.7 thus we also need to
        ignore unknown pragmas not to break the build with compilers that do
        not recognize these options.

        * src/compiler/preprocessor/new/ExpressionParser.y:

2012-09-06  Simon Hausmann  <simon.hausmann@nokia.com>

        [Qt] Fix build with ANGLE on platforms that provide EGL/GLESv2
        https://bugs.webkit.org/show_bug.cgi?id=95965

        Reviewed by Tor Arne Vestbø.

        Add build rules to build ANGLE as a static library for the Qt port.

        * ANGLE.pri: Added.
        * ANGLE.pro: Added.
        * DerivedSources.pri: Added.
        * Target.pri: Added.

2012-08-24  Joshua Netterfield  <jnetterfield@rim.com>

        [CSS Shaders] [ANGLE] RenameFunction::RenameFunction may store references to temporary string
        https://bugs.webkit.org/show_bug.cgi?id=94736
        http://code.google.com/p/angleproject/issues/detail?id=360

        Reviewed by George Staikos.

        When RenameFunction::RenameFunction(const TString& oldFunctionName, const TString&
        newFunctionName) is called from TCompiler::rewriteCSSShader(TIntermNode*), references to
        the temporaries oldFunctionName and newFunctionName are stored as mOldFunctionName and
        mNewFunctionName. This results in undefined behaviour in visitAggregate.

        This same patch is being applied in upstream ANGLE, and is needed for CSS Shader
        sanitization.

        * src/compiler/RenameFunction.h:
        (RenameFunction::visitAggregate):
        (RenameFunction):

2012-07-18  Kristóf Kosztyó  <kkristof@inf.u-szeged.hu>

        [Qt] Buildfix after r122870.
        https://bugs.webkit.org/show_bug.cgi?id=89039

        Reviewed by Csaba Osztrogonác

        * src/compiler/preprocessor/new/MacroExpander.cpp:
        (pp::MacroExpander::ungetToken):

2012-07-17  Max Vujovic  <mvujovic@adobe.com>

        Update ANGLE in WebKit
        https://bugs.webkit.org/show_bug.cgi?id=89039

        Reviewed by Dean Jackson and Mark Rowe.

        Update ANGLE to r1170, with the following modifications:

        (1) Use Bison 2.3 instead of Bison 2.4.2 to generate ExpressionParser.cpp and
        glslang_tab.cpp. I had to modify ExpressionParser.y to make it compatible with Bison
        2.3. The changes have been contributed back to ANGLE in r1224.

        (2) Continue to recognize QNX as POSIX in ANGLE. This has been contributed back to ANGLE
        in r1223.

        (3) Rename ANGLE/src/compiler/preprocessor/new/Diagnostic.cpp to DiagnosticBase.cpp.
        Rename ANGLE/src/compiler/preprocessor/new/DirectiveHandler.cpp to DirectiveHandlerBase.cpp.

        With the introduction of ANGLE's new preprocessor, there were two files named Diagnostic.cpp
        in ANGLE under different folders. This caused problems on the QT build when their object
        files, both named Diagnostic.o, tried to go in the same folder. Renaming one of them to
        DiagnosticBase.cpp avoids this conflict. The same situation occurred with
        DirectiveHandler.cpp. I will work on contributing this change back to ANGLE for future
        updates.

        (4) Add the following lines to glslang.y and ExpressionParser.y:
        #define YYENABLE_NLS 0
        #define YYLTYPE_IS_TRIVIAL 1

        Bison 2.3 doesn't first check that these macros are defined before reading their value,
        which causes the QT build to fail.

        We work around this issue in the same way in CSSGrammar.y.

        I will work on contributing this change back to ANGLE.

        * ANGLE.xcodeproj/project.pbxproj:
        * include/GLES2/gl2ext.h:
        * include/GLSLANG/ShaderLang.h:
        * src/build_angle.xcodeproj/project.pbxproj:
        * src/common/angleutils.h:
        * src/common/debug.cpp:
        (gl):
        (gl::output):
        (gl::trace):
        (gl::perfActive):
        (gl::ScopedPerfEventHelper::ScopedPerfEventHelper):
        (gl::ScopedPerfEventHelper::~ScopedPerfEventHelper):
        * src/common/version.h:
        * src/compiler/BuiltInFunctionEmulator.cpp:
        (BuiltInFunctionEmulator::IdentifyFunction):
        * src/compiler/BuiltInFunctionEmulator.h:
        * src/compiler/Compiler.cpp:
        (isWebGLBasedSpec):
        (TCompiler::compile):
        (TCompiler::rewriteCSSShader):
        (TCompiler::enforceTimingRestrictions):
        (TCompiler::enforceFragmentShaderTimingRestrictions):
        (TCompiler::enforceVertexShaderTimingRestrictions):
        * src/compiler/DetectDiscontinuity.cpp: Added.
        (sh::DetectLoopDiscontinuity::traverse):
        (sh):
        (sh::DetectLoopDiscontinuity::visitBranch):
        (sh::DetectLoopDiscontinuity::visitAggregate):
        (sh::containsLoopDiscontinuity):
        (sh::DetectGradientOperation::traverse):
        (sh::DetectGradientOperation::visitUnary):
        (sh::DetectGradientOperation::visitAggregate):
        (sh::containsGradientOperation):
        * src/compiler/DetectDiscontinuity.h: Added.
        (sh):
        (DetectLoopDiscontinuity):
        (DetectGradientOperation):
        * src/compiler/Diagnostics.cpp: Added.
        (TDiagnostics::TDiagnostics):
        (TDiagnostics::~TDiagnostics):
        (TDiagnostics::writeInfo):
        (TDiagnostics::writeDebug):
        (TDiagnostics::print):
        * src/compiler/Diagnostics.h: Added.
        (TDiagnostics):
        (TDiagnostics::infoSink):
        * src/compiler/DirectiveHandler.cpp: Added.
        (getBehavior):
        (TDirectiveHandler::TDirectiveHandler):
        (TDirectiveHandler::~TDirectiveHandler):
        (TDirectiveHandler::handleError):
        (TDirectiveHandler::handlePragma):
        (TDirectiveHandler::handleExtension):
        (TDirectiveHandler::handleVersion):
        * src/compiler/DirectiveHandler.h: Added.
        (TDirectiveHandler):
        (TDirectiveHandler::pragma):
        (TDirectiveHandler::extensionBehavior):
        * src/compiler/ExtensionBehavior.h:
        (getBehaviorString):
        * src/compiler/Initialize.cpp:
        (BuiltInConstants):
        (TBuiltIns::initialize):
        (IdentifyBuiltIns):
        * src/compiler/InitializeParseContext.cpp: Added.
        (InitializeParseContextIndex):
        (FreeParseContextIndex):
        (InitializeGlobalParseContext):
        (FreeParseContext):
        (GetGlobalParseContext):
        * src/compiler/InitializeParseContext.h:
        (TThreadParseContextRec):
        * src/compiler/Intermediate.cpp:
        (TIntermediate::addSelection):
        * src/compiler/MapLongVariableNames.cpp:
        * src/compiler/OutputHLSL.cpp:
        (sh::str):
        (sh::OutputHLSL::OutputHLSL):
        (sh::OutputHLSL::~OutputHLSL):
        (sh::OutputHLSL::output):
        (sh::OutputHLSL::header):
        (sh::OutputHLSL::visitBinary):
        (sh::OutputHLSL::visitUnary):
        (sh::OutputHLSL::visitAggregate):
        (sh::OutputHLSL::visitSelection):
        (sh::OutputHLSL::visitLoop):
        (sh::OutputHLSL::traverseStatements):
        (sh):
        (sh::OutputHLSL::handleExcessiveLoop):
        (sh::OutputHLSL::typeString):
        (sh::OutputHLSL::addConstructor):
        (sh::OutputHLSL::decorateField):
        * src/compiler/OutputHLSL.h:
        (sh):
        (OutputHLSL):
        * src/compiler/ParseHelper.cpp:
        (TParseContext::parseVectorFields):
        (TParseContext::parseMatrixFields):
        (TParseContext::error):
        (TParseContext::warning):
        (TParseContext::trace):
        (TParseContext::assignError):
        (TParseContext::unaryOpError):
        (TParseContext::binaryOpError):
        (TParseContext::precisionErrorCheck):
        (TParseContext::lValueErrorCheck):
        (TParseContext::constErrorCheck):
        (TParseContext::integerErrorCheck):
        (TParseContext::globalErrorCheck):
        (TParseContext::reservedErrorCheck):
        (TParseContext::constructorErrorCheck):
        (TParseContext::voidErrorCheck):
        (TParseContext::boolErrorCheck):
        (TParseContext::samplerErrorCheck):
        (TParseContext::structQualifierErrorCheck):
        (TParseContext::parameterSamplerErrorCheck):
        (TParseContext::arraySizeErrorCheck):
        (TParseContext::arrayQualifierErrorCheck):
        (TParseContext::arrayTypeErrorCheck):
        (TParseContext::arrayErrorCheck):
        (TParseContext::arraySetMaxSize):
        (TParseContext::nonInitConstErrorCheck):
        (TParseContext::nonInitErrorCheck):
        (TParseContext::paramErrorCheck):
        (TParseContext::extensionErrorCheck):
        (TParseContext::supportsExtension):
        (TParseContext::handleExtensionDirective):
        (TParseContext::handlePragmaDirective):
        (TParseContext::findFunction):
        (TParseContext::executeInitializer):
        (TParseContext::constructBuiltIn):
        (TParseContext::constructStruct):
        (TParseContext::addConstVectorNode):
        (TParseContext::addConstMatrixNode):
        (TParseContext::addConstArrayNode):
        (TParseContext::addConstStruct):
        (TParseContext::enterStructDeclaration):
        (TParseContext::structNestingErrorCheck):
        (PaParseStrings):
        * src/compiler/ParseHelper.h:
        (TParseContext::TParseContext):
        (TParseContext):
        (TParseContext::infoSink):
        (TParseContext::extensionBehavior):
        (TParseContext::pragma):
        * src/compiler/PoolAlloc.cpp:
        (TAllocation::checkGuardBlock):
        * src/compiler/Pragma.h: Added.
        (TPragma):
        (TPragma::TPragma):
        * src/compiler/RenameFunction.h: Added.
        (RenameFunction):
        (RenameFunction::RenameFunction):
        (RenameFunction::visitAggregate):
        * src/compiler/ShHandle.h:
        (TCompiler):
        * src/compiler/ShaderLang.cpp:
        (getVariableInfo):
        * src/compiler/SymbolTable.cpp:
        (TType::buildMangledName):
        * src/compiler/TranslatorHLSL.cpp:
        * src/compiler/UnfoldSelect.cpp: Removed.
        * src/compiler/UnfoldSelect.h: Removed.
        * src/compiler/UnfoldShortCircuit.cpp: Added.
        (sh::UnfoldShortCircuit::UnfoldShortCircuit):
        (sh):
        (sh::UnfoldShortCircuit::traverse):
        (sh::UnfoldShortCircuit::visitBinary):
        (sh::UnfoldShortCircuit::visitSelection):
        (sh::UnfoldShortCircuit::visitLoop):
        (sh::UnfoldShortCircuit::getNextTemporaryIndex):
        * src/compiler/UnfoldShortCircuit.h: Added.
        (sh):
        (UnfoldShortCircuit):
        * src/compiler/ValidateLimitations.cpp:
        * src/compiler/debug.cpp:
        * src/compiler/depgraph: Added.
        * src/compiler/depgraph/DependencyGraph.cpp: Added.
        (TDependencyGraph::TDependencyGraph):
        (TDependencyGraph::~TDependencyGraph):
        (TDependencyGraph::createArgument):
        (TDependencyGraph::createFunctionCall):
        (TDependencyGraph::getOrCreateSymbol):
        (TDependencyGraph::createSelection):
        (TDependencyGraph::createLoop):
        (TDependencyGraph::createLogicalOp):
        (TGraphLogicalOp::getOpString):
        * src/compiler/depgraph/DependencyGraph.h: Added.
        (TGraphNode):
        (TGraphNode::TGraphNode):
        (TGraphNode::~TGraphNode):
        (TGraphParentNode):
        (TGraphParentNode::TGraphParentNode):
        (TGraphParentNode::~TGraphParentNode):
        (TGraphParentNode::addDependentNode):
        (TGraphArgument):
        (TGraphArgument::TGraphArgument):
        (TGraphArgument::~TGraphArgument):
        (TGraphArgument::getIntermFunctionCall):
        (TGraphArgument::getArgumentNumber):
        (TGraphFunctionCall):
        (TGraphFunctionCall::TGraphFunctionCall):
        (TGraphFunctionCall::~TGraphFunctionCall):
        (TGraphFunctionCall::getIntermFunctionCall):
        (TGraphSymbol):
        (TGraphSymbol::TGraphSymbol):
        (TGraphSymbol::~TGraphSymbol):
        (TGraphSymbol::getIntermSymbol):
        (TGraphSelection):
        (TGraphSelection::TGraphSelection):
        (TGraphSelection::~TGraphSelection):
        (TGraphSelection::getIntermSelection):
        (TGraphLoop):
        (TGraphLoop::TGraphLoop):
        (TGraphLoop::~TGraphLoop):
        (TGraphLoop::getIntermLoop):
        (TGraphLogicalOp):
        (TGraphLogicalOp::TGraphLogicalOp):
        (TGraphLogicalOp::~TGraphLogicalOp):
        (TGraphLogicalOp::getIntermLogicalOp):
        (TDependencyGraph):
        (TDependencyGraph::begin):
        (TDependencyGraph::end):
        (TDependencyGraph::beginSamplerSymbols):
        (TDependencyGraph::endSamplerSymbols):
        (TDependencyGraph::beginUserDefinedFunctionCalls):
        (TDependencyGraph::endUserDefinedFunctionCalls):
        (TDependencyGraphTraverser):
        (TDependencyGraphTraverser::TDependencyGraphTraverser):
        (TDependencyGraphTraverser::visitSymbol):
        (TDependencyGraphTraverser::visitArgument):
        (TDependencyGraphTraverser::visitFunctionCall):
        (TDependencyGraphTraverser::visitSelection):
        (TDependencyGraphTraverser::visitLoop):
        (TDependencyGraphTraverser::visitLogicalOp):
        (TDependencyGraphTraverser::getDepth):
        (TDependencyGraphTraverser::incrementDepth):
        (TDependencyGraphTraverser::decrementDepth):
        (TDependencyGraphTraverser::clearVisited):
        (TDependencyGraphTraverser::markVisited):
        (TDependencyGraphTraverser::isVisited):
        * src/compiler/depgraph/DependencyGraphBuilder.cpp: Added.
        (TDependencyGraphBuilder::build):
        (TDependencyGraphBuilder::visitAggregate):
        (TDependencyGraphBuilder::visitFunctionDefinition):
        (TDependencyGraphBuilder::visitFunctionCall):
        (TDependencyGraphBuilder::visitAggregateChildren):
        (TDependencyGraphBuilder::visitSymbol):
        (TDependencyGraphBuilder::visitBinary):
        (TDependencyGraphBuilder::visitAssignment):
        (TDependencyGraphBuilder::visitLogicalOp):
        (TDependencyGraphBuilder::visitBinaryChildren):
        (TDependencyGraphBuilder::visitSelection):
        (TDependencyGraphBuilder::visitLoop):
        (TDependencyGraphBuilder::connectMultipleNodesToSingleNode):
        * src/compiler/depgraph/DependencyGraphBuilder.h: Added.
        (TDependencyGraphBuilder):
        (TNodeSetStack):
        (TDependencyGraphBuilder::TNodeSetStack::TNodeSetStack):
        (TDependencyGraphBuilder::TNodeSetStack::~TNodeSetStack):
        (TDependencyGraphBuilder::TNodeSetStack::getTopSet):
        (TDependencyGraphBuilder::TNodeSetStack::pushSet):
        (TDependencyGraphBuilder::TNodeSetStack::popSet):
        (TDependencyGraphBuilder::TNodeSetStack::popSetIntoNext):
        (TDependencyGraphBuilder::TNodeSetStack::insertIntoTopSet):
        (TDependencyGraphBuilder::TNodeSetStack::clear):
        (TNodeSetMaintainer):
        (TDependencyGraphBuilder::TNodeSetMaintainer::TNodeSetMaintainer):
        (TDependencyGraphBuilder::TNodeSetMaintainer::~TNodeSetMaintainer):
        (TNodeSetPropagatingMaintainer):
        (TDependencyGraphBuilder::TNodeSetPropagatingMaintainer::TNodeSetPropagatingMaintainer):
        (TDependencyGraphBuilder::TNodeSetPropagatingMaintainer::~TNodeSetPropagatingMaintainer):
        (TLeftmostSymbolMaintainer):
        (TDependencyGraphBuilder::TLeftmostSymbolMaintainer::TLeftmostSymbolMaintainer):
        (TDependencyGraphBuilder::TLeftmostSymbolMaintainer::~TLeftmostSymbolMaintainer):
        (TDependencyGraphBuilder::TDependencyGraphBuilder):
        (TDependencyGraphBuilder::build):
        * src/compiler/depgraph/DependencyGraphOutput.cpp: Added.
        (TDependencyGraphOutput::outputIndentation):
        (TDependencyGraphOutput::visitArgument):
        (TDependencyGraphOutput::visitFunctionCall):
        (TDependencyGraphOutput::visitSymbol):
        (TDependencyGraphOutput::visitSelection):
        (TDependencyGraphOutput::visitLoop):
        (TDependencyGraphOutput::visitLogicalOp):
        (TDependencyGraphOutput::outputAllSpanningTrees):
        * src/compiler/depgraph/DependencyGraphOutput.h: Added.
        (TDependencyGraphOutput):
        (TDependencyGraphOutput::TDependencyGraphOutput):
        * src/compiler/depgraph/DependencyGraphTraverse.cpp: Added.
        (TGraphNode::traverse):
        (TGraphParentNode::traverse):
        (TGraphArgument::traverse):
        (TGraphFunctionCall::traverse):
        (TGraphSymbol::traverse):
        (TGraphSelection::traverse):
        (TGraphLoop::traverse):
        (TGraphLogicalOp::traverse):
        * src/compiler/glslang.h:
        * src/compiler/glslang.l:
        * src/compiler/glslang.y:
        * src/compiler/glslang_lex.cpp:
        (yy_buffer_state):
        (yyguts_t):
        (yy_get_previous_state):
        (yy_try_NUL_trans):
        (input):
        (yyensure_buffer_stack):
        (yy_scan_bytes):
        (yyget_leng):
        (string_input):
        (yyerror):
        (glslang_finalize):
        (glslang_scan):
        * src/compiler/glslang_tab.cpp:
        * src/compiler/intermediate.h:
        (TIntermAggregate::TIntermAggregate):
        (TIntermAggregate::~TIntermAggregate):
        (TIntermAggregate::isUserDefined):
        (TIntermAggregate):
        (TIntermTraverser::~TIntermTraverser):
        * src/compiler/osinclude.h:
        * src/compiler/preprocessor/atom.c:
        (FindHashLoc):
        (PrintAtomTable):
        * src/compiler/preprocessor/cpp.c:
        (CPPpragma):
        (readCPPline):
        (PredefineIntMacro):
        (MacroExpand):
        * src/compiler/preprocessor/cpp.h:
        * src/compiler/preprocessor/memory.h:
        * src/compiler/preprocessor/new: Added properties allow-tabs, allow-tabs, allow-tabs, allow-tabs, allow-tabs, allow-tabs, allow-tabs, allow-tabs, allow-tabs, allow-tabs, allow-tabs, allow-tabs, allow-tabs, allow-tabs, allow-tabs, allow-tabs, allow-tabs, allow-tabs, allow-tabs, allow-tabs, allow-tabs, allow-tabs, allow-tabs, allow-tabs, allow-tabs, allow-tabs, allow-tabs, allow-tabs and allow-tabs.
        * src/compiler/preprocessor/new/Context.cpp: Removed.
        * src/compiler/preprocessor/new/Context.h: Removed.
        * src/compiler/preprocessor/new/Diagnostics.h: Added.
        (pp):
        (Diagnostics):
        * src/compiler/preprocessor/new/DiagnosticsBase.cpp: Added.
        (pp):
        (pp::Diagnostics::~Diagnostics):
        (pp::Diagnostics::report):
        (pp::Diagnostics::severity):
        * src/compiler/preprocessor/new/DirectiveHandler.h: Added.
        (pp):
        (DirectiveHandler):
        * src/compiler/preprocessor/new/DirectiveHandlerBase.cpp: Added.
        (pp):
        (pp::DirectiveHandler::~DirectiveHandler):
        * src/compiler/preprocessor/new/DirectiveParser.cpp: Added.
        (getDirective):
        (isConditionalDirective):
        (isEOD):
        (skipUntilEOD):
        (isMacroNameReserved):
        (isMacroPredefined):
        (pp):
        (DefinedParser):
        (pp::DefinedParser::DefinedParser):
        (pp::DefinedParser::lex):
        (pp::DirectiveParser::DirectiveParser):
        (pp::DirectiveParser::lex):
        (pp::DirectiveParser::parseDirective):
        (pp::DirectiveParser::parseDefine):
        (pp::DirectiveParser::parseUndef):
        (pp::DirectiveParser::parseIf):
        (pp::DirectiveParser::parseIfdef):
        (pp::DirectiveParser::parseIfndef):
        (pp::DirectiveParser::parseElse):
        (pp::DirectiveParser::parseElif):
        (pp::DirectiveParser::parseEndif):
        (pp::DirectiveParser::parseError):
        (pp::DirectiveParser::parsePragma):
        (pp::DirectiveParser::parseExtension):
        (pp::DirectiveParser::parseVersion):
        (pp::DirectiveParser::parseLine):
        (pp::DirectiveParser::skipping):
        (pp::DirectiveParser::parseConditionalIf):
        (pp::DirectiveParser::parseExpressionIf):
        (pp::DirectiveParser::parseExpressionIfdef):
        * src/compiler/preprocessor/new/DirectiveParser.h: Added.
        (pp):
        (DirectiveParser):
        (ConditionalBlock):
        (pp::DirectiveParser::ConditionalBlock::ConditionalBlock):
        * src/compiler/preprocessor/new/ExpressionParser.cpp: Added.
        (yysyntax_error):
        (yylex):
        (yyerror):
        (pp):
        (pp::ExpressionParser::ExpressionParser):
        (pp::ExpressionParser::parse):
        * src/compiler/preprocessor/new/ExpressionParser.h: Added.
        (pp):
        (ExpressionParser):
        * src/compiler/preprocessor/new/ExpressionParser.y: Added.
        * src/compiler/preprocessor/new/Input.cpp: Added property allow-tabs.
        (pp::Input::Input):
        (pp::Input::read):
        * src/compiler/preprocessor/new/Input.h: Added property allow-tabs.
        (pp):
        (Input):
        (pp::Input::count):
        (pp::Input::string):
        (pp::Input::length):
        (Location):
        (pp::Input::Location::Location):
        (pp::Input::readLoc):
        * src/compiler/preprocessor/new/Lexer.cpp: Added.
        (pp):
        (pp::Lexer::~Lexer):
        * src/compiler/preprocessor/new/Lexer.h: Added.
        (pp):
        (Lexer):
        * src/compiler/preprocessor/new/Macro.cpp: Added property allow-tabs.
        (pp::Macro::equals):
        * src/compiler/preprocessor/new/Macro.h: Added property allow-tabs.
        (pp):
        (pp::Macro::Macro):
        (Macro):
        * src/compiler/preprocessor/new/MacroExpander.cpp: Added.
        (pp):
        (TokenLexer):
        (pp::TokenLexer::TokenLexer):
        (pp::TokenLexer::lex):
        (pp::MacroExpander::MacroExpander):
        (pp::MacroExpander::~MacroExpander):
        (pp::MacroExpander::lex):
        (pp::MacroExpander::getToken):
        (pp::MacroExpander::ungetToken):
        (pp::MacroExpander::isNextTokenLeftParen):
        (pp::MacroExpander::pushMacro):
        (pp::MacroExpander::popMacro):
        (pp::MacroExpander::expandMacro):
        (pp::MacroExpander::collectMacroArgs):
        (pp::MacroExpander::replaceMacroParams):
        * src/compiler/preprocessor/new/MacroExpander.h: Added.
        (pp):
        (MacroExpander):
        (MacroContext):
        (pp::MacroExpander::MacroContext::MacroContext):
        (pp::MacroExpander::MacroContext::empty):
        (pp::MacroExpander::MacroContext::get):
        (pp::MacroExpander::MacroContext::unget):
        * src/compiler/preprocessor/new/Preprocessor.cpp: Added property allow-tabs.
        (PreprocessorImpl):
        (pp::PreprocessorImpl::PreprocessorImpl):
        (pp):
        (pp::Preprocessor::Preprocessor):
        (pp::Preprocessor::~Preprocessor):
        (pp::Preprocessor::init):
        (pp::Preprocessor::predefineMacro):
        (pp::Preprocessor::lex):
        * src/compiler/preprocessor/new/Preprocessor.h: Added property allow-tabs.
        (pp):
        (Preprocessor):
        * src/compiler/preprocessor/new/SourceLocation.h: Added.
        (pp):
        (pp::SourceLocation::SourceLocation):
        (SourceLocation):
        (pp::SourceLocation::equals):
        (pp::operator==):
        (pp::operator!=):
        * src/compiler/preprocessor/new/Token.cpp: Added property allow-tabs.
        (pp::Token::reset):
        (pp::Token::equals):
        (pp::Token::setAtStartOfLine):
        (pp::Token::setHasLeadingSpace):
        (pp):
        (pp::Token::setExpansionDisabled):
        (pp::operator<<):
        * src/compiler/preprocessor/new/Token.h: Added property allow-tabs.
        (pp::Token::Token):
        (Token):
        (pp::Token::atStartOfLine):
        (pp::Token::hasLeadingSpace):
        (pp::Token::expansionDisabled):
        (pp::operator==):
        (pp):
        (pp::operator!=):
        * src/compiler/preprocessor/new/Tokenizer.cpp: Added.
        (yy_buffer_state):
        (yy_trans_info):
        (yyguts_t):
        (yy_get_previous_state):
        (yy_try_NUL_trans):
        (input):
        (pprestart):
        (pp_switch_to_buffer):
        (pp_load_buffer_state):
        (pp_create_buffer):
        (pp_delete_buffer):
        (pp_init_buffer):
        (pp_flush_buffer):
        (pppush_buffer_state):
        (pppop_buffer_state):
        (ppensure_buffer_stack):
        (pp_scan_buffer):
        (pp_scan_string):
        (pp_scan_bytes):
        (yy_fatal_error):
        (ppget_extra):
        (ppget_lineno):
        (ppget_column):
        (ppget_in):
        (ppget_out):
        (ppget_leng):
        (ppget_text):
        (ppset_extra):
        (ppset_lineno):
        (ppset_column):
        (ppset_in):
        (ppset_out):
        (ppget_debug):
        (ppset_debug):
        (ppget_lval):
        (ppset_lval):
        (ppget_lloc):
        (ppset_lloc):
        (pplex_init):
        (pplex_init_extra):
        (yy_init_globals):
        (pplex_destroy):
        (yy_flex_strncpy):
        (yy_flex_strlen):
        (ppalloc):
        (pprealloc):
        (ppfree):
        (pp):
        (pp::Tokenizer::Tokenizer):
        (pp::Tokenizer::~Tokenizer):
        (pp::Tokenizer::init):
        (pp::Tokenizer::setFileNumber):
        (pp::Tokenizer::setLineNumber):
        (pp::Tokenizer::lex):
        (pp::Tokenizer::initScanner):
        (pp::Tokenizer::destroyScanner):
        * src/compiler/preprocessor/new/Tokenizer.h: Added.
        (pp):
        (Tokenizer):
        (Context):
        * src/compiler/preprocessor/new/Tokenizer.l: Added.
        * src/compiler/preprocessor/new/generate_parser.sh: Added property allow-tabs.
        * src/compiler/preprocessor/new/pp.l: Removed.
        * src/compiler/preprocessor/new/pp.y: Removed.
        * src/compiler/preprocessor/new/pp_lex.cpp: Removed.
        * src/compiler/preprocessor/new/pp_tab.cpp: Removed.
        * src/compiler/preprocessor/new/pp_tab.h: Removed.
        * src/compiler/preprocessor/new/pp_utils.h: Added.
        * src/compiler/preprocessor/new/preprocessor.vcproj: Added.
        * src/compiler/preprocessor/new/stl_utils.h: Removed.
        * src/compiler/preprocessor/new/token_type.h: Removed.
        * src/compiler/preprocessor/preprocess.h:
        * src/compiler/preprocessor/scanner.c:
        (InitScannerInput):
        * src/compiler/preprocessor/scanner.h:
        * src/compiler/preprocessor/symbols.h:
        * src/compiler/preprocessor/tokens.c:
        (ReadToken):
        (DumpTokenStream):
        * src/compiler/preprocessor/tokens.h:
        * src/compiler/timing: Added.
        * src/compiler/timing/RestrictFragmentShaderTiming.cpp: Added.
        (RestrictFragmentShaderTiming::RestrictFragmentShaderTiming):
        (RestrictFragmentShaderTiming::enforceRestrictions):
        (RestrictFragmentShaderTiming::validateUserDefinedFunctionCallUsage):
        (RestrictFragmentShaderTiming::beginError):
        (RestrictFragmentShaderTiming::isSamplingOp):
        (RestrictFragmentShaderTiming::visitArgument):
        (RestrictFragmentShaderTiming::visitSelection):
        (RestrictFragmentShaderTiming::visitLoop):
        (RestrictFragmentShaderTiming::visitLogicalOp):
        * src/compiler/timing/RestrictFragmentShaderTiming.h: Added.
        (RestrictFragmentShaderTiming):
        (RestrictFragmentShaderTiming::numErrors):
        * src/compiler/timing/RestrictVertexShaderTiming.cpp: Added.
        (RestrictVertexShaderTiming::visitSymbol):
        * src/compiler/timing/RestrictVertexShaderTiming.h: Added.
        (RestrictVertexShaderTiming):
        (RestrictVertexShaderTiming::RestrictVertexShaderTiming):
        (RestrictVertexShaderTiming::enforceRestrictions):
        (RestrictVertexShaderTiming::numErrors):
        * src/libEGL/Display.cpp:
        (egl):
        (egl::Display::getDepthTextureSupport):
        (egl::Display::getTexturePool):
        * src/libEGL/Display.h:
        (Display):
        * src/libEGL/Surface.cpp:
        (egl::Surface::Surface):
        (egl::Surface::release):
        (egl::Surface::resetSwapChain):
        (egl::Surface::swapRect):
        (egl):
        (egl::Surface::swap):
        (egl::Surface::postSubBuffer):
        * src/libEGL/Surface.h:
        (Surface):
        * src/libEGL/libEGL.cpp:
        * src/libGLESv2/Context.cpp:
        (gl::Context::makeCurrent):
        (gl::Context::markDxUniformsDirty):
        (gl):
        (gl::Context::getIntegerv):
        (gl::Context::getQueryParameterInfo):
        (gl::Context::applyRenderTarget):
        (gl::Context::applyState):
        (gl::Context::applyShaders):
        (gl::Context::applyTextures):
        (gl::Context::readPixels):
        (gl::Context::clear):
        (gl::Context::drawArrays):
        (gl::Context::drawElements):
        (gl::Context::supportsDepthTextures):
        (gl::Context::initExtensionString):
        (gl::Context::blitFramebuffer):
        (gl::VertexDeclarationCache::applyDeclaration):
        * src/libGLESv2/Context.h:
        (Context):
        * src/libGLESv2/Framebuffer.cpp:
        (gl::Framebuffer::~Framebuffer):
        (gl):
        (gl::Framebuffer::getNullColorbuffer):
        (gl::Framebuffer::completeness):
        * src/libGLESv2/Framebuffer.h:
        (Framebuffer):
        * src/libGLESv2/Program.cpp:
        (gl):
        (gl::AttributeBindings::AttributeBindings):
        (gl::AttributeBindings::~AttributeBindings):
        (gl::InfoLog::InfoLog):
        (gl::InfoLog::~InfoLog):
        (gl::InfoLog::getLength):
        (gl::InfoLog::getLog):
        (gl::InfoLog::appendSanitized):
        (gl::InfoLog::append):
        (gl::InfoLog::reset):
        (gl::Program::Program):
        (gl::Program::~Program):
        (gl::Program::attachShader):
        (gl::Program::detachShader):
        (gl::Program::getAttachedShadersCount):
        (gl::AttributeBindings::bindAttributeLocation):
        (gl::Program::bindAttributeLocation):
        (gl::Program::link):
        (gl::AttributeBindings::getAttributeBinding):
        (gl::Program::unlink):
        (gl::Program::getProgramBinary):
        (gl::Program::setProgramBinary):
        (gl::Program::getInfoLogLength):
        (gl::Program::getInfoLog):
        (gl::Program::getActiveAttribute):
        (gl::Program::getActiveAttributeCount):
        (gl::Program::getActiveAttributeMaxLength):
        (gl::Program::getActiveUniform):
        (gl::Program::getActiveUniformCount):
        (gl::Program::getActiveUniformMaxLength):
        (gl::Program::validate):
        (gl::Program::isValidated):
        * src/libGLESv2/Program.h:
        (gl):
        (AttributeBindings):
        (InfoLog):
        (Program):
        * src/libGLESv2/ProgramBinary.cpp: Added.
        (gl::str):
        (gl):
        (gl::Uniform::Uniform):
        (gl::Uniform::~Uniform):
        (gl::Uniform::isArray):
        (gl::UniformLocation::UniformLocation):
        (gl::ProgramBinary::ProgramBinary):
        (gl::ProgramBinary::~ProgramBinary):
        (gl::ProgramBinary::getPixelShader):
        (gl::ProgramBinary::getVertexShader):
        (gl::ProgramBinary::getAttributeLocation):
        (gl::ProgramBinary::getSemanticIndex):
        (gl::ProgramBinary::getUsedSamplerRange):
        (gl::ProgramBinary::getSamplerMapping):
        (gl::ProgramBinary::getSamplerTextureType):
        (gl::ProgramBinary::getUniformLocation):
        (gl::ProgramBinary::setUniform1fv):
        (gl::ProgramBinary::setUniform2fv):
        (gl::ProgramBinary::setUniform3fv):
        (gl::ProgramBinary::setUniform4fv):
        (gl::transposeMatrix):
        (gl::ProgramBinary::setUniformMatrix2fv):
        (gl::ProgramBinary::setUniformMatrix3fv):
        (gl::ProgramBinary::setUniformMatrix4fv):
        (gl::ProgramBinary::setUniform1iv):
        (gl::ProgramBinary::setUniform2iv):
        (gl::ProgramBinary::setUniform3iv):
        (gl::ProgramBinary::setUniform4iv):
        (gl::ProgramBinary::getUniformfv):
        (gl::ProgramBinary::getUniformiv):
        (gl::ProgramBinary::dirtyAllUniforms):
        (gl::ProgramBinary::applyUniforms):
        (gl::ProgramBinary::compileToBinary):
        (gl::ProgramBinary::packVaryings):
        (gl::ProgramBinary::linkVaryings):
        (gl::ProgramBinary::link):
        (gl::ProgramBinary::linkAttributes):
        (gl::ProgramBinary::linkUniforms):
        (gl::ProgramBinary::defineUniform):
        (gl::ProgramBinary::createUniform):
        (gl::ProgramBinary::decorateAttribute):
        (gl::ProgramBinary::undecorateUniform):
        (gl::ProgramBinary::applyUniformnbv):
        (gl::ProgramBinary::applyUniformnfv):
        (gl::ProgramBinary::applyUniform1iv):
        (gl::ProgramBinary::applyUniform2iv):
        (gl::ProgramBinary::applyUniform3iv):
        (gl::ProgramBinary::applyUniform4iv):
        (gl::ProgramBinary::applyUniformniv):
        (gl::ProgramBinary::isValidated):
        (gl::ProgramBinary::getActiveAttribute):
        (gl::ProgramBinary::getActiveAttributeCount):
        (gl::ProgramBinary::getActiveAttributeMaxLength):
        (gl::ProgramBinary::getActiveUniform):
        (gl::ProgramBinary::getActiveUniformCount):
        (gl::ProgramBinary::getActiveUniformMaxLength):
        (gl::ProgramBinary::validate):
        (gl::ProgramBinary::validateSamplers):
        (gl::ProgramBinary::getDxDepthRangeLocation):
        (gl::ProgramBinary::getDxDepthLocation):
        (gl::ProgramBinary::getDxCoordLocation):
        (gl::ProgramBinary::getDxHalfPixelSizeLocation):
        (gl::ProgramBinary::getDxFrontCCWLocation):
        (gl::ProgramBinary::getDxPointsOrLinesLocation):
        * src/libGLESv2/ProgramBinary.h: Added.
        (gl):
        (Uniform):
        (gl::Uniform::RegisterInfo::RegisterInfo):
        (RegisterInfo):
        (gl::Uniform::RegisterInfo::set):
        (UniformLocation):
        (ProgramBinary):
        (Sampler):
        * src/libGLESv2/Renderbuffer.cpp:
        (gl):
        (gl::RenderbufferTexture2D::RenderbufferTexture2D):
        (gl::RenderbufferTexture2D::~RenderbufferTexture2D):
        (gl::RenderbufferTexture2D::addProxyRef):
        (gl::RenderbufferTexture2D::releaseProxy):
        (gl::RenderbufferTexture2D::getRenderTarget):
        (gl::RenderbufferTexture2D::getDepthStencil):
        (gl::RenderbufferTexture2D::getWidth):
        (gl::RenderbufferTexture2D::getHeight):
        (gl::RenderbufferTexture2D::getInternalFormat):
        (gl::RenderbufferTexture2D::getD3DFormat):
        (gl::RenderbufferTexture2D::getSamples):
        (gl::RenderbufferTexture2D::getSerial):
        (gl::RenderbufferTextureCubeMap::RenderbufferTextureCubeMap):
        (gl::RenderbufferTextureCubeMap::~RenderbufferTextureCubeMap):
        (gl::RenderbufferTextureCubeMap::addProxyRef):
        (gl::RenderbufferTextureCubeMap::releaseProxy):
        (gl::RenderbufferTextureCubeMap::getRenderTarget):
        (gl::RenderbufferTextureCubeMap::getDepthStencil):
        (gl::RenderbufferTextureCubeMap::getWidth):
        (gl::RenderbufferTextureCubeMap::getHeight):
        (gl::RenderbufferTextureCubeMap::getInternalFormat):
        (gl::RenderbufferTextureCubeMap::getD3DFormat):
        (gl::RenderbufferTextureCubeMap::getSamples):
        (gl::RenderbufferTextureCubeMap::getSerial):
        (gl::DepthStencilbuffer::getDepthStencil):
        * src/libGLESv2/Renderbuffer.h:
        (gl):
        (RenderbufferTexture2D):
        (RenderbufferTextureCubeMap):
        * src/libGLESv2/Shader.cpp:
        (gl::Shader::getInfoLog):
        (gl::Shader::getSourceImpl):
        * src/libGLESv2/Shader.h:
        (Shader):
        (VertexShader):
        * src/libGLESv2/Texture.cpp:
        (gl::ConvertTextureFormatType):
        (gl::IsTextureFormatRenderable):
        (gl::GetTextureUsage):
        (gl):
        (gl::Image::createSurface):
        (gl::Image::updateSurface):
        (gl::Image::loadData):
        (gl::Image::loadAlphaData):
        (gl::Image::loadAlphaDataSSE2):
        (gl::Image::loadAlphaFloatData):
        (gl::Image::loadAlphaHalfFloatData):
        (gl::Image::loadLuminanceData):
        (gl::Image::loadLuminanceFloatData):
        (gl::Image::loadLuminanceHalfFloatData):
        (gl::Image::loadLuminanceAlphaData):
        (gl::Image::loadLuminanceAlphaFloatData):
        (gl::Image::loadLuminanceAlphaHalfFloatData):
        (gl::Image::loadRGBUByteData):
        (gl::Image::loadRGB565Data):
        (gl::Image::loadRGBFloatData):
        (gl::Image::loadRGBHalfFloatData):
        (gl::Image::loadRGBAUByteDataSSE2):
        (gl::Image::loadRGBAUByteData):
        (gl::Image::loadRGBA4444Data):
        (gl::Image::loadRGBA5551Data):
        (gl::Image::loadRGBAFloatData):
        (gl::Image::loadRGBAHalfFloatData):
        (gl::Image::loadBGRAData):
        (gl::Image::loadCompressedData):
        (gl::Image::copy):
        (gl::TextureStorage::TextureStorage):
        (gl::TextureStorage::isRenderTarget):
        (gl::TextureStorage::getUsage):
        (gl::Texture::setImage):
        (gl::Texture::setCompressedImage):
        (gl::Texture::subImage):
        (gl::Texture::subImageCompressed):
        (gl::TextureStorage2D::TextureStorage2D):
        (gl::Texture2D::getInternalFormat):
        (gl::Texture2D::getD3DFormat):
        (gl::Texture2D::copyImage):
        (gl::Texture2D::copySubImage):
        (gl::Texture2D::storage):
        (gl::Texture2D::isSamplerComplete):
        (gl::Texture2D::isCompressed):
        (gl::Texture2D::isDepth):
        (gl::Texture2D::createTexture):
        (gl::Texture2D::convertToRenderTarget):
        (gl::Texture2D::getRenderbuffer):
        (gl::Texture2D::getRenderTarget):
        (gl::Texture2D::getDepthStencil):
        (gl::TextureStorageCubeMap::TextureStorageCubeMap):
        (gl::TextureCubeMap::getWidth):
        (gl::TextureCubeMap::getHeight):
        (gl::TextureCubeMap::getInternalFormat):
        (gl::TextureCubeMap::getD3DFormat):
        (gl::TextureCubeMap::isSamplerComplete):
        (gl::TextureCubeMap::isCompressed):
        (gl::TextureCubeMap::createTexture):
        (gl::TextureCubeMap::convertToRenderTarget):
        (gl::TextureCubeMap::copyImage):
        (gl::TextureCubeMap::copySubImage):
        (gl::TextureCubeMap::storage):
        (gl::TextureCubeMap::getRenderbuffer):
        * src/libGLESv2/Texture.h:
        (Image):
        (TextureStorage):
        (Texture):
        (TextureStorage2D):
        (Texture2D):
        (TextureStorageCubeMap):
        (TextureCubeMap):
        * src/libGLESv2/VertexDataManager.cpp:
        (gl::VertexDataManager::prepareVertexData):
        * src/libGLESv2/libGLESv2.cpp:
        (checkTextureFormatType):
        (validateSubImageParams2D):
        (validateSubImageParamsCube):
        * src/libGLESv2/libGLESv2.vcproj:
        * src/libGLESv2/mathutil.h:
        (gl):
        * src/libGLESv2/utilities.cpp:
        (gl::IsDepthTexture):
        (gl):
        (gl::ComputePixelSize):
        (gl::ExtractFormat):
        (gl::ExtractType):
        (es2dx::ConvertCubeFace):
        (es2dx::ConvertRenderbufferFormat):
        (dx2es::GetStencilSize):
        (dx2es::GetDepthSize):
        (dx2es::IsDepthTextureFormat):
        (dx2es):
        (dx2es::IsStencilTextureFormat):
        (dx2es::ConvertDepthStencilFormat):
        * src/libGLESv2/utilities.h:
        (gl):
        (dx2es):

2012-07-11  Mark Rowe  <mrowe@apple.com>

        <http://webkit.org/b/91024> Build against the latest SDK when targeting older OS X versions.

        Reviewed by Dan Bernstein.

        The deployment target is already set to the version that we're targeting, and it's that setting
        which determines which functionality from the SDK is available to us.

        * Configurations/Base.xcconfig:

2012-06-22  Joshua Netterfield  <jnetterfield@rim.com>

        [BlackBerry] Sanitize GLSL code using ANGLE.

        BlackBerry port does not sanitize GLSL code with ANGLE
        https://bugs.webkit.org/show_bug.cgi?id=89583

        Reviewed by Rob Buis.

        * src/compiler/osinclude.h: Recognises QNX as POSIX

2012-03-26  Dean Jackson  <dino@apple.com>

        Update ANGLE in WebKit
        https://bugs.webkit.org/show_bug.cgi?id=81717

        Reviewed by Kenneth Russell.

        Update angleproject to r1009. Synced the source directory
        between the angle repository and WebKit. Ran the OS X Lion
        version of Bison over the glslang.l input which generates
        a slightly different output than angle provided.

        * include/EGL/eglext.h:
        * include/GLES2/gl2ext.h:
        * include/GLSLANG/ShaderLang.h:
        * src/common/RefCountObject.cpp: Renamed from Source/ThirdParty/ANGLE/src/libGLESv2/RefCountObject.cpp.
        (RefCountObject::RefCountObject):
        (RefCountObject::~RefCountObject):
        (RefCountObject::addRef):
        (RefCountObject::release):
        (RefCountObjectBindingPointer::set):
        * src/common/RefCountObject.h: Renamed from Source/ThirdParty/ANGLE/src/libGLESv2/RefCountObject.h.
        (RefCountObject):
        (RefCountObject::id):
        (RefCountObjectBindingPointer):
        (RefCountObjectBindingPointer::RefCountObjectBindingPointer):
        (RefCountObjectBindingPointer::~RefCountObjectBindingPointer):
        (RefCountObjectBindingPointer::get):
        (RefCountObjectBindingPointer::id):
        (RefCountObjectBindingPointer::operator ! ):
        (BindingPointer):
        (BindingPointer::set):
        (BindingPointer::get):
        (BindingPointer::operator -> ):
        * src/common/debug.cpp:
        (gl::output):
        * src/common/version.h:
        * src/compiler/BaseTypes.h:
        * src/compiler/Compiler.cpp:
        (TCompiler::TCompiler):
        (TCompiler::~TCompiler):
        (TCompiler::mapLongVariableNames):
        * src/compiler/ConstantUnion.h:
        (ConstantUnion::ConstantUnion):
        (ConstantUnion::operator==):
        (ConstantUnion::operator>):
        (ConstantUnion::operator<):
        * src/compiler/Intermediate.cpp:
        (TIntermConstantUnion::fold):
        * src/compiler/MapLongVariableNames.cpp:
        (LongNameMap::LongNameMap):
        (LongNameMap::~LongNameMap):
        (LongNameMap::GetInstance):
        (LongNameMap::Release):
        (LongNameMap::Find):
        (LongNameMap::Insert):
        (LongNameMap::Size):
        (MapLongVariableNames::MapLongVariableNames):
        (MapLongVariableNames::visitSymbol):
        (MapLongVariableNames::mapGlobalLongName):
        * src/compiler/MapLongVariableNames.h:
        (LongNameMap):
        (MapLongVariableNames):
        * src/compiler/OutputHLSL.cpp:
        (sh::OutputHLSL::OutputHLSL):
        (sh::OutputHLSL::header):
        (sh::OutputHLSL::visitSymbol):
        (sh::OutputHLSL::visitUnary):
        (sh::OutputHLSL::visitAggregate):
        (sh::OutputHLSL::visitLoop):
        (sh::OutputHLSL::handleExcessiveLoop):
        (sh::OutputHLSL::typeString):
        (sh::OutputHLSL::addConstructor):
        (sh::OutputHLSL::decorateUniform):
        * src/compiler/OutputHLSL.h:
        (OutputHLSL):
        * src/compiler/PoolAlloc.cpp:
        (TAllocation::checkGuardBlock):
        * src/compiler/ShHandle.h:
        (TCompiler):
        * src/compiler/SymbolTable.cpp:
        * src/compiler/SymbolTable.h:
        (TSymbolTable):
        (TSymbolTable::getOuterLevel):
        * src/compiler/VariableInfo.cpp:
        (getVariableDataType):
        * src/compiler/glslang.l:
        * src/compiler/glslang.y:
        * src/compiler/glslang_lex.cpp:
        (yy_buffer_state):
        (yyguts_t):
        (input):
        (yyensure_buffer_stack):
        (yy_scan_bytes):
        (yyget_leng):
        * src/compiler/glslang_tab.cpp:
        * src/compiler/osinclude.h:
        * src/compiler/preprocessor/cpp.c:
        * src/compiler/preprocessor/memory.c:
        * src/compiler/preprocessor/new/Context.cpp: Added.
        (isMacroNameReserved):
        (pp):
        (pp::Context::Context):
        (pp::Context::~Context):
        (pp::Context::init):
        (pp::Context::process):
        (pp::Context::defineMacro):
        (pp::Context::undefineMacro):
        (pp::Context::isMacroDefined):
        (pp::Context::reset):
        (pp::Context::defineBuiltInMacro):
        * src/compiler/preprocessor/new/Context.h: Added.
        (pp):
        (Context):
        (pp::Context::lexer):
        (pp::Context::output):
        * src/compiler/preprocessor/new/Input.cpp: Added.
        (pp):
        (pp::Input::Input):
        (pp::Input::eof):
        (pp::Input::read):
        (pp::Input::getChar):
        (pp::Input::peekChar):
        (pp::Input::switchToNextString):
        (pp::Input::isStringEmpty):
        (pp::Input::stringLength):
        * src/compiler/preprocessor/new/Input.h: Added.
        (pp):
        (Input):
        (pp::Input::error):
        (pp::Input::stringIndex):
        * src/compiler/preprocessor/new/Macro.cpp: Added.
        (pp):
        (pp::Macro::Macro):
        (pp::Macro::~Macro):
        * src/compiler/preprocessor/new/Macro.h: Added.
        (pp):
        (Macro):
        (pp::Macro::type):
        (pp::Macro::identifier):
        (pp::Macro::parameters):
        (pp::Macro::replacements):
        * src/compiler/preprocessor/new/Preprocessor.cpp: Added.
        (pp):
        (pp::Preprocessor::Preprocessor):
        (pp::Preprocessor::~Preprocessor):
        (pp::Preprocessor::init):
        (pp::Preprocessor::process):
        (pp::Preprocessor::reset):
        * src/compiler/preprocessor/new/Preprocessor.h: Added.
        (pp):
        (Preprocessor):
        (pp::Preprocessor::begin):
        (pp::Preprocessor::end):
        * src/compiler/preprocessor/new/Token.cpp: Added.
        (pp):
        (pp::Token::encodeLocation):
        (pp::Token::decodeLocation):
        (pp::Token::Token):
        (pp::Token::~Token):
        (pp::operator<<):
        * src/compiler/preprocessor/new/Token.h: Added.
        (pp):
        (Token):
        (pp::Token::location):
        (pp::Token::type):
        (pp::Token::value):
        * src/compiler/preprocessor/new/generate_parser.sh: Added.
        * src/compiler/preprocessor/new/pp.l: Added.
        * src/compiler/preprocessor/new/pp.y: Added.
        * src/compiler/preprocessor/new/pp_lex.cpp: Added.
        (yy_buffer_state):
        (yy_trans_info):
        (yyguts_t):
        (yy_get_previous_state):
        (yy_try_NUL_trans):
        (input):
        (pprestart):
        (pp_switch_to_buffer):
        (pp_load_buffer_state):
        (pp_create_buffer):
        (pp_delete_buffer):
        (pp_init_buffer):
        (pp_flush_buffer):
        (pppush_buffer_state):
        (pppop_buffer_state):
        (ppensure_buffer_stack):
        (pp_scan_buffer):
        (pp_scan_string):
        (pp_scan_bytes):
        (yy_push_state):
        (yy_pop_state):
        (yy_top_state):
        (yy_fatal_error):
        (ppget_extra):
        (ppget_lineno):
        (ppget_column):
        (ppget_in):
        (ppget_out):
        (ppget_leng):
        (ppget_text):
        (ppset_extra):
        (ppset_lineno):
        (ppset_column):
        (ppset_in):
        (ppset_out):
        (ppget_debug):
        (ppset_debug):
        (ppget_lval):
        (ppset_lval):
        (ppget_lloc):
        (ppset_lloc):
        (pplex_init):
        (pplex_init_extra):
        (yy_init_globals):
        (pplex_destroy):
        (yy_flex_strncpy):
        (yy_flex_strlen):
        (ppalloc):
        (pprealloc):
        (ppfree):
        (extractMacroName):
        (pp):
        (pp::Context::readInput):
        (pp::Context::initLexer):
        (pp::Context::destroyLexer):
        * src/compiler/preprocessor/new/pp_tab.cpp: Added.
        (YYLTYPE):
        (yysyntax_error):
        (yyerror):
        (pushConditionalBlock):
        (popConditionalBlock):
        (pp::Context::parse):
        * src/compiler/preprocessor/new/pp_tab.h: Added.
        (YYLTYPE):
        * src/compiler/preprocessor/new/stl_utils.h: Added.
        (pp):
        (Delete):
        (pp::Delete::operator()):
        (DeleteSecond):
        (pp::DeleteSecond::operator()):
        * src/compiler/preprocessor/new/token_type.h: Added.
        * src/compiler/preprocessor/scanner.c:
        (yylex_CPP):
        * src/compiler/preprocessor/symbols.c:
        * src/compiler/preprocessor/tokens.c:
        * src/libEGL/Config.cpp:
        (egl::ConfigSet::getConfigs):
        * src/libEGL/Display.cpp:
        (egl::Display::initialize):
        (egl::Display::terminate):
        (egl::Display::restoreLostDevice):
        (egl::Display::sync):
        (egl):
        (egl::Display::allocateEventQuery):
        (egl::Display::freeEventQuery):
        (egl::Display::getFloat32TextureSupport):
        (egl::Display::getFloat16TextureSupport):
        (egl::Display::getEventQuerySupport):
        (egl::Display::initExtensionString):
        (egl::Display::shareHandleSupported):
        (egl::Display::getOcclusionQuerySupport):
        (egl::Display::getInstancingSupport):
        * src/libEGL/Display.h:
        (Display):
        (egl::Display::isD3d9ExDevice):
        * src/libEGL/Surface.cpp:
        (egl::Surface::resetSwapChain):
        * src/libEGL/libEGL.cpp:
        * src/libEGL/libEGL.vcproj:
        * src/libGLESv2/Blit.cpp:
        (gl::Blit::setCommonBlitState):
        * src/libGLESv2/Buffer.h:
        (Buffer):
        * src/libGLESv2/Context.cpp:
        (gl::Context::Context):
        (gl::Context::~Context):
        (gl::Context::makeCurrent):
        (gl::Context::getActiveQuery):
        (gl):
        (gl::Context::createFence):
        (gl::Context::createQuery):
        (gl::Context::deleteQuery):
        (gl::Context::beginQuery):
        (gl::Context::endQuery):
        (gl::Context::getQuery):
        (gl::Context::applyVertexBuffer):
        (gl::Context::applyIndexBuffer):
        (gl::Context::readPixels):
        (gl::Context::clear):
        (gl::Context::drawArrays):
        (gl::Context::drawElements):
        (gl::Context::sync):
        (gl::Context::drawLineLoop):
        (gl::Context::supportsOcclusionQueries):
        (gl::Context::supportsInstancing):
        (gl::Context::setVertexAttribDivisor):
        (gl::Context::initExtensionString):
        (gl::VertexDeclarationCache::applyDeclaration):
        (gl::VertexDeclarationCache::markStateDirty):
        * src/libGLESv2/Context.h:
        (gl):
        (gl::VertexAttribute::VertexAttribute):
        (State):
        (VertexDeclarationCache):
        (Context):
        * src/libGLESv2/Fence.cpp:
        (gl::Fence::Fence):
        (gl::Fence::~Fence):
        (gl::Fence::setFence):
        * src/libGLESv2/Fence.h:
        (egl):
        (Fence):
        * src/libGLESv2/Framebuffer.cpp:
        (gl::Framebuffer::lookupRenderbuffer):
        (gl::Framebuffer::detachTexture):
        (gl::Framebuffer::completeness):
        * src/libGLESv2/Framebuffer.h:
        * src/libGLESv2/IndexDataManager.cpp:
        (gl::IndexDataManager::IndexDataManager):
        (gl::IndexDataManager::~IndexDataManager):
        (gl::computeRange):
        (gl::IndexDataManager::prepareIndexData):
        (gl::IndexDataManager::getCountingIndices):
        (gl):
        * src/libGLESv2/IndexDataManager.h:
        (IndexDataManager):
        * src/libGLESv2/Program.cpp:
        (gl::Program::getUniformLocation):
        (gl::Program::setUniform1fv):
        (gl::Program::setUniform2fv):
        (gl::Program::setUniform3fv):
        (gl::Program::setUniform4fv):
        (gl::Program::setUniform1iv):
        (gl::Program::setUniform2iv):
        (gl::Program::setUniform3iv):
        (gl::Program::setUniform4iv):
        (gl::Program::packVaryings):
        (gl::Program::linkVaryings):
        (gl::Program::defineUniform):
        (gl::Program::createUniform):
        (gl::Program::applyUniformnbv):
        (gl::Program::applyUniform1iv):
        (gl::Program::applyUniform2iv):
        (gl::Program::applyUniform3iv):
        (gl::Program::applyUniform4iv):
        (gl::Program::getInfoLog):
        * src/libGLESv2/Program.h:
        (Program):
        * src/libGLESv2/Query.cpp: Added.
        (gl):
        (gl::Query::Query):
        (gl::Query::~Query):
        (gl::Query::begin):
        (gl::Query::end):
        (gl::Query::getResult):
        (gl::Query::isResultAvailable):
        (gl::Query::getType):
        (gl::Query::testQuery):
        * src/libGLESv2/Query.h: Added.
        (gl):
        (Query):
        * src/libGLESv2/Renderbuffer.cpp:
        (gl):
        (gl::RenderbufferInterface::addProxyRef):
        (gl::RenderbufferInterface::releaseProxy):
        (gl::RenderbufferTexture::RenderbufferTexture):
        (gl::RenderbufferTexture::~RenderbufferTexture):
        (gl::RenderbufferTexture::addProxyRef):
        (gl::RenderbufferTexture::releaseProxy):
        (gl::Renderbuffer::addRef):
        (gl::Renderbuffer::release):
        * src/libGLESv2/Renderbuffer.h:
        (gl):
        (RenderbufferInterface):
        (RenderbufferTexture):
        (Renderbuffer):
        * src/libGLESv2/Shader.cpp:
        (gl::Shader::Shader):
        (gl::Shader::getInfoLog):
        (gl::Shader::getSourceImpl):
        (gl):
        (gl::Shader::initializeCompiler):
        (gl::Shader::parseVaryings):
        (gl::Shader::uncompile):
        (gl::Shader::compileToHLSL):
        (gl::VertexShader::uncompile):
        (gl::VertexShader::compile):
        (gl::VertexShader::parseAttributes):
        (gl::FragmentShader::compile):
        * src/libGLESv2/Shader.h:
        (Shader):
        (VertexShader):
        * src/libGLESv2/Texture.cpp:
        (gl::Texture2D::Texture2D):
        (gl::Texture2D::~Texture2D):
        (gl):
        (gl::Texture2D::addProxyRef):
        (gl::Texture2D::releaseProxy):
        (gl::Texture2D::getRenderbuffer):
        (gl::TextureCubeMap::TextureCubeMap):
        (gl::TextureCubeMap::~TextureCubeMap):
        (gl::TextureCubeMap::addProxyRef):
        (gl::TextureCubeMap::releaseProxy):
        (gl::TextureCubeMap::isSamplerComplete):
        (gl::TextureCubeMap::convertToRenderTarget):
        (gl::TextureCubeMap::getRenderbuffer):
        * src/libGLESv2/Texture.h:
        (Texture):
        (Texture2D):
        (TextureCubeMap):
        * src/libGLESv2/VertexDataManager.cpp:
        (gl::VertexDataManager::writeAttributeData):
        (gl::VertexDataManager::prepareVertexData):
        (gl::VertexDataManager::spaceRequired):
        (gl):
        * src/libGLESv2/VertexDataManager.h:
        (TranslatedAttribute):
        (VertexDataManager):
        * src/libGLESv2/libGLESv2.cpp:
        * src/libGLESv2/libGLESv2.def:
        * src/libGLESv2/libGLESv2.vcproj:
        * src/libGLESv2/utilities.cpp:
        (gl::IsInternalTextureTarget):
        * src/libGLESv2/utilities.h:
        (gl):

2012-03-09  Ashod Nakashian  <ashodnakashian@yahoo.com>

        Bash scripts should support LF endings only
        https://bugs.webkit.org/show_bug.cgi?id=79509

        Reviewed by David Kilzer.

        * src/compiler/generate_parser.sh: Added property svn:eol-style.

2012-02-21  Sam Weinig  <sam@webkit.org>

        Attempt to fix the Snow Leopard build.

        * Configurations/Base.xcconfig:

2012-02-21  Sam Weinig  <sam@webkit.org>

        Use libc++ when building with Clang on Mac
        https://bugs.webkit.org/show_bug.cgi?id=78981

        Reviewed by Dan Bernstein.

        * Configurations/Base.xcconfig:

2012-01-07  Chris Marrin  <cmarrin@apple.com>

        Fixed a warning in GTK build of ANGLE

        Unreviewed.

        * src/compiler/DetectRecursion.cpp:
        (DetectRecursion::~DetectRecursion):

2012-01-06  Mark Rowe  <mrowe@apple.com>

        Regenerate a few files with a more appropriate version of bison.

        Rubber-stamped by Dan Bernstein.

        * src/compiler/glslang.l: Tweak the input so that it generates code that compiles without warnings.
        * src/compiler/glslang_lex.cpp:
        * src/compiler/glslang_tab.cpp:
        * src/compiler/glslang_tab.h:

2012-01-06  Chris Marrin  <cmarrin@apple.com>

        Update ANGLE in WebKit tree
        https://bugs.webkit.org/show_bug.cgi?id=75753

        Reviewed by Simon Fraser.

        Updated ANGLE to r939. Fixed a compiler error (missing case in switch statement)
        and added 5 new files to xcodeproj. Other than that it is a straight copy of
        the files from the ANGLE repository.

        * ANGLE.xcodeproj/project.pbxproj:
        * include/EGL/eglext.h:
        * include/EGL/eglplatform.h:
        * include/GLES2/gl2ext.h:
        * include/GLSLANG/ShaderLang.h:
        * src/common/debug.cpp:
        (gl::output):
        (gl::trace):
        (gl::perfActive):
        (gl::ScopedPerfEventHelper::ScopedPerfEventHelper):
        (gl::ScopedPerfEventHelper::~ScopedPerfEventHelper):
        * src/common/version.h:
        * src/compiler/BaseTypes.h:
        (getBasicString):
        * src/compiler/BuiltInFunctionEmulator.cpp: Added.
        (BuiltInFunctionEmulator::BuiltInFunctionEmulator):
        (BuiltInFunctionEmulator::SetFunctionCalled):
        (BuiltInFunctionEmulator::OutputEmulatedFunctionDefinition):
        (BuiltInFunctionEmulator::IdentifyFunction):
        (BuiltInFunctionEmulator::MarkBuiltInFunctionsForEmulation):
        (BuiltInFunctionEmulator::Cleanup):
        (BuiltInFunctionEmulator::GetEmulatedFunctionName):
        * src/compiler/BuiltInFunctionEmulator.h: Added.
        * src/compiler/Compiler.cpp:
        (TCompiler::TCompiler):
        (TCompiler::compile):
        (TCompiler::clearResults):
        (TCompiler::detectRecursion):
        (TCompiler::getMappedNameMaxLength):
        (TCompiler::getBuiltInFunctionEmulator):
        * src/compiler/DetectRecursion.cpp: Added.
        (DetectRecursion::FunctionNode::FunctionNode):
        (DetectRecursion::FunctionNode::getName):
        (DetectRecursion::FunctionNode::addCallee):
        (DetectRecursion::FunctionNode::detectRecursion):
        (DetectRecursion::DetectRecursion):
        (DetectRecursion::~DetectRecursion):
        (DetectRecursion::visitAggregate):
        (DetectRecursion::detectRecursion):
        (DetectRecursion::findFunctionByName):
        * src/compiler/DetectRecursion.h: Added.
        * src/compiler/ExtensionBehavior.h:
        * src/compiler/ForLoopUnroll.cpp:
        (ForLoopUnroll::MarkForLoopsWithIntegerIndicesForUnrolling):
        * src/compiler/ForLoopUnroll.h:
        * src/compiler/Initialize.cpp:
        (BuiltInFunctionsCommon):
        (BuiltInFunctionsVertex):
        (BuiltInFunctionsFragment):
        (TBuiltIns::initialize):
        (IdentifyBuiltIns):
        (InitExtensionBehavior):
        * src/compiler/MapLongVariableNames.cpp:
        (MapLongVariableNames::MapLongVariableNames):
        (MapLongVariableNames::visitSymbol):
        (MapLongVariableNames::mapVaryingLongName):
        * src/compiler/MapLongVariableNames.h:
        * src/compiler/OutputGLSLBase.cpp:
        (TOutputGLSLBase::visitUnary):
        (TOutputGLSLBase::visitAggregate):
        * src/compiler/OutputHLSL.cpp:
        (sh::OutputHLSL::OutputHLSL):
        (sh::OutputHLSL::header):
        (sh::OutputHLSL::visitSymbol):
        (sh::OutputHLSL::visitAggregate):
        (sh::OutputHLSL::visitSelection):
        (sh::OutputHLSL::visitLoop):
        (sh::OutputHLSL::handleExcessiveLoop):
        (sh::OutputHLSL::addConstructor):
        (sh::OutputHLSL::decorate):
        (sh::OutputHLSL::decorateUniform):
        * src/compiler/OutputHLSL.h:
        * src/compiler/ParseHelper.cpp:
        (TParseContext::recover):
        (TParseContext::reservedErrorCheck):
        (TParseContext::constructorErrorCheck):
        (TParseContext::extensionErrorCheck):
        (TParseContext::supportsExtension):
        (TParseContext::enterStructDeclaration):
        (TParseContext::exitStructDeclaration):
        (TParseContext::structNestingErrorCheck):
        * src/compiler/ParseHelper.h:
        (TParseContext::TParseContext):
        * src/compiler/PoolAlloc.h:
        (pool_allocator::pool_allocator):
        (pool_allocator::operator=):
        (pool_allocator::setAllocator):
        (pool_allocator::getAllocator):
        * src/compiler/ShHandle.h:
        * src/compiler/ShaderLang.cpp:
        (checkActiveUniformAndAttribMaxLengths):
        (checkMappedNameMaxLength):
        (getVariableInfo):
        (ShInitBuiltInResources):
        (ShGetInfo):
        * src/compiler/SymbolTable.cpp:
        (TType::computeDeepestStructNesting):
        * src/compiler/TranslatorESSL.cpp:
        (TranslatorESSL::translate):
        (TranslatorESSL::writeExtensionBehavior):
        * src/compiler/TranslatorGLSL.cpp:
        (TranslatorGLSL::translate):
        * src/compiler/Types.h:
        (TType::TType):
        (TType::copyType):
        (TType::setStruct):
        (TType::getDeepestStructNesting):
        * src/compiler/UnfoldSelect.cpp:
        (sh::UnfoldSelect::traverse):
        (sh::UnfoldSelect::visitSelection):
        (sh::UnfoldSelect::visitLoop):
        (sh::UnfoldSelect::getNextTemporaryIndex):
        * src/compiler/UnfoldSelect.h:
        * src/compiler/ValidateLimitations.cpp:
        * src/compiler/ValidateLimitations.h:
        * src/compiler/VariableInfo.cpp:
        (getVariableDataType):
        * src/compiler/generate_glslang_lexer.sh: Removed.
        * src/compiler/generate_glslang_parser.sh: Removed.
        * src/compiler/generate_parser.sh: Added.
        * src/compiler/glslang.l:
        * src/compiler/glslang.y:
        * src/compiler/glslang_lex.cpp:
        (yy_get_previous_state):
        (yy_try_NUL_trans):
        * src/compiler/glslang_tab.cpp:
        * src/compiler/glslang_tab.h:
        * src/compiler/intermOut.cpp:
        (TOutputTraverser::visitAggregate):
        * src/compiler/intermediate.h:
        (TIntermUnary::TIntermUnary):
        (TIntermUnary::setUseEmulatedFunction):
        (TIntermUnary::getUseEmulatedFunction):
        (TIntermAggregate::TIntermAggregate):
        (TIntermAggregate::setUseEmulatedFunction):
        (TIntermAggregate::getUseEmulatedFunction):
        * src/compiler/osinclude.h:
        * src/compiler/ossource_posix.cpp:
        (OS_AllocTLSIndex):
        (OS_SetTLSValue):
        (OS_FreeTLSIndex):
        * src/compiler/preprocessor/atom.c:
        (GrowAtomTable):
        * src/compiler/preprocessor/length_limits.h: Added.
        * src/compiler/preprocessor/scanner.h:
        * src/libEGL/Display.cpp:
        (egl::Display::getDisplay):
        (egl::Display::Display):
        (egl::Display::~Display):
        (egl::Display::initialize):
        (egl::Display::terminate):
        (egl::Display::startScene):
        (egl::Display::endScene):
        (egl::Display::createDevice):
        (egl::Display::initializeDevice):
        (egl::Display::resetDevice):
        (egl::Display::createWindowSurface):
        (egl::Display::createOffscreenSurface):
        (egl::Display::createContext):
        (egl::Display::restoreLostDevice):
        (egl::Display::notifyDeviceLost):
        (egl::Display::isDeviceLost):
        (egl::Display::testDeviceLost):
        (egl::Display::testDeviceResettable):
        (egl::Display::getDXT1TextureSupport):
        (egl::Display::getDXT3TextureSupport):
        (egl::Display::getDXT5TextureSupport):
        (egl::Display::getFloat32TextureSupport):
        (egl::Display::getFloat16TextureSupport):
        (egl::Display::getTexturePool):
        (egl::Display::initExtensionString):
        * src/libEGL/Display.h:
        * src/libEGL/Surface.cpp:
        (egl::Surface::Surface):
        (egl::Surface::initialize):
        (egl::Surface::resetSwapChain):
        (egl::Surface::subclassWindow):
        (egl::Surface::unsubclassWindow):
        (egl::Surface::swap):
        (egl::Surface::postSubBuffer):
        (egl::Surface::isPostSubBufferSupported):
        * src/libEGL/Surface.h:
        * src/libEGL/libEGL.cpp:
        * src/libEGL/libEGL.rc:
        * src/libEGL/libEGL.vcproj:
        * src/libGLESv2/Buffer.cpp:
        (gl::Buffer::bufferSubData):
        * src/libGLESv2/Context.cpp:
        (gl::Context::Context):
        (gl::Context::makeCurrent):
        (gl::Context::markAllStateDirty):
        (gl::Context::markContextLost):
        (gl::Context::isContextLost):
        (gl::Context::setPackReverseRowOrder):
        (gl::Context::getPackReverseRowOrder):
        (gl::Context::deleteProgram):
        (gl::Context::getDrawFramebuffer):
        (gl::Context::bindDrawFramebuffer):
        (gl::Context::useProgram):
        (gl::Context::setFramebufferZero):
        (gl::Context::getCurrentProgram):
        (gl::Context::getBooleanv):
        (gl::Context::getIntegerv):
        (gl::Context::getQueryParameterInfo):
        (gl::Context::applyRenderTarget):
        (gl::Context::applyState):
        (gl::Context::applyVertexBuffer):
        (gl::Context::applyIndexBuffer):
        (gl::Context::applyShaders):
        (gl::Context::applyTextures):
        (gl::Context::readPixels):
        (gl::Context::clear):
        (gl::Context::drawArrays):
        (gl::Context::drawElements):
        (gl::Context::sync):
        (gl::Context::drawClosingLine):
        (gl::Context::getResetStatus):
        (gl::Context::isResetNotificationEnabled):
        (gl::Context::supportsDXT1Textures):
        (gl::Context::supportsDXT3Textures):
        (gl::Context::supportsDXT5Textures):
        (gl::Context::supportsFloat32Textures):
        (gl::Context::supportsFloat32LinearFilter):
        (gl::Context::supportsFloat32RenderableTextures):
        (gl::Context::supportsFloat16Textures):
        (gl::Context::supportsFloat16LinearFilter):
        (gl::Context::supportsFloat16RenderableTextures):
        (gl::Context::initExtensionString):
        (gl::Context::initRendererString):
        (gl::Context::getRendererString):
        (gl::Context::blitFramebuffer):
        (gl::VertexDeclarationCache::applyDeclaration):
        (gl::VertexDeclarationCache::markStateDirty):
        * src/libGLESv2/Context.h:
        * src/libGLESv2/Fence.cpp:
        (gl::Fence::testFence):
        (gl::Fence::getFenceiv):
        * src/libGLESv2/Framebuffer.cpp:
        (gl::Framebuffer::setColorbuffer):
        (gl::Framebuffer::setDepthbuffer):
        (gl::Framebuffer::setStencilbuffer):
        (gl::Framebuffer::getColorbuffer):
        (gl::Framebuffer::getDepthbuffer):
        (gl::Framebuffer::getStencilbuffer):
        (gl::Framebuffer::hasStencil):
        (gl::Framebuffer::completeness):
        (gl::DefaultFramebuffer::DefaultFramebuffer):
        * src/libGLESv2/Framebuffer.h:
        * src/libGLESv2/IndexDataManager.cpp:
        (gl::IndexDataManager::prepareIndexData):
        (gl::IndexBuffer::IndexBuffer):
        (gl::IndexBuffer::getSerial):
        (gl::IndexBuffer::issueSerial):
        (gl::StreamingIndexBuffer::reserveSpace):
        (gl::StaticIndexBuffer::reserveSpace):
        (gl::StaticIndexBuffer::lookupRange):
        (gl::StaticIndexBuffer::addRange):
        * src/libGLESv2/IndexDataManager.h:
        (gl::StaticIndexBuffer::IndexRange::operator<):
        * src/libGLESv2/Program.cpp:
        (gl::Uniform::Uniform):
        (gl::Uniform::isArray):
        (gl::UniformLocation::UniformLocation):
        (gl::Program::Program):
        (gl::Program::detachShader):
        (gl::Program::getUsedSamplerRange):
        (gl::Program::getSamplerMapping):
        (gl::Program::getUniformLocation):
        (gl::Program::setUniform1fv):
        (gl::Program::setUniform2fv):
        (gl::Program::setUniform3fv):
        (gl::transposeMatrix):
        (gl::Program::setUniformMatrix2fv):
        (gl::Program::setUniformMatrix3fv):
        (gl::Program::setUniformMatrix4fv):
        (gl::Program::getUniformfv):
        (gl::Program::getUniformiv):
        (gl::Program::applyUniforms):
        (gl::Program::compileToBinary):
        (gl::Program::linkVaryings):
        (gl::Program::link):
        (gl::Program::defineUniform):
        (gl::Program::createUniform):
        (gl::Program::decorateAttribute):
        (gl::Program::undecorateUniform):
        (gl::Program::applyUniformnbv):
        (gl::Program::applyUniformnfv):
        (gl::Program::applyUniform1iv):
        (gl::Program::applyUniform2iv):
        (gl::Program::applyUniform3iv):
        (gl::Program::applyUniform4iv):
        (gl::Program::applyUniformniv):
        (gl::Program::appendToInfoLogSanitized):
        (gl::Program::unlink):
        (gl::Program::getActiveUniform):
        (gl::Program::getActiveUniformCount):
        (gl::Program::getActiveUniformMaxLength):
        (gl::Program::validateSamplers):
        (gl::Program::initializeConstantHandles):
        (gl::Program::getDxCoordLocation):
        * src/libGLESv2/Program.h:
        * src/libGLESv2/Renderbuffer.cpp:
        (gl::RenderbufferInterface::RenderbufferInterface):
        (gl::RenderbufferInterface::getRedSize):
        (gl::RenderbufferInterface::getGreenSize):
        (gl::RenderbufferInterface::getBlueSize):
        (gl::RenderbufferInterface::getAlphaSize):
        (gl::RenderbufferInterface::getDepthSize):
        (gl::RenderbufferInterface::getStencilSize):
        (gl::RenderbufferTexture::RenderbufferTexture):
        (gl::RenderbufferTexture::~RenderbufferTexture):
        (gl::RenderbufferTexture::getRenderTarget):
        (gl::RenderbufferTexture::getDepthStencil):
        (gl::RenderbufferTexture::getWidth):
        (gl::RenderbufferTexture::getHeight):
        (gl::RenderbufferTexture::getInternalFormat):
        (gl::RenderbufferTexture::getD3DFormat):
        (gl::RenderbufferTexture::getSamples):
        (gl::RenderbufferTexture::getSerial):
        (gl::Renderbuffer::Renderbuffer):
        (gl::Renderbuffer::~Renderbuffer):
        (gl::Renderbuffer::getRenderTarget):
        (gl::Renderbuffer::getDepthStencil):
        (gl::Renderbuffer::getWidth):
        (gl::Renderbuffer::getHeight):
        (gl::Renderbuffer::getInternalFormat):
        (gl::Renderbuffer::getD3DFormat):
        (gl::Renderbuffer::getRedSize):
        (gl::Renderbuffer::getGreenSize):
        (gl::Renderbuffer::getBlueSize):
        (gl::Renderbuffer::getAlphaSize):
        (gl::Renderbuffer::getDepthSize):
        (gl::Renderbuffer::getStencilSize):
        (gl::Renderbuffer::getSamples):
        (gl::Renderbuffer::getSerial):
        (gl::Renderbuffer::setStorage):
        (gl::RenderbufferStorage::getD3DFormat):
        (gl::RenderbufferStorage::issueCubeSerials):
        (gl::Colorbuffer::Colorbuffer):
        (gl::Colorbuffer::getRenderTarget):
        (gl::Depthbuffer::Depthbuffer):
        (gl::Stencilbuffer::Stencilbuffer):
        * src/libGLESv2/Renderbuffer.h:
        (gl::RenderbufferInterface::~RenderbufferInterface):
        * src/libGLESv2/Shader.cpp:
        (gl::Shader::getTranslatedSourceLength):
        (gl::Shader::getSourceImpl):
        (gl::Shader::getSource):
        (gl::Shader::getTranslatedSource):
        * src/libGLESv2/Shader.h:
        * src/libGLESv2/Texture.cpp:
        (gl::ConvertTextureFormatType):
        (gl::IsTextureFormatRenderable):
        (gl::Image::Image):
        (gl::Image::~Image):
        (gl::Image::redefine):
        (gl::Image::createSurface):
        (gl::Image::lock):
        (gl::Image::unlock):
        (gl::Image::isRenderableFormat):
        (gl::Image::getD3DFormat):
        (gl::Image::getSurface):
        (gl::Image::setManagedSurface):
        (gl::Image::updateSurface):
        (gl::Image::loadData):
        (gl::Image::loadAlphaData):
        (gl::Image::loadAlphaFloatData):
        (gl::Image::loadAlphaHalfFloatData):
        (gl::Image::loadLuminanceData):
        (gl::Image::loadLuminanceFloatData):
        (gl::Image::loadLuminanceHalfFloatData):
        (gl::Image::loadLuminanceAlphaData):
        (gl::Image::loadLuminanceAlphaFloatData):
        (gl::Image::loadLuminanceAlphaHalfFloatData):
        (gl::Image::loadRGBUByteData):
        (gl::Image::loadRGB565Data):
        (gl::Image::loadRGBFloatData):
        (gl::Image::loadRGBHalfFloatData):
        (gl::Image::loadRGBAUByteDataSSE2):
        (gl::Image::loadRGBAUByteData):
        (gl::Image::loadRGBA4444Data):
        (gl::Image::loadRGBA5551Data):
        (gl::Image::loadRGBAFloatData):
        (gl::Image::loadRGBAHalfFloatData):
        (gl::Image::loadBGRAData):
        (gl::Image::loadCompressedData):
        (gl::FlipCopyDXT1BlockFull):
        (gl::FlipCopyDXT1BlockHalf):
        (gl::FlipCopyDXT3BlockFull):
        (gl::FlipCopyDXT3BlockHalf):
        (gl::FlipCopyDXT5BlockFull):
        (gl::FlipCopyDXT5BlockHalf):
        (gl::Image::loadDXT1Data):
        (gl::Image::loadDXT3Data):
        (gl::Image::loadDXT5Data):
        (gl::Image::copy):
        (gl::TextureStorage::TextureStorage):
        (gl::TextureStorage::~TextureStorage):
        (gl::TextureStorage::isRenderTarget):
        (gl::TextureStorage::isManaged):
        (gl::TextureStorage::getPool):
        (gl::TextureStorage::getTextureSerial):
        (gl::TextureStorage::issueTextureSerial):
        (gl::Texture::Texture):
        (gl::Texture::~Texture):
        (gl::Texture::setMinFilter):
        (gl::Texture::setMagFilter):
        (gl::Texture::setWrapS):
        (gl::Texture::setWrapT):
        (gl::Texture::setUsage):
        (gl::Texture::getMinFilter):
        (gl::Texture::getMagFilter):
        (gl::Texture::getWrapS):
        (gl::Texture::getWrapT):
        (gl::Texture::getUsage):
        (gl::Texture::setImage):
        (gl::Texture::setCompressedImage):
        (gl::Texture::subImage):
        (gl::Texture::subImageCompressed):
        (gl::Texture::getTexture):
        (gl::Texture::hasDirtyParameters):
        (gl::Texture::hasDirtyImages):
        (gl::Texture::resetDirty):
        (gl::Texture::getTextureSerial):
        (gl::Texture::getRenderTargetSerial):
        (gl::Texture::isImmutable):
        (gl::Texture::creationLevels):
        (gl::Texture::getBlitter):
        (gl::Texture::copyToRenderTarget):
        (gl::TextureStorage2D::TextureStorage2D):
        (gl::TextureStorage2D::~TextureStorage2D):
        (gl::TextureStorage2D::getSurfaceLevel):
        (gl::TextureStorage2D::getBaseTexture):
        (gl::TextureStorage2D::getRenderTargetSerial):
        (gl::Texture2D::Texture2D):
        (gl::Texture2D::~Texture2D):
        (gl::Texture2D::getWidth):
        (gl::Texture2D::getHeight):
        (gl::Texture2D::getInternalFormat):
        (gl::Texture2D::getType):
        (gl::Texture2D::redefineImage):
        (gl::Texture2D::setImage):
        (gl::Texture2D::bindTexImage):
        (gl::Texture2D::releaseTexImage):
        (gl::Texture2D::setCompressedImage):
        (gl::Texture2D::commitRect):
        (gl::Texture2D::copyImage):
        (gl::Texture2D::copySubImage):
        (gl::Texture2D::storage):
        (gl::Texture2D::isSamplerComplete):
        (gl::Texture2D::isMipmapComplete):
        (gl::Texture2D::getBaseTexture):
        (gl::Texture2D::createTexture):
        (gl::Texture2D::updateTexture):
        (gl::Texture2D::convertToRenderTarget):
        (gl::Texture2D::generateMipmaps):
        (gl::Texture2D::getRenderbuffer):
        (gl::Texture2D::getRenderTarget):
        (gl::Texture2D::getStorage):
        (gl::TextureStorageCubeMap::TextureStorageCubeMap):
        (gl::TextureStorageCubeMap::~TextureStorageCubeMap):
        (gl::TextureStorageCubeMap::getCubeMapSurface):
        (gl::TextureStorageCubeMap::getBaseTexture):
        (gl::TextureStorageCubeMap::getRenderTargetSerial):
        (gl::TextureCubeMap::TextureCubeMap):
        (gl::TextureCubeMap::~TextureCubeMap):
        (gl::TextureCubeMap::getWidth):
        (gl::TextureCubeMap::getHeight):
        (gl::TextureCubeMap::getInternalFormat):
        (gl::TextureCubeMap::getType):
        (gl::TextureCubeMap::setCompressedImage):
        (gl::TextureCubeMap::commitRect):
        (gl::TextureCubeMap::subImage):
        (gl::TextureCubeMap::subImageCompressed):
        (gl::TextureCubeMap::isSamplerComplete):
        (gl::TextureCubeMap::isCubeComplete):
        (gl::TextureCubeMap::isMipmapCubeComplete):
        (gl::TextureCubeMap::getBaseTexture):
        (gl::TextureCubeMap::createTexture):
        (gl::TextureCubeMap::updateTexture):
        (gl::TextureCubeMap::convertToRenderTarget):
        (gl::TextureCubeMap::setImage):
        (gl::TextureCubeMap::redefineImage):
        (gl::TextureCubeMap::copyImage):
        (gl::TextureCubeMap::copySubImage):
        (gl::TextureCubeMap::storage):
        (gl::TextureCubeMap::generateMipmaps):
        (gl::TextureCubeMap::getRenderbuffer):
        (gl::TextureCubeMap::getRenderTarget):
        (gl::TextureCubeMap::getStorage):
        * src/libGLESv2/Texture.h:
        (gl::Image::markDirty):
        (gl::Image::markClean):
        (gl::Image::getWidth):
        (gl::Image::getHeight):
        (gl::Image::getFormat):
        (gl::Image::getType):
        (gl::Image::isDirty):
        * src/libGLESv2/VertexDataManager.cpp:
        (gl::elementsInBuffer):
        (gl::VertexDataManager::VertexDataManager):
        (gl::VertexDataManager::writeAttributeData):
        (gl::VertexDataManager::prepareVertexData):
        (gl::VertexBuffer::VertexBuffer):
        (gl::VertexBuffer::getSerial):
        (gl::VertexBuffer::issueSerial):
        (gl::StreamingVertexBuffer::reserveRequiredSpace):
        (gl::StaticVertexBuffer::map):
        (gl::StaticVertexBuffer::reserveRequiredSpace):
        (gl::StaticVertexBuffer::lookupAttribute):
        * src/libGLESv2/VertexDataManager.h:
        (gl::ArrayVertexBuffer::size):
        * src/libGLESv2/geometry/IndexDataManager.cpp: Removed.
        * src/libGLESv2/geometry/IndexDataManager.h: Removed.
        * src/libGLESv2/geometry/VertexDataManager.cpp: Removed.
        * src/libGLESv2/geometry/VertexDataManager.h: Removed.
        * src/libGLESv2/geometry/vertexconversion.h: Removed.
        * src/libGLESv2/libGLESv2.cpp:
        (validateSubImageParams):
        (validReadFormatType):
        (Extension::glBindTexImage):
        * src/libGLESv2/libGLESv2.def:
        * src/libGLESv2/libGLESv2.rc:
        * src/libGLESv2/libGLESv2.vcproj:
        * src/libGLESv2/main.cpp:
        (gl::getNonLostContext):
        (gl::checkDeviceLost):
        * src/libGLESv2/main.h:
        * src/libGLESv2/utilities.cpp:
        (gl::UniformExternalComponentCount):
        (gl::UniformInternalComponentCount):
        (gl::UniformComponentSize):
        (gl::UniformInternalSize):
        (gl::UniformExternalSize):
        (gl::ComputeCompressedSize):
        (gl::IsCompressed):
        (gl::ExtractFormat):
        (gl::ExtractType):
        (dx2es::IsFloat32Format):
        (dx2es::IsFloat16Format):
        * src/libGLESv2/utilities.h:
        (isDeviceLostError):

2011-11-11  Darin Adler  <darin@apple.com>

        * ANGLE.xcodeproj/project.pbxproj: Let a newer Xcode update this file.
        If an older Xcode downgrades this file and we have a risk of some kind of
        oscillating commit situation, please contact me so I know not to do this again.

2011-09-19  Adam Roben  <aroben@apple.com>

        Let Xcode 4 do its thang with ANGLE.xcodeproj

        * ANGLE.xcodeproj/project.pbxproj:

2011-09-13  Anders Carlsson  <andersca@apple.com>

        Disable C++ exceptions when building with clang
        https://bugs.webkit.org/show_bug.cgi?id=68031
        <rdar://problem/9556880>

        Reviewed by Mark Rowe.

        * Configurations/Base.xcconfig:

2011-09-08  Andras Becsi  <andras.becsi@nokia.com>

        [Qt] Build fails with strict compiler
        https://bugs.webkit.org/show_bug.cgi?id=67778

        Reviewed by Csaba Osztrogonác.

        * src/compiler/glslang_lex.cpp: Regenerate with generate_glslang_lexer.sh using a newer flex
        to suppress warning and fix the build when using [-Werror=unused-result]

2011-08-12  Mark Rowe  <mrowe@apple.com>

        Be more forward-looking in the choice of compiler.

        Rubber-stamped by Jon Honeycutt.

        * Configurations/CompilerVersion.xcconfig:

2011-08-11  Renata Hodovan  <reni@webkit.org>

        [Qt]Fix warnings after r92805.

        Reviewed by Csaba Osztrogonác.

        Control reached the end non-void functions.

        * src/compiler/ossource_posix.cpp:
        (OS_AllocTLSIndex):
        (OS_SetTLSValue):

2011-08-11  Renata Hodovan  <reni@webkit.org>

        Build fix on Qt Windows 32-bit Release/Debug after r92805.

        Unreviewed.

        * src/compiler/ossource_posix.cpp:
        (OS_FreeTLSIndex):

2011-08-04  Mark Rowe  <mrowe@apple.com>

        Future-proof Xcode configuration settings.

        * Configurations/Base.xcconfig:
        * Configurations/CompilerVersion.xcconfig:
        * Configurations/DebugRelease.xcconfig:

2011-06-30  Mark Rowe  <mrowe@apple.com>

        Rubber-stamped by Dan Bernstein.

        ANGLE shouldn't try to use internal SDKs. It doesn't need them!

        * Configurations/Base.xcconfig:

2011-06-20  Zhenyao Mo  <zmo@google.com>

        Reviewed by Kenneth Russell.

        Update ANGLE to r696
        https://bugs.webkit.org/show_bug.cgi?id=56396

        * ANGLE.xcodeproj/project.pbxproj:
        * include/EGL/eglext.h:
        * include/GLSLANG/ShaderLang.h:
        * src/build_angle.xcodeproj/project.pbxproj:
        * src/common/debug.cpp:
        (gl::output):
        (gl::trace):
        (gl::perfActive):
        (gl::ScopedPerfEventHelper::ScopedPerfEventHelper):
        (gl::ScopedPerfEventHelper::~ScopedPerfEventHelper):
        * src/common/debug.h:
        * src/common/version.h: Added.
        * src/compiler/CodeGenGLSL.cpp:
        (ConstructCompiler):
        * src/compiler/CodeGenHLSL.cpp:
        (ConstructCompiler):
        * src/compiler/Compiler.cpp:
        (TCompiler::compile):
        (TCompiler::mapLongVariableNames):
        (TCompiler::getMappedNameMaxLength):
        (TCompiler::getExtensionBehavior):
        * src/compiler/ConstantUnion.h:
        (ConstantUnion::operator==):
        (ConstantUnion::operator>):
        (ConstantUnion::operator<):
        * src/compiler/ExtensionBehavior.h:
        (getBehaviorString):
        * src/compiler/ForLoopUnroll.cpp: Added.
        (ForLoopUnroll::FillLoopIndexInfo):
        (ForLoopUnroll::Step):
        (ForLoopUnroll::SatisfiesLoopCondition):
        (ForLoopUnroll::NeedsToReplaceSymbolWithValue):
        (ForLoopUnroll::GetLoopIndexValue):
        (ForLoopUnroll::Push):
        (ForLoopUnroll::Pop):
        (ForLoopUnroll::getLoopIncrement):
        (ForLoopUnroll::evaluateIntConstant):
        * src/compiler/ForLoopUnroll.h: Added.
        (ForLoopUnroll::ForLoopUnroll):
        * src/compiler/Initialize.cpp:
        (BuiltInFunctionsVertex):
        * src/compiler/MapLongVariableNames.cpp: Added.
        (MapLongVariableNames::MapLongVariableNames):
        (MapLongVariableNames::visitSymbol):
        (MapLongVariableNames::visitConstantUnion):
        (MapLongVariableNames::visitBinary):
        (MapLongVariableNames::visitUnary):
        (MapLongVariableNames::visitSelection):
        (MapLongVariableNames::visitAggregate):
        (MapLongVariableNames::visitLoop):
        (MapLongVariableNames::visitBranch):
        (MapLongVariableNames::mapVaryingLongName):
        * src/compiler/MapLongVariableNames.h: Added.
        * src/compiler/OutputESSL.cpp: Added.
        (TOutputESSL::TOutputESSL):
        (TOutputESSL::writeVariablePrecision):
        * src/compiler/OutputESSL.h: Added.
        * src/compiler/OutputGLSL.cpp:
        (TOutputGLSL::TOutputGLSL):
        (TOutputGLSL::writeVariablePrecision):
        * src/compiler/OutputGLSL.h:
        * src/compiler/OutputGLSLBase.cpp: Added.
        (TOutputGLSLBase::TOutputGLSLBase):
        (TOutputGLSLBase::writeTriplet):
        (TOutputGLSLBase::writeVariableType):
        (TOutputGLSLBase::writeFunctionParameters):
        (TOutputGLSLBase::writeConstantUnion):
        (TOutputGLSLBase::visitSymbol):
        (TOutputGLSLBase::visitConstantUnion):
        (TOutputGLSLBase::visitBinary):
        (TOutputGLSLBase::visitUnary):
        (TOutputGLSLBase::visitSelection):
        (TOutputGLSLBase::visitAggregate):
        (TOutputGLSLBase::visitLoop):
        (TOutputGLSLBase::visitBranch):
        (TOutputGLSLBase::visitCodeBlock):
        * src/compiler/OutputGLSLBase.h: Added.
        (TOutputGLSLBase::objSink):
        * src/compiler/OutputHLSL.cpp:
        (sh::OutputHLSL::OutputHLSL):
        (sh::OutputHLSL::header):
        (sh::OutputHLSL::visitUnary):
        (sh::OutputHLSL::visitAggregate):
        (sh::OutputHLSL::visitSelection):
        (sh::OutputHLSL::visitLoop):
        (sh::OutputHLSL::visitBranch):
        (sh::OutputHLSL::handleExcessiveLoop):
        (sh::OutputHLSL::outputLineDirective):
        * src/compiler/OutputHLSL.h:
        * src/compiler/ParseHelper.cpp:
        (TParseContext::precisionErrorCheck):
        (TParseContext::constructorErrorCheck):
        (TParseContext::nonInitErrorCheck):
        * src/compiler/ParseHelper.h:
        (TParseContext::TParseContext):
        * src/compiler/ShHandle.h:
        * src/compiler/ShaderLang.cpp:
        (getVariableInfo):
        (ShConstructCompiler):
        (ShGetInfo):
        (ShGetActiveAttrib):
        (ShGetActiveUniform):
        * src/compiler/TranslatorESSL.cpp: Added.
        (TranslatorESSL::TranslatorESSL):
        (TranslatorESSL::translate):
        (TranslatorESSL::writeExtensionBehavior):
        * src/compiler/TranslatorESSL.h: Added.
        * src/compiler/ValidateLimitations.cpp:
        (ValidateLimitations::visitBinary):
        (ValidateLimitations::visitLoop):
        * src/compiler/ValidateLimitations.h:
        * src/compiler/VariableInfo.cpp:
        (getVariableInfo):
        (getBuiltInVariableInfo):
        (getUserDefinedVariableInfo):
        (CollectAttribsUniforms::visitAggregate):
        * src/compiler/VariableInfo.h:
        * src/compiler/VersionGLSL.cpp:
        (TVersionGLSL::visitSymbol):
        (TVersionGLSL::visitConstantUnion):
        (TVersionGLSL::visitBinary):
        (TVersionGLSL::visitUnary):
        (TVersionGLSL::visitSelection):
        (TVersionGLSL::visitAggregate):
        (TVersionGLSL::visitLoop):
        (TVersionGLSL::visitBranch):
        * src/compiler/VersionGLSL.h:
        * src/compiler/glslang.y:
        * src/compiler/glslang_tab.cpp:
        * src/compiler/glslang_tab.h:
        * src/compiler/intermediate.h:
        (TIntermLoop::TIntermLoop):
        (TIntermLoop::setUnrollFlag):
        (TIntermLoop::getUnrollFlag):
        (TIntermSymbol::TIntermSymbol):
        (TIntermSymbol::setId):
        (TIntermSymbol::setSymbol):
        (TIntermSymbol::getOriginalSymbol):
        (TIntermAggregate::TIntermAggregate):
        (TIntermAggregate::setEndLine):
        (TIntermAggregate::getEndLine):
        * src/compiler/preprocessor/atom.c:
        (AddString):
        * src/compiler/preprocessor/compile.h:
        * src/compiler/preprocessor/cpp.c:
        (CPPelse):
        (eval):
        (CPPif):
        (CPPifdef):
        (readCPPline):
        (ChkCorrectElseNesting):
        * src/compiler/preprocessor/cppstruct.c:
        (ResetPreprocessor):
        * src/compiler/preprocessor/scanner.c:
        (byte_scan):
        (yylex_CPP):
        * src/compiler/preprocessor/scanner.h:
        * src/libEGL/Config.cpp:
        (egl::Config::Config):
        (egl::Config::set):
        (egl::ConfigSet::add):
        (egl::ConfigSet::getConfigs):
        * src/libEGL/Config.h:
        * src/libEGL/Display.cpp:
        (egl::Display::Display):
        (egl::Display::initialize):
        (egl::Display::terminate):
        (egl::Display::getConfigAttrib):
        (egl::Display::createDevice):
        (egl::Display::createWindowSurface):
        (egl::Display::createOffscreenSurface):
        (egl::Display::createContext):
        (egl::Display::destroyContext):
        (egl::Display::isInitialized):
        (egl::Display::getAdapterIdentifier):
        (egl::Display::isDeviceLost):
        (egl::Display::getBufferPool):
        (egl::Display::initExtensionString):
        (egl::Display::getExtensionString):
        (egl::Display::getVertexTextureSupport):
        (egl::Display::getNonPower2TextureSupport):
        * src/libEGL/Display.h:
        (egl::Display::isD3d9ExDevice):
        * src/libEGL/Surface.cpp:
        (egl::Surface::Surface):
        (egl::Surface::initialize):
        (egl::Surface::release):
        (egl::Surface::resetSwapChain):
        (egl::SurfaceWindowProc):
        (egl::Surface::subclassWindow):
        (egl::Surface::unsubclassWindow):
        (egl::Surface::swap):
        (egl::Surface::getRenderTarget):
        (egl::Surface::getOffscreenTexture):
        (egl::Surface::getTextureFormat):
        (egl::Surface::getTextureTarget):
        (egl::Surface::setBoundTexture):
        (egl::Surface::getBoundTexture):
        (egl::Surface::getFormat):
        * src/libEGL/Surface.h:
        (egl::Surface::getShareHandle):
        * src/libEGL/libEGL.cpp:
        (validateDisplay):
        (validateConfig):
        (validateContext):
        (validateSurface):
        * src/libEGL/libEGL.rc: Added.
        * src/libEGL/libEGL.vcproj:
        * src/libEGL/main.cpp:
        (DllMain):
        * src/libEGL/main.h:
        * src/libEGL/resource.h: Added.
        * src/libGLESv2/Blit.cpp:
        (gl::Blit::initGeometry):
        (gl::Blit::copy):
        * src/libGLESv2/Blit.h:
        * src/libGLESv2/Buffer.cpp:
        (gl::Buffer::Buffer):
        (gl::Buffer::~Buffer):
        (gl::Buffer::bufferData):
        (gl::Buffer::bufferSubData):
        (gl::Buffer::getStaticVertexBuffer):
        (gl::Buffer::getStaticIndexBuffer):
        (gl::Buffer::invalidateStaticData):
        (gl::Buffer::promoteStaticUsage):
        * src/libGLESv2/Buffer.h:
        * src/libGLESv2/Context.cpp:
        (gl::Context::Context):
        (gl::Context::~Context):
        (gl::Context::makeCurrent):
        (gl::Context::markAllStateDirty):
        (gl::Context::setActiveSampler):
        (gl::Context::createFramebuffer):
        (gl::Context::createFence):
        (gl::Context::deleteFramebuffer):
        (gl::Context::deleteFence):
        (gl::Context::bindTexture2D):
        (gl::Context::bindTextureCubeMap):
        (gl::Context::getTexture2D):
        (gl::Context::getTextureCubeMap):
        (gl::Context::getSamplerTexture):
        (gl::Context::getIntegerv):
        (gl::Context::applyRenderTarget):
        (gl::Context::applyState):
        (gl::Context::applyVertexBuffer):
        (gl::Context::applyShaders):
        (gl::Context::applyTextures):
        (gl::Context::readPixels):
        (gl::Context::clear):
        (gl::Context::drawArrays):
        (gl::Context::drawElements):
        (gl::Context::finish):
        (gl::Context::flush):
        (gl::Context::drawClosingLine):
        (gl::Context::getMaximumVertexTextureImageUnits):
        (gl::Context::getMaximumCombinedTextureImageUnits):
        (gl::Context::supportsNonPower2Texture):
        (gl::Context::detachTexture):
        (gl::Context::getIncompleteTexture):
        (gl::Context::initExtensionString):
        (gl::Context::blitFramebuffer):
        (gl::VertexDeclarationCache::VertexDeclarationCache):
        (gl::VertexDeclarationCache::~VertexDeclarationCache):
        (gl::VertexDeclarationCache::applyDeclaration):
        * src/libGLESv2/Context.h:
        * src/libGLESv2/Framebuffer.cpp:
        (gl::Framebuffer::lookupRenderbuffer):
        (gl::Framebuffer::completeness):
        * src/libGLESv2/Framebuffer.h:
        * src/libGLESv2/HandleAllocator.cpp: Added.
        (gl::HandleAllocator::HandleAllocator):
        (gl::HandleAllocator::~HandleAllocator):
        (gl::HandleAllocator::setBaseHandle):
        (gl::HandleAllocator::allocate):
        (gl::HandleAllocator::release):
        * src/libGLESv2/HandleAllocator.h: Added.
        * src/libGLESv2/IndexDataManager.cpp: Added.
        (gl::IndexDataManager::IndexDataManager):
        (gl::IndexDataManager::~IndexDataManager):
        (gl::convertIndices):
        (gl::computeRange):
        (gl::IndexDataManager::prepareIndexData):
        (gl::IndexDataManager::indexSize):
        (gl::IndexDataManager::typeSize):
        (gl::IndexBuffer::IndexBuffer):
        (gl::IndexBuffer::~IndexBuffer):
        (gl::IndexBuffer::getBuffer):
        (gl::IndexBuffer::unmap):
        (gl::StreamingIndexBuffer::StreamingIndexBuffer):
        (gl::StreamingIndexBuffer::~StreamingIndexBuffer):
        (gl::StreamingIndexBuffer::map):
        (gl::StreamingIndexBuffer::reserveSpace):
        (gl::StaticIndexBuffer::StaticIndexBuffer):
        (gl::StaticIndexBuffer::~StaticIndexBuffer):
        (gl::StaticIndexBuffer::map):
        (gl::StaticIndexBuffer::reserveSpace):
        (gl::StaticIndexBuffer::lookupType):
        (gl::StaticIndexBuffer::lookupRange):
        (gl::StaticIndexBuffer::addRange):
        * src/libGLESv2/IndexDataManager.h: Added.
        (gl::IndexBuffer::size):
        * src/libGLESv2/Program.cpp:
        (gl::Program::getSemanticIndex):
        (gl::Program::getSamplerMapping):
        (gl::Program::getSamplerTextureType):
        (gl::Program::compileToBinary):
        (gl::Program::packVaryings):
        (gl::Program::linkVaryings):
        (gl::Program::link):
        (gl::Program::linkUniforms):
        (gl::Program::defineUniform):
        (gl::Program::applyUniform1iv):
        (gl::Program::appendToInfoLogSanitized):
        (gl::Program::unlink):
        (gl::Program::getActiveUniformMaxLength):
        (gl::Program::validate):
        (gl::Program::validateSamplers):
        * src/libGLESv2/Program.h:
        * src/libGLESv2/Renderbuffer.cpp:
        (gl::Renderbuffer::getWidth):
        (gl::Renderbuffer::getHeight):
        (gl::Renderbuffer::getInternalFormat):
        (gl::Renderbuffer::getRedSize):
        (gl::Renderbuffer::getGreenSize):
        (gl::Renderbuffer::getBlueSize):
        (gl::Renderbuffer::getAlphaSize):
        (gl::Renderbuffer::getDepthSize):
        (gl::Renderbuffer::getStencilSize):
        (gl::Renderbuffer::getSamples):
        (gl::RenderbufferStorage::RenderbufferStorage):
        (gl::RenderbufferStorage::getWidth):
        (gl::RenderbufferStorage::getHeight):
        (gl::RenderbufferStorage::getInternalFormat):
        (gl::RenderbufferStorage::getRedSize):
        (gl::RenderbufferStorage::getGreenSize):
        (gl::RenderbufferStorage::getBlueSize):
        (gl::RenderbufferStorage::getAlphaSize):
        (gl::RenderbufferStorage::getDepthSize):
        (gl::RenderbufferStorage::getStencilSize):
        (gl::RenderbufferStorage::getD3DFormat):
        (gl::Colorbuffer::Colorbuffer):
        (gl::Colorbuffer::getWidth):
        (gl::Colorbuffer::getHeight):
        (gl::Colorbuffer::getInternalFormat):
        (gl::Colorbuffer::getType):
        (gl::Colorbuffer::getD3DFormat):
        (gl::Colorbuffer::isColorbuffer):
        (gl::Colorbuffer::getRenderTarget):
        (gl::DepthStencilbuffer::DepthStencilbuffer):
        (gl::Depthbuffer::Depthbuffer):
        (gl::Stencilbuffer::Stencilbuffer):
        * src/libGLESv2/Renderbuffer.h:
        * src/libGLESv2/ResourceManager.cpp:
        (gl::ResourceManager::createBuffer):
        (gl::ResourceManager::createShader):
        (gl::ResourceManager::createProgram):
        (gl::ResourceManager::createTexture):
        (gl::ResourceManager::createRenderbuffer):
        (gl::ResourceManager::deleteBuffer):
        (gl::ResourceManager::deleteShader):
        (gl::ResourceManager::deleteProgram):
        (gl::ResourceManager::deleteTexture):
        (gl::ResourceManager::deleteRenderbuffer):
        (gl::ResourceManager::checkTextureAllocation):
        * src/libGLESv2/ResourceManager.h:
        * src/libGLESv2/Shader.cpp:
        (gl::Shader::Shader):
        (gl::Shader::compileToHLSL):
        * src/libGLESv2/Shader.h:
        * src/libGLESv2/Texture.cpp:
        (gl::Texture::Image::Image):
        (gl::Texture::Image::~Image):
        (gl::Texture::Image::isRenderable):
        (gl::Texture::Image::getD3DFormat):
        (gl::Texture::Texture):
        (gl::Texture::setMinFilter):
        (gl::Texture::setMagFilter):
        (gl::Texture::setWrapS):
        (gl::Texture::setWrapT):
        (gl::Texture::loadImageData):
        (gl::Texture::loadAlphaImageData):
        (gl::Texture::loadAlphaFloatImageData):
        (gl::Texture::loadAlphaHalfFloatImageData):
        (gl::Texture::loadLuminanceImageData):
        (gl::Texture::loadLuminanceFloatImageData):
        (gl::Texture::loadLuminanceHalfFloatImageData):
        (gl::Texture::loadLuminanceAlphaImageData):
        (gl::Texture::loadLuminanceAlphaFloatImageData):
        (gl::Texture::loadLuminanceAlphaHalfFloatImageData):
        (gl::Texture::loadRGBUByteImageData):
        (gl::Texture::loadRGB565ImageData):
        (gl::Texture::loadRGBFloatImageData):
        (gl::Texture::loadRGBHalfFloatImageData):
        (gl::Texture::loadRGBAUByteImageDataSSE2):
        (gl::Texture::loadRGBAUByteImageData):
        (gl::Texture::loadRGBA4444ImageData):
        (gl::Texture::loadRGBA5551ImageData):
        (gl::Texture::loadRGBAFloatImageData):
        (gl::Texture::loadRGBAHalfFloatImageData):
        (gl::Texture::loadBGRAImageData):
        (gl::Texture::loadCompressedImageData):
        (gl::Texture::createSurface):
        (gl::Texture::setImage):
        (gl::Texture::setCompressedImage):
        (gl::Texture::subImage):
        (gl::Texture::subImageCompressed):
        (gl::Texture::copyToImage):
        (gl::Texture::getTexture):
        (gl::Texture::isDirtyParameter):
        (gl::Texture::isDirtyImage):
        (gl::Texture::resetDirty):
        (gl::Texture::getSerial):
        (gl::Texture::creationLevels):
        (gl::Texture::levelCount):
        (gl::Texture::issueSerial):
        (gl::Texture2D::Texture2D):
        (gl::Texture2D::~Texture2D):
        (gl::Texture2D::getWidth):
        (gl::Texture2D::getHeight):
        (gl::Texture2D::getInternalFormat):
        (gl::Texture2D::getType):
        (gl::Texture2D::getD3DFormat):
        (gl::Texture2D::redefineTexture):
        (gl::Texture2D::setImage):
        (gl::Texture2D::bindTexImage):
        (gl::Texture2D::releaseTexImage):
        (gl::Texture2D::setCompressedImage):
        (gl::Texture2D::commitRect):
        (gl::Texture2D::copyImage):
        (gl::Texture2D::copySubImage):
        (gl::Texture2D::isComplete):
        (gl::Texture2D::isCompressed):
        (gl::Texture2D::getBaseTexture):
        (gl::Texture2D::createTexture):
        (gl::Texture2D::updateTexture):
        (gl::Texture2D::convertToRenderTarget):
        (gl::Texture2D::generateMipmaps):
        (gl::Texture2D::getRenderbuffer):
        (gl::Texture2D::getRenderTarget):
        (gl::TextureCubeMap::getWidth):
        (gl::TextureCubeMap::getHeight):
        (gl::TextureCubeMap::getInternalFormat):
        (gl::TextureCubeMap::getType):
        (gl::TextureCubeMap::getD3DFormat):
        (gl::TextureCubeMap::setImagePosX):
        (gl::TextureCubeMap::setImageNegX):
        (gl::TextureCubeMap::setImagePosY):
        (gl::TextureCubeMap::setImageNegY):
        (gl::TextureCubeMap::setImagePosZ):
        (gl::TextureCubeMap::setImageNegZ):
        (gl::TextureCubeMap::setCompressedImage):
        (gl::TextureCubeMap::commitRect):
        (gl::TextureCubeMap::isComplete):
        (gl::TextureCubeMap::isCompressed):
        (gl::TextureCubeMap::getBaseTexture):
        (gl::TextureCubeMap::createTexture):
        (gl::TextureCubeMap::updateTexture):
        (gl::TextureCubeMap::convertToRenderTarget):
        (gl::TextureCubeMap::setImage):
        (gl::TextureCubeMap::redefineTexture):
        (gl::TextureCubeMap::copyImage):
        (gl::TextureCubeMap::getCubeMapSurface):
        (gl::TextureCubeMap::copySubImage):
        (gl::TextureCubeMap::generateMipmaps):
        (gl::TextureCubeMap::getRenderbuffer):
        (gl::TextureCubeMap::getRenderTarget):
        * src/libGLESv2/Texture.h:
        * src/libGLESv2/VertexDataManager.cpp: Added.
        (gl::VertexDataManager::VertexDataManager):
        (gl::VertexDataManager::~VertexDataManager):
        (gl::VertexDataManager::writeAttributeData):
        (gl::VertexDataManager::prepareVertexData):
        (gl::VertexDataManager::spaceRequired):
        (gl::VertexDataManager::checkVertexCaps):
        (gl::VertexDataManager::typeIndex):
        (gl::VertexBuffer::VertexBuffer):
        (gl::VertexBuffer::~VertexBuffer):
        (gl::VertexBuffer::unmap):
        (gl::VertexBuffer::getBuffer):
        (gl::ConstantVertexBuffer::ConstantVertexBuffer):
        (gl::ConstantVertexBuffer::~ConstantVertexBuffer):
        (gl::ArrayVertexBuffer::ArrayVertexBuffer):
        (gl::ArrayVertexBuffer::~ArrayVertexBuffer):
        (gl::ArrayVertexBuffer::addRequiredSpace):
        (gl::ArrayVertexBuffer::addRequiredSpaceFor):
        (gl::StreamingVertexBuffer::StreamingVertexBuffer):
        (gl::StreamingVertexBuffer::~StreamingVertexBuffer):
        (gl::StreamingVertexBuffer::map):
        (gl::StreamingVertexBuffer::reserveRequiredSpace):
        (gl::StaticVertexBuffer::StaticVertexBuffer):
        (gl::StaticVertexBuffer::~StaticVertexBuffer):
        (gl::StaticVertexBuffer::map):
        (gl::StaticVertexBuffer::reserveRequiredSpace):
        (gl::StaticVertexBuffer::lookupAttribute):
        (gl::VertexDataManager::formatConverter):
        * src/libGLESv2/VertexDataManager.h: Added.
        (gl::ArrayVertexBuffer::size):
        (gl::VertexDataManager::dirtyCurrentValue):
        * src/libGLESv2/libGLESv2.cpp:
        (validImageSize):
        (Extension::glBindTexImage):
        * src/libGLESv2/libGLESv2.def:
        * src/libGLESv2/libGLESv2.rc: Added.
        * src/libGLESv2/libGLESv2.vcproj:
        * src/libGLESv2/main.cpp:
        (error):
        * src/libGLESv2/mathutil.h:
        (gl::clamp):
        (gl::clamp01):
        (gl::transformPixelRect):
        (gl::transformPixelYOffset):
        (gl::adjustWinding):
        (gl::supportsSSE2):
        * src/libGLESv2/resource.h: Added.
        * src/libGLESv2/utilities.cpp:
        (gl::ComputeCompressedPitch):
        (es2dx::ConvertCubeFace):
        (es2dx::ConvertPrimitiveType):
        (es2dx::ConvertRenderbufferFormat):
        (es2dx::GetMultisampleTypeFromSamples):
        (dx2es::GetStencilSize):
        (dx2es::GetAlphaSize):
        (dx2es::GetRedSize):
        (dx2es::GetGreenSize):
        (dx2es::GetBlueSize):
        (dx2es::GetDepthSize):
        (getTempPath):
        (writeFile):
        * src/libGLESv2/utilities.h:
        * src/libGLESv2/vertexconversion.h: Added.
        (gl::Identity::convert):
        (gl::Cast::convert):
        (gl::Normalize::convert):
        (gl::FixedToFloat::convert):
        (gl::SimpleDefaultValues::zero):
        (gl::SimpleDefaultValues::one):
        (gl::NormalizedDefaultValues::zero):
        (gl::NormalizedDefaultValues::one):
        (gl::VertexDataConverter::convertArray):
        (gl::VertexDataConverter::pointerAddBytes):
        (gl::VertexDataConverter::copyComponent):

2011-05-24  David Kilzer  <ddkilzer@apple.com>

        Part 2 of 2: <http://webkit.org/b/60805> Enable -Wnewline-eof on ANGLE

        Reviewed by Adam Roben.

        * Configurations/Base.xcconfig:
        (GCC_WARN_ABOUT_MISSING_NEWLINE): Added. Set to YES.

2011-05-23  David Kilzer  <ddkilzer@apple.com>

        Part 1 of 2: <http://webkit.org/b/60805> Enable -Wnewline-eof on ANGLE

        Merge ANGLE upstream commit r653 for Issue 154.

        * src/compiler/PoolAlloc.h: Added newline to end of file.
        * src/compiler/ShHandle.h: Ditto.
        * src/libEGL/Display.cpp: Ditto.

2011-05-16  David Kilzer  <ddkilzer@apple.com>

        <http://webkit.org/b/60913> C++ exceptions should not be enabled when building with llvm-gcc-4.2
        <rdar://problem/9446430>

        Reviewed by Mark Rowe.

        * Configurations/Base.xcconfig: Fixed typo.

2011-05-04  David Kilzer  <ddkilzer@apple.com>

        Part 2 of 2: <http://webkit.org/b/56337> Enable -Werror on ANGLE

        Reviewed by Adam Barth.

        * Configurations/Base.xcconfig:
        (GCC_TREAT_WARNINGS_AS_ERRORS): Set to YES.

2011-05-04  David Kilzer  <ddkilzer@apple.com>

        Part 1 of 2: <http://webkit.org/b/56337> Enable -Werror on ANGLE

        Merge ANGLE upstream commits r572, r573, r574, r575.

        This unblocks enabling -Werror on ANGLE.  Since all changes are
        in the upstream repository, they may be safely overwritten
        during the next ANGLE update.

        * src/compiler/ConstantUnion.h:
        (ConstantUnion::operator==): Added a default case.
        * src/compiler/Intermediate.cpp:
        (TIntermBinary::promote): Added parentheses.
        * src/compiler/ParseHelper.cpp:
        (TParseContext::precisionErrorCheck): Added a default case.
        * src/compiler/PoolAlloc.cpp:
        (TAllocation::checkGuardBlock): Changed '%u' to '%lu' for size_t
        variable.  Put for loop inside #ifdef GUARD_BLOCKS/#endif macros
        to fix tautological-compare warning.
        (TAllocation::checkAllocList): Added newline to end of file.

2011-04-26  Dan Bernstein  <mitz@apple.com>

        Build fix.

        * Configurations/CompilerVersion.xcconfig:

2011-04-26  Dan Bernstein  <mitz@apple.com>

        Reviewed by Mark Rowe.

        Choose the compiler based on the Xcode version for Snow Leopard debug builds.

        * Configurations/Base.xcconfig:
        * Configurations/CompilerVersion.xcconfig: Added.

2011-03-17  Jeff Miller  <jeffm@apple.com>

        Use a consistent set of file patterns in the svn:ignore property for all .xcodeproj directories, specifically:
        
        *.mode*
        *.pbxuser
        *.perspective*
        project.xcworkspace
        xcuserdata

        * ANGLE.xcodeproj: Modified property svn:ignore.
        * src/build_angle.xcodeproj: Modified property svn:ignore.

2011-01-18  Kenneth Russell  <kbr@google.com>

        Unreviewed, Leopard build fix. Remove flex/bison targets for GLSL
        grammar because the generated sources are already checked in.

        * ANGLE.xcodeproj/project.pbxproj:
        * src/build_angle.xcodeproj/project.pbxproj:

2011-01-18  Kenneth Russell  <kbr@google.com>

        Unreviewed, release build fix. Explicitly cast away const.

        * src/compiler/preprocessor/scanner.c:
        (ScanFromString):

2011-01-18  Ben Vanik  <ben.vanik@gmail.com>

        Reviewed by Kenneth Russell.

        Updating ANGLE in WebKit to r533.
        https://bugs.webkit.org/show_bug.cgi?id=47194

        * ANGLE.xcodeproj/project.pbxproj:
        * include/GLSLANG/ShaderLang.h:
        * src/common/debug.cpp:
        (gl::trace):
        * src/common/debug.h:
        * src/compiler/CodeGenGLSL.cpp:
        (ConstructCompiler):
        * src/compiler/CodeGenHLSL.cpp:
        (ConstructCompiler):
        * src/compiler/Common.h:
        (EncodeSourceLoc):
        (DecodeSourceLoc):
        * src/compiler/Compiler.cpp: Added.
        (TShHandleBase::TShHandleBase):
        (TShHandleBase::~TShHandleBase):
        (TCompiler::TCompiler):
        (TCompiler::~TCompiler):
        (TCompiler::Init):
        (TCompiler::compile):
        (TCompiler::InitBuiltInSymbolTable):
        (TCompiler::clearResults):
        (TCompiler::validateLimitations):
        (TCompiler::collectAttribsUniforms):
        * src/compiler/ExtensionBehavior.h: Added.
        * src/compiler/InfoSink.cpp:
        (TInfoSinkBase::location):
        * src/compiler/InfoSink.h:
        (TInfoSinkBase::size):
        * src/compiler/Initialize.cpp:
        (BuiltInFunctionsCommon):
        (BuiltInFunctionsVertex):
        (BuiltInFunctionsFragment):
        (StandardUniforms):
        (DefaultPrecisionVertex):
        (DefaultPrecisionFragment):
        (BuiltInConstants):
        (TBuiltIns::initialize):
        (IdentifyBuiltIns):
        (InitExtensionBehavior):
        * src/compiler/Initialize.h:
        * src/compiler/IntermTraverse.cpp:
        (TIntermLoop::traverse):
        * src/compiler/Intermediate.cpp:
        (getOperatorString):
        (TIntermediate::addBinaryMath):
        (TIntermediate::addLoop):
        (TIntermediate::postProcess):
        (TIntermBinary::promote):
        * src/compiler/OutputGLSL.cpp:
        (TOutputGLSL::visitUnary):
        (TOutputGLSL::visitLoop):
        * src/compiler/OutputHLSL.cpp:
        (sh::OutputHLSL::OutputHLSL):
        (sh::OutputHLSL::header):
        (sh::OutputHLSL::visitBinary):
        (sh::OutputHLSL::visitUnary):
        (sh::OutputHLSL::visitAggregate):
        (sh::OutputHLSL::visitLoop):
        (sh::OutputHLSL::handleExcessiveLoop):
        (sh::OutputHLSL::argumentString):
        * src/compiler/OutputHLSL.h:
        * src/compiler/ParseHelper.cpp:
        (ReportInfo):
        (DefineExtensionMacros):
        (TParseContext::error):
        (TParseContext::warning):
        (TParseContext::reservedErrorCheck):
        (TParseContext::constructorErrorCheck):
        (TParseContext::arrayQualifierErrorCheck):
        (TParseContext::extensionErrorCheck):
        (TParseContext::areAllChildConst):
        (PaParseStrings):
        * src/compiler/ParseHelper.h:
        (TParseContext::TParseContext):
        * src/compiler/PoolAlloc.cpp:
        (InitializeGlobalPools):
        (FreeGlobalPools):
        (SetGlobalPoolAllocator):
        (TPoolAllocator::TPoolAllocator):
        (TPoolAllocator::~TPoolAllocator):
        (TAllocation::checkAllocList):
        * src/compiler/PoolAlloc.h:
        * src/compiler/SearchSymbol.cpp: Added.
        (sh::SearchSymbol::SearchSymbol):
        (sh::SearchSymbol::traverse):
        (sh::SearchSymbol::visitSymbol):
        (sh::SearchSymbol::foundMatch):
        * src/compiler/SearchSymbol.h: Added.
        * src/compiler/ShHandle.h:
        (TCompiler::getAsCompiler):
        (TCompiler::getInfoSink):
        (TCompiler::getAttribs):
        (TCompiler::getUniforms):
        (TCompiler::getShaderType):
        (TCompiler::getShaderSpec):
        * src/compiler/ShaderLang.cpp:
        (getVariableMaxLength):
        (getVariableInfo):
        (ShInitBuiltInResources):
        (ShConstructCompiler):
        (ShCompile):
        (ShGetInfo):
        (ShGetInfoLog):
        (ShGetObjectCode):
        (ShGetActiveAttrib):
        (ShGetActiveUniform):
        * src/compiler/SymbolTable.cpp:
        (TSymbolTableLevel::relateToExtension):
        * src/compiler/SymbolTable.h:
        (TVariable::shareConstPointer):
        (TFunction::relateToExtension):
        (TFunction::getExtension):
        (TFunction::getParamCount):
        (TFunction::getParam):
        (TSymbolTable::getGlobalLevel):
        (TSymbolTable::relateToOperator):
        (TSymbolTable::relateToExtension):
        * src/compiler/TranslatorGLSL.cpp:
        (writeVersion):
        (TranslatorGLSL::TranslatorGLSL):
        (TranslatorGLSL::translate):
        * src/compiler/TranslatorGLSL.h:
        * src/compiler/TranslatorHLSL.cpp:
        (TranslatorHLSL::TranslatorHLSL):
        (TranslatorHLSL::translate):
        * src/compiler/TranslatorHLSL.h:
        * src/compiler/Types.h:
        (TType::TType):
        * src/compiler/UnfoldSelect.cpp:
        (sh::UnfoldSelect::visitSelection):
        * src/compiler/UnfoldSelect.h:
        * src/compiler/ValidateLimitations.cpp: Added.
        (ValidateLimitations::ValidateLimitations):
        (ValidateLimitations::visitSymbol):
        (ValidateLimitations::visitConstantUnion):
        (ValidateLimitations::visitBinary):
        (ValidateLimitations::visitUnary):
        (ValidateLimitations::visitSelection):
        (ValidateLimitations::visitAggregate):
        (ValidateLimitations::visitLoop):
        (ValidateLimitations::visitBranch):
        (ValidateLimitations::error):
        (ValidateLimitations::withinLoopBody):
        (ValidateLimitations::isLoopIndex):
        (ValidateLimitations::validateLoopType):
        (ValidateLimitations::validateForLoopHeader):
        (ValidateLimitations::validateForLoopInit):
        (ValidateLimitations::validateForLoopCond):
        (ValidateLimitations::validateForLoopExpr):
        (ValidateLimitations::validateFunctionCall):
        (ValidateLimitations::validateOperation):
        (ValidateLimitations::isConstExpr):
        (ValidateLimitations::isConstIndexExpr):
        (ValidateLimitations::validateIndexing):
        * src/compiler/ValidateLimitations.h: Added.
        (ValidateLimitations::numErrors):
        * src/compiler/VariableInfo.cpp: Added.
        (arrayBrackets):
        (getVariableDataType):
        (getVariableInfo):
        (getBuiltInVariableInfo):
        (getUserDefinedVariableInfo):
        (CollectAttribsUniforms::CollectAttribsUniforms):
        (CollectAttribsUniforms::visitSymbol):
        (CollectAttribsUniforms::visitConstantUnion):
        (CollectAttribsUniforms::visitBinary):
        (CollectAttribsUniforms::visitUnary):
        (CollectAttribsUniforms::visitSelection):
        (CollectAttribsUniforms::visitAggregate):
        (CollectAttribsUniforms::visitLoop):
        (CollectAttribsUniforms::visitBranch):
        * src/compiler/VariableInfo.h: Added.
        * src/compiler/VersionGLSL.cpp: Added.
        (TVersionGLSL::TVersionGLSL):
        (TVersionGLSL::visitSymbol):
        (TVersionGLSL::visitConstantUnion):
        (TVersionGLSL::visitBinary):
        (TVersionGLSL::visitUnary):
        (TVersionGLSL::visitSelection):
        (TVersionGLSL::visitAggregate):
        (TVersionGLSL::visitLoop):
        (TVersionGLSL::visitBranch):
        (TVersionGLSL::updateVersion):
        * src/compiler/VersionGLSL.h: Added.
        (TVersionGLSL::getVersion):
        * src/compiler/generate_glslang_lexer.sh: Added.
        * src/compiler/generate_glslang_parser.sh: Added.
        * src/compiler/glslang.h: Added.
        * src/compiler/glslang.l:
        * src/compiler/glslang.y:
        * src/compiler/glslang_lex.cpp: Added.
        (yy_get_next_buffer):
        (yy_get_previous_state):
        (yy_try_NUL_trans):
        (input):
        (yyrestart):
        (yy_switch_to_buffer):
        (yy_load_buffer_state):
        (yy_create_buffer):
        (yy_delete_buffer):
        (yy_init_buffer):
        (yy_flush_buffer):
        (yypush_buffer_state):
        (yypop_buffer_state):
        (yyensure_buffer_stack):
        (yy_scan_buffer):
        (yy_scan_string):
        (yy_scan_bytes):
        (yy_push_state):
        (yy_pop_state):
        (yy_top_state):
        (yy_fatal_error):
        (yyget_extra):
        (yyget_lineno):
        (yyget_column):
        (yyget_in):
        (yyget_out):
        (yyget_leng):
        (yyget_text):
        (yyset_extra):
        (yyset_lineno):
        (yyset_column):
        (yyset_in):
        (yyset_out):
        (yyget_debug):
        (yyset_debug):
        (yyget_lval):
        (yyset_lval):
        (yylex_init):
        (yylex_init_extra):
        (yy_init_globals):
        (yylex_destroy):
        (yy_flex_strncpy):
        (yy_flex_strlen):
        (yyalloc):
        (yyrealloc):
        (yyfree):
        (string_input):
        (check_type):
        (reserved_word):
        (yyerror):
        (glslang_initialize):
        (glslang_finalize):
        (glslang_scan):
        * src/compiler/glslang_tab.cpp: Added.
        (yytnamerr):
        (yysyntax_error):
        (glslang_parse):
        * src/compiler/glslang_tab.h: Added.
        * src/compiler/intermOut.cpp:
        (TOutputTraverser::TOutputTraverser):
        (OutputTreeText):
        (TOutputTraverser::visitSymbol):
        (TOutputTraverser::visitBinary):
        (TOutputTraverser::visitUnary):
        (TOutputTraverser::visitAggregate):
        (TOutputTraverser::visitSelection):
        (TOutputTraverser::visitConstantUnion):
        (TOutputTraverser::visitLoop):
        (TOutputTraverser::visitBranch):
        (TIntermediate::outputTree):
        * src/compiler/intermediate.h:
        (TIntermLoop::TIntermLoop):
        (TIntermLoop::getType):
        (TIntermLoop::getInit):
        (TIntermLoop::getCondition):
        (TIntermLoop::getExpression):
        (TIntermLoop::getBody):
        * src/compiler/localintermediate.h:
        * src/compiler/osinclude.h:
        (OS_GetTLSValue):
        * src/compiler/ossource_nspr.cpp: Added.
        (OS_AllocTLSIndex):
        (OS_SetTLSValue):
        (OS_FreeTLSIndex):
        * src/compiler/preprocessor/compile.h:
        * src/compiler/preprocessor/cpp.c:
        (CPPdefine):
        (CPPelse):
        (CPPif):
        (CPPifdef):
        (CPPerror):
        (CPPextension):
        (readCPPline):
        * src/compiler/preprocessor/preprocess.h:
        * src/compiler/preprocessor/scanner.c:
        (str_getch):
        (str_ungetch):
        (ScanFromString):
        (lFloatConst):
        (byte_scan):
        (yylex_CPP):
        (check_EOF):
        * src/compiler/preprocessor/scanner.h:
        * src/compiler/preprocessor/tokens.c:
        (RecordToken):
        (ReadToken):
        * src/compiler/tools: Removed.
        * src/compiler/unistd.h: Removed.
        * src/compiler/util.cpp: Added.
        (atof_dot):
        * src/compiler/util.h: Added.
        * src/libEGL/Config.cpp:
        (egl::Config::set):
        * src/libEGL/Display.cpp:
        (egl::Display::Display):
        (egl::Display::initialize):
        (egl::Display::terminate):
        (egl::Display::createDevice):
        (egl::Display::resetDevice):
        (egl::Display::createContext):
        (egl::Display::destroyContext):
        (egl::Display::getMinSwapInterval):
        (egl::Display::getMaxSwapInterval):
        (egl::Display::getDevice):
        (egl::Display::getFloatTextureSupport):
        (egl::Display::getHalfFloatTextureSupport):
        (egl::Display::getLuminanceTextureSupport):
        (egl::Display::getLuminanceAlphaTextureSupport):
        (egl::Display::getBufferPool):
        (egl::Display::getEventQuerySupport):
        (egl::Display::getDefaultPresentParameters):
        * src/libEGL/Display.h:
        * src/libEGL/Surface.cpp:
        (egl::Surface::Surface):
        (egl::Surface::~Surface):
        (egl::Surface::release):
        (egl::Surface::resetSwapChain):
        (egl::Surface::writeRecordableFlipState):
        (egl::Surface::restoreState):
        (egl::SurfaceWindowProc):
        (egl::Surface::subclassWindow):
        (egl::Surface::unsubclassWindow):
        (egl::Surface::checkForOutOfDateSwapChain):
        (egl::Surface::convertInterval):
        (egl::Surface::swap):
        (egl::Surface::getRenderTarget):
        (egl::Surface::setSwapInterval):
        * src/libEGL/Surface.h:
        * src/libEGL/libEGL.cpp:
        * src/libGLESv2/Blit.cpp:
        (gl::Blit::copySurfaceToTexture):
        (gl::Blit::setCommonBlitState):
        * src/libGLESv2/Buffer.cpp:
        (gl::Buffer::Buffer):
        (gl::Buffer::~Buffer):
        (gl::Buffer::bufferData):
        (gl::Buffer::bufferSubData):
        (gl::Buffer::getVertexBuffer):
        (gl::Buffer::getIndexBuffer):
        (gl::Buffer::invalidateStaticData):
        * src/libGLESv2/Buffer.h:
        * src/libGLESv2/Context.cpp:
        (gl::Context::Context):
        (gl::Context::~Context):
        (gl::Context::makeCurrent):
        (gl::Context::markAllStateDirty):
        (gl::Context::setFragmentShaderDerivativeHint):
        (gl::Context::setEnableVertexAttribArray):
        (gl::Context::getVertexAttribState):
        (gl::Context::getVertexAttributes):
        (gl::Context::createFence):
        (gl::Context::deleteFence):
        (gl::Context::bindTexture2D):
        (gl::Context::bindTextureCubeMap):
        (gl::Context::getFence):
        (gl::Context::getTexture2D):
        (gl::Context::getTextureCubeMap):
        (gl::Context::getSamplerTexture):
        (gl::Context::getBooleanv):
        (gl::Context::getIntegerv):
        (gl::Context::getQueryParameterInfo):
        (gl::Context::applyRenderTarget):
        (gl::Context::applyState):
        (gl::Context::lookupAttributeMapping):
        (gl::Context::applyVertexBuffer):
        (gl::Context::applyIndexBuffer):
        (gl::Context::readPixels):
        (gl::Context::clear):
        (gl::Context::drawArrays):
        (gl::Context::drawElements):
        (gl::Context::finish):
        (gl::Context::drawClosingLine):
        (gl::Context::getMaximumVaryingVectors):
        (gl::Context::getMaximumFragmentUniformVectors):
        (gl::Context::supportsEventQueries):
        (gl::Context::supportsFloatTextures):
        (gl::Context::supportsFloatLinearFilter):
        (gl::Context::supportsFloatRenderableTextures):
        (gl::Context::supportsHalfFloatTextures):
        (gl::Context::supportsHalfFloatLinearFilter):
        (gl::Context::supportsHalfFloatRenderableTextures):
        (gl::Context::getMaximumRenderbufferDimension):
        (gl::Context::getMaximumTextureDimension):
        (gl::Context::getMaximumCubeTextureDimension):
        (gl::Context::getMaximumTextureLevel):
        (gl::Context::supportsLuminanceTextures):
        (gl::Context::supportsLuminanceAlphaTextures):
        (gl::Context::supports32bitIndices):
        (gl::Context::getIncompleteTexture):
        (gl::Context::setVertexAttrib):
        (gl::Context::initExtensionString):
        (gl::Context::blitFramebuffer):
        * src/libGLESv2/Context.h:
        (gl::VertexAttribute::VertexAttribute):
        (gl::VertexAttribute::typeSize):
        (gl::VertexAttribute::stride):
        * src/libGLESv2/Fence.cpp: Added.
        (gl::Fence::Fence):
        (gl::Fence::~Fence):
        (gl::Fence::isFence):
        (gl::Fence::setFence):
        (gl::Fence::testFence):
        (gl::Fence::finishFence):
        (gl::Fence::getFenceiv):
        * src/libGLESv2/Fence.h: Added.
        * src/libGLESv2/Framebuffer.cpp:
        (gl::Framebuffer::completeness):
        (gl::DefaultFramebuffer::DefaultFramebuffer):
        (gl::DefaultFramebuffer::completeness):
        * src/libGLESv2/Program.cpp:
        (gl::Program::Program):
        (gl::Program::getSamplerMapping):
        (gl::Program::getUniformLocation):
        (gl::Program::setUniform1iv):
        (gl::Program::applyUniforms):
        (gl::Program::packVaryings):
        (gl::Program::linkVaryings):
        (gl::Program::link):
        (gl::Program::defineUniform):
        (gl::Program::createUniform):
        (gl::Program::applyUniform1iv):
        (gl::Program::resetInfoLog):
        (gl::Program::unlink):
        (gl::Program::getActiveAttribute):
        (gl::Program::getActiveUniform):
        (gl::Program::getDxDepthRangeLocation):
        * src/libGLESv2/Program.h:
        * src/libGLESv2/RefCountObject.cpp:
        (gl::RefCountObject::~RefCountObject):
        * src/libGLESv2/Renderbuffer.cpp:
        (gl::RenderbufferStorage::RenderbufferStorage):
        (gl::RenderbufferStorage::isFloatingPoint):
        (gl::Colorbuffer::Colorbuffer):
        (gl::DepthStencilbuffer::DepthStencilbuffer):
        * src/libGLESv2/Renderbuffer.h:
        * src/libGLESv2/Shader.cpp:
        (gl::Shader::Shader):
        (gl::Shader::parseVaryings):
        (gl::Shader::compileToHLSL):
        (gl::VertexShader::parseAttributes):
        * src/libGLESv2/Texture.cpp:
        (gl::Texture::Texture):
        (gl::Texture::isFloatingPoint):
        (gl::Texture::isRenderableFormat):
        (gl::Texture::selectFormat):
        (gl::Texture::loadImageData):
        (gl::Texture::loadAlphaFloatImageData):
        (gl::Texture::loadAlphaHalfFloatImageData):
        (gl::Texture::loadLuminanceImageData):
        (gl::Texture::loadLuminanceFloatImageData):
        (gl::Texture::loadLuminanceHalfFloatImageData):
        (gl::Texture::loadLuminanceAlphaImageData):
        (gl::Texture::loadLuminanceAlphaFloatImageData):
        (gl::Texture::loadLuminanceAlphaHalfFloatImageData):
        (gl::Texture::loadRGBFloatImageData):
        (gl::Texture::loadRGBHalfFloatImageData):
        (gl::Texture::loadRGBAFloatImageData):
        (gl::Texture::loadRGBAHalfFloatImageData):
        (gl::Texture::createSurface):
        (gl::Texture::setImage):
        (gl::Texture::setCompressedImage):
        (gl::Texture::subImage):
        (gl::Texture::subImageCompressed):
        (gl::Texture::copyNonRenderable):
        (gl::Texture::getD3DFormat):
        (gl::Texture::isRenderable):
        (gl::Texture2D::Texture2D):
        (gl::Texture2D::~Texture2D):
        (gl::Texture2D::redefineTexture):
        (gl::Texture2D::setImage):
        (gl::Texture2D::setCompressedImage):
        (gl::Texture2D::copyImage):
        (gl::Texture2D::copySubImage):
        (gl::Texture2D::isComplete):
        (gl::Texture2D::createTexture):
        (gl::Texture2D::convertToRenderTarget):
        (gl::Texture2D::generateMipmaps):
        (gl::Texture2D::getColorbuffer):
        (gl::Texture2D::getRenderTarget):
        (gl::TextureCubeMap::TextureCubeMap):
        (gl::TextureCubeMap::~TextureCubeMap):
        (gl::TextureCubeMap::subImage):
        (gl::TextureCubeMap::subImageCompressed):
        (gl::TextureCubeMap::isComplete):
        (gl::TextureCubeMap::createTexture):
        (gl::TextureCubeMap::convertToRenderTarget):
        (gl::TextureCubeMap::redefineTexture):
        (gl::TextureCubeMap::copyImage):
        (gl::TextureCubeMap::copySubImage):
        (gl::TextureCubeMap::generateMipmaps):
        (gl::TextureCubeMap::getColorbuffer):
        (gl::TextureCubeMap::getRenderTarget):
        (gl::Texture::TextureColorbufferProxy::TextureColorbufferProxy):
        (gl::Texture::TextureColorbufferProxy::isFloatingPoint):
        * src/libGLESv2/Texture.h:
        * src/libGLESv2/geometry/IndexDataManager.cpp:
        (gl::IndexDataManager::IndexDataManager):
        (gl::IndexDataManager::~IndexDataManager):
        (gl::convertIndices):
        (gl::computeRange):
        (gl::IndexDataManager::prepareIndexData):
        (gl::IndexDataManager::indexSize):
        (gl::IndexDataManager::typeSize):
        (gl::IndexBuffer::IndexBuffer):
        (gl::IndexBuffer::~IndexBuffer):
        (gl::IndexBuffer::getBuffer):
        (gl::IndexBuffer::unmap):
        (gl::StreamingIndexBuffer::StreamingIndexBuffer):
        (gl::StreamingIndexBuffer::~StreamingIndexBuffer):
        (gl::StreamingIndexBuffer::map):
        (gl::StreamingIndexBuffer::reserveSpace):
        (gl::StaticIndexBuffer::StaticIndexBuffer):
        (gl::StaticIndexBuffer::~StaticIndexBuffer):
        (gl::StaticIndexBuffer::map):
        (gl::StaticIndexBuffer::reserveSpace):
        (gl::StaticIndexBuffer::lookupType):
        (gl::StaticIndexBuffer::lookupRange):
        (gl::StaticIndexBuffer::addRange):
        * src/libGLESv2/geometry/IndexDataManager.h:
        (gl::IndexBuffer::size):
        * src/libGLESv2/geometry/VertexDataManager.cpp:
        (gl::VertexDataManager::VertexDataManager):
        (gl::VertexDataManager::~VertexDataManager):
        (gl::VertexDataManager::writeAttributeData):
        (gl::VertexDataManager::prepareVertexData):
        (gl::VertexDataManager::spaceRequired):
        (gl::VertexDataManager::checkVertexCaps):
        (gl::VertexDataManager::typeIndex):
        (gl::VertexDataManager::setupAttributes):
        (gl::VertexBuffer::VertexBuffer):
        (gl::VertexBuffer::~VertexBuffer):
        (gl::VertexBuffer::unmap):
        (gl::VertexBuffer::getBuffer):
        (gl::ConstantVertexBuffer::ConstantVertexBuffer):
        (gl::ConstantVertexBuffer::~ConstantVertexBuffer):
        (gl::ArrayVertexBuffer::ArrayVertexBuffer):
        (gl::ArrayVertexBuffer::~ArrayVertexBuffer):
        (gl::ArrayVertexBuffer::addRequiredSpace):
        (gl::ArrayVertexBuffer::addRequiredSpaceFor):
        (gl::StreamingVertexBuffer::StreamingVertexBuffer):
        (gl::StreamingVertexBuffer::~StreamingVertexBuffer):
        (gl::StreamingVertexBuffer::map):
        (gl::StreamingVertexBuffer::reserveRequiredSpace):
        (gl::StaticVertexBuffer::StaticVertexBuffer):
        (gl::StaticVertexBuffer::~StaticVertexBuffer):
        (gl::StaticVertexBuffer::map):
        (gl::StaticVertexBuffer::reserveRequiredSpace):
        (gl::StaticVertexBuffer::lookupAttribute):
        (gl::VertexDataManager::formatConverter):
        * src/libGLESv2/geometry/VertexDataManager.h:
        (gl::ArrayVertexBuffer::size):
        (gl::VertexDataManager::dirtyCurrentValue):
        * src/libGLESv2/geometry/backend.cpp: Removed.
        * src/libGLESv2/geometry/backend.h: Removed.
        * src/libGLESv2/geometry/dx9.cpp: Removed.
        * src/libGLESv2/geometry/dx9.h: Removed.
        * src/libGLESv2/libGLESv2.cpp:
        * src/libGLESv2/libGLESv2.def:
        * src/libGLESv2/libGLESv2.vcproj:
        * src/libGLESv2/utilities.cpp:
        (gl::UniformComponentCount):
        (gl::UniformComponentType):
        (gl::ComputePixelSize):
        (gl::CheckTextureFormatType):
        (gl::IsColorRenderable):
        (gl::IsDepthRenderable):
        (gl::IsStencilRenderable):
        (es2dx::GetAlphaSize):
        (es2dx::GetRedSize):
        (es2dx::GetGreenSize):
        (es2dx::GetBlueSize):
        (es2dx::GetDepthSize):
        (es2dx::ConvertPrimitiveType):
        (dx2es::ConvertBackBufferFormat):
        (dx2es::ConvertDepthStencilFormat):
        * src/libGLESv2/utilities.h:

2011-01-17  Dan Bernstein  <mitz@apple.com>

        Rubber-stamped by Mark Rowe.

        Update xcodeproj svn:ignore to include xcuserdata.

        * ANGLE.xcodeproj: Modified property svn:ignore.
        * src/build_angle.xcodeproj: Modified property svn:ignore.

2010-12-01  Steve Falkenburg  <sfalken@apple.com>

        Reviewed by Adam Roben.

        vcproj changes can't be applied cleanly by the Windows EWS bot
        https://bugs.webkit.org/show_bug.cgi?id=50328

        * src/libEGL/libEGL.vcproj: Added property svn:eol-style.
        * src/libGLESv2/libGLESv2.vcproj: Added property svn:eol-style.

2010-11-03  Darin Adler  <darin@apple.com>

        Updated Xcode projects by opening them with Xcode 3.2.4.
        Updated svn:ignore for Xcode projects.

        * ANGLE.xcodeproj: Added property svn:ignore.
        * ANGLE.xcodeproj/project.pbxproj: Updated with Xcode 3.2.4.
        * src/build_angle.xcodeproj: Added property svn:ignore.
        * src/build_angle.xcodeproj/project.pbxproj: Updated with Xcode 3.2.4.

2010-09-01  Zhenyao Mo  <zmo@google.com>

        Reviewed by Kenneth Russell.

        Roll ANGLE under webkit to r402
        https://bugs.webkit.org/show_bug.cgi?id=45004

        * ANGLE.xcodeproj/project.pbxproj:
        * include/GLES2/gl2ext.h:
        * include/GLSLANG/ResourceLimits.h: Removed.
        * include/GLSLANG/ShaderLang.h:
        * src/compiler/BaseTypes.h:
        (getPrecisionString):
        (getBasicString):
        (IsSampler):
        (getQualifierString):
        * src/compiler/Initialize.cpp:
        (BuiltInConstants):
        (IdentifyBuiltIns):
        * src/compiler/Initialize.h:
        * src/compiler/InitializeDll.cpp:
        (InitProcess):
        (DetachProcess):
        (InitThread):
        (DetachThread):
        * src/compiler/InitializeDll.h:
        * src/compiler/InitializeParseContext.h:
        * src/compiler/Intermediate.cpp:
        (GetHigherPrecision):
        (TIntermediate::addBinaryMath):
        (TIntermediate::setAggregateOperator):
        (TIntermediate::addComma):
        (TIntermediate::postProcess):
        (TIntermBinary::promote):
        (CompareStruct):
        * src/compiler/OutputGLSL.cpp:
        (TOutputGLSL::writeFunctionParameters):
        (TOutputGLSL::visitUnary):
        (TOutputGLSL::visitBranch):
        * src/compiler/OutputHLSL.cpp:
        (sh::OutputHLSL::header):
        (sh::OutputHLSL::visitBinary):
        (sh::OutputHLSL::visitAggregate):
        (sh::OutputHLSL::handleExcessiveLoop):
        (sh::OutputHLSL::addConstructor):
        * src/compiler/ParseHelper.cpp:
        (TParseContext::constructorErrorCheck):
        (TParseContext::samplerErrorCheck):
        (TParseContext::paramErrorCheck):
        (TParseContext::findFunction):
        (TParseContext::executeInitializer):
        (TParseContext::addConstructor):
        (TParseContext::addConstStruct):
        (FreeParseContextIndex):
        (GetGlobalParseContext):
        * src/compiler/PoolAlloc.h:
        (TPoolAllocator::tHeader::tHeader):
        (pool_allocator::allocate):
        (pool_allocator::deallocate):
        * src/compiler/ShaderLang.cpp:
        (ShInitialize):
        (ShFinalize):
        (ShInitBuiltInResource):
        * src/compiler/SymbolTable.cpp:
        (TType::getStructSize):
        * src/compiler/SymbolTable.h:
        (TVariable::setQualifier):
        * src/compiler/Types.h:
        (TType::TType):
        (TType::getBasicType):
        (TType::setBasicType):
        (TType::getPrecision):
        (TType::setPrecision):
        (TType::getQualifier):
        (TType::setQualifier):
        (TType::getNominalSize):
        (TType::setNominalSize):
        (TType::isMatrix):
        (TType::setMatrix):
        (TType::isArray):
        (TType::getArraySize):
        (TType::setArraySize):
        (TType::getMaxArraySize):
        (TType::setMaxArraySize):
        (TType::clearArrayness):
        (TType::setArrayInformationType):
        (TType::getArrayInformationType):
        (TType::isVector):
        (TType::isScalar):
        (TType::setStruct):
        (TType::getTypeName):
        (TType::setTypeName):
        (TType::isField):
        (TType::getFieldName):
        (TType::setFieldName):
        (TType::getBasicString):
        (TType::getPrecisionString):
        (TType::getQualifierString):
        * src/compiler/glslang.l:
        * src/compiler/glslang.y:
        * src/compiler/intermediate.h:
        (TIntermNode::getLine):
        (TIntermNode::setLine):
        (TIntermTyped::getAsTyped):
        (TIntermTyped::setType):
        (TIntermTyped::getType):
        (TIntermTyped::getTypePointer):
        (TIntermTyped::getBasicType):
        (TIntermTyped::getQualifier):
        (TIntermTyped::getPrecision):
        (TIntermTyped::getNominalSize):
        (TIntermTyped::isMatrix):
        (TIntermTyped::isArray):
        (TIntermTyped::isVector):
        (TIntermTyped::isScalar):
        (TIntermTyped::getBasicString):
        (TIntermTyped::getQualifierString):
        (TIntermSymbol::getId):
        (TIntermSymbol::getSymbol):
        (TIntermOperator::setOp):
        (TIntermBinary::setLeft):
        (TIntermBinary::setRight):
        (TIntermBinary::getLeft):
        (TIntermBinary::getRight):
        (TIntermUnary::setOperand):
        (TIntermUnary::getOperand):
        (TIntermAggregate::getAsAggregate):
        (TIntermAggregate::getSequence):
        (TIntermAggregate::setName):
        (TIntermAggregate::getName):
        (TIntermAggregate::setUserDefined):
        (TIntermAggregate::isUserDefined):
        (TIntermAggregate::getQualifier):
        (TIntermAggregate::setOptimize):
        (TIntermAggregate::setDebug):
        (TIntermSelection::getCondition):
        (TIntermSelection::getTrueBlock):
        (TIntermSelection::getFalseBlock):
        (TIntermSelection::getAsSelectionNode):
        * src/compiler/parseConst.cpp:
        (TConstTraverser::TConstTraverser):
        * src/compiler/preprocessor/atom.c:
        (InitAtomTable):
        * src/compiler/preprocessor/atom.h:
        * src/compiler/preprocessor/compile.h:
        * src/compiler/preprocessor/cpp.c:
        * src/compiler/preprocessor/cpp.h:
        * src/compiler/preprocessor/cppstruct.c:
        * src/compiler/preprocessor/memory.c:
        * src/compiler/preprocessor/memory.h:
        * src/compiler/preprocessor/parser.h:
        * src/compiler/preprocessor/preprocess.h:
        * src/compiler/preprocessor/scanner.c:
        * src/compiler/preprocessor/scanner.h:
        * src/compiler/preprocessor/slglobals.h:
        * src/compiler/preprocessor/symbols.c:
        (NewSymbol):
        * src/compiler/preprocessor/symbols.h:
        * src/compiler/preprocessor/tokens.c:
        (RecordToken):
        * src/compiler/preprocessor/tokens.h:
        * src/libEGL/Display.cpp:
        (egl::Display::Display):
        (egl::Display::initialize):
        (egl::Display::terminate):
        (egl::Display::createDevice):
        (egl::Display::createWindowSurface):
        (egl::Display::createContext):
        (egl::Display::getMultiSampleSupport):
        (egl::Display::getCompressedTextureSupport):
        * src/libEGL/Display.h:
        * src/libEGL/Surface.cpp:
        (egl::Surface::Surface):
        (egl::Surface::resetSwapChain):
        (egl::Surface::getWindowHandle):
        (egl::Surface::writeRecordableFlipState):
        (egl::Surface::applyFlipState):
        (egl::Surface::releaseRecordedState):
        (egl::Surface::checkForWindowResize):
        (egl::Surface::swap):
        * src/libEGL/Surface.h:
        * src/libEGL/libEGL.cpp:
        * src/libEGL/libEGL.vcproj:
        * src/libGLESv2/Blit.cpp:
        (gl::Blit::setVertexShader):
        (gl::Blit::setPixelShader):
        (gl::Blit::setFormatConvertShaders):
        * src/libGLESv2/Buffer.cpp:
        (gl::Buffer::Buffer):
        * src/libGLESv2/Buffer.h:
        * src/libGLESv2/Context.cpp:
        (gl::Context::Context):
        (gl::Context::~Context):
        (gl::Context::makeCurrent):
        (gl::Context::markAllStateDirty):
        (gl::Context::getReadFramebufferHandle):
        (gl::Context::getDrawFramebufferHandle):
        (gl::Context::getRenderbufferHandle):
        (gl::Context::getArrayBufferHandle):
        (gl::Context::setVertexAttribState):
        (gl::Context::createBuffer):
        (gl::Context::createProgram):
        (gl::Context::createShader):
        (gl::Context::createTexture):
        (gl::Context::createRenderbuffer):
        (gl::Context::deleteBuffer):
        (gl::Context::deleteShader):
        (gl::Context::deleteProgram):
        (gl::Context::deleteTexture):
        (gl::Context::deleteRenderbuffer):
        (gl::Context::getBuffer):
        (gl::Context::getShader):
        (gl::Context::getProgram):
        (gl::Context::getTexture):
        (gl::Context::getRenderbuffer):
        (gl::Context::getReadFramebuffer):
        (gl::Context::getDrawFramebuffer):
        (gl::Context::bindArrayBuffer):
        (gl::Context::bindElementArrayBuffer):
        (gl::Context::bindTexture2D):
        (gl::Context::bindTextureCubeMap):
        (gl::Context::bindReadFramebuffer):
        (gl::Context::bindDrawFramebuffer):
        (gl::Context::bindRenderbuffer):
        (gl::Context::useProgram):
        (gl::Context::setFramebufferZero):
        (gl::Context::setRenderbufferStorage):
        (gl::Context::getFramebuffer):
        (gl::Context::getArrayBuffer):
        (gl::Context::getElementArrayBuffer):
        (gl::Context::getCurrentProgram):
        (gl::Context::getTexture2D):
        (gl::Context::getTextureCubeMap):
        (gl::Context::getSamplerTexture):
        (gl::Context::getFloatv):
        (gl::Context::getIntegerv):
        (gl::Context::getQueryParameterInfo):
        (gl::Context::applyRenderTarget):
        (gl::Context::applyState):
        (gl::Context::applyIndexBuffer):
        (gl::Context::readPixels):
        (gl::Context::clear):
        (gl::Context::finish):
        (gl::Context::flush):
        (gl::Context::supportsShaderModel3):
        (gl::Context::getMaxSupportedSamples):
        (gl::Context::getNearestSupportedSamples):
        (gl::Context::supportsCompressedTextures):
        (gl::Context::detachBuffer):
        (gl::Context::detachTexture):
        (gl::Context::detachFramebuffer):
        (gl::Context::detachRenderbuffer):
        (gl::Context::getIncompleteTexture):
        (gl::Context::initExtensionString):
        (gl::Context::blitFramebuffer):
        * src/libGLESv2/Context.h:
        (gl::AttributeState::AttributeState):
        * src/libGLESv2/Framebuffer.cpp:
        (gl::Framebuffer::Framebuffer):
        (gl::Framebuffer::~Framebuffer):
        (gl::Framebuffer::lookupRenderbuffer):
        (gl::Framebuffer::setColorbuffer):
        (gl::Framebuffer::setDepthbuffer):
        (gl::Framebuffer::setStencilbuffer):
        (gl::Framebuffer::detachTexture):
        (gl::Framebuffer::detachRenderbuffer):
        (gl::Framebuffer::getRenderTargetSerial):
        (gl::Framebuffer::getRenderTarget):
        (gl::Framebuffer::getDepthStencil):
        (gl::Framebuffer::getDepthbufferSerial):
        (gl::Framebuffer::getStencilbufferSerial):
        (gl::Framebuffer::getColorbuffer):
        (gl::Framebuffer::getDepthbuffer):
        (gl::Framebuffer::getStencilbuffer):
        (gl::Framebuffer::getColorbufferHandle):
        (gl::Framebuffer::getDepthbufferHandle):
        (gl::Framebuffer::getStencilbufferHandle):
        (gl::Framebuffer::hasStencil):
        (gl::Framebuffer::isMultisample):
        (gl::Framebuffer::completeness):
        (gl::DefaultFramebuffer::DefaultFramebuffer):
        (gl::Framebuffer::getSamples):
        (gl::DefaultFramebuffer::completeness):
        * src/libGLESv2/Framebuffer.h:
        * src/libGLESv2/Program.cpp:
        (gl::Program::Program):
        (gl::Program::~Program):
        (gl::Program::attachShader):
        (gl::Program::detachShader):
        (gl::Program::linkVaryings):
        (gl::Program::link):
        (gl::Program::unlink):
        (gl::Program::release):
        (gl::Program::addRef):
        (gl::Program::getRefCount):
        (gl::Program::getDxViewportLocation):
        * src/libGLESv2/Program.h:
        * src/libGLESv2/RefCountObject.cpp: Added.
        (gl::RefCountObject::RefCountObject):
        (gl::RefCountObject::~RefCountObject):
        (gl::RefCountObject::addRef):
        (gl::RefCountObject::release):
        (gl::RefCountObjectBindingPointer::set):
        * src/libGLESv2/RefCountObject.h: Added.
        (gl::RefCountObject::id):
        (gl::RefCountObjectBindingPointer::RefCountObjectBindingPointer):
        (gl::RefCountObjectBindingPointer::~RefCountObjectBindingPointer):
        (gl::RefCountObjectBindingPointer::get):
        (gl::RefCountObjectBindingPointer::id):
        (gl::RefCountObjectBindingPointer::operator ! ):
        (gl::BindingPointer::set):
        (gl::BindingPointer::get):
        (gl::BindingPointer::operator -> ):
        * src/libGLESv2/Renderbuffer.cpp:
        (gl::Renderbuffer::Renderbuffer):
        (gl::Renderbuffer::~Renderbuffer):
        (gl::Renderbuffer::isColorbuffer):
        (gl::Renderbuffer::isDepthbuffer):
        (gl::Renderbuffer::isStencilbuffer):
        (gl::Renderbuffer::getRenderTarget):
        (gl::Renderbuffer::getDepthStencil):
        (gl::Renderbuffer::getWidth):
        (gl::Renderbuffer::getHeight):
        (gl::Renderbuffer::getFormat):
        (gl::Renderbuffer::getD3DFormat):
        (gl::Renderbuffer::getSerial):
        (gl::Renderbuffer::setStorage):
        (gl::RenderbufferStorage::RenderbufferStorage):
        (gl::RenderbufferStorage::~RenderbufferStorage):
        (gl::RenderbufferStorage::isColorbuffer):
        (gl::RenderbufferStorage::isDepthbuffer):
        (gl::RenderbufferStorage::isStencilbuffer):
        (gl::RenderbufferStorage::getRenderTarget):
        (gl::RenderbufferStorage::getDepthStencil):
        (gl::RenderbufferStorage::getWidth):
        (gl::RenderbufferStorage::getHeight):
        (gl::RenderbufferStorage::setSize):
        (gl::RenderbufferStorage::getFormat):
        (gl::RenderbufferStorage::getD3DFormat):
        (gl::RenderbufferStorage::getSamples):
        (gl::RenderbufferStorage::getSerial):
        (gl::RenderbufferStorage::issueSerial):
        (gl::Colorbuffer::Colorbuffer):
        (gl::Colorbuffer::isColorbuffer):
        (gl::Colorbuffer::getRedSize):
        (gl::Colorbuffer::getGreenSize):
        (gl::Colorbuffer::getBlueSize):
        (gl::Colorbuffer::getAlphaSize):
        (gl::DepthStencilbuffer::DepthStencilbuffer):
        (gl::DepthStencilbuffer::~DepthStencilbuffer):
        (gl::DepthStencilbuffer::isDepthbuffer):
        (gl::DepthStencilbuffer::isStencilbuffer):
        (gl::DepthStencilbuffer::getDepthSize):
        (gl::DepthStencilbuffer::getStencilSize):
        (gl::DepthStencilbuffer::getDepthStencil):
        (gl::Depthbuffer::Depthbuffer):
        (gl::Depthbuffer::~Depthbuffer):
        (gl::Depthbuffer::isDepthbuffer):
        (gl::Depthbuffer::isStencilbuffer):
        (gl::Stencilbuffer::Stencilbuffer):
        (gl::Stencilbuffer::~Stencilbuffer):
        (gl::Stencilbuffer::isDepthbuffer):
        (gl::Stencilbuffer::isStencilbuffer):
        * src/libGLESv2/Renderbuffer.h:
        (gl::Renderbuffer::getStorage):
        * src/libGLESv2/ResourceManager.cpp: Added.
        (gl::ResourceManager::ResourceManager):
        (gl::ResourceManager::~ResourceManager):
        (gl::ResourceManager::addRef):
        (gl::ResourceManager::release):
        (gl::ResourceManager::createBuffer):
        (gl::ResourceManager::createShader):
        (gl::ResourceManager::createProgram):
        (gl::ResourceManager::createTexture):
        (gl::ResourceManager::createRenderbuffer):
        (gl::ResourceManager::deleteBuffer):
        (gl::ResourceManager::deleteShader):
        (gl::ResourceManager::deleteProgram):
        (gl::ResourceManager::deleteTexture):
        (gl::ResourceManager::deleteRenderbuffer):
        (gl::ResourceManager::getBuffer):
        (gl::ResourceManager::getShader):
        (gl::ResourceManager::getTexture):
        (gl::ResourceManager::getProgram):
        (gl::ResourceManager::getRenderbuffer):
        (gl::ResourceManager::setRenderbuffer):
        (gl::ResourceManager::checkBufferAllocation):
        (gl::ResourceManager::checkTextureAllocation):
        (gl::ResourceManager::checkRenderbufferAllocation):
        * src/libGLESv2/ResourceManager.h: Added.
        * src/libGLESv2/Shader.cpp:
        (gl::Shader::Shader):
        (gl::Shader::addRef):
        (gl::Shader::release):
        (gl::Shader::getRefCount):
        (gl::Shader::parseVaryings):
        (gl::VertexShader::VertexShader):
        (gl::FragmentShader::FragmentShader):
        * src/libGLESv2/Shader.h:
        * src/libGLESv2/Texture.cpp:
        (gl::Texture::Image::Image):
        (gl::Texture::Texture):
        (gl::Texture::getBlitter):
        (gl::Texture::selectFormat):
        (gl::Texture::loadImageData):
        (gl::Texture::loadAlphaImageData):
        (gl::Texture::loadLuminanceImageData):
        (gl::Texture::loadLuminanceAlphaImageData):
        (gl::Texture::loadRGBUByteImageData):
        (gl::Texture::loadRGB565ImageData):
        (gl::Texture::loadRGBAUByteImageData):
        (gl::Texture::loadRGBA4444ImageData):
        (gl::Texture::loadRGBA5551ImageData):
        (gl::Texture::loadBGRAImageData):
        (gl::Texture::createSurface):
        (gl::Texture::setImage):
        (gl::Texture::setCompressedImage):
        (gl::Texture::subImage):
        (gl::Texture::subImageCompressed):
        (gl::Texture2D::Texture2D):
        (gl::Texture2D::getFormat):
        (gl::Texture2D::setCompressedImage):
        (gl::Texture2D::subImage):
        (gl::Texture2D::subImageCompressed):
        (gl::Texture2D::copyImage):
        (gl::Texture2D::copySubImage):
        (gl::Texture2D::isCompressed):
        (gl::Texture2D::getColorbuffer):
        (gl::TextureCubeMap::TextureCubeMap):
        (gl::TextureCubeMap::getFormat):
        (gl::TextureCubeMap::setCompressedImage):
        (gl::TextureCubeMap::subImage):
        (gl::TextureCubeMap::subImageCompressed):
        (gl::TextureCubeMap::isCompressed):
        (gl::TextureCubeMap::copyImage):
        (gl::TextureCubeMap::copySubImage):
        (gl::TextureCubeMap::getColorbuffer):
        (gl::Texture::TextureColorbufferProxy::addRef):
        (gl::Texture::TextureColorbufferProxy::release):
        (gl::Texture::TextureColorbufferProxy::getWidth):
        (gl::Texture::TextureColorbufferProxy::getHeight):
        (gl::Texture::TextureColorbufferProxy::getFormat):
        * src/libGLESv2/Texture.h:
        * src/libGLESv2/libGLESv2.cpp:
        * src/libGLESv2/libGLESv2.def:
        * src/libGLESv2/libGLESv2.vcproj:
        * src/libGLESv2/main.h:
        * src/libGLESv2/utilities.cpp:
        (gl::ComputeCompressedPitch):
        (gl::ComputeCompressedSize):
        (gl::IsCompressed):
        (gl::ComputePixelSize):
        (gl::CheckTextureFormatType):
        (es2dx::ConvertRenderbufferFormat):
        (es2dx::GetSamplesFromMultisampleType):
        (es2dx::GetMultisampleTypeFromSamples):
        * src/libGLESv2/utilities.h:

2010-08-17  Chris Marrin  <cmarrin@apple.com>

        Unreviewed.

        Moved previous link error fix to Base.xcconfig.

        * ANGLE.xcodeproj/project.pbxproj:
        * Configurations/Base.xcconfig:

2010-08-17  Chris Marrin  <cmarrin@apple.com>

        Unreviewed.

        Got rid of link errors in WebCore.

        Changed GCC_INLINES_ARE_PRIVATE_EXTERN to YES and
        GCC_SYMBOLS_PRIVATE_EXTERN to NO to match WebCore
        flags.

        * ANGLE.xcodeproj/project.pbxproj:

2010-08-04  Kenneth Russell  <kbr@google.com>

        Reviewed by Dimitri Glazkov.

        Update ANGLE to r352
        https://bugs.webkit.org/show_bug.cgi?id=43500

        Updated ANGLE to r352 (July 26, 2010). Built WebKit to test.

        * include/GLSLANG/ShaderLang.h:
        * src/compiler/Initialize.cpp:
        (BuiltInFunctionsCommon):
        (BuiltInFunctionsVertex):
        (BuiltInFunctionsFragment):
        (StandardUniforms):
        (DefaultPrecisionVertex):
        (DefaultPrecisionFragment):
        (BuiltInConstants):
        (TBuiltIns::initialize):
        (IdentifyBuiltIns):
        * src/compiler/Initialize.h:
        (TBuiltIns::getBuiltInStrings):
        * src/compiler/OutputGLSL.cpp:
        (TOutputGLSL::visitSelection):
        * src/compiler/ShHandle.h:
        (TCompiler::getLanguage):
        (TCompiler::getSpec):
        (TCompiler::getSymbolTable):
        (TCompiler::getInfoSink):
        * src/compiler/ShaderLang.cpp:
        (InitializeSymbolTable):
        (GenerateBuiltInSymbolTable):
        (ShInitialize):
        (ShConstructCompiler):
        (ShFinalize):
        (ShCompile):
        * src/compiler/SymbolTable.h:
        (TSymbolTable::atBuiltInLevel):
        (TSymbolTable::atGlobalLevel):
        (TSymbolTable::push):
        (TSymbolTable::getGlobalLevel):
        (TSymbolTable::currentLevel):
        * src/libGLESv2/Shader.cpp:
        (gl::Shader::Shader):
        (gl::Shader::compileToHLSL):

2010-08-03  Mark Rowe  <mrowe@apple.com>

        Rubber-stamped by Adele Peterson.

        Remove some unnecessary files from the ANGLE tree.

        * src/compiler/tools/COPYING.bison: Removed.
        * src/compiler/tools/COPYING.flex: Removed.
        * src/compiler/tools/README: Removed.
        * src/compiler/tools/bison.hairy: Removed.
        * src/compiler/tools/bison.simple: Removed.

2010-08-03  Mark Rowe  <mrowe@apple.com>

        Rubber-stamped by Adele Peterson.

        Clean up the ANGLE Xcode project.

        Main changes include:
        • Adding a Production configuration.
        • Modifying the library name from libangle.a to libANGLE.a.
        • Installing the headers in a subdirectory of /usr/local/include to avoid polluting the top-level directory.
        • Generating derived sources in to the built products directory so they're saved along with the symroot.
        • Switching to using .xcconfig files for maximum cleanliness.

        * ANGLE.xcodeproj/project.pbxproj:
        * Configurations/ANGLE.xcconfig: Added.
        * Configurations/Base.xcconfig: Added.
        * Configurations/DebugRelease.xcconfig: Added.

2010-08-02  Paul Sawaya  <psawaya@apple.com>

        Reviewed by Adele Peterson.

        Add ANGLE library to WebKit. From the repository (http://angleproject.googlecode.com) as of July 22.
        https://bugs.webkit.org/show_bug.cgi?id=42789

