// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2020 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ConvertVertex.comp.00000004.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kConvertVertex_comp_00000004[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x9d,0x98,0x77,0x70,0x57,0x45,
    0x10,0xc7,0xdf,0xa5,0x0b,0xa1,0x04,0x48,0x10,0x81,0x40,0x28,0x1a,0x20,0x84,0x00,
    0xa1,0x07,0xc4,0x41,0xc4,0x82,0x05,0x15,0x15,0x46,0x2c,0x88,0xc6,0x06,0x16,0xb0,
    0x83,0x82,0x4a,0x13,0x0b,0x0a,0x4a,0x11,0x1b,0xd6,0x08,0x58,0xb1,0x61,0x47,0x14,
    0x4b,0xec,0x8a,0x0d,0x7b,0x07,0x67,0x9c,0xb1,0xa0,0x20,0xa0,0xb7,0xef,0x3e,0x0b,
    0xcb,0x4d,0xfe,0xf2,0x37,0x73,0xf3,0xde,0x7e,0x77,0xf7,0x7b,0x7b,0x7b,0x7b,0xe5,
    0xfd,0x32,0x33,0xda,0xe7,0x26,0x89,0x4b,0xea,0x25,0x79,0xc9,0x40,0x97,0xa4,0xbf,
    0x82,0x24,0x23,0x91,0xd7,0xfa,0x49,0x4e,0xfa,0x1c,0x36,0xfc,0x88,0xe1,0xe5,0x13,
    0x27,0x8d,0x2b,0xaf,0xec,0x55,0x21,0xfa,0x86,0x49,0x66,0x6a,0x27,0xba,0x46,0xde,
    0x26,0xdb,0x3f,0xb3,0x7c,0x1b,0x7f,0xe2,0x69,0x13,0x04,0xff,0xd7,0xb7,0xc6,0x1e,
    0xcf,0x4a,0xb9,0x92,0x64,0x30,0xb6,0xd2,0xf6,0xf7,0xd6,0x1d,0x43,0x37,0x49,0x7b,
    0x9e,0x8a,0x39,0xb0,0x2c,0x83,0x65,0x80,0xe5,0x19,0x2c,0x13,0x2c,0xdf,0x60,0x59,
    0x60,0x8d,0x0d,0x96,0x0d,0xd6,0xcc,0x60,0x39,0x60,0xbb,0x1b,0x2c,0x17,0xac,0x95,
    0xc1,0xf2,0xc0,0xda,0x1a,0x6c,0x37,0xb0,0x0e,0x06,0xab,0x07,0x56,0x6a,0xb0,0xfa,
    0x60,0x65,0x06,0xcb,0x07,0xab,0x30,0x58,0x03,0xb0,0x4a,0xc9,0xb1,0x1f,0x95,0x8e,
    0x77,0x98,0x1f,0xcd,0x49,0xc4,0xaa,0xb9,0x18,0x17,0xe5,0x4c,0xec,0xc7,0x91,0x0b,
    0xb1,0x3f,0xc5,0x3f,0xdb,0xed,0xd0,0x05,0xb9,0x84,0x9c,0x8a,0xbc,0x39,0xe2,0xdb,
    0x52,0x07,0xdf,0x16,0xc3,0xb7,0x35,0xe2,0xdb,0x0a,0x9f,0xca,0xff,0x32,0xce,0x56,
    0xc8,0x55,0x2e,0xc8,0x2d,0x7c,0x6b,0xea,0x47,0x91,0x91,0xda,0x67,0xa6,0x7c,0xf2,
    0x5e,0xe8,0x6d,0x72,0xc8,0x67,0x92,0x3e,0xb3,0xd2,0xbc,0xe7,0x12,0x57,0x89,0x8f,
    0x29,0x8f,0x77,0xc5,0x8b,0xbc,0x77,0x01,0x3e,0x25,0xde,0xbe,0x09,0xf5,0x94,0x8b,
    0x7f,0x11,0xef,0x05,0xe8,0x9b,0xf3,0x5e,0x04,0x5f,0x4b,0xc3,0x57,0x84,0x4d,0x5b,
    0xe2,0x11,0xac,0xd8,0x57,0x8b,0xd6,0xc4,0xff,0x69,0x12,0xc3,0x9e,0xd4,0x85,0xf0,
    0x0c,0x40,0xde,0x0b,0x4c,0xc6,0x5c,0x4a,0xfc,0x32,0x0f,0x5d,0x90,0x3b,0x19,0xff,
    0xce,0xd8,0xe6,0x18,0x7d,0x37,0x6a,0x57,0xe5,0x4a,0x62,0xee,0x42,0x0e,0xab,0x98,
    0x47,0x95,0x07,0x51,0xaf,0x6a,0x3f,0x34,0x92,0x0f,0xc5,0xbe,0x99,0x67,0x39,0xdc,
    0xf8,0x8d,0x64,0xbe,0x45,0x96,0xbc,0x8d,0x66,0x6e,0x5a,0x7b,0x54,0xeb,0xaf,0x98,
    0x3a,0x3b,0x89,0x78,0x4f,0x26,0x96,0x71,0x8c,0x57,0xe4,0x53,0x4c,0x7c,0xd2,0x5f,
    0xb5,0x99,0xe3,0xd3,0xd1,0xd9,0xf1,0x8d,0x67,0x3d,0x68,0x1c,0x67,0x63,0xaf,0xfa,
    0x0b,0x58,0x57,0x2a,0x4f,0x31,0x71,0x8a,0x7c,0xa9,0xec,0x31,0x99,0x3b,0xe5,0x69,
    0xac,0x25,0xe5,0x9b,0x65,0xfc,0x45,0x9e,0x17,0xe5,0xef,0x2e,0xe6,0x44,0xe2,0xbb,
    0x87,0x5a,0x28,0x35,0xfc,0xf7,0x0b,0xbf,0xff,0xa9,0xbc,0x9c,0xf9,0x13,0xfb,0x57,
    0xb1,0xb7,0x79,0xac,0x35,0xf3,0x2b,0x79,0xdc,0x90,0x8e,0x66,0xea,0xf3,0x92,0xc7,
    0xcd,0x26,0x8f,0xb2,0xbe,0x36,0xc3,0xf3,0x0f,0x31,0x6d,0x21,0x8f,0x22,0x6f,0x05,
    0x6b,0xee,0xe5,0x6d,0xf8,0x65,0x62,0xbf,0x9d,0x3e,0xb6,0x61,0xbf,0x9d,0x7d,0x56,
    0xe3,0x92,0x17,0x67,0xf2,0x2c,0xcf,0x01,0x2e,0xec,0xbd,0x65,0x5e,0x12,0x3f,0x59,
    0xa3,0x82,0xd5,0x12,0x73,0x6f,0x5f,0x65,0x19,0xd4,0x46,0x42,0x5f,0x7f,0x7b,0x24,
    0x9b,0x3e,0xd2,0xb5,0xe5,0xc2,0x78,0x55,0x6e,0x12,0xc9,0x7b,0x18,0x59,0xd6,0xd8,
    0x5e,0x91,0xbe,0x34,0xd2,0x77,0x89,0xe4,0xb2,0xc8,0xbe,0x5b,0xa4,0xef,0x1e,0xe9,
    0xfb,0x22,0xef,0x23,0x51,0xfa,0xf7,0xdd,0x5c,0xc8,0x83,0xd4,0xd0,0x40,0xc6,0x5d,
    0x0f,0x5c,0x6c,0x64,0x7d,0xd5,0x77,0x61,0x4d,0x56,0x1b,0x9b,0x7c,0x17,0xf0,0x07,
    0xbc,0x8d,0xcc,0x65,0x03,0x17,0xfc,0x04,0xff,0xcb,0x67,0xa2,0x11,0x67,0xe1,0x16,
    0x6f,0x2f,0xba,0x86,0xbe,0x09,0x26,0xf9,0x91,0xf7,0x6d,0xbe,0x73,0x79,0x17,0x6c,
    0x90,0xec,0x53,0x2e,0xc4,0x20,0xef,0x4d,0x78,0xdf,0xec,0xf5,0x4d,0xf1,0x91,0xe7,
    0x26,0xcf,0x55,0xe8,0x9f,0x45,0x70,0x8b,0xbe,0x39,0x7a,0x79,0x6a,0x6c,0xbb,0xbb,
    0x90,0xe7,0x87,0x88,0xad,0x85,0x0b,0x58,0x2d,0xf1,0x88,0xdc,0xcc,0xb7,0x42,0x7c,
    0x9b,0xb9,0x9d,0xf9,0x68,0x59,0x47,0x3e,0x5a,0x81,0x5f,0xe9,0x6d,0x44,0x6e,0xed,
    0x02,0x56,0x6b,0x6c,0x8a,0xe9,0x73,0x2a,0x36,0x6d,0x5c,0xb0,0x2b,0x66,0x7c,0x32,
    0xcf,0x6d,0x4c,0x8c,0x6d,0x5d,0x98,0x7b,0xcd,0x71,0x09,0x39,0x5e,0x6e,0x38,0xdb,
    0xb9,0x80,0x6b,0x8e,0xdb,0xbb,0xe0,0xd7,0x8e,0x1c,0x77,0x34,0x39,0x16,0x5d,0x07,
    0xdf,0x3a,0x32,0x26,0x79,0x97,0xfc,0xe8,0x18,0x3b,0x9a,0xbe,0x3b,0xd1,0xb7,0xc4,
    0x25,0xf5,0x25,0x72,0x3f,0xdf,0x87,0xac,0xbd,0xce,0x2e,0x9c,0xf7,0xa5,0xe8,0xa5,
    0x1e,0x3b,0xe3,0x2b,0xfa,0xae,0x2e,0xd4,0xa8,0xe8,0xa4,0xf6,0xba,0x1a,0xdf,0x72,
    0x17,0xce,0xaf,0x32,0xf4,0x52,0xab,0xe5,0xa6,0xdf,0x0a,0xd3,0xaf,0xd4,0x69,0x85,
    0xe1,0xed,0xe1,0x42,0x6d,0x8b,0x4e,0x6a,0xb6,0x47,0xca,0x9b,0x93,0xfa,0xf5,0x94,
    0x3c,0x52,0xdb,0xdd,0x0d,0x5f,0xa5,0x0b,0xeb,0xeb,0x65,0x72,0xde,0xcb,0x05,0xac,
    0xa7,0xa9,0xa9,0x5e,0xe4,0xa1,0x88,0x3c,0x14,0x19,0xff,0xde,0xd1,0x9c,0xf5,0x71,
    0x01,0x5b,0x6e,0xea,0xb0,0x8f,0xdb,0xb5,0x0e,0x0b,0x8d,0x7f,0x3f,0xfa,0x17,0x5b,
    0x59,0x57,0xfd,0xc8,0x85,0xec,0x09,0xfd,0x5d,0x38,0xff,0xfb,0x52,0xeb,0x7d,0x7d,
    0xeb,0x4d,0x3f,0xf5,0xd9,0x2f,0xe4,0x8c,0xe9,0xe3,0x7d,0x73,0x39,0xc3,0xf4,0xbd,
    0x1e,0xfb,0x48,0xbe,0xa9,0x85,0x0e,0xd8,0x68,0xbd,0x74,0xe1,0x9c,0xec,0x64,0x6c,
    0xca,0xc0,0xb5,0x4e,0xbb,0xe2,0x57,0x66,0x6c,0xca,0xe1,0x57,0x9e,0x0a,0x78,0xba,
    0x19,0x9b,0xee,0xe0,0xca,0xd3,0x03,0x3f,0xc1,0x35,0x57,0x3d,0xe1,0xef,0x61,0xb8,
    0x7a,0xc1,0x55,0x69,0xb8,0x7a,0x83,0xef,0xc8,0x31,0xbe,0x82,0x6f,0xf7,0x63,0x14,
    0xd9,0xe6,0xa6,0x51,0x1d,0xb9,0x69,0x60,0xde,0x1b,0x92,0x9b,0xc6,0x66,0x4f,0xeb,
    0xcf,0x99,0xa2,0x7d,0x0e,0xc0,0x67,0x36,0x9c,0x03,0xc1,0xaa,0xcc,0x98,0xf6,0x06,
    0x1f,0xc4,0x5c,0xf7,0xdf,0x81,0x05,0x8e,0xc1,0xf0,0x4a,0x8c,0x83,0x4d,0x8c,0x05,
    0xdc,0x87,0xe5,0xd7,0xc4,0xc4,0xd5,0x94,0xb8,0x0a,0x4d,0x5c,0x43,0x92,0x5d,0xf7,
    0xde,0x03,0x22,0xf9,0xd8,0x48,0x1e,0x13,0xc9,0xc7,0x47,0xf2,0xd8,0x48,0x9e,0x14,
    0xc9,0x17,0x47,0xf2,0xcc,0x48,0xbe,0x36,0x92,0x17,0x47,0xf2,0x12,0x23,0xcb,0xb9,
    0x7e,0x6f,0xa4,0x7f,0xda,0xc8,0x72,0x8e,0xbf,0x16,0xe9,0xdf,0x8b,0xfc,0x3f,0x88,
    0xe4,0x2f,0x93,0x5d,0xcf,0xa6,0x6f,0xa2,0x79,0xdb,0x97,0x3c,0x6a,0x3d,0xed,0x47,
    0x3d,0x0d,0x35,0x36,0xc3,0xc0,0x67,0x30,0x8f,0xfb,0xe3,0x37,0x8c,0x79,0x1c,0x02,
    0xa6,0xf6,0x07,0x46,0x9c,0x07,0xd5,0xc1,0x39,0x1c,0x5c,0xeb,0xe5,0x60,0xfc,0x86,
    0xc3,0x79,0x00,0x98,0xda,0x1f,0xc2,0x5c,0x2a,0xe7,0x61,0x70,0x1e,0x6a,0x6c,0x46,
    0x80,0xeb,0xde,0x7d,0x04,0x7e,0x23,0x8c,0xcd,0x91,0xf0,0xe8,0x39,0x75,0x14,0xd8,
    0xc8,0x34,0xf7,0x01,0x3b,0x1a,0x5f,0xd1,0xc9,0x9e,0x3f,0x2a,0xd9,0xb9,0xe7,0x8b,
    0xee,0x18,0xdf,0x46,0x51,0x7b,0xc7,0x50,0xaf,0xa3,0x91,0x47,0x99,0xbe,0x8e,0xa3,
    0x1e,0x65,0x3c,0x63,0x90,0x55,0x77,0x02,0x71,0x88,0xee,0x78,0x64,0xdd,0x7b,0x4f,
    0x64,0xbf,0x1a,0x43,0x3d,0x8a,0xcd,0xb1,0xe0,0xea,0x7f,0x2a,0xb5,0xac,0x73,0x72,
    0x1a,0x58,0x55,0x9a,0xa3,0x9c,0xf4,0x0e,0x7b,0x06,0xf7,0xdc,0x6a,0xf4,0xea,0x7b,
    0x26,0x3a,0xe1,0x1d,0x8b,0xac,0x79,0x9d,0x40,0x5e,0xc7,0x1b,0xfb,0xb3,0xc0,0x97,
    0x91,0x9f,0x73,0xc0,0xce,0x26,0x3f,0x13,0x4d,0x7e,0x44,0x77,0xae,0x6f,0x8b,0xc8,
    0xc7,0xb9,0x86,0xe7,0x3c,0xc6,0x7c,0x3f,0x3c,0xe7,0x83,0x49,0xee,0x6b,0xbc,0x85,
    0xdc,0x5b,0x2f,0x04,0xaf,0xe4,0x4e,0x3d,0x19,0xdf,0x8b,0xd0,0x49,0xcc,0x93,0x90,
    0x95,0xf7,0x92,0x88,0x77,0x32,0x98,0xe5,0xbd,0x0c,0x7c,0x0a,0x77,0x71,0xe5,0x9d,
    0x8a,0x4e,0x78,0x2f,0x46,0xd6,0x5c,0x5c,0x4e,0x2e,0xa6,0x99,0xbe,0xae,0x00,0xd7,
    0x5c,0x5c,0x09,0xa6,0xb9,0x98,0x61,0x72,0x21,0xba,0xe9,0xbe,0xcd,0x21,0x17,0xd3,
    0x0d,0xcf,0x6c,0x62,0xd6,0xbd,0xf1,0x2a,0xbe,0x01,0x66,0x13,0xcb,0x4c,0x30,0x39,
    0x07,0x67,0xe0,0x3f,0xc7,0xf8,0x5f,0x1d,0x8d,0xf9,0x1a,0xb0,0x91,0xc4,0x31,0xd7,
    0xc4,0x21,0xba,0xeb,0x7c,0xbb,0x1e,0x9e,0xeb,0xe8,0xe3,0xda,0x64,0xe7,0x9d,0x6f,
    0x2e,0xba,0xeb,0x4d,0x1f,0x37,0xb0,0xdf,0xa9,0x3c,0x9f,0x3e,0x2f,0x27,0xe6,0x1b,
    0xf9,0x4e,0x99,0x6f,0xc6,0x71,0x13,0x7e,0x37,0x9a,0xf3,0x67,0x01,0xf8,0x3c,0xd3,
    0xef,0x82,0xa8,0xdf,0xb9,0xa6,0x9f,0x85,0xec,0x9b,0x9a,0x87,0x85,0x51,0x1e,0x66,
    0x20,0x4f,0x44,0x5e,0x64,0x7c,0x6f,0x66,0x5d,0x88,0xef,0x62,0x64,0x9d,0xcf,0x5b,
    0xea,0x38,0x77,0x6f,0x05,0x17,0xfb,0x25,0xc8,0xba,0x0e,0x6f,0xe3,0x6c,0x5c,0xcc,
    0x3e,0xad,0xf1,0xdc,0x66,0x38,0x6f,0xaf,0x83,0xf3,0x0e,0x70,0xcd,0xc9,0x52,0xb0,
    0x41,0xa6,0x7e,0x97,0x1a,0xfb,0x3b,0xc9,0xb3,0xce,0xe5,0xdd,0x60,0x77,0x31,0x97,
    0x35,0x66,0x2e,0x45,0x77,0x5f,0x5a,0x7f,0x61,0xec,0xf7,0xc1,0x79,0x2f,0xdf,0x80,
    0x92,0x97,0x1a,0x74,0xcb,0x4c,0x1f,0x2b,0xe8,0x63,0x8d,0xef,0xa3,0x34,0xdd,0x23,
    0xc3,0x9d,0x6b,0x05,0xf3,0x29,0xd8,0x83,0x06,0x57,0xce,0x07,0x23,0xce,0x1a,0x38,
    0x4b,0xd3,0x3d,0x34,0x9c,0x57,0xba,0x96,0x1e,0x06,0xd3,0xb5,0xf4,0x70,0x34,0x4f,
    0x13,0x4d,0x3c,0x8f,0x44,0xfb,0xf9,0xa3,0x75,0xec,0xe7,0x2b,0xc1,0x75,0x3f,0x7f,
    0x0c,0xbf,0x95,0xc6,0xe6,0xf1,0x68,0x1d,0x3c,0x01,0x66,0xf7,0xf3,0x27,0xf1,0x7d,
    0x82,0x7c,0xae,0x32,0xf9,0x14,0xdd,0x53,0xbe,0x3d,0x47,0x8c,0x4f,0x19,0xee,0x67,
    0x38,0xdf,0x57,0x33,0x8f,0xcf,0x82,0x69,0x7e,0x9e,0x06,0x93,0x31,0xae,0xc2,0xff,
    0x39,0xe3,0xff,0x3c,0xf7,0x07,0x95,0x5f,0xe0,0x7e,0xa0,0x7c,0x2f,0x62,0xf3,0x82,
    0xb1,0x59,0x4d,0x9f,0x6b,0xb1,0x79,0x09,0xbb,0xd5,0xa6,0xcf,0x97,0xa2,0x3e,0x57,
    0x19,0xff,0x35,0xcc,0xb3,0x9e,0x6f,0x2f,0x83,0x69,0x2d,0xad,0x35,0x63,0x17,0xdd,
    0x2b,0x69,0x5f,0x81,0xe7,0x15,0xc3,0xf3,0x3a,0x77,0x0f,0x95,0xdf,0x80,0x57,0xd7,
    0xfe,0x9b,0x60,0xb5,0xa6,0xa6,0xde,0x22,0x37,0x6f,0x9a,0x9a,0x78,0x1b,0x5c,0xc7,
    0xf3,0x0e,0xdc,0x6f,0x9b,0x3d,0xf4,0x5d,0x70,0xfd,0x16,0x7d,0x0d,0x4c,0xfa,0x16,
    0xfd,0xfb,0xdc,0x7b,0x24,0xfe,0x75,0x26,0x7e,0xc1,0x3f,0xf4,0xed,0x13,0xe2,0xff,
    0xd0,0xc4,0xfb,0x51,0x54,0xef,0x1f,0xb3,0x3e,0x3e,0xa2,0x8f,0x0f,0xc0,0x24,0x8f,
    0xeb,0xf0,0xff,0xc4,0xe8,0xaa,0x23,0xdd,0x3a,0x53,0xf7,0x9f,0x72,0xcf,0xd2,0x31,
    0x7e,0x06,0x26,0xbe,0xef,0x21,0x6b,0x1c,0xeb,0xb9,0xa3,0xa9,0xfc,0x39,0x79,0xd5,
    0xef,0xa7,0x2f,0xc0,0xd6,0x9b,0xf9,0xfd,0x82,0xbe,0x75,0x5e,0xd6,0x1a,0xff,0xaf,
    0xf0,0x9f,0x4c,0x2c,0x5f,0x83,0x89,0xef,0x97,0xc8,0x1a,0xe7,0xb7,0xdc,0xff,0xce,
    0xe2,0x7b,0xef,0x3b,0x30,0xe5,0xfa,0x3e,0xaa,0xef,0x1f,0xc0,0x96,0xa7,0x73,0x11,
    0x7c,0x7e,0x04,0x9f,0xc5,0x3d,0xfc,0x27,0x78,0x7e,0xa4,0xcf,0x6f,0xc0,0xf4,0x9b,
    0xf2,0x67,0xee,0x98,0xf9,0xfe,0x96,0x29,0xf2,0x46,0xfe,0xef,0x29,0x45,0xb7,0xc1,
    0xf8,0x6d,0x34,0x7e,0xbf,0xe0,0x27,0x77,0xa9,0x5f,0xa2,0xbb,0x7f,0x0b,0xe6,0xbc,
    0x39,0x77,0xff,0x22,0xfe,0x0b,0x97,0xdc,0xec,0x61,0x38,0x7e,0x05,0x17,0x8e,0x5f,
    0xa3,0x6f,0x9c,0x62,0x38,0x5a,0x9a,0xef,0x87,0x56,0x86,0xaf,0x35,0x7c,0x6d,0xcc,
    0xdd,0xfa,0x37,0x73,0x57,0x16,0xfe,0xdf,0xb1,0xd3,0xdc,0xff,0x01,0xa6,0x75,0xf0,
    0x27,0x98,0x8c,0xef,0x37,0x64,0xcd,0xf5,0x26,0xf8,0x24,0xb6,0x4d,0x26,0xb6,0x0c,
    0xf3,0x9f,0x75,0x5b,0x13,0x5b,0x09,0xf1,0xb4,0x37,0xff,0x1b,0xb9,0x3a,0xfe,0x27,
    0xc9,0x00,0xd7,0x7d,0x34,0x93,0xff,0x34,0xa6,0x18,0x9b,0x2c,0x17,0x70,0xbd,0x2b,
    0x66,0xbb,0x80,0x55,0x99,0x33,0x3a,0xc7,0x05,0xae,0x6c,0xf3,0xad,0x9d,0xeb,0x42,
    0x1c,0x7a,0x9f,0xcc,0x73,0xe1,0xff,0xbe,0x6a,0xec,0x65,0x9c,0x82,0xe5,0x9a,0xef,
    0xed,0xff,0x00,0x13,0x2e,0x54,0x90,0x9c,0x19,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// layout(local_size_x = 64, local_size_y = 1, local_size_z = 1)in;
//
// layout(set = 0, binding = 0)buffer dest
// {
//     uint destData[];
// };
//
// layout(set = 0, binding = 1)buffer src
// {
//     uint srcData[];
// };
//
// layout(push_constant)uniform PushConstants
// {
//
//     uint outputCount;
//
//     uint componentCount;
//
//     uint srcOffset;
//     uint destOffset;
//
//     uint Ns;
//     uint Bs;
//     uint Ss;
//     uint Es;
//
//     uint Nd;
//     uint Bd;
//     uint Sd;
//     uint Ed;
//
//     bool isSrcHDR;
//     bool isSrcA2BGR10;
// } params;
//
// uint getSourceComponentOffset(uint vertex, uint component)
// {
//     return vertex * params . Ss + component * params . Bs + params . srcOffset;
// }
//
// uint getDestinationComponentOffset(uint vertex, uint component)
// {
//     return vertex * params . Sd + component * 4 + params . destOffset;
// }
//
// uint getShiftBits(uint offset, uint B)
// {
//
//     uint shift =(offset % 4)* 8;
//
//     return shift;
// }
//
//       float loadSourceComponent(uint cd)
// {
//
//     uint vertex = cd / params . Nd;
//     uint component = cd % params . Nd;
//
//     if(component >= params . Ns && component < 3)
//     {
//         return 0;
//     }
//
//     uint offset = getSourceComponentOffset(vertex, component);
//     uint block = srcData[offset / 4];
//
//     uint shiftBits;
//     uint valueBits;
//     uint valueMask;
//
//     if(params . isSrcHDR)
//     {
//         valueBits = component == 3 ? 2 : 10;
//         valueMask = component == 3 ? 0x03 : 0x3FF;
//         if(params . isSrcA2BGR10)
//         {
//             shiftBits = 10 * component;
//         }
//         else
//         {
//
//             shiftBits = component == 3 ? 0 :(valueBits *(2 - component)+ 2);
//         }
//     }
//     else
//     {
//         shiftBits = getShiftBits(offset, params . Bs);
//         valueBits = params . Bs * 8;
//         valueMask = valueBits == 32 ? - 1 :(1 << valueBits)- 1;
//     }
//
//     uint valueAsUint;
//
//     if(component >= params . Ns && component == 3)
//     {
//
//         valueAsUint = valueMask >> 1;
//
//     }
//     else
//     {
//         valueAsUint =(block >> shiftBits)& valueMask;
//     }
//
//     if(valueBits < 32)
//     {
//         bool isNegative =(valueAsUint &(1 <<(valueBits - 1)))!= 0;
//         uint signExtension = isNegative ? 0xFFFFFFFF << valueBits : 0;
//         valueAsUint |= signExtension;
//     }
//     int valueAsInt = int(valueAsUint);
//           float value = float(valueAsInt)/(valueMask >> 1);
//     value = max(value, float(- 1));
//
//     return value;
// }
//
//        float convertComponent(float srcValue)
// {
//
//     return srcValue;
// }
//
// uint makeDestinationComponent(uint cd, float value)
// {
//
//     uint valueAsUint = floatBitsToInt(value);
//
//     return valueAsUint;
// }
//
// void storeDestinationComponents(uint valueAsUint)
// {
//
//     destData[gl_GlobalInvocationID . x + params . destOffset / 4]= valueAsUint;
// }
//
// void main()
// {
//     if(gl_GlobalInvocationID . x >= params . outputCount)
//         return;
//
//     uint valueOut = 0;
//     for(uint i = 0;i < 1;++ i)
//     {
//         uint cd = gl_GlobalInvocationID . x * 1 + i;
//         if(cd >= params . componentCount)
//         {
//             break;
//         }
//
//               float srcValue = loadSourceComponent(cd);
//                float destValue = convertComponent(srcValue);
//         valueOut |= makeDestinationComponent(cd, destValue);
//     }
//
//     storeDestinationComponents(valueOut);
// }
