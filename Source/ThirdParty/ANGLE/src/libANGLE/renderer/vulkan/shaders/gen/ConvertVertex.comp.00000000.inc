// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2020 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ConvertVertex.comp.00000000.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kConvertVertex_comp_00000000[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x9d,0x99,0x7b,0x74,0x57,0xc5,
    0x11,0xc7,0xef,0xe6,0x97,0x84,0x40,0x02,0x04,0x21,0x41,0x02,0x04,0x42,0x50,0x11,
    0xc2,0x43,0x48,0x78,0x16,0x08,0x04,0x48,0x04,0x8a,0x10,0x50,0x50,0x44,0x41,0x1e,
    0x02,0x42,0x0a,0xc5,0x2a,0xb5,0xb4,0xe2,0x0b,0x6b,0x6b,0x5f,0xb6,0x8a,0xaf,0x56,
    0xb1,0xbe,0x00,0x1f,0x58,0xeb,0x03,0xc5,0x5a,0x2d,0x96,0x8a,0x58,0xab,0xad,0xd4,
    0xd6,0xda,0x5a,0xc5,0xda,0x5a,0x6d,0x3d,0xc7,0x73,0x50,0xb4,0x62,0x77,0xee,0x7e,
    0x86,0xdf,0x64,0xf9,0xfd,0x65,0xce,0xb9,0xe7,0x77,0xe7,0x3b,0x33,0xdf,0x99,0x9d,
    0x9d,0xdd,0xbb,0xf7,0x26,0x93,0x57,0xdd,0x26,0x49,0x5c,0xd2,0x2e,0x29,0x4a,0xd6,
    0xb8,0x24,0xfd,0xeb,0x94,0xe4,0x25,0x72,0x5b,0x9c,0x14,0xa6,0xbf,0x8d,0xd3,0x67,
    0x4f,0x1f,0xb4,0xee,0xfc,0x25,0x83,0x6a,0xeb,0x86,0x88,0xbe,0x43,0x92,0x49,0xed,
    0x44,0xd7,0xd1,0xdb,0x14,0xf8,0xdf,0x7c,0x7f,0xad,0x5e,0xb4,0xa2,0x45,0xf0,0x81,
    0x5e,0x51,0xea,0xf1,0xfc,0x94,0x2b,0x49,0xea,0xb1,0x95,0xab,0xc9,0x5b,0x9f,0x18,
    0xc2,0x24,0xd5,0xfc,0x2a,0xe6,0xc0,0xf2,0x0d,0x96,0x07,0x56,0x64,0xb0,0x0c,0x58,
    0x89,0xc1,0xf2,0xc1,0x4a,0x0d,0x56,0x00,0xd6,0xc5,0x60,0x85,0x60,0xc7,0x1a,0xac,
    0x0d,0x58,0x0f,0x83,0x15,0x81,0xf5,0x36,0x58,0x5b,0xb0,0xbe,0x06,0x6b,0x07,0xd6,
    0xcf,0x60,0xc5,0x60,0x35,0x06,0x2b,0x01,0x1b,0x62,0xb0,0xf6,0x60,0xb5,0x52,0x63,
    0x3f,0x2a,0x1d,0x6f,0xa3,0x1f,0xcd,0x85,0xe4,0xaa,0xb5,0x58,0x1f,0xd5,0x4c,0xec,
    0xd7,0x53,0x0b,0xb1,0xbf,0xc8,0xff,0xf6,0x39,0xa2,0x0b,0x72,0x15,0x35,0x15,0xf9,
    0x04,0xd7,0x9a,0xaf,0x9f,0x3b,0x9a,0x4f,0x30,0xe5,0xeb,0xef,0x5a,0xf3,0x89,0x5c,
    0x65,0x64,0x99,0xe3,0x62,0x6a,0x26,0xf2,0x97,0x90,0xbb,0xf9,0xab,0xb3,0x1f,0x45,
    0x5e,0x1a,0x3f,0x93,0xf2,0xc9,0x7d,0x99,0xb7,0x29,0xa4,0x9e,0x49,0xfa,0x9b,0x9f,
    0xd6,0xbd,0x0d,0xe3,0xac,0xf2,0x39,0x15,0x71,0xaf,0xb8,0xf8,0x94,0xe1,0xe3,0x52,
    0x9b,0xfc,0xa4,0x3c,0xc5,0x83,0x5e,0x38,0x2a,0x8e,0xd8,0x06,0x7d,0x77,0xee,0x2b,
    0xe0,0xec,0x65,0x38,0x2b,0xb0,0xe9,0x4b,0x4e,0x82,0x55,0xfa,0x8e,0xd1,0xbe,0xf8,
    0x3c,0x97,0xe4,0xd0,0x9f,0xde,0x10,0x9e,0x31,0xc8,0x03,0xc0,0x06,0x30,0x86,0x1a,
    0x63,0x3f,0x10,0x5d,0xa1,0xd1,0x0f,0xa5,0x5f,0x55,0x1e,0x41,0x8e,0x2a,0x8f,0xa3,
    0xd7,0x54,0x6e,0x88,0xf8,0x9b,0xe8,0x85,0x01,0xd4,0x79,0x26,0x73,0xad,0x72,0x33,
    0x3d,0xad,0xf6,0xa7,0x47,0xf2,0x62,0xec,0xbb,0xf8,0xa8,0xcb,0x8c,0xdf,0x0a,0xc3,
    0x2b,0x76,0x2d,0xcc,0x5f,0x4f,0x8f,0x6a,0x8f,0x56,0xd2,0x8b,0x17,0x32,0xbe,0xaf,
    0x92,0xfb,0x7a,0xea,0x21,0xf2,0x45,0x60,0xa2,0xff,0x3a,0xf7,0x76,0xfc,0x1b,0x59,
    0x23,0x1a,0xf7,0x32,0xe2,0xa8,0xfe,0x7b,0xfe,0xfa,0x2c,0x93,0x95,0xaf,0x61,0xfd,
    0xa8,0xfd,0x0d,0xa6,0x3e,0x22,0xdf,0x6e,0xea,0x27,0xf2,0x43,0xf4,0x91,0xfa,0x3f,
    0x26,0x7c,0xfe,0x4f,0xe5,0x5d,0xf4,0x98,0xda,0xef,0x43,0x96,0x7c,0xff,0x48,0xaf,
    0x2c,0x63,0xdc,0xba,0x96,0x2a,0x59,0x33,0x22,0x8b,0xdd,0x89,0x2e,0xc4,0x14,0x6c,
    0x0c,0x72,0x7f,0xb0,0xae,0x5e,0x1e,0x80,0x5f,0x06,0xde,0x1a,0x47,0x4c,0xec,0x45,
    0x1e,0xe8,0xb2,0x71,0x07,0x71,0x6f,0xeb,0xd4,0xc8,0x3a,0xd3,0x3c,0x5b,0x5c,0xd8,
    0x5f,0x6b,0xbc,0x24,0x3c,0xb2,0x0e,0x05,0xdb,0xc7,0x18,0x86,0xfb,0xae,0xca,0x63,
    0x6e,0x13,0x62,0x7f,0xe4,0x91,0x02,0xe6,0x46,0xc6,0x35,0xde,0x85,0xf1,0xa9,0x5c,
    0x1f,0xc9,0xd3,0x8c,0x2c,0x6b,0xe8,0x8c,0x48,0x3f,0x3f,0xd2,0x9f,0x15,0xc9,0x67,
    0x47,0xf6,0xe7,0x44,0xfa,0x25,0x91,0xfe,0x3c,0xe4,0x09,0x3e,0x4b,0xa9,0xc1,0x08,
    0xea,0x22,0x3d,0x31,0x96,0x71,0x8f,0x04,0x17,0x1b,0x59,0x4f,0xa3,0x5c,0x58,0x73,
    0x2d,0xc6,0x66,0xb4,0x0b,0xf8,0x7d,0xde,0x46,0xe6,0x6e,0x8c,0x0b,0x7e,0x82,0x7f,
    0xe8,0x2b,0x31,0x96,0x3d,0xf0,0x63,0x6f,0x2f,0xba,0x2f,0xf8,0x4b,0x30,0xa9,0x8f,
    0xdc,0x7f,0xea,0xab,0x2f,0xf7,0x82,0x8d,0xf3,0xf6,0xe3,0xc9,0x41,0xee,0xeb,0xb9,
    0x3f,0xe4,0xf5,0x13,0xf0,0x91,0xdf,0x83,0x9e,0xab,0xc1,0xff,0x4e,0x82,0x5b,0xf4,
    0x93,0xd1,0xcb,0xaf,0xe6,0x36,0xc5,0x85,0x3a,0x6b,0xfe,0x4d,0xe4,0xdf,0x68,0x6c,
    0x4e,0x76,0x01,0xdf,0x41,0xfe,0x53,0x5d,0xf0,0x13,0x5c,0x72,0x16,0x79,0xa2,0xbf,
    0x1a,0xe0,0x9f,0xe8,0xb2,0x35,0x9b,0x9e,0xa3,0x66,0x5f,0x04,0xd7,0x98,0x33,0x72,
    0xc4,0x3c,0xc5,0x05,0xfc,0x72,0x6f,0x93,0xee,0x23,0x2e,0xf8,0x9d,0x62,0x6c,0x66,
    0x91,0xfb,0x46,0x6c,0x9a,0x5d,0xb0,0x9b,0x45,0x9d,0xa4,0x5f,0x9a,0x8d,0xfd,0x6c,
    0x17,0x7a,0x48,0xe3,0xce,0x21,0xee,0x2e,0x93,0xdb,0xa9,0x2e,0xe0,0x3a,0x57,0xa7,
    0xb9,0xe0,0x77,0x2a,0x73,0x35,0xcf,0xcc,0x95,0xe8,0xe6,0xfa,0x6b,0x1e,0xe3,0x96,
    0x7b,0xa9,0xb3,0xd6,0x61,0x9e,0x89,0x7d,0x26,0xb1,0x25,0x2f,0xe9,0x53,0x91,0x47,
    0xf9,0x18,0xb2,0x96,0x16,0xb8,0x70,0x0e,0x98,0x8f,0x5e,0xfa,0x7a,0x01,0xbe,0xa2,
    0x5f,0xe8,0x42,0xaf,0x8b,0x4e,0x7a,0x78,0xa1,0xf1,0x5d,0xe4,0x64,0x2f,0x08,0xbd,
    0x2d,0x7a,0xe9,0xf9,0x45,0x26,0xee,0x62,0x13,0x57,0xfa,0x7d,0xb1,0xe1,0x5d,0xea,
    0xc2,0x1a,0x11,0x9d,0xf4,0xfe,0xd2,0x94,0xb7,0x30,0xf5,0x5b,0xc6,0x73,0x57,0x7c,
    0x96,0x18,0xbe,0x73,0x5d,0x58,0xa7,0xcf,0x50,0xf3,0xe5,0x2e,0x60,0xcb,0x4c,0x6f,
    0x2e,0xa7,0x0e,0x93,0xa8,0xc3,0x24,0xe3,0xbf,0x22,0x9a,0xb3,0x95,0x2e,0x60,0xbb,
    0x4c,0x3f,0xaf,0x74,0xad,0xfb,0xb9,0xc1,0xf8,0xaf,0x22,0xbe,0xd8,0xca,0xfa,0x5c,
    0x45,0x2d,0x64,0x6f,0x59,0xed,0xef,0x8f,0x67,0xdd,0xca,0x9a,0x19,0xe9,0xaf,0xe1,
    0xc4,0x29,0x66,0xdf,0x29,0x4a,0x9f,0x69,0x99,0x74,0x5d,0xb7,0x35,0xf7,0xed,0xd8,
    0x8f,0x4a,0x4c,0x2f,0xf4,0xc3,0x46,0xfb,0x65,0x10,0xcf,0xd3,0x1a,0x63,0x33,0x18,
    0x5c,0xfb,0x74,0x08,0x7e,0x83,0x8d,0xcd,0x49,0xf0,0x2b,0xcf,0x30,0x78,0x86,0x1a,
    0x9b,0x5a,0x70,0xe5,0xa9,0xc3,0xaf,0x36,0xc9,0xd6,0x6a,0x38,0xfc,0x75,0x86,0x6b,
    0x24,0x5c,0x23,0x0c,0xd7,0x28,0x70,0xf5,0x1b,0x8d,0xaf,0xe0,0x87,0xfd,0x18,0x47,
    0xa7,0xfa,0x6c,0x6d,0x3a,0xe6,0xa8,0x4d,0x7b,0x73,0xdf,0x81,0xda,0x94,0x9a,0x18,
    0x63,0xb1,0xd1,0x3c,0xc6,0x93,0xc7,0x38,0x63,0x53,0x0f,0xae,0x63,0x9a,0x80,0x5f,
    0xbd,0xb1,0x99,0x08,0xbf,0xf2,0x4c,0x82,0xa7,0xc1,0xd8,0x4c,0x06,0x57,0x9e,0x29,
    0xf8,0x4d,0x36,0x63,0x6c,0x84,0x7f,0x8a,0xe1,0x3a,0x19,0xae,0x26,0xc3,0x35,0x15,
    0x5c,0xfd,0xa6,0xe1,0x3b,0x95,0xda,0x4c,0x8b,0x6a,0xd3,0x39,0x47,0x6d,0x3a,0x99,
    0xfb,0x63,0xa8,0x4d,0x17,0xf3,0xdc,0x98,0xc1,0x73,0xfa,0xc8,0x5e,0x86,0xcf,0x55,
    0x70,0xce,0x02,0x9b,0x69,0xc6,0x34,0x1b,0xbc,0x99,0x75,0x30,0x03,0x4c,0x39,0xe6,
    0xc0,0x2b,0x39,0xce,0x31,0x39,0x96,0xf1,0x0e,0x21,0x7f,0xe5,0x26,0xaf,0xae,0xe4,
    0xd5,0xcd,0xe4,0x35,0x37,0x69,0xfd,0x7c,0x5b,0x10,0xc9,0x6b,0x22,0x79,0x6d,0x24,
    0xaf,0x8b,0xe4,0x0b,0x22,0xf9,0xca,0x48,0xbe,0x3a,0x92,0xaf,0x8f,0xe4,0x5b,0x22,
    0x79,0x7b,0x24,0xdf,0x9b,0xb4,0x7e,0x3e,0x3f,0x12,0xe9,0x9f,0x33,0xb2,0x9c,0x8d,
    0x5e,0x89,0xf4,0xaf,0x47,0xfe,0x6f,0x44,0xf2,0x7b,0xd1,0x3c,0xcd,0xa3,0x6e,0xda,
    0x3f,0x67,0xd0,0x3f,0xa7,0x1b,0x9b,0xf9,0xe0,0x9b,0x98,0xb7,0x33,0xf1,0x9b,0xcf,
    0xbc,0xcd,0x05,0x53,0xfb,0xb3,0x22,0xce,0xb3,0x73,0x70,0x2e,0x04,0xd7,0xfe,0x58,
    0x84,0xdf,0x42,0x38,0x17,0x80,0xa9,0xfd,0x39,0xcc,0x9d,0x72,0x2e,0x81,0x73,0xb1,
    0xb1,0x59,0x0a,0xae,0xcf,0xb1,0x73,0xf1,0x5b,0x6a,0x6c,0x96,0xc3,0xa3,0xcf,0xf5,
    0x95,0x60,0x72,0xd6,0xbe,0x0b,0xec,0x3c,0x7c,0x45,0x27,0xcf,0xbf,0xd5,0x49,0xf6,
    0xf9,0x27,0xba,0x55,0xb2,0xef,0xd2,0x6b,0xab,0xe8,0xcf,0x16,0xe4,0xd5,0x26,0xd6,
    0x97,0xe9,0x3f,0x19,0xcf,0x5a,0x64,0xd5,0x9d,0x4f,0x1e,0xa2,0x5b,0x87,0xac,0xcf,
    0xa1,0xaf,0xb0,0x77,0xaf,0xa5,0xff,0xc4,0x66,0x0d,0xb8,0xfa,0x7f,0x8d,0xde,0xd5,
    0x39,0xd9,0x00,0x36,0x33,0xad,0x51,0x61,0x7a,0xce,0xff,0x06,0x67,0xff,0x16,0xf4,
    0xea,0x7b,0x31,0x3a,0xe1,0xbd,0x00,0x59,0xeb,0x7a,0x09,0x75,0xdd,0x68,0xec,0x2f,
    0x05,0xdf,0x4e,0x7d,0x2e,0x07,0xbb,0x8c,0xfa,0x6c,0x32,0xf5,0x11,0xdd,0x15,0xfe,
    0xda,0x46,0x3d,0xae,0x30,0x3c,0xdf,0x64,0xcc,0xdb,0xe0,0xb9,0x0a,0x4c,0x6a,0xbf,
    0xd5,0x5b,0xc8,0xba,0xfe,0x16,0xf8,0x08,0xf6,0xd5,0x0d,0xf8,0x7e,0x1b,0x9d,0xe4,
    0x7c,0x25,0xb2,0xf2,0x7e,0x27,0xe2,0xfd,0x2e,0x98,0xe5,0xfd,0x3e,0x78,0x13,0xef,
    0x33,0xca,0xfb,0x03,0x74,0xc2,0x7b,0x35,0xb2,0xd6,0xe2,0x87,0xd4,0xe2,0x1a,0x13,
    0xeb,0x47,0xe0,0x5a,0x8b,0x6b,0xc1,0xb4,0x16,0x9b,0x4d,0x2d,0x44,0x77,0x9d,0xbf,
    0x6e,0xa6,0x16,0xd7,0x19,0x9e,0x1b,0xc9,0x59,0xf7,0xc2,0x9b,0x78,0x8f,0xba,0x91,
    0x5c,0xae,0x07,0x93,0x33,0xc1,0x66,0xfc,0x6f,0x36,0xfe,0x3f,0x8e,0xc6,0xfc,0x13,
    0xb0,0x15,0xe4,0xb1,0xc5,0xe4,0x21,0xba,0x5b,0xfd,0x75,0x1b,0x3c,0xb7,0x12,0xe3,
    0x96,0x24,0x7b,0x8e,0xde,0x82,0xee,0x36,0x13,0xe3,0xa7,0xec,0x6f,0x2a,0xdf,0x41,
    0xcc,0x4b,0xc9,0xf9,0x4e,0xde,0xf5,0xee,0x30,0xe3,0xb8,0x0b,0xbf,0x3b,0xcd,0xf3,
    0xe6,0x6e,0xf0,0xdb,0x4d,0xdc,0xbb,0xa3,0xb8,0x5b,0x4c,0x9c,0xad,0xec,0x93,0x5a,
    0x87,0xad,0x51,0x1d,0x36,0x23,0x6f,0x42,0xde,0x66,0x7c,0xef,0x61,0x5d,0x88,0xef,
    0x76,0x64,0x9d,0xcf,0xfb,0x72,0x9c,0x41,0xee,0x07,0x17,0xfb,0x7b,0x91,0x75,0x1d,
    0xee,0xe0,0x59,0xb8,0x9d,0x7d,0x59,0xf3,0xd9,0x61,0x38,0x1f,0xc8,0xc1,0xf9,0x33,
    0x70,0xad,0xc9,0x83,0x60,0xcd,0xa6,0x7f,0x1f,0x34,0xf6,0x3f,0xa7,0xce,0x3a,0x97,
    0x0f,0x83,0x3d,0xc4,0x5c,0xee,0x34,0x73,0x29,0xba,0x47,0xfd,0xf5,0x38,0x63,0x7f,
    0x14,0xce,0x47,0x78,0xaf,0x96,0xba,0xec,0x44,0xf7,0xb8,0x89,0xf1,0x04,0x31,0x76,
    0xf3,0xfc,0xfc,0x05,0xef,0x00,0x4f,0x30,0x9f,0x82,0x3d,0x69,0x70,0xe5,0x7c,0x32,
    0xe2,0xdc,0x99,0x64,0xcf,0xd2,0xbf,0xe4,0xf9,0xa4,0x6b,0xe9,0x29,0x30,0x5d,0x4b,
    0x4f,0x45,0xf3,0xb4,0xc9,0xe4,0xf3,0x74,0xb4,0x9f,0xff,0x2a,0xc7,0x7e,0xbe,0x1b,
    0x5c,0xf7,0xf3,0x67,0xf0,0xdb,0x6d,0x6c,0x7e,0x1d,0xad,0x83,0x3d,0x60,0x76,0x3f,
    0xff,0x0d,0xbe,0x7b,0xa8,0xe7,0x5e,0x53,0x4f,0xd1,0x3d,0xeb,0xaf,0xe7,0xc9,0xf1,
    0x59,0xf2,0x7f,0x8e,0x77,0x78,0xc9,0x7f,0x2f,0xba,0xe7,0x4d,0xdc,0xdf,0x72,0x16,
    0x50,0xf9,0x05,0x9e,0xf5,0x4f,0x33,0xe7,0xbf,0xc3,0xe6,0x05,0x63,0xf3,0x22,0xe7,
    0x83,0x3d,0xd8,0xbc,0x84,0xdd,0x8b,0x26,0xe6,0x4b,0x51,0xcc,0xbd,0xc6,0xff,0xf7,
    0xcc,0xa1,0x3e,0xbb,0xfe,0x00,0xa6,0x7d,0xb2,0xdf,0x8c,0x4b,0x74,0x2f,0xfb,0x6b,
    0x3f,0x3c,0x2f,0x1b,0x9e,0x3f,0x71,0x8e,0x50,0xf9,0xcf,0xf0,0xea,0xba,0x7e,0x15,
    0x6c,0x9f,0xe9,0x97,0xbf,0xd0,0x17,0xaf,0x9a,0xf9,0x7e,0x0d,0x5c,0xc7,0xf3,0x57,
    0xb8,0x5f,0x33,0xfb,0xe3,0xdf,0xc0,0xf5,0xdd,0xfd,0x15,0x30,0x89,0x2d,0xfa,0xbf,
    0x73,0x86,0x91,0xfc,0x0f,0x98,0xfc,0x05,0x7f,0xd3,0x5f,0x6f,0x93,0xff,0x9b,0x26,
    0xdf,0xb7,0xa2,0x5e,0xfe,0x07,0xbd,0xff,0x16,0x31,0xde,0x00,0x93,0x3a,0x1e,0xc0,
    0xff,0x6d,0xa3,0x6b,0x89,0x74,0x07,0x4c,0x4f,0xff,0x93,0x33,0x93,0x8e,0xf1,0x5f,
    0x60,0xe2,0xfb,0x3a,0xb2,0xe6,0xf1,0x0e,0xe7,0x2d,0x95,0xff,0x4d,0x5d,0xf5,0x3d,
    0xf1,0x5d,0xb0,0x77,0xcc,0xfc,0xbe,0x4b,0x6c,0x9d,0x97,0xfd,0xc6,0xff,0x3f,0xf8,
    0x6f,0x20,0x97,0xff,0x82,0x89,0xef,0x7b,0xc8,0x9a,0xe7,0xfb,0x9c,0xe5,0xe4,0xec,
    0xf1,0x7e,0x74,0x36,0xee,0x49,0x1d,0xbb,0x73,0x36,0xae,0xe0,0x5b,0xb1,0xc4,0xab,
    0x34,0x1c,0x1f,0x80,0x0b,0xc7,0x07,0xd1,0x3b,0x80,0x7e,0x7f,0xee,0x65,0xce,0xd7,
    0xbd,0x0d,0x5f,0x15,0x7c,0xd5,0xe6,0xec,0x79,0x30,0x3a,0x8b,0x7e,0x12,0xc9,0x49,
    0xf4,0xad,0xc9,0x45,0x72,0x26,0x92,0x0b,0x23,0xb9,0x4d,0x24,0xb7,0x8d,0xe4,0xf6,
    0x91,0xdc,0x29,0xfa,0xd6,0xd5,0x25,0xd2,0xf7,0x74,0xad,0xcf,0xc2,0x1f,0x32,0x46,
    0xdd,0x93,0x3e,0xca,0x71,0x6e,0x3d,0x04,0xae,0xe7,0xae,0x8f,0xf1,0x3b,0xc4,0x3c,
    0x1d,0x04,0x53,0xfb,0xff,0x45,0x9c,0x9f,0xe6,0xe0,0x3c,0x0c,0xae,0x67,0xe1,0xcf,
    0xf0,0x3b,0x0c,0xe7,0x27,0x60,0x6a,0x9f,0xe7,0x42,0xad,0x45,0x27,0x35,0xcc,0x33,
    0xdf,0x0a,0xf2,0x5d,0xa8,0xbb,0xe8,0xa4,0x9e,0xf9,0xe6,0xfb,0x46,0x81,0x0b,0xef,
    0xbd,0xe2,0x93,0xe1,0x7b,0x82,0xcc,0x49,0x81,0xf1,0x2f,0xe2,0x9f,0x45,0xa2,0x93,
    0x7a,0x17,0x99,0x6f,0x47,0xed,0xdc,0xd1,0xef,0xa9,0xc5,0x2e,0xe0,0x62,0x2f,0xf3,
    0x51,0x6c,0xe2,0x95,0xb8,0xf0,0xfc,0x14,0x9e,0xb6,0xd8,0xc8,0x9c,0x96,0x18,0xce,
    0x0e,0x39,0x38,0x3b,0xba,0x80,0xeb,0xf3,0xb3,0xd4,0x05,0x4c,0x9f,0x9f,0x32,0xcf,
    0xa5,0x26,0xe7,0x63,0x5c,0x98,0x7b,0x7d,0x06,0x74,0x76,0x01,0xd3,0x7d,0xb1,0xdc,
    0x7c,0xbf,0x12,0x5d,0x99,0xbf,0xba,0xf2,0x9d,0xa5,0x8c,0xbc,0xa4,0x37,0xf4,0xf9,
    0x59,0x8e,0xae,0xab,0x89,0x71,0x2c,0x31,0x74,0xcf,0xe9,0xc6,0xf7,0x1b,0xc1,0xf5,
    0xf9,0x59,0xe1,0xb2,0xb8,0x72,0x56,0xb8,0xd6,0x9c,0xe5,0xe6,0x5b,0x54,0x77,0x17,
    0x7a,0x52,0xf7,0x9a,0x1e,0x2e,0x60,0xe2,0x2b,0xbd,0xdb,0xc3,0xd8,0x56,0xf2,0x3f,
    0x20,0xb5,0xed,0xe5,0x02,0xa6,0xf9,0xf5,0x76,0xa1,0xdf,0x75,0x2f,0xae,0x72,0xc1,
    0xa6,0xb7,0xb1,0xe9,0xe3,0xc2,0x9a,0xda,0x8d,0x4d,0xb5,0x0b,0x76,0x7d,0x88,0x29,
    0xeb,0xa1,0xda,0xd8,0xf7,0x75,0x61,0x8d,0xc8,0xfe,0x20,0xf7,0xba,0x3f,0xc8,0x77,
    0xa7,0xe3,0xd9,0x1f,0xfa,0x9a,0xfd,0xe1,0x38,0xf6,0x84,0x13,0xcc,0xf7,0xe3,0xc1,
    0x39,0xbe,0x85,0x0e,0x01,0xd7,0x1e,0x38,0xc9,0x1d,0xfd,0xcd,0x62,0xa8,0x0b,0xb8,
    0xae,0xb3,0x61,0x2e,0x60,0x33,0xcd,0xb9,0xb2,0xd6,0x05,0xae,0x61,0x26,0xe7,0x3a,
    0x17,0xf2,0xd0,0x77,0xa0,0xe1,0xfc,0x1f,0xa0,0x05,0x7b,0x19,0xa7,0x60,0x75,0xe6,
    0x7b,0xd9,0xff,0x01,0x63,0x72,0xd6,0xa7,0x88,0x1d,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// layout(local_size_x = 64, local_size_y = 1, local_size_z = 1)in;
//
// layout(set = 0, binding = 0)buffer dest
// {
//     uint destData[];
// };
//
// layout(set = 0, binding = 1)buffer src
// {
//     uint srcData[];
// };
//
// layout(push_constant)uniform PushConstants
// {
//
//     uint outputCount;
//
//     uint componentCount;
//
//     uint srcOffset;
//     uint destOffset;
//
//     uint Ns;
//     uint Bs;
//     uint Ss;
//     uint Es;
//
//     uint Nd;
//     uint Bd;
//     uint Sd;
//     uint Ed;
//
//     bool isSrcHDR;
//     bool isSrcA2BGR10;
// } params;
//
// uint getSourceComponentOffset(uint vertex, uint component)
// {
//     return vertex * params . Ss + component * params . Bs + params . srcOffset;
// }
//
// uint getDestinationComponentOffset(uint vertex, uint component)
// {
//     return vertex * params . Sd + component * params . Bd + params . destOffset;
// }
//
// uint getShiftBits(uint offset, uint B)
// {
//
//     uint shift =(offset % 4)* 8;
//
//     return shift;
// }
//
//       int loadSourceComponent(uint cd)
// {
//
//     uint vertex = cd / params . Nd;
//     uint component = cd % params . Nd;
//
//     if(component >= params . Ns && component < 3)
//     {
//         return 0;
//     }
//
//     uint offset = getSourceComponentOffset(vertex, component);
//     uint block = srcData[offset / 4];
//
//     uint shiftBits;
//     uint valueBits;
//     uint valueMask;
//
//     if(params . isSrcHDR)
//     {
//         valueBits = component == 3 ? 2 : 10;
//         valueMask = component == 3 ? 0x03 : 0x3FF;
//         if(params . isSrcA2BGR10)
//         {
//             shiftBits = 10 * component;
//         }
//         else
//         {
//
//             shiftBits = component == 3 ? 0 :(valueBits *(2 - component)+ 2);
//         }
//     }
//     else
//     {
//         shiftBits = getShiftBits(offset, params . Bs);
//         valueBits = params . Bs * 8;
//         valueMask = valueBits == 32 ? - 1 :(1 << valueBits)- 1;
//     }
//
//     uint valueAsUint;
//
//     if(component >= params . Ns && component == 3)
//     {
//
//         valueAsUint = 1;
//
//     }
//     else
//     {
//         valueAsUint =(block >> shiftBits)& valueMask;
//     }
//
//     if(valueBits < 32)
//     {
//         bool isNegative =(valueAsUint &(1 <<(valueBits - 1)))!= 0;
//
//         uint signExtension = isNegative ? 0xFFFFFFFF << valueBits : 0;
//         valueAsUint |= signExtension;
//     }
//           int value = int(valueAsUint);
//
//     return value;
// }
//
//        int convertComponent(int srcValue)
// {
//
//     return srcValue;
// }
//
// uint makeDestinationComponent(uint cd, int value)
// {
//
//     uint vertex = cd / params . Nd;
//     uint component = cd % params . Nd;
//
//     uint offset = getDestinationComponentOffset(vertex, component);
//     uint shiftBits = getShiftBits(offset, params . Bd);
//
//     uint valueBits = params . Bd * 8;
//     uint valueMask = valueBits == 32 ? - 1 :(1 << valueBits)- 1;
//     uint valueAsUint =(uint(value)& valueMask)<< shiftBits;
//
//     return valueAsUint;
// }
//
// void storeDestinationComponents(uint valueAsUint)
// {
//
//     destData[gl_GlobalInvocationID . x + params . destOffset / 4]= valueAsUint;
// }
//
// void main()
// {
//     if(gl_GlobalInvocationID . x >= params . outputCount)
//         return;
//
//     uint valueOut = 0;
//     for(uint i = 0;i < params . Ed;++ i)
//     {
//         uint cd = gl_GlobalInvocationID . x * params . Ed + i;
//         if(cd >= params . componentCount)
//         {
//             break;
//         }
//
//               int srcValue = loadSourceComponent(cd);
//                int destValue = convertComponent(srcValue);
//         valueOut |= makeDestinationComponent(cd, destValue);
//     }
//
//     storeDestinationComponents(valueOut);
// }
