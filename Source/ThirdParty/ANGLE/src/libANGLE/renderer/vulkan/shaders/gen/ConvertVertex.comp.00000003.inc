// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2020 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ConvertVertex.comp.00000003.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kConvertVertex_comp_00000003[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x9d,0x98,0x79,0x94,0x8f,0x65,
    0x14,0xc7,0xdf,0x77,0x96,0xdf,0x8c,0x99,0xc1,0x58,0x86,0x2c,0x89,0xa8,0x88,0x6c,
    0x0d,0x0a,0x49,0x47,0x1a,0x4a,0x49,0x22,0x1c,0x92,0x25,0x52,0x91,0xad,0x45,0x4d,
    0x25,0x5b,0x28,0x4b,0xc8,0x92,0x52,0x22,0x84,0xa4,0x94,0x6c,0x09,0xe9,0x70,0x8e,
    0xca,0x39,0x64,0x69,0x53,0x5a,0x9d,0x64,0x29,0x95,0x5d,0x3d,0xf7,0x7d,0x3f,0xd7,
    0x5c,0xcf,0x99,0xbf,0xfa,0x9d,0xf3,0x9e,0xdf,0x7b,0xbf,0xf7,0xde,0xef,0xbd,0xcf,
    0x7d,0xee,0xb3,0xfc,0x7e,0xc9,0x49,0x55,0xd3,0x82,0x20,0x0c,0x32,0x82,0xf4,0xa0,
    0x4c,0x18,0x44,0x9f,0x12,0x41,0x52,0x20,0xaf,0x99,0x41,0x22,0xfa,0xce,0x6b,0xd3,
    0xbe,0x4d,0xed,0x21,0x43,0x7b,0xd7,0xce,0x6d,0x50,0x57,0xf4,0xc5,0x82,0xe4,0xc8,
    0x4e,0x74,0xc5,0x9d,0x4d,0xaa,0xfb,0x4e,0x71,0x4f,0xff,0x1e,0xfd,0x06,0x08,0xbe,
    0xd7,0x3d,0xd9,0x0e,0x4f,0x89,0xb8,0x82,0xa0,0x39,0xb6,0xf2,0xb4,0x72,0xd6,0x97,
    0xc5,0x61,0x82,0xaa,0x7c,0x2b,0x16,0x82,0xa5,0x18,0x2c,0x09,0x2c,0xdd,0x60,0xc9,
    0x60,0x59,0x06,0x4b,0x01,0xcb,0x36,0x58,0x2a,0x58,0x69,0x83,0x25,0xc0,0x2e,0x32,
    0x58,0x1a,0x58,0x45,0x83,0xa5,0x83,0x55,0x36,0x58,0x11,0xb0,0x6a,0x06,0xcb,0x00,
    0xab,0x6e,0xb0,0x4c,0xb0,0x5a,0x06,0xcb,0x02,0xab,0x6b,0xb0,0xa2,0x60,0xb9,0x52,
    0x63,0x37,0x2a,0x1d,0x6f,0x9e,0x1b,0x4d,0x2f,0x72,0xd5,0x5a,0xf4,0xf6,0x6a,0x26,
    0xf6,0xbd,0xa9,0x85,0xd8,0xf7,0x71,0xdf,0x97,0x9e,0xd7,0xc5,0x72,0x15,0x6a,0x2a,
    0xf2,0x0e,0x8f,0x6f,0x67,0x21,0x7c,0x3b,0x0d,0xdf,0x2e,0x8f,0x6f,0x17,0x7c,0x2a,
    0xef,0x65,0x9c,0x15,0x91,0x73,0xc2,0x58,0x2e,0xe7,0x9e,0x52,0x6e,0x14,0x49,0x91,
    0x7d,0x72,0xc4,0x27,0xef,0x39,0xce,0x26,0x41,0x3d,0x83,0xe8,0x3b,0x25,0xaa,0x7b,
    0x1a,0x79,0x55,0x71,0x39,0xa5,0xf3,0xae,0x78,0x15,0x67,0x53,0xc2,0x60,0x65,0x1c,
    0x5b,0x0e,0x1c,0xa2,0x2b,0x13,0xf1,0xc6,0x3a,0xe1,0x2b,0xcf,0x7b,0x0e,0x7c,0x15,
    0x8c,0x6f,0x79,0x7c,0x2a,0x93,0x8f,0x60,0x95,0x5c,0xb7,0x68,0x4f,0xfc,0x9f,0x47,
    0x62,0x5e,0x4e,0x5f,0x08,0x4f,0x13,0xe4,0x2b,0xc0,0x64,0xcc,0xd5,0xc9,0x57,0xe6,
    0xa1,0x26,0x72,0x0d,0xe3,0x7f,0x25,0xb6,0x09,0xa3,0xaf,0x43,0xef,0xaa,0x9c,0x4b,
    0xce,0x35,0xa9,0x61,0x53,0xe6,0x51,0xe5,0x66,0xf4,0xab,0xda,0xb7,0xf4,0xe4,0xb6,
    0xd8,0x97,0x76,0x2c,0x77,0x18,0xbf,0x0e,0xcc,0xb7,0xca,0x5d,0x98,0x9b,0x8b,0x1d,
    0xaa,0xfd,0x57,0x89,0x3e,0xeb,0x45,0xbe,0xf7,0x92,0x4b,0x6f,0xc6,0x2b,0x72,0x1f,
    0x93,0x9f,0xc4,0xeb,0x6b,0xe6,0xf8,0x7e,0x74,0x76,0x7c,0xfd,0x59,0x0f,0x2a,0x3f,
    0xc2,0x3a,0x52,0x39,0xdf,0xe4,0x25,0xf2,0x93,0xee,0xf9,0x37,0xb9,0x40,0x1e,0xce,
    0xda,0xd1,0xbc,0x9f,0x35,0xfe,0x22,0x4f,0xf1,0xea,0x35,0x8f,0x39,0x90,0x7c,0xde,
    0x60,0xee,0xab,0x1b,0xfe,0x37,0x85,0xdf,0x7d,0x54,0x5e,0x62,0xe6,0x4b,0xfc,0xd7,
    0x22,0x4b,0x5d,0x76,0x98,0xba,0xc8,0x7a,0xd9,0x01,0xef,0x17,0xc4,0xdc,0x49,0x5d,
    0x44,0xde,0x05,0x56,0xd6,0xc9,0xbb,0xf1,0x4b,0xc6,0x7e,0x0f,0x9c,0xbb,0xb1,0xdf,
    0xc3,0xbe,0x19,0xa2,0xff,0x92,0xf7,0x84,0xc9,0xa3,0x74,0x18,0xef,0xa5,0xb5,0x9c,
    0x24,0x7e,0xb2,0xe6,0x04,0x5b,0x4b,0x8e,0x0d,0x5d,0xd7,0x24,0x31,0xd7,0x01,0xb1,
    0x4e,0x38,0x24,0x95,0x18,0x32,0xee,0xdf,0x18,0xbf,0xca,0x07,0x3d,0xf9,0x98,0x27,
    0x4b,0x12,0x56,0x0e,0x8d,0x2c,0x6b,0x2a,0xc5,0xd3,0xa7,0x7a,0x72,0xba,0x67,0x9f,
    0xe1,0xe9,0x4b,0x20,0xdf,0xe0,0xb2,0x94,0x31,0xff,0x40,0x1d,0xa4,0x17,0xaf,0x63,
    0xdc,0x3f,0x82,0x8b,0x8d,0xac,0x97,0x9f,0x58,0x63,0x7d,0x8d,0xcd,0xcf,0xe0,0xcb,
    0x9c,0x8d,0xf4,0xf8,0x2f,0xf8,0x09,0x7e,0xdc,0x55,0xe2,0x00,0x35,0x39,0xe5,0xec,
    0x45,0xf7,0xab,0x7b,0x0e,0x50,0x1f,0x79,0x3f,0xeb,0x06,0x2a,0xef,0x07,0xa2,0xf5,
    0x94,0x1c,0xd5,0xa9,0x0b,0xef,0x07,0x79,0x3f,0xe9,0xf4,0xbf,0xe3,0x23,0xdf,0xff,
    0x38,0xae,0xc3,0xee,0xfb,0x08,0xdc,0xa2,0x3f,0x8a,0xfe,0xa8,0xc9,0xed,0x0f,0xea,
    0xbc,0x9c,0xdc,0xfe,0x04,0x5b,0x4b,0x3e,0x22,0x1f,0x72,0xcf,0x61,0x7c,0x0f,0x99,
    0x7a,0xfc,0x55,0x48,0x3d,0xfe,0x06,0x1f,0xe5,0x6c,0x12,0x51,0x1e,0x31,0xb6,0xd6,
    0xd8,0x1c,0x27,0xe6,0x70,0x6c,0x4e,0x60,0x77,0x9c,0x31,0x1d,0x03,0x53,0xfb,0x93,
    0xcc,0xbd,0xd6,0xf8,0x14,0x35,0x5e,0x62,0x6c,0x4e,0x83,0x6b,0x8d,0xcf,0xe0,0x77,
    0x9a,0x1a,0x9f,0x33,0x35,0x3e,0x13,0xd5,0x34,0x88,0x30,0x19,0xd3,0x59,0xea,0xa3,
    0x63,0x3c,0x67,0x78,0x93,0xc2,0x38,0xb6,0xe4,0x25,0xfd,0x25,0xf2,0xb5,0xe4,0x9d,
    0x1c,0xca,0x79,0x12,0xf7,0x9d,0xe8,0xa5,0x1f,0x05,0x53,0xdf,0x04,0x17,0x0b,0xd1,
    0x49,0xef,0x25,0xf0,0x8d,0xce,0x85,0x30,0x3e,0xe7,0x53,0xd1,0x47,0xbd,0x6a,0x7c,
    0x8b,0x98,0xb8,0xd2,0xa7,0x45,0xd0,0x89,0x6f,0x66,0x18,0xf7,0xb6,0xe8,0xa4,0x67,
    0x33,0x23,0xde,0x44,0xe4,0x97,0x15,0xca,0xfa,0x8f,0x7b,0x3b,0xc3,0xf0,0x15,0x0d,
    0xe3,0xf5,0xf5,0x09,0xb9,0x17,0x0b,0x63,0x2c,0x2b,0x2c,0xe8,0x29,0xc1,0xa4,0x0e,
    0x47,0xa8,0xc3,0x11,0x53,0x87,0xe2,0xe1,0x85,0x73,0x96,0x1d,0xc6,0xd8,0x12,0xd3,
    0x87,0xd9,0xe1,0x85,0x7d,0x78,0xd8,0xf8,0x97,0x24,0xbe,0xd8,0xca,0xba,0x2a,0x49,
    0x2d,0x64,0x4f,0x28,0x15,0xc6,0xe7,0xb9,0xe0,0xd2,0xeb,0xd7,0xb8,0xa7,0x21,0x71,
    0x32,0x99,0x37,0x39,0x33,0x1a,0x39,0xdf,0x34,0xce,0x24,0x7d,0xcf,0x20,0x56,0x96,
    0x89,0x55,0x0d,0x1b,0xed,0x97,0x9a,0xf4,0x4b,0x0d,0x63,0x53,0x0b,0x5c,0xfb,0xf4,
    0x2a,0xfc,0x6a,0x19,0x9b,0xda,0xf0,0x2b,0x4f,0x5d,0x78,0xea,0x18,0x9b,0x7a,0xe0,
    0xca,0x53,0x1f,0xbf,0x7a,0xa6,0x56,0x57,0xc3,0x5f,0xdf,0x70,0x35,0x80,0x2b,0xd7,
    0x70,0x35,0x04,0x57,0xbf,0x46,0xf8,0x36,0x8c,0x7a,0x35,0x29,0x92,0x6d,0x6d,0x8a,
    0x17,0x52,0x9b,0xa2,0xe6,0xbd,0x18,0xb5,0xc9,0x36,0x7b,0x5a,0x63,0xf6,0x50,0x8d,
    0xd9,0x04,0x9f,0x71,0x70,0x5e,0x07,0xd6,0xd4,0x8c,0xe9,0x7a,0xf0,0x66,0xcc,0x5f,
    0xe3,0xf3,0x58,0xcc,0xd1,0x1c,0x5e,0xc9,0xb1,0xb9,0x97,0x63,0xa9,0x40,0xef,0xed,
    0x05,0x79,0x95,0x24,0xaf,0xd2,0x26,0xaf,0x16,0xde,0xde,0xde,0xda,0x93,0xbb,0x7a,
    0x72,0x37,0x4f,0xee,0xee,0xc9,0x3d,0x3d,0x79,0x88,0x27,0x0f,0xf3,0xe4,0x31,0x9e,
    0x3c,0xc1,0x93,0x67,0x79,0xf2,0x6c,0x23,0xcb,0xb9,0xbd,0xc0,0xd3,0xaf,0xf1,0xe4,
    0x4d,0x5e,0xdd,0x6f,0xa4,0x0e,0xda,0x0f,0x37,0xd1,0x0f,0x2d,0x8d,0x4d,0x1e,0xf8,
    0x18,0x6a,0xd9,0x0a,0xbf,0x3c,0xe6,0xa1,0x05,0x98,0xda,0xdf,0xec,0x71,0xde,0x52,
    0x08,0x67,0x1b,0x70,0x9d,0xef,0x5b,0xf1,0x6b,0x03,0x67,0x6b,0x30,0xb5,0xbf,0x8d,
    0xb9,0x50,0xce,0xdb,0xe1,0x6c,0x6b,0x6c,0xda,0x81,0xeb,0xde,0xdb,0x1e,0xbf,0x76,
    0xc6,0xe6,0x4e,0x78,0xf4,0x9c,0xe9,0x08,0x26,0xf7,0xbc,0x85,0x60,0x77,0xe1,0xdb,
    0x91,0x3d,0xbb,0xb3,0xd9,0xb3,0x45,0xd7,0xc9,0x3d,0x9d,0xe9,0x9d,0x4e,0xf4,0x5b,
    0x17,0xe4,0xce,0x26,0xd6,0xdd,0xf4,0x93,0x8c,0xa7,0x1b,0xb2,0xea,0xee,0x21,0x0f,
    0xd1,0x75,0x47,0xd6,0xbd,0xb3,0x07,0xfb,0x4d,0x37,0xfa,0x49,0x6c,0xba,0x82,0xab,
    0xff,0x7d,0xf4,0xa2,0xce,0x49,0x3f,0xb0,0xa6,0x51,0x8d,0x12,0xd1,0x9d,0xf2,0x01,
    0xee,0x9d,0x7d,0xd1,0xab,0xef,0x83,0xe8,0x84,0xb7,0x27,0xb2,0xd6,0x75,0x00,0x75,
    0xed,0x6f,0xec,0x1f,0x02,0x5f,0x42,0x7d,0x06,0x82,0x75,0xa1,0x3e,0x83,0x4d,0x7d,
    0x44,0x37,0xc8,0x3d,0x33,0xa9,0xc7,0x20,0xc3,0x33,0x94,0x31,0x2f,0x86,0xe7,0x61,
    0xb0,0x0e,0xd1,0xfd,0x32,0x11,0xdd,0x2b,0x1f,0x05,0xcf,0xe5,0xce,0x9b,0x8f,0xef,
    0x63,0xe8,0x24,0xe7,0x21,0xc8,0xca,0xfb,0xb8,0xc7,0xfb,0x04,0x98,0xe5,0x7d,0x0a,
    0x3c,0x9f,0xbb,0xb2,0xf2,0x3e,0x8d,0x4e,0x78,0x87,0x21,0x6b,0x2d,0x9e,0xa1,0x16,
    0xc3,0x4d,0xac,0x11,0xe0,0x5a,0x8b,0x91,0x60,0x5a,0x8b,0xd1,0xa6,0x16,0x23,0xa3,
    0xbd,0x2b,0x08,0xc6,0x53,0x8b,0x51,0x86,0x67,0x2c,0x39,0xeb,0xde,0x36,0x8e,0x3b,
    0xfa,0x58,0x72,0x19,0x03,0x26,0xe7,0xd8,0x68,0xfc,0xc7,0x1b,0xff,0xe7,0xbc,0x31,
    0x3f,0x0f,0xd6,0x81,0x3c,0x26,0x99,0x3c,0x44,0x37,0xd1,0x3d,0x93,0xe1,0x99,0x48,
    0x8c,0x09,0xe6,0xce,0x36,0x09,0xdd,0x64,0x13,0xe3,0x05,0xf6,0x2b,0x95,0xa7,0x12,
    0x73,0x04,0x39,0x4f,0xe3,0x77,0xc4,0x54,0x33,0x8e,0x17,0xf1,0x9b,0x66,0xce,0x8f,
    0xe9,0xe0,0x53,0x4c,0xdc,0xe9,0x5e,0xdc,0x49,0x26,0xce,0x0c,0xf6,0x3d,0xad,0xc3,
    0x0c,0xaf,0x0e,0xa3,0x91,0x07,0x23,0xcf,0x34,0xbe,0x2f,0xb1,0x2e,0xc4,0x77,0x16,
    0xb2,0xce,0xe7,0xcb,0x85,0x9c,0x9b,0xaf,0x80,0x8b,0xfd,0x6c,0x64,0x5d,0x87,0x73,
    0x38,0xdb,0x66,0xb1,0xcf,0x6a,0x3e,0x73,0x0c,0xe7,0xab,0x85,0x70,0xbe,0x06,0xae,
    0x35,0x99,0x0b,0xd6,0xcc,0xf4,0xef,0x5c,0x63,0xff,0x3a,0x75,0xd6,0xb9,0x9c,0x0f,
    0x36,0x8f,0xb9,0x5c,0x64,0xe6,0x72,0x7e,0xb4,0x4f,0x89,0x6d,0x3c,0xf6,0x85,0x70,
    0x2e,0xe0,0x37,0x9a,0xd4,0x65,0x11,0xba,0xc5,0x26,0xc6,0x52,0x62,0x6c,0x76,0x31,
    0x64,0x3d,0xbc,0xc5,0xbd,0x75,0x29,0xf3,0x59,0x3d,0xda,0x37,0x0b,0x70,0xe5,0x5c,
    0xe6,0x71,0x2e,0x82,0x53,0xec,0xdf,0xe6,0xbc,0xd1,0xb5,0xb4,0x1c,0x4c,0xd7,0xd2,
    0x72,0x6f,0x9e,0x06,0x9b,0x7c,0xde,0xf1,0xf6,0xf3,0x77,0x0b,0xd9,0xcf,0x57,0x80,
    0xeb,0x7e,0xfe,0x1e,0x7e,0x2b,0x8c,0xcd,0xfb,0xde,0x3a,0x58,0x09,0x66,0xf7,0xf3,
    0x0f,0xf0,0x5d,0x49,0x3d,0x57,0x9b,0x7a,0x8a,0x6e,0x95,0x7b,0xd6,0x91,0xe3,0x2a,
    0xf2,0x5f,0xc3,0x6f,0x05,0xc9,0x7f,0x35,0xba,0x75,0x26,0xee,0x87,0x9c,0xed,0x2a,
    0xaf,0xe7,0xec,0xde,0xc4,0x9c,0x7f,0x84,0xcd,0x7a,0x63,0xb3,0x81,0xf3,0x7e,0x0b,
    0x36,0x1b,0xb1,0xdb,0x60,0x62,0x6e,0xf4,0x62,0xae,0x36,0xfe,0x1f,0x73,0x9e,0x8b,
    0xed,0x26,0x64,0xd5,0x6d,0xe6,0x6c,0x97,0xb3,0x68,0xb3,0xb9,0xfb,0xe4,0xf0,0x3f,
    0x5e,0x10,0xfd,0x37,0x54,0x70,0xf7,0x29,0x0b,0x7f,0x39,0xc3,0xb1,0x05,0x7c,0x20,
    0xf7,0xfb,0xad,0x60,0xc2,0xb9,0xd5,0xbb,0x4f,0x55,0x82,0xb3,0x82,0xe1,0xac,0xc8,
    0x7b,0xf9,0xe8,0x7f,0x80,0x98,0xff,0x12,0x73,0xf7,0xd8,0x66,0xee,0x1e,0xc2,0xff,
    0x29,0x76,0xf9,0xf4,0xd3,0x67,0x60,0xda,0x4f,0x9f,0x83,0xc9,0x78,0xb7,0x21,0x6b,
    0xae,0xdb,0xe1,0x93,0xdc,0xb6,0x9b,0xdc,0x92,0xcc,0x7f,0x72,0x95,0x4d,0x6e,0x55,
    0xc8,0xa7,0xaa,0xf9,0xdd,0xf8,0x55,0x21,0xbf,0x1b,0xbf,0x06,0xd7,0xbe,0xfc,0x86,
    0xbe,0xcc,0x37,0x36,0xdf,0x82,0xeb,0xd9,0xbb,0x0f,0xac,0xa9,0xd9,0xf3,0xbe,0x83,
    0x6b,0x9f,0xf1,0xfb,0x9e,0x3c,0xf4,0x7c,0xde,0xcf,0xff,0x1f,0x7d,0xb1,0x97,0x71,
    0xee,0xc7,0x4e,0x7f,0x7f,0xfc,0x07,0x72,0xf2,0x9c,0xa8,0x7c,0x16,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// layout(local_size_x = 64, local_size_y = 1, local_size_z = 1)in;
//
// layout(set = 0, binding = 0)buffer dest
// {
//     uint destData[];
// };
//
// layout(set = 0, binding = 1)buffer src
// {
//     uint srcData[];
// };
//
// layout(push_constant)uniform PushConstants
// {
//
//     uint outputCount;
//
//     uint componentCount;
//
//     uint srcOffset;
//     uint destOffset;
//
//     uint Ns;
//     uint Bs;
//     uint Ss;
//     uint Es;
//
//     uint Nd;
//     uint Bd;
//     uint Sd;
//     uint Ed;
//
//     bool isSrcHDR;
//     bool isSrcA2BGR10;
// } params;
//
// uint getSourceComponentOffset(uint vertex, uint component)
// {
//     return vertex * params . Ss + component * params . Bs + params . srcOffset;
// }
//
// uint getDestinationComponentOffset(uint vertex, uint component)
// {
//     return vertex * params . Sd + component * 4 + params . destOffset;
// }
//
// uint getShiftBits(uint offset, uint B)
// {
//
//     uint shift =(offset % 4)* 8;
//
//     return shift;
// }
//
//       uint loadSourceComponent(uint cd)
// {
//
//     uint vertex = cd / params . Nd;
//     uint component = cd % params . Nd;
//
//     if(component >= params . Ns && component < 3)
//     {
//         return 0;
//     }
//
//     uint offset = getSourceComponentOffset(vertex, component);
//     uint block = srcData[offset / 4];
//
//     uint shiftBits;
//     uint valueBits;
//     uint valueMask;
//
//     if(params . isSrcHDR)
//     {
//         valueBits = component == 3 ? 2 : 10;
//         valueMask = component == 3 ? 0x03 : 0x3FF;
//         if(params . isSrcA2BGR10)
//         {
//             shiftBits = 10 * component;
//         }
//         else
//         {
//
//             shiftBits = component == 3 ? 0 :(valueBits *(2 - component)+ 2);
//         }
//     }
//     else
//     {
//         shiftBits = getShiftBits(offset, params . Bs);
//         valueBits = params . Bs * 8;
//         valueMask = valueBits == 32 ? - 1 :(1 << valueBits)- 1;
//     }
//
//     uint valueAsUint;
//
//     if(component >= params . Ns && component == 3)
//     {
//
//         valueAsUint = 1;
//
//     }
//     else
//     {
//         valueAsUint =(block >> shiftBits)& valueMask;
//     }
//
//           uint value = valueAsUint;
//
//     return value;
// }
//
//        float convertComponent(uint srcValue)
// {
//
//     return srcValue;
// }
//
// uint makeDestinationComponent(uint cd, float value)
// {
//
//     uint valueAsUint = floatBitsToInt(value);
//
//     return valueAsUint;
// }
//
// void storeDestinationComponents(uint valueAsUint)
// {
//
//     destData[gl_GlobalInvocationID . x + params . destOffset / 4]= valueAsUint;
// }
//
// void main()
// {
//     if(gl_GlobalInvocationID . x >= params . outputCount)
//         return;
//
//     uint valueOut = 0;
//     for(uint i = 0;i < 1;++ i)
//     {
//         uint cd = gl_GlobalInvocationID . x * 1 + i;
//         if(cd >= params . componentCount)
//         {
//             break;
//         }
//
//               uint srcValue = loadSourceComponent(cd);
//                float destValue = convertComponent(srcValue);
//         valueOut |= makeDestinationComponent(cd, destValue);
//     }
//
//     storeDestinationComponents(valueOut);
// }
