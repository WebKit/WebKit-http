// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2020 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ConvertIndex.comp.00000002.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kConvertIndex_comp_00000002[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x6d,0x95,0x4b,0x48,0xd4,0x51,
    0x14,0xc6,0xef,0xcc,0xe8,0xf4,0xa4,0x07,0x65,0xe9,0x60,0x52,0xcd,0x46,0x28,0xa4,
    0x45,0x85,0x93,0xaf,0xcc,0xc5,0x98,0x48,0xa4,0x56,0x58,0x41,0x35,0x10,0x69,0x8b,
    0xda,0x94,0x91,0xae,0xda,0x69,0x16,0x84,0x90,0x8f,0xac,0x45,0x82,0x60,0x09,0x96,
    0x10,0x54,0x82,0x5a,0x46,0xd1,0xb2,0x22,0xa8,0x56,0xd1,0xb6,0x22,0xa8,0x20,0x32,
    0xed,0x75,0xce,0x7f,0x7e,0x37,0x4e,0x83,0xc1,0xed,0xce,0xf9,0xce,0xf9,0xbe,0xf3,
    0xb8,0xf7,0x7f,0x8d,0x84,0xe3,0xf3,0x9c,0x0b,0xb9,0x85,0x6e,0xbe,0xfb,0xed,0xd2,
    0xff,0x96,0xbb,0xb0,0x20,0xce,0x2d,0x72,0xd1,0x60,0x4f,0xd6,0x36,0xd4,0x16,0x9d,
    0x3a,0x7d,0xb4,0x68,0xf3,0x96,0x4d,0xea,0x5f,0xe2,0x22,0x41,0x9c,0xfa,0x96,0x4a,
    0x4c,0xb6,0xec,0x59,0xb2,0x4e,0xa4,0x8e,0x9f,0x54,0xbc,0x5e,0xd6,0x32,0xc1,0xb3,
    0x02,0x2d,0xe7,0xb6,0x13,0x1b,0x68,0x09,0x9a,0x23,0x7b,0x14,0x4e,0xb5,0xfc,0xbf,
    0x8a,0xbc,0xb9,0x81,0x9d,0xfd,0xcf,0x8e,0xb3,0x27,0x25,0x9f,0x62,0x11,0xf8,0x1a,
    0xb7,0xfe,0x9f,0x2f,0x6d,0xaf,0x33,0xfa,0xc5,0x19,0xfa,0x89,0x0c,0xfd,0xc4,0x1c,
    0xfa,0x09,0xa3,0x5f,0x92,0xa1,0x5f,0x82,0x7e,0x18,0x7e,0x69,0x06,0xdf,0x63,0x21,
    0xb0,0x2c,0x83,0x85,0xc1,0xe6,0x1b,0x2c,0x02,0xb6,0x98,0xdc,0x3e,0x4e,0x73,0xd5,
    0x07,0x73,0x77,0x2e,0x1f,0xbb,0xfd,0xbf,0x5e,0xb2,0x5d,0xc7,0x1c,0xb5,0x77,0x98,
    0xda,0x3b,0x33,0x6a,0xef,0xa4,0x76,0x6f,0xf7,0x66,0xe8,0xf5,0xcd,0xa1,0xd7,0x67,
    0xf4,0xfa,0x33,0xf4,0xfa,0xd1,0xf3,0xfe,0x87,0xd4,0x9b,0x27,0x6b,0x85,0x74,0x11,
    0x0e,0xfc,0x91,0xc0,0xaf,0xbf,0x73,0x24,0x46,0xf3,0xad,0x45,0x63,0x8d,0x78,0xfc,
    0xf9,0x17,0x70,0xae,0x39,0x81,0x3f,0xcb,0xad,0x86,0xa3,0x58,0x09,0x76,0xae,0xd1,
    0xc9,0x43,0x47,0xe7,0xbc,0x01,0x3b,0x86,0xae,0xb7,0xf3,0x89,0x57,0xbd,0x02,0x7e,
    0x47,0xf1,0x47,0xe9,0x33,0x62,0xe2,0x0b,0x8d,0x9d,0x8e,0x73,0xee,0x0f,0x75,0x16,
    0x9b,0x3a,0xf5,0x7e,0x14,0xa3,0xbb,0x0d,0xdd,0x04,0x75,0x6e,0x0b,0xf6,0x34,0x56,
    0x20,0x8c,0x52,0x78,0x76,0x29,0xaf,0x4c,0xf6,0x05,0xb2,0x4a,0xe1,0xa9,0x5d,0x0e,
    0xa6,0xfe,0x0a,0x7e,0xdb,0x7a,0x93,0xe8,0xae,0x16,0x7b,0x37,0xbe,0x08,0xf1,0x75,
    0xcc,0x62,0x37,0x7a,0x75,0x7c,0x7b,0x21,0xc3,0x6f,0x60,0x3e,0x1a,0xbf,0x07,0x5f,
    0xd4,0xf4,0xdf,0x08,0xb6,0x52,0xb2,0x1c,0x32,0xbc,0x16,0x70,0x9d,0x43,0xbb,0x99,
    0x83,0xde,0xb5,0x76,0xf4,0xce,0x53,0x5b,0x07,0xf9,0xd5,0xee,0x04,0x53,0x5e,0xaf,
    0xe1,0xe9,0x9d,0xea,0x85,0x77,0x85,0x98,0x3e,0x78,0x6a,0xf7,0x83,0xf9,0xfc,0xe3,
    0xdc,0x51,0x6f,0x3f,0xe0,0x1d,0xd9,0x28,0x96,0xf6,0xfb,0x10,0xac,0x85,0xe5,0xe3,
    0x66,0x83,0xb7,0xc7,0xb9,0xad,0x72,0xb7,0xc3,0x68,0x38,0x66,0x36,0x2d,0x88,0xbe,
    0x55,0xdf,0xc5,0x9a,0x02,0x9f,0x95,0xdf,0x3a,0xa3,0x47,0xf8,0x75,0xaf,0x94,0xa8,
    0x0a,0xf2,0x95,0x73,0xc7,0xca,0xd0,0xaf,0x04,0xaf,0x14,0x4b,0xef,0xd7,0x0e,0xce,
    0x3e,0x86,0xcf,0xc7,0x55,0xe1,0x3b,0x27,0x5a,0xd1,0xe0,0x5b,0x4b,0xfb,0x93,0x86,
    0xbb,0xd3,0x70,0xab,0x0d,0xb7,0x06,0x9f,0xe7,0xee,0x02,0xab,0xa2,0x36,0x3d,0xc7,
    0xbd,0x9c,0x75,0x83,0xe1,0xed,0x03,0x7f,0x04,0x6f,0x3f,0xbc,0x46,0xa3,0x75,0x80,
    0x38,0xf5,0x3d,0x06,0x3b,0x08,0xae,0x71,0xb7,0x04,0xd3,0x7b,0x70,0x18,0x7c,0x17,
    0xf3,0x4a,0x31,0xaf,0x19,0xc9,0xa5,0xbe,0x23,0xb2,0x52,0xcc,0x4c,0x7f,0xff,0x90,
    0x7d,0x0a,0x3b,0x65,0x74,0x8e,0xa1,0x53,0x83,0x4e,0xb3,0xd1,0x51,0x5f,0x93,0xac,
    0x66,0x78,0x4d,0xa6,0xf6,0x67,0xf0,0xf2,0xcd,0xbc,0x9e,0xf3,0x1e,0xc4,0xf0,0xfb,
    0xbe,0x5f,0xe0,0x7b,0x0a,0xf7,0x25,0xdc,0xb8,0xe9,0xf1,0x15,0x78,0xa1,0xc9,0xf1,
    0x1a,0xee,0x2b,0xc3,0x7d,0x03,0xbe,0xc1,0x70,0xdf,0x82,0xeb,0xac,0x9f,0x80,0xbd,
    0xc3,0x7e,0x4b,0xef,0xbe,0x07,0xdd,0xbf,0xb9,0x79,0x41,0xcc,0x4f,0x62,0x52,0xc4,
    0x37,0x99,0x73,0x38,0x43,0x8d,0x7a,0x77,0x47,0x99,0xd5,0x59,0x70,0x3f,0xf3,0x36,
    0x33,0x2b,0xf5,0xb5,0xca,0x6a,0x23,0x4f,0xab,0xe9,0xe3,0x3d,0x3c,0x3b,0xab,0x0f,
    0x66,0x56,0xef,0xcd,0xac,0x3e,0xe2,0xf3,0xfd,0x7e,0x82,0x6b,0x67,0xf5,0x19,0xdc,
    0xce,0xea,0x0b,0xdc,0xcf,0x86,0xfb,0x15,0xdc,0xce,0x6a,0x1a,0x7c,0xd6,0xcc,0x6a,
    0x86,0x59,0x4c,0x33,0x2b,0xdf,0x43,0x9b,0x99,0xd5,0x2f,0x62,0x9a,0x89,0x6f,0x35,
    0xdf,0xe1,0x05,0xbe,0xc3,0x46,0xd3,0xc7,0x45,0x70,0x3f,0xcf,0x4b,0x60,0xfb,0xcc,
    0x0c,0xba,0x78,0x8f,0x62,0xf8,0xcb,0x65,0xa6,0x5d,0xe4,0x1a,0x66,0xe6,0x97,0xe1,
    0x34,0x30,0xf3,0x1e,0x33,0x73,0xf5,0x75,0xcb,0xea,0xa1,0xde,0x6e,0x53,0xd3,0x55,
    0x6a,0x2a,0x34,0x35,0x5d,0x03,0xf7,0xf6,0x75,0xde,0x00,0x5f,0xcf,0x00,0xef,0x5c,
    0x8c,0x58,0xad,0x67,0x80,0x38,0xdf,0xc7,0x20,0xbe,0x16,0x83,0x0d,0xf1,0x76,0xb4,
    0x18,0xad,0x1b,0xe6,0xed,0x18,0x32,0x39,0x6f,0xe2,0xf3,0x71,0xc3,0x26,0xe7,0x20,
    0x39,0x87,0x89,0xf3,0xfa,0x23,0xe4,0x4c,0x9a,0xb3,0xbd,0xcd,0x37,0x6b,0x73,0x8e,
    0x1a,0xad,0x11,0xb4,0x46,0x89,0xf5,0x5a,0x77,0xd0,0x8a,0x1b,0xec,0x2e,0xf5,0xc7,
    0x8d,0xd6,0x3d,0x53,0xff,0x5d,0x53,0xff,0x7d,0x7c,0x3e,0x6e,0xcc,0xe4,0xbc,0x43,
    0xce,0x31,0xe2,0xbc,0xfe,0x04,0x39,0xc7,0x0d,0x6f,0xd2,0xf0,0x26,0xe0,0x4d,0x72,
    0xce,0x7a,0x07,0xfd,0x99,0xf6,0x64,0xbc,0x5d,0x53,0xc1,0xfd,0x08,0xc9,0xdf,0xfa,
    0x90,0xfb,0x0b,0x00,0x5d,0x68,0xd1,0x1c,0x0b,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// layout(local_size_x = 64, local_size_y = 1, local_size_z = 1)in;
//
// layout(set = 0, binding = 0)buffer dst
// {
//
//     uint dstIndexBuf[];
// };
//
// layout(set = 0, binding = 1)readonly buffer src
// {
//
//     uint srcIndexBuf[];
// };
//
// layout(set = 0, binding = 2)readonly buffer srcIndirect
// {
//
//     uint srcIndirectBuf[];
// };
//
// layout(set = 0, binding = 3)buffer dstIndirect
// {
//
//     uint dstIndirectBuf[];
// };
//
// layout(push_constant)uniform PushConstants
// {
//
//     uint srcIndirectOffsetDiv4;
//
//     uint dstIndexBufOffsetDiv4;
//
//     uint maxIndex;
//
//     uint dstIndirectBufOffsetDiv4;
// };
//
// uint PullIndex(uint index)
// {
//
//     uint srcIndex = index;
//
//     uint srcBlock = srcIndexBuf[srcIndex >> 2];
//     uint srcComponent =(srcIndex & 3);
//
//     uint value =(srcBlock >>(srcComponent << 3))& 0xFF;
//
//     return value;
// }
//
// void PackIndexValue(uint srcValue, uint indexIndex, inout uint dstValue)
// {
//
//     dstValue |= srcValue <<(indexIndex << 4);
// }
//
// void main()
// {
//
//     uint indexCount = srcIndirectBuf[srcIndirectOffsetDiv4];
//     uint firstIndex = srcIndirectBuf[srcIndirectOffsetDiv4 + 2];
//     uint endIndex = firstIndex + indexCount;
//
//     uint index =((gl_GlobalInvocationID . x +(firstIndex >> 1))<< 1);
//
//     if(index >= endIndex)
//         return;
//
//     uint dstValue = 0;
//
//     if(index >= firstIndex)
//     {
//         uint srcValue = PullIndex(index);
//         PackIndexValue(srcValue, 0, dstValue);
//     }
//
//     if(index + 1 < endIndex)
//     {
//         uint srcValue = PullIndex(index + 1);
//         PackIndexValue(srcValue, 1, dstValue);
//     }
//
//     dstIndexBuf[dstIndexBufOffsetDiv4 + gl_GlobalInvocationID . x]= dstValue;
//
//     if(gl_GlobalInvocationID . x == 0)
//     {
//         dstIndirectBuf[dstIndirectBufOffsetDiv4]= srcIndirectBuf[srcIndirectOffsetDiv4];
//
//         dstIndirectBuf[dstIndirectBufOffsetDiv4 + 1]= srcIndirectBuf[srcIndirectOffsetDiv4 + 1];
//
//         dstIndirectBuf[dstIndirectBufOffsetDiv4 + 2]= firstIndex & 1;
//
//         dstIndirectBuf[dstIndirectBufOffsetDiv4 + 3]= srcIndirectBuf[srcIndirectOffsetDiv4 + 3];
//         dstIndirectBuf[dstIndirectBufOffsetDiv4 + 4]= 0;
//     }
//
// }
