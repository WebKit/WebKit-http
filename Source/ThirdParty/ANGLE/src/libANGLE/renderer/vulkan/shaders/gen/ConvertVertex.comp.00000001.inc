// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2020 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ConvertVertex.comp.00000001.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kConvertVertex_comp_00000001[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x9d,0x99,0x79,0x94,0xce,0x55,
    0x18,0xc7,0x7f,0x77,0x36,0x32,0x63,0x37,0xa1,0x98,0x8c,0x5d,0xc6,0x96,0x41,0x91,
    0xbd,0x31,0x13,0x33,0x96,0xf6,0x4d,0xab,0x16,0x1c,0x5a,0x10,0xed,0x85,0x94,0xf6,
    0x45,0x49,0x59,0x42,0x24,0x6d,0x5a,0x95,0x76,0x11,0xa5,0xbd,0x73,0x3a,0x47,0x49,
    0x29,0x6d,0xda,0x4b,0xa4,0x52,0xdd,0xe7,0xbd,0x9f,0xc7,0x3c,0x73,0xbd,0x7f,0x35,
    0xe7,0xfc,0xce,0xfb,0xfb,0x7e,0x9f,0xf5,0x3e,0xf7,0xb9,0xcb,0xfb,0x4e,0x66,0x46,
    0x8b,0x6a,0x49,0xe2,0x92,0x1a,0x49,0xf5,0xe4,0x08,0x97,0xa4,0xfe,0xea,0x26,0x19,
    0x89,0xbc,0xe6,0x26,0x39,0xa9,0xcf,0xd2,0xf2,0x23,0xcb,0x3b,0x4e,0x98,0x38,0xaa,
    0x63,0x71,0xb7,0xce,0x22,0xaf,0x95,0x64,0xa6,0xf4,0x44,0x56,0xdb,0xeb,0x64,0xfb,
    0xcf,0x2c,0xff,0x8c,0x3b,0x6d,0xf4,0x78,0xe1,0x6b,0x7b,0x41,0x1d,0xcf,0x67,0xa5,
    0x7c,0x25,0x49,0x3f,0x74,0xe5,0x29,0xf3,0xda,0xad,0x42,0x98,0xa4,0x05,0x9f,0xca,
    0x39,0xb8,0x2c,0xc3,0x65,0xc0,0x55,0x37,0x5c,0x26,0x5c,0x9e,0xe1,0xb2,0xe0,0xea,
    0x18,0x2e,0x1b,0xae,0x81,0xe1,0x72,0xe0,0x1a,0x19,0xae,0x1a,0x5c,0x13,0xc3,0x55,
    0x87,0x6b,0x66,0xb8,0x7d,0xe0,0x5a,0x1a,0xae,0x06,0x5c,0x5b,0xc3,0xe5,0xc2,0x15,
    0x19,0x2e,0x0f,0xae,0xb3,0xe1,0x6a,0xc2,0x15,0x4b,0x8d,0xfd,0xa8,0x74,0xbc,0xa5,
    0x7e,0x34,0x13,0xc9,0x55,0x6b,0x31,0x29,0xaa,0x99,0xe8,0x4f,0xa2,0x16,0xa2,0x3f,
    0xd9,0x7f,0x36,0xdf,0x23,0x0b,0xb8,0x90,0x9a,0x0a,0xde,0xc7,0x55,0xf5,0x57,0xc3,
    0xed,0xed,0x4f,0x38,0xf5,0x97,0xe7,0xaa,0xfa,0x13,0x5c,0x68,0xb0,0xcc,0x71,0x2e,
    0x35,0x13,0x3c,0x02,0xdc,0xd8,0x3f,0xf5,0xfd,0x28,0x32,0x52,0xf1,0x33,0x53,0xfe,
    0xe4,0x3d,0xdf,0xeb,0xe4,0x50,0xcf,0x24,0xf5,0x99,0x95,0xaa,0x7b,0x35,0xc6,0x59,
    0xe8,0x73,0xaa,0xce,0xbb,0xf2,0x85,0x5e,0x27,0xdf,0x70,0x82,0x9b,0xe1,0x4f,0x70,
    0x81,0x9f,0x6d,0x9d,0xd3,0xff,0xf3,0x48,0x0e,0xad,0x99,0x57,0xf1,0xd3,0x0b,0xdc,
    0x06,0x4e,0x72,0x6e,0x4b,0xce,0x52,0xae,0xf6,0xe0,0x76,0xc6,0xfe,0x40,0x74,0x73,
    0x8c,0xbc,0x13,0xbd,0xa7,0xb8,0x98,0x9c,0x15,0xf7,0xa2,0x6f,0x14,0xf7,0xc3,0x87,
    0xe2,0x12,0xe6,0xb5,0x3d,0x35,0xab,0x60,0xde,0x14,0x0f,0xa3,0x3f,0x55,0xff,0x98,
    0x08,0x9f,0x8a,0x7e,0x03,0x1f,0xf5,0x0c,0x63,0x77,0x56,0xe4,0x77,0x2c,0x73,0xd1,
    0xd4,0xb3,0xda,0x6f,0x05,0xf4,0xd5,0x44,0xc6,0x77,0x21,0xb9,0x4f,0xa2,0x3e,0x82,
    0x27,0x47,0xe3,0x99,0x62,0xe6,0xf4,0x12,0x64,0xb6,0x1e,0x97,0xd3,0xff,0x8a,0x6f,
    0xf0,0xcf,0xbf,0x99,0x95,0xf8,0x66,0xd6,0x82,0xe6,0x75,0xa7,0xa9,0x8f,0xe0,0x85,
    0x26,0x9e,0xe0,0xc7,0x99,0x13,0x89,0xf7,0x24,0xbd,0xd0,0xd6,0xf8,0x7f,0x46,0xfc,
    0xfb,0x3f,0xc5,0xab,0xcc,0xfc,0x89,0xfd,0x1b,0x60,0x19,0xb7,0xae,0x8b,0x02,0xfa,
    0x5f,0xb0,0xf8,0xcd,0x75,0x21,0xa6,0x70,0xbd,0xc0,0x79,0x70,0x0d,0x3d,0xae,0x89,
    0x5d,0x26,0x79,0xd4,0x72,0xc1,0x67,0x4d,0xf4,0x05,0xd7,0x86,0x13,0x79,0x1d,0xde,
    0x6d,0x5d,0xda,0xb1,0x66,0x34,0xaf,0xe1,0x2e,0xf4,0x42,0x91,0x47,0xe2,0x47,0xd6,
    0x94,0x70,0x6f,0x90,0x73,0x77,0xdf,0x55,0x19,0xcc,0x6d,0x42,0xec,0x3f,0x3c,0x93,
    0xcd,0xdc,0xa4,0xd6,0x88,0x0b,0xf5,0x50,0xdc,0x3c,0xc2,0x1d,0x22,0x7c,0x68,0x84,
    0x7b,0x47,0xb8,0x5f,0x84,0xfb,0x47,0xf8,0xb0,0x08,0x0f,0x8a,0x70,0x05,0xb8,0xbf,
    0xcf,0x52,0x6a,0xd0,0x98,0xba,0x48,0xef,0xf5,0x66,0xdc,0xfb,0xc1,0x8b,0x8e,0xac,
    0xa7,0xfd,0x5d,0x58,0x83,0x53,0x8c,0x4e,0x13,0x17,0xf8,0x47,0xbc,0x8e,0xf4,0x74,
    0x53,0x17,0xec,0x84,0xdf,0xe9,0x2b,0x71,0x00,0xfb,0xd9,0x9f,0x5e,0x5f,0x64,0x05,
    0xfe,0x11,0x4e,0xea,0x23,0xef,0xbb,0x7d,0xf5,0xe5,0x5d,0xb8,0x3e,0x5e,0xbf,0x90,
    0x1c,0xe4,0xbd,0x39,0xef,0xbb,0xbc,0xbc,0x05,0x36,0xf2,0xb9,0xc3,0xfb,0x6a,0xe5,
    0x3f,0x5b,0xe3,0x5b,0xe4,0x6d,0x90,0xcb,0xa7,0xe6,0xd6,0xd6,0x85,0x3a,0x6b,0xfe,
    0x07,0x92,0x7f,0x3b,0xa3,0xd3,0xde,0x05,0x7e,0x05,0xf9,0x17,0xb9,0x60,0x27,0xbc,
    0xe4,0x2c,0xb8,0xa5,0x7f,0x5a,0xe1,0xbf,0xa5,0xab,0xac,0x59,0xc7,0x34,0x35,0xeb,
    0x04,0xaf,0x31,0x3b,0xa7,0x89,0xd9,0xc5,0x05,0x7e,0xba,0xd7,0x11,0x7c,0x90,0x0b,
    0x76,0x5d,0x8c,0x4e,0x57,0x72,0xbf,0x12,0x9d,0x62,0x17,0xf4,0xba,0x52,0x27,0xe9,
    0x97,0x62,0xa3,0xdf,0xcd,0x85,0x1e,0xd2,0xb8,0xdd,0x89,0xbb,0xca,0xe4,0xd6,0xc3,
    0x05,0x5e,0xe7,0xea,0x60,0x17,0xec,0x7a,0x30,0x57,0x3d,0xcd,0x5c,0x89,0xec,0x10,
    0xff,0xf4,0x64,0xdc,0xf2,0x2e,0x75,0xd6,0x3a,0xf4,0x34,0xb1,0xfb,0x10,0x5b,0xf2,
    0x92,0x3e,0x15,0x7c,0x08,0x79,0xf7,0x75,0xb2,0x2e,0x43,0xff,0x8a,0x5c,0xfa,0xba,
    0xaf,0xb1,0x1d,0xe0,0x42,0xaf,0x8b,0x4c,0x7a,0x78,0x80,0xb1,0x1d,0x28,0xbd,0x44,
    0x6f,0x8b,0x5c,0x7a,0x7e,0xa0,0xb1,0x2d,0x31,0x71,0xa5,0xdf,0x4b,0x8c,0xac,0xd4,
    0x85,0x35,0x22,0x32,0xe9,0xfd,0xd2,0x94,0xdf,0x9c,0x94,0xac,0x4c,0xfa,0x90,0x35,
    0x32,0xc8,0xd8,0x1c,0xee,0xc2,0x3a,0x5d,0x4b,0xfc,0xc1,0x2e,0x70,0x65,0xa6,0x37,
    0x07,0x53,0x87,0xd6,0xd4,0xa1,0xb5,0xb1,0x1f,0x12,0xcd,0x59,0xb9,0x0b,0xdc,0x2a,
    0xd3,0xcf,0xe5,0xae,0x6a,0x3f,0xb7,0x32,0xf6,0x43,0x89,0x2f,0xba,0xb2,0x3e,0x87,
    0x52,0x0b,0xd9,0x5b,0x86,0x71,0xee,0x57,0xb0,0x66,0x0e,0xf6,0x4f,0x77,0xe2,0xe4,
    0xb2,0xef,0xc8,0x59,0xd3,0xc3,0xdb,0x56,0xe3,0xdc,0xd2,0xf7,0x1a,0xec,0x47,0x79,
    0xa6,0x17,0x5a,0xa2,0xa3,0xfd,0xd2,0x9e,0xf3,0xb5,0x9d,0xd1,0x29,0x82,0xd7,0x3e,
    0xed,0x80,0x5d,0x91,0xd1,0xe9,0x88,0xff,0x3d,0xfd,0x8e,0x9f,0x4e,0x46,0xa7,0x0b,
    0xfc,0x9e,0x7e,0xc7,0x4e,0x78,0xad,0x55,0x57,0xfc,0x1f,0x64,0x7c,0x75,0xc3,0x57,
    0xb1,0xf1,0xd5,0x1d,0x5e,0xed,0x7a,0x60,0x2b,0xfc,0x3f,0x7e,0x8c,0x82,0x6d,0x6d,
    0x6a,0xa7,0xa9,0x4d,0x4d,0xf3,0x5e,0x8b,0xda,0xd4,0x31,0x31,0x7a,0xa2,0xa3,0x79,
    0x1c,0x4a,0x1e,0xbd,0x8c,0x4e,0x6f,0x78,0x1d,0x53,0x1f,0xec,0x7a,0x1b,0x9d,0xbe,
    0xf8,0x57,0x3f,0xfd,0xf1,0xd3,0xcf,0xe8,0x0c,0x80,0x57,0x3f,0x03,0xb1,0x1b,0x60,
    0xc6,0x78,0x18,0xfe,0x07,0x1a,0x5f,0x83,0xf0,0x55,0x62,0x7c,0x95,0xc2,0xab,0x5d,
    0x19,0xb6,0xa5,0xd4,0xa6,0x2c,0xaa,0x4d,0xfd,0x34,0xb5,0xa9,0x6b,0xde,0xeb,0x51,
    0x9b,0x06,0xe6,0xdc,0x18,0xc2,0xb9,0xae,0x31,0xcb,0xb1,0x99,0x89,0xcf,0xa1,0x70,
    0x15,0x66,0x4c,0xc3,0xe1,0x87,0xb1,0x0e,0x86,0xc0,0xa9,0x8f,0x11,0xf8,0x95,0x1c,
    0x47,0x44,0x39,0x36,0x24,0xc7,0x7c,0x93,0xd7,0xbe,0xe4,0xd5,0xc8,0xe4,0x75,0x54,
    0x52,0xf5,0x7c,0x3b,0x21,0xc2,0xe3,0x22,0x3c,0x3e,0xc2,0xe7,0x45,0x78,0x42,0x84,
    0xa7,0x47,0x78,0x66,0x84,0xef,0x88,0xf0,0xdc,0x08,0x2f,0x8b,0xf0,0x72,0x83,0xe5,
    0xae,0xf4,0x54,0x24,0x7f,0x3d,0xc2,0xef,0x45,0x75,0x3f,0x9a,0x3a,0x68,0x3f,0x1c,
    0x4b,0x3f,0x1c,0x63,0x74,0x8e,0x83,0x9f,0x41,0x2d,0x8f,0xc7,0xee,0x38,0xe6,0xe1,
    0x28,0x38,0xd5,0x3f,0x31,0xf2,0x79,0x52,0x1a,0x9f,0x23,0xe1,0x75,0xbe,0x4f,0xc6,
    0x6e,0x24,0x3e,0x4f,0x80,0x53,0xfd,0x53,0x98,0x0b,0xf5,0x79,0x1a,0x3e,0x4f,0x35,
    0x3a,0xa7,0xc3,0xeb,0xb9,0x34,0x0a,0xbb,0xd3,0x8d,0xce,0x99,0xf8,0xd1,0x73,0xfa,
    0x6c,0x38,0xb9,0x3b,0xdf,0x0f,0x77,0x0e,0xb6,0x22,0x93,0xf3,0x6c,0x4c,0x52,0x79,
    0x9e,0x89,0x6c,0xb4,0x7f,0xc6,0xd0,0x3b,0xa3,0xe9,0xb7,0xb1,0xe0,0x31,0x26,0xd6,
    0xb9,0xf4,0x93,0x8c,0x67,0x3c,0x58,0x65,0xe7,0x93,0x87,0xc8,0xce,0x03,0xeb,0xb9,
    0x72,0x01,0x7b,0xf1,0x78,0xfa,0x49,0x74,0xc6,0xc1,0xab,0xfd,0x45,0xf4,0xa2,0xce,
    0xc9,0xc5,0x70,0x15,0xa9,0x1a,0xe5,0xa4,0xee,0xe9,0x97,0x72,0x97,0x9f,0x82,0x5c,
    0x6d,0x2f,0x43,0x26,0x7e,0x27,0x80,0xb5,0xae,0x57,0x50,0xd7,0xcb,0x8d,0xfe,0x95,
    0xf0,0x0f,0x52,0x9f,0xab,0xe0,0xc6,0x52,0x9f,0x69,0xa6,0x3e,0x22,0x9b,0x9a,0xaa,
    0x65,0xa8,0xc7,0x54,0xe3,0xe7,0x6a,0xc6,0xbc,0x1c,0x3f,0x33,0xe0,0xa4,0xf6,0x0f,
    0x78,0x0d,0xb9,0x33,0x5f,0x03,0x5f,0xcc,0x3e,0x79,0x29,0xb6,0xd7,0x22,0x93,0x9c,
    0xa7,0x83,0xd5,0xef,0x75,0x91,0xdf,0xeb,0xe1,0xac,0xdf,0x1b,0xe1,0x4b,0xf8,0x7e,
    0xa2,0x7e,0x6f,0x42,0x26,0x7e,0x67,0x82,0xb5,0x16,0xb7,0x50,0x8b,0x9b,0x4d,0xac,
    0x5b,0xe1,0xb5,0x16,0xb7,0xc1,0x69,0x2d,0x66,0x99,0x5a,0x88,0xec,0x76,0xff,0xcc,
    0xa1,0x16,0xb7,0x1b,0x3f,0xb3,0xc9,0x59,0xf7,0xb6,0xbb,0xf8,0x5e,0x34,0x9b,0x5c,
    0xee,0x80,0x93,0x33,0x7e,0x16,0xf6,0x73,0x8c,0xfd,0xdd,0xd1,0x98,0xef,0x81,0x3b,
    0x8b,0x3c,0xe6,0x9b,0x3c,0x44,0x36,0xcf,0x3f,0x0b,0xf0,0x33,0x8f,0x18,0x73,0x93,
    0xca,0x7b,0xf1,0x7c,0x64,0x0b,0x4c,0x8c,0x7b,0xd9,0xaf,0x14,0x2f,0x22,0xe6,0x54,
    0x72,0x5e,0xcc,0x77,0xb7,0x45,0x66,0x1c,0xf7,0x61,0xb7,0xd8,0x9c,0x1f,0x4b,0xe0,
    0x17,0x9a,0xb8,0x4b,0xa2,0xb8,0xf3,0x4d,0x9c,0xa5,0xec,0x7b,0x5a,0x87,0xa5,0x51,
    0x1d,0x66,0x81,0xa7,0x81,0xef,0x37,0xb6,0x0f,0xb0,0x2e,0xc4,0x76,0x19,0x58,0xe7,
    0xf3,0xc1,0x34,0x77,0x8a,0x87,0xe0,0x45,0x7f,0x39,0x58,0xd7,0xe1,0xc3,0x9c,0x6d,
    0xcb,0xd8,0x67,0x35,0x9f,0x87,0x8d,0xcf,0x47,0xd2,0xf8,0x7c,0x14,0x5e,0x6b,0xb2,
    0x02,0x6e,0x98,0xe9,0xdf,0x15,0x46,0xff,0x31,0xea,0xac,0x73,0xf9,0x04,0xdc,0xe3,
    0xcc,0xe5,0x4a,0x33,0x97,0x22,0x7b,0xda,0x3f,0xcf,0x32,0xf6,0xa7,0xf1,0xf9,0x14,
    0xdf,0x8b,0xa5,0x2e,0x2b,0x91,0x3d,0x6b,0x62,0x3c,0x47,0x8c,0x35,0x3e,0x86,0xac,
    0x87,0xe7,0xb9,0xd3,0x3f,0xc7,0x7c,0x0a,0xf7,0x82,0xe1,0xd5,0xe7,0x0b,0x91,0xcf,
    0x95,0xf8,0x14,0xfd,0x17,0x39,0x6f,0x74,0x2d,0xbd,0x04,0xa7,0x6b,0xe9,0xa5,0x68,
    0x9e,0xa6,0x99,0x7c,0x5e,0x8e,0xf6,0xf3,0x57,0xd2,0xec,0xe7,0xab,0xe1,0x75,0x3f,
    0x7f,0x15,0xbb,0xd5,0x46,0x67,0x4d,0xb4,0x0e,0xd6,0xc2,0xd9,0xfd,0xfc,0x35,0x6c,
    0xd7,0x52,0xcf,0xf5,0xa6,0x9e,0x22,0x5b,0xe7,0x9f,0x0d,0xe4,0xb8,0x8e,0xfc,0x5f,
    0xe7,0x3b,0xb9,0xe4,0xbf,0x1e,0xd9,0x06,0x13,0xf7,0x4d,0xce,0x76,0xc5,0x6f,0x71,
    0x76,0xaf,0x66,0xce,0xdf,0x46,0xe7,0x2d,0xa3,0xf3,0x0e,0xe7,0xfd,0x3a,0x74,0xde,
    0x45,0xef,0x1d,0x13,0xf3,0xdd,0x28,0xe6,0x7a,0x63,0xff,0x3e,0xe7,0xb9,0xe8,0xbe,
    0x07,0x56,0xd9,0x07,0x9c,0xed,0x72,0x16,0x7d,0x10,0xdd,0x7d,0xf6,0x4b,0x73,0xf7,
    0x69,0x8c,0xff,0xfd,0x8d,0x8f,0x0f,0xe1,0xc5,0xc7,0x87,0x91,0x8f,0x82,0x34,0x77,
    0xbc,0x26,0xe6,0xbd,0x29,0xfe,0x0e,0x30,0x77,0x8d,0x8d,0xd1,0xdd,0x63,0x73,0x84,
    0xbf,0x88,0xf0,0xd6,0x08,0x7f,0x15,0xe1,0x6f,0x23,0xbc,0x2d,0xc2,0xdf,0x47,0xf8,
    0xe7,0x08,0x6f,0x8f,0xee,0x4a,0x3b,0x23,0x79,0xe2,0xaa,0xde,0x8d,0x3e,0x62,0x8c,
    0xda,0xa3,0x1f,0xa7,0xb9,0xc7,0x6c,0x82,0xd7,0x73,0xf8,0x13,0xec,0x36,0x31,0x4f,
    0x1b,0xe1,0x54,0xff,0xd3,0xc8,0xe7,0x67,0x69,0x7c,0x6e,0x81,0xd7,0xbb,0xd1,0xe7,
    0xd8,0x6d,0xc1,0xe7,0x66,0x38,0xd5,0xff,0x92,0x5a,0x8b,0x6c,0x2b,0x58,0x65,0x5f,
    0x53,0x77,0x91,0x7d,0x05,0xd6,0xfd,0xed,0x1b,0xbe,0xd7,0x6c,0xa5,0xd6,0xa2,0xf3,
    0x05,0xbc,0xda,0x7f,0xc7,0x3c,0x89,0x6c,0x1b,0x58,0x73,0xff,0x21,0xcd,0xf7,0x90,
    0x1f,0xe1,0x45,0xff,0x7b,0xb0,0xc6,0xfb,0x89,0xfd,0x74,0x1b,0x73,0x25,0x3a,0xdf,
    0xc2,0xab,0xcf,0x5f,0xd2,0xf8,0xfc,0x15,0x5e,0xf7,0xd3,0xdf,0xe0,0x74,0x3f,0xfd,
    0x19,0x4e,0xf5,0x7f,0x67,0xee,0x75,0x4f,0xd8,0x01,0xa7,0xfb,0xe9,0x2e,0xb3,0xfe,
    0x77,0xa4,0xfa,0x56,0xde,0x43,0xff,0xfe,0x81,0xcf,0x9d,0x66,0x3f,0xdd,0x85,0xec,
    0x4f,0x13,0xe3,0x2f,0x62,0xe8,0x7e,0xfa,0x37,0xfb,0xe6,0x5f,0x66,0x3f,0xdd,0x6d,
    0x78,0xf5,0xb9,0x3b,0xf2,0xb9,0xcb,0xec,0xa7,0xff,0xd0,0x93,0xba,0x9f,0xfe,0x0b,
    0x27,0xb6,0xdb,0xc1,0x1a,0xdf,0xb9,0xb0,0xe6,0x14,0x67,0xb8,0xd0,0xdf,0xba,0xb7,
    0x64,0xba,0xa0,0x93,0x61,0x7e,0x17,0xc8,0x72,0x61,0x0d,0xad,0x41,0x27,0xdb,0x05,
    0xbd,0x2c,0x7e,0x2b,0x90,0xfe,0xcf,0x36,0xfa,0x39,0xfc,0x53,0x47,0xf6,0x03,0x79,
    0xd7,0xfd,0x20,0xc3,0xfc,0x2f,0xa2,0x99,0xd9,0x03,0x0a,0x19,0x53,0x0b,0xf3,0x7b,
    0x60,0xdd,0x34,0xbf,0x6d,0xd5,0x83,0xd7,0x39,0xaf,0xef,0xf6,0xfe,0x0e,0xda,0xc0,
    0x05,0x5e,0xd7,0x55,0xbe,0x0b,0x5c,0x85,0xb9,0x57,0xec,0xeb,0x82,0xaf,0x7c,0x93,
    0x73,0x43,0xfe,0x8f,0xa1,0x77,0xe0,0x46,0xfc,0xae,0x3b,0x05,0x7d,0x19,0xa7,0x70,
    0x0d,0xcd,0xef,0x1f,0xff,0x01,0x75,0xc0,0xeb,0xfd,0x24,0x1b,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// layout(local_size_x = 64, local_size_y = 1, local_size_z = 1)in;
//
// layout(set = 0, binding = 0)buffer dest
// {
//     uint destData[];
// };
//
// layout(set = 0, binding = 1)buffer src
// {
//     uint srcData[];
// };
//
// layout(push_constant)uniform PushConstants
// {
//
//     uint outputCount;
//
//     uint componentCount;
//
//     uint srcOffset;
//     uint destOffset;
//
//     uint Ns;
//     uint Bs;
//     uint Ss;
//     uint Es;
//
//     uint Nd;
//     uint Bd;
//     uint Sd;
//     uint Ed;
//
//     bool isSrcHDR;
//     bool isSrcA2BGR10;
// } params;
//
// uint getSourceComponentOffset(uint vertex, uint component)
// {
//     return vertex * params . Ss + component * params . Bs + params . srcOffset;
// }
//
// uint getDestinationComponentOffset(uint vertex, uint component)
// {
//     return vertex * params . Sd + component * params . Bd + params . destOffset;
// }
//
// uint getShiftBits(uint offset, uint B)
// {
//
//     uint shift =(offset % 4)* 8;
//
//     return shift;
// }
//
//       uint loadSourceComponent(uint cd)
// {
//
//     uint vertex = cd / params . Nd;
//     uint component = cd % params . Nd;
//
//     if(component >= params . Ns && component < 3)
//     {
//         return 0;
//     }
//
//     uint offset = getSourceComponentOffset(vertex, component);
//     uint block = srcData[offset / 4];
//
//     uint shiftBits;
//     uint valueBits;
//     uint valueMask;
//
//     if(params . isSrcHDR)
//     {
//         valueBits = component == 3 ? 2 : 10;
//         valueMask = component == 3 ? 0x03 : 0x3FF;
//         if(params . isSrcA2BGR10)
//         {
//             shiftBits = 10 * component;
//         }
//         else
//         {
//
//             shiftBits = component == 3 ? 0 :(valueBits *(2 - component)+ 2);
//         }
//     }
//     else
//     {
//         shiftBits = getShiftBits(offset, params . Bs);
//         valueBits = params . Bs * 8;
//         valueMask = valueBits == 32 ? - 1 :(1 << valueBits)- 1;
//     }
//
//     uint valueAsUint;
//
//     if(component >= params . Ns && component == 3)
//     {
//
//         valueAsUint = 1;
//
//     }
//     else
//     {
//         valueAsUint =(block >> shiftBits)& valueMask;
//     }
//
//           uint value = valueAsUint;
//
//     return value;
// }
//
//        uint convertComponent(uint srcValue)
// {
//
//     return srcValue;
// }
//
// uint makeDestinationComponent(uint cd, uint value)
// {
//
//     uint vertex = cd / params . Nd;
//     uint component = cd % params . Nd;
//
//     uint offset = getDestinationComponentOffset(vertex, component);
//     uint shiftBits = getShiftBits(offset, params . Bd);
//
//     uint valueBits = params . Bd * 8;
//     uint valueMask = valueBits == 32 ? - 1 :(1 << valueBits)- 1;
//     uint valueAsUint =(uint(value)& valueMask)<< shiftBits;
//
//     return valueAsUint;
// }
//
// void storeDestinationComponents(uint valueAsUint)
// {
//
//     destData[gl_GlobalInvocationID . x + params . destOffset / 4]= valueAsUint;
// }
//
// void main()
// {
//     if(gl_GlobalInvocationID . x >= params . outputCount)
//         return;
//
//     uint valueOut = 0;
//     for(uint i = 0;i < params . Ed;++ i)
//     {
//         uint cd = gl_GlobalInvocationID . x * params . Ed + i;
//         if(cd >= params . componentCount)
//         {
//             break;
//         }
//
//               uint srcValue = loadSourceComponent(cd);
//                uint destValue = convertComponent(srcValue);
//         valueOut |= makeDestinationComponent(cd, destValue);
//     }
//
//     storeDestinationComponents(valueOut);
// }
