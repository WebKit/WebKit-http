// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2020 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/GenerateMipmap.comp.00000009.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kGenerateMipmap_comp_00000009[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x7d,0x58,0x6d,0x8c,0x55,0xd5,
    0x15,0xbd,0x6f,0x66,0xee,0xb9,0xf7,0x3e,0x3e,0x1e,0x1f,0x0a,0x28,0x83,0xa2,0x50,
    0x7f,0x00,0x21,0x6d,0x22,0xb4,0x0d,0x81,0x4a,0xa9,0x91,0x44,0xac,0x2d,0x68,0xe2,
    0x47,0x6c,0x4b,0x4a,0x05,0xdb,0x0a,0x3f,0x4a,0x63,0x6b,0x49,0x80,0x82,0x54,0x28,
    0x81,0xd4,0xd8,0x42,0x4a,0x8c,0x0c,0x2d,0xb4,0x0d,0x03,0x03,0xa4,0xfa,0x07,0x68,
    0x53,0xaa,0xed,0x0c,0x34,0x08,0x15,0xa3,0x7c,0x48,0x8d,0x52,0x14,0x6a,0x53,0x07,
    0xa1,0x8c,0x05,0x4d,0xcf,0x9a,0xb5,0x36,0x77,0xcf,0x73,0x84,0xe4,0x70,0xef,0x5e,
    0x7b,0x9f,0x7d,0xce,0x59,0x7b,0x9d,0x73,0xee,0xbc,0xc6,0x86,0x51,0x59,0x92,0x54,
    0x92,0x6a,0x92,0x27,0xc3,0x6a,0x49,0xf7,0xbf,0x81,0x49,0x43,0x44,0x92,0xa4,0x4f,
    0x12,0xba,0x9f,0x77,0xcc,0x98,0x35,0x63,0xfc,0xf7,0x16,0xce,0x19,0x7f,0xeb,0x84,
    0x4f,0xc3,0xdf,0x3f,0x69,0xec,0x8e,0x83,0xaf,0x96,0x64,0x49,0x1a,0x9f,0x4d,0xb1,
    0x3d,0x3a,0xfb,0x91,0xf9,0xc0,0x8f,0x46,0xe3,0x78,0x6c,0x03,0x62,0xff,0xa6,0xee,
    0x7c,0x0c,0xae,0xa8,0xcf,0xf4,0xd8,0xe3,0x20,0x87,0x4a,0x46,0xe9,0x69,0x58,0x45,
    0x58,0x8e,0x71,0xe3,0x38,0xc0,0x1a,0xba,0xdf,0x9b,0x92,0x13,0xf1,0x79,0xb3,0xe2,
    0xcd,0xbe,0x49,0x7d,0x60,0x9f,0xad,0xf3,0x9f,0x95,0x3f,0x51,0x2e,0xd8,0x43,0xe5,
    0xc3,0x1c,0xfb,0xc4,0xf7,0xeb,0x65,0x1f,0x97,0x3d,0x42,0xf6,0x3b,0xb2,0xaf,0x8b,
    0x6d,0x70,0x9c,0x41,0x43,0x77,0xae,0xc6,0xee,0x95,0xe3,0xfd,0xda,0x18,0x13,0xe2,
    0x73,0xa4,0xf2,0x0f,0x8d,0xf6,0xe0,0xf8,0x0c,0xce,0x3f,0x4c,0xfe,0x8a,0xfc,0xc8,
    0x35,0x4c,0xfe,0x21,0x31,0xd3,0x70,0xf9,0xe1,0x6b,0x8e,0xcf,0xe1,0xe2,0x71,0x64,
    0xfc,0x7f,0x74,0x7c,0xc6,0xc2,0x74,0xe3,0xd7,0xc4,0x1e,0x5f,0x88,0xcf,0xb1,0xca,
    0xb9,0x59,0x63,0x8e,0xd5,0x1c,0xb6,0x2a,0xa7,0xd9,0xad,0xb1,0x35,0x3a,0x7b,0x97,
    0x9b,0x43,0x87,0xc6,0x41,0xfc,0x0d,0xd1,0x3e,0xa8,0x39,0x77,0x68,0xdc,0x97,0xe2,
    0xb3,0x88,0x0d,0xf8,0x24,0xd9,0x87,0x84,0xd9,0xf8,0x87,0x95,0x0f,0xf1,0x7f,0x97,
    0xaf,0xa3,0x9b,0xab,0x22,0x39,0xaa,0xfc,0x95,0xa4,0xe7,0x3f,0xb3,0x87,0xc7,0x99,
    0x1d,0x83,0x46,0xd4,0xff,0xb8,0xf0,0x63,0x1a,0x0f,0xf6,0x09,0xb7,0x3e,0xe4,0xfa,
    0x87,0x6c,0xe4,0x3f,0xfd,0x09,0xf9,0x1b,0x84,0xd9,0x9a,0xdf,0xd6,0xba,0x9a,0x51,
    0xcb,0xf8,0x3c,0x2d,0x0c,0x63,0x9e,0x51,0x9f,0x77,0x34,0x26,0xec,0xb3,0xc2,0xe0,
    0x7f,0x57,0xef,0xa7,0x5d,0xbe,0xce,0x04,0x7a,0x66,0xbe,0x73,0xaa,0x4b,0xa7,0xec,
    0xf7,0xe3,0xf3,0x9c,0x6c,0xf4,0x3f,0xaf,0x3a,0xbe,0xaf,0xfc,0xb0,0x2f,0xb8,0xda,
    0x76,0xe9,0xbd,0xd9,0xad,0x31,0xef,0x5e,0xd0,0x92,0x29,0x36,0x5e,0xdf,0x0a,0x31,
    0xb3,0xfb,0x57,0x7a,0xd6,0x7c,0x65,0xb4,0x6f,0x73,0xf6,0xba,0x0a,0xb5,0x64,0x76,
    0x4b,0xc5,0xc6,0x68,0x4a,0x36,0x55,0x38,0x56,0x4b,0x85,0xe3,0xff,0xaa,0x42,0x6d,
    0x6d,0xaa,0x94,0x35,0xfd,0x77,0xa5,0xd4,0x10,0xec,0x6b,0x1a,0x4a,0x0d,0xc1,0x1e,
    0xdf,0xc0,0x7c,0x66,0xcf,0x6b,0xe0,0x1e,0xb5,0xf1,0xd6,0x3a,0x1b,0xfe,0xa7,0x9b,
    0xc8,0xbf,0xd9,0xcf,0x34,0x71,0x4c,0x68,0xf0,0x55,0xf9,0x1a,0xc5,0xc7,0x6b,0x4d,
    0xac,0x1d,0xf0,0x49,0xb2,0x8f,0x36,0x95,0x1a,0x3b,0xa6,0xf7,0x20,0x3e,0x8f,0xe9,
    0x7c,0x31,0xff,0x9b,0x4d,0xd4,0x60,0xf0,0xf5,0x6f,0xa2,0x20,0xc6,0x45,0x0b,0x79,
    0xb1,0x9f,0x81,0xed,0xd2,0x7e,0x18,0x17,0xcf,0x1b,0xec,0xd7,0xbe,0x35,0x72,0xb9,
    0xb2,0x52,0x62,0xfd,0x6a,0xe4,0x73,0x9d,0xc3,0xfa,0xd7,0x58,0xdf,0x4e,0xd7,0xb7,
    0x56,0xe3,0xba,0xd1,0x0c,0x1b,0x50,0x23,0xcf,0x2d,0xae,0x76,0x03,0x23,0x96,0xba,
    0x7e,0x83,0x6a,0xdc,0xb3,0x68,0x13,0x23,0xd6,0x20,0x3d,0x24,0xe2,0xa4,0x2b,0x22,
    0xa9,0xd6,0x8a,0x5a,0xfd,0x22,0x25,0x77,0x93,0xc5,0xdd,0xeb,0xe2,0xe7,0xee,0x88,
    0x22,0xdf,0x49,0x61,0xaf,0x37,0x95,0x7b,0x6d,0xb2,0xc6,0x7e,0x43,0x5c,0x4d,0x8d,
    0x19,0xc1,0xd3,0x5b,0x4d,0xdc,0xcf,0x9b,0x5d,0xcc,0x29,0xe1,0x17,0xe3,0xe8,0xb7,
    0xa7,0xcc,0x71,0x29,0xbe,0x43,0x73,0x43,0x52,0xce,0x07,0xcf,0x95,0x31,0x07,0xe2,
    0x87,0xa5,0xcc,0x0b,0xce,0x16,0xa9,0xbe,0xdf,0x4a,0xb9,0x1e,0xb3,0xe7,0xa6,0x3c,
    0x87,0x0e,0xc4,0x1e,0xe8,0x33,0x2f,0x65,0x3f,0xc4,0xc1,0x67,0x71,0xf3,0x53,0xd6,
    0xa3,0x23,0xae,0x05,0x71,0x0b,0xd2,0x32,0x76,0xb3,0xfc,0x96,0xe3,0x31,0xe1,0x73,
    0xd5,0x0c,0x5f,0x2c,0x7c,0xbe,0xf2,0x5b,0xae,0x15,0x29,0xfb,0x2c,0x56,0x2e,0xf8,
    0xf6,0x69,0x0d,0x23,0xb4,0x06,0xe8,0xd4,0xd6,0x75,0x43,0x4a,0x1c,0xeb,0x58,0x2e,
    0xec,0xc6,0x94,0xf5,0x85,0x6f,0x89,0xb0,0x91,0x29,0xe7,0x79,0xa3,0xcb,0x37,0x5a,
    0xf9,0xa0,0x73,0xeb,0xfb,0x29,0xf5,0x1d,0xed,0xfa,0xde,0x92,0x72,0x5e,0xf0,0x81,
    0xef,0x1d,0xa1,0x27,0xdf,0x7f,0x14,0xdf,0x78,0x2e,0x97,0x5e,0xf6,0xa5,0xac,0x31,
    0xb4,0xba,0x48,0xf7,0xc8,0x9f,0x53,0xe2,0x36,0xd6,0x8b,0x29,0xe7,0xe5,0x6b,0xf0,
    0x97,0x94,0xb8,0xc5,0xb4,0xa7,0x1c,0xdf,0xc7,0x74,0xa4,0xc4,0xbf,0x12,0x63,0x90,
    0x77,0x7f,0xca,0x7e,0x1d,0x9a,0x33,0xb0,0x03,0x29,0xc7,0xdb,0xef,0xe6,0x74,0x50,
    0x73,0xea,0xe7,0xe6,0xf4,0x52,0x4a,0xdc,0x72,0x1f,0xd6,0x9c,0xcc,0x7e,0x59,0xe3,
    0xdb,0x58,0x47,0x52,0xc6,0xbc,0xec,0xc6,0x7a,0x25,0x65,0x9e,0x23,0xea,0x87,0xb1,
    0x5e,0x4d,0x39,0x07,0x1b,0xe7,0xb9,0x40,0x6c,0x81,0xee,0xb3,0xdd,0x81,0x18,0x34,
    0x8e,0xfb,0x68,0x4f,0xa0,0xc6,0x0f,0x4b,0xe3,0x88,0xd9,0x1b,0x88,0x3f,0x11,0x63,
    0x60,0xff,0x21,0xb0,0x1f,0xf0,0xa5,0xc2,0xfe,0x14,0x88,0x03,0x43,0x3f,0xdc,0x49,
    0xfb,0x02,0xef,0xa3,0xfb,0xa2,0xa6,0x70,0x86,0xbe,0x10,0x88,0x21,0xb6,0x41,0x77,
    0x13,0xc6,0xc5,0x7d,0x7d,0x34,0xe5,0x5e,0x85,0xd6,0xa6,0xc4,0x7a,0xc2,0x7e,0x41,
    0xb9,0xd0,0xf7,0x44,0xca,0x18,0xc4,0xe3,0x8e,0xf9,0x6b,0xe0,0xbd,0x83,0xba,0x23,
    0x06,0xf7,0x4d,0x7b,0x20,0xfe,0xcd,0x68,0xe3,0x1d,0x7c,0x9c,0x70,0xfa,0x39,0xa5,
    0x9a,0xae,0x73,0x7b,0xef,0x9f,0x29,0x71,0xe3,0xf5,0x4c,0x4a,0xcc,0xd7,0xf0,0xac,
    0x6a,0x78,0xc6,0xe5,0x7a,0x4f,0xf5,0xe9,0x74,0x7a,0xe8,0x4c,0x89,0x5b,0xae,0xf3,
    0x29,0x31,0x5f,0xa3,0x0b,0xaa,0xd1,0x79,0x57,0xa3,0x8b,0x29,0xc7,0xb8,0xa2,0x85,
    0x40,0xcc,0x6a,0xf4,0x4a,0x20,0x66,0xfc,0xbf,0x16,0x88,0x79,0xfe,0x8f,0x07,0xe2,
    0xc0,0x8c,0xef,0x93,0xe2,0xfb,0x78,0x2f,0x7c,0x7f,0x20,0xbe,0x0f,0x8b,0x6f,0xd8,
    0x27,0x1d,0xdf,0x97,0x53,0xc6,0x18,0xb7,0x6f,0x3a,0x6e,0xf1,0x8e,0x75,0x5c,0x76,
    0x7c,0x64,0x81,0x7b,0xc1,0x73,0x9b,0x07,0xe2,0xc6,0x47,0x11,0xb8,0x3f,0x80,0x1b,
    0x1f,0xd5,0x40,0x6e,0x8b,0x50,0xe6,0x1a,0x14,0xa8,0x75,0xcf,0xed,0xe0,0x40,0xdc,
    0x72,0x5d,0x13,0xa8,0xff,0xc1,0x2e,0xd7,0xb5,0x81,0xdc,0xc2,0x67,0xdc,0x0e,0x0d,
    0x1c,0xc3,0xb8,0x3d,0x13,0x88,0x19,0xb7,0xff,0x09,0xc4,0x8c,0xdb,0x73,0x81,0x98,
    0xe7,0xf6,0x42,0x20,0xee,0xb9,0xed,0x12,0xb7,0x17,0x7a,0xe1,0xf6,0xba,0x40,0x6e,
    0xf1,0x5d,0x00,0x6e,0x61,0x77,0x39,0x6e,0x9b,0x03,0x63,0x8c,0xdb,0xcb,0x8e,0x5b,
    0xbc,0x63,0x1d,0xcd,0x6e,0xad,0x63,0x02,0x35,0xe9,0x79,0x1b,0x2b,0xde,0xc6,0xb8,
    0xb8,0x89,0x81,0x7a,0xf3,0x9c,0x7c,0x56,0x9c,0x4c,0x74,0x9c,0x7c,0x3e,0xb0,0xbf,
    0x71,0xd2,0x98,0x11,0x33,0x4e,0x8a,0x8c,0x98,0x71,0xd2,0x37,0x23,0xe6,0x39,0xa9,
    0x65,0xc4,0x3d,0x27,0x83,0x32,0x72,0x02,0x5f,0x3d,0x27,0x93,0xc4,0x09,0xbe,0x8d,
    0xc0,0x09,0x6c,0xc4,0x1b,0x27,0x53,0x02,0x63,0x8c,0x93,0x21,0x59,0xc9,0x09,0xde,
    0xb1,0x0e,0xc4,0xec,0x8a,0xf9,0xf0,0x3d,0x3f,0x35,0xf0,0xee,0xc5,0xfd,0x87,0xbb,
    0x60,0x9a,0xee,0x82,0xff,0xc5,0x78,0xf8,0xbe,0x18,0x1b,0x30,0xdc,0x07,0x78,0xff,
    0x20,0x3e,0x77,0xc8,0x9e,0x26,0xfb,0x4b,0xb2,0xf1,0xbc,0x10,0xd7,0x00,0x9d,0x0d,
    0xad,0xf1,0x0c,0x42,0xcc,0x9a,0xd8,0x56,0xc7,0xb6,0x53,0x63,0xde,0x11,0xe8,0xc7,
    0xf7,0xdc,0x7f,0xe3,0x38,0x6b,0xe5,0xb7,0x71,0xe1,0x9f,0x1e,0xdb,0x5a,0xe5,0x9d,
    0x1e,0xca,0xf5,0xcf,0xd0,0xfa,0xd1,0xdf,0xd6,0x7c,0x57,0x20,0x3e,0x35,0xaa,0x1e,
    0xdf,0xb5,0x23,0x32,0x7e,0xeb,0x8e,0xd4,0x59,0x0f,0x9e,0x80,0x21,0xee,0x8d,0xd8,
    0xc7,0xbe,0x7b,0xf0,0x7d,0xbb,0x43,0x73,0xfa,0x6a,0x28,0xbf,0x27,0xc0,0xc3,0x2a,
    0x37,0x1f,0xf8,0x66,0xc6,0xb6,0x4a,0xf3,0x99,0xe9,0xf6,0xd8,0x43,0x81,0x67,0x21,
    0xf8,0x33,0x6c,0xae,0xf6,0xf0,0xae,0xa4,0x9c,0xd3,0x97,0x35,0xa7,0x17,0x75,0xd7,
    0xd9,0xdc,0xef,0xce,0xe8,0xb3,0xb8,0x7b,0x14,0xf7,0x50,0xe8,0x19,0x77,0x6f,0x46,
    0x9f,0xc5,0x3d,0xe0,0xf2,0xcd,0x75,0x7b,0xe2,0xc1,0x8c,0x3e,0x8b,0xfb,0x86,0xcb,
    0xe7,0xe3,0x66,0x67,0xf4,0x41,0x87,0xb0,0x1f,0xce,0x38,0x97,0x7b,0x1d,0x36,0x2f,
    0x23,0xfe,0xa0,0xc3,0xbe,0x9d,0x11,0x47,0xff,0x35,0xc2,0xbe,0x93,0x11,0xcf,0xb5,
    0x4f,0x51,0x0b,0x60,0x76,0x4f,0x2f,0x0c,0xbc,0xa7,0xfb,0xbb,0x7b,0xfa,0xfb,0x81,
    0xf8,0x4f,0x63,0x0c,0xf4,0xf2,0x03,0x69,0x02,0x7b,0x7d,0xb9,0xb0,0x1f,0x06,0xe2,
    0xf8,0xce,0x5f,0xa4,0xef,0xc4,0xc7,0x03,0x71,0xe3,0xfa,0x47,0x81,0x75,0x7e,0x3c,
    0x94,0x67,0xdc,0xa2,0x40,0xfc,0x27,0xca,0xb3,0xb8,0x97,0xdc,0x4b,0x02,0x71,0x9f,
    0x7b,0x69,0x20,0x6e,0xb9,0x7f,0xac,0xf3,0x73,0xa9,0xcb,0xbd,0x2c,0x10,0xb7,0xb3,
    0x62,0x79,0xe0,0x78,0xcb,0xdc,0x59,0xf1,0x44,0xe0,0xfa,0x96,0x3b,0xbe,0x9f,0xbc,
    0xa2,0x51,0xde,0xbb,0xf3,0x33,0xde,0xbb,0xbb,0x92,0x72,0xaf,0x2e,0xc8,0x88,0x63,
    0xaf,0xe2,0x1d,0x79,0x9e,0xd4,0x1e,0x33,0xed,0xad,0xea,0x45,0xc3,0xf0,0xaf,0x96,
    0x7f,0xb5,0xe6,0x81,0xb9,0xae,0xd1,0xba,0x71,0x37,0xf9,0x7d,0x8a,0x7d,0x65,0xba,
    0xff,0x59,0x9d,0xee,0xdb,0x9c,0xee,0xe1,0x7b,0x2a,0xb6,0x36,0xf5,0x7b,0xca,0xad,
    0x67,0x7d,0xb0,0xef,0x08,0xea,0xec,0xb1,0x5e,0xf6,0x1c,0xb0,0xf5,0x8e,0xcf,0x0d,
    0xaa,0x15,0xbe,0x47,0x2d,0xcf,0xb3,0x81,0xf7,0xa3,0xe5,0x59,0xa4,0x3c,0x1b,0x42,
    0x99,0x07,0xd8,0xb3,0x2e,0xcf,0xaf,0xe5,0xf3,0x79,0xb6,0xe8,0x2e,0xb0,0x3c,0x4b,
    0xdd,0x7c,0x10,0x8f,0x3c,0xc0,0xb6,0xb8,0x35,0x6c,0xd3,0x59,0x69,0x7d,0x56,0xb8,
    0xb1,0xad,0x0f,0xb0,0x6d,0xaa,0x81,0xf1,0xd0,0x56,0x77,0x0e,0xe2,0x09,0xee,0x8e,
    0x64,0x3d,0xbf,0xa3,0x9f,0xc9,0xe8,0xc7,0xd3,0xce,0xdb,0x8d,0x19,0xcf,0xdb,0xad,
    0x3a,0x6f,0x37,0x65,0x25,0xdf,0xf0,0xb5,0xc4,0xb6,0x49,0xfd,0xf0,0x8e,0x71,0x8e,
    0xc8,0x06,0xfe,0x49,0xe7,0xd7,0x5b,0x59,0xcf,0x3a,0x36,0xe7,0x65,0x5e,0xf8,0x4e,
    0xc5,0x06,0x0c,0x79,0xf0,0x7e,0xe5,0xfb,0x2b,0xfb,0xf8,0xf9,0x75,0x29,0xfb,0xf8,
    0xf9,0x35,0x23,0xef,0xfd,0xfc,0xba,0x2b,0xa7,0xcf,0xe2,0x66,0x2a,0xee,0xbd,0xac,
    0x67,0xdc,0xac,0x9c,0x3e,0x8b,0xbb,0xcf,0xe5,0xbb,0xe4,0xee,0xaf,0xfb,0x73,0xfa,
    0x2c,0xee,0x6b,0x2e,0x9f,0x8f,0xfb,0x7a,0x4e,0x9f,0x9d,0x4b,0x73,0x72,0xce,0x65,
    0x96,0xc3,0x1e,0xce,0x89,0xdf,0xef,0xb0,0x79,0x39,0x71,0xf4,0xb7,0xf3,0xeb,0x91,
    0x9c,0x78,0x5e,0x29,0xcf,0xac,0x3c,0xe7,0x99,0x55,0x73,0x67,0x56,0x91,0x13,0xb7,
    0x7d,0x5e,0xcb,0x89,0x1d,0x71,0xdf,0xd3,0xdf,0xcd,0xb9,0xaf,0xb7,0xba,0x7d,0xfd,
    0x68,0x4e,0x1c,0xfb,0x1a,0xef,0xe8,0x87,0x31,0xed,0x6f,0xbe,0x21,0x79,0xf9,0x37,
    0x91,0xd5,0x60,0x68,0x4e,0x6e,0x86,0x38,0x2e,0x16,0x8a,0x0b,0xf8,0xda,0xb5,0x37,
    0x16,0x2a,0x17,0x74,0x62,0xf5,0xc5,0xd3,0xf4,0xb6,0x4d,0x7a,0x6b,0x95,0xde,0xda,
    0x9c,0xde,0xe0,0xdb,0x1e,0x5b,0x9b,0xf4,0xb5,0xbd,0x4e,0x6f,0x6d,0x57,0xd1,0xdb,
    0xb2,0x9c,0x7a,0xeb,0x54,0xde,0xdd,0x4e,0x6f,0xf0,0x2d,0x8f,0x6d,0xb7,0xe6,0x83,
    0x77,0xfb,0xfb,0x6f,0x45,0xce,0x3d,0xd9,0x52,0x29,0xb1,0x55,0x5a,0x3f,0x30,0x5b,
    0xff,0xda,0x9c,0xb1,0x9e,0x93,0xf5,0xc2,0xbc,0x56,0x37,0xe4,0xec,0xef,0xe3,0x36,
    0x2a,0xae,0xd5,0xe9,0xf7,0x5f,0xe2,0x6e,0x85,0xe2,0x4d,0x47,0xef,0xe6,0xf4,0x59,
    0x5c,0xa7,0xe2,0xd6,0xd6,0xc5,0x9d,0xcb,0xe9,0xb3,0xb8,0x8b,0x8a,0xc3,0x9c,0x36,
    0xb8,0xb8,0xae,0x9c,0x3e,0x8b,0xfb,0x50,0x71,0x1b,0xeb,0xe2,0x3e,0xca,0xe9,0x33,
    0x5d,0x36,0x16,0x9c,0xcb,0x39,0x87,0xa5,0x05,0xf1,0x2e,0x87,0x65,0x05,0xf1,0x8f,
    0x9c,0x7e,0xf3,0x82,0xb8,0xd7,0xef,0x6f,0xa5,0xdf,0x01,0x4e,0xbf,0xbf,0xcb,0x89,
    0x9b,0x7e,0xdb,0x72,0x62,0x5e,0xbf,0x7d,0x0a,0xea,0xb7,0xd5,0xe9,0xb7,0x6f,0x41,
    0x1c,0xfa,0xc5,0x3b,0xfa,0x61,0x4c,0xe3,0xfb,0x79,0xf1,0x7d,0x8b,0x3b,0xc7,0x07,
    0x17,0x5c,0xf7,0xf3,0xe2,0x11,0x5a,0x05,0x86,0x7e,0xd0,0x98,0x69,0x63,0xb7,0xd3,
    0xea,0x6e,0x69,0xb5,0x45,0x67,0xd8,0x5e,0xa7,0x55,0xf8,0xf6,0xe0,0x3b,0x59,0xda,
    0xdc,0x53,0xa7,0xd5,0xbd,0x57,0xd1,0xea,0xcd,0x05,0xb5,0x6a,0x79,0xe7,0x14,0x65,
    0x5e,0xf8,0x46,0xc5,0x06,0x0c,0x79,0xf0,0x7e,0xe5,0xb7,0x93,0xa2,0xbc,0xaf,0x6c,
    0xad,0x63,0x0a,0xe2,0xed,0xee,0x37,0x8d,0x71,0x45,0x79,0x1f,0x59,0xdc,0x67,0x14,
    0xe7,0x35,0x3d,0xa1,0x20,0xde,0xee,0xfe,0xde,0x9b,0xac,0x38,0xaf,0xe9,0xdb,0x0a,
    0xe2,0x3e,0x6e,0x5a,0xc1,0x71,0x7c,0xbe,0xe9,0xea,0x8b,0xdf,0xf6,0x0c,0xbb,0xb3,
    0x20,0xde,0xee,0x6a,0xf1,0xb4,0x6a,0x31,0x46,0x39,0x4c,0x83,0x3f,0x2f,0xe8,0xb3,
    0xb8,0x5f,0x2a,0x6e,0x42,0x5d,0xdc,0x86,0x82,0x3e,0x8b,0xdb,0xa8,0x38,0xcc,0x73,
    0x9a,0x8b,0x6b,0x29,0xe8,0xb3,0xb8,0x2d,0x8a,0xbb,0xb3,0x2e,0xee,0x37,0x05,0x7d,
    0xa6,0xe9,0xd6,0x82,0x73,0xd9,0xe0,0xb0,0xed,0x05,0xf1,0x16,0x87,0xed,0x28,0x88,
    0xa3,0xbf,0x69,0x7f,0x67,0x41,0xdc,0x6b,0x7f,0x56,0x41,0xed,0x0f,0x72,0xda,0xbf,
    0xa7,0x20,0x6e,0xda,0x7f,0xa0,0x20,0xe6,0xb5,0xff,0x7b,0x69,0xbf,0xc5,0xfd,0x16,
    0xf2,0x5c,0x41,0x1c,0xda,0xc7,0x3b,0xfa,0xed,0x74,0xda,0x9f,0x2d,0x8d,0x78,0xbe,
    0xf7,0x68,0xdd,0xf0,0xf5,0xd7,0x37,0xf1,0x1e,0xf5,0x83,0x66,0x4d,0x6b,0x73,0x8a,
    0x52,0xfb,0x1d,0xd2,0x3e,0x6a,0x09,0x8d,0x1e,0x70,0xda,0x87,0x6f,0x7f,0x6c,0x07,
    0xa4,0xf5,0xfd,0x75,0xda,0x3f,0x70,0x15,0xed,0xb7,0x4b,0xfb,0xf6,0xf7,0xdd,0x21,
    0xa7,0x7d,0xf8,0x3a,0x62,0x3b,0xa4,0xf9,0x74,0xb8,0xda,0x25,0x55,0xae,0x01,0xf3,
    0xb7,0xdf,0x86,0xc0,0x77,0xa5,0x4a,0x9f,0xc5,0x05,0xc5,0xed,0x4a,0x7a,0xc6,0x65,
    0x55,0xfa,0x2c,0xae,0xaf,0xe2,0xb6,0xd6,0xc5,0xf5,0xab,0xd2,0x67,0x71,0x83,0x14,
    0xd7,0x5a,0x17,0x37,0xb8,0x4a,0x9f,0x69,0x61,0x58,0x95,0x73,0xc9,0x1c,0x76,0x7d,
    0x95,0x78,0x3f,0x87,0x35,0x57,0x89,0xa3,0xbf,0x69,0x66,0x44,0x95,0x78,0x5e,0x29,
    0xf5,0xf1,0x37,0x69,0xc6,0xb4,0x30,0xb2,0x4a,0x2d,0x0c,0xac,0x95,0x5a,0xb8,0xa9,
    0x4a,0x1c,0x5a,0xc0,0x3b,0xfa,0x20,0x17,0x6a,0x61,0x1c,0x1e,0x2a,0x7a,0xd6,0xe6,
    0x88,0xfb,0xf6,0xbb,0x35,0x65,0x8d,0xdf,0x56,0x2d,0x26,0xa6,0x65,0x2d,0xe0,0x9b,
    0x80,0xdf,0x17,0xf4,0xdb,0x2b,0xde,0x91,0xe7,0x76,0xd9,0xc0,0x7b,0xfb,0xee,0x37,
    0x3f,0x9e,0x1f,0x26,0x95,0xe4,0x73,0xb1,0xfd,0x1f,0x35,0x21,0x85,0x6c,0x50,0x1d,
    0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_GOOGLE_include_directive : require
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(local_size_x = 256, local_size_y = 1, local_size_z = 1)in;
//
// layout(set = 0, binding = 0, rgba32f)uniform coherent image2D dst[6];
// layout(set = 0, binding = 1)uniform sampler2D src;
//
// layout(push_constant)uniform PushConstants {
//
//     uint levelCount;
//
//     vec2 invSrcExtent;
// } params;
//
// #line 1 "shaders/src/third_party/ffx_spd/ffx_a.h"
//
//    float AF1_x(float a){ return float(a);}
//    vec2 AF2_x(float a){ return vec2(a, a);}
//    vec3 AF3_x(float a){ return vec3(a, a, a);}
//    vec4 AF4_x(float a){ return vec4(a, a, a, a);}
//
//    uint AU1_x(uint a){ return uint(a);}
//    uvec2 AU2_x(uint a){ return uvec2(a, a);}
//    uvec3 AU3_x(uint a){ return uvec3(a, a, a);}
//    uvec4 AU4_x(uint a){ return uvec4(a, a, a, a);}
//
//    uint AAbsSU1(uint a){ return uint(abs(int(a)));}
//    uvec2 AAbsSU2(uvec2 a){ return uvec2(abs(ivec2(a)));}
//    uvec3 AAbsSU3(uvec3 a){ return uvec3(abs(ivec3(a)));}
//    uvec4 AAbsSU4(uvec4 a){ return uvec4(abs(ivec4(a)));}
//
//    uint ABfe(uint src, uint off, uint bits){ return bitfieldExtract(src, int(off), int(bits));}
//    uint ABfi(uint src, uint ins, uint mask){ return(ins & mask)|(src &(~ mask));}
//
//    uint ABfiM(uint src, uint ins, uint bits){ return bitfieldInsert(src, ins, 0, int(bits));}
//
//    float AFractF1(float x){ return fract(x);}
//    vec2 AFractF2(vec2 x){ return fract(x);}
//    vec3 AFractF3(vec3 x){ return fract(x);}
//    vec4 AFractF4(vec4 x){ return fract(x);}
//
//    float ALerpF1(float x, float y, float a){ return mix(x, y, a);}
//    vec2 ALerpF2(vec2 x, vec2 y, vec2 a){ return mix(x, y, a);}
//    vec3 ALerpF3(vec3 x, vec3 y, vec3 a){ return mix(x, y, a);}
//    vec4 ALerpF4(vec4 x, vec4 y, vec4 a){ return mix(x, y, a);}
//
//    float AMax3F1(float x, float y, float z){ return max(x, max(y, z));}
//    vec2 AMax3F2(vec2 x, vec2 y, vec2 z){ return max(x, max(y, z));}
//    vec3 AMax3F3(vec3 x, vec3 y, vec3 z){ return max(x, max(y, z));}
//    vec4 AMax3F4(vec4 x, vec4 y, vec4 z){ return max(x, max(y, z));}
//
//    uint AMax3SU1(uint x, uint y, uint z){ return uint(max(int(x), max(int(y), int(z))));}
//    uvec2 AMax3SU2(uvec2 x, uvec2 y, uvec2 z){ return uvec2(max(ivec2(x), max(ivec2(y), ivec2(z))));}
//    uvec3 AMax3SU3(uvec3 x, uvec3 y, uvec3 z){ return uvec3(max(ivec3(x), max(ivec3(y), ivec3(z))));}
//    uvec4 AMax3SU4(uvec4 x, uvec4 y, uvec4 z){ return uvec4(max(ivec4(x), max(ivec4(y), ivec4(z))));}
//
//    uint AMax3U1(uint x, uint y, uint z){ return max(x, max(y, z));}
//    uvec2 AMax3U2(uvec2 x, uvec2 y, uvec2 z){ return max(x, max(y, z));}
//    uvec3 AMax3U3(uvec3 x, uvec3 y, uvec3 z){ return max(x, max(y, z));}
//    uvec4 AMax3U4(uvec4 x, uvec4 y, uvec4 z){ return max(x, max(y, z));}
//
//    uint AMaxSU1(uint a, uint b){ return uint(max(int(a), int(b)));}
//    uvec2 AMaxSU2(uvec2 a, uvec2 b){ return uvec2(max(ivec2(a), ivec2(b)));}
//    uvec3 AMaxSU3(uvec3 a, uvec3 b){ return uvec3(max(ivec3(a), ivec3(b)));}
//    uvec4 AMaxSU4(uvec4 a, uvec4 b){ return uvec4(max(ivec4(a), ivec4(b)));}
//
//    float AMed3F1(float x, float y, float z){ return max(min(x, y), min(max(x, y), z));}
//    vec2 AMed3F2(vec2 x, vec2 y, vec2 z){ return max(min(x, y), min(max(x, y), z));}
//    vec3 AMed3F3(vec3 x, vec3 y, vec3 z){ return max(min(x, y), min(max(x, y), z));}
//    vec4 AMed3F4(vec4 x, vec4 y, vec4 z){ return max(min(x, y), min(max(x, y), z));}
//
//    float AMin3F1(float x, float y, float z){ return min(x, min(y, z));}
//    vec2 AMin3F2(vec2 x, vec2 y, vec2 z){ return min(x, min(y, z));}
//    vec3 AMin3F3(vec3 x, vec3 y, vec3 z){ return min(x, min(y, z));}
//    vec4 AMin3F4(vec4 x, vec4 y, vec4 z){ return min(x, min(y, z));}
//
//    uint AMin3SU1(uint x, uint y, uint z){ return uint(min(int(x), min(int(y), int(z))));}
//    uvec2 AMin3SU2(uvec2 x, uvec2 y, uvec2 z){ return uvec2(min(ivec2(x), min(ivec2(y), ivec2(z))));}
//    uvec3 AMin3SU3(uvec3 x, uvec3 y, uvec3 z){ return uvec3(min(ivec3(x), min(ivec3(y), ivec3(z))));}
//    uvec4 AMin3SU4(uvec4 x, uvec4 y, uvec4 z){ return uvec4(min(ivec4(x), min(ivec4(y), ivec4(z))));}
//
//    uint AMin3U1(uint x, uint y, uint z){ return min(x, min(y, z));}
//    uvec2 AMin3U2(uvec2 x, uvec2 y, uvec2 z){ return min(x, min(y, z));}
//    uvec3 AMin3U3(uvec3 x, uvec3 y, uvec3 z){ return min(x, min(y, z));}
//    uvec4 AMin3U4(uvec4 x, uvec4 y, uvec4 z){ return min(x, min(y, z));}
//
//    uint AMinSU1(uint a, uint b){ return uint(min(int(a), int(b)));}
//    uvec2 AMinSU2(uvec2 a, uvec2 b){ return uvec2(min(ivec2(a), ivec2(b)));}
//    uvec3 AMinSU3(uvec3 a, uvec3 b){ return uvec3(min(ivec3(a), ivec3(b)));}
//    uvec4 AMinSU4(uvec4 a, uvec4 b){ return uvec4(min(ivec4(a), ivec4(b)));}
//
//    float ANCosF1(float x){ return cos(x * AF1_x(float(6.28318530718)));}
//    vec2 ANCosF2(vec2 x){ return cos(x * AF2_x(float(6.28318530718)));}
//    vec3 ANCosF3(vec3 x){ return cos(x * AF3_x(float(6.28318530718)));}
//    vec4 ANCosF4(vec4 x){ return cos(x * AF4_x(float(6.28318530718)));}
//
//    float ANSinF1(float x){ return sin(x * AF1_x(float(6.28318530718)));}
//    vec2 ANSinF2(vec2 x){ return sin(x * AF2_x(float(6.28318530718)));}
//    vec3 ANSinF3(vec3 x){ return sin(x * AF3_x(float(6.28318530718)));}
//    vec4 ANSinF4(vec4 x){ return sin(x * AF4_x(float(6.28318530718)));}
//
//    float ARcpF1(float x){ return AF1_x(float(1.0))/ x;}
//    vec2 ARcpF2(vec2 x){ return AF2_x(float(1.0))/ x;}
//    vec3 ARcpF3(vec3 x){ return AF3_x(float(1.0))/ x;}
//    vec4 ARcpF4(vec4 x){ return AF4_x(float(1.0))/ x;}
//
//    float ARsqF1(float x){ return AF1_x(float(1.0))/ sqrt(x);}
//    vec2 ARsqF2(vec2 x){ return AF2_x(float(1.0))/ sqrt(x);}
//    vec3 ARsqF3(vec3 x){ return AF3_x(float(1.0))/ sqrt(x);}
//    vec4 ARsqF4(vec4 x){ return AF4_x(float(1.0))/ sqrt(x);}
//
//    float ASatF1(float x){ return clamp(x, AF1_x(float(0.0)), AF1_x(float(1.0)));}
//    vec2 ASatF2(vec2 x){ return clamp(x, AF2_x(float(0.0)), AF2_x(float(1.0)));}
//    vec3 ASatF3(vec3 x){ return clamp(x, AF3_x(float(0.0)), AF3_x(float(1.0)));}
//    vec4 ASatF4(vec4 x){ return clamp(x, AF4_x(float(0.0)), AF4_x(float(1.0)));}
//
//    uint AShrSU1(uint a, uint b){ return uint(int(a)>> int(b));}
//    uvec2 AShrSU2(uvec2 a, uvec2 b){ return uvec2(ivec2(a)>> ivec2(b));}
//    uvec3 AShrSU3(uvec3 a, uvec3 b){ return uvec3(ivec3(a)>> ivec3(b));}
//    uvec4 AShrSU4(uvec4 a, uvec4 b){ return uvec4(ivec4(a)>> ivec4(b));}
//
//    float ACpySgnF1(float d, float s){ return uintBitsToFloat(uint(floatBitsToUint(float(d))|(floatBitsToUint(float(s))& AU1_x(uint(0x80000000u)))));}
//    vec2 ACpySgnF2(vec2 d, vec2 s){ return uintBitsToFloat(uvec2(floatBitsToUint(vec2(d))|(floatBitsToUint(vec2(s))& AU2_x(uint(0x80000000u)))));}
//    vec3 ACpySgnF3(vec3 d, vec3 s){ return uintBitsToFloat(uvec3(floatBitsToUint(vec3(d))|(floatBitsToUint(vec3(s))& AU3_x(uint(0x80000000u)))));}
//    vec4 ACpySgnF4(vec4 d, vec4 s){ return uintBitsToFloat(uvec4(floatBitsToUint(vec4(d))|(floatBitsToUint(vec4(s))& AU4_x(uint(0x80000000u)))));}
//
//    float ASignedF1(float m){ return ASatF1(m * AF1_x(float(uintBitsToFloat(uint(0x7f800000u)))));}
//    vec2 ASignedF2(vec2 m){ return ASatF2(m * AF2_x(float(uintBitsToFloat(uint(0x7f800000u)))));}
//    vec3 ASignedF3(vec3 m){ return ASatF3(m * AF3_x(float(uintBitsToFloat(uint(0x7f800000u)))));}
//    vec4 ASignedF4(vec4 m){ return ASatF4(m * AF4_x(float(uintBitsToFloat(uint(0x7f800000u)))));}
//
//    float APrxLoSqrtF1(float a){ return uintBitsToFloat(uint((floatBitsToUint(float(a))>> AU1_x(uint(1)))+ AU1_x(uint(0x1fbc4639))));}
//    float APrxLoRcpF1(float a){ return uintBitsToFloat(uint(AU1_x(uint(0x7ef07ebb))- floatBitsToUint(float(a))));}
//    float APrxMedRcpF1(float a){ float b = uintBitsToFloat(uint(AU1_x(uint(0x7ef19fff))- floatBitsToUint(float(a))));return b *(- b * a + AF1_x(float(2.0)));}
//    float APrxLoRsqF1(float a){ return uintBitsToFloat(uint(AU1_x(uint(0x5f347d74))-(floatBitsToUint(float(a))>> AU1_x(uint(1)))));}
//
//    float APSinF1(float x){ return x * abs(x)- x;}
//    float APCosF1(float x){ x = AFractF1(x * AF1_x(float(0.5))+ AF1_x(float(0.75)));x = x * AF1_x(float(2.0))- AF1_x(float(1.0));return APSinF1(x);}
//
//    float ATo709F1(float c){ return max(min(c * AF1_x(float(4.5)), AF1_x(float(0.018))), AF1_x(float(1.099))* pow(c, AF1_x(float(0.45)))- AF1_x(float(0.099)));}
//
//    float AToGammaF1(float c, float rcpX){ return pow(c, rcpX);}
//
//    float AToPqF1(float x){ float p = pow(x, AF1_x(float(0.159302)));
//   return pow((AF1_x(float(0.835938))+ AF1_x(float(18.8516))* p)/(AF1_x(float(1.0))+ AF1_x(float(18.6875))* p), AF1_x(float(78.8438)));}
//
//    float AToSrgbF1(float c){ return max(min(c * AF1_x(float(12.92)), AF1_x(float(0.0031308))), AF1_x(float(1.055))* pow(c, AF1_x(float(0.41666)))- AF1_x(float(0.055)));}
//
//    float AToTwoF1(float c){ return sqrt(c);}
//
//    float AFrom709F1(float c){ return max(min(c * AF1_x(float(1.0 / 4.5)), AF1_x(float(0.081))),
//   pow((c + AF1_x(float(0.099)))*(AF1_x(float(1.0))/(AF1_x(float(1.099)))), AF1_x(float(1.0 / 0.45))));}
//
//    float AFromGammaF1(float c, float x){ return pow(c, x);}
//
//    float AFromPqF1(float x){ float p = pow(x, AF1_x(float(0.0126833)));
//   return pow(ASatF1(p - AF1_x(float(0.835938)))/(AF1_x(float(18.8516))- AF1_x(float(18.6875))* p), AF1_x(float(6.27739)));}
//
//    float AFromSrgbF1(float c){ return max(min(c * AF1_x(float(1.0 / 12.92)), AF1_x(float(0.04045))),
//   pow((c + AF1_x(float(0.055)))*(AF1_x(float(1.0))/ AF1_x(float(1.055))), AF1_x(float(2.4))));}
//
//    float AFromTwoF1(float c){ return c * c;}
//
//    uvec2 ARmp8x8(uint a){ return uvec2(ABfe(a, 1u, 3u), ABfiM(ABfe(a, 3u, 3u), a, 1u));}
//
//    uvec2 ARmpRed8x8(uint a){ return uvec2(ABfiM(ABfe(a, 2u, 3u), a, 1u), ABfiM(ABfe(a, 3u, 3u), ABfe(a, 1u, 2u), 2u));}
//
//    vec2 opAAbsF2(out vec2 d, in vec2 a){ d = abs(a);return d;}
//    vec3 opAAbsF3(out vec3 d, in vec3 a){ d = abs(a);return d;}
//    vec4 opAAbsF4(out vec4 d, in vec4 a){ d = abs(a);return d;}
//
//    vec2 opAAddF2(out vec2 d, in vec2 a, in vec2 b){ d = a + b;return d;}
//    vec3 opAAddF3(out vec3 d, in vec3 a, in vec3 b){ d = a + b;return d;}
//    vec4 opAAddF4(out vec4 d, in vec4 a, in vec4 b){ d = a + b;return d;}
//
//    vec2 opACpyF2(out vec2 d, in vec2 a){ d = a;return d;}
//    vec3 opACpyF3(out vec3 d, in vec3 a){ d = a;return d;}
//    vec4 opACpyF4(out vec4 d, in vec4 a){ d = a;return d;}
//
//    vec2 opALerpF2(out vec2 d, in vec2 a, in vec2 b, in vec2 c){ d = ALerpF2(a, b, c);return d;}
//    vec3 opALerpF3(out vec3 d, in vec3 a, in vec3 b, in vec3 c){ d = ALerpF3(a, b, c);return d;}
//    vec4 opALerpF4(out vec4 d, in vec4 a, in vec4 b, in vec4 c){ d = ALerpF4(a, b, c);return d;}
//
//    vec2 opALerpOneF2(out vec2 d, in vec2 a, in vec2 b, float c){ d = ALerpF2(a, b, AF2_x(float(c)));return d;}
//    vec3 opALerpOneF3(out vec3 d, in vec3 a, in vec3 b, float c){ d = ALerpF3(a, b, AF3_x(float(c)));return d;}
//    vec4 opALerpOneF4(out vec4 d, in vec4 a, in vec4 b, float c){ d = ALerpF4(a, b, AF4_x(float(c)));return d;}
//
//    vec2 opAMaxF2(out vec2 d, in vec2 a, in vec2 b){ d = max(a, b);return d;}
//    vec3 opAMaxF3(out vec3 d, in vec3 a, in vec3 b){ d = max(a, b);return d;}
//    vec4 opAMaxF4(out vec4 d, in vec4 a, in vec4 b){ d = max(a, b);return d;}
//
//    vec2 opAMinF2(out vec2 d, in vec2 a, in vec2 b){ d = min(a, b);return d;}
//    vec3 opAMinF3(out vec3 d, in vec3 a, in vec3 b){ d = min(a, b);return d;}
//    vec4 opAMinF4(out vec4 d, in vec4 a, in vec4 b){ d = min(a, b);return d;}
//
//    vec2 opAMulF2(out vec2 d, in vec2 a, in vec2 b){ d = a * b;return d;}
//    vec3 opAMulF3(out vec3 d, in vec3 a, in vec3 b){ d = a * b;return d;}
//    vec4 opAMulF4(out vec4 d, in vec4 a, in vec4 b){ d = a * b;return d;}
//
//    vec2 opAMulOneF2(out vec2 d, in vec2 a, float b){ d = a * AF2_x(float(b));return d;}
//    vec3 opAMulOneF3(out vec3 d, in vec3 a, float b){ d = a * AF3_x(float(b));return d;}
//    vec4 opAMulOneF4(out vec4 d, in vec4 a, float b){ d = a * AF4_x(float(b));return d;}
//
//    vec2 opANegF2(out vec2 d, in vec2 a){ d = - a;return d;}
//    vec3 opANegF3(out vec3 d, in vec3 a){ d = - a;return d;}
//    vec4 opANegF4(out vec4 d, in vec4 a){ d = - a;return d;}
//
//    vec2 opARcpF2(out vec2 d, in vec2 a){ d = ARcpF2(a);return d;}
//    vec3 opARcpF3(out vec3 d, in vec3 a){ d = ARcpF3(a);return d;}
//    vec4 opARcpF4(out vec4 d, in vec4 a){ d = ARcpF4(a);return d;}
//
// #line 70 "shaders/src/GenerateMipmap.comp"
//
// shared vec4 spd_intermediate[16][16];
//
// shared uint spd_counter;
//
//   vec4 SpdLoadSourceImage(ivec2 p)
// {
//       vec2 textureCoord = p * params . invSrcExtent + params . invSrcExtent;
//     return texture(src, textureCoord);
// }
//
//   vec4 SpdLoad(ivec2 p)
// {
//     return vec4(0);
// }
//
// void SpdStore(ivec2 p, vec4 value, uint mip)
// {
//     imageStore(dst[mip], p, value);
// }
//
//   vec4 SpdLoadIntermediate(uint x, uint y)
// {
//     return spd_intermediate[x][y];
// }
// void SpdStoreIntermediate(uint x, uint y, vec4 value)
// {
//     spd_intermediate[x][y]= value;
// }
//
//   vec4 SpdReduce4(vec4 v0, vec4 v1, vec4 v2, vec4 v3)
// {
//     return(v0 + v1 + v2 + v3)* 0.25;
// }
//
// #line 1 "shaders/src/third_party/ffx_spd/ffx_spd.h"
//
// void SpdWorkgroupShuffleBarrier(){
//
//     barrier();
//
// }
//
// bool SpdExitWorkgroup(uint numWorkGroups, uint localInvocationIndex)
// {
//
//     if(localInvocationIndex == 0)
//     {
//                                   ;
//     }
//     SpdWorkgroupShuffleBarrier();
//     return(0 !=(numWorkGroups - 1));
// }
//
//   vec4 SpdReduceQuad(vec4 v)
// {
//
//     return AF4_x(0.0);
// }
//
//   vec4 SpdReduceIntermediate(uvec2 i0, uvec2 i1, uvec2 i2, uvec2 i3)
// {
//       vec4 v0 = SpdLoadIntermediate(i0 . x, i0 . y);
//       vec4 v1 = SpdLoadIntermediate(i1 . x, i1 . y);
//       vec4 v2 = SpdLoadIntermediate(i2 . x, i2 . y);
//       vec4 v3 = SpdLoadIntermediate(i3 . x, i3 . y);
//     return SpdReduce4(v0, v1, v2, v3);
// }
//
//   vec4 SpdReduceLoad4(uvec2 i0, uvec2 i1, uvec2 i2, uvec2 i3)
// {
//       vec4 v0 = SpdLoad(ivec2(i0));
//       vec4 v1 = SpdLoad(ivec2(i1));
//       vec4 v2 = SpdLoad(ivec2(i2));
//       vec4 v3 = SpdLoad(ivec2(i3));
//     return SpdReduce4(v0, v1, v2, v3);
// }
//
//   vec4 SpdReduceLoad4(uvec2 base)
// {
//     return SpdReduceLoad4(
//           uvec2(base + uvec2(0, 0)),
//           uvec2(base + uvec2(0, 1)),
//           uvec2(base + uvec2(1, 0)),
//           uvec2(base + uvec2(1, 1)));
// }
//
//   vec4 SpdReduceLoadSourceImage4(uvec2 i0, uvec2 i1, uvec2 i2, uvec2 i3)
// {
//       vec4 v0 = SpdLoadSourceImage(ivec2(i0));
//       vec4 v1 = SpdLoadSourceImage(ivec2(i1));
//       vec4 v2 = SpdLoadSourceImage(ivec2(i2));
//       vec4 v3 = SpdLoadSourceImage(ivec2(i3));
//     return SpdReduce4(v0, v1, v2, v3);
// }
//
//   vec4 SpdReduceLoadSourceImage4(uvec2 base)
// {
//
//     return SpdLoadSourceImage(ivec2(base));
//
// }
//
// void SpdDownsampleMips_0_1_Intrinsics(uint x, uint y, uvec2 workGroupID, uint localInvocationIndex, uint mip)
// {
//       vec4 v[4];
//
//        ivec2 tex = ivec2(workGroupID . xy * 64)+ ivec2(x * 2, y * 2);
//        ivec2 pix = ivec2(workGroupID . xy * 32)+ ivec2(x, y);
//     v[0]= SpdReduceLoadSourceImage4(tex);
//     SpdStore(pix, v[0], 0);
//
//     tex = ivec2(workGroupID . xy * 64)+ ivec2(x * 2 + 32, y * 2);
//     pix = ivec2(workGroupID . xy * 32)+ ivec2(x + 16, y);
//     v[1]= SpdReduceLoadSourceImage4(tex);
//     SpdStore(pix, v[1], 0);
//
//     tex = ivec2(workGroupID . xy * 64)+ ivec2(x * 2, y * 2 + 32);
//     pix = ivec2(workGroupID . xy * 32)+ ivec2(x, y + 16);
//     v[2]= SpdReduceLoadSourceImage4(tex);
//     SpdStore(pix, v[2], 0);
//
//     tex = ivec2(workGroupID . xy * 64)+ ivec2(x * 2 + 32, y * 2 + 32);
//     pix = ivec2(workGroupID . xy * 32)+ ivec2(x + 16, y + 16);
//     v[3]= SpdReduceLoadSourceImage4(tex);
//     SpdStore(pix, v[3], 0);
//
//     if(mip <= 1)
//         return;
//
//     v[0]= SpdReduceQuad(v[0]);
//     v[1]= SpdReduceQuad(v[1]);
//     v[2]= SpdReduceQuad(v[2]);
//     v[3]= SpdReduceQuad(v[3]);
//
//     if((localInvocationIndex % 4)== 0)
//     {
//         SpdStore(ivec2(workGroupID . xy * 16)+
//                ivec2(x / 2, y / 2), v[0], 1);
//         SpdStoreIntermediate(
//             x / 2, y / 2, v[0]);
//
//         SpdStore(ivec2(workGroupID . xy * 16)+
//                ivec2(x / 2 + 8, y / 2), v[1], 1);
//         SpdStoreIntermediate(
//             x / 2 + 8, y / 2, v[1]);
//
//         SpdStore(ivec2(workGroupID . xy * 16)+
//                ivec2(x / 2, y / 2 + 8), v[2], 1);
//         SpdStoreIntermediate(
//             x / 2, y / 2 + 8, v[2]);
//
//         SpdStore(ivec2(workGroupID . xy * 16)+
//                ivec2(x / 2 + 8, y / 2 + 8), v[3], 1);
//         SpdStoreIntermediate(
//             x / 2 + 8, y / 2 + 8, v[3]);
//     }
// }
//
// void SpdDownsampleMips_0_1_LDS(uint x, uint y, uvec2 workGroupID, uint localInvocationIndex, uint mip)
// {
//       vec4 v[4];
//
//        ivec2 tex = ivec2(workGroupID . xy * 64)+ ivec2(x * 2, y * 2);
//        ivec2 pix = ivec2(workGroupID . xy * 32)+ ivec2(x, y);
//     v[0]= SpdReduceLoadSourceImage4(tex);
//     SpdStore(pix, v[0], 0);
//
//     tex = ivec2(workGroupID . xy * 64)+ ivec2(x * 2 + 32, y * 2);
//     pix = ivec2(workGroupID . xy * 32)+ ivec2(x + 16, y);
//     v[1]= SpdReduceLoadSourceImage4(tex);
//     SpdStore(pix, v[1], 0);
//
//     tex = ivec2(workGroupID . xy * 64)+ ivec2(x * 2, y * 2 + 32);
//     pix = ivec2(workGroupID . xy * 32)+ ivec2(x, y + 16);
//     v[2]= SpdReduceLoadSourceImage4(tex);
//     SpdStore(pix, v[2], 0);
//
//     tex = ivec2(workGroupID . xy * 64)+ ivec2(x * 2 + 32, y * 2 + 32);
//     pix = ivec2(workGroupID . xy * 32)+ ivec2(x + 16, y + 16);
//     v[3]= SpdReduceLoadSourceImage4(tex);
//     SpdStore(pix, v[3], 0);
//
//     if(mip <= 1)
//         return;
//
//     for(int i = 0;i < 4;i ++)
//     {
//         SpdStoreIntermediate(x, y, v[i]);
//         SpdWorkgroupShuffleBarrier();
//         if(localInvocationIndex < 64)
//         {
//             v[i]= SpdReduceIntermediate(
//                   uvec2(x * 2 + 0, y * 2 + 0),
//                   uvec2(x * 2 + 1, y * 2 + 0),
//                   uvec2(x * 2 + 0, y * 2 + 1),
//                   uvec2(x * 2 + 1, y * 2 + 1)
//             );
//             SpdStore(ivec2(workGroupID . xy * 16)+ ivec2(x +(i % 2)* 8, y +(i / 2)* 8), v[i], 1);
//         }
//         SpdWorkgroupShuffleBarrier();
//     }
//
//     if(localInvocationIndex < 64)
//     {
//         SpdStoreIntermediate(x + 0, y + 0, v[0]);
//         SpdStoreIntermediate(x + 8, y + 0, v[1]);
//         SpdStoreIntermediate(x + 0, y + 8, v[2]);
//         SpdStoreIntermediate(x + 8, y + 8, v[3]);
//     }
// }
//
// void SpdDownsampleMips_0_1(uint x, uint y, uvec2 workGroupID, uint localInvocationIndex, uint mip)
// {
//
//     SpdDownsampleMips_0_1_LDS(x, y, workGroupID, localInvocationIndex, mip);
//
// }
//
// void SpdDownsampleMip_2(uint x, uint y, uvec2 workGroupID, uint localInvocationIndex, uint mip)
// {
//
//     if(localInvocationIndex < 64)
//     {
//           vec4 v = SpdReduceIntermediate(
//               uvec2(x * 2 + 0 + 0, y * 2 + 0),
//               uvec2(x * 2 + 0 + 1, y * 2 + 0),
//               uvec2(x * 2 + 0 + 0, y * 2 + 1),
//               uvec2(x * 2 + 0 + 1, y * 2 + 1)
//         );
//         SpdStore(ivec2(workGroupID . xy * 8)+ ivec2(x, y), v, mip);
//
//         SpdStoreIntermediate(x * 2 + y % 2, y * 2, v);
//     }
//
// }
//
// void SpdDownsampleMip_3(uint x, uint y, uvec2 workGroupID, uint localInvocationIndex, uint mip)
// {
//
//     if(localInvocationIndex < 16)
//     {
//
//           vec4 v = SpdReduceIntermediate(
//               uvec2(x * 4 + 0 + 0, y * 4 + 0),
//               uvec2(x * 4 + 2 + 0, y * 4 + 0),
//               uvec2(x * 4 + 0 + 1, y * 4 + 2),
//               uvec2(x * 4 + 2 + 1, y * 4 + 2)
//         );
//         SpdStore(ivec2(workGroupID . xy * 4)+ ivec2(x, y), v, mip);
//
//         SpdStoreIntermediate(x * 4 + y, y * 4, v);
//     }
//
// }
//
// void SpdDownsampleMip_4(uint x, uint y, uvec2 workGroupID, uint localInvocationIndex, uint mip)
// {
//
//     if(localInvocationIndex < 4)
//     {
//
//           vec4 v = SpdReduceIntermediate(
//               uvec2(x * 8 + 0 + 0 + y * 2, y * 8 + 0),
//               uvec2(x * 8 + 4 + 0 + y * 2, y * 8 + 0),
//               uvec2(x * 8 + 0 + 1 + y * 2, y * 8 + 4),
//               uvec2(x * 8 + 4 + 1 + y * 2, y * 8 + 4)
//         );
//         SpdStore(ivec2(workGroupID . xy * 2)+ ivec2(x, y), v, mip);
//
//         SpdStoreIntermediate(x + y * 2, 0, v);
//     }
//
// }
//
// void SpdDownsampleMip_5(uint x, uint y, uvec2 workGroupID, uint localInvocationIndex, uint mip)
// {
//
//     if(localInvocationIndex < 1)
//     {
//
//           vec4 v = SpdReduceIntermediate(
//               uvec2(0, 0),
//               uvec2(1, 0),
//               uvec2(2, 0),
//               uvec2(3, 0)
//         );
//         SpdStore(ivec2(workGroupID . xy), v, mip);
//     }
//
// }
//
// void SpdDownsampleMips_6_7(uint x, uint y, uint mips)
// {
//        ivec2 tex = ivec2(x * 4 + 0, y * 4 + 0);
//        ivec2 pix = ivec2(x * 2 + 0, y * 2 + 0);
//       vec4 v0 = SpdReduceLoad4(tex);
//     SpdStore(pix, v0, 6);
//
//     tex = ivec2(x * 4 + 2, y * 4 + 0);
//     pix = ivec2(x * 2 + 1, y * 2 + 0);
//       vec4 v1 = SpdReduceLoad4(tex);
//     SpdStore(pix, v1, 6);
//
//     tex = ivec2(x * 4 + 0, y * 4 + 2);
//     pix = ivec2(x * 2 + 0, y * 2 + 1);
//       vec4 v2 = SpdReduceLoad4(tex);
//     SpdStore(pix, v2, 6);
//
//     tex = ivec2(x * 4 + 2, y * 4 + 2);
//     pix = ivec2(x * 2 + 1, y * 2 + 1);
//       vec4 v3 = SpdReduceLoad4(tex);
//     SpdStore(pix, v3, 6);
//
//     if(mips <= 7)return;
//
//       vec4 v = SpdReduce4(v0, v1, v2, v3);
//     SpdStore(ivec2(x, y), v, 7);
//     SpdStoreIntermediate(x, y, v);
// }
//
// void SpdDownsampleNextFour(uint x, uint y, uvec2 workGroupID, uint localInvocationIndex, uint baseMip, uint mips)
// {
//     if(mips <= baseMip)return;
//     SpdWorkgroupShuffleBarrier();
//     SpdDownsampleMip_2(x, y, workGroupID, localInvocationIndex, baseMip);
//
//     if(mips <= baseMip + 1)return;
//     SpdWorkgroupShuffleBarrier();
//     SpdDownsampleMip_3(x, y, workGroupID, localInvocationIndex, baseMip + 1);
//
//     if(mips <= baseMip + 2)return;
//     SpdWorkgroupShuffleBarrier();
//     SpdDownsampleMip_4(x, y, workGroupID, localInvocationIndex, baseMip + 2);
//
//     if(mips <= baseMip + 3)return;
//     SpdWorkgroupShuffleBarrier();
//     SpdDownsampleMip_5(x, y, workGroupID, localInvocationIndex, baseMip + 3);
// }
//
// void SpdDownsample(
//       uvec2 workGroupID,
//       uint localInvocationIndex,
//       uint mips,
//       uint numWorkGroups
// ){
//       uvec2 sub_xy = ARmpRed8x8(localInvocationIndex % 64);
//       uint x = sub_xy . x + 8 *((localInvocationIndex >> 6)% 2);
//       uint y = sub_xy . y + 8 *((localInvocationIndex >> 7));
//     SpdDownsampleMips_0_1(x, y, workGroupID, localInvocationIndex, mips);
//
//     SpdDownsampleNextFour(x, y, workGroupID, localInvocationIndex, 2, mips);
//
//     if(mips <= 6)return;
//
//     if(SpdExitWorkgroup(numWorkGroups, localInvocationIndex))return;
//
//     SpdDownsampleMips_6_7(x, y, mips);
//
//     SpdDownsampleNextFour(x, y, uvec2(0, 0), localInvocationIndex, 8, mips);
// }
//
// #line 177 "shaders/src/GenerateMipmap.comp"
//
// void main()
// {
//
//     SpdDownsample(gl_WorkGroupID . xy, gl_LocalInvocationIndex, params . levelCount, 0);
//
// }
