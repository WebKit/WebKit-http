// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2020 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ConvertIndexIndirectLineLoop.comp.00000002.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kConvertIndexIndirectLineLoop_comp_00000002[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x6d,0x95,0x6f,0x68,0x95,0x65,
    0x18,0xc6,0x9f,0x73,0xce,0x76,0x9c,0x25,0xa5,0x35,0x4f,0x06,0xed,0x38,0x9b,0x7d,
    0xb2,0x9d,0x56,0x59,0xcc,0x46,0xb1,0x69,0x75,0xac,0xf9,0x2d,0xdd,0x20,0x82,0x63,
    0x30,0x84,0x59,0x86,0x6d,0xb5,0xd1,0x27,0x5d,0x7e,0xd9,0xb7,0x88,0xdc,0xb7,0xb6,
    0xa6,0x08,0xc3,0xa5,0xa1,0x30,0xc1,0x12,0x26,0x58,0xa6,0x7e,0x34,0x8a,0x90,0x42,
    0xa4,0x10,0x29,0xc4,0x7f,0xfd,0xd1,0x16,0xb9,0xee,0xfb,0x3d,0xbf,0x47,0x2e,0x5f,
    0xce,0xe0,0xd9,0x73,0xee,0xeb,0xba,0xef,0xeb,0xfe,0xf3,0x3c,0xef,0xfb,0xe6,0xb2,
    0x2d,0x0b,0x42,0xc8,0x84,0x7b,0x42,0x43,0x58,0x98,0x09,0xc9,0xdf,0x92,0x90,0x0d,
    0xfe,0xf3,0xde,0x90,0x4f,0xf6,0xf2,0x86,0xd7,0x36,0x94,0x06,0xdf,0xeb,0x2b,0xad,
    0x7e,0xa6,0xcd,0xf9,0xfb,0x42,0x2e,0xf1,0x73,0xee,0x7e,0xf3,0xa9,0xb7,0xbd,0xce,
    0xd6,0xb6,0x37,0xfb,0xdf,0x71,0x7c,0xad,0xad,0xc5,0x86,0xd7,0x25,0x5a,0x21,0x74,
    0xe2,0x9b,0x68,0x19,0xea,0x58,0x9e,0x98,0xf5,0xf6,0xff,0x81,0x6a,0xda,0xb0,0x2c,
    0xb1,0xeb,0xef,0xd8,0x2d,0xec,0x65,0xcb,0xe7,0x58,0x8e,0xf8,0x46,0xdb,0x1f,0xbd,
    0xc3,0x55,0xed,0x15,0xa2,0xdf,0x74,0x97,0x7e,0x7d,0x28,0xd6,0xd0,0x2b,0x8a,0x5e,
    0x73,0x4a,0xaf,0x19,0xbd,0x40,0xfc,0x8a,0x54,0x7c,0xc4,0x32,0x60,0x75,0x82,0x65,
    0xc1,0x1a,0x04,0xcb,0x81,0x2d,0x22,0x77,0xf4,0xf3,0x5c,0xad,0xa9,0x59,0x94,0x52,
    0xb3,0x28,0xd5,0xa8,0xbd,0x24,0xb5,0xb7,0xa5,0x6a,0x6f,0xa3,0xf6,0xa8,0xbf,0x36,
    0x39,0xc7,0x10,0x1e,0xc1,0x1e,0x4f,0xcd,0x66,0xa2,0x86,0xfe,0x84,0xe8,0x4f,0xa6,
    0xf4,0x27,0xd1,0x8f,0xfc,0x29,0xf4,0x1f,0xb6,0xf5,0xa0,0x65,0xcd,0x26,0x7c,0x2e,
    0xe1,0xfd,0xf7,0x52,0xf3,0xf1,0x7c,0xcd,0x68,0x34,0x19,0x13,0xcf,0xbf,0xc8,0xb9,
    0x2e,0x49,0xf8,0x3a,0x8b,0xaf,0xc6,0x38,0xd6,0x81,0xdd,0x28,0x3a,0x4b,0xd1,0xf1,
    0xb9,0xaf,0xc2,0x2e,0xa0,0xeb,0xf1,0xcb,0xf0,0xcd,0x93,0xa7,0x49,0xf2,0x14,0x13,
    0xac,0xea,0xb7,0x1c,0xbf,0x22,0x79,0x96,0xa3,0x5b,0xc5,0xf2,0x49,0x7f,0xf9,0xd4,
    0xf2,0x38,0x9f,0xc3,0x42,0xfa,0xef,0xc0,0x6e,0x01,0x8b,0xf5,0xac,0x44,0xc7,0xfd,
    0x1f,0x83,0x8b,0xf5,0xb4,0x4a,0x3d,0x7e,0x86,0xad,0xf8,0x3d,0x41,0x4c,0x09,0x5d,
    0xb7,0xdb,0xc0,0x56,0x31,0xbf,0x76,0xec,0x87,0xcc,0xee,0x44,0x27,0x47,0x7c,0x17,
    0x33,0xe9,0x24,0xbe,0x8b,0x67,0x30,0x23,0xf1,0xeb,0x64,0x4e,0x2f,0xc2,0xe5,0x85,
    0x2f,0x83,0x35,0x5a,0x96,0xf5,0x82,0xbf,0x61,0x6b,0xde,0xfe,0x62,0x7f,0x95,0xd4,
    0xfc,0xb7,0x52,0x87,0xf7,0x37,0x2e,0xfd,0xf9,0x1d,0x1a,0x27,0xdf,0x67,0xd4,0x3e,
    0x41,0x7d,0x6e,0x4f,0xa6,0xfa,0x9b,0x41,0x27,0xda,0xb3,0xdc,0xd1,0x68,0x7f,0x4b,
    0x7f,0x8f,0x9b,0xe5,0xfb,0x29,0xb0,0x32,0xeb,0x59,0xbb,0xcb,0x59,0x62,0x02,0x5a,
    0xb7,0x0c,0xf1,0x77,0xd3,0x4d,0xb3,0x4e,0x83,0xff,0x6b,0xbf,0x7d,0x16,0x67,0xe0,
    0x7d,0xef,0x32,0x2f,0x3f,0xab,0x27,0x39,0x4f,0xbf,0x53,0xcf,0x93,0xf7,0x29,0xf0,
    0x2e,0xb3,0xfc,0x7e,0x3d,0xcd,0xd9,0x14,0xe0,0xa2,0xdf,0x6a,0xb8,0x9d,0xa6,0xe5,
    0xf6,0x1a,0xf8,0x76,0x89,0x7d,0x4e,0x62,0xd7,0x48,0x6c,0x07,0x9c,0xd7,0xe1,0x67,
    0xf3,0x12,0xe7,0xb7,0x4e,0x7c,0x5e,0x06,0xff,0xc2,0x7c,0xfc,0x7c,0x5e,0x01,0x2b,
    0xd3,0x5f,0x37,0xfd,0xcd,0x99,0xbf,0x73,0xaf,0xda,0xea,0xa6,0x47,0xff,0xfd,0x8f,
    0xed,0xa7,0xb1,0xbb,0xb1,0x37,0x62,0xfb,0xfe,0x57,0x58,0x90,0xe4,0xf9,0x93,0x7a,
    0xdc,0x67,0xb3,0xad,0x5e,0xe1,0x6e,0x50,0x93,0x73,0x0d,0x99,0xbb,0xb9,0xeb,0xc2,
    0xcd,0xa7,0xe2,0xae,0x09,0x77,0x3b,0xc5,0x5d,0x65,0x76,0xce,0xf5,0xc3,0x1d,0xa0,
    0xc7,0xd7,0xe1,0x3d,0xf6,0x6f,0xeb,0xab,0x07,0x3e,0xf6,0xe9,0xfc,0x26,0x5b,0x3d,
    0xf4,0xb1,0x49,0xe6,0xbf,0x99,0x5e,0x2a,0x32,0xff,0xb3,0xbc,0x4f,0x0a,0x70,0x71,
    0xb6,0xdf,0xc1,0x4d,0x93,0xb7,0x4f,0x6a,0xf6,0x39,0x6d,0x41,0xdf,0xf7,0xfd,0x16,
    0x91,0xa7,0xff,0x3e,0x62,0x7d,0x2e,0x1f,0x92,0xb7,0x9f,0x9a,0x2b,0x72,0xaf,0xde,
    0xe2,0x5e,0x6d,0x95,0x9c,0x6f,0x83,0xc7,0x9c,0xdb,0xc0,0xca,0x82,0x6d,0x47,0xdf,
    0x9f,0xc1,0x29,0xb0,0x77,0xf1,0xdd,0xce,0xb9,0x0f,0xca,0x3c,0x9c,0x1b,0xb0,0x35,
    0x4a,0xbd,0x03,0x32,0xcb,0xf7,0xe9,0x29,0xde,0x97,0x61,0x89,0x73,0x6e,0xc8,0xd6,
    0x30,0x71,0x43,0x32,0xc7,0x0f,0x38,0x5b,0xed,0xe7,0x7b,0xfa,0x59,0x29,0xfd,0xfc,
    0x00,0x1e,0xe3,0x7e,0x04,0xbb,0x2e,0xf3,0x3f,0xc7,0x7b,0xb6,0x00,0xff,0x82,0xd5,
    0x71,0x8e,0x59,0xfa,0x9c,0x63,0xfe,0x61,0xb9,0x1f,0x73,0x68,0x0c,0x50,0xcb,0x90,
    0xf4,0xb4,0x43,0xce,0xc9,0x7b,0x1a,0x91,0x9e,0x76,0x24,0xb5,0x84,0x04,0x73,0xcd,
    0x9d,0x52,0xdb,0x2e,0x74,0xb5,0xa7,0x9f,0x6a,0xf4,0xf4,0x33,0x78,0x8c,0x3b,0x0f,
    0x36,0x27,0x3d,0x5d,0x90,0x9e,0xce,0xd3,0xd3,0x05,0xce,0xcc,0x7b,0x8a,0xf9,0x47,
    0xa4,0x27,0x7f,0x81,0xce,0x31,0xef,0x5d,0xd4,0xe9,0xbe,0x83,0xf8,0x8e,0x4a,0x5d,
    0xbf,0xd4,0xa8,0xeb,0x57,0xf0,0x58,0xd7,0x45,0x30,0x9d,0xf5,0x25,0xa9,0xeb,0x22,
    0x75,0x5d,0xe2,0x3e,0xc5,0xb8,0x8f,0xe4,0x6c,0x23,0xf6,0x31,0x33,0xad,0xa4,0x6a,
    0x1a,0x94,0xfa,0xe7,0xe9,0x61,0x04,0x8d,0x51,0xe1,0x6e,0x73,0x1e,0x23,0x68,0x8d,
    0xa2,0xd3,0x8b,0x4e,0x6f,0xea,0xdd,0xd3,0x23,0xe7,0xf9,0x49,0xea,0x8e,0x8e,0xc9,
    0x79,0x3a,0xb7,0xdb,0xd6,0x18,0x71,0xbb,0x65,0x46,0xbf,0xd5,0x98,0xd1,0xef,0xe0,
    0xb1,0xaf,0xcb,0x60,0x3a,0xa3,0x2b,0x32,0xa3,0xcb,0xcc,0xe8,0x0a,0xcf,0x73,0x8c,
    0xfb,0x54,0x66,0xe4,0x75,0xc7,0xfc,0x63,0xd2,0xf3,0x1f,0xf8,0xf4,0xe0,0xaf,0xb5,
    0xed,0xa1,0xb6,0x8a,0xd4,0xb6,0x17,0x3c,0xd6,0xb1,0x8f,0xef,0x61,0x01,0xce,0xeb,
    0xd8,0x87,0x6e,0xac,0x63,0x0a,0xae,0x2c,0xd8,0x34,0xdf,0x98,0xb2,0x68,0x7d,0x2e,
    0xdf,0x98,0x69,0xc9,0x79,0x00,0x2e,0xfa,0x1d,0x94,0x9c,0x53,0xe4,0x3c,0x88,0x5f,
    0xd4,0x3f,0x44,0x4e,0xfd,0x86,0x1d,0x96,0xb8,0x43,0xc4,0x1d,0xe6,0xcc,0x63,0xdc,
    0x11,0xe2,0x66,0x04,0x3b,0x4a,0xad,0x33,0xa2,0xf5,0xa5,0xd4,0x7a,0x54,0x6a,0xfd,
    0x0a,0x2e,0xfa,0x1d,0x93,0x9c,0x47,0xc8,0x79,0x0c,0xbf,0xa8,0x7f,0x9c,0x9c,0xb3,
    0x82,0x9d,0x20,0xe7,0xac,0x68,0x7d,0x2d,0x39,0x4f,0x48,0xce,0x6f,0xe0,0xa2,0xdf,
    0x49,0xc9,0x79,0x9c,0x9c,0x27,0xf1,0xd3,0x6f,0xa9,0xef,0xff,0xd9,0xc3,0xd0,0x6e,
    0xeb,0x7f,0x75,0xf2,0xd9,0xb4,0x4c,0x0d,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// layout(local_size_x = 64, local_size_y = 1, local_size_z = 1)in;
//
// layout(set = 0, binding = 0)buffer dst
// {
//
//     uint dstData[];
// };
//
// layout(set = 0, binding = 1)readonly buffer src
// {
//
//     uint srcData[];
// };
//
// layout(set = 0, binding = 2)readonly buffer cmd
// {
//
//     uint cmdData[];
// };
//
// layout(set = 0, binding = 3)buffer dstCmd
// {
//
//     uint dstCmdData[];
// };
//
// layout(push_constant)uniform PushConstants
// {
//
//     uint cmdOffsetDiv4;
//
//     uint dstCmdOffsetDiv4;
//
//     uint dstOffsetDiv4;
//
//     uint isRestartEnabled;
// };
//
// uint GetIndexValue(uint index)
// {
//
//     return srcData[index];
//
// }
//
// void PutIndexValue(uint index, uint value)
// {
//
//     dstData[dstOffsetDiv4 + index]= value;
//
// }
//
// void main()
// {
//
//     uint indexCount = cmdData[cmdOffsetDiv4];
//     uint firstIndex = cmdData[cmdOffsetDiv4 + 2];
//     uint endIndex = firstIndex + indexCount;
//
//     if(gl_GlobalInvocationID . x >= 1)
//         return;
//
//     uint workingCount = 0;
//     uint srcIdx = firstIndex;
//     uint indicesRemaining = indexCount;
//     uint lineSize = 0;
//     uint firstIndexValue = 0;
//     while(indicesRemaining > 0)
//     {
//         uint indexValue;
//         uint restartValue = 0xffffffff;
//         indexValue = GetIndexValue(srcIdx ++);
//         if(lineSize == 0)
//         {
//             firstIndexValue = indexValue;
//         }
//         indicesRemaining --;
//         if((isRestartEnabled == 1)&&(indexValue == restartValue))
//         {
//
//             if(lineSize > 1)
//             {
//                 PutIndexValue(workingCount ++, firstIndexValue);
//             }
//             if(lineSize > 0)
//             {
//                 PutIndexValue(workingCount ++, restartValue);
//             }
//             lineSize = 0;
//         } else {
//             PutIndexValue(workingCount, indexValue);
//             workingCount ++;
//             lineSize ++;
//         }
//     }
//     if(lineSize > 1)
//     {
//         PutIndexValue(workingCount, firstIndexValue);
//         workingCount ++;
//     }
//
//     dstCmdData[dstCmdOffsetDiv4]= workingCount;
//     dstCmdData[dstCmdOffsetDiv4 + 1]= cmdData[cmdOffsetDiv4 + 1];
//     dstCmdData[dstCmdOffsetDiv4 + 2]= 0;
//     dstCmdData[dstCmdOffsetDiv4 + 3]= cmdData[cmdOffsetDiv4 + 3];
//     dstCmdData[dstCmdOffsetDiv4 + 4]= cmdData[cmdOffsetDiv4 + 4];
// }
