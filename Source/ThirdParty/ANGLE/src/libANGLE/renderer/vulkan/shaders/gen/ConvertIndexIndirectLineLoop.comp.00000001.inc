// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2020 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ConvertIndexIndirectLineLoop.comp.00000001.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kConvertIndexIndirectLineLoop_comp_00000001[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x6d,0x56,0x7f,0x68,0x55,0x65,
    0x18,0x3e,0xef,0xee,0x76,0xb7,0xb4,0x4c,0xdd,0xd6,0xed,0x96,0xc5,0x6d,0x16,0x8e,
    0xac,0xdb,0x36,0x2c,0xdb,0x5c,0xd1,0x62,0x32,0x69,0x96,0x44,0x9b,0xeb,0x07,0x34,
    0x37,0x8c,0xfd,0x70,0xae,0xc6,0x82,0xca,0xdd,0x81,0x88,0xd8,0x08,0x34,0x05,0xdb,
    0x68,0xa3,0xbf,0xda,0x90,0x62,0xf4,0x4f,0x44,0xee,0xbf,0xb6,0x66,0x0d,0x04,0x4b,
    0x50,0x98,0x60,0x09,0x13,0x2c,0x73,0xfd,0x59,0xe9,0x2a,0xec,0x7b,0xcf,0xf7,0xbc,
    0xfa,0x78,0x3a,0xc2,0xf1,0xec,0x7b,0x9e,0xf7,0x7d,0xde,0xf7,0x7b,0x9f,0xef,0x9c,
    0x7b,0x12,0x79,0x6b,0x0b,0x83,0x40,0x82,0x65,0x41,0x51,0x70,0x44,0x82,0xf0,0xdf,
    0xaa,0x20,0x2f,0xd0,0x3f,0x97,0x07,0xc9,0xf0,0xde,0xb0,0xf5,0xa5,0xad,0xd9,0xfe,
    0xb7,0x77,0x66,0x37,0x3c,0x5e,0xa1,0xfc,0x8a,0x20,0x11,0xc6,0x29,0x77,0xa7,0x8b,
    0x29,0x70,0xf7,0x7c,0x77,0xed,0x6e,0xeb,0xea,0x55,0xbc,0xcb,0x5d,0x2b,0x1d,0x9e,
    0x1f,0x6a,0x05,0xc1,0x33,0x88,0x0d,0xb5,0x1c,0xba,0xda,0xdd,0x93,0xc8,0xd9,0xe2,
    0xfe,0x2f,0xf6,0x65,0x83,0xbb,0xc3,0x75,0xc1,0x8d,0xf5,0x5a,0xdc,0x1b,0x5c,0x3d,
    0xc5,0x12,0xc8,0x2f,0x75,0xf7,0xb2,0x1b,0x9c,0x5f,0x3f,0x00,0x7d,0xcd,0xcf,0x46,
    0xf2,0x0d,0x13,0x60,0xf9,0x84,0xe5,0x01,0x2b,0x22,0x2c,0x01,0xec,0x76,0xd4,0xb6,
    0x38,0xad,0x55,0x7d,0x4b,0xef,0x05,0x41,0x4d,0x4c,0xaf,0x35,0xd4,0x6b,0x6d,0xa4,
    0xd7,0x5a,0xf4,0x6a,0xeb,0xa6,0xc8,0x2c,0x9a,0x23,0xb3,0x68,0x8e,0xd1,0x6f,0x26,
    0xfd,0x96,0x88,0x7e,0x0b,0xf4,0xad,0xdf,0xae,0xd0,0xc7,0x20,0x58,0x83,0xf5,0x74,
    0xa4,0xff,0x99,0x18,0xfd,0x19,0xd2,0x9f,0x8d,0xe8,0xcf,0x42,0xdf,0xf8,0x2b,0xd0,
    0x4f,0xbb,0xab,0xd8,0x55,0xcd,0x0b,0xf9,0x44,0xc8,0xeb,0xdf,0xa5,0x2e,0x46,0xeb,
    0x65,0xa0,0x71,0x9f,0x63,0xcc,0xff,0xfb,0xe1,0xeb,0xea,0x90,0xcf,0x0f,0x4a,0x90,
    0xa3,0xd8,0x26,0xac,0x4b,0x49,0xe7,0x2e,0xe8,0xa8,0x8f,0xeb,0xb1,0x4e,0x41,0xd7,
    0xd6,0x69,0xf0,0xaa,0x77,0x2f,0x72,0x93,0xe0,0x93,0x31,0xf9,0x65,0x98,0x85,0xf1,
    0xe5,0xee,0xba,0x7e,0x5d,0x7b,0x4b,0x86,0xbe,0x27,0x23,0x97,0xea,0x3e,0xe6,0xee,
    0xb7,0xb9,0x2b,0x8b,0x3e,0x75,0x5d,0x01,0xcc,0x74,0x2b,0x51,0x5b,0xe3,0xab,0xc0,
    0x25,0xb1,0xff,0x6a,0xda,0xbf,0x9e,0x95,0x6a,0xc4,0x6d,0x42,0x4e,0x0d,0x74,0x75,
    0x5d,0x0b,0xcc,0x74,0xeb,0xd1,0x9f,0xea,0x34,0x91,0x8e,0x9e,0x89,0x26,0xe8,0x6c,
    0x47,0x4e,0x33,0x74,0x74,0xdd,0x42,0x3a,0x9a,0xd3,0x8a,0x75,0xca,0xad,0x3b,0xa0,
    0x93,0x40,0x7e,0x27,0x66,0xd4,0x81,0xfc,0x4e,0x3c,0xd3,0x42,0xf9,0xdd,0x98,0xbb,
    0xc6,0xef,0x02,0xa7,0x78,0x89,0x53,0xed,0xa5,0x7e,0x0f,0x41,0x57,0xfb,0x9d,0xa6,
    0x7e,0xf5,0x8c,0x4d,0x23,0xff,0x5b,0xf4,0x32,0x83,0x7a,0xba,0x9e,0x8d,0xf4,0x3b,
    0x0f,0x1d,0x5b,0x2f,0x44,0x7c,0xfb,0x0d,0xef,0x99,0x47,0xdc,0x4a,0xfb,0xbe,0x02,
    0x2c,0x83,0xeb,0x09,0x77,0xd6,0xf3,0x90,0x13,0x40,0xeb,0xaa,0x43,0xf4,0xdd,0xf5,
    0x97,0x5b,0x2d,0x02,0xff,0xdb,0xfd,0xad,0x7b,0xfb,0x1d,0xbc,0xde,0xeb,0x5c,0x94,
    0x7a,0xf8,0x32,0x7c,0xd6,0x33,0xf7,0x14,0xea,0xbe,0x02,0xbc,0xce,0xad,0xf4,0xbc,
    0xbd,0x8a,0x59,0xa7,0xc0,0x59,0xdc,0x6b,0xe0,0xf6,0x3a,0x2d,0x5d,0xef,0x00,0xdf,
    0x4a,0xb9,0x6d,0x94,0xbb,0x83,0x72,0xdb,0xc1,0x69,0x1f,0x3a,0xeb,0x1e,0xf8,0xd1,
    0x4d,0x31,0xbb,0x81,0x7f,0xe1,0x62,0x74,0xfe,0x6f,0x02,0xcb,0x60,0x7f,0x7d,0xd8,
    0xdf,0x92,0x8b,0x57,0xee,0x2d,0x77,0xf5,0x61,0x8f,0xfa,0xf7,0x35,0x77,0x5f,0xc4,
    0xba,0x0f,0xeb,0x3d,0x58,0xeb,0xfd,0x8f,0xa0,0x30,0xac,0x93,0x13,0xdf,0x8f,0xc6,
    0xec,0x77,0xd7,0x20,0x71,0x7b,0xc4,0xf7,0xa4,0xdc,0x61,0xb9,0x95,0x7b,0x8f,0xb8,
    0xf7,0x23,0xdc,0xbb,0xc4,0x1d,0x88,0x70,0xef,0x88,0x9f,0x9d,0x72,0x07,0x51,0x6f,
    0x12,0x7b,0xdc,0x0b,0x5e,0x73,0xff,0x74,0xfb,0xca,0x81,0xb7,0x7d,0x2a,0x3f,0xa0,
    0x3d,0x63,0x1f,0x03,0x34,0xff,0xfd,0xd8,0x4b,0x3a,0x3c,0x77,0x1e,0xbb,0x4a,0x98,
    0x79,0x72,0x0d,0xef,0xa0,0x14,0x78,0x9b,0xf7,0x12,0xb8,0xef,0x91,0xfb,0x0f,0x72,
    0x33,0xe1,0xd9,0xf5,0xd8,0xbf,0xc0,0xcb,0xa8,0x86,0x3e,0x28,0x4b,0xe0,0x2c,0x57,
    0xf0,0xe3,0xa8,0xef,0x9e,0xcf,0xb1,0xb7,0x21,0x9a,0x8b,0x7a,0xf1,0x01,0xf6,0xa0,
    0xf7,0xcf,0x5c,0x56,0x12,0x33,0x1e,0x42,0xbe,0xce,0x7e,0x1f,0xf4,0x0e,0x62,0x2e,
    0x69,0x3a,0xbb,0x1f,0xe2,0xec,0x1e,0xa2,0x3d,0x1c,0x06,0x6e,0x35,0x8f,0x00,0xcb,
    0x10,0x76,0x14,0xfa,0xda,0xdb,0x31,0x60,0x1f,0x21,0xf6,0x28,0xce,0xd6,0x08,0xcd,
    0x5c,0xb9,0xe1,0xd0,0x23,0xdf,0xef,0x30,0xf9,0xf5,0x31,0xf6,0x64,0x67,0x72,0x8c,
    0xf2,0x94,0x1b,0x75,0xd7,0x18,0xf2,0x46,0xc9,0xab,0x4f,0x70,0x7e,0x78,0x3f,0x85,
    0xe2,0xf7,0x53,0x49,0xfb,0x29,0x12,0x8f,0xdb,0xac,0x97,0xc9,0xcd,0x3c,0xd3,0x5a,
    0x2e,0x3e,0x4e,0x39,0xf3,0xf8,0x0e,0xf1,0xef,0xd9,0x14,0x78,0xd3,0x5b,0x21,0x9e,
    0x33,0x9f,0x56,0x42,0x8f,0x3d,0x5e,0x25,0x1e,0x2f,0x03,0xa6,0xef,0xbc,0x62,0xf1,
    0xef,0x69,0xe5,0xe6,0xf0,0x1e,0x2c,0x11,0x8f,0xe7,0xa0,0x5d,0x2a,0x1e,0x33,0xed,
    0x94,0xf8,0x7a,0x8a,0x9b,0xf6,0x3d,0xe2,0x3d,0x56,0x9d,0x13,0xc0,0xd6,0x88,0x8f,
    0x55,0xee,0x69,0x37,0x43,0xed,0x4f,0x31,0x3d,0x23,0x36,0xbb,0x31,0x7a,0x7e,0xf6,
    0xa1,0xe7,0x61,0xcc,0x71,0x94,0xfc,0xf8,0x94,0xce,0x98,0xfa,0x31,0x41,0x7e,0x28,
    0x37,0xee,0xae,0x09,0x68,0x8e,0xd3,0x0c,0x8f,0x41,0x97,0xfd,0x78,0x30,0xc6,0x8f,
    0x87,0xc4,0xe3,0xe6,0xc7,0x3a,0xb9,0x99,0x67,0x5a,0xe5,0xe2,0xe3,0xd6,0x91,0x1f,
    0x0f,0x93,0x1f,0xe5,0xe4,0xc7,0x7a,0xf1,0x9c,0xcd,0xec,0x51,0xe8,0xb1,0x1f,0x59,
    0xf1,0x38,0xfb,0x51,0x01,0x3f,0xb2,0xe4,0x47,0xa5,0x78,0xdc,0xfc,0xa8,0x12,0x8f,
    0x99,0xf6,0x06,0xf1,0xf5,0xaa,0xc8,0x8f,0x8d,0x78,0x0e,0xb2,0xe4,0x47,0xb5,0xf8,
    0xd8,0x8d,0xf0,0x43,0xfb,0xab,0x86,0x1f,0x36,0xbb,0x09,0xf2,0x63,0x08,0x3d,0x8f,
    0x61,0x8e,0xe3,0x78,0xbe,0x47,0x10,0x3b,0x49,0x33,0xad,0x8b,0x99,0xe9,0xb3,0xe2,
    0x71,0x9b,0x69,0x7d,0xcc,0x19,0xdf,0x2c,0x3e,0xae,0x9e,0x66,0xda,0x40,0x33,0xdd,
    0x4c,0x33,0xdd,0x22,0x9e,0xb3,0x7d,0x3f,0x17,0x73,0xc6,0x1b,0xc5,0xe3,0x3c,0xd3,
    0xe7,0x31,0xd3,0x46,0x9a,0xe9,0x0b,0xe2,0x71,0x9b,0xe9,0x36,0xf1,0x98,0x69,0xbf,
    0x28,0xbe,0xde,0x36,0x9a,0x69,0x93,0xf8,0xf7,0x4b,0x23,0xcd,0x74,0xbb,0xf8,0xd8,
    0x26,0xcc,0x54,0xfb,0x53,0xcc,0xf6,0xf7,0x65,0xf0,0xff,0x3d,0x7f,0x85,0xb3,0x9c,
    0x8e,0xcc,0x73,0x84,0x66,0xaf,0xbf,0x3b,0x3a,0xff,0x09,0x68,0x4c,0x12,0x77,0x00,
    0xcf,0xc1,0x04,0xb4,0x26,0xa1,0x33,0x08,0x9d,0xc1,0xc8,0x6f,0x62,0x8e,0x9e,0xa3,
    0xaf,0x23,0xef,0xb5,0x29,0x7a,0x8e,0x94,0x3b,0xee,0xae,0x29,0xe4,0x1d,0x27,0x7f,
    0x5f,0x8f,0xf1,0xb7,0x55,0x3c,0x6e,0xfe,0xb6,0xc5,0xf8,0xdb,0x2e,0x3e,0xae,0x8d,
    0xfc,0xdd,0x49,0xfe,0xb6,0x93,0xbf,0x6f,0x88,0xe7,0xcc,0x83,0x8e,0x18,0x7f,0x3b,
    0xc5,0xe3,0xec,0x6f,0x37,0xfc,0xed,0x24,0x7f,0x77,0x89,0xc7,0xcd,0xdf,0x1e,0xf1,
    0x98,0x69,0xf7,0x8a,0xaf,0xd7,0x43,0xfe,0xf6,0xe1,0xb7,0xa9,0x93,0xfc,0xed,0x17,
    0x1f,0xdb,0x07,0x7f,0xb5,0xbf,0x7e,0xf2,0xf7,0x1b,0xf2,0x57,0x67,0x6e,0xb3,0x9b,
    0x22,0xbf,0x06,0xb0,0x8f,0x1c,0xe2,0x79,0xae,0x27,0xf0,0x5b,0x97,0xa6,0xb9,0x7e,
    0x07,0xdc,0xe6,0x35,0x87,0x6f,0xcc,0x14,0x38,0xed,0x63,0x0e,0xba,0xd6,0xc7,0x49,
    0x70,0x19,0x9a,0xfd,0x29,0x7c,0xb7,0x65,0x48,0xeb,0x07,0xfa,0x6e,0x3b,0x45,0x35,
    0x7f,0x04,0x67,0x71,0xa7,0xa9,0xe6,0x49,0xd4,0x3c,0x8d,0x38,0xd3,0x3f,0x83,0x9a,
    0xfc,0x5d,0x78,0x96,0xf2,0xce,0x20,0xef,0x2c,0xbe,0xff,0x2c,0xef,0x1c,0xf2,0xe6,
    0x09,0x3b,0x8f,0x5e,0xe7,0x49,0xeb,0x27,0xea,0xf5,0x3c,0xf5,0xfa,0x33,0x38,0x8b,
    0xbb,0x40,0x35,0xcf,0xa1,0xe6,0x05,0xc4,0x99,0xfe,0x45,0xd4,0x5c,0x20,0xec,0x12,
    0x6a,0x2e,0x90,0xd6,0x2f,0x54,0xf3,0x12,0xd5,0xfc,0x15,0x9c,0xc5,0x5d,0xa6,0x9a,
    0x17,0x51,0xf3,0x32,0xe2,0xf8,0xfb,0x74,0x31,0xfc,0x7e,0x92,0xe0,0x49,0x77,0xfd,
    0x07,0x6a,0x2f,0x96,0xf5,0xc0,0x10,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// layout(local_size_x = 64, local_size_y = 1, local_size_z = 1)in;
//
// layout(set = 0, binding = 0)buffer dst
// {
//
//     uint dstData[];
// };
//
// layout(set = 0, binding = 1)readonly buffer src
// {
//
//     uint srcData[];
// };
//
// layout(set = 0, binding = 2)readonly buffer cmd
// {
//
//     uint cmdData[];
// };
//
// layout(set = 0, binding = 3)buffer dstCmd
// {
//
//     uint dstCmdData[];
// };
//
// layout(push_constant)uniform PushConstants
// {
//
//     uint cmdOffsetDiv4;
//
//     uint dstCmdOffsetDiv4;
//
//     uint dstOffsetDiv4;
//
//     uint isRestartEnabled;
// };
//
// uint GetIndexValue(uint index)
// {
//
//     uint srcBlock = srcData[index >> 1];
//
//     uint srcShift =((index & 0x1)<< 4);
//
//     uint value =(srcBlock >> srcShift)& 0xffff;
//     return value;
//
// }
//
// void PutIndexValue(uint index, uint value)
// {
//
//     uint dstIndex = dstOffsetDiv4 +(index >> 1);
//
//     uint srcBlock = dstData[dstIndex];
//
//     uint srcShift =((index & 0x1)<< 4);
//
//     srcBlock &= ~(0xffff << srcShift);
//
//     srcBlock |= value << srcShift;
//
//     dstData[dstIndex]= srcBlock;
//
// }
//
// void main()
// {
//
//     uint indexCount = cmdData[cmdOffsetDiv4];
//     uint firstIndex = cmdData[cmdOffsetDiv4 + 2];
//     uint endIndex = firstIndex + indexCount;
//
//     if(gl_GlobalInvocationID . x >= 1)
//         return;
//
//     uint workingCount = 0;
//     uint srcIdx = firstIndex;
//     uint indicesRemaining = indexCount;
//     uint lineSize = 0;
//     uint firstIndexValue = 0;
//     while(indicesRemaining > 0)
//     {
//         uint indexValue;
//         uint restartValue = 0xffff;
//         indexValue = GetIndexValue(srcIdx ++);
//         if(lineSize == 0)
//         {
//             firstIndexValue = indexValue;
//         }
//         indicesRemaining --;
//         if((isRestartEnabled == 1)&&(indexValue == restartValue))
//         {
//
//             if(lineSize > 1)
//             {
//                 PutIndexValue(workingCount ++, firstIndexValue);
//             }
//             if(lineSize > 0)
//             {
//                 PutIndexValue(workingCount ++, restartValue);
//             }
//             lineSize = 0;
//         } else {
//             PutIndexValue(workingCount, indexValue);
//             workingCount ++;
//             lineSize ++;
//         }
//     }
//     if(lineSize > 1)
//     {
//         PutIndexValue(workingCount, firstIndexValue);
//         workingCount ++;
//     }
//
//     dstCmdData[dstCmdOffsetDiv4]= workingCount;
//     dstCmdData[dstCmdOffsetDiv4 + 1]= cmdData[cmdOffsetDiv4 + 1];
//     dstCmdData[dstCmdOffsetDiv4 + 2]= 0;
//     dstCmdData[dstCmdOffsetDiv4 + 3]= cmdData[cmdOffsetDiv4 + 3];
//     dstCmdData[dstCmdOffsetDiv4 + 4]= cmdData[cmdOffsetDiv4 + 4];
// }
