/*
 * Copyright (C) 2009 Google Inc. All rights reserved.
 * Copyright (C) 2011, 2012 Apple Inc. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 * copyright notice, this list of conditions and the following disclaimer
 * in the documentation and/or other materials provided with the
 * distribution.
 *     * Neither the name of Google Inc. nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

module threads {

    interface [
        Conditional=NOTIFICATIONS|LEGACY_NOTIFICATIONS,
        ActiveDOMObject,
        EventTarget,
#if defined(ENABLE_NOTIFICATIONS) && ENABLE_NOTIFICATIONS
        Constructor(in DOMString title, in [Optional=DefaultIsUndefined] Dictionary options),
        CallWith=ScriptExecutionContext,
#else
        OmitConstructor
#endif
    ] Notification {
        void show();
#if defined(ENABLE_LEGACY_NOTIFICATIONS) && ENABLE_LEGACY_NOTIFICATIONS
        void cancel();
#endif
#if defined(ENABLE_NOTIFICATIONS) && ENABLE_NOTIFICATIONS
        void close();
#endif


#if defined(ENABLE_NOTIFICATIONS) && ENABLE_NOTIFICATIONS
        [CallWith=ScriptExecutionContext] static DOMString permissionLevel();
        [Custom] static void requestPermission(in NotificationPermissionCallback callback);
#endif

        attribute EventListener onshow;
#if defined(ENABLE_LEGACY_NOTIFICATIONS) && ENABLE_LEGACY_NOTIFICATIONS
        attribute EventListener ondisplay;
#endif
        attribute EventListener onerror;
        attribute EventListener onclose;
        attribute EventListener onclick;

        attribute DOMString dir;
#if defined(ENABLE_LEGACY_NOTIFICATIONS) && ENABLE_LEGACY_NOTIFICATIONS
        attribute DOMString replaceId;
#endif
#if defined(ENABLE_NOTIFICATIONS) && ENABLE_NOTIFICATIONS
        attribute DOMString tag;
#endif

        // EventTarget interface
        void addEventListener(in DOMString type, 
                              in EventListener listener, 
                              in [Optional] boolean useCapture);
        void removeEventListener(in DOMString type, 
                                 in EventListener listener, 
                                 in [Optional] boolean useCapture);
        boolean dispatchEvent(in Event evt)
            raises(EventException);
    };

}
