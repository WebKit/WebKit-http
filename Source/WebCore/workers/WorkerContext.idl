/*
 * Copyright (C) 2008 Apple Inc. All Rights Reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY APPLE COMPUTER, INC. ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE COMPUTER, INC. OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
 *
 */

module threads {

    interface [
        Conditional=WORKERS,
        JSCustomMarkFunction,
        JSCustomGetOwnPropertySlotAndDescriptor,
        EventTarget,
        ExtendsDOMGlobalObject,
        IsWorkerContext,
        JSLegacyParent=JSWorkerContextBase,
        JSNoStaticTables,
        OmitConstructor,
        V8CustomToJSObject
    ] WorkerContext {

        // WorkerGlobalScope
#if defined(LANGUAGE_JAVASCRIPT) && LANGUAGE_JAVASCRIPT
                 attribute [Replaceable] WorkerContext self;
#endif
                 attribute [Replaceable] WorkerLocation location;
        void close();
                 attribute EventListener onerror;

        // WorkerUtils
        [Custom] void importScripts(/*[Variadic] in DOMString urls */);
                 attribute [Replaceable] WorkerNavigator navigator;
#if defined(ENABLE_SQL_DATABASE) && ENABLE_SQL_DATABASE
        [V8EnabledAtRuntime] Database openDatabase(in DOMString name, in DOMString version, in DOMString displayName, in unsigned long estimatedSize, in [Callback, Optional] DatabaseCallback creationCallback)
            raises(DOMException);
        [V8EnabledAtRuntime] DatabaseSync openDatabaseSync(in DOMString name, in DOMString version, in DOMString displayName, in unsigned long estimatedSize, in [Callback, Optional] DatabaseCallback creationCallback)
            raises(DOMException);
#endif

        // Timers
        [Custom] long setTimeout(in TimeoutHandler handler, in long timeout);
        // [Custom] long setTimeout(in DOMString code, in long timeout);
        void clearTimeout(in [Optional=DefaultIsUndefined] long handle);
        [Custom] long setInterval(in TimeoutHandler handler, in long timeout);
        // [Custom] long setInterval(in DOMString code, in long timeout);
        void clearInterval(in [Optional=DefaultIsUndefined] long handle);


        // EventTarget interface
        void addEventListener(in DOMString type, 
                              in EventListener listener, 
                              in [Optional] boolean useCapture);
        void removeEventListener(in DOMString type, 
                                 in EventListener listener, 
                                 in [Optional] boolean useCapture);
        boolean dispatchEvent(in Event evt)
            raises(EventException);

#if defined(ENABLE_NOTIFICATIONS) && ENABLE_NOTIFICATIONS
        // Notification interface
        readonly attribute [V8EnabledAtRuntime] NotificationCenter webkitNotifications;
#endif

#if !defined(LANGUAGE_CPP) || !LANGUAGE_CPP
        // Constructors
        attribute MessageEventConstructor MessageEvent;
        attribute WorkerLocationConstructor WorkerLocation;

#if ENABLE_CHANNEL_MESSAGING
        attribute [JSCustomGetter] MessageChannelConstructor MessageChannel;
#endif
        attribute [JSCustomGetter] EventSourceConstructor EventSource;
        attribute [JSCustomGetter] XMLHttpRequestConstructor XMLHttpRequest;
#if defined(ENABLE_WEB_SOCKETS) && ENABLE_WEB_SOCKETS
        attribute [JSCustomGetter,V8EnabledAtRuntime] WebSocketConstructor WebSocket; // Usable with the new operator
#endif
#endif

#if defined(ENABLE_BLOB) && ENABLE_BLOB
        attribute WebKitBlobBuilderConstructor WebKitBlobBuilder;
        attribute FileReaderConstructor FileReader;
        attribute FileReaderSyncConstructor FileReaderSync;
#endif

        attribute [Conditional=BLOB] DOMURLConstructor webkitURL;

#if defined(ENABLE_FILE_SYSTEM) && ENABLE_FILE_SYSTEM
        const unsigned short TEMPORARY = 0;
        const unsigned short PERSISTENT = 1;
        [V8EnabledAtRuntime=FileSystem] void webkitRequestFileSystem(in unsigned short type, in long long size, in [Callback, Optional] FileSystemCallback successCallback, in [Callback, Optional] ErrorCallback errorCallback);
        [V8EnabledAtRuntime=FileSystem] DOMFileSystemSync webkitRequestFileSystemSync(in unsigned short type, in long long size) raises (FileException);
        [V8EnabledAtRuntime=FileSystem] void webkitResolveLocalFileSystemURL(in DOMString url, in [Callback, Optional] EntryCallback successCallback, in [Callback, Optional] ErrorCallback errorCallback);
        [V8EnabledAtRuntime=FileSystem] EntrySync webkitResolveLocalFileSystemSyncURL(in DOMString url) raises (FileException);

                 attribute [V8EnabledAtRuntime=FileSystem] FileErrorConstructor FileError;
                 attribute [V8EnabledAtRuntime=FileSystem] FileExceptionConstructor FileException;
#endif

        attribute ArrayBufferConstructor ArrayBuffer; // Usable with new operator
        attribute Int8ArrayConstructor Int8Array; // Usable with new operator
        attribute Uint8ArrayConstructor Uint8Array; // Usable with new operator
        attribute Uint8ArrayConstructor Uint8ClampedArray; // Usable with new operator
        attribute Int16ArrayConstructor Int16Array; // Usable with new operator
        attribute Uint16ArrayConstructor Uint16Array; // Usable with new operator
        attribute Int32ArrayConstructor Int32Array; // Usable with new operator
        attribute Uint32ArrayConstructor Uint32Array; // Usable with new operator
        attribute Float32ArrayConstructor Float32Array; // Usable with new operator
        attribute Float64ArrayConstructor Float64Array; // Usable with new operator
        attribute DataViewConstructor DataView; // Usable with new operator
#if defined(ENABLE_INDEXED_DATABASE) && ENABLE_INDEXED_DATABASE
        readonly attribute [V8EnabledAtRuntime] IDBFactory webkitIndexedDB;

        attribute [V8EnabledAtRuntime] IDBCursorConstructor webkitIDBCursor;
        attribute [V8EnabledAtRuntime] IDBDatabaseConstructor webkitIDBDatabase;
        attribute [V8EnabledAtRuntime] IDBDatabaseErrorConstructor webkitIDBDatabaseError;
        attribute [V8EnabledAtRuntime] IDBDatabaseExceptionConstructor webkitIDBDatabaseException;
        attribute [V8EnabledAtRuntime] IDBFactoryConstructor webkitIDBFactory;
        attribute [V8EnabledAtRuntime] IDBIndexConstructor webkitIDBIndex;
        attribute [V8EnabledAtRuntime] IDBKeyRangeConstructor webkitIDBKeyRange;
        attribute [V8EnabledAtRuntime] IDBObjectStoreConstructor webkitIDBObjectStore;
        attribute [V8EnabledAtRuntime] IDBRequestConstructor webkitIDBRequest;
        attribute [V8EnabledAtRuntime] IDBTransactionConstructor webkitIDBTransaction;
#endif
    };

}
