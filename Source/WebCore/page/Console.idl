/*
 * Copyright (C) 2007, 2008 Apple Inc. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1.  Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 * 2.  Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 * 3.  Neither the name of Apple Computer, Inc. ("Apple") nor the names of
 *     its contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

[
    JSGenerateIsReachable=ImplFrame,
    OmitConstructor
] interface Console {

    [CallWith=ScriptArguments|ScriptState] void debug();
    [CallWith=ScriptArguments|ScriptState] void error();
    [CallWith=ScriptArguments|ScriptState] void info();
    [CallWith=ScriptArguments|ScriptState] void log();
    [CallWith=ScriptArguments|ScriptState] void warn();
    [CallWith=ScriptArguments|ScriptState] void dir();
    [CallWith=ScriptArguments|ScriptState] void dirxml();
    [V8Custom, CallWith=ScriptArguments|ScriptState] void trace();
    [V8Custom, CallWith=ScriptArguments|ScriptState, ImplementedAs=assertCondition] void assert(in boolean condition);
    [CallWith=ScriptArguments|ScriptState] void count();
    [CallWith=ScriptArguments] void markTimeline();

#if defined(ENABLE_JAVASCRIPT_DEBUGGER) && ENABLE_JAVASCRIPT_DEBUGGER
    // As per spec: http://www.w3.org/TR/WebIDL/#idl-sequence
    // "Sequences must not be used as the type of an attribute, constant or exception field."
    // FIXME: this will lead to BUG console.profiles !== console.profiles as profile will always returns new array.
    readonly attribute ScriptProfile[] profiles;
    [Custom] void profile(in DOMString title);
    [Custom] void profileEnd(in DOMString title);
#endif

    void time(in [TreatNullAs=NullString, TreatUndefinedAs=NullString] DOMString title);
    [CallWith=ScriptState] void timeEnd(in [TreatNullAs=NullString, TreatUndefinedAs=NullString] DOMString title);
    [CallWith=ScriptArguments] void timeStamp();
    [CallWith=ScriptArguments|ScriptState] void group();
    [CallWith=ScriptArguments|ScriptState] void groupCollapsed();
    void groupEnd();
    [CallWith=ScriptArguments|ScriptState] void clear();

    readonly attribute MemoryInfo memory;
};

