/*
 * Copyright (C) 2007, 2008 Apple Inc. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1.  Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 * 2.  Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 * 3.  Neither the name of Apple Computer, Inc. ("Apple") nor the names of
 *     its contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

module window {

    interface [
        JSGenerateIsReachable=ImplFrame,
        OmitConstructor
    ] Console {

        [CallWith=ScriptArguments|CallStack] void debug();
        [CallWith=ScriptArguments|CallStack] void error();
        [CallWith=ScriptArguments|CallStack] void info();
        [CallWith=ScriptArguments|CallStack] void log();
        [CallWith=ScriptArguments|CallStack] void warn();
        [CallWith=ScriptArguments|CallStack] void dir();
        [CallWith=ScriptArguments|CallStack] void dirxml();
        [V8Custom, CallWith=ScriptArguments|CallStack] void trace();
        [V8Custom, CallWith=ScriptArguments|CallStack, ImplementedAs=assertCondition] void assert(in boolean condition);
        [CallWith=ScriptArguments|CallStack] void count();
        [CallWith=ScriptArguments|CallStack] void markTimeline();

#if defined(ENABLE_JAVASCRIPT_DEBUGGER) && ENABLE_JAVASCRIPT_DEBUGGER
        // As per spec: http://www.w3.org/TR/WebIDL/#idl-sequence
        // "Sequences must not be used as the type of an attribute, constant or exception field."
        // FIXME: this will lead to BUG console.profiles !== console.profiles as profile will always returns new array.
        readonly attribute ScriptProfile[] profiles;
        [Custom] void profile(in DOMString title);
        [Custom] void profileEnd(in DOMString title);
#endif

        void time(in [TreatNullAs=NullString, TreatUndefinedAs=NullString,Optional=DefaultIsUndefined] DOMString title);
        [CallWith=ScriptArguments|CallStack] void timeEnd(in [TreatNullAs=NullString, TreatUndefinedAs=NullString] DOMString title);
        [CallWith=ScriptArguments|CallStack] void timeStamp();
        [CallWith=ScriptArguments|CallStack] void group();
        [CallWith=ScriptArguments|CallStack] void groupCollapsed();
        void groupEnd();

        readonly attribute [V8CustomGetter] MemoryInfo memory;
    };

}
