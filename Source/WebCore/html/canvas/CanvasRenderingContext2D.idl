/*
 * Copyright (C) 2006 Apple Computer, Inc.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY APPLE COMPUTER, INC. ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE COMPUTER, INC. OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

module html {

    interface [
        InterfaceUUID=98fb48ae-7216-489c-862b-8e1217fc4443,
        ImplementationUUID=ab4f0781-152f-450e-9546-5b3987491a54
    ] CanvasRenderingContext2D : CanvasRenderingContext {

        void save();
        void restore();

        void scale(in [Optional=CallWithDefaultValue] float sx,
                   in [Optional=CallWithDefaultValue] float sy);
        void rotate(in [Optional=CallWithDefaultValue] float angle);
        void translate(in [Optional=CallWithDefaultValue] float tx,
                       in [Optional=CallWithDefaultValue] float ty);
        void transform(in [Optional=CallWithDefaultValue] float m11,
                       in [Optional=CallWithDefaultValue] float m12,
                       in [Optional=CallWithDefaultValue] float m21,
                       in [Optional=CallWithDefaultValue] float m22,
                       in [Optional=CallWithDefaultValue] float dx,
                       in [Optional=CallWithDefaultValue] float dy);
        void setTransform(in [Optional=CallWithDefaultValue] float m11,
                          in [Optional=CallWithDefaultValue] float m12,
                          in [Optional=CallWithDefaultValue] float m21,
                          in [Optional=CallWithDefaultValue] float m22,
                          in [Optional=CallWithDefaultValue] float dx,
                          in [Optional=CallWithDefaultValue] float dy);

        attribute float globalAlpha;
        attribute [ConvertNullToNullString] DOMString globalCompositeOperation;

        CanvasGradient createLinearGradient(in [Optional=CallWithDefaultValue] float x0,
                                            in [Optional=CallWithDefaultValue] float y0,
                                            in [Optional=CallWithDefaultValue] float x1,
                                            in [Optional=CallWithDefaultValue] float y1)
            raises (DOMException);
        CanvasGradient createRadialGradient(in [Optional=CallWithDefaultValue] float x0,
                                            in [Optional=CallWithDefaultValue] float y0,
                                            in [Optional=CallWithDefaultValue] float r0,
                                            in [Optional=CallWithDefaultValue] float x1,
                                            in [Optional=CallWithDefaultValue] float y1,
                                            in [Optional=CallWithDefaultValue] float r1)
            raises (DOMException);

        attribute float lineWidth;
        attribute [ConvertNullToNullString] DOMString lineCap;
        attribute [ConvertNullToNullString] DOMString lineJoin;
        attribute float miterLimit;

        attribute float shadowOffsetX;
        attribute float shadowOffsetY;
        attribute float shadowBlur;
        attribute [ConvertNullToNullString] DOMString shadowColor;

        // FIXME: These attributes should also be implemented for V8.
#if !(defined(V8_BINDING) && V8_BINDING)
        attribute [Custom] Array webkitLineDash;
        attribute float webkitLineDashOffset;
#endif

        void clearRect(in [Optional=CallWithDefaultValue] float x,
                       in [Optional=CallWithDefaultValue] float y,
                       in [Optional=CallWithDefaultValue] float width,
                       in [Optional=CallWithDefaultValue] float height);
        void fillRect(in [Optional=CallWithDefaultValue] float x,
                      in [Optional=CallWithDefaultValue] float y,
                      in [Optional=CallWithDefaultValue] float width,
                      in [Optional=CallWithDefaultValue] float height);

        void beginPath();
        void closePath();
        void moveTo(in [Optional=CallWithDefaultValue] float x,
                    in [Optional=CallWithDefaultValue] float y);
        void lineTo(in [Optional=CallWithDefaultValue] float x,
                    in [Optional=CallWithDefaultValue] float y);
        void quadraticCurveTo(in [Optional=CallWithDefaultValue] float cpx,
                              in [Optional=CallWithDefaultValue] float cpy,
                              in [Optional=CallWithDefaultValue] float x,
                              in [Optional=CallWithDefaultValue] float y);
        void bezierCurveTo(in [Optional=CallWithDefaultValue] float cp1x,
                           in [Optional=CallWithDefaultValue] float cp1y,
                           in [Optional=CallWithDefaultValue] float cp2x,
                           in [Optional=CallWithDefaultValue] float cp2y,
                           in [Optional=CallWithDefaultValue] float x,
                           in [Optional=CallWithDefaultValue] float y);
        void arcTo(in [Optional=CallWithDefaultValue] float x1,
                   in [Optional=CallWithDefaultValue] float y1,
                   in [Optional=CallWithDefaultValue] float x2,
                   in [Optional=CallWithDefaultValue] float y2,
                   in [Optional=CallWithDefaultValue] float radius)
            raises (DOMException);
        void rect(in [Optional=CallWithDefaultValue] float x,
                  in [Optional=CallWithDefaultValue] float y,
                  in [Optional=CallWithDefaultValue] float width,
                  in [Optional=CallWithDefaultValue] float height);
        void arc(in [Optional=CallWithDefaultValue] float x,
                 in [Optional=CallWithDefaultValue] float y,
                 in [Optional=CallWithDefaultValue] float radius,
                 in [Optional=CallWithDefaultValue] float startAngle,
                 in [Optional=CallWithDefaultValue] float endAngle,
                 in [Optional=CallWithDefaultValue] boolean anticlockwise)
            raises (DOMException);
        void fill();
        void stroke();
        void clip();
        boolean isPointInPath(in [Optional=CallWithDefaultValue] float x,
                              in [Optional=CallWithDefaultValue] float y);

        // text
        attribute DOMString font;
        attribute DOMString textAlign;
        attribute DOMString textBaseline;

        TextMetrics measureText(in [Optional=CallWithDefaultValue] DOMString text);

        // other

        void setAlpha(in [Optional=CallWithDefaultValue] float alpha);
        void setCompositeOperation(in [Optional=CallWithDefaultValue] DOMString compositeOperation);

#if !defined(LANGUAGE_CPP) || !LANGUAGE_CPP
        void setLineWidth(in [Optional=CallWithDefaultValue] float width);
        void setLineCap(in [Optional=CallWithDefaultValue] DOMString cap);
        void setLineJoin(in [Optional=CallWithDefaultValue] DOMString join);
        void setMiterLimit(in [Optional=CallWithDefaultValue] float limit);
#endif

        void clearShadow();

        void fillText(in DOMString text, in float x, in float y, in [Optional] float maxWidth);
        void strokeText(in DOMString text, in float x, in float y, in [Optional] float maxWidth);

        void setStrokeColor(in DOMString color, in [Optional] float alpha);
        void setStrokeColor(in float grayLevel, in [Optional] float alpha);
        void setStrokeColor(in float r, in float g, in float b, in float a);
        void setStrokeColor(in float c, in float m, in float y, in float k, in float a);

        void setFillColor(in DOMString color, in [Optional] float alpha);
        void setFillColor(in float grayLevel, in [Optional] float alpha);
        void setFillColor(in float r, in float g, in float b, in float a);
        void setFillColor(in float c, in float m, in float y, in float k, in float a);

        void strokeRect(in [Optional=CallWithDefaultValue] float x,
                        in [Optional=CallWithDefaultValue] float y,
                        in [Optional=CallWithDefaultValue] float width,
                        in [Optional=CallWithDefaultValue] float height,
                        in [Optional] float lineWidth);

        void drawImage(in HTMLImageElement image, in float x, in float y)
            raises (DOMException);
        void drawImage(in HTMLImageElement image, in float x, in float y, in float width, in float height)
            raises (DOMException);
        void drawImage(in HTMLImageElement image, in float sx, in float sy, in float sw, in float sh, in float dx, in float dy, in float dw, in float dh)
            raises (DOMException);
        void drawImage(in HTMLCanvasElement canvas, in float x, in float y)
            raises (DOMException);
        void drawImage(in HTMLCanvasElement canvas, in float x, in float y, in float width, in float height)
            raises (DOMException);
        void drawImage(in HTMLCanvasElement canvas, in float sx, in float sy, in float sw, in float sh, in float dx, in float dy, in float dw, in float dh)
            raises (DOMException);
#if defined(ENABLE_VIDEO) && ENABLE_VIDEO
        void drawImage(in HTMLVideoElement video, in float x, in float y)
            raises (DOMException);
        void drawImage(in HTMLVideoElement video, in float x, in float y, in float width, in float height)
            raises (DOMException);
        void drawImage(in HTMLVideoElement video, in float sx, in float sy, in float sw, in float sh, in float dx, in float dy, in float dw, in float dh)
            raises (DOMException);
#endif

        void drawImageFromRect(in HTMLImageElement image,
                               in [Optional] float sx, in [Optional] float sy, in [Optional] float sw, in [Optional] float sh,
                               in [Optional] float dx, in [Optional] float dy, in [Optional] float dw, in [Optional] float dh,
                               in [Optional] DOMString compositeOperation);

        void setShadow(in float width, in float height, in float blur, in [Optional] DOMString color, in [Optional] float alpha);
        void setShadow(in float width, in float height, in float blur, in float grayLevel, in [Optional] float alpha);
        void setShadow(in float width, in float height, in float blur, in float r, in float g, in float b, in float a);
        void setShadow(in float width, in float height, in float blur, in float c, in float m, in float y, in float k, in float a);

        void putImageData(in ImageData imagedata, in float dx, in float dy)
            raises(DOMException);
        void putImageData(in ImageData imagedata, in float dx, in float dy, in float dirtyX, in float dirtyY, in float dirtyWidth, in float dirtyHeight)
            raises(DOMException);

#if defined(V8_BINDING) && V8_BINDING
        CanvasPattern createPattern(in HTMLCanvasElement canvas, in [ConvertNullToNullString] DOMString repetitionType)
            raises (DOMException);
        CanvasPattern createPattern(in HTMLImageElement image, in [ConvertNullToNullString] DOMString repetitionType)
            raises (DOMException);
        ImageData createImageData(in ImageData imagedata)
            raises (DOMException);
        ImageData createImageData(in float sw, in float sh)
            raises (DOMException);
#else
        // FIXME: Remove 'else' once JSC supports overloads too.
        [Custom] void createPattern(/* 2 */);
        [Custom] ImageData createImageData(/* 3 */);
#endif // defined(V8_BINDING)

        attribute [Custom] custom strokeStyle;
        attribute [Custom] custom fillStyle;

        // pixel manipulation
        ImageData getImageData(in [Optional=CallWithDefaultValue] float sx, in [Optional=CallWithDefaultValue] float sy,
                               in [Optional=CallWithDefaultValue] float sw, in [Optional=CallWithDefaultValue] float sh)
            raises(DOMException);
    };

}

