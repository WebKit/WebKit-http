/*
 * Copyright (C) 2011 Google Inc.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY APPLE COMPUTER, INC. ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE COMPUTER, INC. OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
 */

module html {

    interface [
        Conditional=VIDEO_TRACK,
        EnabledAtRuntime=webkitVideoTrack,
        EventTarget
    ] TextTrack {
        readonly attribute DOMString kind;
        readonly attribute DOMString label;
        readonly attribute DOMString language;

        const unsigned short NONE = 0;
        const unsigned short LOADING = 1;
        const unsigned short LOADED = 2;
        // Reflect is used for TextTrack::ERROR because it conflicts with a windows define.
        const [Reflect=HTML_ERROR] unsigned short ERROR = 3;
        readonly attribute unsigned short readyState;

        const unsigned short DISABLED = 0;
        const unsigned short HIDDEN = 1;
        const unsigned short SHOWING = 2;
        attribute unsigned short mode
            setter raises (DOMException);

        readonly attribute TextTrackCueList cues;
        readonly attribute TextTrackCueList activeCues;
                 attribute EventListener oncuechange;

        void addCue(in TextTrackCue cue)
            raises (DOMException);
        void removeCue(in TextTrackCue cue)
            raises (DOMException);

        // EventTarget interface
        void addEventListener(in DOMString type, 
                              in EventListener listener, 
                              in [Optional] boolean useCapture);
        void removeEventListener(in DOMString type, 
                                 in EventListener listener, 
                                 in [Optional] boolean useCapture);
        boolean dispatchEvent(in Event evt)
            raises(EventException);
    };
}
