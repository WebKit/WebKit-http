/*
 * Copyright (C) 2006, 2007, 2011 Apple Inc. All rights reserved.
 * Copyright (C) 2006, 2007 Samuel Weinig <sam@webkit.org>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public License
 * along with this library; see the file COPYING.LIB.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 * Boston, MA 02110-1301, USA.
 */

module core {

    interface [
        JSCustomToJS,
        JSGenerateToNativeObject,
        JSInlineGetOwnPropertySlot
    ] Document : Node {

        // DOM Level 1 Core
        readonly attribute DocumentType doctype;
        readonly attribute DOMImplementation implementation;
        readonly attribute Element documentElement;

        [ReturnNewObject] Element createElement(in [TreatNullAs=NullString,Optional=TreatAsUndefined] DOMString tagName)
            raises (DOMException);
        DocumentFragment   createDocumentFragment();
        [ReturnNewObject] Text createTextNode(in [Optional=TreatAsUndefined] DOMString data);
        [ReturnNewObject] Comment createComment(in [Optional=TreatAsUndefined] DOMString data);
        [ReturnNewObject] CDATASection createCDATASection(in [Optional=TreatAsUndefined] DOMString data)
            raises(DOMException);
        [ObjCLegacyUnnamedParameters, ReturnNewObject] ProcessingInstruction createProcessingInstruction(in [Optional=TreatAsUndefined] DOMString target,
                                                                                     in [Optional=TreatAsUndefined] DOMString data)
            raises (DOMException);
        [ReturnNewObject] Attr createAttribute(in [Optional=TreatAsUndefined] DOMString name)
            raises (DOMException);
        [ReturnNewObject] EntityReference createEntityReference(in [Optional=TreatAsUndefined] DOMString name)
            raises(DOMException);
        NodeList           getElementsByTagName(in [Optional=TreatAsUndefined] DOMString tagname);

        // Introduced in DOM Level 2:

        [ObjCLegacyUnnamedParameters, ReturnNewObject] Node importNode(in [Optional=TreatAsUndefined] Node importedNode,
                                                   in [Optional] boolean deep)
            raises (DOMException);
        [ObjCLegacyUnnamedParameters, ReturnNewObject] Element createElementNS(in [TreatNullAs=NullString,Optional=TreatAsUndefined] DOMString namespaceURI,
                                                           in [TreatNullAs=NullString,Optional=TreatAsUndefined] DOMString qualifiedName)
            raises (DOMException);
        [ObjCLegacyUnnamedParameters, ReturnNewObject] Attr createAttributeNS(in [TreatNullAs=NullString,Optional=TreatAsUndefined] DOMString namespaceURI,
                                                          in [TreatNullAs=NullString,Optional=TreatAsUndefined] DOMString qualifiedName)
            raises (DOMException);
        [ObjCLegacyUnnamedParameters] NodeList getElementsByTagNameNS(in [TreatNullAs=NullString,Optional=TreatAsUndefined] DOMString namespaceURI,
                                                       in [Optional=TreatAsUndefined] DOMString localName);
        Element            getElementById(in [Optional=TreatAsUndefined] DOMString elementId);

        // DOM Level 3 Core

        readonly attribute [TreatReturnedNullStringTo=Null] DOMString inputEncoding;

        readonly attribute [TreatReturnedNullStringTo=Null] DOMString xmlEncoding;
                 attribute [TreatReturnedNullStringTo=Null, TreatNullAs=NullString] DOMString xmlVersion
                    setter raises (DOMException);
                 attribute boolean xmlStandalone
                    setter raises (DOMException);

        Node               adoptNode(in [Optional=TreatAsUndefined] Node source)
            raises (DOMException);

                 attribute [TreatReturnedNullStringTo=Null, TreatNullAs=NullString] DOMString documentURI;

        // DOM Level 2 Events (DocumentEvents interface)

        Event              createEvent(in [Optional=TreatAsUndefined] DOMString eventType)
            raises(DOMException);

        // DOM Level 2 Tranversal and Range (DocumentRange interface)

        Range              createRange();

        // DOM Level 2 Tranversal and Range (DocumentTraversal interface)

        [ObjCLegacyUnnamedParameters] NodeIterator createNodeIterator(in [Optional=TreatAsUndefined] Node root,
                                                       in [Optional=TreatAsUndefined] unsigned long whatToShow,
                                                       in [Optional=TreatAsUndefined] NodeFilter filter,
                                                       in [Optional=TreatAsUndefined] boolean expandEntityReferences)
            raises(DOMException);
        [ObjCLegacyUnnamedParameters] TreeWalker createTreeWalker(in [Optional=TreatAsUndefined] Node root,
                                                   in [Optional=TreatAsUndefined] unsigned long whatToShow,
                                                   in [Optional=TreatAsUndefined] NodeFilter filter,
                                                   in [Optional=TreatAsUndefined] boolean expandEntityReferences)
            raises(DOMException);

        // DOM Level 2 Abstract Views (DocumentView interface)

        readonly attribute DOMWindow defaultView;

        // DOM Level 2 Style (DocumentStyle interface)

        readonly attribute StyleSheetList styleSheets;

        // DOM Level 2 Style (DocumentCSS interface)

        [ObjCLegacyUnnamedParameters] CSSStyleDeclaration getOverrideStyle(in [Optional=TreatAsUndefined] Element element,
                                                            in [Optional=TreatAsUndefined] DOMString pseudoElement);

        // DOM Level 3 XPath (XPathEvaluator interface)
        [ObjCLegacyUnnamedParameters] XPathExpression createExpression(in [Optional=TreatAsUndefined] DOMString expression,
                                                        in [Optional=TreatAsUndefined] XPathNSResolver resolver)
            raises(DOMException);
        XPathNSResolver    createNSResolver(in Node nodeResolver);
        [ObjCLegacyUnnamedParameters, V8Custom] XPathResult evaluate(in [Optional=TreatAsUndefined] DOMString expression,
                                                      in [Optional=TreatAsUndefined] Node contextNode,
                                                      in [Optional=TreatAsUndefined] XPathNSResolver resolver,
                                                      in [Optional=TreatAsUndefined] unsigned short type,
                                                      in [Optional=TreatAsUndefined] XPathResult inResult)
            raises(DOMException);

        // Common extensions

        boolean            execCommand(in [Optional=TreatAsUndefined] DOMString command,
                                       in [Optional=TreatAsUndefined] boolean userInterface,
                                       in [TreatNullAs=NullString, TreatUndefinedAs=NullString,Optional=TreatAsUndefined] DOMString value);

#if defined(LANGUAGE_OBJECTIVE_C) && LANGUAGE_OBJECTIVE_C
        // FIXME: remove the these two versions once [Optional] is implemented for Objective-C.
        boolean            execCommand(in DOMString command,
                                       in boolean userInterface);
        boolean            execCommand(in DOMString command);
#endif

        boolean            queryCommandEnabled(in [Optional=TreatAsUndefined] DOMString command);
        boolean            queryCommandIndeterm(in [Optional=TreatAsUndefined] DOMString command);
        boolean            queryCommandState(in [Optional=TreatAsUndefined] DOMString command);
        boolean            queryCommandSupported(in [Optional=TreatAsUndefined] DOMString command);
        [TreatReturnedNullStringTo=False] DOMString queryCommandValue(in [Optional=TreatAsUndefined] DOMString command);

        // Moved down from HTMLDocument

                 attribute [TreatNullAs=NullString] DOMString title;
        readonly attribute DOMString referrer;
#if defined(LANGUAGE_JAVASCRIPT) && LANGUAGE_JAVASCRIPT
                 attribute [TreatNullAs=NullString] DOMString domain
                     setter raises (DOMException);
#else
        readonly attribute DOMString domain;
#endif
        readonly attribute DOMString URL;

                 attribute [TreatNullAs=NullString] DOMString cookie
                     setter raises (DOMException),
                     getter raises (DOMException);

        // FIXME: the DOM spec does NOT have this attribute
        // raising an exception.
                 attribute HTMLElement body
                     setter raises (DOMException);

        readonly attribute HTMLHeadElement head;
        readonly attribute HTMLCollection images;
        readonly attribute HTMLCollection applets;
        readonly attribute HTMLCollection links;
        readonly attribute HTMLCollection forms;
        readonly attribute HTMLCollection anchors;
        readonly attribute DOMString lastModified;

        NodeList getElementsByName(in [Optional=TreatAsUndefined] DOMString elementName);

#if defined(ENABLE_MICRODATA) && ENABLE_MICRODATA
        NodeList getItems(in [TreatNullAs=NullString, TreatUndefinedAs=NullString, Optional=TreatAsUndefined] DOMString typeNames);
#endif

#if defined(LANGUAGE_JAVASCRIPT) && LANGUAGE_JAVASCRIPT
                 attribute [Custom] Location location;
#endif

        // IE extensions

                 attribute [TreatReturnedNullStringTo=Undefined, TreatNullAs=NullString] DOMString charset;
        readonly attribute [TreatReturnedNullStringTo=Undefined] DOMString defaultCharset;
        readonly attribute [TreatReturnedNullStringTo=Undefined] DOMString readyState;

        Element            elementFromPoint(in [Optional=TreatAsUndefined] long x, 
                                            in [Optional=TreatAsUndefined] long y);
        Range              caretRangeFromPoint(in [Optional=TreatAsUndefined] long x, 
                                               in [Optional=TreatAsUndefined] long y);

        // Mozilla extensions
#if defined(LANGUAGE_JAVASCRIPT) && LANGUAGE_JAVASCRIPT
        DOMSelection       getSelection();
#endif
        readonly attribute [TreatReturnedNullStringTo=Null] DOMString characterSet;

        // WebKit extensions

        readonly attribute [TreatReturnedNullStringTo=Null] DOMString preferredStylesheetSet;
                 attribute [TreatReturnedNullStringTo=Null, TreatNullAs=NullString] DOMString selectedStylesheetSet;

#if !defined(LANGUAGE_JAVASCRIPT) || !LANGUAGE_JAVASCRIPT
        CSSStyleDeclaration createCSSStyleDeclaration();
#endif

#if defined(LANGUAGE_OBJECTIVE_C) && LANGUAGE_OBJECTIVE_C
        // DOM Level 2 Style Interface
        [ObjCLegacyUnnamedParameters, ObjCUseDefaultView] CSSStyleDeclaration getComputedStyle(in Element element,
                                                                      in DOMString pseudoElement);

        // WebKit extension
        // FIXME: remove the first version once [Optional] is implemented for Objective-C.
        [ObjCUseDefaultView] CSSRuleList getMatchedCSSRules(in Element element,
                                                  in DOMString pseudoElement);
        [ObjCUseDefaultView] CSSRuleList getMatchedCSSRules(in Element element,
                                                  in DOMString pseudoElement,
                                                  in [Optional] boolean authorOnly);
                                                  
#endif

#if !defined(LANGUAGE_CPP) || !LANGUAGE_CPP
#if !defined(LANGUAGE_OBJECTIVE_C) || !LANGUAGE_OBJECTIVE_C
        [V8Custom] DOMObject getCSSCanvasContext(in DOMString contextId, in DOMString name, in long width, in long height);
#endif
#endif

        // HTML 5
        NodeList getElementsByClassName(in [Optional=TreatAsUndefined] DOMString tagname);

        readonly attribute DOMString compatMode;

        // NodeSelector - Selector API
        Element querySelector(in DOMString selectors)
            raises(DOMException);
        NodeList querySelectorAll(in DOMString selectors)
            raises(DOMException);

#if defined(ENABLE_FULLSCREEN_API) && ENABLE_FULLSCREEN_API
        readonly attribute [V8EnabledAtRuntime] boolean webkitIsFullScreen;
        readonly attribute [V8EnabledAtRuntime] boolean webkitFullScreenKeyboardInputAllowed;
        readonly attribute [V8EnabledAtRuntime] Element webkitCurrentFullScreenElement;
        [V8EnabledAtRuntime] void webkitCancelFullScreen();
#endif

        WebKitNamedFlow webkitGetFlowByName(in DOMString name);

#if !defined(LANGUAGE_OBJECTIVE_C) || !LANGUAGE_OBJECTIVE_C
        // Event handler DOM attributes
        attribute [NotEnumerable] EventListener onabort;
        attribute [NotEnumerable] EventListener onblur;
        attribute [NotEnumerable] EventListener onchange;
        attribute [NotEnumerable] EventListener onclick;
        attribute [NotEnumerable] EventListener oncontextmenu;
        attribute [NotEnumerable] EventListener ondblclick;
        attribute [NotEnumerable] EventListener ondrag;
        attribute [NotEnumerable] EventListener ondragend;
        attribute [NotEnumerable] EventListener ondragenter;
        attribute [NotEnumerable] EventListener ondragleave;
        attribute [NotEnumerable] EventListener ondragover;
        attribute [NotEnumerable] EventListener ondragstart;
        attribute [NotEnumerable] EventListener ondrop;
        attribute [NotEnumerable] EventListener onerror;
        attribute [NotEnumerable] EventListener onfocus;
        attribute [NotEnumerable] EventListener oninput;
        attribute [NotEnumerable] EventListener oninvalid;
        attribute [NotEnumerable] EventListener onkeydown;
        attribute [NotEnumerable] EventListener onkeypress;
        attribute [NotEnumerable] EventListener onkeyup;
        attribute [NotEnumerable] EventListener onload;
        attribute [NotEnumerable] EventListener onmousedown;
        attribute [NotEnumerable] EventListener onmousemove;
        attribute [NotEnumerable] EventListener onmouseout;
        attribute [NotEnumerable] EventListener onmouseover;
        attribute [NotEnumerable] EventListener onmouseup;
        attribute [NotEnumerable] EventListener onmousewheel;
        attribute [NotEnumerable] EventListener onreadystatechange;
        attribute [NotEnumerable] EventListener onscroll;
        attribute [NotEnumerable] EventListener onselect;
        attribute [NotEnumerable] EventListener onsubmit;

        // attribute [NotEnumerable] EventListener oncanplay;
        // attribute [NotEnumerable] EventListener oncanplaythrough;
        // attribute [NotEnumerable] EventListener ondurationchange;
        // attribute [NotEnumerable] EventListener onemptied;
        // attribute [NotEnumerable] EventListener onended;
        // attribute [NotEnumerable] EventListener onloadeddata;
        // attribute [NotEnumerable] EventListener onloadedmetadata;
        // attribute [NotEnumerable] EventListener onloadstart;
        // attribute [NotEnumerable] EventListener onpause;
        // attribute [NotEnumerable] EventListener onplay;
        // attribute [NotEnumerable] EventListener onplaying;
        // attribute [NotEnumerable] EventListener onprogress;
        // attribute [NotEnumerable] EventListener onratechange;
        // attribute [NotEnumerable] EventListener onseeked;
        // attribute [NotEnumerable] EventListener onseeking;
        // attribute [NotEnumerable] EventListener onshow;
        // attribute [NotEnumerable] EventListener onstalled;
        // attribute [NotEnumerable] EventListener onsuspend;
        // attribute [NotEnumerable] EventListener ontimeupdate;
        // attribute [NotEnumerable] EventListener onvolumechange;
        // attribute [NotEnumerable] EventListener onwaiting;

        // WebKit extensions
        attribute [NotEnumerable] EventListener onbeforecut;
        attribute [NotEnumerable] EventListener oncut;
        attribute [NotEnumerable] EventListener onbeforecopy;
        attribute [NotEnumerable] EventListener oncopy;
        attribute [NotEnumerable] EventListener onbeforepaste;
        attribute [NotEnumerable] EventListener onpaste;
        attribute [NotEnumerable] EventListener onreset;
        attribute [NotEnumerable] EventListener onsearch;
        attribute [NotEnumerable] EventListener onselectstart;
        attribute [NotEnumerable] EventListener onselectionchange;
        attribute [NotEnumerable,Conditional=TOUCH_EVENTS,V8EnabledAtRuntime] EventListener ontouchstart;
        attribute [NotEnumerable,Conditional=TOUCH_EVENTS,V8EnabledAtRuntime] EventListener ontouchmove;
        attribute [NotEnumerable,Conditional=TOUCH_EVENTS,V8EnabledAtRuntime] EventListener ontouchend;
        attribute [NotEnumerable,Conditional=TOUCH_EVENTS,V8EnabledAtRuntime] EventListener ontouchcancel;
        attribute [NotEnumerable, Conditional=FULLSCREEN_API] EventListener onwebkitfullscreenchange;
        attribute [NotEnumerable, Conditional=FULLSCREEN_API] EventListener onwebkitfullscreenerror;
#endif

#if defined(ENABLE_TOUCH_EVENTS) && ENABLE_TOUCH_EVENTS
        [ReturnNewObject, V8EnabledAtRuntime] Touch createTouch(in [Optional=TreatAsUndefined] DOMWindow window,
                                                         in [Optional=TreatAsUndefined] EventTarget target,
                                                         in [Optional=TreatAsUndefined] long identifier,
                                                         in [Optional=TreatAsUndefined] long pageX,
                                                         in [Optional=TreatAsUndefined] long pageY,
                                                         in [Optional=TreatAsUndefined] long screenX,
                                                         in [Optional=TreatAsUndefined] long screenY,
                                                         in [Optional=TreatAsUndefined] long webkitRadiusX,
                                                         in [Optional=TreatAsUndefined] long webkitRadiusY,
                                                         in [Optional=TreatAsUndefined] float webkitRotationAngle,
                                                         in [Optional=TreatAsUndefined] float webkitForce)
            raises (DOMException);
        [ReturnNewObject, V8EnabledAtRuntime, Custom] TouchList createTouchList()
            raises (DOMException);
#endif

#if defined(LANGUAGE_CPP) && LANGUAGE_CPP
        // Extra WebCore methods exposed to allow compile-time casting in C++
        boolean isHTMLDocument();
#endif

        // Page visibility API.
        readonly attribute [Conditional=PAGE_VISIBILITY_API] DOMString webkitVisibilityState;
        readonly attribute [Conditional=PAGE_VISIBILITY_API] boolean webkitHidden;

    };

}
