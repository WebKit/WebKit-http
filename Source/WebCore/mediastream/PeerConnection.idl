/*
 * Copyright (C) 2011 Google Inc. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1.  Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 * 2.  Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

module p2p {

    interface [
        Conditional=MEDIA_STREAM,
        ActiveDOMObject,
        ConstructorParameters=2,
        Constructor(in DOMString serverConfiguration, in [Callback=FunctionOnly] SignalingCallback signalingCallback),
        CallWith=ScriptExecutionContext,
        JSCustomConstructor,
        EventTarget
    ] PeerConnection {
        void processSignalingMessage(in DOMString message)
            raises(DOMException);

        const unsigned short NEW = 0;
        const unsigned short NEGOTIATING = 1;
        const unsigned short ACTIVE = 2;
        const unsigned short CLOSED = 3;
        readonly attribute unsigned short readyState;

        void send(in DOMString text)
            raises(DOMException);
        [StrictTypeChecking] void addStream(in MediaStream stream)
            raises(DOMException);
        [StrictTypeChecking] void removeStream(in MediaStream stream)
            raises(DOMException);

        readonly attribute MediaStreamList localStreams;
        readonly attribute MediaStreamList remoteStreams;

        void close()
            raises(DOMException);

        attribute EventListener onconnecting;
        attribute EventListener onopen;
        attribute EventListener onmessage;
        attribute EventListener onstatechange;
        attribute EventListener onaddstream;
        attribute EventListener onremovestream;

        // EventTarget interface
        void addEventListener(in DOMString type,
                              in EventListener listener,
                              in [Optional] boolean useCapture);
        void removeEventListener(in DOMString type,
                                 in EventListener listener,
                                 in [Optional] boolean useCapture);
        boolean dispatchEvent(in Event event)
            raises(EventException);
    };

}
