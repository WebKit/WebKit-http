/*
 * Copyright (C) 2006 Apple Inc. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY APPLE INC. ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE INC. OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
 */

module svg {

    interface [
        Conditional=SVG
    ] SVGTextContentElement : SVGElement,
                                                        SVGTests,
                                                        SVGLangSpace,
                                                        SVGExternalResourcesRequired,
                                                        SVGStylable {
        // lengthAdjust Types
        const unsigned short LENGTHADJUST_UNKNOWN          = 0;
        const unsigned short LENGTHADJUST_SPACING          = 1;
        const unsigned short LENGTHADJUST_SPACINGANDGLYPHS = 2;

        readonly attribute SVGAnimatedLength      textLength;
        readonly attribute SVGAnimatedEnumeration lengthAdjust;

        long getNumberOfChars();
        float getComputedTextLength();
        float getSubStringLength(in [Optional=DefaultIsUndefined,IsIndex] unsigned long offset, 
                                 in [Optional=DefaultIsUndefined,IsIndex] unsigned long length)
            raises(DOMException);
        SVGPoint getStartPositionOfChar(in [Optional=DefaultIsUndefined,IsIndex] unsigned long offset)
            raises(DOMException);
        SVGPoint getEndPositionOfChar(in [Optional=DefaultIsUndefined,IsIndex] unsigned long offset)
            raises(DOMException);
        SVGRect getExtentOfChar(in [Optional=DefaultIsUndefined,IsIndex] unsigned long offset)
            raises(DOMException);
        float getRotationOfChar(in [Optional=DefaultIsUndefined,IsIndex] unsigned long offset)
            raises(DOMException);
        long getCharNumAtPosition(in [Optional=DefaultIsUndefined] SVGPoint point);
        void selectSubString(in [Optional=DefaultIsUndefined,IsIndex] unsigned long offset, 
                             in [Optional=DefaultIsUndefined,IsIndex] unsigned long length)
            raises(DOMException);
    };

}
