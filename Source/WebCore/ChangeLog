2012-12-17  Levi Weintraub  <leviw@chromium.org>

        Add support for tracking hit test rectangles to enable fast event rejection in the compositor
        https://bugs.webkit.org/show_bug.cgi?id=103914

        Reviewed by James Robinson.

        Adding support for tracking hit test target regions for the purpose of performing initial hit testing
        in the compositor to avoid blocking scrolling on the main thread while waiting to hit test events that
        aren't occuring in regions with handlers. This is initially being done to avoid having to go to the main
        thread when scrolling by flicking on touch devices when the flick occurs outside a tracked touch event
        region. This patch includes the implementation to turn this on in Chromium.

        To accomplish this goal, Document will now keep a counted hash set of nodes with touch event handlers
        instead of only an unsigned integer of the total count. ScrollingCoordinator then updates the compositor
        when new touch event handlers are registered or removed, or after layout much like how
        nonFastScrollableRegions are currently tracked.

        This implementation will not properly update the hit test rects when the renderers are inside a sub-
        tree that scrolls.

        This change was initially rolled out due to stale Node pointers in Document's touchEventTargets. This
        patch adds a callback to remove the Node from that structure to Node's destructor. This is covered
        by the touch-target-removed-crash.html test case which is also added.

        Test: platform/chromium/fast/events/touch/compositor-touch-hit-rects.html
              platform/chromium/fast/events/touch/touch-target-removed-crash.html

        * dom/Document.cpp:
        (WebCore::Document::Document): Added a HashCountedSet of touch target nodes. Note: DOMWindow targets
        are stored as the Document they point to.
        (WebCore::Document::didAddTouchEventHandler): Changed to keep track of the handler instead of a count, and
        to update the ScrollingCoordinator with the change.
        (WebCore::Document::didRemoveTouchEventHandler): Ditto.
        * dom/Document.h:
        (WebCore::Document::hasTouchEventHandlers): It's no longer O(1) to get the count of touch handlers, so
        expose whether there are any or not.
        (WebCore::Document::touchEventTargets):
        * dom/Node.cpp:
        (WebCore::Node::didMoveToNewDocument):
        (WebCore::tryAddEventListener):
        (WebCore::tryRemoveEventListener):
        * history/CachedFrame.cpp:
        (WebCore::CachedFrameBase::restore):
        * html/HTMLInputElement.cpp:
        (WebCore::HTMLInputElement::~HTMLInputElement):
        (WebCore::HTMLInputElement::updateType):
        * page/DOMWindow.cpp:
        (WebCore::DOMWindow::addEventListener): Add the Document to the touch target set instead of DOMWindow.
        (WebCore::DOMWindow::removeEventListener):
        * page/EventHandler.cpp:
        (WebCore::EventHandler::handleTouchEvent):
        * page/Frame.cpp:
        (WebCore::Frame::setDocument):
        * page/scrolling/ScrollingCoordinator.cpp:
        (WebCore::ScrollingCoordinator::computeAbsoluteTouchEventTargetRects): Walk the renderers for event handler
        nodes and generate the absolute hit testing rects.
        * page/scrolling/ScrollingCoordinator.h:
        (WebCore::ScrollingCoordinator::setTouchEventTargetRectsChanged): Hook to pass along the hit test rects to
        the scrolling tree/compositor.
        (ScrollingCoordinator):
        * page/scrolling/chromium/ScrollingCoordinatorChromium.cpp:
        (WebCore::ScrollingCoordinatorChromium::frameViewLayoutUpdated):
        (WebCore::ScrollingCoordinatorChromium::setTouchEventTargetRectsChanged):
        (WebCore::ScrollingCoordinatorChromium::setNonFastScrollableRegion):
        (WebCore::ScrollingCoordinatorChromium::setTouchEventTargetRects):
        * page/scrolling/chromium/ScrollingCoordinatorChromium.h:
        (ScrollingCoordinatorChromium):
        * testing/Internals.cpp:
        (WebCore::Internals::touchEventHandlerCount): Changed to do the work to calculate the actual count since
        it's no longer stored as an int in Document.
        (WebCore::Internals::touchEventTargetClientRects):
        * testing/Internals.h:
        (Internals):
        * testing/Internals.idl:

2012-12-17  Avi Drissman  <avi@chromium.org>

        Dragging a .jpg to Finder saves it as .jpeg
        https://bugs.webkit.org/show_bug.cgi?id=105140
        https://code.google.com/p/chromium/issues/detail?id=35811

        Reviewed by Tony Chang.

        If the filename's extension is already valid for the MIME type, we don't
        need to rewrite it to the preferred extension.

        No layout tests because it involves dragging items to the desktop.

        * platform/chromium/ClipboardChromium.cpp:
        (WebCore::writeImageToDataObject):

2012-12-17  Bem Jones-Bey  <bjonesbe@adobe.com>

        [CSS Exclusions] shape-outside on floats for rectangle shapes height/width
        https://bugs.webkit.org/show_bug.cgi?id=100398

        Reviewed by Julien Chaffraix.

        Implement shape outside for floats changing only the height and width
        as a simple starting point.

        This implementation changes floats to use the bounding box of the
        shape outside instead of the margin box for layout. The content box of
        the float is unchanged. This patch does not support positioning the
        shape outside box, so the x and y parameters are currently ignored in
        the specified shape. This will be fixed in a patch for bug 100399.

        Tests: fast/exclusions/shape-outside-floats/shape-outside-floats-margin-is-ignored.html
               fast/exclusions/shape-outside-floats/shape-outside-floats-simple-rectangle-horizontal-multiple.html
               fast/exclusions/shape-outside-floats/shape-outside-floats-simple-rectangle-percentage.html
               fast/exclusions/shape-outside-floats/shape-outside-floats-simple-rectangle.html

        * CMakeLists.txt: Add ExclusionShapeOutsideInfo.{cpp,h}.
        * GNUmakefile.list.am: Add ExclusionShapeOutsideInfo.{cpp,h}.
        * Target.pri: Add ExclusionShapeOutsideInfo.{cpp,h}.
        * WebCore.gypi: Add ExclusionShapeOutsideInfo.{cpp,h}.
        * WebCore.vcproj/WebCore.vcproj: Add ExclusionShapeOutsideInfo.{cpp,h}.
        * WebCore.xcodeproj/project.pbxproj: Add ExclusionShapeOutsideInfo.{cpp,h}.
        * rendering/ExclusionShapeOutsideInfo.cpp: Added. Associates the
            ExclusionShape object for shape outside with a RenderBox. Analagous to
            ExclusionShapeInsideInfo.
        (WebCore::exclusionShapeOutsideInfoMap):
        (WebCore::ExclusionShapeOutsideInfo::ExclusionShapeOutsideInfo):
        (WebCore::ExclusionShapeOutsideInfo::~ExclusionShapeOutsideInfo):
        (WebCore::ExclusionShapeOutsideInfo::ensureInfoForRenderBox):
        (WebCore::ExclusionShapeOutsideInfo::infoForRenderBox):
        (WebCore::ExclusionShapeOutsideInfo::isInfoEnabledForRenderBox):
        (WebCore::ExclusionShapeOutsideInfo::removeInfoForRenderBox):
        (WebCore::ExclusionShapeOutsideInfo::computedShape):
        * rendering/ExclusionShapeOutsideInfo.h: Added. Associates the
            ExclusionShape object for shape outside with a RenderBox. Analagous to
            ExclusionShapeInsideInfo.
        (ExclusionShapeOutsideInfo):
        (WebCore::ExclusionShapeOutsideInfo::create):
        (WebCore::ExclusionShapeOutsideInfo::shapeLogicalLeft):
        (WebCore::ExclusionShapeOutsideInfo::shapeLogicalRight):
        (WebCore::ExclusionShapeOutsideInfo::shapeLogicalTop):
        (WebCore::ExclusionShapeOutsideInfo::shapeLogicalBottom):
        (WebCore::ExclusionShapeOutsideInfo::shapeLogicalWidth):
        (WebCore::ExclusionShapeOutsideInfo::shapeLogicalHeight):
        (WebCore::ExclusionShapeOutsideInfo::setShapeSize):
        (WebCore::ExclusionShapeOutsideInfo::dirtyShapeSize):
        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::insertFloatingObject): Use the shape outside's bounding box to set the width that is
            used for inline layout for the float and it's siblings.
        (WebCore::RenderBlock::positionNewFloats): Use the shape outside's bounding box to set the height that
            is used for inline layout for the float and it's siblings. Ignore margins when positioning if the float
            has shape outside, per the exclusions spec. 
        * rendering/RenderBox.cpp:
        (WebCore::RenderBox::willBeDestroyed): Clean up associated ExclusionShape.
        (WebCore::RenderBox::styleDidChange): Handle style change for shape outside.
        (WebCore::RenderBox::updateExclusionShapeOutsideInfoAfterStyleChange): Handle style change for shape outside.
        * rendering/RenderBox.h:
        (WebCore::RenderBox::exclusionShapeOutsideInfo): Get the ExclusionShapeOutsideInfo associated with this
            RenderBox.

2012-12-17  John J. Barton  <johnjbarton@chromium.org>

        Web Inspector: Search by selection
        https://bugs.webkit.org/show_bug.cgi?id=104970

        Reviewed by Vsevolod Vlasov.

        Upon activation of the search control, conditionally set input.value to window.getSelection().
        For both single file (SearchController) and multifile (AdvancedSearchController).

        Test: inspector/editor/text-editor-selection-to-search.html

        * inspector/front-end/AdvancedSearchController.js:
        (WebInspector.AdvancedSearchController.prototype.show):
        (WebInspector.SearchView.prototype.syncToSelection):
        * inspector/front-end/SearchController.js:
        (WebInspector.SearchController.prototype.showSearchField):

2012-12-17  Eduardo Lima Mitev  <elima@igalia.com>

        [GStreamer] Use gst_element_link_pads_full() with CHECK_NOTHING for speed and sanity
        https://bugs.webkit.org/show_bug.cgi?id=105181

        Reviewed by Philippe Normand.

        Replace some calls to gst_pad_link() on request pads, by
        gst_element_link_pads_full() with CHECK_NOTHING flag, removing
        unnecessary pad compatibility checks and simplifying code.

        * platform/audio/gstreamer/WebKitWebAudioSourceGStreamer.cpp:
        (webKitWebAudioSrcConstructed): Links audioconvert source with a
        requested interleave sink using gst_element_link_pads_full().
        * platform/graphics/gstreamer/MediaPlayerPrivateGStreamer.cpp: Links a
        requested source pad from videoTee with the queue sink.

2012-12-17  Emil A Eklund  <eae@chromium.org>

        Clamp values in LayoutUnit::operator/ when SATURATED_LAYOUT_ARITHMETIC is enabled
        https://bugs.webkit.org/show_bug.cgi?id=104955

        Reviewed by Julien Chaffraix.

        LayoutUnit::operator/ currently does not clamp values and
        instead overflows when given a value greater than INT_MAX or
        less than INT_MIN. 

        Test: TestWebKitAPI/Tests/WebCore/LayoutUnit.cpp

        * platform/LayoutUnit.h:
        (WebCore::operator/):
        Clamp value if SATURATED_LAYOUT_ARITHMETIC is enabled.

2012-12-17  Simon Fraser  <simon.fraser@apple.com>

        Don't allow edge TileCache tiles to be larger than necessary
        https://bugs.webkit.org/show_bug.cgi?id=105195

        Reviewed by Anders Carlsson.

        The TileCache would allow edge tiles to be larger than the required size, with the assumption
        that the extra space would never be visible. However, for content tiled layers, it can be,
        and it doesn't get correctly cleared. So always keep the edge tiles at the specified size.

        * platform/graphics/ca/mac/TileCache.mm:
        (WebCore::TileCache::revalidateTiles):

2012-12-17  Bem Jones-Bey  <bjonesbe@adobe.com>

        [CSS Exclusions] Floats should respect shape-inside on exclusions
        https://bugs.webkit.org/show_bug.cgi?id=89261

        Reviewed by David Hyatt.

        Position floats properly with respect to an exclusion shape. Note that
        this will not attempt to position floats in a polygon that has
        multiple segments. In the multiple segment case, the floats will be
        positioned as if the exclusion did not exist.

        Updated an existing test case to test for this.
        Test: fast/exclusions/shape-inside/shape-inside-floats-simple.html

        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::computeLogicalLocationForFloat): Adjust the
        right and left offsets to take into account the right and left offset
        contributed by the exclusion shape.

2012-12-17  Antoine Quint  <graouts@apple.com>

        GraphicsLayer's repaint count should update even when debugging option to show it is off
        https://bugs.webkit.org/show_bug.cgi?id=105178

        Reviewed by Simon Fraser.

        Update the repain count even if the debug option to show them is turned off.
        This allows the count to be accurate in between toggles of the debug option
        and to allow the InspectorLayerTreeAgent to get accurate results any time
        the layer tree is requested (see webkit.org/b/105024).

        * platform/graphics/mac/WebLayer.mm:
        (drawLayerContents):

2012-12-17  Hans Muller  <hmuller@adobe.com>

        [CSS Exclusions] Add helper functions for converting floats to LayoutUnits
        https://bugs.webkit.org/show_bug.cgi?id=103450

        Reviewed by Dirk Schulze.

        When a float logicalTop value is converted to a LayoutUnit it's necessary to
        use LayoutUnit::fromFloatCeil() to ensure that we're snapping to a value that's
        inside the ExclusionShape.  Similarly, to convert a logicalBottom value from
        float to LayoutUnit we use LayoutUnit::fromFloatFloor().  Added a pair of private
        ExlcusionShapeInsideInfo methods that do the conversions and refactored existing
        code to use them.

        This is just a cleanup.  No new tests are needed, the existing tests cover
        these changes.

        * rendering/ExclusionShapeInsideInfo.cpp:
        (WebCore::ExclusionShapeInsideInfo::adjustLogicalLineTop): Use the new floatLogicalTopToLayoutUnit() method.
        * rendering/ExclusionShapeInsideInfo.h:
        (WebCore::ExclusionShapeInsideInfo::shapeLogicalTop): Use the new floatLogicalTopToLayoutUnit() method.
        (WebCore::ExclusionShapeInsideInfo::shapeLogicalBottom): Use the new floatLogicalBottomToLayoutUnit() method.
        (ExclusionShapeInsideInfo):
        (WebCore::ExclusionShapeInsideInfo::floatLogicalTopToLayoutUnit): Convert a float to a LayoutUnit with LayoutUnit::fromFloatCeil().
        (WebCore::ExclusionShapeInsideInfo::floatLogicalBottomToLayoutUnit): Convert a float to a LayoutUnit with LayoutUnit::fromFloatFloor().

2012-12-17  Antoine Quint  <graouts@apple.com>

        Web Inspector: Provide the paint count of layers through the LayerTreeAgent
        https://bugs.webkit.org/show_bug.cgi?id=105024

        Reviewed by Pavel Feldman.

        We add a new optional .paintCount property to the Layer object, passing through the
        relevant information from GraphicsLayer.

        * inspector/Inspector.json:
        * inspector/InspectorLayerTreeAgent.cpp:
        (WebCore::InspectorLayerTreeAgent::buildObjectForLayer):

2012-12-17  Pavel Feldman  <pfeldman@chromium.org>

        Web Inspector: [chromium] make toolbar render with Mountain Lion-friendly colors
        https://bugs.webkit.org/show_bug.cgi?id=105177

        Reviewed by Vsevolod Vlasov.

        * inspector/front-end/UIUtils.js:
        (WebInspector.platformFlavor):
        * inspector/front-end/inspector.css:
        (#toolbar):
        (body.dock-to-bottom #toolbar):
        (.toolbar-item):

2012-12-17  Andreas Kling  <akling@apple.com>

        Attribute: Remove unused constructor and isNull().
        <http://webkit.org/b/105179>

        Reviewed by Antti Koivisto.

        Removed the Attribute constructor that takes a localName rather than a full QualifiedName as that was never used.
        Also removed Attribute::isNull(), since that was only called in one place where isNull() will never be true.

        * dom/Attribute.h:
        * html/HTMLIFrameElement.cpp:
        (WebCore::HTMLIFrameElement::collectStyleForPresentationAttribute):

2012-12-17  Anthony Scian  <ascian@rim.com>

        [Blackberry] Static code analysis warning fixes
        https://bugs.webkit.org/show_bug.cgi?id=105129

        Reviewed by Rob Buis.

        - alloca can return NULL, recoded to just use a temp var

        * plugins/blackberry/PluginViewBlackBerry.cpp:
        (WebCore::PluginView::updateBuffer):

2012-12-17  Eugene Klyuchnikov  <eustas@chromium.org>

        Web Inspector: Make popover content accessible for clicks.
        https://bugs.webkit.org/show_bug.cgi?id=105167

        Reviewed by Vsevolod Vlasov.

        Currently it is very hard to move mouse pointer inside of popover area.
        The only maneuver is to precisely jerk the mouse in direction of popover.

        This path makes anchor and popover "active" areas overlap, so it becomes
        possible to smoothly move mouse to popover interior.

        * inspector/front-end/Popover.js:
        (WebInspector.Popover.prototype._innerShow): Make popover "outer" border
        an be "active" area.
        * inspector/front-end/popover.css: Allow popover "outer" border receive
        mouse events.

2012-12-17  Andrey Kosyakov  <caseq@chromium.org>

        Web Inspector: Persist Audit selections across sessions
        https://bugs.webkit.org/show_bug.cgi?id=103944

        Reviewed by Alexander Pavlov.

        Make selected audit categories a persistent setting, to simplify life for those
        repeatedly running same set of categories.

        * inspector/front-end/AuditLauncherView.js:
        (WebInspector.AuditLauncherView):
        (WebInspector.AuditLauncherView.prototype.addCategory.get var):
        (WebInspector.AuditLauncherView.prototype.addCategory):
        (WebInspector.AuditLauncherView.prototype._selectAllClicked):
        (WebInspector.AuditLauncherView.prototype._categoryClicked):
        (WebInspector.AuditLauncherView.prototype._createCategoryElement):

2012-12-17  Zeno Albisser  <zeno@webkit.org>

        [Texmap] Drawing of ARB textures broken after r137498.
        https://bugs.webkit.org/show_bug.cgi?id=105165

        Disable antialiasing for ARB textures after unifying
        code paths. We are currently missing a fragment shader
        to do antialiasing with ARB textures.

        Reviewed by Kenneth Rohde Christiansen.

        * platform/graphics/texmap/TextureMapperGL.cpp:
        (WebCore::TextureMapperGL::drawTexture):

2012-12-17  Eugene Klyuchnikov  <eustas@chromium.org>

        Web Inspector: Popup flickers when cursor moves between elements with same anchor.
        https://bugs.webkit.org/show_bug.cgi?id=104992

        Reviewed by Pavel Feldman.

        Popup disappears and then appears again when mouse pointer traverses
        between sub-elements of anchor element.

        * inspector/front-end/Popover.js: Split method "_mouseOut".
        (WebInspector.PopoverHelper.prototype._popoverMouseOut):
        Handler for Popover.
        (WebInspector.PopoverHelper.prototype._mouseOut):
        Handler for PopoverHelper.

2012-12-12  Andrey Kosyakov  <caseq@chromium.org>

        [Chromium] Remove support for TRACE_EVENT_IF_LONGER_THANx macros
        https://bugs.webkit.org/show_bug.cgi?id=104784

        Reviewed by Pavel Feldman.

        - removed TRACE_EVENT_IF_LONGER_THANx macros;
        - changed addTraceEvent() to return void, as we no longer need the index of added event.

        * platform/EventTracer.h:
        (EventTracer):
        * platform/chromium/EventTracerChromium.cpp:
        (WebCore::EventTracer::addTraceEvent):
        * platform/chromium/TraceEvent.h:
        (TraceEvent):
        (WebCore::TraceEvent::addTraceEvent):
        (WebCore::TraceEvent::TraceEndOnScopeClose::addEventIfEnabled):
        (Data):

2012-12-17  Kentaro Hara  <haraken@chromium.org>

        Unreviewed, rolling out r136794.
        http://trac.webkit.org/changeset/136794
        https://bugs.webkit.org/show_bug.cgi?id=104203

        The GC change can leak memory

        * bindings/v8/V8GCController.cpp:
        (WebCore):
        (WebCore::addImplicitReferencesForNodeWithEventListeners):

2012-12-17  Gabor Rapcsanyi  <rgabor@webkit.org>

        Reduce the code size of ARM SIMD in GraphicsContext3D
        https://bugs.webkit.org/show_bug.cgi?id=105086

        Reviewed by Zoltan Herczeg.

        Reduce the code size of ARM SIMD in GraphicsContext3D and change the ARM
        namespace to SIMD.

        * platform/graphics/GraphicsContext3D.cpp:
        (WebCore):
        * platform/graphics/cpu/arm/GraphicsContext3DNEON.h:
        (WebCore::SIMD::unpackOneRowOfRGBA4444ToRGBA8):
        (WebCore::SIMD::packOneRowOfRGBA8ToUnsignedShort4444):
        (WebCore::SIMD::unpackOneRowOfRGBA5551ToRGBA8):
        (WebCore::SIMD::packOneRowOfRGBA8ToUnsignedShort5551):
        (WebCore::SIMD::unpackOneRowOfRGB565ToRGBA8):
        (WebCore::SIMD::packOneRowOfRGBA8ToUnsignedShort565):

2012-12-16  Andrey Kosyakov  <caseq@chromium.org>

        Web Inspector: frame bars on timeline do not react on hover and double click
        https://bugs.webkit.org/show_bug.cgi?id=105153

        Reviewed by Alexander Pavlov.

        Remove z-index: -100 from #timeline-grid-header, as it prevents mouse events from
        reaching frame strip. Use pointer-events: none on frame dividers instead.

        * inspector/front-end/timelinePanel.css:
        (.timeline .resources-event-divider.timeline-frame-divider):
        (#timeline-grid-header):

2012-12-16  Kentaro Hara  <haraken@chromium.org>

        [V8] Improve performance of a conversion from WebKit strings to V8 strings
        https://bugs.webkit.org/show_bug.cgi?id=105150

        Reviewed by Eric Seidel.

        V8 provides v8::Weak(isolate) and v8::Local::New(isolate, ...),
        which are much faster than v8::Weak() and v8::Local::New().
        By using the faster APIs, we can improve performance of a conversion
        from a WebKit string to a V8 string. This improves performance of
        div.id, div.className, ...and a lot of DOM attributes that return
        strings.

        [Dromaeo/dom-attr]
        120 runs/sec, 120 runs/sec, 118 runs/sec => 125 runs/sec, 123 run/sec, 125 runs/sec (+4.1%)

        [Dromaeo/dom-traverse]
        94 runs/sec, 94 runs/sec, 96 runs/sec => 107 runs/sec, 105 runs/sec, 107 runs/sec (+12.3%)

        [Bindings/id-getter]
        356 runs/sec, 356 runs/sec, 341 runs/sec => 423 runs/sec, 424 runs/sec, 424 runs/sec (+20.7%)

        No tests. No change in behavior.

        * bindings/v8/V8ValueCache.h:
        (WebCore::StringCache::v8ExternalString):

2012-12-16  Arvid Nilsson  <anilsson@rim.com>

        [BlackBerry] Adapt to new BlackBerry::Platform::TouchPoint API
        https://bugs.webkit.org/show_bug.cgi?id=105143
        RIM PR 171941

        Reviewed by Rob Buis.
        Internally reviewed by George Staikos.

        TouchPoint instances now provide document coordinates for the viewport
        and content position of the touch event. The pixel coordinates stored
        in the TouchPoint should no longer be needed in WebKit.

        Also adapt to new method names and encapsulation of TouchPoint data
        members.

        No change in behavior, no new tests.

        * platform/blackberry/PlatformTouchPointBlackBerry.cpp:
        (WebCore::PlatformTouchPoint::PlatformTouchPoint):

2012-12-16  Eugene Klyuchnikov  <eustas@chromium.org>

        Web Inspector: Fix JS compiler warning.
        https://bugs.webkit.org/show_bug.cgi?id=105032

        Reviewed by Pavel Feldman.

        Problem: event handler parameter has actial parameter
        type KeyboardEvent, but ".addEventListener" refuses listeners with such
        signature.

        Solution: explicitly upcast argument type.

        * inspector/front-end/ElementsTreeOutline.js: Update JsDocs.

2012-12-16  Tim Horton  <timothy_horton@apple.com>

        PDFPlugin: The "Open in Preview" HUD button should work
        https://bugs.webkit.org/show_bug.cgi?id=102448
        <rdar://problem/12695729>

        Reviewed by Alexey Proskuryakov.

        Expose createCanonicalUUIDString and UUID.h.

        * WebCore.exp.in:
        * WebCore.xcodeproj/project.pbxproj:

2012-12-16  Seokju Kwon  <seokju.kwon@gmail.com>

        Fix unused parameter compile warnings
        https://bugs.webkit.org/show_bug.cgi?id=105089

        Reviewed by Kentaro Hara.

        Use UNUSED_PARAM macro to fix build warning -Wunused-parameter.

        No new tests, no behavior change.

        * bindings/js/JSDOMWindowBase.cpp:
        (WebCore::JSDOMWindowBase::supportsProfiling):
        (WebCore::JSDOMWindowBase::supportsRichSourceInfo):

2012-12-16  Alexey Proskuryakov  <ap@apple.com>

        <rdar://problem/12886898> Bundle uploads don't work
        https://bugs.webkit.org/show_bug.cgi?id=105149

        Reviewed by Sam Weinig.

        * WebCore.exp.in: Exported FormData::removeGeneratedFilesIfNeeded().

        * platform/network/FormData.cpp:
        (WebCore::encodeElement):
        (WebCore::decodeElement):
        Encode generated file name for archive, too. I'm not entirely sure how this affects other uses
        of FormData serialization, but it seems logical that if we encode m_hasGeneratedFiles, we
        should also encode their names.

2012-12-16  Hayato Ito  <hayato@chromium.org>

        [Shadow DOM] Kill ShadowRoot constructor
        https://bugs.webkit.org/show_bug.cgi?id=102913

        Reviewed by Dimitri Glazkov.

        Re-landing r137408 which breaks browser tests on chromium. I've
        updated the browser tests on chromium so that they do not use
        WebKitShadowRoot constructor.

        No new tests. Updating existing layout tests.

        * dom/ShadowRoot.idl:
        * page/DOMWindow.idl:

2012-12-16  Jon Lee  <jonlee@apple.com>

        Allow built-in PDF plugin and plugin documents to auto-start
        https://bugs.webkit.org/show_bug.cgi?id=105000
        <rdar://problem/12633351>

        Reviewed by Sam Weinig.

        Plug-ins in plug-in documents that are in the main frame should always auto-start.

        Add a virtual function that returns whether the PluginViewBase should auto-start its plug-in.
        Add a callback that gives the HTML plug-in element an opportunity to set the display state
        based on the widget.

        * plugins/PluginViewBase.h:
        (WebCore::PluginViewBase::shouldAlwaysAutoStart): Added. By default returns false.

        * html/HTMLPlugInImageElement.cpp:
        (WebCore::HTMLPlugInImageElement::subframeLoaderWillCreatePlugIn): Renamed from
        subframeLoaderWillLoadPlugIn() for consistency. This call will also be made a little later
        in the subframe loader. Adds a check to see if the plug-in is inside a plug-in document
        of the main frame. If so, auto-start.
        (WebCore::HTMLPlugInImageElement::subframeLoaderDidCreatePlugIn): Given the widget created,
        check to see if it should always auto-start. If so, set the display state to Playing. Otherwise
        leave the display state alone.
        * html/HTMLPlugInImageElement.h:

        * loader/SubframeLoader.cpp:
        (WebCore::SubframeLoader::requestPlugin): Move the will-load-plug-in call into loadPlugin().
        (WebCore::SubframeLoader::loadPlugin): Immediately prior to the plug-in's creation, make the
        will-create call. If a plug-in was made, make the did-create call. The did-create call should
        be made before setWidget() since that might initialize the plug-in, which could take the display
        state into account if being initialized synchronously.

2012-12-16  Huang Dongsung  <luxtella@company100.net>

        [TexMap] Perform the layer-tree traversal in GraphicsLayerTextureMapper.
        https://bugs.webkit.org/show_bug.cgi?id=103366

        Reviewed by Noam Rosenthal.

        Currently, Texture Mapper performs the layer-tree traversal in
        TextureMapperLayer, while Coordinated Graphics performs the traversal in
        CoordinatedGraphicsLayer. This patch makes Texture Mapper perform the
        traversal in GraphicsLayerTextureMapper.

        Also removed the SyncOptions enum, which is redundant since no client
        calls it with ComputationsOnly.

        This is in preparation for refactoring TextureMapper to work in an actor
        model (http://webkit.org/b/103854).

        No new tests. Covered by existing tests.

        * platform/graphics/texmap/GraphicsLayerTextureMapper.cpp:
        (WebCore::GraphicsLayerTextureMapper::flushCompositingStateForThisLayerOnly):
        (WebCore::GraphicsLayerTextureMapper::flushCompositingState):
        (WebCore::GraphicsLayerTextureMapper::didFlushCompositingState):
        * platform/graphics/texmap/GraphicsLayerTextureMapper.h:
        (GraphicsLayerTextureMapper):
        * platform/graphics/texmap/TextureMapperLayer.cpp:
        (WebCore::TextureMapperLayer::flushCompositingStateForThisLayerOnly):
        * platform/graphics/texmap/TextureMapperLayer.h:
        (TextureMapperLayer):

2012-12-16  Levi Weintraub  <leviw@chromium.org>

        Push pixel snapping logic into TransformState
        https://bugs.webkit.org/show_bug.cgi?id=101779

        Reviewed by Simon Fraser.

        The old SnapOffsetForTransforms behavior fell apart when there was content nested in
        multiple levels of containers with sub-pixel offsets. The point of this flag was to
        mirror the pixel snapping that occurs in paint, where offsets are accumulated bottom-
        up through the render tree and snapped at the end. This change eliminates this flag
        and pushes pixel snapping logic down into TransformState.

        TransformState now tracks a LayoutSize accumulated offset when there's no transform
        or we're just translating. We then snap and apply this offset before accumulating
        values into a transform, and when returning planar coordinates to callers.

        Test: fast/sub-pixel/transformed-iframe-copy-on-scroll.html added,
              fast/sub-pixel/sub-pixel-iframe-copy-on-scroll.html modified to also catch this bug.

        * platform/graphics/transforms/TransformState.cpp:
        (WebCore::TransformState::operator=): Pass accumulated offset.
        (WebCore::TransformState::translateTransform): Extracted this functionality for
        re-use when applying the accumulated offset, or accumulating from a call to move.
        (WebCore::TransformState::translateMappedCoordinates): Same as above when we're not
        acculating into a transform.
        (WebCore::TransformState::move): Changed to accumulate into m_accumulatedOffset when
        not accumulating into a transform.
        (WebCore::TransformState::applyAccumulatedOffset):
        (WebCore::TransformState::applyTransform): Applies the accumulated offset before the
        transform.
        (WebCore::TransformState::flatten): Ditto for flattening.
        (WebCore::TransformState::mappedPoint): Translates by the accumulated offset before
        returning.
        (WebCore::TransformState::mappedQuad): Ditto.
        * platform/graphics/transforms/TransformState.h:
        (TransformState): Added m_accumulatedOffset.
        * rendering/RenderGeometryMap.cpp:
        (WebCore::RenderGeometryMap::mapToContainer): When not using a transform, we still need
        to snap our offset before applying to our float result. Also, flatten when we have a
        non-uniform step.
        * rendering/RenderGeometryMap.h:
        (RenderGeometryMap): Remove use of SnapOffsetForTransforms.

        Everything below simply drops the use of SnapOffsetForTransforms:

        * dom/ContainerNode.cpp:
        (WebCore::ContainerNode::getUpperLeftCorner):
        * dom/MouseRelatedEvent.cpp:
        (WebCore::MouseRelatedEvent::computeRelativePosition):
        * editing/FrameSelection.cpp:
        (WebCore::CaretBase::absoluteBoundsForLocalRect):
        * editing/RenderedPosition.cpp:
        (WebCore::RenderedPosition::absoluteRect):
        * editing/VisiblePosition.cpp:
        (WebCore::VisiblePosition::absoluteCaretBounds):
        * html/HTMLSelectElement.cpp:
        (WebCore::HTMLSelectElement::listBoxDefaultEventHandler):
        * html/shadow/SliderThumbElement.cpp:
        (WebCore::SliderThumbElement::setPositionFromPoint):
        * html/shadow/SpinButtonElement.cpp:
        (WebCore::SpinButtonElement::defaultEventHandler):
        * page/FrameView.cpp:
        (WebCore::FrameView::convertFromRenderer):
        (WebCore::FrameView::convertToRenderer):
        * rendering/InlineTextBox.cpp:
        (WebCore::InlineTextBox::paintDocumentMarker):
        (WebCore::InlineTextBox::paintTextMatchMarker):
        (WebCore::InlineTextBox::computeRectForReplacementMarker):
        * rendering/LayoutState.cpp:
        (WebCore::LayoutState::LayoutState):
        * rendering/RenderBox.cpp:
        (WebCore::RenderBox::mapLocalToContainer):
        (WebCore::RenderBox::pushMappingToContainer):
        * rendering/RenderBox.h:
        (RenderBox):
        * rendering/RenderBoxModelObject.cpp:
        (WebCore::RenderBoxModelObject::computeStickyPositionConstraints):
        * rendering/RenderEmbeddedObject.cpp:
        (WebCore::RenderEmbeddedObject::isInUnavailablePluginIndicator):
        * rendering/RenderFrameSet.cpp:
        (WebCore::RenderFrameSet::userResize):
        * rendering/RenderInline.cpp:
        (WebCore::RenderInline::mapLocalToContainer):
        (WebCore::RenderInline::pushMappingToContainer):
        * rendering/RenderInline.h:
        (RenderInline):
        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::absoluteToContents):
        (WebCore::RenderLayer::scrollTo):
        (WebCore::RenderLayer::childrenClipRect):
        (WebCore::RenderLayer::selfClipRect):
        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::contentsVisible):
        * rendering/RenderMediaControls.cpp:
        (WebCore::RenderMediaControls::volumeSliderOffsetFromMuteButton):
        * rendering/RenderMenuList.cpp:
        (WebCore::RenderMenuList::showPopup):
        * rendering/RenderObject.cpp:
        (WebCore::RenderObject::absoluteFocusRingQuads):
        * rendering/RenderObject.h:
        * rendering/RenderText.cpp:
        (WebCore::RenderText::absoluteRectsForRange):
        (WebCore::RenderText::absoluteQuads):
        (WebCore::RenderText::absoluteQuadsForRange):
        * rendering/RenderTheme.cpp:
        (WebCore::RenderTheme::volumeSliderOffsetFromMuteButton):
        * rendering/RenderView.cpp:
        (WebCore::RenderView::selectionBounds):
        * rendering/RenderView.h:
        (RenderView):
        * rendering/RenderWidget.cpp:
        (WebCore::RenderWidget::updateWidgetGeometry):
        * rendering/svg/RenderSVGForeignObject.cpp:
        (WebCore::RenderSVGForeignObject::mapLocalToContainer):
        * rendering/svg/RenderSVGForeignObject.h:
        (RenderSVGForeignObject):
        * rendering/svg/RenderSVGInline.cpp:
        (WebCore::RenderSVGInline::mapLocalToContainer):
        * rendering/svg/RenderSVGInline.h:
        (RenderSVGInline):
        * rendering/svg/RenderSVGModelObject.cpp:
        (WebCore::RenderSVGModelObject::mapLocalToContainer):
        * rendering/svg/RenderSVGModelObject.h:
        (RenderSVGModelObject):
        * rendering/svg/RenderSVGRoot.h:
        (RenderSVGRoot):
        * rendering/svg/RenderSVGText.cpp:
        (WebCore::RenderSVGText::mapLocalToContainer):
        * rendering/svg/RenderSVGText.h:
        (RenderSVGText):
        * rendering/svg/SVGRenderSupport.cpp:
        (WebCore::SVGRenderSupport::mapLocalToContainer):
        * rendering/svg/SVGRenderSupport.h:
        (SVGRenderSupport):

2012-12-15  Anders Carlsson  <andersca@apple.com>

        Rename FrameLoaderClient::download to convertMainResourceLoadToDownload
        https://bugs.webkit.org/show_bug.cgi?id=105122

        Reviewed by Andreas Kling.

        Rename FrameLoaderClient::download to convertMainResourceLoadToDownload and change it to take a MainResourceLoader instead
        of a ResourceHandle, since resource handles may not exist when loading isn't done in the web process.

        * WebCore.exp.in:
        * WebCore.xcodeproj/project.pbxproj:
        * loader/EmptyClients.h:
        * loader/FrameLoaderClient.h:
        (WebCore):
        (FrameLoaderClient):
        * loader/MainResourceLoader.cpp:
        (WebCore::MainResourceLoader::continueAfterContentPolicy):

2012-12-16  Eric Carlson  <eric.carlson@apple.com>

        Remove in-band text tracks when media element's src changes
        https://bugs.webkit.org/show_bug.cgi?id=105081

        Reviewed by Sam Weinig.

        No new tests, media/track/track-in-band.html was updated to test this change.

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::mediaPlayerDidRemoveTrack): Move some code into removeTrack.
        (WebCore::HTMLMediaElement::removeTrack): New, remove a track and all of its cues.
        (WebCore::HTMLMediaElement::removeAllInbandTracks): New, remove all in-band tracks.
        (WebCore::HTMLMediaElement::clearMediaPlayer): Call removeAllInbandTracks.
        * html/HTMLMediaElement.h:

        * platform/graphics/avfoundation/objc/MediaPlayerPrivateAVFoundationObjC.h:
        * platform/graphics/avfoundation/objc/MediaPlayerPrivateAVFoundationObjC.mm:
        (WebCore::MediaPlayerPrivateAVFoundationObjC::~MediaPlayerPrivateAVFoundationObjC):
        (WebCore::MediaPlayerPrivateAVFoundationObjC::cancelLoad): Call clearTextTracks.
        (WebCore::MediaPlayerPrivateAVFoundationObjC::clearTextTracks): Remove all tracks from client.

2012-12-16  Simon Fraser  <simon.fraser@apple.com>

        Fix assertions when doing a full repaint of compositing layers
        https://bugs.webkit.org/show_bug.cgi?id=105128

        Reviewed by Dan Bernstein.

        In r137811 I added code to repaint all compositing layers when FrameView::layout()
        is doing a full repaint. However, this code needs to avoid calling setContentsNeedDisplay()
        on layers that don't actually draw their own content: those that draw into an ancestor,
        and those that draw into a window.

        Fixes assertions in existing tests.

        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::updateAfterLayout):

2012-12-16  ChangSeok Oh  <shivamidow@gmail.com>

        [GTK][AC] Build failure with an option --with-acceleration-backend=clutter
        https://bugs.webkit.org/show_bug.cgi?id=105027

        Reviewed by Gustavo Noronha Silva.

        GLContext.* and RedirectedXCompositeWindow.* are meaningful only if opengl is
        a backend for the AC. So I wrap them in USE_OPENGL.

        No new tests. This patch fixes a build fauilure, not adding new features.

        * GNUmakefile.list.am:

2012-12-16  Víctor Manuel Jáquez Leal  <vjaquez@igalia.com>

        [GStreamer] create playbin in ::load(), not in player constructor
        https://bugs.webkit.org/show_bug.cgi?id=103898

        Reviewed by Philippe Normand.

        This patch moves the instantiation of the playbin pipeline into the
        WebCore::MediaPlayerPrivateGStreamer::load() method, so the pipeline
        layout can reflect other predefined settings such as audio pitch
        preservation in variable playback rate scenarios

        No new tests. Covered by existing tests.

        * platform/graphics/gstreamer/MediaPlayerPrivateGStreamer.cpp:
        (WebCore::MediaPlayerPrivateGStreamer::MediaPlayerPrivateGStreamer):
        (WebCore::MediaPlayerPrivateGStreamer::load):
        * platform/graphics/gstreamer/MediaPlayerPrivateGStreamer.h:
        (MediaPlayerPrivateGStreamer):

2012-12-16  Mihnea Ovidenie  <mihnea@adobe.com>

        [CSSRegions] Pseudo-elements should not be directly collected into a named flow
        https://bugs.webkit.org/show_bug.cgi?id=105046

        Reviewed by Abhishek Arya.

        Prevent pseudo-elements to be collected into a named-flow by bailing out early in the collecting stage.
        Following the CSSRegions spec, http://dev.w3.org/csswg/css3-regions/#flow-into, the pseudo-elements
        like ::before/::after/::first-letter/::first-line are not allowed to become content nodes, being directly
        collected into a flow thread.

        Tests: fast/regions/pseudo-after-content-node.html
               fast/regions/pseudo-before-content-node.html
               fast/regions/pseudo-first-letter-content-node.html
               fast/regions/pseudo-first-line-content-node.html

        * dom/NodeRenderingContext.cpp:
        (WebCore::NodeRenderingContext::moveToFlowThreadIfNeeded):

2012-12-16  Mihai Maerean  <mmaerean@adobe.com>

        [CSS Regions] broken feature detection: body.webkitRegionOverset and body.webkitGetRegionFlowRanges shouldn't succeed when disabled at runtime
        https://bugs.webkit.org/show_bug.cgi?id=99707

        Reviewed by Hajime Morita.

        The bug is that the CSS Regions feature leaks information at run-time. There are JS properties that exist even
        if the feature is disabled at run-time (document.webkitGetNamedFlows, document.body.webkitRegionOverset,
        document.body.webkitGetRegionFlowRanges and window.WebKitCSSRegionRule).

        The fix is to add V8EnabledAtRuntime=cssRegions in the IDL files to the properties that leak information and to
        the interfaces that are the type of those properties.

        Test: fast/regions/region-leak-js-information-when-disabled-at-runtime.html

        * css/WebKitCSSRegionRule.idl:
            added V8EnabledAtRuntime=cssRegions for the WebKitCSSRegionRule interface.
        * dom/DOMNamedFlowCollection.idl:
            added V8EnabledAtRuntime=cssRegions for the DOMNamedFlowCollection interface.
        * dom/Document.idl:
            added V8EnabledAtRuntime=cssRegions for the webkitGetNamedFlows method.
        * dom/Element.idl:
            added V8EnabledAtRuntime=cssRegions for the webkitRegionOverset attribute.
            added V8EnabledAtRuntime=cssRegions for the webkitGetRegionFlowRanges method.
        * page/DOMWindow.idl:
            added V8EnabledAtRuntime=cssRegions for the WebKitCSSRegionRule attribute.

2012-12-15  Ian Vollick  <vollick@chromium.org>

        [chromium] Automatically use composited scrolling
        https://bugs.webkit.org/show_bug.cgi?id=94743

        Reviewed by Adrienne Walker.

        We currently use the composited scrolling facilities provided by
        wkb.ug/91117 if the overflow scroll block element is styled with
        -webkit-overflow-scrolling: touch. Ideally, we could automatically
        opt into composited scrolling if it is safe to do so. This can affect
        antialiasing, so it is important that automatically opting in is only
        enabled via a setting.

        The way I determine if it is safe is by checking that z-ordering will
        not be affected if the overflow scrollable element were promoted to a
        stacking context (details below), and that clipping our scrolling
        descendants will not affect rendering.

        To check the first condition (that z-ordering will not be affected).
        I ensure that the candidate element and all its descendants appear as a 
        contiguous block in the candidate's stacking context. That is, if no 
        other elements are 'between' any of the candidates descendants when we
        sort in paint order, then we're safe. This is overly conservative,
        however. We could, in future, only consider stacking problems between
        elements that actually overlap.

        To ensure that clipping will not cause a rendering change, I ensure
        that the layer has no out of flow positioned descendant whose
        containing block is not also a descendant of ours.

        Test: compositing/overflow/automatically-opt-into-compositing-scrolling.html

        (WebCore):
        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::RenderLayer):
        (WebCore::RenderLayer::acceleratedCompositingForOverflowScrollEnabled):
        (WebCore):
        (WebCore::RenderLayer::updateDescendantsAreContiguousInStackingOrder):
        (WebCore::RenderLayer::updateDescendantsAreContiguousInStackingOrderRecursive):
        (WebCore::RenderLayer::positionNewlyCreatedOverflowControls):
        (WebCore::RenderLayer::canSafelyEstablishAStackingContext):
          Returns true if the RenderLayer could become a stacking context without
          affecting the stacking order.
        (WebCore::RenderLayer::updateDescendantDependentFlags):
          We now need to keep track of out of flow positioned descendants.
        (WebCore::RenderLayer::addChild):
        (WebCore::RenderLayer::removeChild):
        (WebCore::RenderLayer::usesCompositedScrolling):
          Returns true if the layer actually is using composited scrolling.
          This function may return false, even when needsCompositedScrolling
          returns true.
        (WebCore::RenderLayer::needsCompositedScrolling):
          This function returns true if we would like to use composited
          scrolling and it is safe to turn it on.
        (WebCore::RenderLayer::updateNeedsCompositedScrolling):
        (WebCore::RenderLayer::scrollTo):
        (WebCore::RenderLayer::dirtyZOrderLists):
        (WebCore::RenderLayer::dirtyNormalFlowList):
          Since these could affect opting into composited scrolling, we must
          request that the RenderLayerCompositor reevaluate compositing.
        (WebCore::RenderLayer::updateLayerListsIfNeeded):
          We call updateCanSafelyEstablishStackingContext here, if necessary.
        (WebCore::RenderLayer::shouldBeNormalFlowOnly):
        (WebCore::RenderLayer::shouldBeSelfPaintingLayer):
          usesCompositedScrolling -> needsCompositedScrolling
        (WebCore::RenderLayer::setAncestorChainHasOutOfFlowPositionedDescendant):
        (WebCore::RenderLayer::dirtyAncestorChainHasOutOfFlowPositionedDescendantStatus):
        (WebCore::RenderLayer::updateOutOfFlowPositioned):
          Dirties and sets the out of flow positioned descendant state.
        (WebCore::RenderLayer::styleChanged):
        * rendering/RenderLayer.h:
        (RenderLayer):
        (WebCore::RenderLayer::hasOutOfFlowPositionedDescendant):
        * rendering/RenderLayerBacking.cpp:
        (WebCore::layerOrAncestorIsTransformedOrUsingCompositedScrolling):
        (WebCore::RenderLayerBacking::updateGraphicsLayerConfiguration):
        (WebCore::RenderLayerBacking::updateGraphicsLayerGeometry):
        (WebCore::RenderLayerBacking::hasUnpositionedOverflowControlsLayers):
        (WebCore):
        * rendering/RenderLayerBacking.h:
        (RenderLayerBacking):
        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::rebuildCompositingLayerTree):
        (WebCore::RenderLayerCompositor::requiresCompositingForOverflowScrolling):
        * rendering/RenderLayerCompositor.h:
        (WebCore::RenderLayerCompositor::setShouldReevaluateCompositingAfterLayout):
        * testing/InternalSettings.cpp:
        (WebCore::InternalSettings::setEnableCompositingForOverflowScroll):
          Allows enabling the setting in layout tests.
        (WebCore):
        * testing/InternalSettings.h:
        (InternalSettings):
        * testing/InternalSettings.idl:

2012-12-15  Carlos Garcia Campos  <cgarcia@igalia.com>

        Unreviewed. Fix make distcheck.

        * bindings/gobject/GNUmakefile.am: Do not dist generated DOM
        bindings headers.
        * platform/ScrollAnimatorNone.cpp: Include PlatformGestureEvent.h
        only if gesture events are enabled.

2012-12-15  Alexey Proskuryakov  <ap@apple.com>

        Build fix.

        * platform/network/FormData.cpp:
        (WebCore::encodeElement):
        (WebCore::decodeElement):
        (WebCore::FormData::encode):
        (WebCore::FormData::decode):
        Disambiguated encode/decode functions. I'm not quite sure why the compiler was
        confused, but distinct names should make the code more readable anyway.

2012-12-15  Alexey Proskuryakov  <ap@apple.com>

        <rdar://problem/12886312> Cannot upload patches to Bugzilla (<input type=file> doesn't work)
        https://bugs.webkit.org/show_bug.cgi?id=105120

        Reviewed by Sam Weinig.

        * WebCore.exp.in:
        * history/HistoryItem.cpp:
        * platform/network/FormData.h:
        Renamed encodeForBackForward and decodeForBackForward to encode and decode, respectively.
        I couldn't find anything in these that would limit them to this use, and data encoded
        for b/f has to be good enough to re-create a request anyway.

        * platform/network/FormData.cpp: (WebCore::decode): Fixed file data decoder to not
        bail out in the general case of posting a complete file.

2012-12-15  Nima Ghanavatian  <nghanavatian@rim.com>

        [BlackBerry] Pass key modifiers with touch and mouse events
        https://bugs.webkit.org/show_bug.cgi?id=105108

        Reviewed by Rob Buis.

        Call Screen to retrieve current key modifiers.

        Internally reviewed by Gen Mak.

        * platform/PlatformMouseEvent.h:
        (PlatformMouseEvent):
        * platform/blackberry/PlatformKeyboardEventBlackBerry.cpp:
        (WebCore::PlatformKeyboardEvent::getCurrentModifierState):
        * platform/blackberry/PlatformMouseEventBlackBerry.cpp:
        (WebCore::PlatformMouseEvent::PlatformMouseEvent):
        * platform/blackberry/PlatformTouchEventBlackBerry.cpp:
        (WebCore::PlatformTouchEvent::PlatformTouchEvent):

2012-12-15  Otto Derek Cheung  <otcheung@rim.com>

        [BlackBerry] Prevent CookieManager from blocking the WKT thread
        https://bugs.webkit.org/show_bug.cgi?id=105111

        PR 265603

        Reviewed by Rob Buis.
        Internally reviewed by Konrad Piascik.

        The getBackingStoreCookies in WKT is blocking the thread because it has to wait for
        the db to be opened before it can call on it.

        The fix is to make CookieDatabaseBackingStore in the cookie_db thread dispatch
        a getBackingStoreCookies call on WKT after invokeOpen is finished.

        Tested loading the browser. Cookies are being loaded into memory on start up.

        * platform/blackberry/CookieDatabaseBackingStore/CookieDatabaseBackingStore.cpp:
        (WebCore::CookieDatabaseBackingStore::invokeOpen):
        * platform/blackberry/CookieManager.cpp:
        (WebCore::cookieManager):
        * platform/blackberry/CookieManager.h:

2012-12-15  Simon Fraser  <simon.fraser@apple.com>

        Fix repaint issues when resizing a window with centered content, for platforms with a tile cache
        https://bugs.webkit.org/show_bug.cgi?id=105073

        Reviewed by Dan Bernstein.

        There were several issues with the "do full repaint" code path in
        FrameView::layout(). These caused repaint issues when resizing the web view,
        especially for platforms that use a tile cache.
        
        First, the m_doFullRepaint flag wold get clobbered on resize-layouts, because
        the call to adjustViewSize() re-enters layout(), and resets the m_doFullRepaint member
        variable to false, even if the outer call had previously set it to true. This would
        cause us to lose track of whether we needed to do a full repaint. The patch fixes
        this by restoring m_doFullRepaint to the value it had before the call to adjustViewSize().
        
        The second problem was that full repaints would not propagate to compositing
        layers. They only repainted the RenderView, and on platforms that use a tile cache,
        this only repaints the top portion of that tile cache. This was fixed by sending
        a NeedsFullRepaintInBacking flag down into RenderLayer::updateLayerPositions(),
        and using that to do a full repaint on all compositing layers.
        
        Sending this new flag down into updateAfterLayout() prompted some boolean/flags
        cleanup with propagated into several files. This also allowed me to no longer
        include RenderLayerBacking.h in RenderLayerCompositor.h, but that required
        header cleanup in several files.

        Automated testing is not possible because WebKitTestRunner resizes the window
        asynchronously (bug 105101). Added manual test.

        * page/FrameView.cpp:
        (WebCore::updateLayerPositionFlags):
        (WebCore::FrameView::layout):
        * page/scrolling/ScrollingCoordinator.cpp:
        * page/scrolling/mac/ScrollingCoordinatorMac.mm:
        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::updateLayerPositions):
        (WebCore::RenderLayer::updateCompositingLayersAfterScroll):
        * rendering/RenderLayer.h:
        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::updateAfterLayout):
        (WebCore::RenderLayerBacking::contentChanged):
        * rendering/RenderLayerBacking.h:
        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::updateCompositingDescendantGeometry):
        * rendering/RenderLayerCompositor.h:
        * rendering/RenderObject.cpp:
        * rendering/RenderView.cpp:

2012-12-15  Anders Carlsson  <andersca@apple.com>

        Fix build.

        * platform/graphics/ca/GraphicsLayerCA.h:
        Remove an unused member variable.

2012-12-15  Simon Fraser  <simon.fraser@apple.com>

        REGRESSION (r137006): TileCache flashes to linen, rather than the background color, when scrolling fast
        https://bugs.webkit.org/show_bug.cgi?id=104746

        Reviewed by Darin Adler.

        Make RenderLayerBacking::updateBackgroundColor() responsible for setting the background
        color of the main frame's root layer to the document background color (rather than doing
        it in code related to overlay scrollbars, which was crazy). This is only done for platforms
        that use a TiledBacking (currently, just Mac).
        
        Also fix updateBackgroundColor() to not call m_graphicsLayer->setContentsToBackgroundColor()
        and then call clearBackgroundColor() right away if the color was transparent.
        
        * page/FrameView.cpp:
        (WebCore::FrameView::recalculateScrollbarOverlayStyle): Remove code that calls documentBackgroundColorDidChange().
        * rendering/RenderLayerBacking.cpp:
        (WebCore::clipBox): Remove blank linke.
        (WebCore::RenderLayerBacking::updateBackgroundColor):
        * rendering/RenderLayerCompositor.cpp:
        * rendering/RenderLayerCompositor.h:
        (RenderLayerCompositor):

2012-12-15  No'am Rosenthal  <noam.rosenthal@nokia.com>

        Disambiguate "background color" and "contents as solid color" on GraphicsLayer
        https://bugs.webkit.org/show_bug.cgi?id=104842

        Reviewed by Simon Fraser.

        Rename overloads in GraphicsLayerTextureMapper and GraphicsLayerChromium to account for the rename in GraphicsLayer.

        Covered by existing tests.

        * platform/graphics/chromium/GraphicsLayerChromium.cpp:
        * platform/graphics/texmap/GraphicsLayerTextureMapper.cpp:
        (WebCore::GraphicsLayerTextureMapper::setContentsToSolidColor):
        * platform/graphics/texmap/GraphicsLayerTextureMapper.h:
        (GraphicsLayerTextureMapper):
        (WebCore::GraphicsLayerTextureMapper::solidColor):
        * platform/graphics/texmap/TextureMapperLayer.cpp:
        (WebCore::TextureMapperLayer::paintSelf):
        (WebCore::TextureMapperLayer::flushCompositingStateSelf):
        * platform/graphics/texmap/TextureMapperLayer.h:
        (State):

2012-12-13  Simon Fraser  <simon.fraser@apple.com>

        Disambiguate "background color" and "contents as solid color" on GraphicsLayer
        https://bugs.webkit.org/show_bug.cgi?id=104842

        Reviewed by Dean Jackson.

        GraphicsLayer failed to be clear about the distinction between
        the layer background color, and setting the layer contents
        to a color. This caused some recently added tests to fail,
        and required some special-casing for the TileCache in
        GraphicsLayerCA.
        
        Separate these two concepts on GraphicsLayer. setBackgroundColor()
        now sets the background color on the entire layer, which will only
        be used in special cases like the TileCache.
        
        The existing setContentsToBackgroundColor() is renamed to
        setContentsToSolidColor(), and is an explicit request to create
        a contents layer for the purpose of displaying a simple color.
        
        In both cases, 'clear' methods are not necessary; calling
        the setter with an invalid color clears the color.

        Covered by existing tests.

        * WebCore.exp.in: Remove GraphicsLayer::clearBackgroundColor().
        * platform/graphics/GraphicsLayer.cpp:
        (WebCore::GraphicsLayer::GraphicsLayer):
        (WebCore::GraphicsLayer::setBackgroundColor):
        (WebCore::GraphicsLayer::dumpProperties):
        * platform/graphics/GraphicsLayer.h:
        (GraphicsLayer): Remove m_backgroundColorSet; we just check whether
        the color is a valid color now.
        (WebCore::GraphicsLayer::setContentsToSolidColor):
        * platform/graphics/ca/GraphicsLayerCA.cpp:
        (WebCore::GraphicsLayerCA::GraphicsLayerCA):
        (WebCore::GraphicsLayerCA::setBackgroundColor):
        (WebCore::GraphicsLayerCA::setContentsToSolidColor):
        (WebCore::GraphicsLayerCA::commitLayerChangesBeforeSublayers):
        (WebCore::GraphicsLayerCA::updateBackgroundColor):
        (WebCore::GraphicsLayerCA::updateContentsColorLayer):
        (WebCore):
        * platform/graphics/ca/GraphicsLayerCA.h:
        (GraphicsLayerCA):
        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::updateGraphicsLayerGeometry): We have
        to call updateBackgroundColor(), because the 'is simple compositing layer'
        state may change in this code path.
        (WebCore::RenderLayerBacking::updateBackgroundColor): Don't initialize
        the Color to transparent (it will be invalid initially), and always
        call setContentsToSolidColor() which will either set or remove the color.

2012-12-15  Mark Lam  <mark.lam@apple.com>

        Re-landing patch for "Introducing the DatabaseStrategy and database servers".
        https://bugs.webkit.org/show_bug.cgi?id=104934.

        Not reviewed.

        Merged from r137767. Previously reviewed by Sam Weinig.
        Also added __ZTVN7WebCore16DatabaseStrategyE to WebCore.exp.in.

        No new tests.

        * CMakeLists.txt:
        * GNUmakefile.list.am:
        * Modules/webdatabase/AbstractDatabaseServer.h: Copied from Source/WebCore/Modules/webdatabase/AbstractDatabaseServer.h.
        * Modules/webdatabase/DBBackendServer.h: Copied from Source/WebCore/Modules/webdatabase/DBBackendServer.h.
        * Modules/webdatabase/DatabaseManager.cpp:
        (WebCore::DatabaseManager::DatabaseManager):
        * Modules/webdatabase/DatabaseManager.h:
        (DatabaseManager):
        * Target.pri:
        * WebCore.exp.in:
        * WebCore.gypi:
        * WebCore.vcproj/WebCore.vcproj:
        * WebCore.xcodeproj/project.pbxproj:
        * platform/DatabaseStrategy.cpp: Copied from Source/WebCore/platform/DatabaseStrategy.cpp.
        * platform/DatabaseStrategy.h: Copied from Source/WebCore/platform/DatabaseStrategy.h.
        * platform/PlatformStrategies.h:
        (WebCore::PlatformStrategies::databaseStrategy):
        (PlatformStrategies):
        (WebCore::PlatformStrategies::PlatformStrategies):

2012-12-14  Yuki Sekiguchi  <yuki.sekiguchi@access-company.com>

        Emphasis mark is printed after inline-block with justify
        https://bugs.webkit.org/show_bug.cgi?id=104631

        Reviewed by Dean Jackson.

        Do not print an emphasis mark after an inline-block when justified.

        If an inline-block is expanded, it has a space appended to it.
        This space should not have any emphasis marks drawn.

        Test: fast/inline/justify-emphasis-inline-box.html

        * platform/graphics/SimpleFontData.h:
        (WebCore::SimpleFontData::zeroWidthSpaceGlyph): Add getter method to get zero width space glyph.
        * platform/graphics/WidthIterator.cpp:
        (WebCore::WidthIterator::advanceInternal): We use zero width space for the extra space not to draw emphasis marks.

2012-12-14  Jer Noble  <jer.noble@apple.com>

        Unreviewed bug fix after r137782.

        Add new source file TextTrackRepresentation.cpp to CMakeLists.txt.

        * CMakeLists.txt:

2012-12-14  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r137767.
        http://trac.webkit.org/changeset/137767
        https://bugs.webkit.org/show_bug.cgi?id=105062

        Broke Mac builds. (Requested by mlam on #webkit).

        * CMakeLists.txt:
        * GNUmakefile.list.am:
        * Modules/webdatabase/AbstractDatabaseServer.h: Removed.
        * Modules/webdatabase/DBBackendServer.h: Removed.
        * Modules/webdatabase/DatabaseManager.cpp:
        (WebCore::DatabaseManager::DatabaseManager):
        * Modules/webdatabase/DatabaseManager.h:
        * Target.pri:
        * WebCore.exp.in:
        * WebCore.gypi:
        * WebCore.vcproj/WebCore.vcproj:
        * WebCore.xcodeproj/project.pbxproj:
        * platform/DatabaseStrategy.cpp: Removed.
        * platform/DatabaseStrategy.h: Removed.
        * platform/PlatformStrategies.h:
        (WebCore):
        (WebCore::PlatformStrategies::PlatformStrategies):
        (PlatformStrategies):

2012-12-14  Jer Noble  <jer.noble@apple.com>

        Allow the text track contents to be displayed externally to WebCore.
        https://bugs.webkit.org/show_bug.cgi?id=105052

        Reviewed by Eric Carlson.

        Support scenarios where the text track contents must be rendered outside of WebCore, such as to an external
        display or window.  Add an abstract base class which encapsulates the external representation to which the
        text tracks will be rendered.

        Add a new abstract base class and client to wrap the external rendering of a TextTrack.
        * platform/graphics/TextTrackRepresentation.h: Added.
        (WebCore::TextTrackRepresentationClient::~TextTrackRepresentationClient):
        (WebCore::TextTrackRepresentation::~TextTrackRepresentation):

        Add an empty concrete implementation for those ports who do not yet support external display of subtitles.
        * platform/graphics/TextTrackRepresentation.cpp: Added.
        (NullTextTrackRepresentation):
        (WebCore::NullTextTrackRepresentation::~NullTextTrackRepresentation):
        (WebCore::NullTextTrackRepresentation::update):
        (WebCore::NullTextTrackRepresentation::platformLayer):
        (WebCore::NullTextTrackRepresentation::setContentScale):
        (WebCore::NullTextTrackRepresentation::bounds):
        (WebCore::TextTrackRepresentation::create):

        Add methods to MediaPlayerPrivateIOS to handle the TextTrackRepresentation.
        * platform/graphics/ios/MediaPlayerPrivateIOS.h:
        * platform/graphics/ios/MediaPlayerPrivateIOS.mm:
        (WebCore::MediaPlayerPrivateIOS::deliverNotification): Remove the representation when exiting full screen.
        (WebCore::MediaPlayerPrivateIOS::requiresTextTrackRepresentation): Return YES if in full screen mode.
        (WebCore::MediaPlayerPrivateIOS::setTextTrackRepresentation): Pass the representation's layer to the player plug-in.

        Expose those methods via HTMLMediaElement:
        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::requiresTextTrackRepresentation):
        (WebCore::HTMLMediaElement::setTextTrackRepresentation):
        * html/HTMLMediaElement.h:
        * platform/graphics/MediaPlayer.cpp:
        (WebCore::MediaPlayer::requiresTextTrackRepresentation):
        (WebCore::MediaPlayer::setTextTrackRepresentation):
        * platform/graphics/MediaPlayer.h:
        (WebCore::MediaPlayerClient::textTrackRepresentationBoundsChanged):
        (WebCore::MediaPlayerClient::paintTextTrackRepresentation):
        * platform/graphics/MediaPlayerPrivate.h:
        (WebCore::MediaPlayerPrivateInterface::requiresTextTrackRepresentation):
        (WebCore::MediaPlayerPrivateInterface::setTextTrackRepresentation):

        * html/shadow/MediaControlElements.cpp:
        (WebCore::MediaControlTextTrackContainerElement::updateDisplay): Create the representation, if necessary.
        (WebCore::MediaControlTextTrackContainerElement::updateSizes): Use the representation to determine the font size.
        (WebCore::MediaControlTextTrackContainerElement::paintTextTrackRepresentation): Added. Paint the TextTrack into the provided graphics context.
        (WebCore::MediaControlTextTrackContainerElement::textTrackRepresentationBoundsChanged): Added. Call updateSizes().
        * html/shadow/MediaControlElements.h:

        Add the new files to the project.
        * WebCore.xcodeproj/project.pbxproj:
        * GNUmakefile.list.am:
        * Target.pri:
        * WebCore.gypi:
        * WebCore.vcproj/WebCore.vcproj:

2012-12-14  Fady Samuel  <fsamuel@chromium.org>

        Allow embedder to observe changes to frame names
        https://bugs.webkit.org/show_bug.cgi?id=104404

        Reviewed by Darin Fisher.

        * loader/FrameLoaderClient.h:
        (WebCore::FrameLoaderClient::didChangeName):
        (FrameLoaderClient):
        * page/DOMWindow.cpp:
        (WebCore::DOMWindow::setName):

2012-12-14  James Simonsen  <simonjam@chromium.org>

        [Resource Timing] Properly report reused connections
        https://bugs.webkit.org/show_bug.cgi?id=104986

        Reviewed by Tony Gentilcore.

        Test: http/tests/w3c/webperf/submission/resource-timing/html/test_resource_connection_reuse.html

        * page/PerformanceResourceTiming.cpp:
        (WebCore::PerformanceResourceTiming::PerformanceResourceTiming):
        (WebCore::PerformanceResourceTiming::connectStart):
        (WebCore::PerformanceResourceTiming::connectEnd):
        * page/PerformanceResourceTiming.h:
        (PerformanceResourceTiming):

2012-12-14  Roger Fong  <roger_fong@apple.com>

        Enable video caption controls on Windows.
        https://bugs.webkit.org/show_bug.cgi?id=105045.

        Reviewed by Eric Carlson.

        Now that video tracks have been enabled on Windows, enable controls as well.

        * html/shadow/MediaControlElements.cpp:
        (WebCore::MediaControlToggleClosedCaptionsButtonElement::MediaControlToggleClosedCaptionsButtonElement):
        (WebCore::MediaControlToggleClosedCaptionsButtonElement::defaultEventHandler):
        * html/shadow/MediaControlElements.h:
        * rendering/RenderThemeWin.h:

2012-12-14  Mark Lam  <mark.lam@apple.com>

        Introducing the DatabaseStrategy and database servers.
        https://bugs.webkit.org/show_bug.cgi?id=104934.

        Reviewed by Sam Weinig.

        The database server is currently a placeholder that does nothing.

        No new tests.

        * CMakeLists.txt:
        * GNUmakefile.list.am:
        * Modules/webdatabase/AbstractDatabaseServer.h: Added.
        (WebCore):
        (AbstractDatabaseServer):
        (WebCore::AbstractDatabaseServer::AbstractDatabaseServer):
        (WebCore::AbstractDatabaseServer::~AbstractDatabaseServer):
        * Modules/webdatabase/DBBackendServer.h: Added.
        (DBBackend):
        * Modules/webdatabase/DatabaseManager.cpp:
        (WebCore::DatabaseManager::DatabaseManager):
        * Modules/webdatabase/DatabaseManager.h:
        (WebCore):
        (DatabaseManager):
        * Target.pri:
        * WebCore.exp.in:
        * WebCore.gypi:
        * WebCore.vcproj/WebCore.vcproj:
        * WebCore.xcodeproj/project.pbxproj:
        * platform/DatabaseStrategy.cpp: Added.
        (WebCore):
        (WebCore::DatabaseStrategy::getDatabaseServer):
        * platform/DatabaseStrategy.h: Added.
        (WebCore):
        (DatabaseStrategy):
        (WebCore::DatabaseStrategy::~DatabaseStrategy):
        * platform/PlatformStrategies.h:
        (WebCore):
        (WebCore::PlatformStrategies::databaseStrategy):
        (PlatformStrategies):
        (WebCore::PlatformStrategies::PlatformStrategies):

2012-12-14  Anton Vayvod  <avayvod@chromium.org>

        Text Autosizing: Consider inline-block and inline-table elements to be autosizing clusters.
        https://bugs.webkit.org/show_bug.cgi?id=104702

        Reviewed by Julien Chaffraix.

        A common pattern for creating adjacent columns in CSS is to set each of the columns to
        display:inline-block, display:inline-table or alike WebKit-specific styles. Whenever columns
        are used, Text Autosizing needs to assign each of the columns to different clusters (since
        the user can zoom in such that a column fills the width of the screen, so text within a column
        should have a smaller multiplier than it's wider enclosing cluster would have needed).

        This patch causes display:inline-block, display:inline-table and alike styles to trigger new clusters.

        Test: fast/text-autosizing/cluster-inline-block-or-table.html
        Test: fast/text-autosizing/cluster-inline-grid-flex-box.html

        * rendering/TextAutosizer.cpp:
        (WebCore::TextAutosizer::isAutosizingContainer):
        (WebCore::TextAutosizer::isAutosizingCluster):
            Consider display:inline-block, inline-table and alike elements to be autosizing containers and clusters.

2012-12-14  Anders Carlsson  <andersca@apple.com>

        REGRESSION (r137607): Cannot download files, stuck in "Preparing to download"
        https://bugs.webkit.org/show_bug.cgi?id=105044
        <rdar://problem/12879657>

        Reviewed by Alexey Proskuryakov.

        Make ResourceHandle::cancel return early if the handle has been converted to a download.

        * platform/network/mac/ResourceHandleMac.mm:
        (WebCore::ResourceHandle::cancel):

2012-12-14  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r137570.
        http://trac.webkit.org/changeset/137570
        https://bugs.webkit.org/show_bug.cgi?id=105048

        Stale nodes in the touchEventTarget HashCountedSet are
        triggering crashes. Rolling out while I find the root cause.
        (Requested by leviw on #webkit).

        * dom/Document.cpp:
        (WebCore::Document::Document):
        (WebCore::Document::didAddTouchEventHandler):
        (WebCore::Document::didRemoveTouchEventHandler):
        * dom/Document.h:
        (WebCore::Document::touchEventHandlerCount):
        (Document):
        * dom/Node.cpp:
        (WebCore::Node::didMoveToNewDocument):
        (WebCore::tryAddEventListener):
        (WebCore::tryRemoveEventListener):
        * history/CachedFrame.cpp:
        (WebCore::CachedFrameBase::restore):
        * html/HTMLInputElement.cpp:
        (WebCore::HTMLInputElement::~HTMLInputElement):
        (WebCore::HTMLInputElement::updateType):
        * page/DOMWindow.cpp:
        (WebCore::DOMWindow::addEventListener):
        (WebCore::DOMWindow::removeEventListener):
        * page/EventHandler.cpp:
        (WebCore::EventHandler::handleTouchEvent):
        * page/Frame.cpp:
        (WebCore::Frame::setDocument):
        * page/scrolling/ScrollingCoordinator.cpp:
        * page/scrolling/ScrollingCoordinator.h:
        * page/scrolling/chromium/ScrollingCoordinatorChromium.cpp:
        (WebCore::ScrollingCoordinatorChromium::frameViewLayoutUpdated):
        * page/scrolling/chromium/ScrollingCoordinatorChromium.h:
        (ScrollingCoordinatorChromium):
        * testing/Internals.cpp:
        (WebCore::Internals::touchEventHandlerCount):
        * testing/Internals.h:
        (Internals):
        * testing/Internals.idl:

2012-12-14  Michelangelo De Simone  <michelangelo@webkit.org>

        [CSS Shaders] Remove code for the other mesh box types (border-box | padding-box | content-box)
        https://bugs.webkit.org/show_bug.cgi?id=103776

        Reviewed by Dean Jackson.

        The MeshBoxType has been removed and the code has been refactored. The specs will be updated shortly
        and therefore this feature - even though it was not fully implemented yet - shall not be used anymore.

        In this patch we remove everything but the parsing code, which shall be addressed in a different patch
        (see: https://bugs.webkit.org/show_bug.cgi?id=103778).

        Specification to be updated: http://dvcs.w3.org/hg/FXTF/raw-file/tip/filters/index.html#ltboxgt

        Existing tests have been updated and new parsing legacy cases have been added.

        * css/CSSComputedStyleDeclaration.cpp:
        (WebCore::CSSComputedStyleDeclaration::valueForFilter):
        * css/CSSParser.cpp:
        (WebCore::CSSParser::parseCustomFilter):
        * css/CSSPrimitiveValueMappings.h:
        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::createCustomFilterOperation):
        * platform/graphics/filters/CustomFilterConstants.h:
        * platform/graphics/filters/CustomFilterOperation.cpp:
        (WebCore::CustomFilterOperation::CustomFilterOperation):
        (WebCore::CustomFilterOperation::blend):
        * platform/graphics/filters/CustomFilterOperation.h:
        (WebCore::CustomFilterOperation::create):
        (CustomFilterOperation):
        (WebCore::CustomFilterOperation::operator==):
        * platform/graphics/filters/CustomFilterRenderer.cpp:
        (WebCore::CustomFilterRenderer::create):
        (WebCore::CustomFilterRenderer::CustomFilterRenderer):
        * platform/graphics/filters/CustomFilterRenderer.h:
        (CustomFilterRenderer):
        * platform/graphics/filters/FECustomFilter.cpp:
        (WebCore::FECustomFilter::FECustomFilter):
        (WebCore::FECustomFilter::create):
        * platform/graphics/filters/FECustomFilter.h:
        (FECustomFilter):
        * platform/graphics/filters/ValidatedCustomFilterOperation.cpp:
        (WebCore::ValidatedCustomFilterOperation::ValidatedCustomFilterOperation):
        * platform/graphics/filters/ValidatedCustomFilterOperation.h:
        (WebCore::ValidatedCustomFilterOperation::create):
        (WebCore::ValidatedCustomFilterOperation::operator==):
        (ValidatedCustomFilterOperation):
        * rendering/FilterEffectRenderer.cpp:
        (WebCore::createCustomFilterEffect):
        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::computeFilterOperations):
        * platform/graphics/texmap/TextureMapperGL.cpp:
        (WebCore::TextureMapperGL::drawUsingCustomFilter):

2012-12-14  Yury Semikhatsky  <yurys@chromium.org>

        Web Inspector: optional parameters of protocol commands should go after required ones
        https://bugs.webkit.org/show_bug.cgi?id=105019

        Reviewed by Pavel Feldman.

        * inspector/Inspector.json: Moved required x and y parameters declaration before
        optional ones.
        * inspector/InspectorInputAgent.cpp:
        (WebCore::InspectorInputAgent::dispatchMouseEvent):
        * inspector/InspectorInputAgent.h:
        (InspectorInputAgent):

2012-12-14  Jessie Berlin  <jberlin@apple.com>

        Mac build fix after r137724.

        * platform/graphics/MediaPlayer.h:
        (WebCore::MediaPlayerClient::mediaPlayerKeyAdded):
        Comment out the names of the unused parameters so they don't trigger unused parameter
        warnings.
        (WebCore::MediaPlayerClient::mediaPlayerKeyError):
        Ditto.
        (WebCore::MediaPlayerClient::mediaPlayerKeyMessage):
        Ditto.
        (WebCore::MediaPlayerClient::mediaPlayerKeyNeeded):
        Ditto.

        * platform/graphics/avfoundation/objc/MediaPlayerPrivateAVFoundationObjC.mm:
        (WebCore::MediaPlayerPrivateAVFoundationObjC::generateKeyRequest):
        Pass an empty URL for the new defaultURL parameter in the keyMessage call.

2012-12-14  Alberto Garcia  <agarcia@igalia.com>

        [GTK] When in private mode WebKitGTK+ should not save HTTP authentication credentials to the persistent storage
        https://bugs.webkit.org/show_bug.cgi?id=104910

        Reviewed by Martin Robinson.

        Add new parameter to GtkAuthenticationDialog to select whether we
        allow persistent storage of credential information or not. In the
        latter case, the "Remember password" check button is not shown and
        the credentials are always stored in the session.

        * platform/gtk/GtkAuthenticationDialog.cpp:
        (WebCore::GtkAuthenticationDialog::GtkAuthenticationDialog):
        (WebCore::GtkAuthenticationDialog::createContentsInContainer):
        (WebCore::GtkAuthenticationDialog::buttonClickedCallback):
        * platform/gtk/GtkAuthenticationDialog.h:
        (GtkAuthenticationDialog):

2012-12-14  Andrey Kosyakov  <caseq@chromium.org>

        Unreviewed, rolling out r129633 and r129757.
        http://trac.webkit.org/changeset/129633
        http://trac.webkit.org/changeset/129757
        https://bugs.webkit.org/show_bug.cgi?id=97659

        Causes performance regression whn inspector overlay is
        displayed

        * inspector/InspectorOverlay.cpp:
        (WebCore::InspectorOverlay::paint):

2012-12-14  Yury Semikhatsky  <yurys@chromium.org>

        Web Inspector: add data grid for exploring native heap graph
        https://bugs.webkit.org/show_bug.cgi?id=105012

        Reviewed by Pavel Feldman.

        Added a view for displaying native heap graph nodes.

        * inspector/HeapGraphSerializer.cpp:
        (WebCore::HeapGraphSerializer::reportEdge):
        * inspector/front-end/NativeMemorySnapshotView.js:
        (WebInspector.NativeMemorySnapshotView):
        (WebInspector.NativeMemorySnapshotView.prototype._onSelectedViewChanged):
        (WebInspector.NativeMemorySnapshotView.prototype.get statusBarItems):
        (WebInspector.NativeHeapGraphNode):
        (WebInspector.NativeHeapGraphNode.prototype.id):
        (WebInspector.NativeHeapGraphNode.prototype.type):
        (WebInspector.NativeHeapGraphNode.prototype.size):
        (WebInspector.NativeHeapGraphNode.prototype.className):
        (WebInspector.NativeHeapGraphNode.prototype.name):
        (WebInspector.NativeHeapGraphNode.prototype.hasReferencedNodes):
        (WebInspector.NativeHeapGraphNode.prototype.referencedNodes):
        (WebInspector.NativeHeapGraphNode.prototype._firstEdgePoistion):
        (WebInspector.NativeHeapGraphNode.prototype._afterLastEdgePosition):
        (WebInspector.NativeHeapGraphNode.prototype._getStringField):
        (WebInspector.NativeHeapGraph):
        (WebInspector.NativeHeapGraph.prototype.rootNodes):
        (WebInspector.NativeHeapGraph.prototype._calculateNodeEdgeIndexes):
        (WebInspector.NativeHeapGraphDataGrid):
        (WebInspector.NativeHeapGraphDataGridRoot):
        (WebInspector.NativeHeapGraphDataGridRoot.prototype._populate):
        (WebInspector.NativeHeapGraphDataGridNode):
        (WebInspector.NativeHeapGraphDataGridNode.prototype._populate):
        (WebInspector.NativeMemoryProfileType.prototype.buttonClicked.didReceiveMemorySnapshot):
        (WebInspector.NativeMemoryProfileType.prototype.buttonClicked):

2012-12-14  Ilya Tikhonovsky  <loislo@chromium.org>

        Web Inspector: Native Memory Instrumentation: do not validate InlineFlowBox objects against tcmalloc data.
        https://bugs.webkit.org/show_bug.cgi?id=105001

        Reviewed by Yury Semikhatsky.

        This is a follow-up change for r137589.

        * rendering/InlineFlowBox.cpp:
        (WebCore::InlineFlowBox::reportMemoryUsage):
        (WebCore):
        * rendering/InlineFlowBox.h:
        (InlineFlowBox):

2012-12-14  Kentaro Hara  <haraken@chromium.org>

        ChildNodesLazySnapshot::nextNode() can crash in Debug builds
        https://bugs.webkit.org/show_bug.cgi?id=104982

        Reviewed by Ryosuke Niwa.

        The original fix in r137702 was not enough. r137702 fixed a crash
        in Release builds but didn't fix a crash in Debug builds.
        We have to also change a return type of ChildNodesLazySnapshot::nextNode()
        from a raw pointer to a RefPtr.

        Test: fast/dom/insertedIntoDocument-no-crash.html
        (Confirm that this test does not crash in Debug builds.)

        * dom/ContainerNode.h:
        (WebCore::ChildNodesLazySnapshot::nextNode):
        * dom/ContainerNodeAlgorithms.cpp:
        (WebCore::ChildNodeInsertionNotifier::notifyDescendantInsertedIntoDocument):
        (WebCore::ChildNodeRemovalNotifier::notifyDescendantRemovedFromDocument):

2012-12-14  John Mellor  <johnme@chromium.org>

        Text Autosizing: Don't autosize unwrappable blocks
        https://bugs.webkit.org/show_bug.cgi?id=104925

        Reviewed by Julien Chaffraix.

        If we autosize an unwrappable block (white-space:nowrap/pre), it'll
        expand sideways. This doesn't actually improve its legibility, and it
        can often severely break web page layouts. This patch prevents us from
        autosizing unwrappable blocks. A follow-up patch will address the more
        complex issue of unwrappable inline elements.

        Tests: fast/text-autosizing/unwrappable-blocks.html
               fast/text-autosizing/unwrappable-inlines.html

        * rendering/TextAutosizer.cpp:
        (WebCore::TextAutosizer::processContainer):
            Use containerShouldbeAutosized instead of contentHeightIsConstrained.
        (WebCore::contentHeightIsConstrained):
            Unchanged, just moved lower down the file.
        (WebCore::TextAutosizer::containerShouldbeAutosized):
            Checks that the block is wrappable, and also that contentHeightIsConstrained is false.
        (WebCore::TextAutosizer::measureDescendantTextWidth):
            Use containerShouldbeAutosized instead of contentHeightIsConstrained.
        * rendering/TextAutosizer.h:
            Declared containerShouldbeAutosized.

2012-12-14  Vsevolod Vlasov  <vsevik@chromium.org>

        Web Inspector: Duplicate scripts appear in workspace when script was referenced by url with a fragment part.
        https://bugs.webkit.org/show_bug.cgi?id=105004

        Reviewed by Alexander Pavlov.

        * inspector/front-end/NetworkUISourceCodeProvider.js:
        (WebInspector.NetworkUISourceCodeProvider.prototype._parsedScriptSource):

2012-12-14  Kunihiko Sakamoto  <ksakamoto@chromium.org>

        Hours field of date/time input UI should respect step attribute
        https://bugs.webkit.org/show_bug.cgi?id=104993

        Reviewed by Kent Tamura.

        This patch makes step-up/-down UI of the hours field respect step attribute when possible.

        Test: fast/forms/time-multiple-fields/time-multiple-fields-stepup-stepdown-from-renderer.html

        * html/shadow/DateTimeEditElement.cpp:
        (WebCore::DateTimeEditBuilder::visitField): Pass step parameters to the hour field constructor.
        * html/shadow/DateTimeFieldElements.cpp:
        (WebCore::DateTimeHourFieldElement::DateTimeHourFieldElement): Add Parameters argument.
        (WebCore::DateTimeHourFieldElement::create): Ditto.
        * html/shadow/DateTimeFieldElements.h:
        (DateTimeHourFieldElement): Ditto.

2012-12-14  Yury Semikhatsky  <yurys@chromium.org>

        Unreviewed. Windows compilation fix after r137728.

        * inspector/InspectorAllInOne.cpp:

2012-12-14  Shinya Kawanaka  <shinyak@chromium.org>

        [Shadow DOM] ShadowRoot.getElementById() should work outside document.
        https://bugs.webkit.org/show_bug.cgi?id=87815

        Reviewed by Hajime Morita.

        ShadowRoot.getElementById() didn't work if ShadowRoot is outside document. We need to update id when an element
        is in ShadowTree event if it is not in document.

        For performance reason, we introduce IsInShadowTree flag, which enables us to check isInTreeScope() fast.
        This is maintained in Element::insertedInto and removedFrom. Here, we're anxious about performance regression,
        however our benchmark result shows this doesn't regress the performance.

        I've measured Dromaeo/dom-modify.html and Parser/html5-full-render.html 2 times.

        Dromaeo/dom-modify.html
             35.21,   35.27 [runs/s] --->   35.76,   35.56 [runs/s]
        Parser/html5-full-render.html
           4328.51, 4254.94 [ms]     ---> 4277.14, 4222.43 [ms]

        Test: fast/dom/shadow/getelementbyid-in-orphan.html

        * dom/Element.cpp:
        (WebCore::Element::insertedInto):
        * dom/Element.h:
        (WebCore::Element::updateId):
        * dom/Node.cpp:
        (WebCore::Node::insertedInto): If the parent node is in shadow tree, this node should be also in the same shadow tree.
        Since this node is inserted, parentOrHostNode() will not be null.
        (WebCore::Node::removedFrom): When node is removed from ShadowTree, its treeScope() should not be ShadowRoot.
        * dom/Node.h:
        (Node):
        (WebCore::Node::isInShadowTree):
        (WebCore::Node::isInTreeScope):

2012-12-14  Antoine Quint  <graouts@apple.com>

        LayerTreeAgent should only be enabled upon restore if it was previously in the enabled state
        https://bugs.webkit.org/show_bug.cgi?id=104887

        Reviewed by Pavel Feldman.

        Check that we were previously in the enabled state before re-enabling the agent upon restore,
        as suggested by Pavel Feldman in follow-up discussion to https://bugs.webkit.org/show_bug.cgi?id=103513.

        * inspector/InspectorLayerTreeAgent.cpp:
        (WebCore::InspectorLayerTreeAgent::restore):

2012-12-14  Eugene Klyuchnikov  <eustas@chromium.org>

        Web Inspector: CPU Profile: Search in "heavy" mode is very slow.
        https://bugs.webkit.org/show_bug.cgi?id=103682

        Reviewed by Pavel Feldman.

        In "heavy" mode the searchable tree is much larger than original tree.
        That is why search can cause watchdog timer fired.

        Simple optimization makes search much faster.

        * inspector/front-end/CPUProfileView.js:
        (WebInspector.CPUProfileView.prototype.searchCanceled):
        Fix cleanup.
        (WebInspector.CPUProfileView.prototype.matchesQuery):
        Precompute regexp.
        (WebInspector.CPUProfileView.prototype.performSearch):
        Use precomputed regexp instead of generating one on each iteration.

2012-12-13  Yury Semikhatsky  <yurys@chromium.org>

        Web Inspector: collect native heap graph and report it to the front-end
        https://bugs.webkit.org/show_bug.cgi?id=104888

        Reviewed by Pavel Feldman.

        Added an option to serialize native heap graph in a format similar to that
        of JS heap profiler and send it in reply to getProcessMemoryDistribution
        command. This is a first attempt and we likely change the report mechanism to
        use a stream instread of sending whole graph at once.

        * CMakeLists.txt:
        * GNUmakefile.list.am:
        * Target.pri:
        * WebCore.gypi:
        * WebCore.vcproj/WebCore.vcproj:
        * WebCore.xcodeproj/project.pbxproj:
        * inspector/HeapGraphSerializer.cpp: Added.
        (WebCore):
        (HeapGraphNode):
        (WebCore::HeapGraphNode::HeapGraphNode):
        (HeapGraphEdge):
        (WebCore::HeapGraphEdge::HeapGraphEdge):
        (WebCore::HeapGraphSerializer::HeapGraphSerializer):
        (WebCore::HeapGraphSerializer::~HeapGraphSerializer):
        (WebCore::HeapGraphSerializer::serialize):
        (WebCore::HeapGraphSerializer::reportNode):
        (WebCore::HeapGraphSerializer::reportEdge):
        (WebCore::HeapGraphSerializer::reportLeaf):
        (WebCore::HeapGraphSerializer::reportBaseAddress):
        (WebCore::HeapGraphSerializer::adjutEdgeTargets):
        (WebCore::HeapGraphSerializer::addString):
        * inspector/HeapGraphSerializer.h: Copied from Source/WebCore/inspector/InspectorMemoryAgent.h.
        (WebCore):
        (HeapGraphSerializer):
        * inspector/Inspector.json:
        * inspector/InspectorMemoryAgent.cpp:
        (WebCore::InspectorMemoryAgent::getProcessMemoryDistribution):
        * inspector/InspectorMemoryAgent.h:
        (InspectorMemoryAgent):
        * inspector/MemoryInstrumentationImpl.cpp:
        (WebCore::MemoryInstrumentationClientImpl::reportNode):
        (WebCore):
        (WebCore::MemoryInstrumentationClientImpl::reportEdge):
        (WebCore::MemoryInstrumentationClientImpl::reportLeaf):
        (WebCore::MemoryInstrumentationClientImpl::reportBaseAddress):
        * inspector/MemoryInstrumentationImpl.h:
        (WebCore):
        (WebCore::MemoryInstrumentationClientImpl::MemoryInstrumentationClientImpl):
        (MemoryInstrumentationClientImpl):

2012-12-14  Yoshifumi Inoue  <yosin@chromium.org>

        Handling autoscroll in EventHandler should be re-factor
        https://bugs.webkit.org/show_bug.cgi?id=104764

        Reviewed by Hajime Morita.

        This patch introduces new class AutoscrollController for moving autoscroll
        and panscroll from EventHandler class for ease of maintenance of
        EventHandler and ease of adding autoscroll related features, e.g. autoscroll
        during drag-and-drop, autoscoll by gesture.

        No new tests. This patch doesn't change behavior.

        * CMakeLists.txt: Changed to add page/AutoscrollController.cpp
        * GNUmakefile.list.am:  Changed to add page/AutoscrollController.{cpp,h}
        * Target.pri:  Changed to add page/AutoscrollController.cpp
        * WebCore.gypi: Changed to add page/AutoscrollController.{cpp,h}
        * WebCore.vcproj/WebCore.vcproj: Changed to add page/AutoscrollController.{cpp,h}
        * WebCore.xcodeproj/project.pbxproj: Changed to add page/AutoscrollController.{cpp,h}
        * page/AutoscrollController.cpp: Added.
        (WebCore::getMainFrame): Helper function.
        (WebCore::AutoscrollController::AutoscrollController): Moved from EventHandler.
        (WebCore::AutoscrollController::autoscrollRenderer): Moved from EventHandler.
        (WebCore::AutoscrollController::autoscrollInProgress): Moved from EventHandler.
        (WebCore::AutoscrollController::startAutoscrollForSelection): Replacement of EventHandler::handleAutoscroll().
        (WebCore::AutoscrollController::stopAutoscrollTimer): Moveed from EventHandler.
        (WebCore::AutoscrollController::updateAutoscrollRenderer): ditto
        (WebCore::AutoscrollController::didPanScrollStart): Added for updating pan scrolling status of main frame.
        (WebCore::AutoscrollController::didPanScrollStop): ditto
        (WebCore::AutoscrollController::handleMouseReleaseEvent): Extracted from EventHandler.
        (WebCore::AutoscrollController::panScrollInProgress): Replacement of EventHandler::m_panScrollInProgress.
        (WebCore::AutoscrollController::startPanScrolling): Moved from EventHandler::startPanScrolling()
        (WebCore::AutoscrollController::autoscrollTimerFired): Moved from EventHandler::autoscrollTimerFired().
        (WebCore::AutoscrollController::startAutoscrollTimer): Moved from EventHandler::startAutoscrollTimer().
        (WebCore::AutoscrollController::updatePanScrollState): Moved from EventHandler::updatePanScrollState().
        * page/AutoscrollController.h: Added.
        (AutoscrollController):
        * page/EventHandler.cpp:
        (WebCore::EventHandler::EventHandler): Changed autoscroll and panscroll related member variable initializations to m_autoscrollController initialization.
        (WebCore::EventHandler::handleMouseDraggedEvent): Changed to call AutoscrollController::startAutoscrollForSelection().
        (WebCore::EventHandler::handleMouseReleaseEvent): Changed to remove m_autoscrollInProgress reference.
        (WebCore::EventHandler::didPanScrollStart): Added for updating pan scrolling status of main frame.
        (WebCore::EventHandler::didPanScrollStop): ditto
        (WebCore::EventHandler::startPanScrolling): Changed to call AutoscrollController::startPanScrolling().
        (WebCore::EventHandler::autoscrollRenderer): Changed to use AutoscrollController.
        (WebCore::EventHandler::updateAutoscrollRenderer): ditto
        (WebCore::EventHandler::autoscrollInProgress): ditto
        (WebCore::EventHandler::panScrollInProgress): Added to replace m_panScrollInProgress.
        (WebCore::EventHandler::stopAutoscrollTimer): Changed to use AutoscrollController.
        (WebCore::EventHandler::selectCursor): Changed to use panScrollInProgress().
        (WebCore::EventHandler::handleMousePressEvent): Chagned to call AutoscrollController::handleMousePressEvent().
        (WebCore::EventHandler::keyEvent): Changed to use panScrollInProgress().
        * page/EventHandler.h:
        (WebCore::EventHandler::autoscrollController): Added for using main frame's panScrollInProgress().
        (WebCore::EventHandler::mouseDownWasInSubframe): Added for AutoscrollController.
        * rendering/RenderBox.cpp:
        (WebCore::RenderBox::canAutoscroll): Moved from EventHandler.cpp.
        (WebCore::RenderBox::findAutoscrollable): Moved from EventHandler.cpp.
        * rendering/RenderBox.h:
        (RenderBox): Added new functions canAutoscroll() and findAutoscrollable().

2012-12-14  David Dorwin  <ddorwin@chromium.org>

        EME v0.1: Report defaultURL in KeyMessage.
        https://bugs.webkit.org/show_bug.cgi?id=104284

        Reviewed by Darin Fisher.

        Passes defaultURL down from the media engine to HTMLMediaElement.
        Only Valid URLs will be passed.

        No test because Clear Key does not provide a defaultURL (in v0.1).

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::mediaPlayerKeyMessage):
        * html/HTMLMediaElement.h:
        (HTMLMediaElement):
        * platform/graphics/MediaPlayer.cpp:
        (WebCore::MediaPlayer::keyMessage):
        * platform/graphics/MediaPlayer.h:
        (WebCore::MediaPlayerClient::mediaPlayerKeyAdded):
        (WebCore::MediaPlayerClient::mediaPlayerKeyError):
        (WebCore::MediaPlayerClient::mediaPlayerKeyMessage):
        (WebCore::MediaPlayerClient::mediaPlayerKeyNeeded):
        (MediaPlayer):

2012-12-13  Hajime Morrita  <morrita@google.com>

        ContentDistributor and ShadowRootContentDistributionData should use RefPtr to hold elements.
        https://bugs.webkit.org/show_bug.cgi?id=104918

        Reviewed by Kentaro Hara.

        This change turns some raw pointers to RefPtrs.

        No new tests. Hard to write reliable fast tests since the error
        reproduction needs GC to run in certain timing. Although original
        report has a repdocution, it takes a few seconds before crash and
        isn't suited for a layout test.

        * dom/ShadowRoot.cpp:
        (WebCore::ShadowRoot::insertionPointList):
        * dom/ShadowRoot.h:
        (ShadowRoot):
        * html/shadow/ContentDistributor.cpp:
        (WebCore::ShadowRootContentDistributionData::ensureInsertionPointList):
        (WebCore::ContentDistributor::findInsertionPointFor):
        (WebCore::ContentDistributor::distribute):
        (WebCore::ContentDistributor::invalidate):
        * html/shadow/ContentDistributor.h:
        (ShadowRootContentDistributionData):
        (ContentDistributor):

2012-12-13  Hajime Morrita  <morrita@google.com>

        NodeRenderingContext is slow due to ComposedShadowTreeWalker
        https://bugs.webkit.org/show_bug.cgi?id=104332

        Reviewed by Dimitri Glazkov.

        NodeRenderingContext has some slowness due to the complexity of
        ComposedShadowTreeWalker that NRC relies on. This change
        creates some fast paths to address such slowness.

        = NodeRenderingTraversal module:

        This change introduces NodeRenderingTraversal namespace, a sister
        of NodeTraversal. NRT consists of a set of tree traversal
        functions that is responsible for traversal in NRC.  Before this
        change, NRC directly used CSTW. This NRT module hides and narrows
        the usage of CSTW.

        - Traversals provided by NRT have fast paths. In many case, such traversals
          don't need to use CSTW and just goes to neighboring nodes in a plain DOM way.
        - It also handles NRC specific traversal concerns like pseudo elements.
          CSTW::pseudoAwareNextSibling() and CSTW::pseudoAwarePreviousSibling() are
          merged into this module.
        - CSTW::ParentTraversalDetails is moved and renamed to
          NRT::ParentDetails with small modification. This is a pure
          refactoring: As the name implies, This class is used only by NRC
          and used during a traversal there.

        NodeRenderingTraversal is an isolation layer between generic DOM and CSTW. This hides CSTW
        behind the wall and will help further reduction of its usage.

        = Node::NeedsShadowTreeWalkerFlag flag:

        NRT fast path is enabled by newly introduced NeedsShadowTreeWalker
        node flag. Each DOM node is now markd as NeedsShadowTreeWalker if
        it requires non-trivial traversal in NRT which uses CSTW. This
        means that each node can go fast path unless it is marked with this flag.

        A node is marked as it NeedsShadowTreeWalker if:

        - The node is a shadow boundary like InsertionPoint or ShadowRoot,
        - The node has pseudo elements like generated content or
        - The node is a pseudo element.

        This criteria is defined in Node::needsShadowTreeWalkerSlow(). The node actually needs
        the walker if the node or its parent is marked with this flag.

        The original idea of this change was demonstrated by Antti Koivisto on bug 103208 and bug 104507.
        This chagne has 2-3% speedup on Dromaeo/dom-modify/innerHTML on Apple Mac.

        No new tests. Covered by existing tests.

        * CMakeLists.txt:
        * GNUmakefile.list.am:
        * Target.pri:
        * WebCore.gypi:
        * WebCore.xcodeproj/project.pbxproj:
        * dom/ComposedShadowTreeWalker.cpp:
        * dom/ComposedShadowTreeWalker.h:
        (ComposedShadowTreeWalker): Move some part to NodeRenderingTraversal
        * dom/ContainerNode.h:
        (WebCore::Node::needsShadowTreeWalker): Added. This is located here since it refers ContainerNode definition.
        (WebCore):
        * dom/DOMAllInOne.cpp:
        * dom/Element.cpp:
        (WebCore::Element::updatePseudoElement): Refactored.
        (WebCore::Element::hasPseudoElements): Ditto.
        (WebCore::Element::pseudoElement): Ditto.
        (WebCore::Element::setPseudoElement): Refactored and added a flag update logic.
        (WebCore):
        * dom/Element.h:
        (Element):
        (WebCore::Element::beforePseudoElement): Refactored.
        (WebCore::Element::afterPseudoElement): Refactored.
        * dom/ElementRareData.h:
        (WebCore::ElementRareData::hasPseudoElements): Factored out.
        * dom/ElementShadow.cpp:
        (WebCore::ElementShadow::addShadowRoot): Added a flag update logic.
        * dom/Node.cpp:
        (WebCore::Node::needsShadowTreeWalkerSlow): Added.
        * dom/Node.h:
        (WebCore::Node::isInsertionPointNode): Added.
        (Node):
        (WebCore::Node::isInsertionPoint): Changed to use NeedsShadowTreeWalkerFlag.
        (WebCore::Node::setNeedsShadowTreeWalker):
        (WebCore::Node::resetNeedsShadowTreeWalker):
        * dom/NodeRenderingContext.cpp: Adopted NodeRenderingTraversal.
        (WebCore::NodeRenderingContext::NodeRenderingContext):
        (WebCore::NodeRenderingContext::nextRenderer):
        (WebCore::NodeRenderingContext::previousRenderer):
        (WebCore::NodeRenderingContext::parentRenderer):
        (WebCore::NodeRenderingContext::shouldCreateRenderer):
        * dom/NodeRenderingContext.h: Ditto.
        (NodeRenderingContext):
        (WebCore::NodeRenderingContext::parentNodeForRenderingAndStyle):
        * dom/NodeRenderingTraversal.cpp: Added.
        (WebCore):
        (NodeRenderingTraversal):
        (WebCore::NodeRenderingTraversal::ParentDetails::didTraverseInsertionPoint): Moved from ComposedShadowTreeWalker
        (WebCore::NodeRenderingTraversal::ParentDetails::didTraverseShadowRoot): Ditto.
        (WebCore::NodeRenderingTraversal::parentSlow): Ditto.
        (WebCore::NodeRenderingTraversal::nextSiblingSlow): Ditto. The original was pseudoAwareNextSibling.
        (WebCore::NodeRenderingTraversal::previousSiblingSlow): Ditto. The original was pseudoAwarePreviousSibling.
        * dom/NodeRenderingTraversal.h: Added.
        (WebCore):
        (NodeRenderingTraversal):
        (ParentDetails): Moved from ComposedShadowTreeWalker.
        (WebCore::NodeRenderingTraversal::ParentDetails::ParentDetails):
        (WebCore::NodeRenderingTraversal::ParentDetails::insertionPoint):
        (WebCore::NodeRenderingTraversal::ParentDetails::resetStyleInheritance):
        (WebCore::NodeRenderingTraversal::ParentDetails::outOfComposition):
        (WebCore::NodeRenderingTraversal::ParentDetails::childWasOutOfComposition):
        (WebCore::NodeRenderingTraversal::ParentDetails::operator==):
        (WebCore::NodeRenderingTraversal::parent):
        (WebCore::NodeRenderingTraversal::nextSibling):
        (WebCore::NodeRenderingTraversal::previousSibling):
        * dom/PseudoElement.cpp:
        (WebCore::PseudoElement::PseudoElement): Added an assertion.
        * dom/Text.cpp:
        * html/HTMLOptGroupElement.cpp: Added a #include which revealed by a chagne on NodeRenderingContext.h
        * html/HTMLOptionElement.cpp: Ditto.
        * html/HTMLProgressElement.cpp: Dito.
        * html/shadow/InsertionPoint.h: Added an override of isInsertionPointNode().

2012-12-13  Kent Tamura  <tkent@chromium.org>

        Refactoring: Fix indentation of ChromeClient.h
        https://bugs.webkit.org/show_bug.cgi?id=104989

        Reviewed by Kentaro Hara.

        The contents of an outermost namespace block should not be indented.
        http://www.webkit.org/coding/coding-style.html#indentation-namespace

        No behavior change.

        * page/ChromeClient.h:

2012-12-13  Kunihiko Sakamoto  <ksakamoto@chromium.org>

        Seconds/Minutes field of date/time input UI should respect step attribute
        https://bugs.webkit.org/show_bug.cgi?id=104985

        Reviewed by Kent Tamura.

        This patch makes step-up/-down UI of the seconds and minutes fields respect
        step attribute when possible.

        Test: fast/forms/time-multiple-fields/time-multiple-fields-stepup-stepdown-from-renderer.html

        * html/shadow/DateTimeEditElement.cpp:
        (DateTimeEditBuilder):
        (WebCore::DateTimeEditBuilder::visitField): Compute step parameters for seconds and minutes fields, and pass it to the field element constructors.
        (WebCore::DateTimeEditBuilder::createNumericFieldParameters): Added.
        * html/shadow/DateTimeFieldElements.cpp:
        (WebCore::DateTimeMillisecondFieldElement::DateTimeMillisecondFieldElement): Use Parameters instead of step and stepBase.
        (WebCore::DateTimeMillisecondFieldElement::create): Ditto.
        (WebCore::DateTimeMinuteFieldElement::DateTimeMinuteFieldElement): Add Parameters argument.
        (WebCore::DateTimeMinuteFieldElement::create): Ditto.
        (WebCore::DateTimeSecondFieldElement::DateTimeSecondFieldElement): Ditto.
        (WebCore::DateTimeSecondFieldElement::create): Ditto.
        * html/shadow/DateTimeFieldElements.h:
        (DateTimeMillisecondFieldElement): Use Parameters instead of step and stepBase.
        (DateTimeMinuteFieldElement): Add Parameters argument.
        (DateTimeSecondFieldElement): Ditto.
        * html/shadow/DateTimeNumericFieldElement.cpp:
        (WebCore::DateTimeNumericFieldElement::DateTimeNumericFieldElement): Use Parameters instead of step and stepBase.
        * html/shadow/DateTimeNumericFieldElement.h:
        (DateTimeNumericFieldElement):
        (WebCore::DateTimeNumericFieldElement::Parameters::Parameters):
        (Parameters): Added.

2012-12-13  Filip Pizlo  <fpizlo@apple.com>

        Attempt to rationalize and simplify WTF::binarySearch
        https://bugs.webkit.org/show_bug.cgi?id=104890

        Reviewed by Maciej Stachowiak.

        Switch to using the new binarySearch() API. No change in behavior, so no new tests.

        * svg/animation/SVGSMILElement.cpp:
        (WebCore::SVGSMILElement::findInstanceTime):

2012-12-13  Takashi Sakamoto  <tasak@google.com>

        [Shadow DOM]: scoped styles are not applied in the cascade order.
        https://bugs.webkit.org/show_bug.cgi?id=103239

        Reviewed by Dimitri Glazkov.

        If the scoping elements of two declarations have an ancestor/
        descendant relationship, the declaration whose scoping element is
        the descendant should win.
        c.f. http://dev.w3.org/csswg/css3-cascade/#cascade

        Test: fast/css/style-scoped/style-scoped-nested.html
              fast/css/style-scoped/style-scoped-with-important-rule.html

        * css/RuleSet.cpp:
        (WebCore::RuleSet::addRule):
        Removed specificity for @host @-rules. Now @host @-rules use the
        cascading order instead.
        * css/RuleSet.h:
        Removed increaseSpecificity. The method is used by only @host @-rules.
        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::matchScopedAuthorRules):
        (WebCore::StyleResolver::matchHostRules):
        (WebCore::StyleResolver::matchAuthorRules):
        Modified to invoke sortAndTransferMatchedRules per scoping element.
        The order of "matchXXXRules" must be the same as the cascading order.
        So matchHostRules was invoked after collecting all scoped author rules.
        * css/StyleScopeResolver.cpp:
        (WebCore::StyleScopeResolver::addHostRule):
        Removed RuleIsHostRule. We don't need the flag.
        * html/HTMLStyleElement.cpp:
        (WebCore::HTMLStyleElement::registerWithScopingNode):
        Needs to pass the last test case of style-scoped-nested.html.
        When appending some style element to a shadow root, we should recalc
        styles of all elements in the shadow dom tree. And if the style
        element has @host @-rules, we have to update the host's style.

2012-12-13  Filip Pizlo  <fpizlo@apple.com>

        MediaPlayerPrivateAVFoundation::m_inbandTrackConfigurationPending is unused except when HAVE(AVFOUNDATION_TEXT_TRACK_SUPPORT)
        https://bugs.webkit.org/show_bug.cgi?id=104987

        Rubber stamped by Michael Saboff.

        No change in behavior so no new tests.

        * platform/graphics/avfoundation/MediaPlayerPrivateAVFoundation.cpp:
        (WebCore::MediaPlayerPrivateAVFoundation::MediaPlayerPrivateAVFoundation):
        * platform/graphics/avfoundation/MediaPlayerPrivateAVFoundation.h:
        (MediaPlayerPrivateAVFoundation):

2012-12-13  Kentaro Hara  <haraken@chromium.org>

        Unreviewed. Rebaselined run-bindings-tests results.

        * bindings/scripts/test/JS/JSTestCustomNamedGetter.h:
        (JSTestCustomNamedGetter):
        * bindings/scripts/test/JS/JSTestEventTarget.h:
        (JSTestEventTarget):

2012-12-13  Yoshifumi Inoue  <yosin@chromium.org>

        Unreviewed, rolling out r137691.
        http://trac.webkit.org/changeset/137691
        https://bugs.webkit.org/show_bug.cgi?id=104764

        panscroll test on AppleWin failed

        * CMakeLists.txt:
        * GNUmakefile.list.am:
        * Target.pri:
        * WebCore.gypi:
        * WebCore.vcproj/WebCore.vcproj:
        * WebCore.xcodeproj/project.pbxproj:
        * page/AutoscrollController.cpp: Removed.
        * page/AutoscrollController.h: Removed.
        * page/EventHandler.cpp:
        (WebCore):
        (WebCore::EventHandler::EventHandler):
        (WebCore::canAutoscroll):
        (WebCore::EventHandler::handleMouseDraggedEvent):
        (WebCore::EventHandler::handleMouseReleaseEvent):
        (WebCore::EventHandler::handleAutoscroll):
        (WebCore::EventHandler::autoscrollTimerFired):
        (WebCore::EventHandler::startPanScrolling):
        (WebCore::EventHandler::updatePanScrollState):
        (WebCore::EventHandler::autoscrollRenderer):
        (WebCore::EventHandler::updateAutoscrollRenderer):
        (WebCore::EventHandler::setAutoscrollRenderer):
        (WebCore::EventHandler::startAutoscrollTimer):
        (WebCore::EventHandler::stopAutoscrollTimer):
        (WebCore::EventHandler::selectCursor):
        (WebCore::EventHandler::handleMousePressEvent):
        (WebCore::EventHandler::keyEvent):
        * page/EventHandler.h:
        (EventHandler):
        (WebCore::EventHandler::autoscrollInProgress):
        * rendering/RenderBox.cpp:
        * rendering/RenderBox.h:
        (RenderBox):

2012-12-13  Kentaro Hara  <haraken@chromium.org>

        ChildNodesLazySnapshot::nextNode() can crash
        https://bugs.webkit.org/show_bug.cgi?id=104982

        Reviewed by Hajime Morita.

        ChildNodesLazySnapshot::nextNode() can crash for
        fast/dom/insertedIntoDocument-no-crash.html.
        The root cause is that ChildNodesLazySnapshot::m_currentNode
        was not a RefPtr. This patch changes it to a RefPtr.

        Test: fast/dom/insertedIntoDocument-no-crash.html

        * dom/ContainerNode.h:
        (WebCore::ChildNodesLazySnapshot::nextNode):
        (WebCore::ChildNodesLazySnapshot::takeSnapshot):
        (ChildNodesLazySnapshot):

2012-12-13  Philip Rogers  <pdr@google.com>

        Clear m_timeContainer on SVGSMILElement removal.
        https://bugs.webkit.org/show_bug.cgi?id=104972

        Reviewed by Abhishek Arya.

        This patch fixes a regression introduced by r137509 where we did not clear
        m_timeContainer in SVGSMILElement::removedFrom.

        Test: svg/custom/removed-from-animation-crash.html

        * svg/animation/SVGSMILElement.cpp:
        (WebCore::SVGSMILElement::removedFrom):

2012-12-13  Filip Pizlo  <fpizlo@apple.com>

        Named lookups on HTML documents produce inconsistent results in JavaScriptCore bindings
        https://bugs.webkit.org/show_bug.cgi?id=104623

        Reviewed by Geoffrey Garen.

        All DOM objects that have named getters or directly override getOwnPropertySlot are now marked as
        HasImpureGetOwnPropertySlot.

        Tests: fast/js/prototype-chain-caching-with-impure-get-own-property-slot-traps
               fast/js/dfg-prototype-chain-caching-with-impure-get-own-property-slot-traps

        * bindings/scripts/CodeGeneratorJS.pm:
        (GenerateHeader):

2012-12-13  Xianzhu Wang  <wangxianzhu@chromium.org>

        Out-of-view check of fixed position element in frame is incorrect when page is scaled
        https://bugs.webkit.org/show_bug.cgi?id=104943

        Reviewed by Simon Fraser.

        Use frameScaleFactor instead of pageScaleFactor to scale the layer bounds.

        Tests: compositing/layer-creation/fixed-position-out-of-view-scaled-iframe-scroll.html
               compositing/layer-creation/fixed-position-out-of-view-scaled-iframe.html

        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::requiresCompositingForPosition):

2012-12-13  Bear Travis  <betravis@adobe.com>

        Positioned replaced elements should resolve vertical margins against their containing
        block's logical width
        https://bugs.webkit.org/show_bug.cgi?id=103579

        Reviewed by Emil A Eklund.

        According to the CSS box model & writing modes specifications, percentage margin
        & padding values, including top & bottom, should be resolved based on the
        containing block's logical width (logical with respect to the containing block's
        writing mode).
        http://www.w3.org/TR/CSS2/box.html#margin-properties
        http://dev.w3.org/csswg/css3-writing-modes/#dimension-mapping

        Previously, a positioned replaced element resolved margin before/after relative to
        its inline direction (containerLogicalHeight), and margin start/end relative to
        its block direction (containerLogicalWidth). This patch measures the container's
        logical width in its own inline direction (containerRelativeLogicalWidth) to
        resolve all margin percentage values.

        Test: fast/writing-mode/percentage-margins-absolute-replaced.html

        * rendering/RenderBox.cpp:
        (WebCore::RenderBox::computePositionedLogicalWidthReplaced): Calculate the logical
        width of the container, and use it to calculate margins.
        (WebCore::RenderBox::computePositionedLogicalHeightReplaced): Ditto.

2012-12-13  Yoshifumi Inoue  <yosin@chromium.org>

        Handling autoscroll in EventHandler should be re-factor
        https://bugs.webkit.org/show_bug.cgi?id=104764

        Reviewed by Hajime Morita.

        This patch introduces new class AutoscrollController for moving autoscroll
        and panscroll from EventHandler class for ease of maintenance of
        EventHandler and ease of adding autoscroll related features, e.g. autoscroll
        during drag-and-drop, autoscoll by gesture.

        No new tests. This patch doesn't change behavior.

        * CMakeLists.txt: Changed to add page/AutoscrollController.cpp
        * GNUmakefile.list.am:  Changed to add page/AutoscrollController.{cpp,h}
        * Target.pri:  Changed to add page/AutoscrollController.cpp
        * WebCore.gypi: Changed to add page/AutoscrollController.{cpp,h}
        * WebCore.vcproj/WebCore.vcproj: Changed to add page/AutoscrollController.{cpp,h}
        * WebCore.xcodeproj/project.pbxproj: Changed to add page/AutoscrollController.{cpp,h}
        * page/AutoscrollController.cpp: Added.
        (WebCore::getMainFrame): Helper function.
        (WebCore::AutoscrollController::AutoscrollController): Moved from EventHandler.
        (WebCore::AutoscrollController::autoscrollRenderer): Moved from EventHandler.
        (WebCore::AutoscrollController::autoscrollInProgress): Moved from EventHandler.
        (WebCore::AutoscrollController::startAutoscrollForSelection): Replacement of EventHandler::handleAutoscroll().
        (WebCore::AutoscrollController::stopAutoscrollTimer): Moveed from EventHandler.
        (WebCore::AutoscrollController::updateAutoscrollRenderer): ditto
        (WebCore::AutoscrollController::didPanScrollStart): Added for updating pan scrolling status of main frame.
        (WebCore::AutoscrollController::didPanScrollStop): ditto
        (WebCore::AutoscrollController::handleMouseReleaseEvent): Extracted from EventHandler.
        (WebCore::AutoscrollController::panScrollInProgress): Replacement of EventHandler::m_panScrollInProgress.
        (WebCore::AutoscrollController::startPanScrolling): Moved from EventHandler::startPanScrolling()
        (WebCore::AutoscrollController::autoscrollTimerFired): Moved from EventHandler::autoscrollTimerFired().
        (WebCore::AutoscrollController::startAutoscrollTimer): Moved from EventHandler::startAutoscrollTimer().
        (WebCore::AutoscrollController::updatePanScrollState): Moved from EventHandler::updatePanScrollState().
        * page/AutoscrollController.h: Added.
        (AutoscrollController):
        * page/EventHandler.cpp:
        (WebCore::EventHandler::EventHandler): Changed autoscroll and panscroll related member variable initializations to m_autoscrollController initialization.
        (WebCore::EventHandler::handleMouseDraggedEvent): Changed to call AutoscrollController::startAutoscrollForSelection().
        (WebCore::EventHandler::handleMouseReleaseEvent): Changed to remove m_autoscrollInProgress reference.
        (WebCore::EventHandler::didPanScrollStart): Added for updating pan scrolling status of main frame.
        (WebCore::EventHandler::didPanScrollStop): ditto
        (WebCore::EventHandler::startPanScrolling): Changed to call AutoscrollController::startPanScrolling().
        (WebCore::EventHandler::autoscrollRenderer): Changed to use AutoscrollController.
        (WebCore::EventHandler::updateAutoscrollRenderer): ditto
        (WebCore::EventHandler::autoscrollInProgress): ditto
        (WebCore::EventHandler::panScrollInProgress): Added to replace m_panScrollInProgress.
        (WebCore::EventHandler::stopAutoscrollTimer): Changed to use AutoscrollController.
        (WebCore::EventHandler::selectCursor): Changed to use panScrollInProgress().
        (WebCore::EventHandler::handleMousePressEvent): Chagned to call AutoscrollController::handleMousePressEvent().
        (WebCore::EventHandler::keyEvent): Changed to use panScrollInProgress().
        * page/EventHandler.h:
        (WebCore::EventHandler::autoscrollController): Added for using main frame's panScrollInProgress().
        (WebCore::EventHandler::mouseDownWasInSubframe): Added for AutoscrollController.
        * rendering/RenderBox.cpp:
        (WebCore::RenderBox::canAutoscroll): Moved from EventHandler.cpp.
        (WebCore::RenderBox::findAutoscrollable): Moved from EventHandler.cpp.
        * rendering/RenderBox.h:
        (RenderBox): Added new functions canAutoscroll() and findAutoscrollable().

2012-12-13  Beth Dakin  <bdakin@apple.com>

        https://bugs.webkit.org/show_bug.cgi?id=102599
        ASSERT loading Acid3 test in run-safari --debug (r135050)

        Reviewed by Simon Fraser.

        New flag IncludeCompositedDescendants will always calculate the layer bounds for 
        descendants, even when the are composited. 
        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::calculateLayerBounds):
        * rendering/RenderLayer.h:

        calculateCompositedBounds() should not include this new flag, so instead of 
        calling that, call calculateLayerBounds() directly with the 
        IncludeCompositedDescendants flag. This will get us the information we need 
        upfront and avoid the toggling later on. 
        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::requiresCompositingForPosition):

2012-12-13  Tien-Ren Chen  <trchen@chromium.org>

        Don't consider container nodes of other disambiguated nodes
        https://bugs.webkit.org/show_bug.cgi?id=104619

        Reviewed by Eric Seidel.

        It is not uncommon to have a clickable <div> that contains other clickable objects.
        This heuristic avoids excessive disambiguation in that case.

        New unit test: WebFrameTest.DisambiguationPopupNoContainer

        * page/TouchDisambiguation.cpp:
        (WebCore::findGoodTouchTargets):

2012-12-13  Adrienne Walker  <enne@chromium.org>

        Unreviewed, rolling out r137645, r137646, and r137667.
        http://trac.webkit.org/changeset/137645
        http://trac.webkit.org/changeset/137646
        http://trac.webkit.org/changeset/137667
        https://bugs.webkit.org/show_bug.cgi?id=104911

        Breaks some overflow layout tests

        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::RenderLayer):
        (WebCore::RenderLayer::updateDescendantDependentFlags):
        (WebCore::RenderLayer::addChild):
        (WebCore::RenderLayer::removeChild):
        (WebCore::RenderLayer::usesCompositedScrolling):
        (WebCore::RenderLayer::scrollTo):
        (WebCore::RenderLayer::dirtyZOrderLists):
        (WebCore::RenderLayer::dirtyNormalFlowList):
        (WebCore::RenderLayer::updateLayerListsIfNeeded):
        (WebCore::RenderLayer::shouldBeNormalFlowOnly):
        (WebCore::RenderLayer::shouldBeSelfPaintingLayer):
        (WebCore::RenderLayer::styleChanged):
        * rendering/RenderLayer.h:
        (RenderLayer):
        * rendering/RenderLayerBacking.cpp:
        (WebCore::layerOrAncestorIsTransformedOrUsingCompositedScrolling):
        (WebCore::RenderLayerBacking::updateGraphicsLayerConfiguration):
        (WebCore::RenderLayerBacking::updateGraphicsLayerGeometry):
        * rendering/RenderLayerBacking.h:
        (RenderLayerBacking):
        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::computeCompositingRequirements):
        (WebCore::RenderLayerCompositor::requiresCompositingForOverflowScrolling):
        * rendering/RenderLayerCompositor.h:
        (RenderLayerCompositor):
        * testing/InternalSettings.cpp:
        * testing/InternalSettings.h:
        (InternalSettings):
        * testing/InternalSettings.idl:

2012-12-13  Andreas Kling  <akling@apple.com>

        Event dispatch: Avoid heap allocations in ensureEventAncestors() typical case.
        <http://webkit.org/b/104938>

        Reviewed by Anders Carlsson.

        Give the EventTarget and EventContext vectors an inline capacity of 32 (no science here, just a
        non-zero number.) As these vectors are created on the stack already, this is merely using a bit
        more stack space to avoid malloc()ing all the gosh-darn time.

        Looks like ~6% improvement on Dromaeo/jslib-event-prototype.

        * dom/EventDispatcher.cpp:
        (WebCore::EventRelatedTargetAdjuster::adjust):
        (WebCore::EventRelatedTargetAdjuster::findRelatedTarget):
        (WebCore::EventDispatcher::ensureEventAncestors):
        * dom/EventDispatcher.h:
        (EventRelatedTargetAdjuster):
        (EventDispatcher):

2012-12-13  James Simonsen  <simonjam@chromium.org>

        [Resource Timing] Don't report resources with data: urls
        https://bugs.webkit.org/show_bug.cgi?id=104868

        Reviewed by Tony Gentilcore.

        Test: http/tests/w3c/webperf/submission/resource-timing/html/test_resource_ignore_data_url.html

        * loader/cache/CachedResourceLoader.cpp:
        (WebCore::CachedResourceLoader::loadDone):

2012-12-13  Ian Vollick  <vollick@chromium.org>

        Add a missing nullity check in RenderObject::containingBlock
        https://bugs.webkit.org/show_bug.cgi?id=104961

        Reviewed by Adrienne Walker.

        Adds a missing nullity check in an assert.

        No new tests, no change in functionality.

        * rendering/RenderObject.cpp:
        (WebCore::RenderObject::containingBlock):

2012-12-13  Tab Atkins  <tabatkins@google.com>

        Switch the gradient drawing code to use bearing angles
        https://bugs.webkit.org/show_bug.cgi?id=104616

        Reviewed by Dean Jackson.

        Switch the gradient math from polar-coordinate angles to bearing angles.
        To make this possible without behavior changes, 
        switch the m_deprecatedType boolean to an m_gradientType enum,
        and fix all usages accordingly.

        No new tests, as this is a refactoring and should have no behavior changes. Existing tests suffice.

        * css/CSSGradientValue.cpp:
        (WebCore::endPointsFromAngle):
        This is the only mechanical change. The rest are just fixing the plumbing around the boolean->enum change.

        * css/CSSGradientValue.cpp:
        (WebCore::CSSGradientValue::sortStopsIfNeeded):
        (WebCore::CSSGradientValue::addStops):
        (WebCore::CSSLinearGradientValue::customCssText):
        (WebCore::CSSLinearGradientValue::createGradient):
        (WebCore::CSSRadialGradientValue::customCssText):
        * css/CSSGradientValue.h:
        (WebCore::CSSGradientValue::gradientType):
        (WebCore::CSSGradientValue::CSSGradientValue):
        (WebCore::CSSLinearGradientValue::create):
        (WebCore::CSSLinearGradientValue::CSSLinearGradientValue):
        (WebCore::CSSRadialGradientValue::create):
        (WebCore::CSSRadialGradientValue::CSSRadialGradientValue):
        * css/CSSParser.cpp:
        (WebCore::CSSParser::parseDeprecatedGradient):
        (WebCore::CSSParser::parseDeprecatedLinearGradient):
        (WebCore::CSSParser::parseDeprecatedRadialGradient):

2012-12-13  Ian Vollick  <vollick@chromium.org>

        [chromium] Automatically use composited scrolling
        https://bugs.webkit.org/show_bug.cgi?id=94743

        Reviewed by Adrienne Walker.

        We currently use the composited scrolling facilities provided by
        wkb.ug/91117 if the overflow scroll block element is styled with
        -webkit-overflow-scrolling: touch. Ideally, we could automatically
        opt into composited scrolling if it is safe to do so. This can affect
        antialiasing, so it is important that automatically opting in is only
        enabled via a setting.

        The way I determine if it is safe is by checking that z-ordering will
        not be affected if the overflow scrollable element were promoted to a
        stacking context (details below), and that clipping our scrolling
        descendants will not affect rendering.

        To check the first condition (that z-ordering will not be affected).
        I ensure that the candidate element and all its descendants appear as a 
        continuous block in the candidate's stacking context. That is, if no 
        other elements are 'between' any of the candidates descendants when we
        sort in paint order, then we're safe. This is overly conservative,
        however. We could, in future, only consider stacking problems between
        elements that actually overlap.

        To ensure that clipping will not cause a rendering change, I ensure
        that the layer has no out of flow positioned descendant whose
        containing block is not also a descendant of ours.

        Test: compositing/overflow/automatically-opt-into-compositing-scrolling.html

        (WebCore):
        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::RenderLayer):
        (WebCore::RenderLayer::acceleratedCompositingForOverflowScrollEnabled):
        (WebCore):
        (WebCore::RenderLayer::updateDescendantsAreContiguousInStackingOrder):
        (WebCore::RenderLayer::updateDescendantsAreContiguousInStackingOrderRecursive):
        (WebCore::RenderLayer::positionOverflowControlsAfterPromotionToCompositedScrolling):
        (WebCore::RenderLayer::canSafelyEstablishAStackingContext):
          Returns true if the RenderLayer could become a stacking context without
          affecting the stacking order.
        (WebCore::RenderLayer::updateDescendantDependentFlags):
          We now need to keep track of out of flow positioned descendants.
        (WebCore::RenderLayer::addChild):
        (WebCore::RenderLayer::removeChild):
        (WebCore::RenderLayer::usesCompositedScrolling):
          Has been updated to return true if it can safely establish a stacking
          context, and the setting is turned on.
        (WebCore::RenderLayer::needsCompositedScrolling):
          This function returns true if we would like to use composited
          scrolling.
        (WebCore::RenderLayer::updateNeedsCompositedScrolling):
        (WebCore::RenderLayer::scrollTo):
        (WebCore::RenderLayer::dirtyZOrderLists):
        (WebCore::RenderLayer::dirtyNormalFlowList):
          Since these could affect opting into composited scrolling, we must
          request that the RenderLayerCompositor reevaluate compositing.
        (WebCore::RenderLayer::updateLayerListsIfNeeded):
          We call updateCanSafelyEstablishStackingContext here, if necessary.
        (WebCore::RenderLayer::shouldBeNormalFlowOnly):
        (WebCore::RenderLayer::shouldBeSelfPaintingLayer):
          usesCompositedScrolling -> needsCompositedScrolling
        (WebCore::RenderLayer::setAncestorChainHasOutOfFlowPositionedDescendant):
        (WebCore::RenderLayer::dirtyAncestorChainHasOutOfFlowPositionedDescendantStatus):
        (WebCore::RenderLayer::updateOutOfFlowPositioned):
          Dirties and sets the out of flow positioned descendant state.
        (WebCore::RenderLayer::styleChanged):
        * rendering/RenderLayer.h:
        (RenderLayer):
        (WebCore::RenderLayer::hasOutOfFlowPositionedDescendant):
        * rendering/RenderLayerBacking.cpp:
        (WebCore::layerOrAncestorIsTransformedOrUsingCompositedScrolling):
        (WebCore::RenderLayerBacking::updateGraphicsLayerConfiguration):
        (WebCore::RenderLayerBacking::updateGraphicsLayerGeometry):
        (WebCore::RenderLayerBacking::hasUnpositionedOverflowControlsLayers):
        (WebCore):
        * rendering/RenderLayerBacking.h:
        (RenderLayerBacking):
        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::computeCompositingRequirements):
          We now ensure that newly created overflow scroll controls get
          positioned.
        (WebCore::RenderLayerCompositor::requiresCompositingForOverflowScrolling):
        * rendering/RenderLayerCompositor.h:
        (WebCore::RenderLayerCompositor::setShouldReevaluateCompositingAfterLayout):
        * testing/InternalSettings.cpp:
        (WebCore::InternalSettings::setEnableCompositingForOverflowScroll):
          Allows enabling the setting in layout tests.
        (WebCore):
        * testing/InternalSettings.h:
        (InternalSettings):
        * testing/InternalSettings.idl:

2012-12-13  Ryosuke Niwa  <rniwa@webkit.org>

        REGRESSION(r137406): NodeTraversal changes causing large renderer crash
        https://bugs.webkit.org/show_bug.cgi?id=104937

        Reviewed by Antti Koivisto.

        Add a null pointer check to exit early since ElementTraversal::next assumes a non-null pointer.

        No new tests since I don't think this function is ever exposed to any ES5 bindings.

        * editing/FrameSelection.cpp:
        (WebCore::scanForForm):

2012-12-13  David Grogan  <dgrogan@chromium.org>

        IndexedDB: Improve error messages
        https://bugs.webkit.org/show_bug.cgi?id=104624

        Reviewed by Tony Chang.

        Add detail to error messages so that they are more helpful and can be
        traced back to a specific line of code.

        Updated test: transaction-error.html

        * Modules/indexeddb/IDBDatabaseBackendImpl.cpp:
        (WebCore::IDBDatabaseBackendImpl::CreateObjectStoreOperation::perform):
        (WebCore::IDBDatabaseBackendImpl::DeleteObjectStoreOperation::perform):
        (WebCore::IDBDatabaseBackendImpl::VersionChangeOperation::perform):
        (WebCore::IDBDatabaseBackendImpl::openConnection):
        (WebCore::IDBDatabaseBackendImpl::openConnectionWithVersion):
        (WebCore::IDBDatabaseBackendImpl::deleteDatabase):
        (WebCore::IDBDatabaseBackendImpl::close):
        * Modules/indexeddb/IDBFactoryBackendImpl.cpp:
        (WebCore::IDBFactoryBackendImpl::getDatabaseNames):
        (WebCore::IDBFactoryBackendImpl::deleteDatabase):
        (WebCore::IDBFactoryBackendImpl::open):
        * Modules/indexeddb/IDBObjectStoreBackendImpl.cpp:
        (WebCore::IDBObjectStoreBackendImpl::setIndexKeys):
        (WebCore::IDBObjectStoreBackendImpl::createIndex):
        (WebCore::IDBObjectStoreBackendImpl::CreateIndexOperation::perform):
        * Modules/indexeddb/IDBTransactionBackendImpl.cpp:
        (WebCore::IDBTransactionBackendImpl::abort):
        (WebCore::IDBTransactionBackendImpl::commit):

2012-12-13  Claudio Saavedra  <csaavedra@igalia.com>

        [GTK] Safeguard against possible NULL-dereference
        https://bugs.webkit.org/show_bug.cgi?id=104931

        Reviewed by Chris Fleizach.

        This was spotted by Coverity. See bug 104114.

        * accessibility/atk/WebKitAccessibleWrapperAtk.cpp:
        (webkitAccessibleGetIndexInParent): If parent is NULL
        bail out early.

2012-12-13  David Barton  <dbarton@mathscribe.com>

        Heap-use-after-free in WebCore::RenderBlock::finishDelayUpdateScrollInfo
        https://bugs.webkit.org/show_bug.cgi?id=103750

        Reviewed by Tony Chang.

        MathML sometimes creates and destroys renderers for descendants during layout (or even to calculate
        preferred logical widths), e.g. for operator stretching. RenderBlock::finishDelayUpdateScrollInfo
        must therefore leave gDelayedUpdateScrollInfoSet intact as it iterates over it, so
        RenderBlock::willBeDestroyed can call gDelayedUpdateScrollInfoSet->remove(this) effectively if needed.
        This also prevents duplicate entries from being added to gDelayedUpdateScrollInfoSet.

        Test: mathml/mo-stretch-crash.html

        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::startDelayUpdateScrollInfo):
            - Allow gDelayedUpdateScrollInfoSet to be non-null when gDelayUpdateScrollInfo is 0 during
              RenderBlock::finishDelayUpdateScrollInfo.
        (WebCore::RenderBlock::finishDelayUpdateScrollInfo):
            - Remove blocks from gDelayedUpdateScrollInfoSet one at a time, waiting for each block until it is
              about to be updated.

2012-12-13  Alexey Proskuryakov  <ap@apple.com>

        <rdar://problem/12838354> Per-Tab WebProcess: DOM cookie access functions should respect private browsing
        https://bugs.webkit.org/show_bug.cgi?id=104691

        Reviewed by Sam Weinig.

        * platform/network/NetworkingContext.h: Added a function that returns current
        context type. Ideally, we would track contexts across processes in a generic manner,
        but we only have two now, and don't need such complications.

2012-12-13  Alexey Proskuryakov  <ap@apple.com>

        ResourceLoader::didReceiveAuthenticationChallenge uses a wrong client
        https://bugs.webkit.org/show_bug.cgi?id=104935
        <rdar://problem/12870361>

        Reviewed by Anders Carlsson.

        * loader/ResourceLoader.cpp: (WebCore::ResourceLoader::didReceiveAuthenticationChallenge):
        The handle is null when NetworkProcess is used. In any case, it should be correct
        to use the client carried within AuthenticationChallenge.

2012-12-13  Stephen White  <senorblanco@chromium.org>

        CanvasRenderingContext2D::setFont() is slow.
        https://bugs.webkit.org/show_bug.cgi?id=104923

        Reviewed by James Robinson.

        This spends most of its time in the CSS parser.  As a first step,
        early-out if the new value is the same as unparsed string for the current font.
        See also http://code.google.com/p/chromium/issues/detail?id=164016.

        Covered by existing tests in canvas/ and fast/canvas, and ManualTests/canvas-font-speed.html.

        * html/canvas/CanvasRenderingContext2D.cpp:
        (WebCore::CanvasRenderingContext2D::setFont):

2012-12-13  Parth Patel  <parpatel@rim.com>, Max Feil <mfeil@rim.com>

        Allow plugins to be disabled by shared library filename
        https://bugs.webkit.org/show_bug.cgi?id=101274

        Reviewed by Antonio Gomes.

        This fix makes PluginDatabase changes general so that other ports
        can use this mechanism if they wish.

        Layout test not included with this patch because there
        is currently no framework within LayoutTests to allow calls
        from an external application via platform API code (such as the
        WebView API).

        * plugins/PluginDatabase.cpp:
        (WebCore::PluginDatabase::fileExistsAndIsNotDisabled):
        (WebCore):
        (WebCore::PluginDatabase::getDeletedPlugins):
        (WebCore::PluginDatabase::removeDisabledPluginFile):
        (WebCore::PluginDatabase::addDisabledPluginFile):
        (WebCore::PluginDatabase::getPluginPathsInDirectories):
        * plugins/PluginDatabase.h:
        (PluginDatabase):

2012-12-13  Yongjun Zhang  <yongjun_zhang@apple.com>

        Document will never be released when an Image is created inside unload event listener
        https://bugs.webkit.org/show_bug.cgi?id=104830

        Reviewed by Darin Adler.

        When setting src attribute to an Image object inside unload event listener, ImageLoader will
        mark it as load failure (by setting m_hasPendingErrorEvent to true) and the following call
        to updatedHasPendingEvent will ref the element but won't be deref-ed since the Document is
        being dismissed.  This was introduced in r131670.  To match pre r131670 behavior, we shouldn't
        trigger error event for image loading when the page is being dismissed.

        No new tests, there is no visual change.  Manually tested to verify documents are released by
        using heap in Mac OS X.

        * loader/ImageLoader.cpp:
        (WebCore::pageIsBeingDismissed): add a helper function to test whether the page is being dismissed.
        (WebCore::ImageLoader::updateFromElement): don't trigger error event if the page is being dismissed.

2012-12-13  Claudio Saavedra  <csaavedra@igalia.com>

        [GTK] Add missing breaks in switch-case statements
        https://bugs.webkit.org/show_bug.cgi?id=104929

        Reviewed by Martin Robinson.

        * platform/gtk/ClipboardGtk.cpp:
        (WebCore::ClipboardGtk::clearData): Add missing breaks.

2012-12-13  Nate Chapin  <japhet@chromium.org>

        Route main resource loads through the memory cache.
        https://bugs.webkit.org/show_bug.cgi?id=49246

        Reviewed by Alexey Proskuryakov.

        Note that this patch doesn't actually enable caching of main resources. That will be done in a later patch.
        The MainResourceLoader actually has an underlying SubresourceLoader (with the cache layer between them).
        In several places, the MainResourceLoader's SubresourceLoader is treated as special.

        No new tests, as this is primarily a refactor. A couple of expected results changed slightly.

        * loader/DocumentLoader.cpp:
        (WebCore::DocumentLoader::setRequest):
        (WebCore::DocumentLoader::subresource):
        (WebCore::DocumentLoader::addSubresourceLoader): Because the SubresourceLoader underlying the main resource
            needs special handling in certain cases, track it separately from the real SubresourceLoaders.
        (WebCore::DocumentLoader::removeSubresourceLoader):
        (WebCore::DocumentLoader::startLoadingMainResource):
        * loader/MainResourceLoader.cpp:
        (WebCore::MainResourceLoader::MainResourceLoader):
        (WebCore::MainResourceLoader::receivedError):
        (WebCore::MainResourceLoader::cancel):
        (WebCore::MainResourceLoader::clearResource):
        (WebCore):
        (WebCore::MainResourceLoader::frameLoader):
        (WebCore::MainResourceLoader::request):
        (WebCore::MainResourceLoader::continueAfterNavigationPolicy):
        (WebCore::MainResourceLoader::resourceData):
        (WebCore::MainResourceLoader::redirectReceived):
        (WebCore::MainResourceLoader::willSendRequest):
        (WebCore::MainResourceLoader::continueAfterContentPolicy):
        (WebCore::MainResourceLoader::responseReceived):
        (WebCore::MainResourceLoader::dataReceived):
        (WebCore::MainResourceLoader::didFinishLoading):
        (WebCore::MainResourceLoader::notifyFinished):
        (WebCore::MainResourceLoader::reportMemoryUsage):
        (WebCore::MainResourceLoader::handleSubstituteDataLoadNow):
        (WebCore::MainResourceLoader::load):
        (WebCore::MainResourceLoader::setDefersLoading):
        (WebCore::MainResourceLoader::defersLoading):
        (WebCore::MainResourceLoader::setShouldBufferData):
        (WebCore::MainResourceLoader::loader):
        (WebCore::MainResourceLoader::identifier):
        * loader/MainResourceLoader.h:
        (MainResourceLoader):
        (WebCore::MainResourceLoader::documentLoader):
        * loader/ResourceLoader.cpp:
        (WebCore::ResourceLoader::willSendRequest):
        * loader/ResourceLoader.h:
        (WebCore::ResourceLoader::defersLoading):
        (WebCore::ResourceLoader::cancelled):
        * loader/appcache/ApplicationCacheHost.cpp:
        (WebCore::ApplicationCacheHost::maybeLoadFallbackForMainResponse):
        (WebCore::ApplicationCacheHost::maybeLoadFallbackForMainError):
        * loader/mac/DocumentLoaderMac.cpp:
        (WebCore::DocumentLoader::schedule):
        (WebCore::DocumentLoader::unschedule):

2012-12-13  Pratik Solanki  <psolanki@apple.com>

        Duplicate code in GraphicsContext3D::validateAttributes() and GraphicsContext3D::validateDepthStencil()
        https://bugs.webkit.org/show_bug.cgi?id=97275

        Reviewed by Dean Jackson.

        Remove duplicate code in validateAttributes(). validateAttributes() calls
        validateDepthStencil() which has the exact same code.

        No new tests because no change in functionality.

        * platform/graphics/opengl/GraphicsContext3DOpenGL.cpp:
        (WebCore::GraphicsContext3D::validateAttributes):

2012-12-13  Nate Chapin  <japhet@chromium.org>

        CachedResources should hang on to stripped fragment identifiers
        https://bugs.webkit.org/show_bug.cgi?id=104721

        Reviewed by Maciej Stachowiak.

        No new tests, this will be unused until bug
        https://bugs.webkit.org/show_bug.cgi?id=49246 re-lands. Then, it will
        allow http/tests/inspector/resource-parameters.html to continue passing.

        * loader/cache/CachedResource.cpp:
        (WebCore::CachedResource::CachedResource):
        (WebCore::CachedResource::load):
        * loader/cache/CachedResource.h:
        (CachedResource):
        * loader/cache/CachedResourceLoader.cpp:
        (WebCore::CachedResourceLoader::requestResource): We override the request's url with the
            local variable "url" here. The only difference between url and request.url() is that url
            has had any fragment identifier removed. Do this work later (in the CachedResource constructor)
            so that the CachedResource can save the fragment for later.

2012-12-13  Claudio Saavedra  <csaavedra@igalia.com>

        [GTK] Remove deprecated API usage
        https://bugs.webkit.org/show_bug.cgi?id=104894

        Reviewed by Martin Robinson.

        Remove deprecated GTK+ API usage.

        * platform/gtk/RenderThemeGtk3.cpp:
        (WebCore::spinButtonArrowSize): Do not use deprecated
        gtk_style_context_get_font().

2012-12-13  Zeno Albisser  <zeno@webkit.org>

        [Qt] Remove temporary workaround from GraphicsSurfaceGLX constructor.
        https://bugs.webkit.org/show_bug.cgi?id=104904

        QXcbNativeInterface::nativeResourceForContext() is now
        available in Qt5. Therefore the temporary workaround
        in GraphicsSurfaceGLX can be removed.

        Reviewed by Kenneth Rohde Christiansen.

        * platform/graphics/surfaces/glx/GraphicsSurfaceGLX.cpp:
        (WebCore::GraphicsSurfacePrivate::GraphicsSurfacePrivate):

2012-12-13  Joanmarie Diggs  <jdiggs@igalia.com>

        [GTK] Expose ARIA roles for tab, tabpanel and tablist
        https://bugs.webkit.org/show_bug.cgi?id=84043

        Reviewed by Martin Robinson.

        Mapped the ARIA roles to their corresponding ATK roles.

        No new tests; instead unskipped the associated test.

        * accessibility/atk/WebKitAccessibleWrapperAtk.cpp:
        (atkRole): Mapped the ARIA roles to their corresponding ATK roles

2012-12-13  Vivek Galatage  <vivek.vg@samsung.com>

        Web Inspector: "Add Attribute" context menu on closing tag should apply on the opening tag on Elements Panel
        https://bugs.webkit.org/show_bug.cgi?id=104902

        Reviewed by Alexander Pavlov.

        The context menu action on the closing tag scrolls to the opening tag for adding the attribute.

        No new tests as this is a UI change.

        * inspector/front-end/ElementsTreeOutline.js:
        (WebInspector.ElementsTreeElement.prototype._populateTagContextMenu):
        (WebInspector.ElementsTreeElement.prototype._addNewAttribute):

2012-12-13  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r137512.
        http://trac.webkit.org/changeset/137512
        https://bugs.webkit.org/show_bug.cgi?id=104912

        The entire GTK+ layout test step has been failing for hours
        (Requested by mrobinson on #webkit).

        * accessibility/AccessibilityNodeObject.cpp:
        (WebCore::AccessibilityNodeObject::textUnderElement):
        * accessibility/AccessibilityRenderObject.cpp:
        (WebCore::AccessibilityRenderObject::textUnderElement):

2012-12-13  Tamas Czene  <tczene@inf.u-szeged.hu>

        OpenCL version of FEColorMatrix.
        https://bugs.webkit.org/show_bug.cgi?id=103398

        Reviewed by Zoltan Herczeg.

        ~3x speed-up (depending on hardware configuration)

        * Target.pri: Added a new file to the build system.
        * platform/graphics/filters/FEColorMatrix.cpp: calculateSaturateComponents and calculateHueRotateComponents methodes are moved to the header, since they are used by OpenCL as well
        (WebCore::effectType):
        * platform/graphics/filters/FEColorMatrix.h:
        (FEColorMatrix):
        (WebCore::FEColorMatrix::calculateSaturateComponents):
        (WebCore):
        (WebCore::FEColorMatrix::calculateHueRotateComponents):
        * platform/graphics/gpu/opencl/FilterContextOpenCL.h: Required fields for the ColorMatrix kernels were added
        (WebCore::FilterContextOpenCL::FilterContextOpenCL):
        (FilterContextOpenCL):
        * platform/graphics/gpu/opencl/OpenCLFEColorMatrix.cpp: the core implementation goes here
        (WebCore):
        (WebCore::FilterContextOpenCL::compileFEColorMatrix):
        (WebCore::FilterContextOpenCL::applyFEColorMatrix):
        (WebCore::FEColorMatrix::platformApplyOpenCL):

2012-12-13  Ilya Tikhonovsky  <loislo@chromium.org>

        Web Inspector: Native Memory Instrumentation: do not validate pointers to objects in RenderArena agains tcmalloc data.
        https://bugs.webkit.org/show_bug.cgi?id=104903

        Reviewed by Yury Semikhatsky.

        This is a simplest approach to do that with zero performance overhead.

        * inspector/InspectorResourceAgent.cpp:
        (WebCore::InspectorResourceAgent::reportMemoryUsage):
        * rendering/InlineBox.cpp:
        (WebCore::InlineBox::reportMemoryUsage):
        (WebCore):
        * rendering/InlineBox.h:
        (InlineBox):
        * rendering/InlineTextBox.cpp:
        (WebCore::InlineTextBox::reportMemoryUsage):
        (WebCore):
        * rendering/InlineTextBox.h:
        (InlineTextBox):
        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::reportMemoryUsage):
        * rendering/RenderObject.cpp:
        (WebCore::RenderObject::reportMemoryUsage):

2012-12-13  Alberto Garcia  <agarcia@igalia.com>

        [GTK] Don't leak GStaticRecMutex
        https://bugs.webkit.org/show_bug.cgi?id=104901

        Reviewed by Martin Robinson.

        The mutex in WebKitWebAudioSourceGStreamer is allocated using
        g_new(), but that memory is not freed when the object is
        destroyed.

        This patch replaces that pointer with the structure itself, which
        is faster and doesn't need to be explicitly freed.

        * platform/audio/gstreamer/WebKitWebAudioSourceGStreamer.cpp:
        (_WebKitWebAudioSourcePrivate):
        (webkit_web_audio_src_init):
        (webKitWebAudioSrcFinalize):

2012-12-13  Eugene Klyuchnikov  <eustas@chromium.org>

        Web Inspector: Network: Sorting cookies by size is broken.
        https://bugs.webkit.org/show_bug.cgi?id=104893

        Reviewed by Alexander Pavlov.

        Problem: cookie "size" is not a field now; its value is accessible
        through getter method.

        Solution: make cookie fields uniformly accessible (add getters for name,
        type and value).

        * inspector/front-end/CookieItemsView.js: Adopt changes.
        * inspector/front-end/CookieParser.js:
        (WebInspector.Cookie): Refine JsDoc.
        (WebInspector.Cookie.prototype.name): Added getter.
        (WebInspector.Cookie.prototype.value): Ditto.
        (WebInspector.Cookie.prototype.type): Ditto.
        (WebInspector.Cookies.buildCookiesFromString): Adopt changes.
        (WebInspector.Cookies.buildCookieProtocolObject): Ditto.
        * inspector/front-end/CookiesTable.js:
        (WebInspector.CookiesTable): Remove unused parameter.
        (WebInspector.CookiesTable.prototype._sortCookies):
        Use getters instead of field names.
        (WebInspector.CookiesTable.prototype._createGridNode): Adopt changes.
        * inspector/front-end/HAREntry.js: Ditto.
        * inspector/front-end/RequestCookiesView.js: Ditto.

2012-12-13  Kentaro Hara  <haraken@chromium.org>

        Unreviewed, rolling out r137569.
        http://trac.webkit.org/changeset/137569
        https://bugs.webkit.org/show_bug.cgi?id=104876

        A bunch of CSS tests hit ASSERTs

        * css/CSSProperty.h:
        (WebCore::CSSProperty::CSSProperty):

2012-12-13  Byungwoo Lee  <bw80.lee@samsung.com>

        [EFL] Remove redundant pipe write to prevent pipe buffer full.
        https://bugs.webkit.org/show_bug.cgi?id=101135

        Reviewed by Gyuyoung Kim.

        To prevent a source of a deadlock, remove the redundant pipe write
        in wakeUp() function.

        EFL uses ecore_pipe_write() to wake up main run loop, and the function
        uses POSIX pipe write with O_NONBLOCK disabled.
        With O_NONBLOCK disabled, when written data is more than PIPE_BUF,
        pipe write will be blocked until it can be written.

        Currently, every wakeUp() function calls ecore_pipe_write() to invoke
        wakeUpEvent() callback. And this can make pipe buffer full status
        which is the one reason of the lockup problem described in Bug 99494.

        * platform/RunLoop.h:
        (RunLoop):
        * platform/efl/RunLoopEfl.cpp:
        (WebCore::RunLoop::RunLoop):
        (WebCore::RunLoop::wakeUpEvent):
        (WebCore::RunLoop::wakeUp):

2012-12-13  Antti Harju  <antti.harju@ixonos.com>

        [Qt] Fix deleteAllCookies() invalid SQL statement
        https://bugs.webkit.org/show_bug.cgi?id=101580

        Reviewed by Jocelyn Turcotte.

        * platform/network/qt/CookieJarQt.cpp:
        (WebCore::SharedCookieJarQt::deleteAllCookies):

2012-12-13  Ryosuke Niwa  <rniwa@webkit.org>

        Safari spends a lot of time in WebCore::findSimpleWordBoundary while selecting text on large scrabutility.com page
        https://bugs.webkit.org/show_bug.cgi?id=104884

        Reviewed by Hajime Morita.

        We don't need to do anything in AlternativeTextController if selection is already outside of the editable region.

        No new tests are added since this is only a performance improvement, and doesn't change any asymptotic behavior.

        * editing/AlternativeTextController.cpp:
        (WebCore::AlternativeTextController::respondToChangedSelection):

2012-12-12  Jon Lee  <jonlee@apple.com>

        Crash in PlugInOriginHash with empty MIME type (104882)
        https://bugs.webkit.org/show_bug.cgi?id=104882
        <rdar://problem/12872298>

        Reviewed by Filip Pizlo.

        The crash occurs because the strings might be null. Add a check for it, but also try to infer a MIME type
        in case the markup does not include a type attribute, but we can find it from the extension in the URL.

        * platform/KURL.cpp: Add a new function mimeTypeFromURL() which tries to return the implied MIME type
        based on the URL provided. If nothing was found, return a null string.
        (WebCore::mimeTypeFromURL): Factored out from FrameLoader::defaultObjectContentType().
        * platform/KURL.h:

        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::defaultObjectContentType): Refactor to use mimeTypeFromURL().
        * plugins/PlugInOriginHash.cpp:
        (WebCore::addCaseFoldedCharacters): Add a check for an empty string.
        (WebCore::PlugInOriginHash::hash): If the service type is empty, try to infer the MIME type.

2012-12-13  Christophe Dumez  <christophe.dumez@intel.com>

        Regression(r137486): Broke EFL build
        https://bugs.webkit.org/show_bug.cgi?id=104883

        Unreviewed EFL build fix.

        Fix EFL build break after r137486 due to missing WebCore::
        namespace.

        No new tests, no behavior change for layout tests.

        * platform/NotImplemented.h:

2012-12-07  Levi Weintraub  <leviw@chromium.org>

        Add support for tracking hit test rectangles to enable fast event rejection in the compositor
        https://bugs.webkit.org/show_bug.cgi?id=103914

        Reviewed by Simon Fraser.

        Adding support for tracking hit test target regions for the purpose of performing initial hit testing
        in the compositor to avoid blocking scrolling on the main thread while waiting to hit test events that
        aren't occuring in regions with handlers. This is initially being done to avoid having to go to the main
        thread when scrolling by flicking on touch devices when the flick occurs outside a tracked touch event
        region. This patch includes the implementation to turn this on in Chromium.

        To accomplish this goal, Document will now keep a counted hash set of nodes with touch event handlers
        instead of only an unsigned integer of the total count. ScrollingCoordinator then updates the compositor
        when new touch event handlers are registered or removed, or after layout much like how
        nonFastScrollableRegions are currently tracked.

        This implementation will not properly update the hit test rects when the renderers are inside a sub-
        tree that scrolls.

        Test: platform/chromium/fast/events/touch/compositor-touch-hit-rects.html

        * dom/Document.cpp:
        (WebCore::Document::Document): Added a HashCountedSet of touch target nodes. Note: DOMWindow targets
        are stored as the Document they point to.
        (WebCore::Document::didAddTouchEventHandler): Changed to keep track of the handler instead of a count, and
        to update the ScrollingCoordinator with the change.
        (WebCore::Document::didRemoveTouchEventHandler): Ditto.
        * dom/Document.h:
        (WebCore::Document::hasTouchEventHandlers): It's no longer O(1) to get the count of touch handlers, so
        expose whether there are any or not.
        (WebCore::Document::touchEventTargets):
        * dom/Node.cpp:
        (WebCore::Node::didMoveToNewDocument):
        (WebCore::tryAddEventListener):
        (WebCore::tryRemoveEventListener):
        * history/CachedFrame.cpp:
        (WebCore::CachedFrameBase::restore):
        * html/HTMLInputElement.cpp:
        (WebCore::HTMLInputElement::~HTMLInputElement):
        (WebCore::HTMLInputElement::updateType):
        * page/DOMWindow.cpp:
        (WebCore::DOMWindow::addEventListener): Add the Document to the touch target set instead of DOMWindow.
        (WebCore::DOMWindow::removeEventListener):
        * page/EventHandler.cpp:
        (WebCore::EventHandler::handleTouchEvent):
        * page/Frame.cpp:
        (WebCore::Frame::setDocument):
        * page/scrolling/ScrollingCoordinator.cpp:
        (WebCore::ScrollingCoordinator::computeAbsoluteTouchEventTargetRects): Walk the renderers for event handler
        nodes and generate the absolute hit testing rects.
        * page/scrolling/ScrollingCoordinator.h:
        (WebCore::ScrollingCoordinator::setTouchEventTargetRectsChanged): Hook to pass along the hit test rects to
        the scrolling tree/compositor.
        (ScrollingCoordinator):
        * page/scrolling/chromium/ScrollingCoordinatorChromium.cpp:
        (WebCore::ScrollingCoordinatorChromium::frameViewLayoutUpdated):
        (WebCore::ScrollingCoordinatorChromium::setTouchEventTargetRectsChanged):
        (WebCore::ScrollingCoordinatorChromium::setNonFastScrollableRegion):
        (WebCore::ScrollingCoordinatorChromium::setTouchEventTargetRects):
        * page/scrolling/chromium/ScrollingCoordinatorChromium.h:
        (ScrollingCoordinatorChromium):
        * testing/Internals.cpp:
        (WebCore::Internals::touchEventHandlerCount): Changed to do the work to calculate the actual count since
        it's no longer stored as an int in Document.
        (WebCore::Internals::touchEventTargetClientRects):
        * testing/Internals.h:
        (Internals):
        * testing/Internals.idl:

2012-12-12  Luke Macpherson   <macpherson@chromium.org>

        Add ASSERTions to ensure that CSSPropertys that are variables only ever refer to CSSValues that are variables.
        https://bugs.webkit.org/show_bug.cgi?id=104876

        Reviewed by Steve Block.

        Add assertions to CSSProperty constructors to make that if it is initialized with CSSPropertyVariable that
        the value type associated with it is also a variable. This is already asserted at read time, but ASSERTing
        here will produce a more useful backtrace.

        No new tests as functionality unchanged.

        * css/CSSProperty.h:
        (WebCore::CSSProperty::CSSProperty):

2012-12-12  Gyuyoung Kim  <gyuyoung.kim@samsung.com>

        NetworkInfoController needs to support destructor
        https://bugs.webkit.org/show_bug.cgi?id=104642

        Reviewed by Kentaro Hara.

        Though NetworkInfoController can be referenced by each port in order to update network status change,
        there is no virtual interface to destroy it. Beside each port client also needs to be destroyed when
        controller is destroyed.

        * Modules/networkinfo/NetworkInfoClient.h:
        (NetworkInfoClient):
        * Modules/networkinfo/NetworkInfoConnection.h:
        (WebCore::NetworkInfoConnection::networkInfoControllerDestroyed):
        * Modules/networkinfo/NetworkInfoController.cpp:
        (WebCore::NetworkInfoController::~NetworkInfoController):

2012-12-12  Kent Tamura  <tkent@chromium.org>

        Validity of a radio button is not updated correctly when it is detached from an invalid radio group
        https://bugs.webkit.org/show_bug.cgi?id=104873

        Reviewed by Kentaro Hara.

        When a radio button is detached from an invalid radio group,
        A) we should update button's validity, and
        B) it should be valid.

        A is handled by the following code in RadioButtonGroup::remove.
            if (!wasValid) {
                // A radio button not in a group is always valid. We need to make it
                // valid only if the group was invalid.
                button->setNeedsValidityCheck();

        B was incomplete.
            bool RadioInputType::valueMissing(const String&) const
            {
                return element()->isInRequiredRadioButtonGroup() && !element()->checkedRadioButtonForGroup();
        isInRequiredRadioButtonGroup checked required state of a group with the
        name attribute value even if the radio button was already detached from
        the group. isInRequiredRadioButtonGroup should check membership of the
        radio button precisely.

        Tests: Update fast/forms/radio/radio-live-validation-style.html

        * dom/CheckedRadioButtons.cpp:
        (RadioButtonGroup): Declare contains.
        (WebCore::RadioButtonGroup::contains): Added.
        (WebCore::CheckedRadioButtons::isInRequiredGroup): Renamed from
        isRequiredGroup. This function takes HTMLInputElement* argument.
        * dom/CheckedRadioButtons.h:
        (CheckedRadioButtons): Rename isRequiredGroup to isInRequiredGroup.
        * html/HTMLInputElement.cpp:
        (WebCore::HTMLInputElement::isInRequiredRadioButtonGroup):
        Make this non-const becaues RadioButtonGroup::m_members needs non-const
        pointers. Use CheckedRadioButtons::isInRequiredGroup.
        * html/HTMLInputElement.h:
        (HTMLInputElement): Make isInRequiredRadioButtonGroup non-const.

2012-12-12  Shinya Kawanaka  <shinyak@chromium.org>

        ContainerNodeAlgorithm::notifyInsertedIntoDocument is not used
        https://bugs.webkit.org/show_bug.cgi?id=104874

        Reviewed by Hajime Morita.

        ContainerNodeAlgorithm::notifyInsertedIntoDocument() is not used by anyone. We can remove it safely.

        No new tests, no change in behavior.

        * dom/ContainerNodeAlgorithms.h:

2012-12-12  Kunihiko Sakamoto  <ksakamoto@chromium.org>

        Milliseconds field of date/time input UI should respect step attribute
        https://bugs.webkit.org/show_bug.cgi?id=104628

        Reviewed by Kent Tamura.

        This patch makes step-up/-down UI of the milliseconds fields respect step attribute
        in a special case when the step is divisible by 1000 milliseconds.

        Test: fast/forms/time-multiple-fields/time-multiple-fields-stepup-stepdown-from-renderer.html

        * html/shadow/DateTimeEditElement.cpp:
        (WebCore::DateTimeEditBuilder::visitField):
        If step of the element (in milliseconds) is divisible by 1000, use it as the step of the milliseconds field. Otherwise, the millisecond field has step 1.
        * html/shadow/DateTimeFieldElements.cpp:
        (WebCore::DateTimeMillisecondFieldElement::DateTimeMillisecondFieldElement): Add step and stepBase arguments.
        (WebCore::DateTimeMillisecondFieldElement::create): Ditto.
        * html/shadow/DateTimeFieldElements.h:
        (DateTimeMillisecondFieldElement): Ditto.
        * html/shadow/DateTimeNumericFieldElement.cpp:
        (WebCore::DateTimeNumericFieldElement::DateTimeNumericFieldElement): Ditto.
        (WebCore::DateTimeNumericFieldElement::stepDown): Changed to compute next allowed value using roundDown().
        (WebCore::DateTimeNumericFieldElement::stepUp): Changed to compute next allowed value using roundUp().
        (WebCore::DateTimeNumericFieldElement::roundDown): Added.
        (WebCore::DateTimeNumericFieldElement::roundUp): Added.
        * html/shadow/DateTimeNumericFieldElement.h:
        (DateTimeNumericFieldElement): Add m_step and m_stepBase fields.

2012-12-12  Julien Chaffraix  <jchaffraix@webkit.org>

        [CSS Grid Layout] Include paddings and borders into the grid element's logical height / width
        https://bugs.webkit.org/show_bug.cgi?id=104818

        Reviewed by Tony Chang.

        This change makes RenderGrid add the borders and paddings in the right direction during layout
        so that the grid element's size accounts them like any other renderer.

        Test: fast/css-grid-layout/grid-element-padding-margin.html

        * rendering/RenderGrid.cpp:
        (WebCore::RenderGrid::computePreferredLogicalWidths):
        (WebCore::RenderGrid::layoutGridItems):

2012-12-12  Roger Fong  <roger_fong@apple.com>

        Include Apple Windows in GraphicsLayer::supportsBackgroundColorContent().
        https://bugs.webkit.org/show_bug.cgi?id=104852.

        Reviewed by Simon Fraser.

        * platform/graphics/GraphicsLayer.h:
        (WebCore::GraphicsLayer::supportsBackgroundColorContent):

2012-12-12  KyungTae Kim  <ktf.kim@samsung.com>

        Unused parameters on TextureMapperImageBuffer.cpp
        https://bugs.webkit.org/show_bug.cgi?id=104857

        Reviewed by Kentaro Hara.

        The updateContents has unused parameter 'textureMapper',
        remove the parameter name to fix 'unused parameter' build warning. 

        * platform/graphics/texmap/TextureMapperImageBuffer.cpp:
        (WebCore::BitmapTextureImageBuffer::updateContents):

2012-12-12  Shinya Kawanaka  <shinyak@chromium.org>

        [Shadow] HTMLContentElement::getDistributedNodes() doesn't work correctly if not in document tree.
        https://bugs.webkit.org/show_bug.cgi?id=104345

        Reviewed by Hajime Morita.

        Since document->updateLayout() does affect nodes in Document, distribution will not occur in
        InsertionPoints out of Document. We have to find the element in document tree scope, and start distribution from it.

        Test: fast/dom/shadow/get-distributed-nodes-orphan.html

        * html/shadow/InsertionPoint.cpp:
        (WebCore::InsertionPoint::getDistributedNodes):

2012-12-12  Patrick Gansterer  <paroga@webkit.org>

        [WIN] Implement WebCore::fileSystemRepresentation() for !USE(CF)
        https://bugs.webkit.org/show_bug.cgi?id=104456

        Reviewed by Brent Fulgham.

        Convert the UTF-16 path to the system default Windows ANSI code page (usually Windows Latin1).

        * platform/win/FileSystemWin.cpp:
        (WebCore::fileSystemRepresentation):

2012-12-12  No'am Rosenthal  <noam@webkit.org>

        [Texmap] Remove lowp/highp indicators as they're not needed with ANGLE.
        https://bugs.webkit.org/show_bug.cgi?id=104707

        Reviewed by Kenneth Rohde Christiansen.

        lowp/highp indicator were needed for GLES2, but ANGLE does not require them.

        Covered by existing tests.

        * platform/graphics/texmap/TextureMapperShaderManager.cpp:
        (WebCore::getShaderSpec):

2012-12-12  Andy Estes  <aestes@apple.com>

        Don't dispatch fake mousemove events when we don't know where the cursor is
        https://bugs.webkit.org/show_bug.cgi?id=104861

        Reviewed by Sam Weinig.

        When EventHandler is instantiated or cleared, it sets the current mouse
        position to (0, 0), even though this is probably not where the mouse
        cursor really is (and we won't know until the mouse moves into the WebView).
        If a fake mousemove event fires and the page has an element at (0, 0)
        that responds to mousemove, we might end up changing the cursor or
        displaying a tooltip at the current mouse position, even if it is
        outside the WebView.

        Fake mousemove events are dispatched in order to update a cursor that
        is already over the WebView. Don't dispatch the event if we don't know
        this to be true.

        * page/EventHandler.cpp:
        (WebCore::EventHandler::EventHandler): Instantiate m_mousePositionIsUnknown to true.
        (WebCore::EventHandler::clear): Reset m_mousePositionIsUnknown to true.
        (WebCore::EventHandler::dispatchFakeMouseMoveEventSoon): Return early if the mouse position is unknown.
        (WebCore::EventHandler::setLastKnownMousePosition): Set the mouse position from the PlatformMouseEvent and set m_mousePositionIsUnknown to false.
        (WebCore::EventHandler::handleMousePressEvent): Call setLastKnownMousePosition() instead of setting the position directly.
        (WebCore::EventHandler::handleMouseDoubleClickEvent): Ditto.
        (WebCore::EventHandler::handleMouseMoveEvent): Ditto.
        (WebCore::EventHandler::handleMouseReleaseEvent): Ditto.
        (WebCore::EventHandler::updateSelectionForMouseDrag): Rename currentMouse(Global)Position to lastKnownMouse(Global)Position.
        (WebCore::EventHandler::handleAutoscroll): Ditto.
        (WebCore::EventHandler::updatePanScrollState): Ditto.
        (WebCore::EventHandler::lastKnownMousePosition): Ditto.
        (WebCore::EventHandler::dispatchFakeMouseMoveEventSoonInQuad): Ditto.
        (WebCore::EventHandler::fakeMouseMoveEventTimerFired): Ditto.
        (WebCore::EventHandler::hoverTimerFired): Ditto.
        * page/FrameView.cpp:
        (WebCore::FrameView::lastKnownMousePosition): Ditto.
        * platform/ScrollableArea.h:
        (WebCore::ScrollableArea::lastKnownMousePosition): Ditto.
        * platform/mac/ScrollAnimatorMac.mm:
        (-[WebScrollbarPainterControllerDelegate mouseLocationInContentAreaForScrollerImpPair:]): Ditto.
        (-[WebScrollbarPainterDelegate mouseLocationInScrollerForScrollerImp:]): Ditto.
        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::panScrollFromPoint): Ditto.
        (WebCore::RenderLayer::autoscroll): Ditto.
        (WebCore::RenderLayer::lastKnownMousePosition): Ditto.
        * rendering/RenderListBox.cpp:
        (WebCore::RenderListBox::panScroll): Ditto.
        (WebCore::RenderListBox::autoscroll): Ditto.
        (WebCore::RenderListBox::lastKnownMousePosition): Ditto.

2012-12-12  Martin Robinson  <mrobinson@igalia.com>

        Try to fix the GTK+ debug bulid

        Logging.h is no longer included in headers, so we need to include it manually in
        files that require logging macros.

        * platform/graphics/gstreamer/MediaPlayerPrivateGStreamer.cpp: Include Logging.h.

2012-12-12  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r137524.
        http://trac.webkit.org/changeset/137524
        https://bugs.webkit.org/show_bug.cgi?id=104859

        Causes m_deletionHasBegun assertion failures in
        MutationObserver tests (Requested by aklein on #webkit).

        * dom/Document.cpp:
        (WebCore::Document::Document):
        (WebCore::Document::~Document):
        (WebCore::Document::suggestedMIMEType):
        * dom/Document.h:
        (WebCore::Node::isDocumentNode):
        (WebCore):
        (WebCore::Node::treeScope):
        (WebCore::Node::Node):
        * dom/Element.cpp:
        (WebCore::Element::createRareData):
        * dom/ElementRareData.h:
        (ElementRareData):
        (WebCore::ElementRareData::ElementRareData):
        * dom/Node.cpp:
        (WebCore::Node::~Node):
        (WebCore::Node::setDocument):
        (WebCore):
        (WebCore::Node::setTreeScope):
        (WebCore::Node::createRareData):
        (WebCore::Node::attach):
        (WebCore::Node::reportMemoryUsage):
        * dom/Node.h:
        (WebCore):
        (WebCore::NodeRareDataBase::treeScope):
        (WebCore::NodeRareDataBase::setTreeScope):
        (NodeRareDataBase):
        (WebCore::NodeRareDataBase::NodeRareDataBase):
        (Node):
        (WebCore::Node::inDocument):
        (WebCore::Node::documentInternal):
        * dom/NodeRareData.cpp:
        (SameSizeAsNodeRareData):
        (WebCore::NodeRareData::reportMemoryUsage):
        * dom/NodeRareData.h:
        (WebCore::NodeRareData::NodeRareData):
        * dom/ShadowRoot.cpp:
        (WebCore::ShadowRoot::ShadowRoot):
        * dom/TreeScope.cpp:
        (SameSizeAsTreeScope):
        (WebCore::TreeScope::TreeScope):
        (WebCore::TreeScope::setParentTreeScope):
        * dom/TreeScope.h:
        (WebCore):
        (TreeScope):
        * dom/TreeScopeAdopter.cpp:
        (WebCore::TreeScopeAdopter::moveTreeToNewScope):
        (WebCore::TreeScopeAdopter::moveNodeToNewDocument):

2012-12-12  Seokju Kwon  <seokju.kwon@gmail.com>

        Fix build warning when ENABLE_INSPECTOR is disabled
        https://bugs.webkit.org/show_bug.cgi?id=104757

        Reviewed by Kentaro Hara.

        Use UNUSED_PARAM macro to fix build warning -Wunused-parameter.

        No new tests, no behavior change.

        * inspector/InspectorCanvasInstrumentation.h:
        (WebCore::InspectorInstrumentation::wrapCanvas2DRenderingContextForInstrumentation):
        (WebCore::InspectorInstrumentation::wrapWebGLRenderingContextForInstrumentation):
        * inspector/InspectorConsoleInstrumentation.h:
        (WebCore::InspectorInstrumentation::addMessageToConsole):
        (WebCore::InspectorInstrumentation::consoleCount):
        (WebCore::InspectorInstrumentation::startConsoleTiming):
        (WebCore::InspectorInstrumentation::stopConsoleTiming):
        (WebCore::InspectorInstrumentation::consoleTimeStamp):
        (WebCore::InspectorInstrumentation::addStartProfilingMessageToConsole):
        (WebCore::InspectorInstrumentation::addProfile):
        (WebCore::InspectorInstrumentation::profilerEnabled):
        (WebCore::InspectorInstrumentation::getCurrentUserInitiatedProfileName):
        * inspector/InspectorCounters.h:
        (WebCore::InspectorCounters::incrementCounter):
        (WebCore::InspectorCounters::decrementCounter):
        * inspector/InspectorDatabaseInstrumentation.h:
        (WebCore::InspectorInstrumentation::didOpenDatabase):
        * inspector/InspectorInstrumentation.h:
        (WebCore::InspectorInstrumentation::didClearWindowObjectInWorld):
        (WebCore::InspectorInstrumentation::isDebuggerPaused):
        (WebCore::InspectorInstrumentation::willInsertDOMNode):
        (WebCore::InspectorInstrumentation::didInsertDOMNode):
        (WebCore::InspectorInstrumentation::willRemoveDOMNode):
        (WebCore::InspectorInstrumentation::willModifyDOMAttr):
        (WebCore::InspectorInstrumentation::didModifyDOMAttr):
        (WebCore::InspectorInstrumentation::didRemoveDOMAttr):
        (WebCore::InspectorInstrumentation::didInvalidateStyleAttr):
        (WebCore::InspectorInstrumentation::frameWindowDiscarded):
        (WebCore::InspectorInstrumentation::mediaQueryResultChanged):
        (WebCore::InspectorInstrumentation::didPushShadowRoot):
        (WebCore::InspectorInstrumentation::willPopShadowRoot):
        (WebCore::InspectorInstrumentation::didCreateNamedFlow):
        (WebCore::InspectorInstrumentation::willRemoveNamedFlow):
        (WebCore::InspectorInstrumentation::didUpdateRegionLayout):
        (WebCore::InspectorInstrumentation::mouseDidMoveOverElement):
        (WebCore::InspectorInstrumentation::handleTouchEvent):
        (WebCore::InspectorInstrumentation::handleMousePress):
        (WebCore::InspectorInstrumentation::forcePseudoState):
        (WebCore::InspectorInstrumentation::characterDataModified):
        (WebCore::InspectorInstrumentation::willSendXMLHttpRequest):
        (WebCore::InspectorInstrumentation::didScheduleResourceRequest):
        (WebCore::InspectorInstrumentation::didInstallTimer):
        (WebCore::InspectorInstrumentation::didRemoveTimer):
        (WebCore::InspectorInstrumentation::willCallFunction):
        (WebCore::InspectorInstrumentation::didCallFunction):
        (WebCore::InspectorInstrumentation::willDispatchXHRReadyStateChangeEvent):
        (WebCore::InspectorInstrumentation::didDispatchXHRReadyStateChangeEvent):
        (WebCore::InspectorInstrumentation::willDispatchEvent):
        (WebCore::InspectorInstrumentation::didDispatchEvent):
        (WebCore::InspectorInstrumentation::willHandleEvent):
        (WebCore::InspectorInstrumentation::didHandleEvent):
        (WebCore::InspectorInstrumentation::willDispatchEventOnWindow):
        (WebCore::InspectorInstrumentation::didDispatchEventOnWindow):
        (WebCore::InspectorInstrumentation::willEvaluateScript):
        (WebCore::InspectorInstrumentation::didEvaluateScript):
        (WebCore::InspectorInstrumentation::didCreateIsolatedContext):
        (WebCore::InspectorInstrumentation::willFireTimer):
        (WebCore::InspectorInstrumentation::didFireTimer):
        (WebCore::InspectorInstrumentation::didBeginFrame):
        (WebCore::InspectorInstrumentation::didCancelFrame):
        (WebCore::InspectorInstrumentation::didInvalidateLayout):
        (WebCore::InspectorInstrumentation::willLayout):
        (WebCore::InspectorInstrumentation::didLayout):
        (WebCore::InspectorInstrumentation::didScroll):
        (WebCore::InspectorInstrumentation::willDispatchXHRLoadEvent):
        (WebCore::InspectorInstrumentation::didDispatchXHRLoadEvent):
        (WebCore::InspectorInstrumentation::willPaint):
        (WebCore::InspectorInstrumentation::didPaint):
        (WebCore::InspectorInstrumentation::willScrollLayer):
        (WebCore::InspectorInstrumentation::didScrollLayer):
        (WebCore::InspectorInstrumentation::willComposite):
        (WebCore::InspectorInstrumentation::didComposite):
        (WebCore::InspectorInstrumentation::willRecalculateStyle):
        (WebCore::InspectorInstrumentation::didRecalculateStyle):
        (WebCore::InspectorInstrumentation::didScheduleStyleRecalculation):
        (WebCore::InspectorInstrumentation::willMatchRule):
        (WebCore::InspectorInstrumentation::didMatchRule):
        (WebCore::InspectorInstrumentation::willProcessRule):
        (WebCore::InspectorInstrumentation::didProcessRule):
        (WebCore::InspectorInstrumentation::applyUserAgentOverride):
        (WebCore::InspectorInstrumentation::applyScreenWidthOverride):
        (WebCore::InspectorInstrumentation::applyScreenHeightOverride):
        (WebCore::InspectorInstrumentation::shouldApplyScreenWidthOverride):
        (WebCore::InspectorInstrumentation::applyEmulatedMedia):
        (WebCore::InspectorInstrumentation::shouldApplyScreenHeightOverride):
        (WebCore::InspectorInstrumentation::willSendRequest):
        (WebCore::InspectorInstrumentation::continueAfterPingLoader):
        (WebCore::InspectorInstrumentation::markResourceAsCached):
        (WebCore::InspectorInstrumentation::didLoadResourceFromMemoryCache):
        (WebCore::InspectorInstrumentation::willReceiveResourceData):
        (WebCore::InspectorInstrumentation::didReceiveResourceData):
        (WebCore::InspectorInstrumentation::willReceiveResourceResponse):
        (WebCore::InspectorInstrumentation::didReceiveResourceResponse):
        (WebCore::InspectorInstrumentation::continueAfterXFrameOptionsDenied):
        (WebCore::InspectorInstrumentation::continueWithPolicyDownload):
        (WebCore::InspectorInstrumentation::continueWithPolicyIgnore):
        (WebCore::InspectorInstrumentation::didReceiveData):
        (WebCore::InspectorInstrumentation::didFinishLoading):
        (WebCore::InspectorInstrumentation::didFailLoading):
        (WebCore::InspectorInstrumentation::documentThreadableLoaderStartedLoadingForClient):
        (WebCore::InspectorInstrumentation::willLoadXHR):
        (WebCore::InspectorInstrumentation::didFailXHRLoading):
        (WebCore::InspectorInstrumentation::didFinishXHRLoading):
        (WebCore::InspectorInstrumentation::didReceiveXHRResponse):
        (WebCore::InspectorInstrumentation::willLoadXHRSynchronously):
        (WebCore::InspectorInstrumentation::didLoadXHRSynchronously):
        (WebCore::InspectorInstrumentation::scriptImported):
        (WebCore::InspectorInstrumentation::scriptExecutionBlockedByCSP):
        (WebCore::InspectorInstrumentation::didReceiveScriptResponse):
        (WebCore::InspectorInstrumentation::domContentLoadedEventFired):
        (WebCore::InspectorInstrumentation::loadEventFired):
        (WebCore::InspectorInstrumentation::frameDetachedFromParent):
        (WebCore::InspectorInstrumentation::didCommitLoad):
        (WebCore::InspectorInstrumentation::loaderDetachedFromFrame):
        (WebCore::InspectorInstrumentation::willDestroyCachedResource):
        (WebCore::InspectorInstrumentation::willWriteHTML):
        (WebCore::InspectorInstrumentation::didWriteHTML):
        (WebCore::InspectorInstrumentation::didUseDOMStorage):
        (WebCore::InspectorInstrumentation::didDispatchDOMStorageEvent):
        (WebCore::InspectorInstrumentation::shouldPauseDedicatedWorkerOnStart):
        (WebCore::InspectorInstrumentation::didStartWorkerContext):
        (WebCore::InspectorInstrumentation::workerContextTerminated):
        (WebCore::InspectorInstrumentation::didCreateWebSocket):
        (WebCore::InspectorInstrumentation::willSendWebSocketHandshakeRequest):
        (WebCore::InspectorInstrumentation::didReceiveWebSocketHandshakeResponse):
        (WebCore::InspectorInstrumentation::didCloseWebSocket):
        (WebCore::InspectorInstrumentation::didReceiveWebSocketFrame):
        (WebCore::InspectorInstrumentation::didReceiveWebSocketFrameError):
        (WebCore::InspectorInstrumentation::didSendWebSocketFrame):
        (WebCore::InspectorInstrumentation::networkStateChanged):
        (WebCore::InspectorInstrumentation::updateApplicationCacheStatus):
        (WebCore::InspectorInstrumentation::didRequestAnimationFrame):
        (WebCore::InspectorInstrumentation::didCancelAnimationFrame):
        (WebCore::InspectorInstrumentation::willFireAnimationFrame):
        (WebCore::InspectorInstrumentation::didFireAnimationFrame):
        (WebCore::InspectorInstrumentation::overrideGeolocationPosition):
        (WebCore::InspectorInstrumentation::overrideDeviceOrientation):
        * loader/appcache/ApplicationCacheGroup.cpp:
        (WebCore::ApplicationCacheGroup::didFinishLoading):
        (WebCore::ApplicationCacheGroup::didFail):

2012-12-12  Dean Jackson  <dino@apple.com>

        Reinstate CIFilter code for Lion
        https://bugs.webkit.org/show_bug.cgi?id=104847

        Reviewed by Simon Fraser.

        This basically reverts r137500 for Lion, because some
        CAFilter types are not available there.

        Covered by existing tests, with the warning that Lion
        baselines will need updating.

        * platform/graphics/ca/mac/PlatformCALayerMac.mm:
        (PlatformCALayer::setFilters): Put an ugly #if in to
        detect OS X 10.7, and rename caFilter variable to
        filter.

2012-12-12  Seokju Kwon  <seokju.kwon@gmail.com>

        [EFL] Refactor duplicate code into EflInspectorUtilities
        https://bugs.webkit.org/show_bug.cgi?id=104329

        Reviewed by Kenneth Rohde Christiansen.

        Move duplicate work into EflInspectorUtilities.

        No new tests, refactoring.

        * PlatformEfl.cmake:
        * platform/efl/EflInspectorUtilities.cpp: Added.
        (WebCore):
        (WebCore::inspectorResourcePath):
        * platform/efl/EflInspectorUtilities.h: Added.
        (WebCore):

2012-12-12  Mark Lam  <mark.lam@apple.com>

        Fixing a chromium build breakage due to r137520.
        https://bugs.webkit.org/show_bug.cgi?id=104741.

        Not reviewed.

        Added #ifdef !PLATFORM(CHROMIUM) for one function chromium doesn't use.

        No new tests.

        * Modules/webdatabase/DatabaseManager.cpp:
        (WebCore::DatabaseManager::initialize):
        * Modules/webdatabase/DatabaseTracker.h:
        (DatabaseTracker):

2012-12-11  Emil A Eklund  <eae@chromium.org>

        REGRESSION (Subpixel layout): Gray vertical lines appear when moving insertion point to right on Mac
        https://bugs.webkit.org/show_bug.cgi?id=102402

        Reviewed by Simon Fraser.

        Round paintOffset in CaretBase::paintCaret to ensure that caret is painted at an integer pixel boundary.

        Test: fast/sub-pixel/input-caret-on-subpixel-bound.html

        * editing/FrameSelection.cpp:
        (WebCore::CaretBase::paintCaret): Round paintOffset to ensure it is on a pixel boundary.

2012-12-12  Elliott Sprehn  <esprehn@gmail.com>

        REGRESSION(137336): Generated run-ins are not placed correctly
        https://bugs.webkit.org/show_bug.cgi?id=104840

        Reviewed by Abhishek Arya.

        Now that :before and :after are not anonymous we no longer need special
        handling for run-ins. Currently placeRunInIfNeeded will only place
        a generated content run-in if a special flag is passed, but I removed
        the call with the flag as it wasn't needed in r137336. This patch just
        removes all special handling for generated content run-ins.

        Test: fast/css-generated-content/generated-runin.html

        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::addChildIgnoringAnonymousColumnBlocks):
        (WebCore::RenderBlock::placeRunInIfNeeded):
        (WebCore::RenderBlock::createReplacementRunIn):
            Lots of simplfication since there's no more anonymous run-ins.
        * rendering/RenderBlock.h:
        (RenderBlock):
        * rendering/RenderObject.h:

2012-12-12  Simon Fraser  <simon.fraser@apple.com>

        Don't unconditionally repaint compositing layers when their size changes
        https://bugs.webkit.org/show_bug.cgi?id=104461

        Reviewed by James Robinson.

        In r137215 I attempted to avoid excessive repainting when compositing layers
        change size. This caused stretched layers when layer size changed as a result
        of bounds constraining in updateCompositedBounds(), so was conditionalized
        based on whether constraining happend, in r137248.
        
        However, the TileCache layer was affected by constraining, erroneously:
        shouldClipCompositedBounds() returned true of the tile cache layer. This
        is pointless, because we only constrain to the document bounds (or enclosing
        overflow), and the tile cache is already the size of the document bounds.

        So, disable size constraining for the tile cache layer, and fix
        a confusing comment in updateCompositedBounds() that refers to the
        view's bounds, rather than the document's bounds.

        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::shouldClipCompositedBounds):
        (WebCore::RenderLayerBacking::updateCompositedBounds):

2012-12-12  Elliott Sprehn  <esprehn@gmail.com>

        [Refactoring] Replace Node's Document pointer with a TreeScope pointer
        https://bugs.webkit.org/show_bug.cgi?id=59816

        Reviewed by Ryosuke Niwa.

        Instead of giving every node in a shadow a rare data, which can be quite
        large, we replace the Document pointer in Node with a TreeScope pointer
        and we give TreeScope a pointer to it's document scope.

        This introduces no branches in document() because in the common
        case document() becomes equivalent to m_treeScope->m_documentScope where
        the documentScope is actually m_treeScope so this shouldn't introduce a
        perf regression.

        Note also that TreeScope can never be null after r136328, and the document
        pointer is only null for DocumentType nodes so we can use a special
        no-document TreeScope for this case that always returns null from
        documentScope().

        No new tests, no change in behavior.

        * dom/Document.cpp:
        (WebCore::Document::Document):
        (WebCore::Document::~Document):
        (WebCore::Document::suggestedMIMEType):
        * dom/Document.h:
        (WebCore::Node::isDocumentNode):
        (WebCore::Node::Node):
        * dom/Element.cpp:
        (WebCore::Element::createRareData):
        * dom/ElementRareData.h:
        (ElementRareData):
        (WebCore::ElementRareData::ElementRareData):
        * dom/Node.cpp:
        (WebCore::Node::~Node):
        (WebCore::Node::createRareData):
        (WebCore::Node::attach):
        (WebCore::Node::reportMemoryUsage):
        * dom/Node.h:
        (WebCore):
        (WebCore::NodeRareDataBase::NodeRareDataBase):
        (NodeRareDataBase):
        (WebCore::Node::treeScope):
        (WebCore::Node::inDocument):
        (WebCore::Node::documentInternal):
        (WebCore::Node::setTreeScope):
        (Node):
        * dom/NodeRareData.cpp:
        (WebCore::NodeRareData::reportMemoryUsage):
        * dom/NodeRareData.h:
        (WebCore::NodeRareData::NodeRareData):
        * dom/ShadowRoot.cpp:
        (WebCore::ShadowRoot::ShadowRoot):
        * dom/TreeScope.cpp:
        (SameSizeAsTreeScope):
        (WebCore::TreeScope::TreeScope):
        (WebCore::TreeScope::setParentTreeScope):
        * dom/TreeScope.h:
        (WebCore):
        (TreeScope):
        (WebCore::TreeScope::documentScope):
        (WebCore::TreeScope::noDocumentInstance):
            Returns a special tree scope that has no document for use with
            DocumentType nodes.
        (WebCore::TreeScope::setDocumentScope):
        * dom/TreeScopeAdopter.cpp:
        (WebCore::TreeScopeAdopter::moveTreeToNewScope):
        (WebCore::TreeScopeAdopter::moveTreeToNewDocument):
        (WebCore::TreeScopeAdopter::moveNodeToNewDocument):

2012-12-12  Mark Lam  <mark.lam@apple.com>

        Encapsulate externally used webdatabase APIs in DatabaseManager.
        https://bugs.webkit.org/show_bug.cgi?id=104741.

        Reviewed by Sam Weinig.

        Use DatabaseManager instead of accessing DatabaseTracker, AbstractDatabase,
        and DatabaseContext directly. This is to prepare for upcoming webkit2
        refactoring.

        No new tests.

        * CMakeLists.txt:
        * Modules/webdatabase/DatabaseManager.cpp: Added.
        (WebCore::DatabaseManager::manager):
        (WebCore::DatabaseManager::DatabaseManager):
        (WebCore::DatabaseManager::initialize):
        (WebCore::DatabaseManager::setClient):
        (WebCore::DatabaseManager::isAvailable):
        (WebCore::DatabaseManager::setIsAvailable):
        (WebCore::DatabaseManager::hasOpenDatabases):
        (WebCore::DatabaseManager::stopDatabases):
        (WebCore::DatabaseManager::fullPathForDatabase):
        (WebCore::DatabaseManager::databaseDirectoryPath):
        (WebCore::DatabaseManager::setDatabaseDirectoryPath):
        (WebCore::DatabaseManager::hasEntryForOrigin):
        (WebCore::DatabaseManager::origins):
        (WebCore::DatabaseManager::databaseNamesForOrigin):
        (WebCore::DatabaseManager::detailsForNameAndOrigin):
        (WebCore::DatabaseManager::usageForOrigin):
        (WebCore::DatabaseManager::quotaForOrigin):
        (WebCore::DatabaseManager::setQuota):
        (WebCore::DatabaseManager::deleteAllDatabases):
        (WebCore::DatabaseManager::deleteOrigin):
        (WebCore::DatabaseManager::deleteDatabase):
        (WebCore::DatabaseManager::closeDatabasesImmediately):
        (WebCore::DatabaseManager::interruptAllDatabasesForContext):
        * Modules/webdatabase/DatabaseManager.h: Added.
        (DatabaseManager):
        (WebCore::DatabaseManager::~DatabaseManager):
        * Modules/webdatabase/DatabaseManagerClient.h: Copied from Source/WebCore/Modules/webdatabase/DatabaseTrackerClient.h.
        (WebCore::DatabaseManagerClient::~DatabaseManagerClient):
        * Modules/webdatabase/DatabaseTracker.cpp:
        (WebCore::DatabaseTracker::setClient):
        * Modules/webdatabase/DatabaseTracker.h:
        (DatabaseTracker):
        * Modules/webdatabase/DatabaseTrackerClient.h: Removed.
        * Target.pri:
        * WebCore.exp.in:
        * WebCore.gyp/WebCore.gyp:
        * WebCore.gypi:
        * WebCore.order:
        * WebCore.vcproj/WebCore.vcproj:
        * WebCore.xcodeproj/project.pbxproj:
        * bindings/generic/RuntimeEnabledFeatures.cpp:
        (WebCore::RuntimeEnabledFeatures::openDatabaseEnabled):
        (WebCore::RuntimeEnabledFeatures::openDatabaseSyncEnabled):
        * history/PageCache.cpp:
        (WebCore::logCanCacheFrameDecision):
        (WebCore::PageCache::canCachePageContainingThisFrame):
        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::stopLoading):
        * page/DOMWindow.cpp:
        * workers/WorkerThread.cpp:
        (WebCore::WorkerThreadShutdownStartTask::performTask):
        (WebCore::WorkerThread::stop):

2012-12-12  Tony Chang  <tony@chromium.org>

        [chromium] don't write additional idl files to a gyp temp file
        https://bugs.webkit.org/show_bug.cgi?id=104831

        Reviewed by Kentaro Hara.

        The <|( command doesn't work for files like <(PRODUCT_DIR) or <(SHARED_INTERMEDIATE_DIR).
        For additional_idl_files, pass it as a parameter instead of a file listing the filenames.
        There are currently only 3 files in this variable. This shouldn't overflow the command
        line since the limit on Windows is 8k and with this change, we're still only around 4.5k.
        Also, the longest part of the command line is the list of defines. If needed, we could put
        that in a file instead.

        No new tests, this is a refactoring of the build files.

        * WebCore.gyp/WebCore.gyp: Don't use <|( for additional_idl_files.
        * bindings/scripts/generate-bindings.pl: Change --additionalIdlFilesList to
        --additionalIdlFiles, which is a shell argument containing the filenames.

2012-12-12  Chris Rogers  <crogers@google.com>

        Implement OfflineAudioContext constructor
        https://bugs.webkit.org/show_bug.cgi?id=104188

        Reviewed by Kentaro Hara.

        The Web Audio layout tests have relied on an undocumented way (in the specification) to render
        audio faster than realtime using an OfflineAudioContext.  We want to expose a proper OfflineAudioContext
        object and constructor instead of piggybacking off of the normal AudioContext.
             
        * CMakeLists.txt:
        * DerivedSources.make:
        * DerivedSources.pri:
        * GNUmakefile.list.am:
        * Modules/webaudio/AudioContext.cpp:
        (WebCore::AudioContext::isSampleRateRangeGood):
        * Modules/webaudio/AudioContext.h:
        (AudioContext):
        * Modules/webaudio/DOMWindowWebAudio.idl:
        * Modules/webaudio/OfflineAudioContext.cpp: Added.
        (WebCore):
        (WebCore::OfflineAudioContext::create):
        (WebCore::OfflineAudioContext::OfflineAudioContext):
        (WebCore::OfflineAudioContext::~OfflineAudioContext):
        * Modules/webaudio/OfflineAudioContext.h: Added.
        (WebCore):
        (OfflineAudioContext):
        * Modules/webaudio/OfflineAudioContext.idl: Added.
        * WebCore.gypi:
        * WebCore.xcodeproj/project.pbxproj:
        * bindings/generic/RuntimeEnabledFeatures.h:
        (WebCore::RuntimeEnabledFeatures::webkitOfflineAudioContextEnabled):
        * bindings/js/JSAudioContextCustom.cpp:
        (WebCore::JSAudioContextConstructor::constructJSAudioContext):
        * bindings/v8/custom/V8AudioContextCustom.cpp:
        (WebCore::V8AudioContext::constructorCallbackCustom):

2012-12-12  John Griggs  <jgriggs@rim.com>

        2012-12-12  John Griggs  <jgriggs@rim.com>

        [BlackBerry] Update Media Controls for BlackBerry Platform
        https://bugs.webkit.org/show_bug.cgi?id=104443
        https://przilla.ott.qnx.com/bugzilla/show_bug.cgi?id=204748

        Reviewed by Rob Buis.

        Update Media Controls for BlackBerry platform to allow audio, embedded video and fullscreen video controls to be positioned and styled differently.

        BlackBerry-specific update to Media Controls - No new tests required.

        * PlatformBlackBerry.cmake:
        * css/mediaControlsBlackBerry.css:
        (audio):
        (audio::-webkit-media-controls-embedded-panel, video::-webkit-media-controls-embedded-panel):
        (audio::-webkit-media-controls-panel, video::-webkit-media-controls-panel):
        (video::-webkit-media-controls-button-group-container, audio::-webkit-media-controls-button-group-container):
        (video::-webkit-media-controls-fullscreen-time-display-container, audio::-webkit-media-controls-fullscreen-time-display-container):
        (video::-webkit-media-controls-time-display-container, audio::-webkit-media-controls-time-display-container):
        (video::-webkit-media-controls-fullscreen-play-button, audio::-webkit-media-controls-fullscreen-play-button):
        (video::-webkit-media-controls-play-button, audio::-webkit-media-controls-play-button):
        (audio::-webkit-media-controls-fullscreen-timeline-container, video::-webkit-media-controls-fullscreen-timeline-container):
        (video::-webkit-media-controls-timeline-container, audio::-webkit-media-controls-timeline-container):
        (audio::-webkit-media-controls-fullscreen-current-time-display, video::-webkit-media-controls-fullscreen-current-time-display):
        (audio::-webkit-media-controls-current-time-display, video::-webkit-media-controls-current-time-display):
        (video::-webkit-media-controls-fullscreen-time-remaining-display, audio::-webkit-media-controls-fullscreen-time-remaining-display):
        (video::-webkit-media-controls-time-remaining-display, audio::-webkit-media-controls-time-remaining-display):
        (audio::-webkit-media-controls-fullscreen-timeline, video::-webkit-media-controls-fullscreen-timeline):
        (video::-webkit-media-controls-fullscreen-fullscreen-button, audio::-webkit-media-controls-fullscreen-fullscreen-button):
        (video::-webkit-media-controls-fullscreen-button):
        (audio::-webkit-media-controls-fullscreen-button):
        (audio::-webkit-media-controls-audio-mute-button):
        (video::-webkit-media-controls-audio-mute-button):
        (audio::-webkit-media-controls-volume-slider-container):
        (video::-webkit-media-controls-volume-slider-container):
        (audio::-webkit-media-controls-volume-slider):
        (video::-webkit-media-controls-volume-slider):
        (video::-webkit-media-controls-fullscreen-button-divider, audio::-webkit-media-controls-fullscreen-button-divider):
        (video::-webkit-media-controls-fullscreen-button-container, video::-webkit-media-controls-play-button-container, audio::-webkit-media-controls-fullscreen-button-container, audio::-webkit-media-controls-play-button-container):
        * css/mediaControlsBlackBerryFullscreen.css: Added.
        (body:-webkit-full-page-media):
        (video:-webkit-full-screen::-webkit-media-controls-embedded-panel):
        (video:-webkit-full-screen::-webkit-media-controls-panel):
        (video:-webkit-full-screen::-webkit-media-controls-button-group-container):
        (video:-webkit-full-screen::-webkit-media-controls-fullscreen-time-display-container):
        (video:-webkit-full-screen::-webkit-media-controls-time-display-container):
        (video:-webkit-full-screen::-webkit-media-controls-fullscreen-play-button):
        (video:-webkit-full-screen::-webkit-media-controls-play-button):
        (video:-webkit-full-screen::-webkit-media-controls-fullscreen-timeline-container):
        (video:-webkit-full-screen::-webkit-media-controls-timeline-container):
        (video:-webkit-full-screen::-webkit-media-controls-fullscreen-current-time-display):
        (video:-webkit-full-screen::-webkit-media-controls-current-time-display):
        (video:-webkit-full-screen::-webkit-media-controls-fullscreen-time-remaining-display):
        (video:-webkit-full-screen::-webkit-media-controls-time-remaining-display):
        (video:-webkit-full-screen::-webkit-media-controls-fullscreen-timeline):
        (video:-webkit-full-screen::-webkit-media-controls-timeline):
        (video:-webkit-full-screen::-webkit-media-controls-fullscreen-fullscreen-button):
        (video:-webkit-full-screen::-webkit-media-controls-fullscreen-button):
        (video:-webkit-full-screen::-webkit-media-controls-audio-mute-button):
        (video:-webkit-full-screen::-webkit-media-controls-volume-slider-container):
        (video:-webkit-full-screen::-webkit-media-controls-volume-slider):
        (video:-webkit-full-screen::-webkit-media-controls-fullscreen-button-divider):
        (video:-webkit-full-screen::-webkit-media-controls-fullscreen-button-container, video:-webkit-full-screen::-webkit-media-controls-play-button-container):
        (video:-webkit-full-screen::-webkit-media-controls-fullscreen-button-container):
        (video:-webkit-full-screen::-webkit-media-controls-play-button-container):
        (video:-webkit-full-screen::-webkit-media-controls-placeholder):
        * html/shadow/MediaControlsBlackBerry.cpp: Added.
        (WebCore):
        (WebCore::MediaControlButtonGroupContainerElement::MediaControlButtonGroupContainerElement):
        (WebCore::MediaControlButtonGroupContainerElement::create):
        (WebCore::MediaControlButtonGroupContainerElement::shadowPseudoId):
        (WebCore::MediaControlTimeDisplayContainerElement::MediaControlTimeDisplayContainerElement):
        (WebCore::MediaControlTimeDisplayContainerElement::create):
        (WebCore::MediaControlTimeDisplayContainerElement::shadowPseudoId):
        (WebCore::MediaControlEmbeddedPanelElement::MediaControlEmbeddedPanelElement):
        (WebCore::MediaControlEmbeddedPanelElement::create):
        (WebCore::MediaControlEmbeddedPanelElement::shadowPseudoId):
        (WebCore::MediaControlEmbeddedPanelElement::startDrag):
        (WebCore::MediaControlEmbeddedPanelElement::continueDrag):
        (WebCore::MediaControlEmbeddedPanelElement::endDrag):
        (WebCore::MediaControlEmbeddedPanelElement::startTimer):
        (WebCore::MediaControlEmbeddedPanelElement::stopTimer):
        (WebCore::MediaControlEmbeddedPanelElement::transitionTimerFired):
        (WebCore::MediaControlEmbeddedPanelElement::setPosition):
        (WebCore::MediaControlEmbeddedPanelElement::resetPosition):
        (WebCore::MediaControlEmbeddedPanelElement::makeOpaque):
        (WebCore::MediaControlEmbeddedPanelElement::makeTransparent):
        (WebCore::MediaControlEmbeddedPanelElement::defaultEventHandler):
        (WebCore::MediaControlEmbeddedPanelElement::setCanBeDragged):
        (WebCore::MediaControlEmbeddedPanelElement::setIsDisplayed):
        (WebCore::MediaControlFullscreenTimeDisplayContainerElement::MediaControlFullscreenTimeDisplayContainerElement):
        (WebCore::MediaControlFullscreenTimeDisplayContainerElement::create):
        (WebCore::MediaControlFullscreenTimeDisplayContainerElement::shadowPseudoId):
        (WebCore::MediaControlFullscreenButtonContainerElement::MediaControlFullscreenButtonContainerElement):
        (WebCore::MediaControlFullscreenButtonContainerElement::create):
        (WebCore::MediaControlFullscreenButtonContainerElement::shadowPseudoId):
        (WebCore::MediaControlFullscreenButtonDividerElement::MediaControlFullscreenButtonDividerElement):
        (WebCore::MediaControlFullscreenButtonDividerElement::create):
        (WebCore::MediaControlFullscreenButtonDividerElement::shadowPseudoId):
        (WebCore::MediaControlPlayButtonContainerElement::MediaControlPlayButtonContainerElement):
        (WebCore::MediaControlPlayButtonContainerElement::create):
        (WebCore::MediaControlPlayButtonContainerElement::shadowPseudoId):
        (WebCore::MediaControlPlaceholderElement::MediaControlPlaceholderElement):
        (WebCore::MediaControlPlaceholderElement::create):
        (WebCore::MediaControlPlaceholderElement::shadowPseudoId):
        (WebCore::MediaControlFullscreenPlayButtonElement::MediaControlFullscreenPlayButtonElement):
        (WebCore::MediaControlFullscreenPlayButtonElement::create):
        (WebCore::MediaControlFullscreenPlayButtonElement::defaultEventHandler):
        (WebCore::MediaControlFullscreenPlayButtonElement::updateDisplayType):
        (WebCore::MediaControlFullscreenPlayButtonElement::shadowPseudoId):
        (WebCore::MediaControlFullscreenFullscreenButtonElement::MediaControlFullscreenFullscreenButtonElement):
        (WebCore::MediaControlFullscreenFullscreenButtonElement::create):
        (WebCore::MediaControlFullscreenFullscreenButtonElement::defaultEventHandler):
        (WebCore::MediaControlFullscreenFullscreenButtonElement::shadowPseudoId):
        (WebCore::MediaControlFullscreenFullscreenButtonElement::setIsFullscreen):
        (WebCore::MediaControlFullscreenTimelineContainerElement::MediaControlFullscreenTimelineContainerElement):
        (WebCore::MediaControlFullscreenTimelineContainerElement::create):
        (WebCore::MediaControlFullscreenTimelineContainerElement::shadowPseudoId):
        (WebCore::MediaControlFullscreenTimelineElement::MediaControlFullscreenTimelineElement):
        (WebCore::MediaControlFullscreenTimelineElement::create):
        (WebCore::MediaControlFullscreenTimelineElement::defaultEventHandler):
        (WebCore::MediaControlFullscreenTimelineElement::willRespondToMouseClickEvents):
        (WebCore::MediaControlFullscreenTimelineElement::setPosition):
        (WebCore::MediaControlFullscreenTimelineElement::setDuration):
        (WebCore::MediaControlFullscreenTimelineElement::shadowPseudoId):
        (WebCore::MediaControlFullscreenTimeRemainingDisplayElement::create):
        (WebCore::MediaControlFullscreenTimeRemainingDisplayElement::MediaControlFullscreenTimeRemainingDisplayElement):
        (WebCore::MediaControlFullscreenTimeRemainingDisplayElement::shadowPseudoId):
        (WebCore::MediaControlFullscreenCurrentTimeDisplayElement::create):
        (WebCore::MediaControlFullscreenCurrentTimeDisplayElement::MediaControlFullscreenCurrentTimeDisplayElement):
        (WebCore::MediaControlFullscreenCurrentTimeDisplayElement::shadowPseudoId):
        (WebCore::MediaControlAudioMuteButtonElement::MediaControlAudioMuteButtonElement):
        (WebCore::MediaControlAudioMuteButtonElement::create):
        (WebCore::MediaControlAudioMuteButtonElement::defaultEventHandler):
        (WebCore::MediaControlAudioMuteButtonElement::shadowPseudoId):
        (WebCore::MediaControlsBlackBerry::MediaControlsBlackBerry):
        (WebCore::MediaControls::create):
        (WebCore::MediaControlsBlackBerry::createControls):
        (WebCore::MediaControlsBlackBerry::setMediaController):
        (WebCore::MediaControlsBlackBerry::show):
        (WebCore::MediaControlsBlackBerry::hide):
        (WebCore::MediaControlsBlackBerry::makeOpaque):
        (WebCore::MediaControlsBlackBerry::makeTransparent):
        (WebCore::MediaControlsBlackBerry::reset):
        (WebCore::MediaControlsBlackBerry::bufferingProgressed):
        (WebCore::MediaControlsBlackBerry::playbackStarted):
        (WebCore::MediaControlsBlackBerry::playbackProgressed):
        (WebCore::MediaControlsBlackBerry::playbackStopped):
        (WebCore::MediaControlsBlackBerry::updateCurrentTimeDisplay):
        (WebCore::MediaControlsBlackBerry::reportedError):
        (WebCore::MediaControlsBlackBerry::changedMute):
        (WebCore::MediaControlsBlackBerry::enteredFullscreen):
        (WebCore::MediaControlsBlackBerry::exitedFullscreen):
        (WebCore::MediaControlsBlackBerry::showVolumeSlider):
        (WebCore::MediaControlsBlackBerry::toggleVolumeSlider):
        (WebCore::MediaControlsBlackBerry::shouldHideControls):
        * html/shadow/MediaControlsBlackBerry.h: Added.
        (WebCore):
        (MediaControlButtonGroupContainerElement):
        (MediaControlTimeDisplayContainerElement):
        (MediaControlEmbeddedPanelElement):
        (MediaControlFullscreenTimeDisplayContainerElement):
        (MediaControlFullscreenButtonContainerElement):
        (MediaControlFullscreenButtonDividerElement):
        (MediaControlPlayButtonContainerElement):
        (MediaControlPlaceholderElement):
        (MediaControlFullscreenPlayButtonElement):
        (MediaControlFullscreenFullscreenButtonElement):
        (MediaControlFullscreenTimelineContainerElement):
        (MediaControlFullscreenTimelineElement):
        (MediaControlFullscreenTimeRemainingDisplayElement):
        (MediaControlFullscreenCurrentTimeDisplayElement):
        (MediaControlAudioMuteButtonElement):
        (MediaControlsBlackBerry):
        * platform/blackberry/RenderThemeBlackBerry.cpp:
        (WebCore):
        (WebCore::RenderThemeBlackBerry::extraFullScreenStyleSheet):
        (WebCore::RenderThemeBlackBerry::adjustSliderThumbSize):
        (WebCore::RenderThemeBlackBerry::paintSliderTrackRect):
        (WebCore::RenderThemeBlackBerry::adjustMediaControlStyle):
        (WebCore::RenderThemeBlackBerry::adjustSliderTrackStyle):
        (WebCore::RenderThemeBlackBerry::paintMediaRewindButton):
        (WebCore::RenderThemeBlackBerry::paintMediaMuteButton):
        (WebCore::RenderThemeBlackBerry::paintMediaFullscreenButton):
        (WebCore::RenderThemeBlackBerry::paintMediaSliderTrack):
        (WebCore::RenderThemeBlackBerry::paintMediaSliderThumb):
        (WebCore::RenderThemeBlackBerry::paintMediaVolumeSliderTrack):
        (WebCore::RenderThemeBlackBerry::paintMediaVolumeSliderThumb):
        * platform/blackberry/RenderThemeBlackBerry.h:
        (WebCore::RenderThemeBlackBerry::usesVerticalVolumeSlider):
        (RenderThemeBlackBerry):

2012-12-12  Dominic Mazzoni  <dmazzoni@google.com>

        AX: textUnderElement should consider alt text, but skip links and controls
        https://bugs.webkit.org/show_bug.cgi?id=101650

        Reviewed by Chris Fleizach.

        Getting inner text from an element now ignores focusable descendants and
        containers, but uses alternative text.

        The computation of textUnderElement is now recursive. This caused a crash
        if it was called by accessibilityIsIgnored during object destruction,
        so I simplified accessibilityIsIgnored to not actually call textUnderElement,
        without affecting test results, which should actually be a decent speedup.

        Test: accessibility/button-title-uses-inner-img-alt.html
        Test: accessibility/focusable-div.html

        * accessibility/AccessibilityNodeObject.cpp:
        (WebCore):
        (WebCore::shouldUseAccessiblityObjectInnerText):
        (WebCore::AccessibilityNodeObject::textUnderElement):
        * accessibility/AccessibilityRenderObject.cpp:
        (WebCore::AccessibilityRenderObject::textUnderElement):

2012-12-12  Eberhard Graether  <egraether@google.com>

        Web Inspector: follow up to r136974: handle visibility shortcut in keydown event of ElementsTreeOutline.element
        https://bugs.webkit.org/show_bug.cgi?id=104694

        Reviewed by Pavel Feldman.

        Typing H in the StylesSidebarPane caused toggling of the selected elements visibility. This change only handles
        the H keydown when the ElementsPanel is focused.

        No new tests.

        * inspector/front-end/ElementsTreeOutline.js:
        (WebInspector.ElementsTreeOutline):
        (WebInspector.ElementsTreeOutline.prototype._onkeydown):
        (WebInspector.ElementsTreeOutline.prototype.handleShortcut):
        * inspector/front-end/KeyboardShortcut.js:
        (WebInspector.KeyboardShortcut.hasNoModifiers):

2012-12-12  Philip Rogers  <pdr@google.com>

        Fix target element handling in SVGSMILElement.
        https://bugs.webkit.org/show_bug.cgi?id=104495

        Reviewed by Abhishek Arya.

        This patch fixes two bugs that led to stale target elements in SVGSMILElement.

        r122449 changed the <use> code to call removeAllElementReferencesForTarget to rebuild
        dependent <use> trees. This contained a bug where element references would be incorrectly
        removed. removeAllElementReferencesForTarget calls svgAttributeChanged(href) on all
        references, which can then re-add the references back. The bug is that
        removeAllElementReferencesForTarget removes a newly-added reference as the last step.

        r136906 changed targetElement() to no longer be lazily resolved so any changes to an
        animation's href attribute needed to be tracked. r136906 refactored the code but did not
        fix a bug where animation elements not in the document would not react to
        svgAttributeChanged(href).

        The combination of these two bugs allowed stale targetElement references to exist. A
        target element could be removed from the document without dependent animation elements
        receiving a notification (bug 1) and not reacting to notifications they received (bug 2).

        This patch updates SVGUseElement::buildInstanceTree to only rebuild (not remove) the
        elements referencing the target by adding rebuildAllElementReferencesForTarget. This patch
        also updates SVGSMILElement to correctly react to svgAttributeChanged() notifications
        for href changes even when not in the document.

        Test: svg/animations/target-condition-crash.html

        * svg/SVGDocumentExtensions.cpp:
        (WebCore::SVGDocumentExtensions::rebuildAllElementReferencesForTarget):
        (WebCore::SVGDocumentExtensions::removeAllElementReferencesForTarget):

            Refactored so that we can notify element references to update without removing
            references.

        * svg/SVGDocumentExtensions.h:
        (SVGDocumentExtensions):
        * svg/SVGElement.cpp:
        (WebCore::SVGElement::~SVGElement):
        (WebCore::SVGElement::removedFrom):

            Similar to SVGUseElement::buildShadowAndInstanceTree, this callsite was updated to
            only rebuild references instead of removing them.

        (WebCore::SVGElement::attributeChanged):
        * svg/SVGUseElement.cpp:
        (WebCore::SVGUseElement::buildShadowAndInstanceTree):

            The comment indicates we just want to rebuild (not remove). This callsite has been
            updated to use the new rebuildAllElementReferencesForTarget function.

        (WebCore::SVGUseElement::buildInstanceTree):
        * svg/animation/SVGSMILElement.cpp:
        (WebCore::SVGSMILElement::buildPendingResource):
        (WebCore::SVGSMILElement::removedFrom):

            Previously, if an SVGSMILElement was not in the document, only clearResourceReferences
            would be called when the target changed. This has been refactored to reset the
            targetElement if the element needs to build resources but is not in the document.

            I looked at moving this into clearResourceReferences (since the target element might
            be considered a reference) but we run into issues calling pure virtual functions in
            the destructor. The current implementation seemed the cleanest.

            SVGSMILElement::removedFrom was cleaned up to match the rest of the code. The comment
            in removedFrom appears to be stale since disconnectConditions does not kill the element.

        (WebCore::SVGSMILElement::svgAttributeChanged):

            Removed the bad !inDocument() checks that broke href change notifications.

        (WebCore::SVGSMILElement::setTargetElement):

2012-12-12  Alpha Lam  <hclam@chromium.org>

        [chromium] Minimize memcpy for encoded image data in ImageFrameGenerator
        https://bugs.webkit.org/show_bug.cgi?id=103797

        Reviewed by Stephen White.

        Added a new class ThreadSafeDataTransport to help transporting data in
        SharedBuffer from one thread to another. This class is designed to minimize
        thread contention and memory copy.

        It is implemented using a data queue. New data segments are copied into
        this queue. The queue is then consolidated with existing data when user
        requests access to the final SharedBuffer.

        Memory is copied into and out of the queue but this approach avoid
        copying the entire SharedBuffer.

        ImageFrameGenerator is now using this class for data transport between
        threads.

        Unit tests in ThreadSafeDataTransportTest. Also existing ImageFrameGeneratorTest passes.

        * WebCore.gypi:
        * platform/graphics/chromium/ImageFrameGenerator.cpp:
        (WebCore::ImageFrameGenerator::ImageFrameGenerator):
        (WebCore::ImageFrameGenerator::setData):
        (WebCore::ImageFrameGenerator::tryToResumeDecodeAndScale):
        Added logic to skip decoding if there's no new data.
        (WebCore::ImageFrameGenerator::decode):
        * platform/graphics/chromium/ImageFrameGenerator.h:
        (ImageFrameGenerator):
        * platform/graphics/chromium/ThreadSafeDataTransport.cpp: Added.
        (WebCore):
        (WebCore::ThreadSafeDataTransport::ThreadSafeDataTransport):
        (WebCore::ThreadSafeDataTransport::~ThreadSafeDataTransport):
        (WebCore::ThreadSafeDataTransport::setData):
        (WebCore::ThreadSafeDataTransport::data):
        (WebCore::ThreadSafeDataTransport::hasNewData):
        * platform/graphics/chromium/ThreadSafeDataTransport.h: Added.
        (WebCore):
        (ThreadSafeDataTransport):

2012-12-12  Roger Fong  <roger_fong@apple.com>

        Enable VIDEO_TRACK on Windows.
        https://bugs.webkit.org/show_bug.cgi?id=104706.

        Reviewed by Timothy Horton.

        Enable VIDEO_TRACK on Windows and update project property files.

        * DerivedSources.cpp:
        * WebCore.vcproj/WebCore.vcproj:
        * WebCore.vcproj/WebCoreCommon.vsprops:
        * WebCore.vcproj/copyForwardingHeaders.cmd:
        * bindings/generic/RuntimeEnabledFeatures.cpp:
        (WebCore):
        * html/HTMLElementsAllInOne.cpp:
        * rendering/RenderingAllInOne.cpp:

2012-12-12  No'am Rosenthal  <noam.rosenthal@nokia.com>

        REGRESSION: r137481 caused a build failure with GTK
        https://bugs.webkit.org/show_bug.cgi?id=104826

        Unreviewed build fix.

        * platform/graphics/texmap/GraphicsLayerTextureMapper.cpp:
        (WebCore::GraphicsLayerTextureMapper::prepareBackingStore):
            Brought back #if PLATFORM(QT) to surround the dynamic_cast call.

2012-12-12  Dean Jackson  <dino@apple.com>

        Use CAFilter rather than CIFilter
        https://bugs.webkit.org/show_bug.cgi?id=104759

        Reviewed by Tim Horton.

        In order to get better performance in the simple CSS filter
        cases, use CAFilter rather than CIFilter. This involved
        defining some platform-specific values inside
        PlatformCALayerMac to expose CAFilter.

        The great side-effect is that this brings our hardware
        output much closer to our software filters. For example,
        on a random location in the hue-rotate test.

        Software: rgb(255, 148, 16)
        Hardware before: rgb(255, 204, 50)
        Hardware after: rgb(255, 165, 33)

        Still some improvement needed, but better.

        Covered by existing tests.

        * platform/graphics/ca/mac/PlatformCALayerMac.mm:
        (CAColorMatrix): New structure to hold 5x4 matrix representing a color operation.
        (PlatformCALayer::setFilters): Use CAFilter objects rather than CIFilter.

2012-12-12  No'am Rosenthal  <noam@webkit.org>

        [Texmap] Consolidate redundant code for ARB_RECT texture
        https://bugs.webkit.org/show_bug.cgi?id=104705

        Reviewed by Kenneth Rohde Christiansen.

        Instead of having a whole different function for RECT textures,
        keep the existing functions and pass a flag that tells
        TextureMapperGL to use the non-normalized coordinates and the
        RECT shaders.

        No new tests, refactor only. Tested to not break WebGL on
        Qt-Mac.

        * platform/graphics/surfaces/mac/GraphicsSurfaceMac.cpp:
        * platform/graphics/surfaces/glx/GraphicsSurfaceGLX.cpp:
        (WebCore::GraphicsSurface::platformPaintToTextureMapper):
        * platform/graphics/texmap/TextureMapperGL.cpp:
        (WebCore::TextureMapperGL::drawQuad):
            Compensate for rect textures in drawQuad.

        (WebCore::TextureMapperGL::drawBorder):
        (WebCore::TextureMapperGL::drawTexture):
        (WebCore::TextureMapperGL::drawSolidColor):
        (WebCore::TextureMapperGL::drawTextureWithAntialiasing):
        (WebCore::TextureMapperGL::drawTexturedQuadWithProgram):
            Pass flags to TextureMapperGL::drawQuad instead of a bool.

        * platform/graphics/texmap/TextureMapperGL.h:
        (TextureMapperGL):
        * platform/graphics/texmap/TextureMapperShaderManager.cpp:
        (WebCore::getShaderSpec):
        * platform/graphics/texmap/TextureMapperShaderManager.h:
        (TextureMapperShaderProgram):
            Compensate for the texture-size in the vertex
            shader instead of in the fragment shader.

2012-12-12  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r137491.
        http://trac.webkit.org/changeset/137491
        https://bugs.webkit.org/show_bug.cgi?id=104828

        broke the builtd (Requested by rfong on #webkit).

        * DerivedSources.cpp:
        * WebCore.vcproj/WebCore.vcproj:
        * WebCore.vcproj/WebCoreCommon.vsprops:
        * WebCore.vcproj/copyForwardingHeaders.cmd:
        * bindings/generic/RuntimeEnabledFeatures.cpp:
        (WebCore):
        * html/HTMLElementsAllInOne.cpp:
        * platform/NotImplemented.cpp:
        (WebCore):
        (WebCore::notImplementedLoggingChannel):
        * rendering/RenderingAllInOne.cpp:

2012-12-12  John J. Barton  <johnjbarton@chromium.org>

        Web Inspector: remove protocol-externs.js temp file after compile-front-end.py
        https://bugs.webkit.org/show_bug.cgi?id=98799

        Reviewed by Vsevolod Vlasov.

        Add os.system rm for protocol-externs.js to the end of the compile script

        * inspector/compile-front-end.py:

2012-12-12  Robert Hogan  <robert@webkit.org>

        White space between inline blocks should be affected by word-spacing property
        https://bugs.webkit.org/show_bug.cgi?id=69072

        Reviewed by Levi Weintraub.

        Allow word-spacing to get added to the spaces between inline blocks in placeBoxesInInlineDirection by setting
        needsWordSpacing to true each time an inline block is encountered. This ensures that the next space encountered
        in a text run will be treated as a space between two words and will get word-spacing added to it if it is present
        in the style.

        Tests: fast/css/word-spacing-between-blocks.html
               fast/css/word-spacing-between-inlines.html

        * rendering/InlineFlowBox.cpp:
        (WebCore::InlineFlowBox::placeBoxRangeInInlineDirection):

2012-12-12  Xianzhu Wang  <wangxianzhu@chromium.org>

        Pre-painting should not paint out-of-view fixed position elements
        https://bugs.webkit.org/show_bug.cgi?id=104724

        Reviewed by James Robinson.

        Test: ManualTests/compositing/fixed-position-out-of-view-scroll-prepaint.html

        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::paintLayer): Don't paint out-of-view fixed position elements.

2012-12-11  Roger Fong  <roger_fong@apple.com>

        Enable VIDEO_TRACK on Windows.
        https://bugs.webkit.org/show_bug.cgi?id=104706.

        Reviewed by Timothy Horton.

        Enable VIDEO_TRACK on Windows and update project property files.

        * DerivedSources.cpp:
        * WebCore.vcproj/WebCore.vcproj:
        * WebCore.vcproj/WebCoreCommon.vsprops:
        * WebCore.vcproj/copyForwardingHeaders.cmd:
        * bindings/generic/RuntimeEnabledFeatures.cpp:
        (WebCore):
        * html/HTMLElementsAllInOne.cpp:
        * rendering/RenderingAllInOne.cpp:

2012-12-12  James Simonsen  <simonjam@chromium.org>

        [Resource Timing] Failed resources shouldn't be recorded in the buffer
        https://bugs.webkit.org/show_bug.cgi?id=104762

        Reviewed by Tony Gentilcore.

        Test: http/tests/w3c/webperf/submission/resource-timing/html/test_resource_ignore_failures.html

        * loader/cache/CachedResourceLoader.cpp:
        (WebCore::CachedResourceLoader::loadDone):

2012-12-12  Martin Robinson  <mrobinson@igalia.com>

        [GTK] Add authentication support to DRT and fix exposed issues in the libsoup backend
        https://bugs.webkit.org/show_bug.cgi?id=104285

        Reviewed by Gustavo Noronha Silva.

        Fix issues in the libsoup networking backend that were causing test
        failures.

        No new tests. This patch unskips authentication tests.

        * platform/network/soup/ResourceHandleSoup.cpp:
        (WebCore::isAuthenticationFailureStatusCode): Added this helper to catch authentication status codes
        and use it everywhere.
        (WebCore::applyAuthenticationToRequest): Use an early return instead of an if-statement
        and instead of always using manually specified credentials, apply those found in the session
        storage as well. Instead of applying the credentials to firstRequest always, accept the request
        as a parameter, so this method can be properly used with redirects.
        (WebCore::restartedCallback): Instead of creating the KURL directly from soup_uri_to_string
        use soupURIToKURL, which preserves the password from the SoupURI. soup_uri_to_string doesn't
        include the password. When calling applyAuthenticationToRequest update the new request. Before
        applyAuthenticationToRequest always updated the firstRequest. Do not call willSendRequest for
        instances when this method is called for authentication handling. willSendRequest should only
        be called for server-side redirects.
        (WebCore::createSoupRequestAndMessageForHandle): Use soup_requester_request_uri instead of
        soup_requester_request. Request::soupURI properly creates a SoupURI with non-null empty strings
        when either the username and password are empty.  A null username or password does not trigger
        the URI-embedded credential override in SoupAuthenticationManager within libsoup. This is important
        because sometimes either the username or password might empty for a request, but the other
        part of the credential should still override the per-session credential storage.
        (WebCore::ResourceHandle::start): We don't need to clear the username and password from the
        internal data structure any longer. These need to be cleared in the CFNetwork backend because
        it prevents the same failed per-request credentials from being used over and over again. In our
        case we don't use these members during didReceiveAuthenticationChallenge, so this isn't an issue.
        (WebCore::ResourceHandle::didReceiveAuthenticationChallenge): Don't look at the per-request
        m_user/m_pass pair here any longer. We use these when initially creating a request, so we don't
        want to re-use them if they fail.
        * platform/network/soup/ResourceRequest.h:
        (ResourceRequest): Rename urlStringForSoup to soupURI.
        * platform/network/soup/ResourceRequestSoup.cpp:
        (WebCore::ResourceRequest::soupURI): Instead of returning a string for the soup-bound URL
        return a SoupURI that properly embeds empty usernames and passwords.

2012-12-12  Alexey Proskuryakov  <ap@apple.com>

        Make LOG() work in WebProcess and NetworkProcess
        https://bugs.webkit.org/show_bug.cgi?id=104718

        Reviewed by Tim Horton.

        Split initialization function into a new InitializeLogging.h file, because it's
        needed in WebKit, but cannot be included along with WebKit version of this file.
        We'd have a confilct between LOG_CHANNEL_PREFIX definitions if we tried.

        * WebCore.xcodeproj/project.pbxproj: Make Logging.h a project header, and
        InitializeLogging.h a private one.

        * GNUmakefile.list.am:
        * Target.pri:
        * platform/InitializeLogging.h: Added.
        * platform/Logging.h:

        * platform/blackberry/LoggingBlackBerry.cpp:
        * platform/efl/LoggingEfl.cpp:
        * platform/gtk/LoggingGtk.cpp:
        * platform/mac/LoggingMac.mm:
        * platform/qt/LoggingQt.cpp:
        * platform/win/LoggingWin.cpp:
        * platform/wx/LoggingWx.cpp:
        Include InitializeLogging.h where this function is implemented.

        * platform/NotImplemented.h:
        * platform/NotImplemented.cpp: Added.
        Changed to not include WebCore's Logging.h in the header, because NotImplemented.h
        is used in WebKits, which have incompatibe logging headers.

2012-12-12  Chris Fleizach  <cfleizach@apple.com>

        AX: aria-busy should be exposed everywhere, not just on live regions
        https://bugs.webkit.org/show_bug.cgi?id=104814

        Reviewed by Anders Carlsson.

        The aria-busy attribute should be exposed on all elements. 
        This isn't entirely clear in the ARIA spec, but that will be fixed with
        ARIA1.1 (ISSUE-538).

        Existing tests that dump attributes cover this new behavior.

        * accessibility/mac/WebAccessibilityObjectWrapper.mm:
        (-[WebAccessibilityObjectWrapper additionalAccessibilityAttributeNames]):

2012-12-12  Gavin Peters  <gavinp@chromium.org>

        [chromium] Add destructor to WebPrerender
        https://bugs.webkit.org/show_bug.cgi?id=104820

        Reviewed by James Robinson.

        When making WebPrerender default constructible and assignable, the destructor should have been moved out of WEBKIT_IMPLEMENTATION.

        Existing WebKit unit tests should test this, as do chromium browser tests.

        * platform/chromium/support/WebPrerender.cpp:
        (WebKit::WebPrerender::toPrerender):
        (WebKit::WebPrerender::reset):

2012-12-12  Allan Sandfeld Jensen  <allan.jensen@digia.com>

        [Qt] Animation fails on large layers
        https://bugs.webkit.org/show_bug.cgi?id=104538

        Reviewed by Noam Rosenthal.

        The backing tiles had no upper limit defined for the non-GL backend, which could cause them
        to allocate pixmaps widier or higher than what the underlying graphics systems can handle.

        On top of that GraphicsLayerTextureMapper::prepareBackingStore() would allocate an intermediate
        pixmap the size of the dirty rect, which would at least on the first paint be the size of the
        entire layer, again causing allocation of pixmaps with dimensions outside of platform bounds.

        This patch introduces a limit to the size of image buffer tiles, and adds an alternative path
        for painting where the GraphicsLayer paints directly to the tile instead of over an intermediate
        pixmap. This alternative path can also be useful later to minimize the amount of pixel copying
        happening in full repaints.

        * platform/graphics/texmap/GraphicsLayerTextureMapper.cpp:
        (WebCore::GraphicsLayerTextureMapper::prepareBackingStore):
        * platform/graphics/texmap/GraphicsLayerTextureMapper.h:
        (GraphicsLayerTextureMapper):
        * platform/graphics/texmap/TextureMapper.cpp:
        (WebCore::BitmapTexture::updateContents):
        * platform/graphics/texmap/TextureMapper.h:
        (BitmapTexture):
        (TextureMapper):
        * platform/graphics/texmap/TextureMapperBackingStore.cpp:
        (WebCore::TextureMapperTile::updateContents):
        (WebCore::TextureMapperTiledBackingStore::updateContents):
        * platform/graphics/texmap/TextureMapperBackingStore.h:
        (TextureMapperTile):
        (TextureMapperTiledBackingStore):
        * platform/graphics/texmap/TextureMapperImageBuffer.cpp:
        (WebCore::BitmapTextureImageBuffer::updateContents):
        (WebCore::TextureMapperImageBuffer::maxTextureSize):
        * platform/graphics/texmap/TextureMapperImageBuffer.h:
        (BitmapTextureImageBuffer):

2012-12-12  Aaron Colwell  <acolwell@chromium.org>

        Remove MediaSource 'ended' to 'open' transition when seeking.
        https://bugs.webkit.org/show_bug.cgi?id=104583

        Reviewed by Eric Carlson.

        Remove the 'ended' to 'open' transition on a seek.

        No new tests. The following tests were updated to reflect the new behavior.
          http/tests/media/media-source/video-media-source-seek.html
          http/tests/media/media-source/video-media-source-state-changes.html

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::seek):

2012-12-12  Julien Chaffraix  <jchaffraix@webkit.org>

        [CSS Grid Layout] Implement CSS parsing and handling for min-content and max-content
        https://bugs.webkit.org/show_bug.cgi?id=104747

        Reviewed by Alexis Menard.

        This change adds -webkit-min-content and -webkit-max-content to our <track-breadth> parsing.
        The rendering is not plugged in and will probably depend on bug 103311.

        Tests: fast/css-grid-layout/grid-columns-rows-get-set-multiple.html:
               fast/css-grid-layout/grid-columns-rows-get-set.html:

        * css/CSSParser.cpp:
        (WebCore::CSSParser::parseGridBreadth):
        * css/StyleResolver.cpp:
        (WebCore::createGridTrackBreadth):
        Straight-forward extension of the new code. We were already serializing back properly
        so no need to touch CSSComputedStyleDeclaration.

2012-12-12  Ryosuke Niwa  <rniwa@webkit.org>

        Copying text with ruby inserts new lines around rt elements
        https://bugs.webkit.org/show_bug.cgi?id=104765

        Reviewed by Dan Bernstein.

        Don't emit new lines before and after rt.

        Test: editing/pasteboard/copy-paste-ruby-text.html

        * editing/TextIterator.cpp:
        (WebCore::shouldEmitNewlinesBeforeAndAfterNode):

2012-12-12  Krzysztof Czech  <k.czech@samsung.com>

        [EFL] Possibility to turn off accessibility feature for WebKit-EFL.
        https://bugs.webkit.org/show_bug.cgi?id=103036

        Reviewed by Laszlo Gombos.

        Guard dependencies for accessibility (ATK), so that they can be turned off.

        No new tests as there is no new functionality.

        * PlatformEfl.cmake:
        * accessibility/AccessibilityObject.cpp:
        (WebCore::AccessibilityObject::AccessibilityObject):
        * accessibility/AccessibilityObject.h:
        (AccessibilityObject):

2012-12-12  Justin Novosad  <junov@google.com>

        Use render box background over border draw strategy in cases with background-image
        https://bugs.webkit.org/show_bug.cgi?id=103409

        Reviewed by Simon Fraser.

        The BackgroundOverBorderBleedAvoidance mode was not being used in
        cases where the background is an opaque image. It was also not
        being used in cases with multiple layers. The multiple layer
        case is now safe with respect to color bleeding if the top layer
        is opaque, thank to the recent addition of layer occlusion culling
        in r135629.

        No new tests. Testing already covered by the following tests:
        fast/backgrounds/background-opaque-images-over-color.html
        fast/backgrounds/gradient-background-leakage-2.html

        * rendering/RenderBox.cpp:
        (WebCore::RenderBox::determineBackgroundBleedAvoidance):
        (WebCore::RenderBox::backgroundHasOpaqueTopLayer):
        * rendering/RenderBox.h:
        (RenderBox):

2012-12-12  Ilya Tikhonovsky  <loislo@chromium.org>

        Web Inspector: instrument static parts of RenderBlock and RenderBox
        https://bugs.webkit.org/show_bug.cgi?id=104660

        Reviewed by Yury Semikhatsky.

        Plain vanilla instrumentation.

        * dom/WebCoreMemoryInstrumentation.cpp:
        (WebCore):
        (WebCore::WebCoreMemoryInstrumentation::reportMemoryUsage):
        * dom/WebCoreMemoryInstrumentation.h:
        (WebCoreMemoryTypes):
        (WebCoreMemoryInstrumentation):
        (WebCore):
        * inspector/InspectorMemoryAgent.cpp:
        (WebCore::InspectorMemoryAgent::getProcessMemoryDistribution):
        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::reportStaticMembersMemoryUsage):
        (WebCore):
        * rendering/RenderBlock.h:
        (RenderBlock):
        * rendering/RenderBox.cpp:
        (WebCore::RenderBox::reportStaticMembersMemoryUsage):
        (WebCore):
        * rendering/RenderBox.h:
        (RenderBox):

2012-12-12  Ilya Tikhonovsky  <loislo@chromium.org>

        Web Inspector: Native Memory Instrumentation: remove fake root MemoryObjectInfo.
        https://bugs.webkit.org/show_bug.cgi?id=104796

        Reviewed by Yury Semikhatsky.

        It was not a good idea to introduce a fake root MemoryObjectInfo.
        It makes a problem when we visit an object without its own MemoryObjectType.

        Example: RenderBox has a global pointer to a hash map.
        HashMap doesn't have its own object type because it is a generic container.
        It will inherit object type from the fake root memory object info.
        The same could happen for another container in another class with other MemoryObjectType.

        This fact forces me to create custom process method for root objects
        because they need to have their own MemoryObjectInfo with customisable memory object type.

        Drive by fix: InstrumentedPointer* was replaced with Wrapper* because actually it is using
        for instrumented and not instrumented object classes.

        * inspector/MemoryInstrumentationImpl.cpp:
        (WebCore::MemoryInstrumentationImpl::processDeferredObjects):
        (WebCore::MemoryInstrumentationImpl::deferObject):
        (WebCore::MemoryInstrumentationImpl::reportMemoryUsage):
        * inspector/MemoryInstrumentationImpl.h:
        (MemoryInstrumentationImpl):

2012-12-12  Kondapally Kalyan  <kalyan.kondapally@intel.com>

        [EFL [WebGL] [Wk2] Resizing the canvas breaks WebGL.
        https://bugs.webkit.org/show_bug.cgi?id=104535.

        Reviewed by Kenneth Rohde Christiansen.

        GraphicsContext3DEfl does not re-create the surface on canvas resize, this
        conflicted with the logic in coordinated graphics Layer.
        CoordinatedGraphicsLayer checks for GraphicsSurfaceToken to decide if the surface
        in UI-Process should be recreated or not. With this
        patch we also check for size of the platform Layer.

        * platform/graphics/efl/GraphicsContext3DEfl.cpp:
        (WebCore::GraphicsContext3D::createGraphicsSurfaces):
        * platform/graphics/efl/GraphicsContext3DPrivate.cpp:
        (GraphicsContext3DPrivate::didResizeCanvas):
        (GraphicsContext3DPrivate::platformLayerSize):
        * platform/graphics/efl/GraphicsContext3DPrivate.h:
        (GraphicsContext3DPrivate):

2012-12-12  Antoine Quint  <graouts@apple.com>

        Web Inspector: Crash in InspectorDOMAgent::pushNodePathToFrontend when inspecting document with CSS generated content
        https://bugs.webkit.org/show_bug.cgi?id=104780

        Reviewed by Pavel Feldman.

        The pushNodePathForRenderLayerToFrontend() method added to InspectorDOMAgent naively assumed
        that all RenderLayers have a Node associated to them. However, in the case of CSS generated
        content, that will not be the case and we would call into pushNodePathToFrontend() with a 0
        parameter that would hit the first ASSERT in this method. We're now checking that we indeed
        have an associated node for the provided RenderLayer and return 0 in case we don't, without
        calling into pushNodePathToFrontend().

        Test: inspector-protocol/layer-tree-generated-content.html

        * inspector/InspectorDOMAgent.cpp:
        (WebCore::InspectorDOMAgent::pushNodePathForRenderLayerToFrontend):

2012-12-12  Alexander Pavlov  <apavlov@chromium.org>

        Web Inspector: [Crash] Clear cached stylesheet rules in InspectorStyleSheet::deleteRule()
        https://bugs.webkit.org/show_bug.cgi?id=104806

        Reviewed by Vsevolod Vlasov.

        Cached rules (m_flatRules) should get cleared whenever a rule is deleted.

        Test: inspector/styles/undo-add-rule-crash.html

        * inspector/InspectorStyleSheet.cpp:
        (WebCore::InspectorStyleSheet::deleteRule):

2012-12-12  Stephen White  <senorblanco@chromium.org>

        Unreviewed, rolling out r136975.
        http://trac.webkit.org/changeset/136975
        https://bugs.webkit.org/show_bug.cgi?id=90405

        Correctness issues.

        * dom/Element.cpp:
        * dom/Element.h:
        (Element):
        * dom/ElementRareData.h:
        (ElementRareData):
        (WebCore::ElementRareData::ElementRareData):
        * platform/graphics/texmap/TextureMapperImageBuffer.cpp:
        (WebCore::BitmapTextureImageBuffer::applyFilters):
        * rendering/FilterEffectRenderer.cpp:
        (WebCore::createCustomFilterEffect):
        (WebCore::FilterEffectRenderer::buildReferenceFilter):
        (WebCore::FilterEffectRenderer::build):
        * rendering/FilterEffectRenderer.h:
        (FilterEffectRenderer):
        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::updateOrRemoveFilterEffectRenderer):
        * rendering/RenderObject.cpp:
        (WebCore::RenderObject::willBeDestroyed):
        * rendering/svg/RenderSVGResourceContainer.cpp:
        (WebCore::RenderSVGResourceContainer::registerResource):
        * rendering/svg/SVGResources.cpp:
        (WebCore::SVGResources::buildCachedResources):
        * rendering/svg/SVGResourcesCache.cpp:
        (WebCore::SVGResourcesCache::addResourcesFromRenderObject):
        (WebCore::SVGResourcesCache::clientStyleChanged):
        (WebCore::SVGResourcesCache::resourceDestroyed):
        * svg/SVGDocumentExtensions.cpp:
        (WebCore::SVGDocumentExtensions::addPendingResource):
        (WebCore::SVGDocumentExtensions::isElementPendingResources):
        (WebCore::SVGDocumentExtensions::isElementPendingResource):
        (WebCore::SVGDocumentExtensions::removeElementFromPendingResources):
        (WebCore::SVGDocumentExtensions::removeElementFromPendingResourcesForRemoval):
        * svg/SVGDocumentExtensions.h:
        (WebCore):
        (SVGDocumentExtensions):
        * svg/SVGElement.cpp:
        (WebCore::SVGElement::hasPendingResources):
        (WebCore):
        (WebCore::SVGElement::setHasPendingResources):
        (WebCore::SVGElement::clearHasPendingResourcesIfPossible):
        * svg/SVGElement.h:
        (SVGElement):
        (WebCore::SVGElement::buildPendingResource):
        * svg/SVGElementRareData.h:
        (WebCore::SVGElementRareData::SVGElementRareData):
        (WebCore::SVGElementRareData::hasPendingResources):
        (WebCore::SVGElementRareData::setHasPendingResources):
        (SVGElementRareData):
        * svg/SVGStyledElement.cpp:
        (WebCore::SVGStyledElement::buildPendingResourcesIfNeeded):

2012-12-12  Stephen White  <senorblanco@chromium.org>

        Unreviewed, rolling out r137022.
        http://trac.webkit.org/changeset/137022

        Precursor to rollout of 136975.

        * rendering/svg/SVGResources.cpp:
        (WebCore::SVGResources::buildCachedResources):

2012-12-12  Stephen White  <senorblanco@chromium.org>

        Unreviewed, rolling out r137027.
        http://trac.webkit.org/changeset/137027

        Precursor to rollout of 136975.

        * dom/ElementRareData.h:
        (ElementRareData):

2012-12-12  Alexei Filippov  <alph@chromium.org>

        Web Inspector: add memory used by memory allocator itself to NMI
        https://bugs.webkit.org/show_bug.cgi?id=93372

        Make native memory instrumentation report memory retained
        for the memory allocator internal purposes.

        Reviewed by Yury Semikhatsky.

        * inspector/front-end/NativeMemorySnapshotView.js:
        (WebInspector.MemoryBlockViewProperties._initialize):
        * platform/chromium/MemoryUsageSupportChromium.cpp:
        (WebCore::MemoryUsageSupport::memoryUsageByComponents):

2012-12-12  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r137438.
        http://trac.webkit.org/changeset/137438
        https://bugs.webkit.org/show_bug.cgi?id=104798

        assertion reached when removing tile (Requested by tmpsantos
        on #webkit).

        * page/Frame.cpp:
        (WebCore::Frame::setTiledBackingStoreEnabled):
        * platform/graphics/TiledBackingStore.cpp:
        (WebCore::TiledBackingStore::TiledBackingStore):
        (WebCore::TiledBackingStore::setTileCreationDelay):
        (WebCore::TiledBackingStore::coverWithTilesIfNeeded):
        (WebCore::TiledBackingStore::updateTileBuffers):
        (WebCore::TiledBackingStore::createTiles):
        (WebCore::TiledBackingStore::isTileBufferUpdatesSuspended):
        (WebCore::TiledBackingStore::startTileBufferUpdateTimer):
        (WebCore::TiledBackingStore::tileBufferUpdateTimerFired):
        (WebCore::TiledBackingStore::startBackingStoreUpdateTimer):
        (WebCore::TiledBackingStore::backingStoreUpdateTimerFired):
        * platform/graphics/TiledBackingStore.h:
        (TiledBackingStore):
        (WebCore::TiledBackingStore::tileCreationDelay):
        * platform/graphics/TiledBackingStoreClient.h:
        (WebCore::TiledBackingStoreClient::tiledBackingStoreUpdatesAllowed):

2012-12-12  Csaba Osztrogonác  <ossy@webkit.org>

        [Qt] Unreviewed typo fix after r137446.

        * WebCore.pri:

2012-12-12  Zan Dobersek  <zandobersek@gmail.com>

        [GTK] Remove the last of unnecessary configuration options in configure.ac
        https://bugs.webkit.org/show_bug.cgi?id=104793

        Reviewed by Martin Robinson.

        Remove the feature define overriding that's based on the automake variables which are
        not set anymore due to the corresponding configuration options being removed.

        No new tests - no new functionality.

        * GNUmakefile.am:

2012-12-12  Simon Hausmann  <simon.hausmann@digia.com>

        [Qt] Fix build on Mac

        Reviewed by Csaba Osztrogonác.

        On Mac OS X we have sqlite as a system library available.

        * WebCore.pri:

2012-12-12  Simon Hausmann  <simon.hausmann@digia.com>

        [Qt] Fix linkage against SQLite
        https://bugs.webkit.org/show_bug.cgi?id=104781

        Reviewed by Csaba Osztrogonác.

        Detect SQLite either through pkg-config, from the SQLITE3SRCDIR
        environment variable or from qtbase via a qt5.git build. Bail out early
        with an error message if neither option applies.

        This removes the usage of $$QT.core.sources and the dependency on Qt's
        system-sqlite configure setting. We should always favour a system
        library over a copy in Qt.

        * Target.pri:
        * WebCore.pri:

2012-12-12  Allan Sandfeld Jensen  <allan.jensen@digia.com>

        [TexMap] Uninitialized m_context pointer in TextureMapper
        https://bugs.webkit.org/show_bug.cgi?id=104785

        Reviewed by Kenneth Rohde Christiansen.

        * platform/graphics/texmap/TextureMapper.cpp:
        (WebCore::TextureMapper::TextureMapper):
        * platform/graphics/texmap/TextureMapperGL.cpp:
        (WebCore::TextureMapperGL::TextureMapperGL):

2012-12-12  Tommy Widenflycht  <tommyw@google.com>

        MediaStream API: Change the data channel descriptor pattern to a handler pattern
        https://bugs.webkit.org/show_bug.cgi?id=104543

        Reviewed by Kent Tamura.

        In short the code is refactured to use the Handler/Client pattern (see RTCPeerConnectionHandler)
        instead of the Descriptor pattern.
        This will fix lifetime/memory/code structure issues in the chromium port.

        Existing tests cover this patch.

        * CMakeLists.txt:
        * GNUmakefile.list.am:
        * Modules/mediastream/RTCDataChannel.cpp:
        (WebCore::RTCDataChannel::create):
        (WebCore::RTCDataChannel::RTCDataChannel):
        (WebCore::RTCDataChannel::~RTCDataChannel):
        (WebCore::RTCDataChannel::label):
        (WebCore::RTCDataChannel::reliable):
        (WebCore::RTCDataChannel::readyState):
        (WebCore::RTCDataChannel::bufferedAmount):
        (WebCore::RTCDataChannel::send):
        (WebCore::RTCDataChannel::close):
        (WebCore::RTCDataChannel::didChangeReadyState):
        (WebCore::RTCDataChannel::didReceiveStringData):
        (WebCore::RTCDataChannel::didReceiveRawData):
        (WebCore::RTCDataChannel::didDetectError):
        (WebCore::RTCDataChannel::stop):
        * Modules/mediastream/RTCDataChannel.h:
        (WebCore):
        (RTCDataChannel):
        * Modules/mediastream/RTCPeerConnection.cpp:
        (WebCore::RTCPeerConnection::didAddRemoteDataChannel):
        * Modules/mediastream/RTCPeerConnection.h:
        (RTCPeerConnection):
        * WebCore.gypi:
        * platform/chromium/support/WebRTCDataChannel.cpp: Removed.
        * platform/mediastream/RTCDataChannelDescriptor.h: Removed.
        * platform/mediastream/RTCDataChannelHandler.h: Copied from Source/WebCore/platform/mediastream/RTCDataChannelDescriptor.cpp.
        (WebCore):
        (RTCDataChannelHandler):
        (WebCore::RTCDataChannelHandler::~RTCDataChannelHandler):
        * platform/mediastream/RTCDataChannelHandlerClient.h: Renamed from Source/WebCore/platform/mediastream/RTCDataChannelDescriptor.cpp.
        (WebCore):
        (RTCDataChannelHandlerClient):
        (WebCore::RTCDataChannelHandlerClient::~RTCDataChannelHandlerClient):
        * platform/mediastream/RTCPeerConnectionHandler.cpp:
        (WebCore):
        (WebCore::RTCPeerConnectionHandler::create):
        * platform/mediastream/RTCPeerConnectionHandler.h:
        (WebCore):
        (RTCPeerConnectionHandler):
        * platform/mediastream/RTCPeerConnectionHandlerClient.h:
        (WebCore):
        (RTCPeerConnectionHandlerClient):
        * platform/mediastream/chromium/RTCDataChannelHandlerChromium.cpp: Added.
        (WebCore):
        (WebCore::RTCDataChannelHandlerChromium::create):
        (WebCore::RTCDataChannelHandlerChromium::RTCDataChannelHandlerChromium):
        (WebCore::RTCDataChannelHandlerChromium::~RTCDataChannelHandlerChromium):
        (WebCore::RTCDataChannelHandlerChromium::setClient):
        (WebCore::RTCDataChannelHandlerChromium::label):
        (WebCore::RTCDataChannelHandlerChromium::isReliable):
        (WebCore::RTCDataChannelHandlerChromium::bufferedAmount):
        (WebCore::RTCDataChannelHandlerChromium::sendStringData):
        (WebCore::RTCDataChannelHandlerChromium::sendRawData):
        (WebCore::RTCDataChannelHandlerChromium::close):
        (WebCore::RTCDataChannelHandlerChromium::didChangeReadyState):
        (WebCore::RTCDataChannelHandlerChromium::didReceiveStringData):
        (WebCore::RTCDataChannelHandlerChromium::didReceiveRawData):
        (WebCore::RTCDataChannelHandlerChromium::didDetectError):
        * platform/mediastream/chromium/RTCDataChannelHandlerChromium.h: Added.
        (WebCore):
        (RTCDataChannelHandlerChromium):
        * platform/mediastream/chromium/RTCPeerConnectionHandlerChromium.cpp:
        (WebCore::RTCPeerConnectionHandlerChromium::createDataChannel):
        (WebCore::RTCPeerConnectionHandlerChromium::didAddRemoteDataChannel):
        * platform/mediastream/chromium/RTCPeerConnectionHandlerChromium.h:
        (WebCore):
        (RTCPeerConnectionHandlerChromium):

2012-12-12  Huang Dongsung  <luxtella@company100.net>

        Coordinated Graphics: Refactor TiledBackingStore code in CoordinatedGraphicsLayer.
        https://bugs.webkit.org/show_bug.cgi?id=103959

        Reviewed by Kenneth Rohde Christiansen.

        TiledBackingStore::setCommitTileUpdatesOnIdleEventLoop() is used when class
        methods cannot be called asynchronously by client. Updates of tiles are
        committed as soon as all the events in event queue have been processed.
        After this patch Frame sets m_commitTileUpdatesOnIdleEventLoop to true.

        In addition, remove TiledBackingStoreClient::tiledBackingStoreUpdatesAllowed()
        which was introduced for Coordinated Graphics.

        Refactoring covered by existing tests.

        * page/Frame.cpp:
        (WebCore::Frame::setTiledBackingStoreEnabled):
        * platform/graphics/TiledBackingStore.cpp:
        (WebCore::TiledBackingStore::TiledBackingStore):
        (WebCore::TiledBackingStore::setTrajectoryVector):
          Separate setting a trajectory vector from coverWithTilesIfNeeded().
        (WebCore::TiledBackingStore::coverWithTilesIfNeeded):
        (WebCore::TiledBackingStore::updateTileBuffers):
        (WebCore::TiledBackingStore::createTiles):
        (WebCore::TiledBackingStore::isTileBufferUpdatesSuspended):
        (WebCore::TiledBackingStore::startTileBufferUpdateTimer):
        (WebCore::TiledBackingStore::tileBufferUpdateTimerFired):
        (WebCore::TiledBackingStore::startBackingStoreUpdateTimer):
        (WebCore::TiledBackingStore::backingStoreUpdateTimerFired):
        * platform/graphics/TiledBackingStore.h:
        (TiledBackingStore):
        (WebCore::TiledBackingStore::setCommitTileUpdatesOnIdleEventLoop):
        * platform/graphics/TiledBackingStoreClient.h:
        (WebCore::TiledBackingStoreClient::tiledBackingStoreHasPendingTileCreation):
            If TiledBackingStore does not create all tiles, TiledBackingStore
            notifies a client of needing to create tiles more, when
            m_commitTileUpdatesOnIdleEventLoop is false.

2012-12-11  Jocelyn Turcotte  <jocelyn.turcotte@digia.com>

        [Qt] Fix the inspector not showing up on Windows
        https://bugs.webkit.org/show_bug.cgi?id=104677

        Reviewed by Simon Hausmann.

        * Target.pri:

2012-11-29  Yury Semikhatsky  <yurys@chromium.org>

        Web Inspector: Heap snapshot crashes on any page in MacOS Canary
        https://bugs.webkit.org/show_bug.cgi?id=103076

        Reviewed by Adam Barth.

        Provide global object name resolver to the heap profiler. The callback allows
        to safely retrieve document URL to be used as a label for corresponding global
        object in the heap snapshot.

        Test: inspector-protocol/take-heap-snapshot.html

        * bindings/v8/ScriptProfiler.cpp:
        (WebCore):
        (WebCore::ScriptProfiler::takeHeapSnapshot):

2012-12-12  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r137428.
        http://trac.webkit.org/changeset/137428
        https://bugs.webkit.org/show_bug.cgi?id=104776

        It broke the build everywhere (Requested by Ossy on #webkit).

        * platform/graphics/surfaces/mac/GraphicsSurfaceMac.cpp:
        (WebCore::GraphicsSurface::platformPaintToTextureMapper):
        * platform/graphics/texmap/TextureMapperGL.cpp:
        (WebCore::TextureMapperGL::drawQuad):
        (WebCore::TextureMapperGL::drawBorder):
        (WebCore::TextureMapperGL::drawTexture):
        (WebCore):
        (WebCore::TextureMapperGL::drawTextureRectangleARB):
        (WebCore::TextureMapperGL::drawSolidColor):
        (WebCore::TextureMapperGL::drawTextureWithAntialiasing):
        (WebCore::TextureMapperGL::drawTexturedQuadWithProgram):
        * platform/graphics/texmap/TextureMapperGL.h:
        (TextureMapperGL):
        * platform/graphics/texmap/TextureMapperShaderManager.cpp:
        (WebCore::getShaderSpec):
        * platform/graphics/texmap/TextureMapperShaderManager.h:
        (TextureMapperShaderProgram):

2012-12-12  Martin Robinson  <mrobinson@igalia.com>

        Web inspector prints a warning about "Debug" not being localized
        https://bugs.webkit.org/show_bug.cgi?id=104679

        Reviewed by Vsevolod Vlasov.

        Add a missing localization entry for the "Debug" string which is used in the web
        inspector front-end. This prevents warnings about a missing localized version
        of the word "Debug" and allows it to be properly localized.

        * English.lproj/localizedStrings.js: Add "Debug"

2012-12-12  Shinya Kawanaka  <shinyak@chromium.org>

        [Shadow DOM] Implement HTMLShadowElement::olderShadowRoot
        https://bugs.webkit.org/show_bug.cgi?id=104218

        Reviewed by Hajime Morita.

        Implements HTMLShadowElement::olderShadowRoot, which returns the ShadowRoot the HTMLShadowElement is assigned to.
        When such ShadowRoot does not exist, 0 is returned.

        Test: fast/dom/shadow/olderShadowRoot-in-shadowelement.html

        * dom/ElementShadow.cpp:
        (WebCore::ElementShadow::ensureDistributionFromDocument): Ensures distribution of this ElementShadow and
        all of the parent TreeScope distribution. This function will be shared for Bug 104345.
        (WebCore):
        * dom/ElementShadow.h:
        (ElementShadow):
        * html/shadow/HTMLShadowElement.cpp:
        (WebCore::HTMLShadowElement::olderShadowRoot):
        (WebCore):
        * html/shadow/HTMLShadowElement.h:
        * html/shadow/HTMLShadowElement.idl:

2012-12-12  No'am Rosenthal  <noam@webkit.org>

        [Texmap] Consolidate redundant code for ARB_RECT texture
        https://bugs.webkit.org/show_bug.cgi?id=104705

        Reviewed by Kenneth Rohde Christiansen.

        Instead of having a whole different function for RECT textures,
        keep the existing functions and pass a flag that tells
        TextureMapperGL to use the non-normalized coordinates and the
        RECT shaders.

        No new tests, refactor only. Tested to not break WebGL on
        Qt-Mac.

        * platform/graphics/surfaces/mac/GraphicsSurfaceMac.cpp:
        (WebCore::GraphicsSurface::platformPaintToTextureMapper):
        * platform/graphics/texmap/TextureMapperGL.cpp:
        (WebCore::TextureMapperGL::drawQuad):
            Compensate for rect textures in drawQuad.

        (WebCore::TextureMapperGL::drawBorder):
        (WebCore::TextureMapperGL::drawTexture):
        (WebCore::TextureMapperGL::drawSolidColor):
        (WebCore::TextureMapperGL::drawTextureWithAntialiasing):
        (WebCore::TextureMapperGL::drawTexturedQuadWithProgram):
            Pass flags to TextureMapperGL::drawQuad instead of a bool.

        * platform/graphics/texmap/TextureMapperGL.h:
        (TextureMapperGL):
        * platform/graphics/texmap/TextureMapperShaderManager.cpp:
        (WebCore::getShaderSpec):
        * platform/graphics/texmap/TextureMapperShaderManager.h:
        (TextureMapperShaderProgram):
            Compensate for the texture-size in the vertex
            shader instead of in the fragment shader.

2012-12-11  Hayato Ito  <hayato@chromium.org>

        REGRESSION(r137408): breaks chromium's browser tests which use WebKitShadowRoot (Requested by hayato on #webkit).
        https://bugs.webkit.org/show_bug.cgi?id=104770

        Unreviewed, build fix.

        * dom/ShadowRoot.idl:
        * page/DOMWindow.idl:

2012-12-11  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r137333, r137344, r137364, and
        r137377.
        http://trac.webkit.org/changeset/137333
        http://trac.webkit.org/changeset/137344
        http://trac.webkit.org/changeset/137364
        http://trac.webkit.org/changeset/137377
        https://bugs.webkit.org/show_bug.cgi?id=104771

        Caused a raft of browser_test failures in Chromium (Requested
        by aklein on #webkit).

        * loader/DocumentLoader.cpp:
        (WebCore::DocumentLoader::setRequest):
        (WebCore::DocumentLoader::subresource):
        (WebCore::DocumentLoader::addSubresourceLoader):
        (WebCore::DocumentLoader::removeSubresourceLoader):
        (WebCore::DocumentLoader::startLoadingMainResource):
        * loader/MainResourceLoader.cpp:
        (WebCore::MainResourceLoader::MainResourceLoader):
        (WebCore::MainResourceLoader::~MainResourceLoader):
        (WebCore::MainResourceLoader::receivedError):
        (WebCore::MainResourceLoader::willCancel):
        (WebCore::MainResourceLoader::didCancel):
        (WebCore::MainResourceLoader::continueAfterNavigationPolicy):
        (WebCore::MainResourceLoader::addData):
        (WebCore::MainResourceLoader::willSendRequest):
        (WebCore::MainResourceLoader::continueAfterContentPolicy):
        (WebCore::MainResourceLoader::didReceiveResponse):
        (WebCore::MainResourceLoader::didReceiveData):
        (WebCore::MainResourceLoader::didFinishLoading):
        (WebCore::MainResourceLoader::didFail):
        (WebCore::MainResourceLoader::reportMemoryUsage):
        (WebCore::MainResourceLoader::handleSubstituteDataLoadNow):
        (WebCore::MainResourceLoader::loadNow):
        (WebCore):
        (WebCore::MainResourceLoader::load):
        (WebCore::MainResourceLoader::setDefersLoading):
        * loader/MainResourceLoader.h:
        (MainResourceLoader):
        * loader/ResourceLoader.cpp:
        (WebCore::ResourceLoader::willSendRequest):
        * loader/ResourceLoader.h:
        (ResourceLoader):
        (WebCore::ResourceLoader::defersLoading):
        * loader/SubresourceLoader.cpp:
        (WebCore::SubresourceLoader::willSendRequest):
        * loader/appcache/ApplicationCacheHost.cpp:
        (WebCore::ApplicationCacheHost::maybeLoadFallbackForMainResponse):
        (WebCore::ApplicationCacheHost::maybeLoadFallbackForMainError):
        * loader/cache/CachedRawResource.cpp:
        (WebCore::CachedRawResource::willSendRequest):
        * loader/cache/CachedResourceLoader.cpp:
        (WebCore::CachedResourceLoader::loadDone):
        * loader/mac/DocumentLoaderMac.cpp:
        (WebCore::DocumentLoader::schedule):
        (WebCore::DocumentLoader::unschedule):

2012-12-11  Kentaro Hara  <haraken@chromium.org>

        Unreviewed, rolling out r137398.
        http://trac.webkit.org/changeset/137398
        https://bugs.webkit.org/show_bug.cgi?id=104188

        A bunch of webaudio tests hit ASSERTs

        * CMakeLists.txt:
        * DerivedSources.make:
        * DerivedSources.pri:
        * GNUmakefile.list.am:
        * Modules/webaudio/AudioContext.cpp:
        (WebCore::AudioContext::createOfflineContext):
        (WebCore):
        * Modules/webaudio/AudioContext.h:
        (AudioContext):
        * Modules/webaudio/DOMWindowWebAudio.idl:
        * Modules/webaudio/OfflineAudioContext.cpp: Removed.
        * Modules/webaudio/OfflineAudioContext.h: Removed.
        * Modules/webaudio/OfflineAudioContext.idl: Removed.
        * WebCore.gypi:
        * WebCore.xcodeproj/project.pbxproj:
        * bindings/generic/RuntimeEnabledFeatures.h:
        * bindings/js/JSAudioContextCustom.cpp:
        (WebCore::JSAudioContextConstructor::constructJSAudioContext):
        * bindings/v8/custom/V8AudioContextCustom.cpp:
        (WebCore::V8AudioContext::constructorCallbackCustom):

2012-12-11  Shinya Kawanaka  <shinyak@chromium.org>

        [Shadow DOM] registering InsertionPoints to ShadowRoot should work out of a document.
        https://bugs.webkit.org/show_bug.cgi?id=104346

        Reviewed by Hajime Morita.

        We need to register InsertionPoints even if ShadowRoot is out of Document, since distribution should work
        out of Document, too.

        Instead of checking isInDocument(), we have to make sure InsertionPoint and an element which InsertionPoint
        inserted into have the same treescope.

        Tests: fast/dom/shadow/has-content-elements.html
               fast/dom/shadow/has-shadow-insertion-point.html

        * html/shadow/InsertionPoint.cpp:
        (WebCore::InsertionPoint::insertedInto):
        (WebCore::InsertionPoint::removedFrom):

2012-12-11  Takashi Sakamoto  <tasak@google.com>

        Text nodes in shadow roots don't inherit style properly
        https://bugs.webkit.org/show_bug.cgi?id=101116

        Reviewed by Hajime Morita.

        Use NodeRenderingContext to resolve styles of text nodes.
        If text nodes are direct children of shadow roots, the text nodes
        should be inherited styles from their shadow hosts.
        But if reset-style-inheritance flag is true, the text nodes should
        not be inherited. And if text nodes are distributed nodes,
        we have to check whether their insertion point's
        reset-style-inheritance.
        c.f. shadow dom spec is:
        http://dvcs.w3.org/hg/webcomponents/raw-file/tip/spec/shadow/index.html#styles

        Test: fast/dom/shadow/text-node-in-shadow.html

        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::styleForElement):
        Modified to use defaultStyleForElement if the given element has
        no parent style.
        (WebCore::StyleResolver::initForStyleResolve):
        Removed shouldResetStyleInheritance, because now NodeRenderingContext
        resetStyleInheritance() takes care of reset-style-inheritance of
        both shadow roots and insertion points.
        (WebCore::StyleResolver::defaultStyleForElement):
        Added to create a default style for elements.
        (WebCore):
        (WebCore::StyleResolver::styleForText):
        Use NodeRenderingContext to find the parent node for style from the
        given text node. If no parent node is found or reset-style-inheritance
        is true, returns a default style (i.e. empty render style).
        Otherwise, just returns the found node's style.
        * css/StyleResolver.h:
        (StyleResolver):
        * dom/ComposedShadowTreeWalker.cpp:
        (WebCore::ComposedShadowTreeWalker::ParentTraversalDetails::didTraverseInsertionPoint):
        Modify to consider insertion point's resetStyleInheritance.
        * dom/NodeRenderingContext.cpp:
        (WebCore::NodeRenderingContext::createRendererForTextIfNeeded):
        Since NodeRenderingContext has already found a parent node for
        rendering and style and a parentRenderer is just the found node's
        renderer, we have to only check reset-style-inheritance.
        If reset, use default style. Otherwise, the parentRenderer's style.
        * dom/Text.cpp:
        (WebCore::Text::recalcTextStyle):
        Use styleForText instead of parentRenderer's styles if the given text
        node is a direct child of a shadow root or a direct child of a shadow
        host.

2012-12-11  Takashi Sakamoto  <tasak@google.com>

        Hide HOST_RULE behind SHADOW_DOM flag.
        https://bugs.webkit.org/show_bug.cgi?id=102321

        Reviewed by Dimitri Glazkov.

        @host @-rules are only available when the rules are declared in styles
        in shadow dom trees. So if SHADOW_DOM is disabled, we don't need
        @host @-rules.

        No new tests. Just hide HOST_RULE behind SHADOW_DOM flag.

        * css/StyleResolver.h:
        Hide "class ShadowRuleHost".
        * css/StyleRule.cpp:
        (WebCore::StyleRuleBase::reportMemoryUsage):
        (WebCore::StyleRuleBase::destroy):
        (WebCore::StyleRuleBase::copy):
        (WebCore::StyleRuleBase::createCSSOMWrapper):
        * css/StyleRule.h:
        (StyleRuleBase):
        Hide "Host" type and isHostRule.
        (StyleRuleHost):
        Hide "class StyleRuleHost".
        * css/StyleSheetContents.cpp:
        (WebCore::childRulesHaveFailedOrCanceledSubresources):

2012-12-11  Dominic Mazzoni  <dmazzoni@google.com>

        AX: accessibilityIsIgnored should avoid computing textUnderElement
        https://bugs.webkit.org/show_bug.cgi?id=104688

        Reviewed by Chris Fleizach.

        Simplify the logic in accessibilityIsIgnored without affecting
        the results of any tests. In particular, avoid expensive calls to
        textUnderElement.

        Covered by existing tests.

        * accessibility/AccessibilityNodeObject.cpp:
        (WebCore::AccessibilityNodeObject::isGenericFocusableElement):
        * accessibility/AccessibilityRenderObject.cpp:
        (WebCore::AccessibilityRenderObject::accessibilityIsIgnored):

2012-12-11  Kentaro Hara  <haraken@chromium.org>

        [V8] Reachable event listeners on image elements can be collected in a minor DOM GC
        https://bugs.webkit.org/show_bug.cgi?id=104734

        Reviewed by Kenneth Russell.

        A major DOM GC treats image elements specially. In
        V8GCController::opaqueRootForGC(), a major DOM GC puts image elements
        that have pending activities into the same object group of their document.
        This guarantees that image elements that have pending activities
        are not garbage collected in the major DOM GC.

        This patch adds the same special handling to a minor DOM GC to guarantee
        the same thing in the minor DOM GC too.

        In long-term, we might want to remove the special handling by making
        image elements active DOM nodes.

        Test: Manually confirmed that all characters in
        http://alteredqualia.com/three/examples/webgl_animation_skinning_tf2.html
        are rendered correctly.

        * bindings/v8/V8GCController.cpp:
        (WebCore::V8GCController::opaqueRootForGC):
        (WebCore::gcTree):

2012-12-11  Dominic Mazzoni  <dmazzoni@google.com>

        AX: Make isActionSupported cross-platform.
        https://bugs.webkit.org/show_bug.cgi?id=104681

        Reviewed by Chris Fleizach.

        Add UserGestureIndicator to increment() and decrement()
        so that all accessibility actions are treated as
        user actions, not scripted actions.

        * accessibility/AccessibilityNodeObject.cpp:
        (WebCore::AccessibilityNodeObject::increment):
        (WebCore::AccessibilityNodeObject::decrement):

2012-12-11  Viatcheslav Ostapenko  <v.ostapenko@samsung.com>

        Remove conversion to/from float and float division from ImageFrame::setRGBA
        https://bugs.webkit.org/show_bug.cgi?id=103693

        Reviewed by Brent Fulgham.

        Replace floating point operations used for alpha premultiply with fixed point arithmetic
        which is basically integer operations. Allows to shave extra couple percent from decoding
        images with transparency.

        Covered by existing tests.

        * platform/image-decoders/ImageDecoder.h:
        (ImageFrame):
        (WebCore::ImageFrame::fixPointUnsignedMultiply):
        (WebCore::ImageFrame::setRGBA):

2012-12-11  Kihong Kwon  <kihong.kwon@samsung.com>

        Vibration API: IDL type doesn't match implementation type
        https://bugs.webkit.org/show_bug.cgi?id=103899

        Reviewed by Kentaro Hara.

        According to WebIDL, "unsigned long" corresponds to "unsigned" in the platform.
        Therefore unsigned long need to be changed to unsigned for the Vibration API.
        - Change a parameter type of vibrate function from unsigned long to unsigned.

        No new tests, it is covered by exist test.

        * Modules/vibration/NavigatorVibration.cpp:
        (WebCore::NavigatorVibration::vibrate):
        * Modules/vibration/NavigatorVibration.h:
        (NavigatorVibration):
        * Modules/vibration/Vibration.cpp:
        (WebCore::Vibration::vibrate):
        * Modules/vibration/Vibration.h:
        (Vibration):
        * Modules/vibration/VibrationClient.h:
        (VibrationClient):
        * bindings/js/JSDOMBinding.h:
        * bindings/scripts/CodeGeneratorJS.pm:
        Remove workaround codes for the Vibration API which is mapped from unsigned long to unsigned long.
        It should be mapped from unsigned long to unsigned by WebIDL spec.
        (GetNativeVectorInnerType):
        * bindings/scripts/test/JS/JSTestObj.cpp:
        (WebCore::jsTestObjPrototypeFunctionOverloadedMethod10):
        (WebCore::jsTestObjPrototypeFunctionMethodWithUnsignedLongSequence):

2012-12-11  Xinazhu Wang  <wangxianzhu@chromium.org>

        ScrollingCoordinator::hasVisibleSlowRepaintFixedObject() should exclude out-of-view fixed position elements
        https://bugs.webkit.org/show_bug.cgi?id=102543

        Let RenderLayerCompositor manage the reasons that fixed position elements are not composited.
        Check the reason in ScrollingCoordinator::hasVisibleSlowRepaintFixedObjects(), don't let fixed position layer not composited with explicit reasons cause slow scrolling.

        Reviewed by James Robinson.

        Test: compositing/layer-creation/fixed-position-out-of-view-scroll-reason.html

        * page/scrolling/ScrollingCoordinator.cpp:
        (WebCore::ScrollingCoordinator::hasVisibleSlowRepaintFixedObjects): Exclude fixed position elements that are not composited for explicit reasons.
        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::computeCompositingRequirements): Manages m_fixedPositionLayerNotCompositedReasonMap.
        (WebCore::RenderLayerCompositor::needsToBeComposited):
        (WebCore::RenderLayerCompositor::requiresCompositingLayer):
        (WebCore::RenderLayerCompositor::requiresCompositingForPosition):
        * rendering/RenderLayerCompositor.h:
        (WebCore::RenderLayerCompositor::fixedPositionLayerNotCompositedReason): Now outputs fixedPositionLayerNotCompositedreason.
        (RenderLayerCompositor):

2012-12-11  Hayato Ito  <hayato@chromium.org>

        [Shadow DOM] Kill ShadowRoot constructor
        https://bugs.webkit.org/show_bug.cgi?id=102913

        Reviewed by Dimitri Glazkov.

        Remove ShadowRoot constructor in favor of Element.webkitCreateShadowRoot().

        No new tests. Update existing tests.

        * dom/ShadowRoot.idl:
        * page/DOMWindow.idl:
        * testing/Internals.cpp:
        (WebCore::Internals::createShadowRoot):
        (WebCore):
        * testing/Internals.h:
        (Internals):
        * testing/Internals.idl:

2012-12-11  Antti Koivisto  <antti@apple.com>

        Add Element-specific traversal functions
        https://bugs.webkit.org/show_bug.cgi?id=104685

        Reviewed by Ryosuke Niwa.

        In many cases where we use NodeTraversal we really only want Elements. By having
        Element specific iteration functions we can tighten the code and make it faster too.

        This patch adds ElementTraversal namespace, similar to NodeTraversal. It also switches
        bunch of NodeTraversal call sites that obviously only care about elements to using
        the new interface.
        
        This should be a speedup too as we avoid number of branches by not having to look
        for children of non-ContainerNodes and by allowing use of ContainerNode specific
        accessors.

        * accessibility/AccessibilityRenderObject.cpp:
        (WebCore::AccessibilityRenderObject::addImageMapChildren):
        * css/SelectorChecker.cpp:
        (WebCore::linkAttribute):
        (WebCore::SelectorChecker::allVisitedStateChanged):
        (WebCore::SelectorChecker::visitedStateChanged):
        * css/StyleInvalidationAnalysis.cpp:
        (WebCore::elementMatchesSelectorScopes):
        (WebCore::StyleInvalidationAnalysis::invalidateStyle):
        * dom/ContainerNodeAlgorithms.h:
        (WebCore::ChildFrameDisconnector::collectDescendant):
        * dom/Document.cpp:
        (WebCore::Document::buildAccessKeyMap):
        (WebCore::Document::updateBaseURL):
        (WebCore::Document::processBaseElement):
        * dom/DocumentOrderedMap.cpp:
        (WebCore::DocumentOrderedMap::get):
        * dom/Element.cpp:
        (WebCore::Element::firstElementChild):
        * dom/Element.h:
        (WebCore):
        * dom/ElementShadow.cpp:
        (WebCore::ElementShadow::collectSelectFeatureSetFrom):
        * dom/NodeTraversal.h:
        (ElementTraversal):
        (WebCore):
        (WebCore::ElementTraversal::traverseNextElementTemplate):
        (WebCore::ElementTraversal::next):
        (WebCore::ElementTraversal::firstWithin):
        (WebCore::ElementTraversal::traverseNextElementSkippingChildrenTemplate):
        (WebCore::ElementTraversal::nextSkippingChildren):
        (NodeTraversal):
        * dom/TreeScope.cpp:
        (WebCore::TreeScope::labelElementForId):
        (WebCore::TreeScope::findAnchor):
        * editing/CompositeEditCommand.cpp:
        (WebCore::CompositeEditCommand::cloneParagraphUnderNewElement):
        * editing/DeleteSelectionCommand.cpp:
        (WebCore::DeleteSelectionCommand::handleGeneralDelete):
        * editing/FrameSelection.cpp:
        (WebCore::scanForForm):
        * editing/markup.cpp:
        (WebCore::completeURLs):
        * html/HTMLFieldSetElement.cpp:
        (WebCore::HTMLFieldSetElement::invalidateDisabledStateUnder):
        (WebCore::HTMLFieldSetElement::childrenChanged):
        (WebCore::HTMLFieldSetElement::legend):
        (WebCore::HTMLFieldSetElement::refreshElementsIfNeeded):
        * html/HTMLFormElement.cpp:
        (WebCore::HTMLFormElement::formElementIndex):
        * html/HTMLLabelElement.cpp:
        (WebCore::HTMLLabelElement::control):
        * html/HTMLLegendElement.cpp:
        (WebCore::HTMLLegendElement::associatedControl):
        * html/HTMLMapElement.cpp:
        (WebCore::HTMLMapElement::mapMouseEvent):
        * html/HTMLNameCollection.cpp:
        (WebCore::HTMLNameCollection::virtualItemAfter):
        * html/HTMLObjectElement.cpp:
        (WebCore::HTMLObjectElement::containsJavaApplet):
        * html/HTMLSelectElement.cpp:
        (WebCore::HTMLSelectElement::recalcListItems):
        * html/shadow/ContentDistributor.cpp:
        (WebCore::ShadowRootContentDistributionData::ensureInsertionPointList):
        * page/FocusController.cpp:
        (WebCore::FocusController::findFocusCandidateInContainer):
        * rendering/RenderCounter.cpp:
        (WebCore::nextInPreOrder):
        * svg/SVGSVGElement.cpp:
        (WebCore::SVGSVGElement::collectIntersectionOrEnclosureList):
        * svg/SVGStyledElement.cpp:
        (WebCore::SVGStyledElement::title):
        * svg/SVGUseElement.cpp:
        (WebCore::removeDisallowedElementsFromSubtree):
        * svg/animation/SMILTimeContainer.cpp:
        (WebCore::SMILTimeContainer::updateDocumentOrderIndexes):

2012-12-11  KyungTae Kim  <ktf.kim@samsung.com>

        [soup] Unused parameter in ResourceHandleSoup.cpp
        https://bugs.webkit.org/show_bug.cgi?id=104728

        Reviewed by Kentaro Hara.

        The soupLogPrinter has unused parameter 'logger', 
        remove the parameter name to fix 'unused parameter' build warning.

        * platform/network/soup/ResourceHandleSoup.cpp:
        (WebCore::soupLogPrinter):

2012-12-11  Xianzhu Wang  <wangxianzhu@chromium.org>

        Fixed position out-of-view check is incorrect when page is scaled
        https://bugs.webkit.org/show_bug.cgi?id=104303

        Reviewed by Kenneth Rohde Christiansen.

        Test: compositing/layer-creation/fixed-position-out-of-view-scaled.html
              compositing/layer-creation/fixed-position-out-of-view-scaled-scroll.html

        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::requiresCompositingForPosition): Scale the content rect of the fixed position layer before checking out-of-view.

2012-12-11  Chris Rogers  <crogers@google.com>

        Implement OfflineAudioContext constructor
        https://bugs.webkit.org/show_bug.cgi?id=104188

        Reviewed by Kentaro Hara.

        The Web Audio layout tests have relied on an undocumented way (in the specification) to render
        audio faster than realtime using an OfflineAudioContext.  We want to expose a proper OfflineAudioContext
        object and constructor instead of piggybacking off of the normal AudioContext.
            
        * CMakeLists.txt:
        * DerivedSources.make:
        * DerivedSources.pri:
        * GNUmakefile.list.am:
        * Modules/webaudio/AudioContext.cpp:
        (WebCore::AudioContext::isSampleRateRangeGood):
        * Modules/webaudio/AudioContext.h:
        (AudioContext):
        * Modules/webaudio/DOMWindowWebAudio.idl:
        * Modules/webaudio/OfflineAudioContext.cpp: Added.
        (WebCore):
        (WebCore::OfflineAudioContext::create):
        (WebCore::OfflineAudioContext::OfflineAudioContext):
        (WebCore::OfflineAudioContext::~OfflineAudioContext):
        * Modules/webaudio/OfflineAudioContext.h: Added.
        (WebCore):
        (OfflineAudioContext):
        * Modules/webaudio/OfflineAudioContext.idl: Added.
        * WebCore.gypi:
        * WebCore.xcodeproj/project.pbxproj:
        * bindings/generic/RuntimeEnabledFeatures.h:
        (WebCore::RuntimeEnabledFeatures::webkitOfflineAudioContextEnabled):
        * bindings/js/JSAudioContextCustom.cpp:
        (WebCore::JSAudioContextConstructor::constructJSAudioContext):
        * bindings/v8/custom/V8AudioContextCustom.cpp:
        (WebCore::V8AudioContext::constructorCallbackCustom):

2012-12-11  Jun Jiang  <jun.a.jiang@intel.com>

        WebGL: Avoid unnecessary memory copy or conversion in texImage2D and texSubImage2D for HTMLVideoElement
        https://bugs.webkit.org/show_bug.cgi?id=102161

        Reviewed by Kenneth Russell.

        There are several memory copy or conversions in the texImage2D and texSubImage2D for HTMLVideoElement which may be avoided. This patch removes the redundant BackingStore copy if the corresponding Graphics port supports the DontCopyBackingStore behavior. Moreover, it optimizes the AlphaOp if the Image source is from HTMLVideoElement to avoid unnecessary Unmultiply or Premultiply operation in unpack/pack. 

        Already covered by current tests. 

        * html/canvas/WebGLRenderingContext.cpp:
        (WebCore):
        (WebCore::WebGLRenderingContext::texImage2DImpl):
        (WebCore::WebGLRenderingContext::texImage2D):
        (WebCore::WebGLRenderingContext::videoFrameToImage): add a parameter to choose BackingStore copy behavior.
        (WebCore::WebGLRenderingContext::texSubImage2DImpl):
        (WebCore::WebGLRenderingContext::texSubImage2D):
        * html/canvas/WebGLRenderingContext.h:
        (WebGLRenderingContext):
        * platform/graphics/GraphicsContext3D.cpp:
        (WebCore::GraphicsContext3D::ImageExtractor::ImageExtractor):
        * platform/graphics/GraphicsContext3D.h:
        (ImageExtractor):
        (WebCore::GraphicsContext3D::ImageExtractor::imageSourceUnpackAlignment):
        (WebCore::GraphicsContext3D::ImageExtractor::imageHtmlDomSource):
        * platform/graphics/ImageBuffer.h:
        (ImageBuffer):
        * platform/graphics/cairo/GraphicsContext3DCairo.cpp:
        (WebCore::GraphicsContext3D::ImageExtractor::extractImage): optimize the AlphaOp for HTMLVideoElement input.
        * platform/graphics/cairo/ImageBufferCairo.cpp:
        (WebCore::ImageBuffer::fastCopyImageMode):
        (WebCore):
        * platform/graphics/cg/ImageBufferCG.cpp:
        (WebCore::ImageBuffer::fastCopyImageMode):
        (WebCore):
        * platform/graphics/qt/ImageBufferQt.cpp:
        (WebCore::ImageBuffer::fastCopyImageMode):
        (WebCore):
        * platform/graphics/skia/GraphicsContext3DSkia.cpp:
        (WebCore::GraphicsContext3D::ImageExtractor::extractImage): optimize the AlphaOp for HTMLVideoElement input.
        * platform/graphics/skia/ImageBufferSkia.cpp:
        (WebCore::ImageBuffer::fastCopyImageMode):
        (WebCore):
        * platform/graphics/wince/ImageBufferWinCE.cpp:
        (WebCore::ImageBuffer::fastCopyImageMode):
        (WebCore):
        * platform/graphics/wx/ImageBufferWx.cpp:
        (WebCore::ImageBuffer::fastCopyImageMode):
        (WebCore):

2012-12-11  Viatcheslav Ostapenko  <v.ostapenko@samsung.com>

        [EFL] Missing implementation of GraphicsContext3DPrivate::platformLayerSize()
        https://bugs.webkit.org/show_bug.cgi?id=104726

        Reviewed by Kenneth Rohde Christiansen.

        Add common implementation of GraphicsContext3DPrivate::platformLayerSize() similar
        to Qt version. There is nothing platform specific in Qt version. 

        Covered by existing tests.

        * platform/graphics/efl/GraphicsContext3DPrivate.cpp:
        (GraphicsContext3DPrivate::platformLayerSize):
        * platform/graphics/efl/GraphicsContext3DPrivate.h:
        (GraphicsContext3DPrivate):

2012-12-11  No'am Rosenthal  <noam@webkit.org>

        [Texmap] Slightly improve readability of the antialias shader
        https://bugs.webkit.org/show_bug.cgi?id=104708

        Reviewed by Martin Robinson.

        Modify the antialiasing shader to include separate function that perform
        discrete operations, rather than one big function that repeats the same
        operations.

        No new tests, readability fix.

        * platform/graphics/texmap/TextureMapperShaderManager.cpp:
        (WebCore::getShaderSpec):

2012-12-11  Tim Horton  <timothy_horton@apple.com>

        -webkit-svg-shadow radius changes don't cause children's boundaries to be recomputed
        https://bugs.webkit.org/show_bug.cgi?id=104722
        <rdar://problem/12821080>

        Reviewed by Simon Fraser.

        Changes to -webkit-svg-shadow currently cause a relayout of the directly affected renderer
        and its parents, but not its children. However, children have the shadow radius
        baked into their cached boundaries, so these need to be invalidated.

        Test: svg/repaint/repaint-webkit-svg-shadow-container.html

        * rendering/RenderObject.h: Expose needsBoundariesUpdate().
        * rendering/svg/RenderSVGContainer.h: Expose needsBoundariesUpdate().
        * rendering/svg/RenderSVGImage.h: Expose needsBoundariesUpdate().
        * rendering/svg/RenderSVGRoot.h: Expose needsBoundariesUpdate().
        * rendering/svg/RenderSVGShape.h: Expose needsBoundariesUpdate().
        * rendering/svg/SVGRenderSupport.cpp:
        (WebCore::SVGRenderSupport::layoutChildren): If the renderer has a shadow and
        is in needs of a boundaries update, mark children as needing boundaries updates too.

2012-12-11  Xianzhu Wang  <wangxianzhu@chromium.org>

        Add window.internals.mainThreadScrollReasonsAsText for testing slow scrolling
        https://bugs.webkit.org/show_bug.cgi?id=104714

        Reviewed by Eric Seidel.

        No new tests. Adds test api for bug 102543 and other bugs.

        * WebCore.exp.in:
        * page/Page.cpp:
        (WebCore::ScrollingCoordinator::mainThreadScrollingReasonsAsText): Extracted from ScrollingStateScrollingNode::dumpProperties for layout tests.
        (WebCore):
        * page/Page.h:
        (Page):
        * page/scrolling/ScrollingCoordinator.cpp:
        (WebCore::ScrollingCoordinator::mainThreadScrollingReasonsAsText):
        (WebCore):
        * page/scrolling/ScrollingCoordinator.h:
        (ScrollingCoordinator):
        * page/scrolling/ScrollingStateScrollingNode.cpp:
        (WebCore::ScrollingStateScrollingNode::dumpProperties): Moved code for mainThreadScrollingReasons to ScrollingCoordinator.cpp.
        * testing/Internals.cpp:
        (WebCore::Internals::mainThreadScrollingReasons):
        (WebCore):
        * testing/Internals.h:
        * testing/Internals.idl:

2012-12-11  Simon Fraser  <simon.fraser@apple.com>

        Enhance the TileCache to cache more tiles
        https://bugs.webkit.org/show_bug.cgi?id=104612

        Reviewed by Tim Horton.

        Add smarts to the TileCache so that it keeps some tiles around
        for longer and can prepopulate tiles in to-be-scrolled-to regions.

        The new tile management is as follows:
        * As before, we expand the visible rect to create a "tile coverage rect"
        which is twice the width, and three times the height of the visible rect.
        * At the edges, this coverage rect is constrained by them, rather than being
        truncated as before (leading to larger initial tile coverage).
        * When tiles leave the coverage rect, we keep them around but track
        them in cohorts (where a cohort is a set of tiles that left the coverage rect
        at the same time).
        * If a repaint comes in for a "secondary" tile, we don't paint it, but mark
        the tile as being stale. It will get repainted (in full) if it moves back inside
        the coverage rect.
        * Cohorts are kept around for 2 seconds after they were created. A repeating
        1-second timer clears tiles in old cohorts.
        * Secondary tiles are pruned if the visible rect changes, or if zooming happens.
        * TiledBacking exposes a way to prepopulate a rect with tiles; this is called
        when scrolling (e.g. via Home/End keys). Tiles created this way (if outside
        the coverage rect) go into a cohort.

        * page/FrameView.cpp:
        (WebCore::FrameView::requestScrollPositionUpdate): Tell the TiledBacking
        to prepopulate some tiles.
        * platform/graphics/TiledBacking.h:
        (TiledBacking): Add prepopulateRect().
        * platform/graphics/ca/mac/TileCache.h:
        (TileInfo): The TileMap contains TileInfos, which contain a pointer
        to the layer, their cohort, and a 'stale content' flag.
        (WebCore::TileCache::TileInfo::TileInfo):
        (TileCache):
        (TileCohortInfo):
        (WebCore::TileCache::TileCohortInfo::TileCohortInfo):
        * platform/graphics/ca/mac/TileCache.mm:
        (WebCore::TileCache::TileCache):
        (WebCore::TileCache::~TileCache):
        (WebCore::TileCache::setNeedsDisplay):
        (WebCore::TileCache::setNeedsDisplayInRect):
        (WebCore::TileCache::setTileNeedsDisplayInRect):
        (WebCore::TileCache::setScale):
        (WebCore::TileCache::setAcceleratesDrawing):
        (WebCore::TileCache::setTilesOpaque):
        (WebCore::TileCache::prepopulateRect):
        (WebCore::TileCache::setTileDebugBorderWidth):
        (WebCore::TileCache::setTileDebugBorderColor):
        (WebCore::TileCache::computeTileCoverageRect):
        (WebCore::TileCache::tileSizeForCoverageRect):
        (WebCore::TileCache::tileRevalidationTimerFired):
        (WebCore::TileCache::blankPixelCount):
        (WebCore::queueTileForRemoval):
        (WebCore::TileCache::removeAllTiles):
        (WebCore::TileCache::removeAllSecondaryTiles):
        (WebCore::TileCache::removeTilesInCohort):
        (WebCore::TileCache::revalidateTiles):
        (WebCore::TileCache::nextTileCohort):
        (WebCore::TileCache::startedNewCohort):
        (WebCore::TileCache::newestTileCohort):
        (WebCore::TileCache::oldestTileCohort):
        (WebCore::TileCache::scheduleCohortRemoval):
        (WebCore::TileCache::cohortRemovalTimerFired):
        (WebCore::TileCache::ensureTilesForRect):
        (WebCore::TileCache::tileGridExtent):
        (WebCore::TileCache::tileCoverageRect):
        (WebCore::TileCache::tileLayerAtIndex):
        (WebCore::TileCache::drawTileMapContents):

2012-12-11  Simon Fraser  <simon.fraser@apple.com>

        Remove redundant AffineTransform in RenderSVGShape::fillAndStrokeShape()
        https://bugs.webkit.org/show_bug.cgi?id=104736

        Reviewed by Dean Jackson.

        RenderSVGShape::fillAndStrokeShape() allocated a AffineTransform on
        the stack which was shadowed by another one in narrower scope. It
        can be removed.

        * rendering/svg/RenderSVGShape.cpp:
        (WebCore::RenderSVGShape::fillAndStrokeShape):

2012-12-11  Seokju Kwon  <seokju.kwon@gmail.com>

        [EFL] Remove unused headers
        https://bugs.webkit.org/show_bug.cgi?id=104661

        Reviewed by Ryosuke Niwa.

        Header inclusion cleanup.
        Remove "NotImplemented.h".

        No new tests, no behavior change.

        * platform/efl/CursorEfl.cpp:
        * platform/efl/FileSystemEfl.cpp:
        * platform/efl/ScrollViewEfl.cpp:
        * platform/efl/ScrollbarThemeEfl.cpp:
        * platform/efl/SoundEfl.cpp:

2012-12-11  Alec Flett  <alecflett@chromium.org>

        IndexedDB: Stub out data operations on IDBDatabaseBackendInterface
        https://bugs.webkit.org/show_bug.cgi?id=104592

        Reviewed by Dimitri Glazkov.

        In preparation for removing objectStore/index backend
        interfaces, stub out the basic data operations around
        get, put, cursors, etc. on IDBDatabaseBackendInterface.

        No new tests, this is just preparation for refactoring.

        * Modules/indexeddb/IDBDatabaseBackendImpl.cpp:
        (WebCore::IDBDatabaseBackendImpl::get):
        (WebCore):
        (WebCore::IDBDatabaseBackendImpl::put):
        (WebCore::IDBDatabaseBackendImpl::setIndexKeys):
        (WebCore::IDBDatabaseBackendImpl::setIndexesReady):
        (WebCore::IDBDatabaseBackendImpl::openCursor):
        (WebCore::IDBDatabaseBackendImpl::count):
        (WebCore::IDBDatabaseBackendImpl::deleteRange):
        (WebCore::IDBDatabaseBackendImpl::clear):
        * Modules/indexeddb/IDBDatabaseBackendImpl.h:
        (IDBDatabaseBackendImpl):
        * Modules/indexeddb/IDBDatabaseBackendInterface.h:
        (WebCore):
        (IDBDatabaseBackendInterface):

2012-12-11  Roger Fong  <roger_fong@apple.com>

        Make Video Track compile on Windows in debug mode.
        https://bugs.webkit.org/show_bug.cgi?id=104720.

        Reviewed by Alexey Proskuryakov.

        urlForLogging method was defined in both HTMLMediaElement.cpp and HTMLTrackElement.cpp. 
        On Windows all the HTMLElements sources are included in an AllInOne source file, 
        so the definitions conflicted. Fixed by renaming the definition in each source file.

        * html/HTMLMediaElement.cpp:
        (WebCore::urlForLoggingMedia):
        (WebCore::HTMLMediaElement::loadResource):
        (WebCore::HTMLMediaElement::isSafeToLoadURL):
        (WebCore::HTMLMediaElement::didRemoveTrack):
        (WebCore::HTMLMediaElement::selectNextSourceChild):
        (WebCore::HTMLMediaElement::sourceWasAdded):
        (WebCore::HTMLMediaElement::sourceWasRemoved):
        * html/HTMLTrackElement.cpp:
        (WebCore::urlForLoggingTrack):
        (WebCore::HTMLTrackElement::canLoadUrl):

2012-12-11  Ryosuke Niwa  <rniwa@webkit.org>

        Mail hangs when resizing the font size of a large RTL text
        https://bugs.webkit.org/show_bug.cgi?id=104643

        Reviewed by Enrica Casucci.

        The bug was caused by ApplyStyleCommand::applyInlineStyleToNodeRange obtaining computed styles while
        removing and adding nodes. Fixed the slowness by breaking it into three phases:
        1. Split the range into contiguous inline runs, and determine whether styles need to be removed or applied.
        2. Remove any conflicting styles, and insert dummy elements at positions where inline styles ought to be
        computed as needed.
        3. Remove the dummy elements and apply ilnine styles as needed.

        No new tests are added since there is no behavior change. This is just a performance improvement. 

        * editing/ApplyStyleCommand.cpp:
        (WebCore::InlineRunToApplyStyle::InlineRunToApplyStyle):
        (WebCore::InlineRunToApplyStyle::startAndEndAreStillInDocument):
        (WebCore::ApplyStyleCommand::applyInlineStyleToNodeRange):
        (WebCore::ApplyStyleCommand::shouldApplyInlineStyleToRun):
        (WebCore::ApplyStyleCommand::removeConflictingInlineStyleFromRun):
        (WebCore::ApplyStyleCommand::addInlineStyleIfNeeded):
        (WebCore::ApplyStyleCommand::positionToComputeInlineStyleChange):
        (WebCore::ApplyStyleCommand::applyInlineStyleChange):
        * editing/ApplyStyleCommand.h:
        * editing/EditingStyle.h:
        (WebCore::StyleChange::StyleChange):

2012-12-11  Xianzhu Wang  <wangxianzhu@chromium.org>

        Incorrect position of layers for fixed position elements when page is scaled smaller than viewport
        https://bugs.webkit.org/show_bug.cgi?id=104294

        Reviewed by James Robinson.

        Fixed issue in scrollOffsetForFixedPosition when contentRect is smaller than visibleContentRect.
        This happens when a page originally bigger than viewport is scaled down to smaller than the viewport.

        Test: compositing/geometry/fixed-position-composited-page-scale-smaller-than-viewport.html

        * page/scrolling/ScrollingCoordinator.cpp:
        (WebCore::fixedPositionScrollOffset): Moved common code in scrollOffsetForFixedPosition here. Fixed issue when contentsSize < visibleContentSize.
        (WebCore::scrollOffsetForFixedPosition):

2012-12-11  Beth Dakin  <bdakin@apple.com>

        https://bugs.webkit.org/show_bug.cgi?id=104725
        Crash in EventHandler::selectCursor() on Mac bots running 
        fast/events/mouse-cursor-image-set.html

        Reviewed by Tim Horton.

        https://bugs.webkit.org/show_bug.cgi?id=99493 enabled image-set for 
        the CSS cursor property. Most of the change is guarded behind #if 
        ENABLE(MOUSE_CURSOR_SCALE). However, image-set was still allowed to 
        parse for the cursor property as long as image-set is enabled 
        (which is the current state on the Mac). This would lead to an 
        inconsistent state where style information would reflect a world 
        where mouse cursor scaling is enabled even though nothing else on 
        the Mac would. 

        The parsing should also be guarded by the cursor scaling flag.
        * css/CSSParser.cpp:
        (WebCore::CSSParser::parseValue):

2012-12-11  Emil A Eklund  <eae@chromium.org>

        Clamp out-of-range numbers in CSS
        https://bugs.webkit.org/show_bug.cgi?id=102735

        Reviewed by Simon Fraser.

        Currently when a large number (outside of the supported range)
        is applied from a style rule or set from javascript using
        Element.style we check if it is within the supported range and
        set it to zero if it is not. This is incorrect and confusing.
        
        Change it to clamp values to the supported range. This matches
        the behavior in Gecko.

        Test: fast/css/large-numbers.html

        * css/CSSPrimitiveValue.cpp:
        (WebCore::CSSPrimitiveValue::computeLength):
        Change to clamp out-of-range values instead of interpreting them
        as zero.

2012-12-11  Nate Chapin  <japhet@chromium.org>

        Ensure ResourceRequests for main resources include fragment indentifiers when necessary,
        regressed by r137333.
        https://bugs.webkit.org/show_bug.cgi?id=104721

        Rubber-stamped by Dimitri Glazkov.

        No new tests.

        * loader/SubresourceLoader.cpp:
        (WebCore::SubresourceLoader::willSendRequest):

2012-12-11  Huang Dongsung  <luxtella@company100.net>

        [GTK] REGRESSION(r135620): Accelerated Compositing does not draw some pages.
        https://bugs.webkit.org/show_bug.cgi?id=104640

        Reviewed by Noam Rosenthal.

        After r135620, Accelerated Compositing does not draw some pages, because
        r135620 changes the tree-traversal behavior.  Before r135620, we
        returned early if TextureMapperLayer can not get TextureMapper from the
        root layer. However, after r135620, we run the tree-traversal even if
        TextureMapperLayer can not get TextureMapper.  This patch makes
        TextureMapperLayer return early like code before r135620.

        Covered by existing tests.

        * platform/graphics/texmap/GraphicsLayerTextureMapper.cpp:
        (WebCore::GraphicsLayerTextureMapper::flushCompositingState):

2012-12-11  Dan Bernstein  <mitz@apple.com>

        <rdar://problem/12771885> Support ruby-position: {before, after}
        https://bugs.webkit.org/show_bug.cgi?id=103569

        Reviewed by Anders Carlsson.

        Specified in <http://www.w3.org/TR/2011/WD-css3-ruby-20110630/#rubypos>, the ruby-position
        property takes four values: before, after, inter-character, and inline. This change adds
        support for the values before and after.

        Test: fast/ruby/position-after.html

        * css/CSSComputedStyleDeclaration.cpp:
        (WebCore::CSSComputedStyleDeclaration::getPropertyCSSValue): Handle ruby-position.
        * css/CSSParser.cpp:
        (WebCore::isValidKeywordPropertyAndValue): Accept before and after as valid values for
        ruby-position.
        (WebCore::isKeywordPropertyID): Added ruby-position to the list of properties with keyword
        values.
        (WebCore::CSSParser::parseValue): Added ruby-position to the switch statement.
        * css/CSSPrimitiveValueMappings.h:
        (WebCore::CSSPrimitiveValue::CSSPrimitiveValue): Added mapping from RubyPosition.
        (WebCore::CSSPrimitiveValue::operator RubyPosition): Added mapping from CSSPrimitiveValue.
        * css/CSSProperty.cpp:
        (WebCore::CSSProperty::isInheritedProperty): Added ruby-position as an inherited property.
        * css/CSSPropertyNames.in: Added -webkit-ruby-position.
        * css/CSSValueKeywords.in: Added after and before.
        * css/StyleBuilder.cpp:
        (WebCore::StyleBuilder::StyleBuilder): Added a handler for ruby-position.
        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::applyProperty): Added ruby-position.
        * rendering/InlineFlowBox.cpp:
        (WebCore::InlineFlowBox::placeBoxesInBlockDirection): Changed to choose which of
        hasAnnotationsBefore and hasAnnotationsAfter to set based on ruby position.
        (WebCore::InlineFlowBox::computeOverAnnotationAdjustment): Changed to adjust only for
        ruby positioned before the base.
        (WebCore::InlineFlowBox::computeUnderAnnotationAdjustment): Added adjustment for ruby
        positioned after the base.
        * rendering/RenderRubyRun.cpp:
        (WebCore::RenderRubyRun::layout): Account for ruby-position when positioning the ruby text
        relative to the base.
        * rendering/style/RenderStyle.cpp:
        (WebCore::RenderStyle::diff): Made a ruby-position difference a layout difference.
        * rendering/style/RenderStyle.h: Added rubyPosition(), setRubyPosition(), and 
        initialRubyPosition().
        * rendering/style/RenderStyleConstants.h: Added the RubyPosition enum.
        * rendering/style/StyleRareInheritedData.cpp:
        (WebCore::StyleRareInheritedData::StyleRareInheritedData): Added initialized for
        m_rubyPosition. Added copying the value of this member to the copy constructor.
        (WebCore::StyleRareInheritedData::operator==): Added comparison of m_rubyPosition.
        * rendering/style/StyleRareInheritedData.h:
        (StyleRareInheritedData): Added m_rubyPosition member variable.

2012-12-11  Michael Pruett  <michael@68k.org>

        [JSC] Add tests for explicit serialization values
        https://bugs.webkit.org/show_bug.cgi?id=104423

        Reviewed by Oliver Hunt.

        Add tests for serialization and deserialization mechanisms of
        the JSC implementation of SerializedScriptValue. Similar tests
        already exist for the V8 implementation.

        Test: platform/jsc/fast/storage/serialized-script-value.html

        * WebCore.exp.in:
        * testing/Internals.cpp:
        (WebCore::Internals::serializeObject):
        (WebCore::Internals::deserializeBuffer):

2012-12-11  Alexis Menard  <alexis@webkit.org>

        Cleanup: Use consistent naming in CSSParser when dealing with the forward slash operator.
        https://bugs.webkit.org/show_bug.cgi?id=104699

        Reviewed by Daniel Bates.

        http://trac.webkit.org/changeset/136525 added an helper function to
        check if a CSSParserValue is a forward slash operator.
        BorderImageParseContext is also dealing with the forward slash operator
        but its naming is inconsistent with isForwardSlashOperator(). This is
        fixed with this patch where BorderImageParseContext::{allowSlash,
        commitSlash}() is now replaced by BorderImageParseContext::{allowForwardSlashOperator,
        commitForwardSlashOperator}().

        No new tests : just a renaming, covered by existing tests..

        * css/CSSParser.cpp:
        (WebCore::CSSParser::parseFillPosition): A little fixup on the way, use
        isForwardSlashOperator() instead of the current code here.
        (WebCore::BorderImageParseContext::BorderImageParseContext):
        (WebCore::BorderImageParseContext::allowForwardSlashOperator):
        (WebCore::BorderImageParseContext::commitImage):
        (WebCore::BorderImageParseContext::commitImageSlice):
        (WebCore::BorderImageParseContext::commitForwardSlashOperator):
        (WebCore::BorderImageParseContext::commitBorderWidth):
        (WebCore::BorderImageParseContext::commitBorderOutset):
        (WebCore::BorderImageParseContext::commitRepeat):
        (BorderImageParseContext):
        (WebCore::CSSParser::parseBorderImage):

2012-12-11  Nate Chapin  <japhet@chromium.org>

        cr-linux valgrind is showing leaks due to r137333.

        Rubber-stamped by Antti Koivisto.

        MainResourceLoader's destructor should call m_resource->removeClient(this) is m_resource is still non-null.
        The missing removeClient() call will leak the CachedResource.

        No new tests, should shut valgrind up.

        * loader/MainResourceLoader.cpp:
        (WebCore::MainResourceLoader::~MainResourceLoader):

2012-12-11  Andreas Kling  <akling@apple.com>

        REGRESSION(r133492): Heap-use-after-free in WebCore::Element::normalizeAttributes
        <http://webkit.org/b/104488>

        Reviewed by Antti Koivisto.

        Don't cache the AttrNodeList* in a local when iterating over an Element's Attr nodes since
        that pointer may go stale if JS runs in response to a DOMSubtreeModified event below Node::normalize().

        Test: fast/dom/normalize-attributes-mutation-event-crash.html

        * dom/Element.cpp:
        (WebCore::Element::normalizeAttributes):

2012-12-11  Jonathon Jongsma  <jonathon.jongsma@collabora.co.uk>

        [GTK] Soup network logs are frequently interrupted by other logging messages
        https://bugs.webkit.org/show_bug.cgi?id=104668

        Reviewed by Martin Robinson.

        Set an external soup log printer that uses the WebKit logging
        infrastructure so that log messages are properly synchronized.

        * platform/network/soup/ResourceHandleSoup.cpp:
        (WebCore::soupLogPrinter):
        (WebCore):
        (WebCore::ensureSessionIsInitialized):

2012-12-11  Elliott Sprehn  <esprehn@chromium.org>

        Switch to new PseudoElement based :before and :after
        https://bugs.webkit.org/show_bug.cgi?id=104462

        Reviewed by Antti Koivisto.

        Switch to the new PseudoElement based generated content implementation
        that moves :before and :after into the DOM. This also switches to using
        the ComposedShadowTreeWalker for determining the siblings of PseudoElement's
        making the new generated content implementation support adding :before
        and :after into <input> elements.

        Tests: fast/css-generated-content/block-inside-inline.html
               fast/css-generated-content/box-orient.html

        * dom/ComposedShadowTreeWalker.cpp:
        (WebCore::ComposedShadowTreeWalker::pseudoAwareNextSibling):
        (WebCore):
        (WebCore::ComposedShadowTreeWalker::pseudoAwarePreviousSibling):
        (WebCore::ComposedShadowTreeWalker::traverseParent):
        * dom/ComposedShadowTreeWalker.h:
        (ComposedShadowTreeWalker):
        * dom/Element.cpp:
        (WebCore::Element::attach):
        (WebCore::Element::recalcStyle):
        * dom/Node.cpp:
        * dom/Node.h:
        (Node):
        * dom/NodeRenderingContext.cpp:
        (WebCore::NodeRenderingContext::nextRenderer):
        (WebCore::NodeRenderingContext::previousRenderer):
        (WebCore::NodeRenderingContext::createRendererForElementIfNeeded):
        * dom/Position.cpp:
        (WebCore::Position::Position):
        (WebCore::Position::hasRenderedNonAnonymousDescendantsWithHeight):
        * editing/visible_units.cpp:
        (WebCore::logicallyPreviousBox):
        (WebCore::logicallyNextBox):
        (WebCore::startPositionForLine):
        (WebCore::endPositionForLine):
        * html/HTMLTextFormControlElement.cpp:
        (WebCore::HTMLTextFormControlElement::childShouldCreateRenderer):
        * page/DragController.cpp:
        (WebCore::DragController::draggableNode):
        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::styleDidChange):
        (WebCore::RenderBlock::splitBlocks):
        (WebCore::RenderBlock::addChildIgnoringAnonymousColumnBlocks):
        (WebCore::RenderBlock::createReplacementRunIn):
        (WebCore::RenderBlock::isSelectionRoot):
        * rendering/RenderBlock.h:
        (RenderBlock):
        * rendering/RenderButton.cpp:
        * rendering/RenderButton.h:
        (RenderButton):
        * rendering/RenderInline.cpp:
        (WebCore::RenderInline::styleDidChange):
        (WebCore::RenderInline::addChildIgnoringContinuation):
        (WebCore::RenderInline::splitInlines):
        * rendering/RenderListItem.cpp:
        (WebCore::RenderListItem::updateMarkerLocation):
        * rendering/RenderObject.cpp:
        (WebCore::RenderObject::createVisiblePosition):
        * rendering/RenderObject.h:
        (WebCore::RenderObject::nonPseudoNode):
        (RenderObject):
        (WebCore::RenderObject::clearNode):
        (WebCore::RenderObject::generatingNode):
        * rendering/RenderObjectChildList.cpp:
        * rendering/RenderObjectChildList.h:
        (RenderObjectChildList):
        * rendering/RenderRubyText.cpp:
        * rendering/RenderRubyText.h:
        (RenderRubyText):
        * rendering/RenderTableRow.cpp:
        (WebCore::RenderTableRow::styleDidChange):
        * rendering/RenderTableRow.h:
        * rendering/RenderTableSection.cpp:
        (WebCore::RenderTableSection::addChild):
        * rendering/RenderWidget.cpp:
        (WebCore::RenderWidget::destroy):

2012-12-11  Jacky Jiang  <zhajiang@rim.com>

        [BlackBerry] Clean up unused defaultViewportArguments in RenderThemeBlackBerry.cpp
        https://bugs.webkit.org/show_bug.cgi?id=104683

        Reviewed by Rob Buis.

        * platform/blackberry/RenderThemeBlackBerry.cpp:
        (WebCore::determineFullScreenMultiplier):

2012-12-11  Nate Chapin  <japhet@chromium.org>

        Route main resource loads through the memory cache.
        https://bugs.webkit.org/show_bug.cgi?id=49246

        Reviewed by Antti Koivisto.

        Note that this patch doesn't actually enable caching of main resources. That will be done in a later patch.
        The MainResourceLoader actually has an underlying SubresourceLoader (with the cache layer between them).
        In several places, the MainResourceLoader's SubresourceLoader is treated as special.

        No new tests, as this is primarily a refactor. A couple of expected results changed slightly.

        * loader/DocumentLoader.cpp:
        (WebCore::DocumentLoader::setRequest):
        (WebCore::DocumentLoader::subresource):
        (WebCore::DocumentLoader::addSubresourceLoader): Because the SubresourceLoader underlying the main resource
            needs special handling in certain cases, track it separately from the real SubresourceLoaders.
        (WebCore::DocumentLoader::removeSubresourceLoader):
        (WebCore::DocumentLoader::startLoadingMainResource):
        * loader/MainResourceLoader.cpp:
        (WebCore::MainResourceLoader::MainResourceLoader):
        (WebCore::MainResourceLoader::receivedError):
        (WebCore::MainResourceLoader::cancel):
        (WebCore::MainResourceLoader::clearResource):
        (WebCore):
        (WebCore::MainResourceLoader::frameLoader):
        (WebCore::MainResourceLoader::request):
        (WebCore::MainResourceLoader::continueAfterNavigationPolicy):
        (WebCore::MainResourceLoader::resourceData):
        (WebCore::MainResourceLoader::redirectReceived):
        (WebCore::MainResourceLoader::willSendRequest):
        (WebCore::MainResourceLoader::continueAfterContentPolicy):
        (WebCore::MainResourceLoader::responseReceived):
        (WebCore::MainResourceLoader::dataReceived):
        (WebCore::MainResourceLoader::didFinishLoading):
        (WebCore::MainResourceLoader::notifyFinished):
        (WebCore::MainResourceLoader::reportMemoryUsage):
        (WebCore::MainResourceLoader::handleSubstituteDataLoadNow):
        (WebCore::MainResourceLoader::load):
        (WebCore::MainResourceLoader::setDefersLoading):
        (WebCore::MainResourceLoader::defersLoading):
        (WebCore::MainResourceLoader::setShouldBufferData):
        (WebCore::MainResourceLoader::loader):
        (WebCore::MainResourceLoader::identifier):
        * loader/MainResourceLoader.h:
        (MainResourceLoader):
        (WebCore::MainResourceLoader::documentLoader):
        * loader/ResourceLoader.cpp:
        (WebCore::ResourceLoader::willSendRequest):
        * loader/ResourceLoader.h:
        (WebCore::ResourceLoader::defersLoading):
        (WebCore::ResourceLoader::cancelled):
        * loader/appcache/ApplicationCacheHost.cpp:
        (WebCore::ApplicationCacheHost::maybeLoadFallbackForMainResponse):
        (WebCore::ApplicationCacheHost::maybeLoadFallbackForMainError):
        * loader/mac/DocumentLoaderMac.cpp:
        (WebCore::DocumentLoader::schedule):
        (WebCore::DocumentLoader::unschedule):

2012-12-11  Aaron Colwell  <acolwell@chromium.org>

        Update MediaSource to allow append() calls in "ended" state.
        https://bugs.webkit.org/show_bug.cgi?id=104581

        Reviewed by Eric Carlson.

        Updated append and setTimestampOffset to allow appending in the "ended" readyState. An append() call
        in the "ended" state now triggers a transition to the "open" state and allows the append to succeed.

        Tests: http/tests/media/media-source/video-media-source-append-in-ended-state.html
               http/tests/media/media-source/video-media-source-append-with-offset-in-ended-state.html
               http/tests/media/media-source/video-media-source-zero-byte-append-in-ended-state.html

        * Modules/mediasource/MediaSource.cpp:
        (WebCore::MediaSource::append):
        (WebCore::MediaSource::setTimestampOffset):

2012-12-11  Robert Hogan  <robert@webkit.org>

        REGRESSION(r121789): Text not wrapping in presence of floating objects
        https://bugs.webkit.org/show_bug.cgi?id=101803

        Reviewed by David Hyatt.

        When determining if a line needs to offset to avoid any floats use RenderBlock::lineHeight() 
        to estimate the height of the line. If the container has floats stacked up with different widths
        that straddle the line, using a height of zero will make the first line think it has
        more width available than it actually does and it will end up extruding from its container.
        
        The logic for finding the offset of inline blocks and images needs to use a similar heuristic.
        So nextLineBreak() now updates the available width if it encounters a replaced element (e.g. inline block,
        image) at the start of a line, using the height of the element to decide which floats to avoid. 
        RenderBlock::computeInlineDirectionPositionsForLine() does the same thing when laying out the line.

        Tests: fast/block/float/floats-offset-image-quirk-lineheight.html
               fast/block/float/floats-offset-image-quirk.html
               fast/block/float/floats-offset-image-strict-lineheight.html
               fast/block/float/floats-offset-image-strict.html
               fast/block/float/floats-offset-inline-block-quirk-lineheight.html
               fast/block/float/floats-offset-inline-block-strict-lineheight.html
               fast/block/float/floats-offset-linebox-contain-block.html
               fast/block/float/floats-offset-linebox-contain-inline.html
               fast/block/float/floats-wrap-inside-inline-006.html
               fast/block/float/floats-wrap-inside-inline-007.html

        * rendering/RenderBlockLineLayout.cpp:
        (LineWidth):
        (WebCore::logicalHeightForLine):
            This method needs to cope with the quirk where an image alone on a line will get its descent stripped away so
            ignore the height of the line and use the height of the image in that case.
        (WebCore::LineWidth::updateAvailableWidth):
        (WebCore::updateLogicalInlinePositions):
        (WebCore):
        (WebCore::RenderBlock::computeInlineDirectionPositionsForLine):
        (WebCore::RenderBlock::computeInlineDirectionPositionsForSegment):
        (WebCore::RenderBlock::LineBreaker::nextSegmentBreak):

2012-12-11  Carlos Garcia Campos  <cgarcia@igalia.com>

        [GTK] Install GObject DOM bindings headers in its own directory
        https://bugs.webkit.org/show_bug.cgi?id=104663

        Reviewed by Gustavo Noronha Silva.

        Move the headers from webkit to webkitdom directory.

        * bindings/gobject/GNUmakefile.am:
        * bindings/gobject/WebKitDOMBinding.h:
        * bindings/gobject/WebKitDOMCustom.h:
        * bindings/gobject/WebKitDOMEventTarget.h:
        * bindings/gobject/WebKitDOMEventTargetPrivate.h:
        * bindings/gobject/WebKitDOMObject.h:
        * bindings/scripts/CodeGeneratorGObject.pm:
        (Generate):
        (WriteData):
        * bindings/scripts/gobject-generate-headers.pl:
        * bindings/scripts/test/GObject/WebKitDOMFloat64Array.h:
        * bindings/scripts/test/GObject/WebKitDOMFloat64ArrayPrivate.h:
        * bindings/scripts/test/GObject/WebKitDOMTestActiveDOMObject.h:
        * bindings/scripts/test/GObject/WebKitDOMTestActiveDOMObjectPrivate.h:
        * bindings/scripts/test/GObject/WebKitDOMTestCallback.h:
        * bindings/scripts/test/GObject/WebKitDOMTestCallbackPrivate.h:
        * bindings/scripts/test/GObject/WebKitDOMTestCustomNamedGetter.h:
        * bindings/scripts/test/GObject/WebKitDOMTestCustomNamedGetterPrivate.h:
        * bindings/scripts/test/GObject/WebKitDOMTestEventConstructor.h:
        * bindings/scripts/test/GObject/WebKitDOMTestEventConstructorPrivate.h:
        * bindings/scripts/test/GObject/WebKitDOMTestEventTarget.h:
        * bindings/scripts/test/GObject/WebKitDOMTestEventTargetPrivate.h:
        * bindings/scripts/test/GObject/WebKitDOMTestException.h:
        * bindings/scripts/test/GObject/WebKitDOMTestExceptionPrivate.h:
        * bindings/scripts/test/GObject/WebKitDOMTestInterface.h:
        * bindings/scripts/test/GObject/WebKitDOMTestInterfacePrivate.h:
        * bindings/scripts/test/GObject/WebKitDOMTestMediaQueryListListener.h:
        * bindings/scripts/test/GObject/WebKitDOMTestMediaQueryListListenerPrivate.h:
        * bindings/scripts/test/GObject/WebKitDOMTestNamedConstructor.h:
        * bindings/scripts/test/GObject/WebKitDOMTestNamedConstructorPrivate.h:
        * bindings/scripts/test/GObject/WebKitDOMTestNode.h:
        * bindings/scripts/test/GObject/WebKitDOMTestNodePrivate.h:
        * bindings/scripts/test/GObject/WebKitDOMTestObj.h:
        * bindings/scripts/test/GObject/WebKitDOMTestObjPrivate.h:
        * bindings/scripts/test/GObject/WebKitDOMTestOverloadedConstructors.h:
        * bindings/scripts/test/GObject/WebKitDOMTestOverloadedConstructorsPrivate.h:
        * bindings/scripts/test/GObject/WebKitDOMTestSerializedScriptValueInterface.h:
        * bindings/scripts/test/GObject/WebKitDOMTestSerializedScriptValueInterfacePrivate.h:

2012-12-11  Mark Pilgrim  <pilgrim@chromium.org>

        [Chromium] Clean up unused interfaces in PlatformSupport
        https://bugs.webkit.org/show_bug.cgi?id=104674

        Reviewed by Darin Fisher.

        Part of a refactoring series. See tracking bug 82948. Also, there
        were some function declarations that were supposed to be removed
        as part of bug 102699 but got left out of the final patch.

        * platform/chromium/PlatformSupport.h:
        (WebCore):
        (PlatformSupport):

2012-12-11  Joone Hur  <joone.hur@intel.com>, Gustavo Noronha Silva  <gustavo.noronha@collabora.com>

        [GTK] Update GraphicsLayerClutter
        https://bugs.webkit.org/show_bug.cgi?id=92045

        Reviewed by Gustavo Noronha Silva.

        Add more methods to GraphicsLayerClutter in order to run CSS 3D transforms 
        by using GraphicsLayerActor.

        No new tests. This will be covered by pixel tests for Qt and GTK+ accelerated
        compositing and 3D transforms.

        * platform/graphics/clutter/GraphicsLayerClutter.cpp:
        (WebCore):
        (WebCore::GraphicsLayerClutter::GraphicsLayerClutter):
        (WebCore::idleDestroy):
        (WebCore::GraphicsLayerClutter::~GraphicsLayerClutter):
        (WebCore::GraphicsLayerClutter::setName):
        (WebCore::GraphicsLayerClutter::platformLayer): Returns the platform layer(ClutterAcotr).
        (WebCore::GraphicsLayerClutter::setNeedsDisplay): Update the display.
        (WebCore::GraphicsLayerClutter::setNeedsDisplayInRect): Update part of the Display.
        (WebCore::GraphicsLayerClutter::setAnchorPoint):
        (WebCore::GraphicsLayerClutter::setPosition):
        (WebCore::GraphicsLayerClutter::setSize):
        (WebCore::GraphicsLayerClutter::setTransform):
        (WebCore::GraphicsLayerClutter::setDrawsContent):
        (WebCore::GraphicsLayerClutter::setParent):
        (WebCore::GraphicsLayerClutter::setChildren):
        (WebCore::GraphicsLayerClutter::addChild):
        (WebCore::GraphicsLayerClutter::addChildAtIndex):
        (WebCore::GraphicsLayerClutter::addChildBelow):
        (WebCore::GraphicsLayerClutter::addChildAbove):
        (WebCore::GraphicsLayerClutter::replaceChild):
        (WebCore::GraphicsLayerClutter::removeFromParent):
        (WebCore::GraphicsLayerClutter::platformClutterLayerPaintContents):
        (WebCore::GraphicsLayerClutter::platformClutterLayerAnimationStarted):
        (WebCore::GraphicsLayerClutter::repaintLayerDirtyRects):
        (WebCore::GraphicsLayerClutter::computePositionRelativeToBase):
        (WebCore::GraphicsLayerClutter::flushCompositingState): Synchronize the corresponding Actors with the current 
        compositing states of this GraphicsLayer and its child layers. 
        (WebCore::GraphicsLayerClutter::recursiveCommitChanges):
        (WebCore::GraphicsLayerClutter::flushCompositingStateForThisLayerOnly): Commit batched changes non-recursively. 
        (WebCore::GraphicsLayerClutter::commitLayerChangesAfterSublayers): Reset layer changes after we recurse on children.
        (WebCore::GraphicsLayerClutter::noteSublayersChanged):
        (WebCore::GraphicsLayerClutter::noteLayerPropertyChanged):
        (WebCore::GraphicsLayerClutter::commitLayerChangesBeforeSublayers): Commit layer changes before we recurse on children.
        (WebCore::GraphicsLayerClutter::updateGeometry): Updated the position and size of the Actor.
        (WebCore::GraphicsLayerClutter::updateSublayerList): Updated the list of child Actors. 
        (WebCore::GraphicsLayerClutter::updateLayerNames):
        (WebCore::GraphicsLayerClutter::updateTransform):
        (WebCore::GraphicsLayerClutter::updateLayerDrawsContent):
        (WebCore::GraphicsLayerClutter::layerForSuperlayer):
        * platform/graphics/clutter/GraphicsLayerClutter.h:
        (WebCore):
        (WebCore::GraphicsLayerClutter::primaryLayer):
        (GraphicsLayerClutter):

2012-12-11  Jessie Berlin  <jberlin@apple.com>

        Revert incorrect build fix.

        * WebCore.exp.in:

2012-12-11  Jessie Berlin  <jberlin@apple.com>

        Fix the Mac build after r137261

        * WebCore.exp.in:

2012-12-11  Joone Hur  <joone.hur@intel.com>, Gustavo Noronha Silva  <gustavo.noronha@collabora.com>

        [GTK] Add GraphicsLayerActor
        https://bugs.webkit.org/show_bug.cgi?id=91940

        Reviewed by Gustavo Noronha Silva.

        GraphicsLayerActor, which is a new ClutterActor, represents a node in the GPU-renderable layer tree
        when accelerated compositing is enabled with Clutter as acceleration backend.
        This patch allows to support basic features of CSS 3D Transforms.

        No new tests. This will be covered by pixel tests for Qt and GTK+ accelerated
        compositing and 3D transforms.

        * GNUmakefile.list.am:
        * platform/graphics/clutter/GraphicsLayerActor.cpp: Added.
        (_GraphicsLayerActorPrivate):
        (graphics_layer_actor_class_init): GObject configuration of a new Clutter Actor.
        (graphics_layer_actor_init): Initialization of the private data of this actor.
        (graphicsLayerActorSetProperty): GObject property setter.
        (graphicsLayerActorGetProperty): GObject property getter.
        (graphicsLayerActorDispose): Called to drop all references to other objects.
        (graphicsLayerActorAllocate):  Called to set the coordinates of an actor.
        (graphicsLayerActorApplyTransform): Applying the transformation to an actor before painting it.
        (graphicsLayerActorPaint): Called to paint the actor.
        (graphicsLayerActorDraw): Called each time a ClutterCairoTexture has been invalidated.
        (graphicsLayerActorAdded): Called each time an actor has been added to container.
        (graphicsLayerActorRemoved): Called each time an actor is removed from container.
        (graphicsLayerActorNew): Create a specific layer type of GraphicsLayerActor object.
        (graphicsLayerActorNewWithClient): Create a specific layer type of GraphicsLayerActor object with 
        its PlatformClutterClientLayer.
        (graphicsLayerActorSetClient): Added setter to set the PlatformClutterClientLayer.
        (graphicsLayerActorGetClient): Added getter to get the PlatformClutterClientLayer.
        (graphicsLayerActorRemoveAll): Remove all child actors.
        (graphicsLayerUpdateTexture): Create a ClutterCairoTexture.
        (graphicsLayerActorGetSurface): Added setter to set a cairo_surface_t.
        (graphicsLayerActorSetSurface): Added getter to get the cairo_surface_t.
        (graphicsLayerActorInvalidateRectangle):
        (graphicsLayerActorSetTransform): Set a CoglMatrix to apply matrix transform.
        (graphicsLayerActorSetAnchorPoint):
        (graphicsLayerActorGetAnchorPoint):
        (graphicsLayerActorSetScrollPosition):
        (graphicsLayerActorGetnChildren):
        (graphicsLayerActorReplaceSublayer):
        (graphicsLayerActorInsertSublayer):
        (graphicsLayerActorSetSublayers):
        (graphicsLayerActorGetLayerType):
        (graphicsLayerActorSetLayerType):
        (graphicsLayerActorSetTranslateX):
        (graphicsLayerActorGetTranslateX):
        (graphicsLayerActorSetTranslateY):
        (graphicsLayerActorGetTranslateY):
        (graphicsLayerActorSetDrawsContent): Added setter to paint content inside a layer.
        (graphicsLayerActorGetDrawsContent): Added getter to get the value of the drawsContent. 
        * platform/graphics/clutter/GraphicsLayerActor.h: Added.
        (_GraphicsLayerActor):
        (_GraphicsLayerActorClass):
        * platform/graphics/clutter/GraphicsLayerClutter.h:
        (WebCore):

2012-12-11  Mike West  <mkwst@chromium.org>

        Web Inspector: ConsoleTypes should not expose MessageType - it should be private to inspector.
        https://bugs.webkit.org/show_bug.cgi?id=66371

        Reviewed by Pavel Feldman.

        We can simplify console message generation a bit, as nothing outside the
        Console object itself will generate messages of any type other than
        LogMessageType. This patch refactors the externally-facing API endpoints
        on ScriptExecutionContext and Console to drop the MessageType parameter,
        moves the MessageType enum into a new InspectorConsoleTypes.h header,
        and updates all the call sites (and ChromeClients) to drop the parameter
        from their interfaces.

        As a temporary bandage for ports using this interface, this patch
        includes aliases for the new methods that retain the old interface.
        I'll remove them in a future patch.

        Here, we only refactor an internal interface. No tests should break.

        * GNUmakefile.list.am:
        * Target.pri:
        * WebCore.gypi:
        * WebCore.vcproj/WebCore.vcproj:
        * WebCore.xcodeproj/project.pbxproj:
            We added a new file! OMG!
        * Modules/webaudio/AudioBufferSourceNode.cpp:
        (WebCore::AudioBufferSourceNode::looping):
        (WebCore::AudioBufferSourceNode::setLooping):
        * Modules/webdatabase/AbstractDatabase.cpp:
        (WebCore::AbstractDatabase::logErrorMessage):
        * Modules/websockets/WebSocket.cpp:
        (WebCore::WebSocket::connect):
        (WebCore::WebSocket::send):
        (WebCore::WebSocket::close):
        (WebCore::WebSocket::setBinaryType):
        * Modules/websockets/WebSocketChannel.cpp:
        (WebCore::WebSocketChannel::fail):
        (WebCore::WebSocketChannel::didFailSocketStream):
        * bindings/js/JSCustomXPathNSResolver.cpp:
        (WebCore::JSCustomXPathNSResolver::lookupNamespaceURI):
        * bindings/v8/custom/V8CustomXPathNSResolver.cpp:
        (WebCore::V8CustomXPathNSResolver::lookupNamespaceURI):
        * css/MediaList.cpp:
        (WebCore::addResolutionWarningMessageToConsole):
        * dom/Document.cpp:
        (WebCore::Document::logExceptionToConsole):
        (WebCore::Document::processHttpEquiv):
        (WebCore::Document::addMessage):
        * dom/Document.h:
        (Document):
        * dom/ScriptElement.cpp:
        (WebCore::ScriptElement::notifyFinished):
        * dom/ScriptExecutionContext.cpp:
        (WebCore::ScriptExecutionContext::AddConsoleMessageTask::performTask):
        (WebCore::ScriptExecutionContext::addConsoleMessage):
        * dom/ScriptExecutionContext.h:
        (ScriptExecutionContext):
        (WebCore::ScriptExecutionContext::AddConsoleMessageTask::create):
        (WebCore::ScriptExecutionContext::AddConsoleMessageTask::AddConsoleMessageTask):
        * dom/ViewportArguments.cpp:
        (WebCore::reportViewportWarning):
        * fileapi/WebKitBlobBuilder.cpp:
        (WebCore::BlobBuilder::append):
        * html/HTMLFormControlElement.cpp:
        (WebCore::shouldAutofocus):
        * html/HTMLFormElement.cpp:
        (WebCore::HTMLFormElement::validateInteractively):
        * html/HTMLIFrameElement.cpp:
        (WebCore::HTMLIFrameElement::parseAttribute):
        * html/HTMLTrackElement.cpp:
        (WebCore::HTMLTrackElement::canLoadUrl):
        * html/canvas/CanvasRenderingContext2D.cpp:
        (WebCore::CanvasRenderingContext2D::getImageData):
        * html/canvas/WebGLRenderingContext.cpp:
        (WebCore):
        (WebCore::WebGLRenderingContext::printWarningToConsole):
        * html/parser/XSSAuditor.cpp:
        (WebCore::XSSAuditor::init):
        (WebCore::XSSAuditor::filterToken):
        * inspector/ConsoleAPITypes.h: Added.
        (WebCore):
        * inspector/ConsoleMessage.h:
        * inspector/InspectorConsoleAgent.h:
        * inspector/InspectorDebuggerAgent.h:
        * inspector/InspectorInstrumentation.cpp:
        (WebCore):
        * inspector/InspectorInstrumentation.h:
        * inspector/InspectorProfilerAgent.cpp:
        * loader/EmptyClients.h:
        (WebCore::EmptyChromeClient::addMessageToConsole):
        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::reportLocalLoadFailed):
        (WebCore::FrameLoader::shouldInterruptLoadForXFrameOptions):
        * loader/ImageLoader.cpp:
        (WebCore::ImageLoader::notifyFinished):
        * loader/MainResourceLoader.cpp:
        (WebCore::MainResourceLoader::didReceiveResponse):
        * loader/MixedContentChecker.cpp:
        (WebCore::MixedContentChecker::logWarning):
        * loader/TextTrackLoader.cpp:
        (WebCore::TextTrackLoader::corsPolicyPreventedLoad):
        * loader/appcache/ApplicationCacheGroup.cpp:
        (WebCore::ApplicationCacheGroup::abort):
        (WebCore::ApplicationCacheGroup::didReceiveResponse):
        (WebCore::ApplicationCacheGroup::didFinishLoading):
        (WebCore::ApplicationCacheGroup::didFail):
        (WebCore::ApplicationCacheGroup::didReceiveManifestResponse):
        (WebCore::ApplicationCacheGroup::didFinishLoadingManifest):
        (WebCore::ApplicationCacheGroup::checkIfLoadIsComplete):
        * loader/cache/CachedResourceLoader.cpp:
        (WebCore::CachedResourceLoader::printAccessDeniedMessage):
        * page/ChromeClient.h:
        (ChromeClient):
            Drop LogMessageType from everywhere.
        * page/Console.cpp:
        (WebCore::Console::addMessage):
        (WebCore::internalAddMessage):
        (WebCore::Console::error):
        (WebCore::Console::log):
        (WebCore::Console::warn):
        (WebCore::Console::dir):
        (WebCore::Console::dirxml):
        (WebCore::Console::clear):
        (WebCore::Console::trace):
        (WebCore::Console::assertCondition):
        * page/Console.h:
        (Console):
            Create a new internalAddMessage that's used for the various
            Console message types. Everything else routes through
            ::addMessage.
        * page/ConsoleTypes.h:
            Drop MessageTypes from this file, add it to ConsoleAPIType.h
        * page/ContentSecurityPolicy.cpp:
        (WebCore::ContentSecurityPolicy::logToConsole):
        * page/DOMWindow.cpp:
        (WebCore::DOMWindow::dispatchMessageEventWithOriginCheck):
        (WebCore::DOMWindow::printErrorMessage):
        * page/EventSource.cpp:
        (WebCore::EventSource::didReceiveResponse):
        * svg/SVGDocumentExtensions.cpp:
        (WebCore::reportMessage):
        * workers/DefaultSharedWorkerRepository.cpp:
        (SharedWorkerProxy):
        (WebCore::postConsoleMessageTask):
        (WebCore::SharedWorkerProxy::postConsoleMessageToWorkerObject):
        * workers/SharedWorkerContext.cpp:
        (WebCore::SharedWorkerContext::logExceptionToConsole):
        * workers/WorkerContext.cpp:
        (WebCore::WorkerContext::addMessage):
        (WebCore::WorkerContext::addMessageToWorkerConsole):
        * workers/WorkerContext.h:
        (WorkerContext):
        * workers/WorkerMessagingProxy.cpp:
        (WebCore::postConsoleMessageTask):
        (WebCore::WorkerMessagingProxy::postConsoleMessageToWorkerObject):
        * workers/WorkerMessagingProxy.h:
        (WorkerMessagingProxy):
        * workers/WorkerReportingProxy.h:
        (WorkerReportingProxy):
        * xml/XMLHttpRequest.cpp:
        (WebCore::logConsoleError):
        (WebCore::XMLHttpRequest::send):
        * xml/XSLTProcessorLibxslt.cpp:
        (WebCore::XSLTProcessor::parseErrorFunc):
        * xml/XSLTProcessorQt.cpp:
        (WebCore::XSLTMessageHandler::handleMessage):
            Drop LogMessageType from everywhere.

2012-12-11  Simon Hausmann  <simon.hausmann@digia.com>

        [Qt] Unreviewed, rolling out r137313 and r137316 because they broke the system-sqlite build.

        * WebCore.pri:

2012-12-11  Simon Hausmann  <simon.hausmann@digia.com>

        Unreviewed Qt build fix: Don't error out if SQLITE3SRCDIR isn't set but
        we have a system sqlite to use.

        * WebCore.pri:

2012-12-11  Oswald Buddenhagen  <oswald.buddenhagen@digia.com>

        [Qt] make qtbase source requirement explicit

        Reviewed by Simon Hausmann.

        getting rid of QT.<module>.sources references, as they don't go well
        with real modularization.

        * WebCore.pri:

2012-12-11  Oswald Buddenhagen  <oswald.buddenhagen@digia.com>

        [Qt] move SQLITE3SRCDIR assignment to only use site

        Reviewed by Simon Hausmann.

        Target.pri includes WebCore.pri the almost first thing, so that is
        covered as well.

        * WebCore.pri:

2012-12-11  Eugene Klyuchnikov  <eustas@chromium.org>

        Web Inspector: Timeline: rename "Parse" to "Parse HTML".
        https://bugs.webkit.org/show_bug.cgi?id=104639

        Reviewed by Yury Semikhatsky.

        "Parse" sounds ambiguous, it could mean JSON.parse() or Date.parse().
        "Parse HTML" is a much more clear record description.

        * inspector/front-end/TimelinePresentationModel.js: Fix text.

2012-12-11  Oswald Buddenhagen  <oswald.buddenhagen@digia.com>

        [Qt] change setup of QMAKE_MOC

        Reviewed by Simon Hausmann.

        don't load(moc) explicitly - turns out that this breaks
        debug_and_release builds (the feature does not like being loaded before
        default_post has been loaded).
        so instead just do a minimal call to find the moc executable.

        as it's in fact only two files which need it, so de-centralize this call
        for the sake of saving some cpu cycles spent in qmake.

        * DerivedSources.pri:

2012-12-11  Alexander Pavlov  <apavlov@chromium.org>

        REGRESSION(r136948): inspector/styles/import-pseudoclass-crash.html hits an assertion
        https://bugs.webkit.org/show_bug.cgi?id=104473

        Reviewed by Vsevolod Vlasov.

        Avoid building full CSSOM wrappers up front during rule matching.
        Instead, move this code down to the point where these wrappers are actually needed.

        * inspector/InspectorCSSAgent.cpp:
        (WebCore::InspectorCSSAgent::willMatchRule):
        (WebCore::InspectorCSSAgent::willProcessRule):
        * inspector/InspectorCSSAgent.h:
        (WebCore):
        (InspectorCSSAgent):
        * inspector/InspectorInstrumentation.cpp:
        (WebCore):
        (WebCore::InspectorInstrumentation::willMatchRuleImpl):
        (WebCore::InspectorInstrumentation::willProcessRuleImpl):

2012-12-11  Jesus Sanchez-Palencia  <jesus.palencia@openbossa.org>

        [GStreamer] Avoid linking to GStreamer video libraries if only using ENABLE_AUDIO
        https://bugs.webkit.org/show_bug.cgi?id=104590

        Reviewed by Philippe Normand.

        Make getVideoSizeAndFormatFromCaps() only available when ENABLE_VIDEO is set.

        No new tests, no change in behavior.

        * platform/graphics/gstreamer/GStreamerVersioning.cpp:
        * platform/graphics/gstreamer/GStreamerVersioning.h:

2012-12-11  Zeno Albisser  <zeno@webkit.org>

        [Qt][Mac] Fix transparency for WebGL content.
        https://bugs.webkit.org/show_bug.cgi?id=104659

        When drawing a texture to the TextureMapper the flag SupportsBlending
        must be passed in order to allow for transparent webgl content.
        We are doing this for GLX already, but the flag was still missing
        in GraphicsSurfaceMac.

        Reviewed by Kenneth Rohde Christiansen.

        * platform/graphics/surfaces/mac/GraphicsSurfaceMac.cpp:
        (WebCore::GraphicsSurface::platformPaintToTextureMapper):

2012-12-11  Alexander Pavlov  <apavlov@chromium.org>

        Web Inspector: Duplicate emulated touch events in iframe
        https://bugs.webkit.org/show_bug.cgi?id=104653

        Reviewed by Vsevolod Vlasov.

        Synthetic touch events should be dispatched only on the frame containing its target, not on its ancestor frames,
        up to the top frame.

        * page/EventHandler.cpp:
        (WebCore::EventHandler::dispatchSyntheticTouchEventIfEnabled):
          Do not dispatch a synthetic touch event on the current frame if its target is in a subframe.

2012-12-11  Kondapally Kalyan  <kalyan.kondapally@intel.com>

        [EFL][WebGL] Regression(r137211) WebGL is broken with NVIDIA Drivers.
        https://bugs.webkit.org/show_bug.cgi?id=104652.

        Reviewed by Kenneth Rohde Christiansen.

        Reverting some of the changes from r137211, as it causes regressions
        on NVIDIA drivers.

        * platform/graphics/efl/GraphicsContext3DEfl.cpp:
        (WebCore::GraphicsContext3D::GraphicsContext3D):
        * platform/graphics/efl/GraphicsContext3DPrivate.cpp:
        (GraphicsContext3DPrivate::copyToGraphicsSurface):
        * platform/graphics/opengl/GLPlatformSurface.cpp:
        (WebCore::GLPlatformSurface::updateContents):
        * platform/graphics/opengl/GLPlatformSurface.h:
        (GLPlatformSurface):

2012-12-11  Pavel Feldman  <pfeldman@chromium.org>

        Web Inspector: follow up to r136974: do not process shortcuts while editing
        https://bugs.webkit.org/show_bug.cgi?id=104440

        Reviewed by Alexander Pavlov.

        Currently, typing H while editing node results in corresponding shortcut processing.

        * inspector/front-end/ElementsTreeOutline.js:
        (WebInspector.ElementsTreeOutline):
        (WebInspector.ElementsTreeOutline.prototype.handleShortcut):
        (WebInspector.ElementsTreeElement.prototype.onenter):
        (WebInspector.ElementsTreeElement.prototype._startEditingAttribute):
        (WebInspector.ElementsTreeElement.prototype.dispose):
        (WebInspector.ElementsTreeElement.prototype._startEditingAsHTML):
        (WebInspector.ElementsTreeElement.prototype._editingCancelled):

2012-12-11  Ken Kania  <kkania@chromium.org>

        [Inspector] Add command for dispatching mouse events.
        https://bugs.webkit.org/show_bug.cgi?id=104074

        Reviewed by Yury Semikhatsky.

        Platform mouse event coordinates are relative to the containing window,
        but the inspector command assumes they follow standard web coordinates,
        where the origin is at the top left of the page and y increases as you
        go down. We convert the coordinates to the window before constructing
        the event. This also fixes the fact that some platforms have flipped
        coordinate systems.
        Also, update dispatchKeyEvent test to follow simpler dispatchMouseEvent
        test.

        Test: inspector-protocol/input/dispatchMouseEvent.html

        * inspector/Inspector.json:
        * inspector/InspectorInputAgent.cpp:
        (WebCore::InspectorInputAgent::dispatchMouseEvent):
        (WebCore):
        * inspector/InspectorInputAgent.h:
        (InspectorInputAgent):

2012-12-11  Pavel Feldman  <pfeldman@chromium.org>

        Not reviewed: follow up to r137283: reduce inspector toolbar spacing 1px.

        * inspector/front-end/inspector.css:
        (body.dock-to-bottom:not(.show-toolbar-icons) .toolbar-item.toggleable):
        (body.dock-to-bottom:not(.show-toolbar-icons) .toolbar-item.toggleable.toggled-on):

2012-12-11  Kent Tamura  <tkent@chromium.org>

        Refactoring: Rename Element::shouldMatchReadOnlySelector and shouldMatchReadWriteSelector
        https://bugs.webkit.org/show_bug.cgi?id=104651

        Reviewed by Kentaro Hara.

        ':read-only' and ':read-write' are pseudo classes. They are not
        selectors in the context of these functions.  This patch rename them so
        that they contain 'pseudo class,' and make them match to an existing
        function, matchesFocusPseudoClass.

        No new tests. This shouldn't make behavior changes.

        * css/SelectorChecker.cpp:
        (WebCore::SelectorChecker::checkOneSelector):
        * dom/Element.cpp:
        (WebCore::Element::recalcStyle):
        (WebCore::Element::matchesReadOnlyPseudoClass):
        (WebCore::Element::matchesReadWritePseudoClass):
        * dom/Element.h:
        (Element):
        * html/HTMLInputElement.cpp:
        (WebCore::HTMLInputElement::matchesReadOnlyPseudoClass):
        (WebCore::HTMLInputElement::matchesReadWritePseudoClass):
        * html/HTMLInputElement.h:
        (HTMLInputElement):
        * html/HTMLTextAreaElement.cpp:
        (WebCore::HTMLTextAreaElement::matchesReadOnlyPseudoClass):
        (WebCore::HTMLTextAreaElement::matchesReadWritePseudoClass):
        * html/HTMLTextAreaElement.h:
        (HTMLTextAreaElement):
        * html/shadow/SliderThumbElement.cpp:
        (WebCore::SliderThumbElement::matchesReadOnlyPseudoClass):
        (WebCore::SliderThumbElement::matchesReadWritePseudoClass):
        * html/shadow/SliderThumbElement.h:
        (SliderThumbElement):
        * html/shadow/SpinButtonElement.cpp:
        (WebCore::SpinButtonElement::matchesReadOnlyPseudoClass):
        (WebCore::SpinButtonElement::matchesReadWritePseudoClass):
        * html/shadow/SpinButtonElement.h:
        (SpinButtonElement):
        * rendering/RenderTheme.cpp:
        (WebCore::RenderTheme::isReadOnlyControl):

2012-12-11  Pavel Feldman  <pfeldman@chromium.org>

        Web Inspector: add more horizontal spacing for toolbar items in docked to bottom mode
        https://bugs.webkit.org/show_bug.cgi?id=104655

        Reviewed by Alexander Pavlov.

        Drive-by increase height to 26px.

        * inspector/front-end/inspector.css:
        (#toolbar):
        (body:not(.show-toolbar-icons) .toolbar-item):
        (body.dock-to-bottom:not(.show-toolbar-icons) .toolbar-item.toggleable):
        (body.dock-to-bottom:not(.show-toolbar-icons) .toolbar-item.toggleable.toggled-on):
        (body.show-toolbar-icons.dock-to-bottom .toolbar-item.toggleable):
        (#toolbar-dropdown-arrow):
        (#main):

2012-12-11  Keishi Hattori  <keishi@webkit.org>

        Use histogram enumeration in Calendar Picker so we can get stats on UI usage
        https://bugs.webkit.org/show_bug.cgi?id=104646

        Reviewed by Kent Tamura.

        Use histogram support to get stats on the calendar picker so we can improve the UI.

        No new tests.

        * Resources/pagepopups/calendarPicker.js:
        (CalendarPicker):
        (CalendarPicker.prototype.recordAction): Records action to histogram.
        (CalendarPicker.prototype.handleToday): Record action.
        (CalendarPicker.prototype.handleClear): Ditto.
        (YearMonthController.prototype._showPopup): Ditto.
        (YearMonthController.prototype._handleYearMonthChange): Ditto.
        (YearMonthController.prototype._handleButtonClick): Ditto.
        (DaysTable.prototype._handleDayClick): Ditto.
        * page/PagePopupController.cpp:
        (WebCore::PagePopupController::histogramEnumeration):
        (WebCore):
        * page/PagePopupController.h:
        (PagePopupController):
        * page/PagePopupController.idl: Added histogramEnumeration.

2012-12-11  Hajime Morrita  <morrita@google.com>

        IsActiveFlag, IsHoverFlag, InActiveChainFlag can be unified.
        https://bugs.webkit.org/show_bug.cgi?id=103697

        Reviewed by Ryosuke Niwa.

        To save two more NodeFlags bits, this patch inroduces
        UserActionElementSet to get IsLinkFlag, IsHoverFlag,
        InActiveChainFlag together. These three old flags are replaced by
        UserActionElementSet::ElementFlags and UserActionElementSet
        collection which tracks elements which are flagged with one of
        a ElementFlags.

        When marking an element as active for example, WebKit sets
        UserActionElementSet::IsActiveFlag to the element and store it
        into corresponding element set of the document. This set maintains
        marked elements and corresponding flags for each elements.

        UserActionElementSet can be seen as a yet another rare data for
        these flags. However, the following characteristics of these flags
        make adding a new data structure on Document an attractive
        alternative:

        - UserActionElementSet is maintained for each Document instead of a
          global collecton. This fits element lifetime better.

        - The number of elements which have these flags is generally
          small, and a group of elements for each flag is largely overlapped
          due to its nature. This property keeps the set small, and lets
          flag retrieval efficient. On majority of the elements, all these
          flags are false thus the check is done by just checking
          IsInUserActionFlag.

        As a bonus, isFocused flag, which was on NodeRareData, is also moved to this model.

        No new tests, covered by existing test.

        * CMakeLists.txt:
        * GNUmakefile.list.am:
        * Target.pri:
        * WebCore.gypi:
        * WebCore.xcodeproj/project.pbxproj:
        * dom/DOMAllInOne.cpp:
        * dom/Document.cpp:
        (WebCore::Document::removedLastRef):
        (WebCore::Document::updateHoverActiveState):
        * dom/Document.h:
        (WebCore::Document::userActionElements): Added.
        (Document):
        * dom/Node.cpp:
        (WebCore::Node::detach):
        * dom/Node.h:
        (WebCore):
        (WebCore::Node::isUserActionElement): Added.
        (WebCore::Node::setUserActionElement): Added.
        (Node):
        (WebCore::Node::active): Switched to UserActionElementSet.
        (WebCore::Node::inActiveChain): Switched to UserActionElementSet.
        (WebCore::Node::hovered): Switched to UserActionElementSet.
        (WebCore::Node::focused): Switched to UserActionElementSet.
        (WebCore::Node::setFocus): Switched to UserActionElementSet.
        (WebCore::Node::setActive): Switched to UserActionElementSet.
        (WebCore::Node::setHovered): Switched to UserActionElementSet.
        * dom/NodeRareData.h:
        (WebCore::NodeRareData::NodeRareData):
        (NodeRareData):
        * dom/UserActionElementSet.cpp: Added.
        (WebCore):
        (WebCore::UserActionElementSet::instanceFor):
        (WebCore::UserActionElementSet::UserActionElementSet):
        (WebCore::UserActionElementSet::~UserActionElementSet):
        (WebCore::UserActionElementSet::didDetach):
        (WebCore::UserActionElementSet::documentDidRemoveLastRef):
        (WebCore::UserActionElementSet::hasFlags):
        (WebCore::UserActionElementSet::setFlags):
        (WebCore::UserActionElementSet::clearFlags):
        * dom/UserActionElementSet.h: Added.
        (WebCore):
        (UserActionElementSet):
        (WebCore::UserActionElementSet::create):
        (WebCore::UserActionElementSet::isFocused):
        (WebCore::UserActionElementSet::setFocused):
        (WebCore::UserActionElementSet::isActive):
        (WebCore::UserActionElementSet::setActive):
        (WebCore::UserActionElementSet::isInActiveChain):
        (WebCore::UserActionElementSet::setInActiveChain):
        (WebCore::UserActionElementSet::isHovered):
        (WebCore::UserActionElementSet::setHovered):
        (WebCore::UserActionElementSet::setFlags):

2012-12-11  Kent Tamura  <tkent@chromium.org>

        INPUT_MULTIPLE_FIELDS_UI: Disable focus navigation by right/left keys in RTL locales
        https://bugs.webkit.org/show_bug.cgi?id=104644

        Reviewed by Hajime Morita.

        Pressing the left key should focus on the field at the left of the
        current focused field, and pressing the right key should focus on the
        field at the right of the current focused field. This works well in LTR
        locales.
        In RTL locale, the current code doesn't work. We disable this behavior
        for RTL locales for now. This issue will be handled in Bug 104650.

        No new tests. Update some *-multiple-fields tests for new behavior.

        * html/shadow/DateTimeFieldElement.cpp:
        (WebCore::DateTimeFieldElement::defaultKeyboardEventHandler):
        If this sub-field is in an RTL locale, we don't change focus.
        (WebCore::DateTimeFieldElement::localeForOwner):
        Moved from DateTimeNumericFieldElement.
        * html/shadow/DateTimeFieldElement.h:
        (DateTimeFieldElement): Remove isRTL, add localeForOwner.
        * html/shadow/DateTimeNumericFieldElement.cpp: Remove localeForOwner.
        * html/shadow/DateTimeNumericFieldElement.h:
        (DateTimeNumericFieldElement): Ditto.

2012-12-11  Pavel Podivilov  <podivilov@google.com>

        Remove pango files deleted at r137263 form WebCore.gypi.

        Unreviewed, gardening.

        * WebCore.gypi:

2012-12-11  Zan Dobersek  <zandobersek@gmail.com>

        [GTK] Feature enabling/disabling should be possible through build-webkit
        https://bugs.webkit.org/show_bug.cgi?id=99271

        Reviewed by Gustavo Noronha Silva.

        Move the contents of GNUmakefile.features.am into GNUmakefile.features.am.in.
        The former is then copied from the latter but then appropriately modified if
        the build-webkit script overrides any of the default feature defines.

        No new tests - no new testable functionality.

        * GNUmakefile.features.am.in: Renamed from Source/WebCore/GNUmakefile.features.am.

2012-12-11  Jinwoo Song  <jinwoo7.song@samsung.com>

        [QT][EFL][WK2] Move the GraphicsSurfaceGLX.cpp to common place
        https://bugs.webkit.org/show_bug.cgi?id=104433

        Reviewed by Kenneth Rohde Christiansen.

        QT and EFL are commonly using the GraphicsSurfaceGLX.cpp and
        it looks better to move this file to /glx directory.

        * PlatformEfl.cmake:
        * Target.pri:
        * platform/graphics/surfaces/glx/GraphicsSurfaceGLX.cpp: Renamed from Source/WebCore/platform/graphics/surfaces/qt/GraphicsSurfaceGLX.cpp.
        (WebCore):
        (OffScreenRootWindow):
        (WebCore::OffScreenRootWindow::OffScreenRootWindow):
        (WebCore::OffScreenRootWindow::getXWindow):
        (WebCore::OffScreenRootWindow::display):
        (WebCore::OffScreenRootWindow::~OffScreenRootWindow):
        (WebCore::GraphicsSurfacePrivate::GraphicsSurfacePrivate):
        (GraphicsSurfacePrivate):
        (WebCore::GraphicsSurfacePrivate::~GraphicsSurfacePrivate):
        (WebCore::GraphicsSurfacePrivate::createSurface):
        (WebCore::GraphicsSurfacePrivate::createPixmap):
        (WebCore::GraphicsSurfacePrivate::textureIsYInverted):
        (WebCore::GraphicsSurfacePrivate::makeCurrent):
        (WebCore::GraphicsSurfacePrivate::doneCurrent):
        (WebCore::GraphicsSurfacePrivate::swapBuffers):
        (WebCore::GraphicsSurfacePrivate::copyFromTexture):
        (WebCore::GraphicsSurfacePrivate::display):
        (WebCore::GraphicsSurfacePrivate::glxPixmap):
        (WebCore::GraphicsSurfacePrivate::size):
        (WebCore::resolveGLMethods):
        (WebCore::GraphicsSurface::platformExport):
        (WebCore::GraphicsSurface::platformGetTextureID):
        (WebCore::GraphicsSurface::platformCopyToGLTexture):
        (WebCore::GraphicsSurface::platformCopyFromTexture):
        (WebCore::GraphicsSurface::platformPaintToTextureMapper):
        (WebCore::GraphicsSurface::platformFrontBuffer):
        (WebCore::GraphicsSurface::platformSwapBuffers):
        (WebCore::GraphicsSurface::platformSize):
        (WebCore::GraphicsSurface::platformCreate):
        (WebCore::GraphicsSurface::platformImport):
        (WebCore::GraphicsSurface::platformLock):
        (WebCore::GraphicsSurface::platformUnlock):
        (WebCore::GraphicsSurface::platformDestroy):
        (WebCore::GraphicsSurface::platformBeginPaint):
        (WebCore::GraphicsSurface::createReadOnlyImage):

2012-12-11  Mike West  <mkwst@chromium.org>

        Web Inspector: Evaluate private browsing mode's effect on console messages.
        https://bugs.webkit.org/show_bug.cgi?id=104383

        Reviewed by Pavel Feldman.

        Two sets of console messages are currently gated on private browsing
        mode being inactive. This patch centralizes the private browsing checks
        in order to apply them equally to all console messages, and changes the
        granularity at which they act.

        The current checks block the console messages entirely. This patch
        blocks only notifications to ChromeClient and ensures that messages
        won't be passed to printf where they might end up in system logs.
        Notifications to InspectorInstrumentation seem safe; so far as I can
        tell, there's no compelling reason to prevent console-based debugging
        in private browsing mode. This patch excludes those calls from the
        private browsing check.

        Test: inspector/console/clients-ignored-in-privatebrowsing.html

        * loader/cache/CachedResourceLoader.cpp:
        (WebCore::CachedResourceLoader::printAccessDeniedMessage):
            Drop the private browsing check.
        * page/Console.cpp:
        (WebCore::Console::addMessage):
            Add private browsing checks to the two ::addMessage variants that
            do real work. Ensure that calls to printf and notifications to
            ChromeClients are gated on these checks, but always allow
            notifications to InspectorInstrumentation.
        * page/DOMWindow.cpp:
        (WebCore::DOMWindow::printErrorMessage):
            Drop the private browsing check.

2012-12-10  Dan Winship  <danw@gnome.org>

        [Soup] Fix spelling of "initiating" in API.

        Reviewed by Martin Robinson.

        No new tests (just internal renaming).

        * platform/network/ResourceHandle.h:
        (ResourceHandle):
        * platform/network/soup/ResourceHandleSoup.cpp:
        (WebCore):
        (WebCore::setSoupRequestInitiatingPageIDFromNetworkingContext):
        (WebCore::ResourceHandle::start):
        (WebCore::ResourceHandle::getSoupRequestInitiatingPageID):

2012-12-10  Martin Robinson  <mrobinson@igalia.com>

        [GTK] Remove the Pango backend
        https://bugs.webkit.org/show_bug.cgi?id=104569

        Reviewed by Daniel Bates.

        Remove the Pango backend entirely. The EFL build has no support for it and it's
        not really maintained enough for the GTK+ port, now that HarfbuzzNG shapes complex
        text when Freetype is the active text rendering backend.

        No new tests. This does not change behavior.

        * GNUmakefile.am: Remove Pango backend options and move Freetype options to the common list.
        * GNUmakefile.list.am: Ditto.
        * platform/graphics/FontPlatformData.h:
        * platform/graphics/pango/FontCachePango.cpp: Removed.
        * platform/graphics/pango/FontCustomPlatformDataPango.cpp: Removed.
        * platform/graphics/pango/FontPango.cpp: Removed.
        * platform/graphics/pango/FontPlatformData.h: Removed.
        * platform/graphics/pango/FontPlatformDataPango.cpp: Removed.
        * platform/graphics/pango/GlyphPageTreeNodePango.cpp: Removed.
        * platform/graphics/pango/PangoUtilities.cpp: Removed.
        * platform/graphics/pango/PangoUtilities.h: Removed.
        * platform/graphics/pango/SimpleFontDataPango.cpp: Removed.

2012-12-11  Andrey Adaikin  <aandrey@chromium.org>

        Web Inspector: [WebGL] prevent GC from collecting WebGLObject instances currently bound to the context state
        https://bugs.webkit.org/show_bug.cgi?id=104119

        Reviewed by Pavel Feldman.

        This is to prevent GC from collecting resources bound to a context (WebGL or 2D).
        Otherwise, for example in WebGL, subsequent calls to gl.getParameter() may return a recently created
        instance that is no longer bound to a Resource object (thus, no history to replay it later).

        * inspector/InjectedScriptCanvasModuleSource.js:
        (.):

2012-12-11  Zan Dobersek  <zandobersek@gmail.com>

        Unreviewed build fix after r137243.

        * bindings/gobject/GNUmakefile.am:

2012-12-10  No'am Rosenthal  <noam@webkit.org>

        REGRESSION (r137006): CSS clip on solid color composited div broken
        https://bugs.webkit.org/show_bug.cgi?id=104604

        Reviewed by Simon Fraser.

        Disable direct compositing of background color for clipping layers.

        Test: compositing/geometry/clip-inside.html

        * rendering/RenderLayerBacking.cpp:
        (WebCore::supportsDirectBoxDecorationsComposition):
            Never allow direct background composition if there is a clip.

2012-12-10  Simon Fraser  <simon.fraser@apple.com>

        REGRESSION (r137215): WebKit stretches and shrinks a part of screen on scroll
        https://bugs.webkit.org/show_bug.cgi?id=104626

        Reviewed by Beth Dakin.

        r137215 removed a compositing layer repaint on size changes. However, there
        are cases where the compositing code constrains layer size by clipping
        with the viewport and a clipping ancestor. When that happens, we must
        invalidate the layer on a size change to avoid showing stretched or
        shrunken content.

        Test: compositing/repaint/clipped-layer-size-change.html

        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::RenderLayerBacking):
        (WebCore::RenderLayerBacking::updateCompositedBounds):
        (WebCore::RenderLayerBacking::updateGraphicsLayerGeometry):
        * rendering/RenderLayerBacking.h:
        (RenderLayerBacking):

2012-12-10  Dean Jackson  <dino@apple.com>

        Remove old WebKit Animation API code
        https://bugs.webkit.org/show_bug.cgi?id=104611

        Reviewed by Simon Fraser.

        Remove the existing, unused animation API code. We'll look into
        implementing the W3C Animation API if/when it is stable.

        * CMakeLists.txt: Remove WebKitAnimation and WebKitAnimationList classes.
        * DerivedSources.cpp:
        * DerivedSources.make:
        * DerivedSources.pri:
        * GNUmakefile.list.am:
        * Target.pri:
        * UseJSC.cmake:
        * UseV8.cmake:
        * WebCore.gypi:
        * WebCore.vcproj/WebCore.vcproj:
        * WebCore.xcodeproj/project.pbxproj:
        * bindings/js/JSBindingsAllInOne.cpp: Remove includes.
        * bindings/js/JSWebKitAnimationCustom.cpp: Removed.
        * bindings/js/JSWebKitAnimationListCustom.cpp: Removed.
        * dom/Element.cpp: Remove API.
        * dom/Element.h: Ditto.
        * dom/Element.idl: Ditto.
        * page/DOMWindow.idl: Ditto.
        * page/WebKitAnimation.cpp: Removed.
        * page/WebKitAnimation.h: Removed.
        * page/WebKitAnimation.idl: Removed.
        * page/WebKitAnimationList.cpp: Removed.
        * page/WebKitAnimationList.h: Removed.
        * page/WebKitAnimationList.idl: Removed.
        * page/animation/AnimationController.cpp: Remove API.
        * page/animation/AnimationController.h: Ditto.
        * page/animation/AnimationControllerPrivate.h: Ditto.
        * page/animation/CompositeAnimation.cpp: Ditto.
        * page/animation/CompositeAnimation.h: Ditto.

2012-12-10  Jessie Berlin  <jberlin@apple.com>

        Fix the Mac build after r137233

        * html/shadow/HTMLShadowElement.h:
        Remove a declaration of a member variable that was moved to the InsertionPoint superclass.

2012-12-10  KyungTae Kim  <ktf.kim@samsung.com>

        Build fix after r137221
        https://bugs.webkit.org/show_bug.cgi?id=104617

        Unreviewed build fix

        * html/HTMLPropertiesCollection.cpp:
        (WebCore::nextNodeWithProperty):

2012-12-10  Hajime Morrita  <morrita@google.com>

        [Shadow DOM][Refactoring] HTMLContentElement,HTMLShadowElement::m_registeredWithShadowRoot should be moved to InsertionPoint
        https://bugs.webkit.org/show_bug.cgi?id=104516

        Reviewed by Dimitri Glazkov.

        This change pulls duplicated code in removedFrom() and
        insertedInto() of both both HTMLShadowElement and
        HTMLContentElement to their super class InsertionPoint.

        This is a part of effor that encapsulate node distribution algorithm to
        ContentDistributor and its family.

        No new tests, no behavior change.

        * dom/ShadowRoot.cpp:
        (WebCore::ShadowRoot::registerInsertionPoint): Added.
        (WebCore::ShadowRoot::unregisterInsertionPoint): Added.
        * dom/ShadowRoot.h:
        (ShadowRoot):
        * html/shadow/ContentDistributor.cpp:
        (WebCore::ShadowRootContentDistributionData::regiterInsertionPoint): Generalized two methods for <content> and <shadow>.
        (WebCore):
        (WebCore::ShadowRootContentDistributionData::unregisterInsertionPoint): Ditto.
        * html/shadow/ContentDistributor.h:
        (ShadowRootContentDistributionData):
        * html/shadow/HTMLContentElement.cpp:
        (WebCore::HTMLContentElement::HTMLContentElement):
        * html/shadow/HTMLContentElement.h:
        * html/shadow/HTMLShadowElement.cpp:
        (WebCore::HTMLShadowElement::HTMLShadowElement):
        * html/shadow/HTMLShadowElement.h:
        * html/shadow/InsertionPoint.cpp:
        (WebCore::InsertionPoint::InsertionPoint):
        (WebCore::InsertionPoint::insertedInto): Pulled up from subclasses
        (WebCore::InsertionPoint::removedFrom): Pulled up from subclasses
        * html/shadow/InsertionPoint.h:
        (InsertionPoint):

2012-12-10  Jon Lee  <jonlee@apple.com>

        Keep track of plug-in snapshots clicked by user
        https://bugs.webkit.org/show_bug.cgi?id=103206
        <rdar://problem/12746483>

        Reviewed by Anders Carlsson.

        * html/HTMLPlugInImageElement.cpp:
        (WebCore::HTMLPlugInImageElement::HTMLPlugInImageElement): Initially the hash is
        unknown. Set to 0. Move the check for whether to snapshot the plugin into the
        new function subframeLoaderWillLoadPlugIn.
        (WebCore::HTMLPlugInImageElement::userDidClickSnapshot): Rename
        setPendingClickEvent to userDidClickSnapshot. In addition to holding onto the
        click event used to activate the plug-in, the function now also tells the plug-in
        client to add the origin hash as an auto-start origin.
        (WebCore::HTMLPlugInImageElement::subframeLoaderWillLoadPlugIn): Calculate the
        hash based on the provided URL, which is the URL the plug-in will load. Extend
        the check that used to be in the constructor to see if the plug-in should not
        automatically load, including checking the plug-in size and whether the hash
        is an auto-start origin.
        * html/HTMLPlugInImageElement.h: Rename setPendingClickEvent to userDidClickSnapshot
        and add a variable for the origin hash.

        * loader/SubframeLoader.cpp:
        (WebCore::SubframeLoader::requestPlugin): When the loader is about to load the
        plug-in, pass the URL to the element, so that it can calculate the hash.

        * page/Page.cpp:
        (WebCore::Page::Page): Take the plugInClient from the page clients.
        (WebCore::Page::~Page): If the client exists, tell it that the page is being
        destroyed.
        (WebCore::Page::PageClients::PageClients): Initialize this optional client to
        null.
        * page/Page.h: Add PlugInClient to page clients.
        (PageClients): Add PlugInClient variable.
        (WebCore::Page::plugInClient):
        * page/PlugInClient.h: Added.

        * rendering/RenderSnapshottedPlugIn.cpp:
        (WebCore::RenderSnapshottedPlugIn::handleEvent): Call the renamed function
        userDidClickSnapshot().
        (WebCore::RenderSnapshottedPlugIn::layout): Move the check of the plug-in size
        to subframeLoaderWillLoadPlugIn.

        Add PlugInClient.h.
        * GNUmakefile.list.am:
        * Target.pri:
        * WebCore.vcproj/WebCore.vcproj:
        * WebCore.xcodeproj/project.pbxproj:

2012-12-10  Antti Koivisto  <antti@apple.com>

        Not reviewed.
        
        Build fix.

        * html/HTMLPropertiesCollection.cpp:
        (WebCore::nextNodeWithProperty):
        * page/TouchDisambiguation.cpp:
        (WebCore::boundingBoxForEventNodes):

2012-12-10  Beth Dakin  <bdakin@apple.com>

        https://bugs.webkit.org/show_bug.cgi?id=104602
        DidHitRelevantRepaintedObjectsAreaThreshold LayoutMilestone fires too 
        early on some pages with iframes

        Reviewed by Simon Fraser.

        This change makes it so that any RenderObjects inside iframes are not 
        considered relevant.
        * page/Page.cpp:
        (WebCore::Page::addRelevantRepaintedObject):

2012-12-10  David Grogan  <dgrogan@chromium.org>

        IndexedDB: Propagate more leveldb errors to script
        https://bugs.webkit.org/show_bug.cgi?id=104422

        Reviewed by Tony Chang.

        These are the last places that ignore leveldb errors that can get the
        usual ok/found treatment.

        Nothing called getBool, so it is deleted.

        * Modules/indexeddb/IDBBackingStore.cpp:
        (WebCore):
        (WebCore::getInt):
        (WebCore::isSchemaKnown):
        (WebCore::setUpMetadata):
        (WebCore::getMaxObjectStoreId):
        (WebCore::IDBBackingStore::open):
        (WebCore::IDBBackingStore::getIDBDatabaseMetaData):
        (WebCore::getNewDatabaseId):
        (WebCore::IDBBackingStore::createIDBDatabaseMetaData):
        (WebCore::setMaxObjectStoreId):
        (WebCore::getNewVersionNumber):
        (WebCore::IDBBackingStore::putRecord):
        (WebCore::setMaxIndexId):
        * Modules/indexeddb/IDBBackingStore.h:
        (IDBBackingStore):
        * Modules/indexeddb/IDBObjectStoreBackendImpl.cpp:
        (WebCore::IDBObjectStoreBackendImpl::setIndexKeys):
        (WebCore::IDBObjectStoreBackendImpl::ObjectStoreStorageOperation::perform):

2012-12-09  Antti Koivisto  <antti@apple.com>

        Factor node traversal into standalone functions
        https://bugs.webkit.org/show_bug.cgi?id=104507

        Reviewed by Eric Seidel.

        Node traversal functions are currently Node and ContainerNode members. Their implementations
        are confusingly scattered over multiple header and source files. These functions have no particular
        reason to be members as they don't require non-public access. They should be made freestanding
        function instead and gathered together.
        
        This patch adds NodeTraversal namespace, defined in NodeTraversal.h. It contains freestanding
        functions for traversing Nodes. Most popular functions are inlined (as before) and
        there are ContainerNode specific specializations (as before).
        
        In client code
        
            node = node->traverseNextNode();
            node = node->traverseNextSibling();
        
        becomes
        
            node = NodeTraversal::next(node);
            node = NodeTraversal::nextSkippingChildren(node);
            
        etc.

        * WebCore.exp.in:
        * WebCore.xcodeproj/project.pbxproj:
        * accessibility/AccessibilityNodeObject.cpp:
        (WebCore::AccessibilityNodeObject::accessibilityDescriptionForElements):
        * accessibility/AccessibilityObject.cpp:
        (WebCore::AccessibilityObject::firstAccessibleObjectFromNode):
        * accessibility/AccessibilityRenderObject.cpp:
        (WebCore::AccessibilityRenderObject::addImageMapChildren):
        * bindings/js/JSDocumentCustom.cpp:
        (WebCore::toJS):
        * css/SelectorChecker.cpp:
        (WebCore::SelectorChecker::allVisitedStateChanged):
        (WebCore::SelectorChecker::visitedStateChanged):
        * css/StyleInvalidationAnalysis.cpp:
        (WebCore::StyleInvalidationAnalysis::invalidateStyle):
        * dom/ContainerNode.cpp:
        (WebCore::dispatchChildInsertionEvents):
        (WebCore::dispatchChildRemovalEvents):
        * dom/ContainerNode.h:
        (ContainerNode):
        (WebCore):
        * dom/ContainerNodeAlgorithms.h:
        (WebCore::ChildFrameDisconnector::collectDescendant):
        * dom/Document.cpp:
        (WebCore::Document::buildAccessKeyMap):
        (WebCore::Document::removeAllEventListeners):
        (WebCore::Document::updateBaseURL):
        (WebCore::Document::processBaseElement):
        (WebCore::Document::nodeAbsIndex):
        (WebCore::Document::nodeWithAbsIndex):
        (WebCore::Document::getFocusableNodes):
        * dom/DocumentMarkerController.cpp:
        (WebCore::DocumentMarkerController::markersInRange):
        (WebCore::DocumentMarkerController::setMarkersActive):
        (WebCore::DocumentMarkerController::hasMarkers):
        (WebCore::DocumentMarkerController::clearDescriptionOnMarkersIntersectingRange):
        * dom/DocumentOrderedMap.cpp:
        (WebCore::DocumentOrderedMap::get):
        * dom/ElementShadow.cpp:
        (WebCore::ElementShadow::collectSelectFeatureSetFrom):
        * dom/Node.cpp:
        (WebCore::Node::normalize):
        (WebCore::Node::lazyAttach):
        (WebCore):
        (WebCore::Node::detach):
        (WebCore::traverseTreeAndMark):
        * dom/Node.h:
        (Node):
        * dom/NodeIterator.cpp:
        (WebCore::NodeIterator::NodePointer::moveToNext):
        (WebCore::NodeIterator::NodePointer::moveToPrevious):
        (WebCore::NodeIterator::updateForNodeRemoval):
        * dom/NodeTraversal.h: Added.
        (WebCore):
        (NodeTraversal):
        (WebCore::NodeTraversal::traverseNextNodeTemplate):
        (WebCore::NodeTraversal::next):
        (WebCore::NodeTraversal::traverseNextSiblingTemplate):
        (WebCore::NodeTraversal::nextSibling):
        * dom/Range.cpp:
        (WebCore::Range::toString):
        (WebCore::Range::checkDeleteExtract):
        (WebCore::Range::firstNode):
        (WebCore::Range::pastLastNode):
        (WebCore::Range::textRects):
        (WebCore::Range::textQuads):
        (WebCore::Range::getBorderAndTextQuads):
        * dom/TreeScope.cpp:
        (WebCore::TreeScope::labelElementForId):
        (WebCore::TreeScope::findAnchor):
        * dom/TreeScopeAdopter.cpp:
        (WebCore::TreeScopeAdopter::moveTreeToNewScope):
        (WebCore::TreeScopeAdopter::moveTreeToNewDocument):
        * dom/TreeWalker.cpp:
        (WebCore::TreeWalker::nextNode):
        * editing/ApplyStyleCommand.cpp:
        (WebCore::ApplyStyleCommand::applyRelativeFontStyleChange):
        (WebCore::ApplyStyleCommand::fixRangeAndApplyInlineStyle):
        (WebCore::containsNonEditableRegion):
        (WebCore::ApplyStyleCommand::applyInlineStyleToNodeRange):
        (WebCore::ApplyStyleCommand::removeStyleFromRunBeforeApplyingStyle):
        (WebCore::ApplyStyleCommand::removeInlineStyle):
        * editing/BreakBlockquoteCommand.cpp:
        (WebCore::BreakBlockquoteCommand::doApply):
        * editing/CompositeEditCommand.cpp:
        (WebCore::CompositeEditCommand::deleteInsignificantText):
        (WebCore::CompositeEditCommand::cloneParagraphUnderNewElement):
        * editing/DeleteSelectionCommand.cpp:
        (WebCore::firstEditablePositionInNode):
        (WebCore::DeleteSelectionCommand::makeStylingElementsDirectChildrenOfEditableRootToPreventStyleLoss):
        (WebCore::DeleteSelectionCommand::handleGeneralDelete):
        * editing/EditCommand.cpp:
        (WebCore::SimpleEditCommand::addNodeAndDescendants):
        * editing/EditingStyle.cpp:
        (WebCore::EditingStyle::triStateOfStyle):
        (WebCore::EditingStyle::textDirectionForSelection):
        * editing/Editor.cpp:
        (WebCore::Editor::simplifyMarkup):
        * editing/FrameSelection.cpp:
        (WebCore::scanForForm):
        (WebCore::FrameSelection::setSelectionFromNone):
        * editing/InsertParagraphSeparatorCommand.cpp:
        (WebCore::InsertParagraphSeparatorCommand::doApply):
        * editing/ReplaceSelectionCommand.cpp:
        (WebCore::ReplacementFragment::removeUnrenderedNodes):
        (WebCore::ReplacementFragment::removeInterchangeNodes):
        (WebCore::ReplaceSelectionCommand::InsertedNodes::willRemoveNodePreservingChildren):
        (WebCore::ReplaceSelectionCommand::InsertedNodes::willRemoveNode):
        (WebCore::ReplaceSelectionCommand::removeRedundantStylesAndKeepStyleSpanInline):
        (WebCore::removeHeadContents):
        (WebCore::ReplaceSelectionCommand::handleStyleSpans):
        * editing/ReplaceSelectionCommand.h:
        (WebCore::ReplaceSelectionCommand::InsertedNodes::pastLastLeaf):
        * editing/SimplifyMarkupCommand.cpp:
        (WebCore::SimplifyMarkupCommand::doApply):
        * editing/TextIterator.cpp:
        (WebCore::TextIterator::advance):
        (WebCore::shouldEmitNewlineAfterNode):
        * editing/htmlediting.cpp:
        (WebCore::hasARenderedDescendant):
        * editing/mac/EditorMac.mm:
        (WebCore::Editor::fontForSelection):
        * editing/markup.cpp:
        (WebCore::completeURLs):
        (WebCore::StyledMarkupAccumulator::traverseNodesForSerialization):
        (WebCore::findNodesSurroundingContext):
        (WebCore::trimFragment):
        * editing/visible_units.cpp:
        (WebCore::startOfParagraph):
        (WebCore::endOfParagraph):
        * html/HTMLCollection.cpp:
        (WebCore::nextNode):
        * html/HTMLElement.cpp:
        (WebCore::setHasDirAutoFlagRecursively):
        (WebCore::HTMLElement::directionality):
        (WebCore::HTMLElement::adjustDirectionalityIfNeededAfterChildrenChanged):
        (WebCore::HTMLElement::getItemRefElements):
        * html/HTMLFieldSetElement.cpp:
        (WebCore::HTMLFieldSetElement::invalidateDisabledStateUnder):
        (WebCore::HTMLFieldSetElement::refreshElementsIfNeeded):
        * html/HTMLFormElement.cpp:
        (WebCore::HTMLFormElement::formElementIndex):
        * html/HTMLLabelElement.cpp:
        (WebCore::HTMLLabelElement::control):
        * html/HTMLLegendElement.cpp:
        (WebCore::HTMLLegendElement::associatedControl):
        * html/HTMLMapElement.cpp:
        (WebCore::HTMLMapElement::mapMouseEvent):
        * html/HTMLNameCollection.cpp:
        (WebCore::HTMLNameCollection::virtualItemAfter):
        * html/HTMLOptionElement.cpp:
        (WebCore::HTMLOptionElement::collectOptionInnerText):
        * html/HTMLPropertiesCollection.cpp:
        (WebCore::nextNodeWithProperty):
        * html/HTMLSelectElement.cpp:
        (WebCore::HTMLSelectElement::recalcListItems):
        * html/HTMLTextFormControlElement.cpp:
        (WebCore::HTMLTextFormControlElement::selection):
        (WebCore::HTMLTextFormControlElement::innerTextValue):
        (WebCore::HTMLTextFormControlElement::valueWithHardLineBreaks):
        * html/RadioInputType.cpp:
        (WebCore::RadioInputType::handleKeydownEvent):
        * html/shadow/ContentDistributor.cpp:
        (WebCore::ShadowRootContentDistributionData::ensureInsertionPointList):
        * inspector/InspectorDOMAgent.cpp:
        (WebCore::InspectorDOMAgent::performSearch):
        * inspector/InspectorMemoryAgent.cpp:
        * page/FocusController.cpp:
        (WebCore::FocusController::findFocusCandidateInContainer):
        * page/Frame.cpp:
        (WebCore::Frame::searchForLabelsAboveCell):
        (WebCore::Frame::searchForLabelsBeforeElement):
        * rendering/RenderNamedFlowThread.cpp:
        (WebCore::RenderNamedFlowThread::getRanges):
        * svg/SVGSVGElement.cpp:
        (WebCore::SVGSVGElement::collectIntersectionOrEnclosureList):
        (WebCore::SVGSVGElement::getElementById):
        * svg/SVGUseElement.cpp:
        (WebCore::removeDisallowedElementsFromSubtree):
        * svg/animation/SMILTimeContainer.cpp:
        (WebCore::SMILTimeContainer::updateDocumentOrderIndexes):
        * xml/XPathNodeSet.cpp:
        (WebCore::XPath::NodeSet::traversalSort):
        * xml/XPathStep.cpp:
        (WebCore::XPath::Step::nodesInAxis):
        * xml/XPathUtil.cpp:
        (WebCore::XPath::stringValue):

2012-12-10  Min Qin  <qinmin@chromium.org>

        Sending multi-touch events to the same Iframe
        https://bugs.webkit.org/show_bug.cgi?id=97973

        Reviewed by Dimitri Glazkov.

        Multi-Touch in different iframe can give both documents access to each other.
        This could cause cross-origin access. To solve this, all the touch events should
        be sent to the iframe where the first touchstart happens.

        Test: fast/events/touch/multi-touch-inside-iframes.html
              fast/events/touch/multi-touch-inside-nested-iframes.html

        * page/EventHandler.cpp:
        (WebCore::EventHandler::handleTouchEvent):
        * page/EventHandler.h:

2012-12-10  KyungTae Kim  <ktf.kim@samsung.com>

        [soup] Fix build warning in ResourceHandleSoup.cpp
        https://bugs.webkit.org/show_bug.cgi?id=104605

        Reviewed by Martin Robinson.

        The nextMultipartResponsePartCallback has unused parameter 'source',
        comment out it to fix 'unused parameter' build warning.

        * platform/network/soup/ResourceHandleSoup.cpp:
        (WebCore::nextMultipartResponsePartCallback):

2012-12-10  Simon Fraser  <simon.fraser@apple.com>

        Fix frame border painting in tiled drawing mode
        https://bugs.webkit.org/show_bug.cgi?id=104453
        <rdar://problem/11678611>

        Reviewed by Dan Bernstein.

        Frame borders were not correctly invalidated when in tiled drawing mode, because
        RenderFrameSet::layout() invalidated directly on the view, which skips the tile
        cache.
        
        Fix by invalidating like all other renderers, via the repaint container.
        
        Also, the layer transform should be updated before the invalidation, and
        we make use of RenderObject::updateLayerTransform() which has the same behavior
        as the old code.

        Attempts to make a layout test failed. Resizing composited framesets repainted
        via layer resizing, and an attempt to make a ref test in tiled drawing mode
        failed (the test passed without the patch).

        * rendering/RenderFrameSet.cpp:
        (WebCore::RenderFrameSet::layout):

2012-12-10  Simon Fraser  <simon.fraser@apple.com>

        When converting a layer into a tiled layer, ensure that we update the visible rect
        https://bugs.webkit.org/show_bug.cgi?id=104467

        Reviewed by Darin Adler.

        When a GraphicsLayerCA toggles to use a TileCache, we have to ensure that the
        layer's visible rect (which is used to ensure tile coverage) is updated in
        the same commit. Otherwise we can get blank layers until something else causes
        the visible rect to be updated.

        Test: compositing/tiling/tiled-layer-resize.html

        * platform/graphics/ca/GraphicsLayerCA.cpp:
        (WebCore::GraphicsLayerCA::dumpAdditionalProperties): With the debug flag, dump the TiledBacking
        address for ease of debugging.
        (WebCore::GraphicsLayerCA::swapFromOrToTiledLayer): Set the VisibleRectChanged bit in
        m_uncommittedChanges if we've just switched to a tiled layer.

2012-12-10  Simon Fraser  <simon.fraser@apple.com>

        Don't unconditionally repaint compositing layers when their size changes
        https://bugs.webkit.org/show_bug.cgi?id=104461

        Reviewed by Sam Weinig.

        RenderLayerBacking always repainted the entire compositing layer when its size
        changed. This was done to fix repaint issues when outline widths changes, but
        that issue is now solved by repainting in GraphicsLayer::setOffsetFromRenderer(),
        add in r134628. I believe this is no longer necessary.
        
        Always repainting when the size changes is terrible for the tile cache when
        loading large documents, as all tiles repaint every time the document gets
        longer.

        Test: compositing/repaint/resize-repaint.html

        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::updateGraphicsLayerGeometry):

2012-12-10  Ojan Vafai  <ojan@chromium.org>

        Unreviewed, rolling out r134150.
        http://trac.webkit.org/changeset/134150
        https://bugs.webkit.org/show_bug.cgi?id=99940

        Caused JS-based tooltips to remain during scroll on Facebook
        and Gmail. Rollout until I have time to experiment with less
        aggresive approaches.

        * page/EventHandler.cpp:
        (WebCore):
        (WebCore::MaximumDurationTracker::MaximumDurationTracker):
        (WebCore::MaximumDurationTracker::~MaximumDurationTracker):
        (MaximumDurationTracker):
        (WebCore::EventHandler::EventHandler):
        (WebCore::EventHandler::clear):
        (WebCore::EventHandler::mouseMoved):
        (WebCore::EventHandler::dispatchFakeMouseMoveEventSoon):
        (WebCore::EventHandler::fakeMouseMoveEventTimerFired):
        * page/EventHandler.h:
        (EventHandler):
        * platform/Timer.h:

2012-12-10  Yi Shen  <max.hong.shen@gmail.com>

        Keyboard caret movement in textarea with RTL Override Character can make tab unresponsive
        https://bugs.webkit.org/show_bug.cgi?id=103067

        Reviewed by Ryosuke Niwa.

        For textarea with RTL override character, the line break could be the previous leaf InlineTextBox of
        the InlineTextBox for the RTL override text. When overshots the left/right, make sure the 
        leftVisuallyDistinctCandidate and rightVisuallyDistinctCandidate return the visually distinct 
        left/right position by ignoring the line break.

        Test: editing/selection/move-by-character-crash-test-textarea.html

        * editing/VisiblePosition.cpp:
        (WebCore::VisiblePosition::leftVisuallyDistinctCandidate):
        (WebCore::VisiblePosition::rightVisuallyDistinctCandidate):

2012-12-10  Kondapally Kalyan  <kalyan.kondapally@intel.com>

        [EFL][WebGL] Minor Refactoring in GraphicsContext3DEfl.
        https://bugs.webkit.org/show_bug.cgi?id=104553.

        Reviewed by Kenneth Rohde Christiansen.

        We use different FBO for canvas and offscreen surface of our platform layer.
        Thus we need to manage any bound buffers while copying contents to the surface. Currently, Surface
        always uses double buffering but in future we should be able to configure it to use either
        double or single buffer. For these use cases, it would be handy to bind buffers directly to
        FBO used by the surface. This patch does the needed changes in GraphicsContext3DEfl and
        PlatformSurface. Also, removes some unused code.

        Covered by existing tests.

        Relevant changes in GraphicsContext3DEfl to obtain FBO id from PlatformSurface.
        * platform/graphics/efl/GraphicsContext3DEfl.cpp:
        (WebCore::GraphicsContext3D::GraphicsContext3D):
        (WebCore::GraphicsContext3D::~GraphicsContext3D):

        Renamed createGraphicsSurface to didResizeCanvas.
        (WebCore::GraphicsContext3D::createGraphicsSurfaces):
        * platform/graphics/efl/GraphicsContext3DPrivate.cpp:
        (GraphicsContext3DPrivate::didResizeCanvas):
        (GraphicsContext3DPrivate::copyToGraphicsSurface):
        * platform/graphics/efl/GraphicsContext3DPrivate.h:
        (GraphicsContext3DPrivate):

        Header cleanup.
        * platform/graphics/opengl/GLDefs.h:
        * platform/graphics/opengl/GLPlatformContext.cpp:
        (WebCore::GLPlatformContext::createContext):
        * platform/graphics/opengl/GLPlatformContext.h:

        Added initialize method to expose FBO id of the surface.
        Removed unused code.
        * platform/graphics/opengl/GLPlatformSurface.cpp:
        (WebCore::GLPlatformSurface::initialize):
        (WebCore):
        (WebCore::GLPlatformSurface::updateContents):
        * platform/graphics/opengl/GLPlatformSurface.h:
        (GLPlatformSurface):
        * platform/graphics/surfaces/glx/GLXSurface.h:

2012-12-07  Simon Fraser  <simon.fraser@apple.com>

        Tidy up the tiled scrolling indicator, fix with zooming
        https://bugs.webkit.org/show_bug.cgi?id=104386

        Reviewed by Tim Horton.

        Fix the tiled scrolling indicator to not get tiny when zooming,
        to not poke out of the bottom of the window, and to not look
        so crappy.

        * platform/graphics/ca/mac/TileCache.mm:
        (WebCore::TileCache::updateTileCoverageMap):
        (WebCore::TileCache::drawTileMapContents):

2012-12-10  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r136817.
        http://trac.webkit.org/changeset/136817
        https://bugs.webkit.org/show_bug.cgi?id=104596

        This patch was an unnecessarily complex solution to handling
        conversion of union types. (Requested by mpruett on #webkit).

        * bindings/js/JSDictionary.cpp:
        (WebCore::JSDictionary::convertValue):
        * bindings/js/JSDictionary.h:
        (WebCore::JSDictionary::tryGetPropertyAndResult):

2012-12-10  Tab Atkins  <tabatkins@google.com>

        Deprecate prefixed linear-gradient and radial-gradient functions
        https://bugs.webkit.org/show_bug.cgi?id=104591

        Reviewed by Dean Jackson.

        Rename the old gradient parsing functions in anticipation of functions that parse the new syntax.

        No new tests added - this is a rename and has no functionality change.

        * css/CSSParser.cpp:
        (WebCore::CSSParser::parseDeprecatedLinearGradient):
        (WebCore::CSSParser::parseDeprecatedRadialGradient):
        (WebCore::CSSParser::parseGeneratedImage):
        * css/CSSParser.h:

2012-12-10  Mark Pilgrim  <pilgrim@chromium.org>

        [Chromium][Win] Remove theme-related functions from PlatformSupport
        https://bugs.webkit.org/show_bug.cgi?id=102699

        Reviewed by Adam Barth.

        Call theme engine directly instead of going through
        PlatformSupport. Part of a refactoring series. See tracking bug 82948.

        * platform/chromium/PlatformSupport.h:
        (PlatformSupport):
        * platform/chromium/ScrollbarThemeChromiumWin.cpp:
        (WebCore::ScrollbarThemeChromiumWin::paintTrackPiece):
        (WebCore::ScrollbarThemeChromiumWin::paintButton):
        * rendering/RenderThemeChromiumWin.cpp:
        (WebCore):
        (WebCore::RenderThemeChromiumWin::paintButton):
        (WebCore::RenderThemeChromiumWin::paintSliderTrack):
        (WebCore::RenderThemeChromiumWin::paintSliderThumb):
        (WebCore::RenderThemeChromiumWin::paintMenuList):
        (WebCore::RenderThemeChromiumWin::paintTextFieldInternal):
        (WebCore::RenderThemeChromiumWin::paintInnerSpinButton):
        (WebCore::RenderThemeChromiumWin::paintProgressBar):

2012-12-10  Dean Jackson  <dino@apple.com>

        Support for CSS widows and orphans
        https://bugs.webkit.org/show_bug.cgi?id=9410

        Reviewed by Darin Adler.

        The CSS 'widow' and 'orphan' properties were supported by the parser and
        style system, but were not actually doing anything in layout. Now they do!

        In order to not break existing content, I unfortunately had to go against
        the specification and change our default value from 2 to auto. A value of
        auto means that widows and orphans will not cause any page/column breaks.

        Supporting orphans was a small change. During line layout, if we realise
        we need to move to a new page in a situation that would create an orphan,
        move the entire block to the new page. There was already code to do this.

        Support for widows was trickier. When we finish laying out a block, count
        the number of hanging lines. If we've created a widow, and there are enough
        available lines on the previous page, then steal some and remember the line
        to break at. Trigger a relayout. Then notice the line that was marked for
        breaking and avoid the widow. This means some blocks go through layout
        twice, but as long as the widow value is small it shouldn't be a huge penalty.

        Tests: fast/multicol/widows-and-orphans.html (new test)
               printing/page-break-orphans.html
               printing/page-break-orphans-and-widows.html
               printing/page-break-widows.html

        * css/CSSComputedStyleDeclaration.cpp:
        (WebCore::CSSComputedStyleDeclaration::getPropertyCSSValue): Return CSSValueAuto for widows and orphans if necessary.
        * css/CSSParser.cpp:
        (WebCore::CSSParser::parseValue): Support "auto" in widow and orphan property parsing.
        * css/StyleBuilder.cpp:
        (WebCore::StyleBuilder::StyleBuilder): Change property handler to something that supports auto.
        * page/animation/CSSPropertyAnimation.cpp:
        (WebCore::CSSPropertyAnimation::ensurePropertyMap): Add widows and orphans to the animation map.
        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::layoutBlockChild): Detect if we've caused a widow-fixing break, and request relayout evaluation.
        (WebCore::RenderBlock::markForPaginationRelayoutIfNeeded): Test for a widow-fixing line.
        (WebCore::RenderBlock::setBreakAtLineToAvoidWidow): New function to remember where we should break on next layout.
        (WebCore::RenderBlock::adjustLinePositionForPagination): Move the entire block to a new page if this would create an orphan.
        * rendering/RenderBlock.h:
        (WebCore::RenderBlock::shouldBreakAtLineToAvoidWidow): New function to indicate if we are remembering a widow.
        (WebCore::RenderBlock::clearShouldBreakAtLineToAvoidWidow): Reset the line breaks.
        (WebCore::RenderBlock::lineBreakToAvoidWidow):
        (WebCore::RenderBlock::RenderBlockRareData::RenderBlockRareData): Add a flag for indicating if we are remembering a line, and the actual line itself.
        * rendering/RenderBlockLineLayout.cpp:
        (WebCore::RenderBlock::layoutRunsAndFloatsInRange): The code to detect and fix widows. Explained above.
        * rendering/style/RenderStyle.h: New methods for indicating if widows and orphans are non-default values.
        * rendering/style/StyleRareInheritedData.cpp: Ditto.
        * rendering/style/StyleRareInheritedData.h: Ditto.

2012-12-10  Zan Dobersek  <zandobersek@gmail.com>

        REGRESSION (r118735): svg/dom/complex-svgView-specification.html, svg/dom/SVGViewSpec.html, svg/dom/viewspec-parser.html failing on GTK Linux 64-bit Release
        https://bugs.webkit.org/show_bug.cgi?id=87734

        Reviewed by Martin Robinson.

        Don't modify ResourceRequest's URL to have the value of the (encoded)
        URI of the SoupMessage. The only exception is in the case of cancelled
        SoupMessage - the URL of the ResourceRequest should then be null.

        No new tests - existing tests should show no regressions.

        * platform/network/soup/ResourceRequestSoup.cpp:
        (WebCore::ResourceRequest::updateFromSoupMessage):

2012-12-10  Gustavo Noronha Silva  <gns@gnome.org>

        Unreviewed distcheck fix.

        * GNUmakefile.list.am:

2012-12-10  Eric Seidel  <eric@webkit.org>

        Caused crashes in v8.  Rolling out until abarth can fix.  See cr-issue 165136 for more info
        https://bugs.webkit.org/show_bug.cgi?id=104575

        Unreviewed, just rolling out r136559.

        * bindings/v8/V8GCController.cpp:
        * bindings/v8/V8NodeFilterCondition.cpp:
        (WebCore::V8NodeFilterCondition::V8NodeFilterCondition):
        (WebCore::V8NodeFilterCondition::acceptNode):
        * bindings/v8/V8NodeFilterCondition.h:
        (WebCore::V8NodeFilterCondition::create):
        (V8NodeFilterCondition):
        * dom/NodeFilter.h:

2012-12-10  Eric Carlson  <eric.carlson@apple.com>

        Unreviewed build fix after r137167.

        * WebCore.xcodeproj/project.pbxproj: Add InbandTextTrackPrivate.h to framework private 
            headers.

2012-12-10  Martin Robinson  <mrobinson@igalia.com>

        Fix the GTK+ build after a collision of two patches.

        Unreviewed build fix.

        * bindings/gobject/GNUmakefile.am: The GObject DOM bindings library needs to
        include the harfbuzz cflags when compiling.

2012-12-10  Parth Patel  <parpatel@rim.com>

        Make hiddenPageDomTimerInterval a setting
        https://bugs.webkit.org/show_bug.cgi?id=104555

        Reviewed by Yong Li.

        Make hiddenPageDomTimerInterval a setting so client can customize it.

        No new tests are needed.

        * page/Page.cpp:
        (WebCore):
        (WebCore::Page::setVisibilityState):
        * page/Settings.cpp:
        (WebCore):
        (WebCore::Settings::setHiddenPageDOMTimerAlignmentInterval):
        (WebCore::Settings::hiddenPageDOMTimerAlignmentInterval):
        * page/Settings.h:
        (Settings):

2012-12-10  peavo@outlook.com  <peavo@outlook.com>

        [WinCairo] Compile fix in ImageCairoWin.cpp
        https://bugs.webkit.org/show_bug.cgi?id=104554

        Reviewed by Brent Fulgham.

        * platform/graphics/win/ImageCairoWin.cpp:
        (WebCore::BitmapImage::getHBITMAPOfSize): Added parameter.
        (WebCore::BitmapImage::drawFrameMatchingSourceSize): Added parameter.

2012-12-10  Mike West  <mkwst@chromium.org>

        Log to console when script is blocked by sandbox attributes.
        https://bugs.webkit.org/show_bug.cgi?id=104365

        Reviewed by Ojan Vafai.

        Adds a console message to cover script execution blocked within the
        context of a sandboxed frame which lacks the 'allow-scripts' permission.

        * bindings/ScriptControllerBase.cpp:
        (WebCore::ScriptController::canExecuteScripts):
            Log a warning when sandboxing flags block script execution.

2012-12-10  Chris Fleizach  <cfleizach@apple.com>

        AX: Crash in NSAccessibilityUnignoredDescendant
        https://bugs.webkit.org/show_bug.cgi?id=104468

        Reviewed by Anders Carlsson.

        This crash occurred because AccessibilityScrollView stopped retaining it's ScrollView pointer.

        Unfortunately, there was still a case that didn't correctly clear that variable. 

        That case was when a Frame had a new FrameView associated with it. The old FrameView didn't inform the 
        accessibility object cache that it should be removed. As a result, when the FrameView deallocated and 
        did try to remove, it used the wrong AXObjectCache because it was no longer correctly hooked into the 
        document tree.

        No new tests. Existing tests will stop crashing.
 
        * page/Frame.cpp:
        (WebCore::Frame::setView): change the name of the method that tells the FrameView to detach
        * page/FrameView.cpp:
        (WebCore::FrameView::~FrameView):
        (WebCore::FrameView::removeFromAXObjectCache): add a method that can be called in multiple places
        (WebCore::FrameView::isFrameView):
        (WebCore::FrameView::prepareForDetach): detaches scrollbars and accessibility
        * page/FrameView.h:
        (FrameView):

2012-12-10  Mark Pilgrim  <pilgrim@chromium.org>

        [Chromium] Move getPluginsList out of PlatformSupport
        https://bugs.webkit.org/show_bug.cgi?id=96507

        Reviewed by Darin Fisher.

        Part of a refactoring series. See tracking bug 82948.

        * WebCore.gypi:
        * platform/chromium/PlatformSupport.h:
        (PlatformSupport):
        * plugins/chromium/PluginDataChromium.cpp:
        (WebCore::PluginCache::plugins):
        * plugins/chromium/PluginListBuilder.cpp: Added.
        (WebKit):
        (WebKit::PluginListBuilder::addPlugin):
        (WebKit::PluginListBuilder::addMediaTypeToLastPlugin):
        (WebKit::PluginListBuilder::addFileExtensionToLastMediaType):
        * plugins/chromium/PluginListBuilder.h: Added.
        (WebKit):
        (PluginListBuilder):
        (WebKit::PluginListBuilder::PluginListBuilder):

2012-12-10  Carlos Garcia Campos  <cgarcia@igalia.com>

        [GTK] Build GObject DOM bindings as a separate library
        https://bugs.webkit.org/show_bug.cgi?id=104527

        Reviewed by Xan Lopez.

        * bindings/gobject/GNUmakefile.am: Add libWebCoreDOM library.
        * bindings/gobject/WebKitDOMBinding.h: Define private macros.
        * bindings/gobject/WebKitDOMCustom.h: Don't include webkit/webkitdefines.h.
        * bindings/gobject/WebKitDOMEventTarget.h: Ditto.
        * bindings/gobject/WebKitDOMObject.h: Ditto.
        * bindings/scripts/CodeGeneratorGObject.pm:
        (Generate): Don't include webkitglobalsprivate.h.
        (WriteData): Don't include webkit/webkitdefines.h.
        * bindings/scripts/gobject-generate-headers.pl: Define WEBKIT_API
        macro in webkitdomdefines.h.
        * bindings/scripts/test/GObject/WebKitDOMFloat64Array.cpp:
        * bindings/scripts/test/GObject/WebKitDOMFloat64Array.h:
        * bindings/scripts/test/GObject/WebKitDOMTestActiveDOMObject.cpp:
        * bindings/scripts/test/GObject/WebKitDOMTestActiveDOMObject.h:
        * bindings/scripts/test/GObject/WebKitDOMTestCallback.cpp:
        * bindings/scripts/test/GObject/WebKitDOMTestCallback.h:
        * bindings/scripts/test/GObject/WebKitDOMTestCustomNamedGetter.cpp:
        * bindings/scripts/test/GObject/WebKitDOMTestCustomNamedGetter.h:
        * bindings/scripts/test/GObject/WebKitDOMTestEventConstructor.cpp:
        * bindings/scripts/test/GObject/WebKitDOMTestEventConstructor.h:
        * bindings/scripts/test/GObject/WebKitDOMTestEventTarget.cpp:
        * bindings/scripts/test/GObject/WebKitDOMTestEventTarget.h:
        * bindings/scripts/test/GObject/WebKitDOMTestException.cpp:
        * bindings/scripts/test/GObject/WebKitDOMTestException.h:
        * bindings/scripts/test/GObject/WebKitDOMTestInterface.cpp:
        * bindings/scripts/test/GObject/WebKitDOMTestInterface.h:
        * bindings/scripts/test/GObject/WebKitDOMTestMediaQueryListListener.cpp:
        * bindings/scripts/test/GObject/WebKitDOMTestMediaQueryListListener.h:
        * bindings/scripts/test/GObject/WebKitDOMTestNamedConstructor.cpp:
        * bindings/scripts/test/GObject/WebKitDOMTestNamedConstructor.h:
        * bindings/scripts/test/GObject/WebKitDOMTestNode.cpp:
        * bindings/scripts/test/GObject/WebKitDOMTestNode.h:
        * bindings/scripts/test/GObject/WebKitDOMTestObj.cpp:
        * bindings/scripts/test/GObject/WebKitDOMTestObj.h:
        * bindings/scripts/test/GObject/WebKitDOMTestOverloadedConstructors.cpp:
        * bindings/scripts/test/GObject/WebKitDOMTestOverloadedConstructors.h:
        * bindings/scripts/test/GObject/WebKitDOMTestSerializedScriptValueInterface.cpp:
        * bindings/scripts/test/GObject/WebKitDOMTestSerializedScriptValueInterface.h:

2012-12-10  Adam Klein  <adamk@chromium.org>

        In InbandTextTrackPrivate, return emptyAtoms instead of emptyString() by default.

        Unreviewed build fix.

        * platform/graphics/InbandTextTrackPrivate.h:
        (WebCore::InbandTextTrackPrivate::label):
        (WebCore::InbandTextTrackPrivate::language):

2012-12-10  Ilya Tikhonovsky  <loislo@chromium.org>

        Web Inspector: Native Memory Instrumentation: instrument RenderBox descendants.
        https://bugs.webkit.org/show_bug.cgi?id=104026

        Reviewed by Eric Seidel.

        Plain vanilla instrumentation for RenderBox descendants.

        * rendering/RenderFrameSet.cpp:
        (WebCore::RenderFrameSet::reportMemoryUsage):
        (WebCore):
        (WebCore::RenderFrameSet::GridAxis::reportMemoryUsage):
        * rendering/RenderFrameSet.h:
        (RenderFrameSet):
        (GridAxis):
        * rendering/RenderListMarker.cpp:
        (WebCore::RenderListMarker::reportMemoryUsage):
        (WebCore):
        * rendering/RenderListMarker.h:
        (RenderListMarker):
        * rendering/RenderReplaced.cpp:
        (WebCore::RenderReplaced::reportMemoryUsage):
        (WebCore):
        * rendering/RenderReplaced.h:
        (RenderReplaced):
        * rendering/RenderTableCol.cpp:
        (WebCore::RenderTableCol::reportMemoryUsage):
        (WebCore):
        * rendering/RenderTableCol.h:
        (RenderTableCol):
        * rendering/RenderTableRow.cpp:
        (WebCore::RenderTableRow::reportMemoryUsage):
        (WebCore):
        * rendering/RenderTableRow.h:
        (RenderTableRow):
        * rendering/RenderTableSection.cpp:
        (WebCore::RenderTableSection::reportMemoryUsage):
        (WebCore):
        (WebCore::RenderTableSection::RowStruct::reportMemoryUsage):
        (WebCore::RenderTableSection::CellStruct::reportMemoryUsage):
        * rendering/RenderTableSection.h:
        (CellStruct):
        (RowStruct):

2012-12-10  Alejandro Piñeiro  <apinheiro@igalia.com>

        AX: wrong Enabled states on a ListBox
        https://bugs.webkit.org/show_bug.cgi?id=104483

        Reviewed by Chris Fleizach.

        Test: accessibility/listbox-enabled-states.html

        * accessibility/AccessibilityListBoxOption.cpp:
        (WebCore::AccessibilityListBoxOption::isEnabled): taking into
        account the DISABLED attribute and the aria-disabled attribute to
        decide if the item is enabled or not.

2012-12-10  Adam Klein  <adamk@chromium.org>

        cr-win build fix after r137161.

        Unreviewed.

        * platform/graphics/MediaPlayer.h: Replace forward-decl of
        InbandTextTrackPrivate with #include as the definition is required.

2012-12-10  Alexis Menard  <alexis@webkit.org>

        [CSS3 Backgrounds and Borders] Remove CSS3_BACKGROUND feature flag.
        https://bugs.webkit.org/show_bug.cgi?id=104539

        Reviewed by Antonio Gomes.

        As discussed on webkit-dev it is not needed to keep this feature flag 
        as support for <position> type is a small feature that is already 
        implemented by three other UAs. It was useful while landing this 
        feature as partial bits were landed one after one.

        No new tests : the feature is covered by various tests and it is already enabled in many ports.

        * Configurations/FeatureDefines.xcconfig:
        * GNUmakefile.am:
        * GNUmakefile.features.am:
        * css/CSSParser.cpp:
        (WebCore::CSSParser::parseFillPosition):
        (WebCore::CSSParser::parseFillProperty):
        * css/CSSParser.h:
        * css/CSSToStyleMap.cpp:
        (WebCore::CSSToStyleMap::mapFillXPosition):
        (WebCore::CSSToStyleMap::mapFillYPosition):
        * rendering/style/FillLayer.cpp:
        (SameSizeAsFillLayer):
        (WebCore::FillLayer::FillLayer):
        (WebCore::FillLayer::operator=):
        (WebCore::FillLayer::operator==):
        (WebCore::FillLayer::fillUnsetProperties):
        * rendering/style/FillLayer.h:
        (WebCore::FillLayer::backgroundXOrigin):
        (WebCore::FillLayer::backgroundYOrigin):
        (WebCore::FillLayer::isBackgroundOriginSet):
        (WebCore::FillLayer::clearXPosition):
        (WebCore::FillLayer::clearYPosition):
        (FillLayer):

2012-12-10  Eric Carlson  <eric.carlson@apple.com>

        Add support for in-band text tracks to Mac port
        https://bugs.webkit.org/show_bug.cgi?id=103663

        Reviewed by Sam Weinig.

        Test: media/track/track-in-band.html

        * GNUmakefile.list.am: Move InbandTextTrackPrivate.h to platform/graphics. Add InbandTextTrackPrivateClient.h.
        * Target.pri: Ditto.
        * WebCore.gypi: Ditto.

        * WebCore.xcodeproj/project.pbxproj: Add new files.

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::setReadyState): No need to call processInbandTextTracks, in-band tracks
            are now registered by the media engine as they are discovered.
        (WebCore::HTMLMediaElement::mediaPlayerDidAddTrack): New, called by the media player when a new
            in-band track is found.
        (WebCore::HTMLMediaElement::mediaPlayerDidRemoveTrack): New, called by the media player when an
            in-band track goes away.
        * html/HTMLMediaElement.h:

        * html/track/InbandTextTrack.cpp:
        (WebCore::InbandTextTrack::InbandTextTrack): Use m_private instead of tracksPrivate because
            it is zeroed during assignment.

        * platform/graphics/MediaPlayer.cpp:
        (WebCore::MediaPlayer::addTextTrack): New MediaPlayerClient method to allow MediaPlayerPrivate subclasses
            to add a new in-band track.
        (WebCore::MediaPlayer::removeTextTrack): New MediaPlayerClient method to allow MediaPlayerPrivate subclasses
            to remove a new in-band track.
        * platform/graphics/MediaPlayer.h:
        * platform/graphics/MediaPlayerPrivate.h:

        * platform/graphics/avfoundation/InbandTextTrackPrivateAVF.cpp: Added.
        (WebCore::InbandTextTrackPrivateAVF::InbandTextTrackPrivateAVF):
        (WebCore::InbandTextTrackPrivateAVF::~InbandTextTrackPrivateAVF):
        (WebCore::InbandTextTrackPrivateAVF::processCueAttributes): Convert an attribute string into WebVTT 
            cue setting and content strings.
        (WebCore::InbandTextTrackPrivateAVF::processCue): Process a new cue.
        (WebCore::InbandTextTrackPrivateAVF::disconnect): Clear member variables.
        (WebCore::InbandTextTrackPrivateAVF::resetCueValues): Reset cue values to defaults.
        (WebCore::InbandTextTrackPrivateAVF::setMode): Set track mode and call player's trackModeChanged.
        * platform/graphics/avfoundation/InbandTextTrackPrivateAVF.h: Added.

        * platform/graphics/avfoundation/MediaPlayerPrivateAVFoundation.cpp: Initialize 
            m_inbandTrackConfigurationPending.
        (WebCore::MediaPlayerPrivateAVFoundation::MediaPlayerPrivateAVFoundation):
        (WebCore::MediaPlayerPrivateAVFoundation::seekCompleted): Flush the currently accumulating
            cue so it doesn't get the wrong duration.
        (WebCore::MediaPlayerPrivateAVFoundation::dispatchNotification): Handle InbandTracksNeedConfiguration.
        (WebCore::MediaPlayerPrivateAVFoundation::flushCurrentCue): New, pass the current cue up to the client.
        (WebCore::MediaPlayerPrivateAVFoundation::configureInbandTracks): Configure in-band tracks.
        (WebCore::MediaPlayerPrivateAVFoundation::trackModeChanged): Schedule a call to configureInbandTracks.
        * platform/graphics/avfoundation/MediaPlayerPrivateAVFoundation.h:

        * platform/graphics/avfoundation/objc/InbandTextTrackPrivateAVFObjC.h: Added.
        * platform/graphics/avfoundation/objc/InbandTextTrackPrivateAVFObjC.mm: Added.
        (WebCore::InbandTextTrackPrivateAVFObjC::InbandTextTrackPrivateAVFObjC):
        (WebCore::InbandTextTrackPrivateAVFObjC::disconnect):
        (WebCore::InbandTextTrackPrivateAVFObjC::kind): Return track kind.
        (WebCore::InbandTextTrackPrivateAVFObjC::label): Return track label.
        (WebCore::InbandTextTrackPrivateAVFObjC::language): Return track language.
        (WebCore::InbandTextTrackPrivateAVFObjC::isDefault): 
        * platform/graphics/avfoundation/objc/MediaPlayerPrivateAVFoundationObjC.h:
        (MediaPlayerPrivateAVFoundationObjC):
        (WebCore::MediaPlayerPrivateAVFoundationObjC::playerItem):
        * platform/graphics/avfoundation/objc/MediaPlayerPrivateAVFoundationObjC.mm:
        (WebCore::MediaPlayerPrivateAVFoundationObjC::MediaPlayerPrivateAVFoundationObjC): Initialize m_currentTrack.
        (WebCore::MediaPlayerPrivateAVFoundationObjC::cancelLoad): Clear m_legibleOutput.
        (WebCore::MediaPlayerPrivateAVFoundationObjC::tracksChanged): Create and initialize m_legibleOutput.
        (WebCore::MediaPlayerPrivateAVFoundationObjC::processTextTracks): Called when the player item's
            "tracks" changes, add and remove in-band text tracks as necessary.
        (WebCore::MediaPlayerPrivateAVFoundationObjC::processCue): Pass an attributed string to the current 
            track to be processed.
        (WebCore::MediaPlayerPrivateAVFoundationObjC::setCurrentTrack): Tell AVFoundation to select an in-band track.
        (WebCore::MediaPlayerPrivateAVFoundationObjC::currentTrack): Return the current track.
        (-[WebCoreAVFMovieObserver legibleOutput:didOutputAttributedStrings:nativeSampleBuffers:forItemTime:]): Legible
            output delegate.

2012-12-10  Pavel Feldman  <pfeldman@chromium.org>

        Web Inspector: fix front-end compilation warnings
        https://bugs.webkit.org/show_bug.cgi?id=104557

        Reviewed by Alexander Pavlov.

        Corresponding annotations added.

        * inspector/Inspector.json:
        * inspector/InspectorDOMAgent.cpp:
        (WebCore::InspectorDOMAgent::highlightNode):
        * inspector/InspectorDOMAgent.h:
        (InspectorDOMAgent):
        * inspector/front-end/CSSStyleModel.js:
        (WebInspector.CSSStyleDeclaration.prototype.):
        (WebInspector.CSSStyleDeclaration.prototype.insertPropertyAt):
        * inspector/front-end/ConsoleMessage.js:
        (WebInspector.ConsoleMessageImpl.prototype._appendPropertyPreview):
        * inspector/front-end/DOMAgent.js:
        (WebInspector.DOMAgent.prototype.highlightDOMNode):
        * inspector/front-end/DOMPresentationUtils.js:
        (WebInspector.DOMPresentationUtils.linkifyNodeReference):
        * inspector/front-end/ObjectPropertiesSection.js:
        (WebInspector.ObjectPropertyTreeElement.prototype.update):
        * inspector/front-end/Toolbar.js:

2012-12-10  Zeno Albisser  <zeno@webkit.org>

        [Qt] MediaPlayerQTKit broken after switching QPainter to raster engine.
        https://bugs.webkit.org/show_bug.cgi?id=104550

        With Qt5 QPainter changed to using the raster engine.
        Therefore we no longer have an NSGraphicsContext that we can
        use for drawing video frames.
        With this patch we are rendering the video frame into an image buffer
        and then paint it manually using QPainter.

        Reviewed by Simon Hausmann.

        * platform/graphics/mac/MediaPlayerPrivateQTKit.mm:
        (WebCore):
        (WebCore::swapBgrToRgb):
            Swap the color format from BGR to RGB,
            since BGR is not supported by QImage.
        (WebCore::MediaPlayerPrivateQTKit::paint):

2012-12-10  peavo@outlook.com  <peavo@outlook.com>

        [WinCairo] Link fix in InspectorController.cpp
        https://bugs.webkit.org/show_bug.cgi?id=104556

        Reviewed by Pavel Feldman.

        * inspector/InspectorController.cpp:
        (WebCore::InspectorController::InspectorController): Added missing #if check.

2012-12-10  Pavel Feldman  <pfeldman@chromium.org>

        Web Inspector: remove the Overrides / Settings context menu from gear icon
        https://bugs.webkit.org/show_bug.cgi?id=104546

        Reviewed by Alexander Pavlov.

        It sounds like too many people don't like the way it works. Bringing things back: overrides will be a tab in settings for now.
        Moving present behavior to under experiment.

        * inspector/front-end/OverridesView.js:
        (WebInspector.OverridesView):
        * inspector/front-end/Settings.js:
        (WebInspector.ExperimentsSettings):
        * inspector/front-end/SettingsScreen.js:
        (WebInspector.OverridesSettingsTab):
        (WebInspector.SettingsController):
        (WebInspector.SettingsController.prototype.get statusBarItem):
        (WebInspector.SettingsController.prototype._mouseDown.showSettings):
        (WebInspector.SettingsController.prototype._mouseDown):
        (WebInspector.SettingsController.prototype._mouseUp):
        * inspector/front-end/helpScreen.css:
        (#settings-screen .tabbed-pane-header):
        (#settings-screen .tabbed-pane-header-tabs):
        (#settings-screen .tabbed-pane-header-tab):

2012-12-10  Kent Tamura  <tkent@chromium.org>

        Visual order of empty value placeholder in INPUT_MULTIPLE_FIELDS_UI is wrong in RTL
        https://bugs.webkit.org/show_bug.cgi?id=104438

        Reviewed by Hajime Morita.

        No new tests. This updates datetimelocal-appearance-l10n.html for he-il
        and ar-eg locales.

        * html/shadow/DateTimeNumericFieldElement.cpp:
        (WebCore::DateTimeNumericFieldElement::DateTimeNumericFieldElement):
        We should not append Right-to-left-mark to each of placeholder
        strings. It makes numeric field separators such as ':' and '/' RTL, and
        makes a wrong visual order. We use unicode-bidi:bidi-override and
        direction:ltr instead. It means we force LTR only to this element
        * html/shadow/DateTimeNumericFieldElement.h:
        Makes m_placeholder const again.
        * html/shadow/DateTimeEditElement.cpp:
        (WebCore::DateTimeEditBuilder::visitLiteral):
        Explicitly set right-to-left-mark before S, WS, ON types according to
        Unicod Bidirectional Algorithm Table 4 [1]. This is needed because we
        don't have context like "This literal follows European/Arabic numbers"
        in a case of showing placeholders.
        [1] http://www.unicode.org/reports/tr9/#Bidirectional_Character_Types

2012-12-09  Gustavo Noronha Silva  <gustavo.noronha@collabora.com>

        [Soup] utilize multipart/x-mixed-replace support recently added to libsoup
        https://bugs.webkit.org/show_bug.cgi?id=94515

        Reviewed by Martin Robinson.

        The multipart/x-mixed-replace content type is often used for providing
        "push" server support, with each part in the multipart response
        replacing the previous one in the rendering. Soup recently acquired
        support for multipart/x-mixed replace, which this change utilizes.

        Covered by existing multipart/x-mixed-replace tests.

        * platform/network/ResourceHandleInternal.h:
        (ResourceHandleInternal): add new member to this class, the multipart input stream
        * platform/network/soup/ResourceHandleSoup.cpp:
        (WebCore::cleanupSoupRequestOperation): also clear the multipart input stream on
        cleanup
        (WebCore::nextPartCallback): callback that handles reporting the new response delivered
        with the new part, if any; uses the factored out updateFromSoupMessageHeaders method
        (WebCore::sendRequestCallback): handle multipart/x-mixed-replace responses by
        requesting the next part
        (WebCore::readCallback): when reading has finished, request the next part when
        handling a multipart/x-mixed-replace response
        * platform/network/soup/ResourceResponse.h:
        (ResourceResponse): add declaration for new method
        * platform/network/soup/ResourceResponseSoup.cpp:
        (WebCore::ResourceResponse::updateFromSoupMessage): call new updateFromSoupMessageHeaders
        method, instead of dealing with the message headers directly
        (WebCore::ResourceResponse::updateFromSoupMessageHeaders): new method, factored out from
        updateFromSoupMessage, so this same code can be reused for updating responses for
        multipart/x-mixed-replace responses parts

2012-12-10  Zoltan Nyul  <zoltan.nyul@intel.com>

        Implement testRunner.setViewModeMediaFeature() in WebKitTestRunner
        https://bugs.webkit.org/show_bug.cgi?id=103886

        Reviewed by Kenneth Rohde Christiansen.

        Export symbol for WebCore::Page::setViewMode on Mac.

        No new tests, no behavior change for layout tests.

        * WebCore.exp.in:

2012-12-10  Martin Robinson  <mrobinson@igalia.com>

        [GTK] Bring Harfbuzz-ng support to Gtk
        https://bugs.webkit.org/show_bug.cgi?id=92098

        Reviewed by Gustavo Noronha Silva.

        Enable HarfBuzz support by default. With the Freetype backend we no longer
        fall back to Pango for rendering complex text.

        No new tests. This is covered by existing tests.

        * GNUmakefile.am: Add HarfBuzz include directories and define.
        * GNUmakefile.list.am: Add HarfBuzz files to source list and remove
        Pango ones.
        * platform/graphics/freetype/FontPlatformDataFreeType.cpp:
        (WebCore::FontPlatformData::operator==): To properly render fallback
        fonts via HarfBuzz , it's important that we actually ask Fontconfig
        whether or not two patterns are the same. This ensures that when patterns
        are just copies of one another they only take up one slot in the font cache
        and appear to be the same font to HarfBuzzShaper.

2012-12-10  Alexander Pavlov  <apavlov@chromium.org>

        Web Inspector: [Overrides] Unable to change values in Device Metrics override setting
        https://bugs.webkit.org/show_bug.cgi?id=104542

        Reviewed by Vsevolod Vlasov.

        Remove inadvertent object property assignment.

        * inspector/front-end/OverridesView.js:

2012-12-10  Michael Brüning  <michael.bruning@digia.com>

        [Qt] Builds for Mac are tied to the OS system instead of the SDK version.
        https://bugs.webkit.org/show_bug.cgi?id=104529

        Reviewed by Simon Hausmann.

        Using work by Eike Ziller <eike.ziller@digia.com>.

        The build system now first tries to assign the correct system libraries
        for the SDK being used for Mac builds. If this does not yield any
        result, it falls back to using the Mac OS version to determine the
        correct library.

        No new tests (not applicable).

        * WebCore.pri:

2012-12-10  Ilya Tikhonovsky  <loislo@chromium.org>

        Unreviewed: touch RenderingAllInOne.cpp to fix Apple Windows builder.

        * rendering/RenderingAllInOne.cpp:

2012-12-10  Eugene Klyuchnikov  <eustas@chromium.org>

        Web Inspector: Network: newly added items are not filtered.
        https://bugs.webkit.org/show_bug.cgi?id=104021

        Reviewed by Vsevolod Vlasov.

        Extracted method to higlight/hide record according to filter.
        Used this method to process newly created records.

        * inspector/front-end/NetworkPanel.js:
        (WebInspector.NetworkLogView.prototype._applyFilter): Extracted.
        (WebInspector.NetworkLogView.prototype.performFilter): Refactored.

2012-12-09  Ilya Tikhonovsky  <loislo@chromium.org>

        Web Inspector: Unreviewed: move reportMemoryUsage to public section.

        * rendering/RenderBlock.h:
        (RenderBlock):
        * rendering/RenderBox.h:
        (RenderBox):

2012-12-08  Pavel Feldman  <pfeldman@chromium.org>

        Web Inspector: adds an option to remove toolbar icons.
        https://bugs.webkit.org/show_bug.cgi?id=95654

        Reviewed by Vsevolod Vlasov.

        - removes compact mode in favor or dock-to-bottom
        - introduces setting for hiding toolbar icons

        * inspector/front-end/DockController.js:
        (WebInspector.DockController.prototype._toggleDockState):
        * inspector/front-end/Settings.js:
        (WebInspector.ExperimentsSettings):
        * inspector/front-end/Toolbar.js:
        (WebInspector.Toolbar.prototype.setDockedToBottom):
        (WebInspector.Toolbar.prototype._toolbarDragStart):
        (WebInspector.Toolbar.prototype._toolbarDrag):
        * inspector/front-end/helpScreen.css:
        (body.dock-to-bottom .help-content):
        * inspector/front-end/inspector.css:
        (body.dock-to-bottom #toolbar):
        (body.no-toolbar-icons #toolbar):
        (body.dock-to-bottom.port-qt #toolbar):
        (body.dock-to-bottom.inactive #toolbar):
        (body.no-toolbar-icons .toolbar-item.toggleable):
        (body.dock-to-bottom .toolbar-item.toggleable):
        (body.dock-to-bottom .toolbar-icon):
        (body.no-toolbar-icons .toolbar-icon):
        (body.no-toolbar-icons #main):
        (body.dock-to-bottom .toolbar-icon.custom-toolbar-icon):
        (body.dock-to-bottom .toolbar-item:active .toolbar-icon):
        (body.dock-to-bottom .toolbar-label):
        (body.dock-to-bottom #search-toolbar-label):
        (body.no-toolbar-icons .toolbar-label):
        (body.no-toolbar-icons #toolbar-dropdown):
        (#toolbar-dropdown .scrollable-content):
        (#toolbar-dropdown .toolbar-item.toggleable:hover):
        (body.no-toolbar-icons #toolbar-dropdown .toolbar-label):
        (body.no-toolbar-icons #toolbar-dropdown .toolbar-item):
        (body.dock-to-bottom .toolbar-item.resources .toolbar-icon):
        (body.dock-to-bottom .toolbar-item.network .toolbar-icon):
        (body.dock-to-bottom .toolbar-item.scripts .toolbar-icon):
        (body.dock-to-bottom .toolbar-item.timeline .toolbar-icon):
        (body.dock-to-bottom .toolbar-item.profiles .toolbar-icon):
        (body.dock-to-bottom .toolbar-item.audits .toolbar-icon):
        (body.dock-to-bottom .toolbar-item.console .toolbar-icon):
        (body.dock-to-bottom.port-qt .toolbar-item.close-left, body.dock-to-bottom.port-qt .toolbar-item.close-right):
        (body.dock-to-bottom #main):

2012-12-10  Kent Tamura  <tkent@chromium.org>

        Refactoring: Remove HTMLFormControlElement::autofocus
        https://bugs.webkit.org/show_bug.cgi?id=104524

        Reviewed by Kentaro Hara.

        autofocus function is used only by HTMLFormControlElement itself, no
        sub-classes override it, and it is not exposed via an IDL attribute,

        No new tests. This doesn't make any behavior changes.

        * html/HTMLFormControlElement.cpp:
        (WebCore::shouldAutofocus): Use fastHasAttribute instead of autofocus().
        * html/HTMLFormControlElement.h: Remove autofocus().

2012-12-10  Jonathan Liu  <net147@gmail.com>

        Fix GC3Dintptr and GC3Dsizeiptr typedefs for Win64
        https://bugs.webkit.org/show_bug.cgi?id=104426

        Reviewed by Simon Hausmann.

        The GC3Dintptr and GC3Dsizeiptr typedefs are incorrect for Win64 as
        LLP64 is used there. This would result in compile error due to
        narrowing conversion of 64-bit pointer to signed long int which is
        32-bit.

        * platform/graphics/GraphicsTypes3D.h:

2012-12-10  Kent Tamura  <tkent@chromium.org>

        Refactoring: Introduce HTMLFormControlElement::isDisabledOrReadOnly
        https://bugs.webkit.org/show_bug.cgi?id=104508

        Reviewed by Kentaro Hara.

        We have a lot of code like element->disabled || element->readOnly().
        isDisabledOrReadOnly makes them simpler.

        No new tests. This make no behaivor change.

        * html/HTMLFormControlElement.h:
        (WebCore::HTMLFormControlElement::isDisabledOrReadOnly):
        Added. Note that the implmentation of disabled() is not just "return m_disabled;".

        * html/BaseChooserOnlyDateAndTimeInputType.cpp:
        (WebCore::BaseChooserOnlyDateAndTimeInputType::handleDOMActivateEvent):
        Use isDisabledOrReadOnly.
        * html/BaseMultipleFieldsDateAndTimeInputType.cpp:
        (WebCore::BaseMultipleFieldsDateAndTimeInputType::shouldSpinButtonRespondToMouseEvents): Ditto.
        (WebCore::BaseMultipleFieldsDateAndTimeInputType::isPickerIndicatorOwnerDisabledOrReadOnly): Ditto.
        * html/ColorInputType.cpp:
        (WebCore::ColorInputType::handleDOMActivateEvent): Ditto.
        (WebCore::ColorInputType::didChooseColor): Ditto.
        * html/HTMLFormControlElement.cpp:
        (WebCore::HTMLFormControlElement::recalcWillValidate): Ditto.
        * html/HTMLTextAreaElement.h:
        (WebCore::HTMLTextAreaElement::valueMissing): Ditto.
        * html/RangeInputType.cpp:
        (WebCore::RangeInputType::handleMouseDownEvent): Ditto.
        (WebCore::RangeInputType::handleTouchEvent): Ditto.
        (WebCore::RangeInputType::handleKeydownEvent): Ditto.
        * html/SearchInputType.cpp:
        (WebCore::SearchInputType::handleKeydownEvent): Ditto.
        * html/TextFieldInputType.cpp:
        (WebCore::TextFieldInputType::handleKeydownEventForSpinButton): Ditto.
        (WebCore::TextFieldInputType::shouldSpinButtonRespondToMouseEvents): Ditto.
        * html/shadow/TextControlInnerElements.cpp:
        (WebCore::SearchFieldCancelButtonElement::defaultEventHandler): Ditto.
        (WebCore::SearchFieldCancelButtonElement::willRespondToMouseClickEvents): Ditto.
        (WebCore::InputFieldSpeechButtonElement::defaultEventHandler): Ditto.
        * html/shadow/TextFieldDecorationElement.cpp:
        (WebCore::TextFieldDecorationElement::defaultEventHandler): Ditto.
        (WebCore::TextFieldDecorationElement::willRespondToMouseMoveEvents): Ditto.
        (WebCore::TextFieldDecorationElement::willRespondToMouseClickEvents): Ditto.

2012-12-10  Pavel Feldman  <pfeldman@chromium.org>

        Web Inspector: console broken? - console.dirxml behaves like console.log
        https://bugs.webkit.org/show_bug.cgi?id=104245

        Reviewed by Vsevolod Vlasov.

        Do not generate preview for dirxml.

        * inspector/front-end/ConsoleMessage.js:
        (WebInspector.ConsoleMessageImpl.prototype._formatParameterAsArray):

2012-12-10  Kent Tamura  <tkent@chromium.org>

        Refactoring: Remove HTMLFormControlElement::setDisabled
        https://bugs.webkit.org/show_bug.cgi?id=104510

        Reviewed by Kentaro Hara.

        Remove it because the number of call sites is only one, and the
        setDisabled implementation is equivalent to setBooleanAttribute.

        No new tests. This should not make behavior changes.

        * html/HTMLFormControlElement.cpp: Remove setDisabled.
        * html/HTMLFormControlElement.h: Ditto.
        * html/FileInputType.cpp:
        (WebCore::FileInputType::disabledAttributeChanged):
        Replace setDisabled with setBooleanAttribute.

2012-12-10  Hajime Morrita  <morrita@google.com>

        [Shadow DOM][Refacdtoring] nextTo() and previousTo() can be part of ContentDistribution
        https://bugs.webkit.org/show_bug.cgi?id=104514

        Reviewed by Kentaro Hara.

        InsertionPoint::nextTo() and InsertionPoint::previousTo() are an
        query to distributed nodes, which is what ContentDistribution
        represents. We can move them to better home.

        No new tests. No behavior change.

        * html/shadow/ContentDistributor.cpp:
        (WebCore::ContentDistribution::nextTo): Moved from InsertionPoint
        (WebCore):
        (WebCore::ContentDistribution::previousTo): Moved from InsertionPoint
        * html/shadow/ContentDistributor.h:
        (ContentDistribution):
        * html/shadow/InsertionPoint.cpp:
        * html/shadow/InsertionPoint.h:
        (WebCore::InsertionPoint::nextTo): Delegated to ContentDistribution
        (WebCore::InsertionPoint::previousTo): Delegated to ContentDistribution

2012-12-10  Joanmarie Diggs  <jdiggs@igalia.com>

        [GTK] accessibility/language-attribute.html is failing
        https://bugs.webkit.org/show_bug.cgi?id=98369

        Reviewed by Chris Fleizach.

        The test is failing for two reasons: Not exposing the language
        for accessible objects and AccessibilityUIElement::language() not
        being implemented.

        No new tests; instead, unskipped the previously-failing test.

        * accessibility/atk/WebKitAccessibleInterfaceText.cpp:
        (getAttributeSetForAccessibilityObject): Expose the language via AtkText attribute

2012-12-09  Takashi Sakamoto  <tasak@google.com>

        [Shadow DOM]: reset-style-inheritance doesn't work for insertion point
        https://bugs.webkit.org/show_bug.cgi?id=103711

        Reviewed by Hajime Morita.

        reset-style-inheritance can be specified by using insertion points'
        attribute, e.g. <content reset-style-inheritance>.
        c.f. shadow dom spec:
        https://dvcs.w3.org/hg/webcomponents/raw-file/tip/spec/shadow/index.html#styles

        No new tests. Updated an existing test,
        fast/dom/shadow/insertion-point-resetStyleInheritance.html to cover
        this feature.

        * html/HTMLAttributeNames.in:
        Added HTMLNames::reset_style_inheritanceAttr.
        * html/shadow/InsertionPoint.cpp:
        (WebCore::InsertionPoint::InsertionPoint):
        (WebCore::InsertionPoint::parseAttribute):
        Since both shadow and content elements have to support
        reset-style-inheritance, added InsertionPoint::parseAttribute.
        (WebCore::InsertionPoint::resetStyleInheritance):
        (WebCore::InsertionPoint::setResetStyleInheritance):
        Modified to update reset-style-inheritance attribute value.
        * html/shadow/InsertionPoint.h:
        (InsertionPoint):
        Removed m_shouldResetStyleInheritance. Instead, use
        reset-style-inheritance attribute value.

2012-12-09  Ilya Tikhonovsky  <loislo@chromium.org>

        Native Memory Instrumentation: instrument a part of RenderObject class tree.
        https://bugs.webkit.org/show_bug.cgi?id=103564

        Reviewed by Eric Seidel.

        Many RenderObject descendants have OwnPtrs and RefPtrs members.
        Looks like we have to instrument all the RenderObject classes and visit
        all the render objects instead of counting entire render arena memory.

        * WebCore.exp.in:
        * dom/Node.cpp:
        (WebCore::Node::reportMemoryUsage):
        * dom/WebCoreMemoryInstrumentation.cpp:
        (WebCore):
        * inspector/InspectorMemoryAgent.cpp:
        (WebCore::reportRenderTreeInfo):
        (WebCore):
        * platform/PlatformMemoryInstrumentation.cpp:
        (WebCore):
        * platform/PlatformMemoryInstrumentation.h:
        (PlatformMemoryTypes):
        * platform/graphics/GraphicsLayer.cpp:
        (WebCore::GraphicsLayer::reportMemoryUsage):
        (WebCore):
        * platform/graphics/GraphicsLayer.h:
        (GraphicsLayer):
        * platform/graphics/chromium/GraphicsLayerChromium.cpp:
        (WebCore::GraphicsLayerChromium::reportMemoryUsage):
        (WebCore):
        * platform/graphics/chromium/GraphicsLayerChromium.h:
        (GraphicsLayerChromium):
        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::reportMemoryUsage):
        (WebCore):
        * rendering/RenderBlock.h:
        (RenderBlock):
        * rendering/RenderBox.cpp:
        (WebCore::RenderBox::reportMemoryUsage):
        (WebCore):
        * rendering/RenderBox.h:
        (RenderBox):
        * rendering/RenderInline.cpp:
        (WebCore::RenderInline::reportMemoryUsage):
        (WebCore):
        * rendering/RenderInline.h:
        (RenderInline):
        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::reportMemoryUsage):
        (WebCore):
        * rendering/RenderLayer.h:
        (RenderLayer):
        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::reportMemoryUsage):
        (WebCore):
        * rendering/RenderLayerBacking.h:
        (RenderLayerBacking):
        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::reportMemoryUsage):
        (WebCore):
        * rendering/RenderLayerCompositor.h:
        (RenderLayerCompositor):
        * rendering/RenderLayerModelObject.cpp:
        (WebCore::RenderLayerModelObject::reportMemoryUsage):
        (WebCore):
        * rendering/RenderLayerModelObject.h:
        (RenderLayerModelObject):
        * rendering/RenderObject.cpp:
        (WebCore::RenderObject::reportMemoryUsage):
        (WebCore):
        * rendering/RenderObject.h:
        (RenderObject):
        * rendering/RenderText.cpp:
        (WebCore::RenderText::reportMemoryUsage):
        (WebCore):
        * rendering/RenderText.h:
        (RenderText):
        * rendering/RenderView.cpp:
        (WebCore::RenderView::reportMemoryUsage):
        (WebCore):
        * rendering/RenderView.h:
        (RenderView):

2012-12-09  Ryosuke Niwa  <rniwa@webkit.org>

        REGRESSION (r137003): failures in MicroData tests on EFL, GTK
        https://bugs.webkit.org/show_bug.cgi?id=104469

        Reviewed by Darin Adler.

        Fix the regression by calling propertyNodeList on HTMLPropertiesCollection
        in the named getter for HTMLCollection. It's a miracle that the old code prior to r137003
        worked at all since the return type of namedItem was different.

        Existing tests cover this.

        * bindings/js/JSHTMLCollectionCustom.cpp:
        (WebCore::JSHTMLCollection::nameGetter):
        * bindings/v8/custom/V8HTMLCollectionCustom.cpp:
        (WebCore::V8HTMLCollection::namedPropertyGetter):

2012-12-09  Joanmarie Diggs  <jdiggs@igalia.com>

        [GTK] accessibility/placeholder.html is failing
        https://bugs.webkit.org/show_bug.cgi?id=98373

        Reviewed by Martin Robinson.

        The test was failing because the placeholder text was not supported and
        AccessibilityUIElement::stringAttributeValue() was not implemented.

        No new tests; instead the failing test was unskipped.

        * accessibility/atk/WebKitAccessibleWrapperAtk.cpp:
        (webkitAccessibleGetAttributes): Add the placeholder text as an AtkAttribute
        of the AtkObject, as is done in Gtk+ 3.

2012-12-09  Kondapally Kalyan  <kalyan.kondapally@intel.com>

        [EFL] [WebGL] Path is not resized correctly.
        https://bugs.webkit.org/show_bug.cgi?id=104458.

        Reviewed by Kenneth Rohde Christiansen.

        In GraphicsContext3D::paintToCanvas, we flip the contents and draw on the surface.
        The operations done to flip the image (translation and scale) are done before rectangle with correct size
        is added to current path. This resulted in updating pixels at wrong positions.

        Covered by existing tests.

        * platform/graphics/efl/GraphicsContext3DEfl.cpp:
        (WebCore::GraphicsContext3D::paintToCanvas):

2012-12-09  Joone Hur  <joone.hur@intel.com>

        [GTK][AC] build fix after r130525 and r133332
        https://bugs.webkit.org/show_bug.cgi?id=104491

        Reviewed by Martin Robinson.

        Build fix for Accelerated Compositing Clutter backend after r130525 and r133332.

        * platform/graphics/clutter/GraphicsLayerClutter.cpp:
        * platform/gtk/RedirectedXCompositeWindow.cpp:
        * platform/gtk/RedirectedXCompositeWindow.h:

2012-12-09  Carlos Garcia Campos  <cgarcia@igalia.com>

        [GTK] Use GObject casts instead of C++ cast for GObjects in DOM bindings
        https://bugs.webkit.org/show_bug.cgi?id=104492

        Reviewed by Martin Robinson.

        * bindings/scripts/CodeGeneratorGObject.pm:
        (GenerateCFile):
        * bindings/scripts/test/GObject/WebKitDOMFloat64Array.cpp:
        (WebKit::kit):
        * bindings/scripts/test/GObject/WebKitDOMTestActiveDOMObject.cpp:
        (WebKit::kit):
        * bindings/scripts/test/GObject/WebKitDOMTestCallback.cpp:
        (WebKit::kit):
        * bindings/scripts/test/GObject/WebKitDOMTestCustomNamedGetter.cpp:
        (WebKit::kit):
        * bindings/scripts/test/GObject/WebKitDOMTestEventConstructor.cpp:
        (WebKit::kit):
        * bindings/scripts/test/GObject/WebKitDOMTestEventTarget.cpp:
        (WebKit::kit):
        * bindings/scripts/test/GObject/WebKitDOMTestException.cpp:
        (WebKit::kit):
        * bindings/scripts/test/GObject/WebKitDOMTestInterface.cpp:
        (WebKit::kit):
        * bindings/scripts/test/GObject/WebKitDOMTestMediaQueryListListener.cpp:
        (WebKit::kit):
        * bindings/scripts/test/GObject/WebKitDOMTestNamedConstructor.cpp:
        (WebKit::kit):
        * bindings/scripts/test/GObject/WebKitDOMTestNode.cpp:
        (WebKit::kit):
        * bindings/scripts/test/GObject/WebKitDOMTestObj.cpp:
        (WebKit::kit):
        * bindings/scripts/test/GObject/WebKitDOMTestOverloadedConstructors.cpp:
        (WebKit::kit):
        * bindings/scripts/test/GObject/WebKitDOMTestSerializedScriptValueInterface.cpp:
        (WebKit::kit):

2012-12-09  Pavel Feldman  <pfeldman@chromium.org>

        Web Inspector: do not treat object as equal to itself when logging to console
        https://bugs.webkit.org/show_bug.cgi?id=104487

        Reviewed by Alexander Pavlov.

        Otherwise, mutating object in a loop results in the repeat count update instead of generation of the new preview.

        Test: inspector/console/console-object-preview.html

        * inspector/ConsoleMessage.cpp:
        (WebCore::ConsoleMessage::isEqual):

2012-12-09  Carlos Garcia Campos  <cgarcia@igalia.com>

        Remove unused code in GObject DOM bindings generator
        https://bugs.webkit.org/show_bug.cgi?id=104490

        Reviewed by Martin Robinson.

        * bindings/scripts/CodeGeneratorGObject.pm:
        (GenerateProperties): Remove code to install event listeners and
        signals.

2012-12-09  Zan Dobersek  <zandobersek@gmail.com>

        Unreviewed update for the GObject bindings after r137074 and r137078.

        * bindings/scripts/test/GObject/WebKitDOMTestEventTarget.cpp:
        (webkit_dom_test_event_target_dispatch_event):
        * bindings/scripts/test/GObject/WebKitDOMTestInterface.cpp:
        (webkit_dom_test_interface_supplemental_method2):
        * bindings/scripts/test/GObject/WebKitDOMTestObj.cpp:
        (webkit_dom_test_obj_method_that_requires_all_args_and_throws):
        (webkit_dom_test_obj_method_with_exception):
        (webkit_dom_test_obj_with_script_state_void_exception):
        (webkit_dom_test_obj_with_script_state_obj_exception):
        (webkit_dom_test_obj_with_script_execution_context_and_script_state_obj_exception):
        (webkit_dom_test_obj_strict_function):
        (webkit_dom_test_obj_get_attr_with_getter_exception):
        (webkit_dom_test_obj_set_attr_with_setter_exception):
        (webkit_dom_test_obj_get_string_attr_with_getter_exception):
        (webkit_dom_test_obj_set_string_attr_with_setter_exception):
        (webkit_dom_test_obj_get_with_script_state_attribute_raises):
        (webkit_dom_test_obj_get_with_script_execution_context_attribute_raises):
        (webkit_dom_test_obj_get_with_script_execution_context_and_script_state_attribute_raises):

2012-12-09  Carlos Garcia Campos  <cgarcia@igalia.com>

        Fix the GError check in GObject DOM bindings.

        Reviewed by Xan Lopez.

        Previous commit introduced a check to make sure the passed GError
        is valid in all DOM methods receiving an error.

        * bindings/scripts/CodeGeneratorGObject.pm:
        (GetGReturnMacro): Check that the passed GError either is NULL or
        the pointer has been initialized to NULL.

2012-12-09  Leo Yang  <leoyang@rim.com>

        [BlackBerry] Adapt to name change of createNetworkBufferByCopyingData()
        https://bugs.webkit.org/show_bug.cgi?id=104449

        Reviewed by Rob Buis.

        Name change no new tests.

        * platform/network/blackberry/rss/RSSFilterStream.cpp:
        (WebCore::RSSFilterStream::handleRSSContent):

2012-12-09  Carlos Garcia Campos  <cgarcia@igalia.com>

        [GTK] Clean up g_return macros usage in GObject DOM bindings
        https://bugs.webkit.org/show_bug.cgi?id=101079

        Reviewed by Xan Lopez.

        Several improvements:

          - Move g_return macros at the beginning of the methods.
          - Use them only to check parameters of public API.
          - Use GObject macros to check GObjects.
          - Check also GError parameters.
          - Use early returns in kit and core methods, since they should
            work even if g_return macros are disabled handling NULL
            gracefully.

        * bindings/scripts/CodeGeneratorGObject.pm:
        (GetGReturnMacro):
        (GenerateFunction):
        (GenerateCFile):
        (Generate):
        * bindings/scripts/test/GObject/WebKitDOMFloat64Array.cpp:
        (WebKit::kit):
        (WebKit::core):
        (WebKit::wrapFloat64Array):
        (webkit_dom_float64array_foo):
        * bindings/scripts/test/GObject/WebKitDOMTestActiveDOMObject.cpp:
        (WebKit::kit):
        (WebKit::core):
        (WebKit::wrapTestActiveDOMObject):
        (webkit_dom_test_active_dom_object_exciting_function):
        (webkit_dom_test_active_dom_object_post_message):
        (webkit_dom_test_active_dom_object_get_exciting_attr):
        * bindings/scripts/test/GObject/WebKitDOMTestCallback.cpp:
        (WebKit::kit):
        (WebKit::core):
        (WebKit::wrapTestCallback):
        (webkit_dom_test_callback_callback_with_no_param):
        (webkit_dom_test_callback_callback_with_class1param):
        (webkit_dom_test_callback_callback_with_class2param):
        (webkit_dom_test_callback_callback_with_non_bool_return_type):
        (webkit_dom_test_callback_callback_with_string_list):
        (webkit_dom_test_callback_callback_with_boolean):
        (webkit_dom_test_callback_callback_requires_this_to_pass):
        * bindings/scripts/test/GObject/WebKitDOMTestCustomNamedGetter.cpp:
        (WebKit::kit):
        (WebKit::core):
        (WebKit::wrapTestCustomNamedGetter):
        (webkit_dom_test_custom_named_getter_another_function):
        * bindings/scripts/test/GObject/WebKitDOMTestEventConstructor.cpp:
        (WebKit::kit):
        (WebKit::core):
        (WebKit::wrapTestEventConstructor):
        (webkit_dom_test_event_constructor_get_attr1):
        (webkit_dom_test_event_constructor_get_attr2):
        * bindings/scripts/test/GObject/WebKitDOMTestEventTarget.cpp:
        (WebKit::kit):
        (WebKit::core):
        (WebKit::wrapTestEventTarget):
        (webkit_dom_test_event_target_item):
        (webkit_dom_test_event_target_dispatch_event):
        * bindings/scripts/test/GObject/WebKitDOMTestException.cpp:
        (WebKit::kit):
        (WebKit::core):
        (WebKit::wrapTestException):
        (webkit_dom_test_exception_get_name):
        * bindings/scripts/test/GObject/WebKitDOMTestInterface.cpp:
        (WebKit::kit):
        (WebKit::core):
        (WebKit::wrapTestInterface):
        (webkit_dom_test_interface_supplemental_method1):
        (webkit_dom_test_interface_supplemental_method2):
        (webkit_dom_test_interface_supplemental_method4):
        (webkit_dom_test_interface_get_supplemental_str1):
        (webkit_dom_test_interface_get_supplemental_str2):
        (webkit_dom_test_interface_set_supplemental_str2):
        (webkit_dom_test_interface_get_supplemental_node):
        (webkit_dom_test_interface_set_supplemental_node):
        * bindings/scripts/test/GObject/WebKitDOMTestMediaQueryListListener.cpp:
        (WebKit::kit):
        (WebKit::core):
        (WebKit::wrapTestMediaQueryListListener):
        * bindings/scripts/test/GObject/WebKitDOMTestNamedConstructor.cpp:
        (WebKit::kit):
        (WebKit::core):
        (WebKit::wrapTestNamedConstructor):
        * bindings/scripts/test/GObject/WebKitDOMTestNode.cpp:
        (WebKit::kit):
        (WebKit::core):
        (WebKit::wrapTestNode):
        * bindings/scripts/test/GObject/WebKitDOMTestObj.cpp:
        (WebKit::kit):
        (WebKit::core):
        (WebKit::wrapTestObj):
        (webkit_dom_test_obj_void_method):
        (webkit_dom_test_obj_void_method_with_args):
        (webkit_dom_test_obj_long_method):
        (webkit_dom_test_obj_long_method_with_args):
        (webkit_dom_test_obj_obj_method):
        (webkit_dom_test_obj_obj_method_with_args):
        (webkit_dom_test_obj_method_that_requires_all_args_and_throws):
        (webkit_dom_test_obj_serialized_value):
        (webkit_dom_test_obj_idb_key):
        (webkit_dom_test_obj_options_object):
        (webkit_dom_test_obj_method_with_exception):
        (webkit_dom_test_obj_with_script_state_void):
        (webkit_dom_test_obj_with_script_state_obj):
        (webkit_dom_test_obj_with_script_state_void_exception):
        (webkit_dom_test_obj_with_script_state_obj_exception):
        (webkit_dom_test_obj_with_script_execution_context):
        (webkit_dom_test_obj_with_script_execution_context_and_script_state):
        (webkit_dom_test_obj_with_script_execution_context_and_script_state_obj_exception):
        (webkit_dom_test_obj_with_script_execution_context_and_script_state_with_spaces):
        (webkit_dom_test_obj_method_with_optional_arg):
        (webkit_dom_test_obj_method_with_non_optional_arg_and_optional_arg):
        (webkit_dom_test_obj_method_with_non_optional_arg_and_two_optional_args):
        (webkit_dom_test_obj_method_with_optional_string):
        (webkit_dom_test_obj_method_with_optional_string_is_undefined):
        (webkit_dom_test_obj_method_with_optional_string_is_null_string):
        (webkit_dom_test_obj_conditional_method1):
        (webkit_dom_test_obj_conditional_method2):
        (webkit_dom_test_obj_conditional_method3):
        (webkit_dom_test_obj_class_method):
        (webkit_dom_test_obj_class_method_with_optional):
        (webkit_dom_test_obj_overloaded_method1):
        (webkit_dom_test_obj_convert1):
        (webkit_dom_test_obj_convert2):
        (webkit_dom_test_obj_convert4):
        (webkit_dom_test_obj_convert5):
        (webkit_dom_test_obj_mutable_point_function):
        (webkit_dom_test_obj_immutable_point_function):
        (webkit_dom_test_obj_orange):
        (webkit_dom_test_obj_strict_function):
        (webkit_dom_test_obj_variadic_string_method):
        (webkit_dom_test_obj_variadic_double_method):
        (webkit_dom_test_obj_variadic_node_method):
        (webkit_dom_test_obj_get_read_only_long_attr):
        (webkit_dom_test_obj_get_read_only_string_attr):
        (webkit_dom_test_obj_get_read_only_test_obj_attr):
        (webkit_dom_test_obj_get_short_attr):
        (webkit_dom_test_obj_set_short_attr):
        (webkit_dom_test_obj_get_unsigned_short_attr):
        (webkit_dom_test_obj_set_unsigned_short_attr):
        (webkit_dom_test_obj_get_long_attr):
        (webkit_dom_test_obj_set_long_attr):
        (webkit_dom_test_obj_get_long_long_attr):
        (webkit_dom_test_obj_set_long_long_attr):
        (webkit_dom_test_obj_get_unsigned_long_long_attr):
        (webkit_dom_test_obj_set_unsigned_long_long_attr):
        (webkit_dom_test_obj_get_string_attr):
        (webkit_dom_test_obj_set_string_attr):
        (webkit_dom_test_obj_get_test_obj_attr):
        (webkit_dom_test_obj_set_test_obj_attr):
        (webkit_dom_test_obj_get_xml_obj_attr):
        (webkit_dom_test_obj_set_xml_obj_attr):
        (webkit_dom_test_obj_get_create):
        (webkit_dom_test_obj_set_create):
        (webkit_dom_test_obj_get_reflected_string_attr):
        (webkit_dom_test_obj_set_reflected_string_attr):
        (webkit_dom_test_obj_get_reflected_integral_attr):
        (webkit_dom_test_obj_set_reflected_integral_attr):
        (webkit_dom_test_obj_get_reflected_unsigned_integral_attr):
        (webkit_dom_test_obj_set_reflected_unsigned_integral_attr):
        (webkit_dom_test_obj_get_reflected_boolean_attr):
        (webkit_dom_test_obj_set_reflected_boolean_attr):
        (webkit_dom_test_obj_get_reflected_url_attr):
        (webkit_dom_test_obj_set_reflected_url_attr):
        (webkit_dom_test_obj_get_reflected_custom_integral_attr):
        (webkit_dom_test_obj_set_reflected_custom_integral_attr):
        (webkit_dom_test_obj_get_reflected_custom_boolean_attr):
        (webkit_dom_test_obj_set_reflected_custom_boolean_attr):
        (webkit_dom_test_obj_get_reflected_custom_url_attr):
        (webkit_dom_test_obj_set_reflected_custom_url_attr):
        (webkit_dom_test_obj_get_attr_with_getter_exception):
        (webkit_dom_test_obj_set_attr_with_getter_exception):
        (webkit_dom_test_obj_get_attr_with_setter_exception):
        (webkit_dom_test_obj_set_attr_with_setter_exception):
        (webkit_dom_test_obj_get_string_attr_with_getter_exception):
        (webkit_dom_test_obj_set_string_attr_with_getter_exception):
        (webkit_dom_test_obj_get_string_attr_with_setter_exception):
        (webkit_dom_test_obj_set_string_attr_with_setter_exception):
        (webkit_dom_test_obj_get_with_script_state_attribute):
        (webkit_dom_test_obj_set_with_script_state_attribute):
        (webkit_dom_test_obj_get_with_script_execution_context_attribute):
        (webkit_dom_test_obj_set_with_script_execution_context_attribute):
        (webkit_dom_test_obj_get_with_script_state_attribute_raises):
        (webkit_dom_test_obj_set_with_script_state_attribute_raises):
        (webkit_dom_test_obj_get_with_script_execution_context_attribute_raises):
        (webkit_dom_test_obj_set_with_script_execution_context_attribute_raises):
        (webkit_dom_test_obj_get_with_script_execution_context_and_script_state_attribute):
        (webkit_dom_test_obj_set_with_script_execution_context_and_script_state_attribute):
        (webkit_dom_test_obj_get_with_script_execution_context_and_script_state_attribute_raises):
        (webkit_dom_test_obj_set_with_script_execution_context_and_script_state_attribute_raises):
        (webkit_dom_test_obj_get_with_script_execution_context_and_script_state_with_spaces_attribute):
        (webkit_dom_test_obj_set_with_script_execution_context_and_script_state_with_spaces_attribute):
        (webkit_dom_test_obj_get_conditional_attr1):
        (webkit_dom_test_obj_set_conditional_attr1):
        (webkit_dom_test_obj_get_conditional_attr2):
        (webkit_dom_test_obj_set_conditional_attr2):
        (webkit_dom_test_obj_get_conditional_attr3):
        (webkit_dom_test_obj_set_conditional_attr3):
        (webkit_dom_test_obj_get_any_attribute):
        (webkit_dom_test_obj_set_any_attribute):
        (webkit_dom_test_obj_get_content_document):
        (webkit_dom_test_obj_get_mutable_point):
        (webkit_dom_test_obj_set_mutable_point):
        (webkit_dom_test_obj_get_immutable_point):
        (webkit_dom_test_obj_set_immutable_point):
        (webkit_dom_test_obj_get_strawberry):
        (webkit_dom_test_obj_set_strawberry):
        (webkit_dom_test_obj_get_strict_float):
        (webkit_dom_test_obj_set_strict_float):
        (webkit_dom_test_obj_get_description):
        (webkit_dom_test_obj_get_id):
        (webkit_dom_test_obj_set_id):
        (webkit_dom_test_obj_get_hash):
        (webkit_dom_test_obj_get_replaceable_attribute):
        * bindings/scripts/test/GObject/WebKitDOMTestSerializedScriptValueInterface.cpp:
        (WebKit::kit):
        (WebKit::core):
        (WebKit::wrapTestSerializedScriptValueInterface):
        (webkit_dom_test_serialized_script_value_interface_accept_transfer_list):
        (webkit_dom_test_serialized_script_value_interface_multi_transfer_list):
        (webkit_dom_test_serialized_script_value_interface_get_value):
        (webkit_dom_test_serialized_script_value_interface_set_value):
        (webkit_dom_test_serialized_script_value_interface_get_readonly_value):
        (webkit_dom_test_serialized_script_value_interface_get_cached_value):
        (webkit_dom_test_serialized_script_value_interface_set_cached_value):
        (webkit_dom_test_serialized_script_value_interface_get_ports):
        (webkit_dom_test_serialized_script_value_interface_get_cached_readonly_value):

2012-12-09  Carlos Garcia Campos  <cgarcia@igalia.com>

        [GTK] Use a private struct and placement new syntax in GObject DOM bindings
        https://bugs.webkit.org/show_bug.cgi?id=101074

        Reviewed by Xan Lopez.

        It allows to use RefPtr for the wrapped object and it simplifies
        the code. Only the classes deriving from WebKitDOMObject keep a
        reference of the wrapped object in a private struct. The wrapped
        object is added to the cache in GObjectClass::constructor() and
        removed in GObjectClass::finalize().

        * bindings/gobject/WebKitDOMBinding.cpp:
        (WebKit::createWrapper):
        (WebKit::kit):
        (WebKit::wrapEventTarget):
        * bindings/scripts/CodeGeneratorGObject.pm:
        (GetParentImplClassName):
        (GenerateProperties):
        (GenerateCFile):
        (Generate):
        (WriteData):
        * bindings/scripts/test/GObject/WebKitDOMFloat64Array.cpp:
        (WebKit::kit):
        (WebKit::core):
        (WebKit::wrapFloat64Array):
        (webkit_dom_float64array_class_init):
        * bindings/scripts/test/GObject/WebKitDOMTestActiveDOMObject.cpp:
        (_WebKitDOMTestActiveDOMObjectPrivate):
        (WebKit::kit):
        (WebKit::core):
        (WebKit::wrapTestActiveDOMObject):
        (webkit_dom_test_active_dom_object_finalize):
        (webkit_dom_test_active_dom_object_constructor):
        (webkit_dom_test_active_dom_object_class_init):
        (webkit_dom_test_active_dom_object_init):
        * bindings/scripts/test/GObject/WebKitDOMTestCallback.cpp:
        (_WebKitDOMTestCallbackPrivate):
        (WebKit::kit):
        (WebKit::core):
        (WebKit::wrapTestCallback):
        (webkit_dom_test_callback_finalize):
        (webkit_dom_test_callback_constructor):
        (webkit_dom_test_callback_class_init):
        (webkit_dom_test_callback_init):
        * bindings/scripts/test/GObject/WebKitDOMTestCustomNamedGetter.cpp:
        (_WebKitDOMTestCustomNamedGetterPrivate):
        (WebKit::kit):
        (WebKit::core):
        (WebKit::wrapTestCustomNamedGetter):
        (webkit_dom_test_custom_named_getter_finalize):
        (webkit_dom_test_custom_named_getter_constructor):
        (webkit_dom_test_custom_named_getter_class_init):
        (webkit_dom_test_custom_named_getter_init):
        * bindings/scripts/test/GObject/WebKitDOMTestEventConstructor.cpp:
        (_WebKitDOMTestEventConstructorPrivate):
        (WebKit::kit):
        (WebKit::core):
        (WebKit::wrapTestEventConstructor):
        (webkit_dom_test_event_constructor_finalize):
        (webkit_dom_test_event_constructor_constructor):
        (webkit_dom_test_event_constructor_class_init):
        (webkit_dom_test_event_constructor_init):
        * bindings/scripts/test/GObject/WebKitDOMTestEventTarget.cpp:
        (_WebKitDOMTestEventTargetPrivate):
        (WebKit::kit):
        (WebKit::core):
        (WebKit::wrapTestEventTarget):
        (webkit_dom_test_event_target_finalize):
        (webkit_dom_test_event_target_constructor):
        (webkit_dom_test_event_target_class_init):
        (webkit_dom_test_event_target_init):
        * bindings/scripts/test/GObject/WebKitDOMTestException.cpp:
        (_WebKitDOMTestExceptionPrivate):
        (WebKit::kit):
        (WebKit::core):
        (WebKit::wrapTestException):
        (webkit_dom_test_exception_finalize):
        (webkit_dom_test_exception_constructor):
        (webkit_dom_test_exception_class_init):
        (webkit_dom_test_exception_init):
        * bindings/scripts/test/GObject/WebKitDOMTestInterface.cpp:
        (_WebKitDOMTestInterfacePrivate):
        (WebKit::kit):
        (WebKit::core):
        (WebKit::wrapTestInterface):
        (webkit_dom_test_interface_finalize):
        (webkit_dom_test_interface_constructor):
        (webkit_dom_test_interface_class_init):
        (webkit_dom_test_interface_init):
        * bindings/scripts/test/GObject/WebKitDOMTestMediaQueryListListener.cpp:
        (_WebKitDOMTestMediaQueryListListenerPrivate):
        (WebKit::kit):
        (WebKit::core):
        (WebKit::wrapTestMediaQueryListListener):
        (webkit_dom_test_media_query_list_listener_finalize):
        (webkit_dom_test_media_query_list_listener_constructor):
        (webkit_dom_test_media_query_list_listener_class_init):
        (webkit_dom_test_media_query_list_listener_init):
        * bindings/scripts/test/GObject/WebKitDOMTestNamedConstructor.cpp:
        (_WebKitDOMTestNamedConstructorPrivate):
        (WebKit::kit):
        (WebKit::core):
        (WebKit::wrapTestNamedConstructor):
        (webkit_dom_test_named_constructor_finalize):
        (webkit_dom_test_named_constructor_constructor):
        (webkit_dom_test_named_constructor_class_init):
        (webkit_dom_test_named_constructor_init):
        * bindings/scripts/test/GObject/WebKitDOMTestNode.cpp:
        (WebKit::kit):
        (WebKit::core):
        (WebKit::wrapTestNode):
        (webkit_dom_test_node_class_init):
        * bindings/scripts/test/GObject/WebKitDOMTestObj.cpp:
        (_WebKitDOMTestObjPrivate):
        (WebKit::kit):
        (WebKit::core):
        (WebKit::wrapTestObj):
        (webkit_dom_test_obj_finalize):
        (webkit_dom_test_obj_constructor):
        (webkit_dom_test_obj_class_init):
        (webkit_dom_test_obj_init):
        * bindings/scripts/test/GObject/WebKitDOMTestOverloadedConstructors.cpp:
        (_WebKitDOMTestOverloadedConstructorsPrivate):
        (WebKit::kit):
        (WebKit::core):
        (WebKit::wrapTestOverloadedConstructors):
        (webkit_dom_test_overloaded_constructors_finalize):
        (webkit_dom_test_overloaded_constructors_constructor):
        (webkit_dom_test_overloaded_constructors_class_init):
        (webkit_dom_test_overloaded_constructors_init):
        * bindings/scripts/test/GObject/WebKitDOMTestSerializedScriptValueInterface.cpp:
        (_WebKitDOMTestSerializedScriptValueInterfacePrivate):
        (WebKit::kit):
        (WebKit::core):
        (WebKit::wrapTestSerializedScriptValueInterface):
        (webkit_dom_test_serialized_script_value_interface_finalize):
        (webkit_dom_test_serialized_script_value_interface_constructor):
        (webkit_dom_test_serialized_script_value_interface_class_init):
        (webkit_dom_test_serialized_script_value_interface_init):

2012-12-09  Jon Lee  <jonlee@apple.com>

        [WK2] Move button image to injected bundle
        https://bugs.webkit.org/show_bug.cgi?id=104107
        <rdar://problem/12813842>

        Reviewed by Simon Fraser.

        Update RenderSnapshottedPlugIn to retrieve the start button image from the ChromeClient. Expand the
        kinds of images available for use as the button. Try to find the best sized button to use for the plug-in,
        otherwise use no image at all.

        * rendering/RenderSnapshottedPlugIn.h: Add an enum representing the size to use. Remove the label rect
        variable since it is unneeded.
        * rendering/RenderSnapshottedPlugIn.cpp:
        (WebCore::RenderSnapshottedPlugIn::startLabelImage): Maintain a cache of the images for reuse. Index into the
        array using the enum. If the image has been loaded, or an attempt was made, then return the result. Otherwise
        ask the chrome client for the image.
        (WebCore::RenderSnapshottedPlugIn::paintLabel): Determine the proper label to use, and paint if the image is
        available.
        (WebCore::RenderSnapshottedPlugIn::tryToFitStartLabel): Compare the label size with the provided content
        box. Return a LayoutRect representing the label's placement. If it doesn't fit, return an empty rect.
        (WebCore::RenderSnapshottedPlugIn::layout): The rect is not needed because it is all determined at paint time.

        * page/ChromeClient.h:
        (WebCore::ChromeClient::plugInStartLabelImage): Added.

        * WebCore.exp.in: Expose GraphicsContext::drawNativeImage() for WKImageCG.cpp.
        * WebCore.xcodeproj/project.pbxproj: Remove start button assets.
        * Resources/startButton.png: Removed.
        * Resources/startButton@2x.png: Removed.

2012-12-09  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r137053.
        http://trac.webkit.org/changeset/137053
        https://bugs.webkit.org/show_bug.cgi?id=104471

        Broke PerformanceTests/Parser/html-parser.html (Requested by
        mkwst_ on #webkit).

        * bindings/ScriptControllerBase.cpp:
        (WebCore::ScriptController::canExecuteScripts):

2012-12-09  Kangil Han  <kangil.han@samsung.com>

        Fix unused parameter compile warnings
        https://bugs.webkit.org/show_bug.cgi?id=104463

        Reviewed by Kentaro Hara.

        Remove compile warning messages by omitting parameter name.

        * platform/graphics/surfaces/GraphicsSurface.cpp:
        (WebCore::GraphicsSurface::GraphicsSurface):

2012-12-08  Rakesh KN  <rakeshchaitan@gmail.com>

        Build break if SVG is disabled
        https://bugs.webkit.org/show_bug.cgi?id=104452

        Reviewed by Darin Adler.

        Build breaking after r136975 if SVG is disabled.
        No new tests required.

        * rendering/FilterEffectRenderer.cpp:
        (WebCore::FilterEffectRenderer::buildReferenceFilter):
        As document is not an argument anymore, removing UNUSED_PARAM against it.
        * rendering/FilterEffectRenderer.h:
        Added forward declaration for RenderObject.

2012-12-08  Mike West  <mkwst@chromium.org>

        Log to console when script is blocked by sandbox attributes.
        https://bugs.webkit.org/show_bug.cgi?id=104365

        Reviewed by Ojan Vafai.

        Adds a console message to cover script execution blocked within the
        context of a sandboxed frame which lacks the 'allow-scripts' permission.

        * bindings/ScriptControllerBase.cpp:
        (WebCore::ScriptController::canExecuteScripts):
            Log a warning when sandboxing flags block script execution.

2012-12-08  No'am Rosenthal  <noam@webkit.org>

        Use background color for GraphicsLayers when applicable
        https://bugs.webkit.org/show_bug.cgi?id=103786

        Updated RenderLayerBacking to call GraphicsLayer::setContentsToBackgroundColor when the following conditions take place:
        1. The layer doesn't paint its own content, other than background/decoration.
        2. There are no borders or other box decorations (border radius, borders, outline, shadow etc.)
        3. The image has only a background color, and no background image.
        4. background-composite is set to source-over, and background-clip is anything apart from text.
        5. The port supports setContentsToBackgroundColor.

        This allows any implementation of GraphicsLayer that supports setContentsToBackgroundColor to avoid allocating a backing store
        for that layer, but instead draw that solid color directly.
        In addition to setting the background color, the layer's contentsRect needs to be adjusted, since the default contents rect of
        a layer is not always equivalent to the rect where the background is supposed to be painted, which is derived from the box's
        background-clip property.

        Reviewed by Simon Fraser.

        Tests: compositing/background-color/background-color-alpha.html
               compositing/background-color/background-color-change-to-text.html
               compositing/background-color/background-color-composite.html
               compositing/background-color/background-color-container.html
               compositing/background-color/background-color-content-clip.html
               compositing/background-color/background-color-padding-change.html
               compositing/background-color/background-color-padding-clip.html
               compositing/background-color/background-color-simple.html
               compositing/background-color/background-color-text-change.html
               compositing/background-color/background-color-text-clip.html

        * platform/graphics/GraphicsLayer.h:
        (WebCore::GraphicsLayer::supportsBackgroundColorContent):
            Allows different implementation of GraphicsLayer to identify whether they implement setContentsToBackgroundColor.
            Currently only the MAC implementation and TextureMapper falls under that category.

        * rendering/RenderBox.h:
        (WebCore::RenderBox::paddingBoxRect):
            Added paddingBoxRect to compliment borderBoxRect and contentsBoxRect. paddingBoxRect corresponds to 
            background-clip: padding.

        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::updateGraphicsLayerConfiguration):
            Update the background color if needed, for every configuration change.
            This should accomodate the old behavior for full-screen, while enabling background color changes for other layers.

        (WebCore::RenderLayerBacking::updateGraphicsLayerGeometry):
            Move the contentsRect logic to updateContentsRect.

        (WebCore::RenderLayerBacking::updateContentsRect):
            Use the background box when directly compositing backgrounds.

        (WebCore::RenderLayerBacking::updateBackgroundColor):
            Set the background color if applicable, otherwise set to trasnparent and clear.
            This was not needed in the past because background colors were only used for the special case of full-screen.

        (WebCore::supportsDirectBoxDecorationsComposition):
            Helper function to determine whether a particular background can be directly composited. Right now only 
            background color can be composited, and only if the GraphicsLayer implementation supports background colors.
            Also we don't yet support background-clip: text and any background-composite other than source-over.

        (WebCore::RenderLayerBacking::paintsBoxDecorations):
            Apply the new supportsDirectBoxDecorationsComposition logic.

        (WebCore::RenderLayerBacking::contentsBox):
            Remove unnecessary local variable.

        (WebCore::backgroundRectForBox):
        (WebCore::RenderLayerBacking::backgroundBox):
            Figure out the correct rect for the GraphicsLayer's contentsRect, based on the renderer's backgroundClip.
            The rectangle has to be adjusted based on the composited layer offset, and snapped to an IntRect as 
            GraphicsLayer::contentsRect expects snapped pixels.


2012-12-08  Patrick Gansterer  <paroga@webkit.org>

        Build fix for WinCE after r137011.

        * platform/graphics/GraphicsContext.h:
        * platform/graphics/wince/GraphicsContextWinCE.cpp:
        (WebCore::GraphicsContext::setPlatformCompositeOperation):
        (WebCore::GraphicsContext::drawBitmap):
        * platform/graphics/wince/ImageBufferWinCE.cpp:
        (WebCore::BufferedImage::draw):
        (WebCore::ImageBuffer::draw):
        * platform/graphics/wince/ImageWinCE.cpp:
        (WebCore::BitmapImage::getHBITMAPOfSize):
        (WebCore::BitmapImage::drawFrameMatchingSourceSize):
        (WebCore::BitmapImage::draw):
        * platform/graphics/wince/SharedBitmap.cpp:
        (WebCore::SharedBitmap::draw):
        * platform/graphics/wince/SharedBitmap.h:

2012-12-08  Gavin Peters  <gavinp@chromium.org>

        Add status events on <link rel=prerender> elements.
        https://bugs.webkit.org/show_bug.cgi?id=96474

        Reviewed by Adam Barth.

        The new PrerenderStatusEvent is sent to link elements when
        prerenders are started by the embedder, and also sent when they
        are stopped. Pages using this feature can now serialize launching
        prerenders, and track timing performance.

        Tested in a new WebKitUnitTest for the chromium port.

        * GNUmakefile.list.am:
        * Target.pri:
        * WebCore.gypi:
        * WebCore.vcproj/WebCore.vcproj:
        * WebCore.xcodeproj/project.pbxproj:
        * dom/EventNames.h:
        (WebCore):
        * html/HTMLLinkElement.cpp:
        (WebCore):
        (WebCore::HTMLLinkElement::didStartLinkPrerender):
        (WebCore::HTMLLinkElement::didStopLinkPrerender):
        (WebCore::HTMLLinkElement::didSendLoadForLinkPrerender):
        (WebCore::HTMLLinkElement::didSendDOMContentLoadedForLinkPrerender):
        * html/HTMLLinkElement.h:
        (HTMLLinkElement):
        * loader/LinkLoader.cpp:
        (WebCore::LinkLoader::didStartPrerender):
        (WebCore):
        (WebCore::LinkLoader::didStopPrerender):
        (WebCore::LinkLoader::didSendLoadForPrerender):
        (WebCore::LinkLoader::didSendDOMContentLoadedForPrerender):
        (WebCore::LinkLoader::loadLink):
        * loader/LinkLoader.h:
        (LinkLoader):
        * loader/LinkLoaderClient.h:
        (LinkLoaderClient):
        * loader/Prerenderer.cpp:
        (WebCore::Prerenderer::render):
        * loader/Prerenderer.h:
        (WebCore):
        (Prerenderer):
        * platform/PrerenderClient.h: Copied from Source/WebCore/loader/LinkLoaderClient.h.
        (WebCore):
        (PrerenderClient):
        (WebCore::PrerenderClient::~PrerenderClient):
        * platform/PrerenderHandle.h:
        (WebCore):
        (PrerenderHandle):
        * platform/chromium/Prerender.cpp:
        (WebCore::Prerender::Prerender):
        (WebCore::Prerender::removeClient):
        (WebCore):
        (WebCore::Prerender::add):
        (WebCore::Prerender::cancel):
        (WebCore::Prerender::abandon):
        (WebCore::Prerender::didStartPrerender):
        (WebCore::Prerender::didStopPrerender):
        (WebCore::Prerender::didSendLoadForPrerender):
        (WebCore::Prerender::didSendDOMContentLoadedForPrerender):
        * platform/chromium/Prerender.h:
        (WebKit):
        (WebCore):
        (Prerender):
        * platform/chromium/PrerenderHandle.cpp:
        (WebCore::PrerenderHandle::create):
        (WebCore::PrerenderHandle::PrerenderHandle):
        (WebCore::PrerenderHandle::~PrerenderHandle):
        (WebCore::PrerenderHandle::removeClient):
        (WebCore):
        * platform/chromium/support/WebPrerender.cpp:
        (WebKit::WebPrerender::toPrerender):
        (WebKit):
        (WebKit::WebPrerender::assign):
        (WebKit::WebPrerender::isNull):
        (WebKit::WebPrerender::didStartPrerender):
        (WebKit::WebPrerender::didStopPrerender):
        (WebKit::WebPrerender::didSendLoadForPrerender):
        (WebKit::WebPrerender::didSendDOMContentLoadedForPrerender):

2012-12-08  Gustavo Noronha Silva  <gns@gnome.org>

        Reviewed by Martin Robinson.

        Update the Chromium/Chrome version we advertise in our User-Agent
        string to version 25, to better match our current reality.

        * platform/gtk/UserAgentGtk.cpp:
        (WebCore::standardUserAgent):

2012-12-08  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r137006.
        http://trac.webkit.org/changeset/137006
        https://bugs.webkit.org/show_bug.cgi?id=104446

        Broke plugin painting on Mac (youtube, etc.) (Requested by
        thorton_ on #webkit).

        * platform/graphics/GraphicsLayer.h:
        (GraphicsLayer):
        * rendering/RenderBox.h:
        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::updateGraphicsLayerConfiguration):
        (WebCore::clipBox):
        (WebCore::RenderLayerBacking::updateGraphicsLayerGeometry):
        (WebCore::RenderLayerBacking::updateDrawsContent):
        (WebCore::RenderLayerBacking::updateBackgroundColor):
        (WebCore::RenderLayerBacking::paintsBoxDecorations):
        (WebCore::RenderLayerBacking::contentChanged):
        (WebCore::RenderLayerBacking::updateImageContents):
        (WebCore::RenderLayerBacking::contentsBox):
        * rendering/RenderLayerBacking.h:
        (RenderLayerBacking):

2012-12-08  Wei James  <james.wei@intel.com>

        Remove incorrect ASSERT for m_error in CachedResource
        https://bugs.webkit.org/show_bug.cgi?id=104333

        Reviewed by Nate Chapin.

        This assertion was brought in https://bugs.webkit.org/show_bug.cgi?id=100901 
        When the request is canceled, m_error.isNull() should be true.

        run webkit_unit_tests Debug build.

        * loader/cache/CachedResource.cpp:
        (WebCore::CachedResource::stopLoading):

2012-12-08  Ryosuke Niwa  <rniwa@webkit.org>

        Qt Linux Minimal build fix after r136975.

        * dom/ElementRareData.h:
        (ElementRareData):

2012-12-08  Ryosuke Niwa  <rniwa@webkit.org>

        Qt Linux Minimal build fix attempt after r136959.

        * inspector/InspectorInstrumentation.h:
        (WebCore::InspectorInstrumentation::layerTreeDidChange):
        (WebCore::InspectorInstrumentation::renderLayerDestroyed):

2012-12-08  Xan Lopez  <xlopez@igalia.com>

        Build fix after r137003. Wrap Microdata only sections with ENABLE(MICRODATA).

        * dom/NodeRareData.h:
        (NodeRareData):

2012-12-08  Ryosuke Niwa  <rniwa@webkit.org>

        Build fix after r137003. Wrap NodeMutationObserverData with ENABLE(MUTATION_OBSERVERS).

        * dom/NodeRareData.h:
        (NodeRareData):

2012-12-08  Patrick Gansterer  <paroga@webkit.org>

        Build fix for ENABLE(SVG) && !ENABLE(FILTERS) after r136975.

        * rendering/svg/SVGResources.cpp:
        (WebCore::SVGResources::buildCachedResources):

2012-12-08  Adam Klein  <adamk@chromium.org>

        HTMLTemplateElement.innerHTML should be parsed into the template contents owner document
        https://bugs.webkit.org/show_bug.cgi?id=104407

        Reviewed by Eric Seidel.

        When parsing via innerHTML, ensure that all operations (including the
        initial fragment creation) occur in the proper document to avoid,
        e.g., images loading while being parsed into the template contents.
        This matches the parsing behavior during page load.

        Test: fast/dom/HTMLTemplateElement/innerHTML-inert.html

        * editing/markup.cpp:
        (WebCore::createFragmentForInnerOuterHTML):

2012-12-08  ChangSeok Oh  <shivamidow@gmail.com>

        Assertion failed at WebCore::RedirectedXCompositeWindow::context()
        https://bugs.webkit.org/show_bug.cgi?id=104349

        Reviewed by Martin Robinson.

        We should return GLContext if m_needsContext is CreateGLContext. By the way
        CreateGLContext is a enum value and its default value is 0. So checking
        ASSERT(m_needsContext) causes a crash on debug build.
        ASSERT(m_needsContext == CreateGLContext) is better here.

        No new tests since we can verify this with already existing AC tests.

        * platform/gtk/RedirectedXCompositeWindow.cpp:
        (WebCore::RedirectedXCompositeWindow::context):

2012-12-07  Rik Cabanier  <cabanier@adobe.com>

        Extend platform layer so it can pass blend modes to the compositing calls
        https://bugs.webkit.org/show_bug.cgi?id=104176

        Reviewed by Dirk Schulze.

        Adding blend mode enumeration to drawImage functions + stored blendmode in graphics context 

        No new tests, no new functionality.

        * html/HTMLCanvasElement.cpp:
        (WebCore::HTMLCanvasElement::paint):
        * platform/graphics/BitmapImage.h:
        * platform/graphics/CrossfadeGeneratedImage.cpp:
        (WebCore::CrossfadeGeneratedImage::draw):
        * platform/graphics/CrossfadeGeneratedImage.h:
        (CrossfadeGeneratedImage):
        * platform/graphics/GeneratedImage.h:
        (GeneratedImage):
        * platform/graphics/GeneratorGeneratedImage.cpp:
        (WebCore::GeneratorGeneratedImage::draw):
        * platform/graphics/GeneratorGeneratedImage.h:
        (GeneratorGeneratedImage):
        * platform/graphics/GraphicsContext.cpp:
        (WebCore::GraphicsContext::drawImage):
        (WebCore):
        (WebCore::GraphicsContext::drawImageBuffer):
        (WebCore::GraphicsContext::setCompositeOperation):
        * platform/graphics/GraphicsContext.h:
        (WebCore::GraphicsContextState::GraphicsContextState):
        (GraphicsContextState):
        (GraphicsContext):
        * platform/graphics/Image.cpp:
        (WebCore::Image::draw):
        (WebCore::Image::drawTiled):
        * platform/graphics/Image.h:
        (Image):
        * platform/graphics/ImageBuffer.h:
        (ImageBuffer):
        * platform/graphics/cairo/BitmapImageCairo.cpp:
        (WebCore::BitmapImage::draw):
        * platform/graphics/cairo/GraphicsContextCairo.cpp:
        (WebCore::GraphicsContext::setPlatformCompositeOperation):
        * platform/graphics/cairo/ImageBufferCairo.cpp:
        (WebCore::ImageBuffer::draw):
        * platform/graphics/cg/BitmapImageCG.cpp:
        (WebCore::BitmapImage::draw):
        * platform/graphics/cg/GraphicsContextCG.cpp:
        (WebCore::GraphicsContext::drawNativeImage):
        (WebCore::GraphicsContext::setPlatformCompositeOperation):
        * platform/graphics/cg/ImageBufferCG.cpp:
        (WebCore::ImageBuffer::draw):
        * platform/graphics/cg/PDFDocumentImage.cpp:
        (WebCore::PDFDocumentImage::draw):
        * platform/graphics/cg/PDFDocumentImage.h:
        (PDFDocumentImage):
        * platform/graphics/qt/GraphicsContextQt.cpp:
        (WebCore::GraphicsContext::setPlatformCompositeOperation):
        * platform/graphics/qt/ImageBufferQt.cpp:
        (WebCore::ImageBuffer::draw):
        * platform/graphics/qt/ImageQt.cpp:
        (WebCore::BitmapImage::draw):
        * platform/graphics/qt/StillImageQt.cpp:
        (WebCore::StillImage::draw):
        * platform/graphics/qt/StillImageQt.h:
        (StillImage):
        * platform/graphics/skia/BitmapImageSingleFrameSkia.h:
        (BitmapImageSingleFrameSkia):
        * platform/graphics/skia/GraphicsContextSkia.cpp:
        (WebCore::GraphicsContext::setPlatformCompositeOperation):
        * platform/graphics/skia/ImageBufferSkia.cpp:
        (WebCore::ImageBuffer::draw):
        * platform/graphics/skia/ImageSkia.cpp:
        (WebCore::BitmapImage::draw):
        (WebCore::BitmapImageSingleFrameSkia::draw):
        * platform/graphics/win/ImageCGWin.cpp:
        (WebCore::BitmapImage::getHBITMAPOfSize):
        (WebCore::BitmapImage::drawFrameMatchingSourceSize):
        * svg/graphics/SVGImage.cpp:
        (WebCore::SVGImage::drawSVGToImageBuffer):
        (WebCore::SVGImage::draw):
        (WebCore::SVGImage::nativeImageForCurrentFrame):
        * svg/graphics/SVGImage.h:
        (SVGImage):

2012-12-07  Alpha Lam  <hclam@chromium.org>

        [chromium] ImageDecodingStore should cache partially decoded images
        https://bugs.webkit.org/show_bug.cgi?id=103796

        Reviewed by Stephen White.

        Implement caching for incomplete images, meaning the image is partially
        decoded. The image is cached together with partially decoded ImageDecoder.
        This allows decoding to resume in a later time.

        Caching logic for incomplete images is implemented in ImageDecodingStore.

        Logic for resuming image decoding is implemented in ImageFrameGenerator.

        ImageDecodingStore allows storing incomplete image with the decoder.
        The cache entry can be used in a later time to read and write (i.e. resume
        decoding.) To avoid the same entry being written and read at the same time,
        an incomplete entry can be used by one user only. Concurrent access to
        an incomplete entry should never happen and is checked by an assert.
        An entry can becomes complete when decoding is finished. In this case
        the associated decoder is deleted. Once an entry becomes complete concurrent
        read is allowed.

        ImageFrameGenerator performs the logic to resume image decoding. It
        performs the following operations in sequence:
        - Try to lookup a complete image
        - Try to perform scaling on a complete image
        - Try to lookup an incomplete image and resume decoding & scaling
        - Everything fails, start decoding from scratch
        The entire sequence of operations in under a mutex, hence there will be
        no more than 1 user of an incomplete cache entry at the same time.

        New unit tests in ImageDecodingStoreTest and ImageFrameGeneratorTest.

        * platform/graphics/chromium/ImageDecodingStore.cpp:
        (WebCore::ImageDecodingStore::lockCache):
        Change of method definition to return an image and ImageDecoder.
        (WebCore::ImageDecodingStore::unlockCache):
        (WebCore::ImageDecodingStore::insertAndLockCache):
        (WebCore::ImageDecodingStore::overwriteAndLockCache):
        New method to allow an incomplete cache entry be overwritten.
        (WebCore):
        * platform/graphics/chromium/ImageDecodingStore.h:
        (ImageDecodingStore):
        (WebCore::ImageDecodingStore::CacheEntry::createAndUse):
        (WebCore::ImageDecodingStore::CacheEntry::CacheEntry):
        (WebCore::ImageDecodingStore::CacheEntry::cachedImage):
        (WebCore::ImageDecodingStore::CacheEntry::cachedDecoder):
        (WebCore::ImageDecodingStore::CacheEntry::releaseCachedDecoder):
        (WebCore::ImageDecodingStore::CacheEntry::overwriteCachedImage):
        New method to allow an incomplete image be overwitten.
        (CacheEntry):
        * platform/graphics/chromium/ImageFrameGenerator.cpp:
        (WebCore::ImageFrameGenerator::ImageFrameGenerator):
        (WebCore::ImageFrameGenerator::decodeAndScale):
        (WebCore::ImageFrameGenerator::tryToLockCompleteCache):
        (WebCore::ImageFrameGenerator::tryToScale):
        (WebCore::ImageFrameGenerator::tryToResumeDecodeAndScale):
        New method to lookup an incomplete cache entry and resume decoding.
        (WebCore):
        (WebCore::ImageFrameGenerator::tryToDecodeAndScale):
        (WebCore::ImageFrameGenerator::decoder):
        New helper method to do decoding for a full sized image.
        (WebCore::ImageFrameGenerator::prepareData):
        New helper method to prepare data safely.
        * platform/graphics/chromium/ImageFrameGenerator.h:
        (ImageFrameGenerator):
        * platform/graphics/chromium/LazyDecodingPixelRef.cpp:
        (WebCore::LazyDecodingPixelRef::onLockPixels):
        * platform/graphics/chromium/ScaledImageFragment.h:
        (WebCore::ScaledImageFragment::setIsComplete):

2012-12-07  Alexis Menard  <alexis@webkit.org>

        Enable CSS3 position offset for CSS Masking.
        https://bugs.webkit.org/show_bug.cgi?id=104252

        Reviewed by Dirk Schulze.

        To follow CSS3 background-position, mask-position should also support
        the new <position> type (http://dvcs.w3.org/hg/FXTF/raw-file/tip/masking/index.html#mask-property).
        Now the code is shared between background and mask I renamed the
        functions used to be more generic. Note that the feature flag is not
        meant to stay and will be removed in a following commit.

        No new tests : I modified LayoutTests/fast/masking/parsing-mask.html to
        cover the new feature.

        * css/CSSComputedStyleDeclaration.cpp:
        (WebCore::createPositionListForLayer):
        * css/CSSParser.cpp:
        (WebCore::isFillPositionKeyword):
        (WebCore::CSSParser::parse4ValuesFillPosition):
        (WebCore::CSSParser::parse3ValuesFillPosition):
        (WebCore::CSSParser::isPotentialPositionValue):
        (WebCore::CSSParser::parseFillPosition):
        (WebCore::CSSParser::parse2ValuesFillPosition):
        (WebCore::CSSParser::parseFillProperty):
        (WebCore::CSSParser::parseTransformOriginShorthand):
        (WebCore::CSSParser::parseRadialGradient):
        (WebCore::CSSParser::parsePerspectiveOrigin):
        * css/CSSParser.h:
        * css/CSSToStyleMap.cpp:
        (WebCore::CSSToStyleMap::mapFillXPosition):
        (WebCore::CSSToStyleMap::mapFillYPosition):

2012-12-07  No'am Rosenthal  <noam@webkit.org>

        Use background color for GraphicsLayers when applicable
        https://bugs.webkit.org/show_bug.cgi?id=103786

        Updated RenderLayerBacking to call GraphicsLayer::setContentsToBackgroundColor when the following conditions take place:
        1. The layer doesn't paint its own content, other than background/decoration.
        2. There are no borders or other box decorations (border radius, borders, outline, shadow etc.)
        3. The image has only a background color, and no background image.
        4. background-composite is set to source-over, and background-clip is anything apart from text.
        5. The port supports setContentsToBackgroundColor.

        This allows any implementation of GraphicsLayer that supports setContentsToBackgroundColor to avoid allocating a backing store
        for that layer, but instead draw that solid color directly.
        In addition to setting the background color, the layer's contentsRect needs to be adjusted, since the default contents rect of
        a layer is not always equivalent to the rect where the background is supposed to be painted, which is derived from the box's
        background-clip property.

        Reviewed by Simon Fraser.

        Tests: compositing/background-color/background-color-alpha.html
               compositing/background-color/background-color-change-to-text.html
               compositing/background-color/background-color-composite.html
               compositing/background-color/background-color-container.html
               compositing/background-color/background-color-content-clip.html
               compositing/background-color/background-color-padding-change.html
               compositing/background-color/background-color-padding-clip.html
               compositing/background-color/background-color-simple.html
               compositing/background-color/background-color-text-change.html
               compositing/background-color/background-color-text-clip.html

        * platform/graphics/GraphicsLayer.h:
        (WebCore::GraphicsLayer::supportsBackgroundColorContent):
            Allows different implementation of GraphicsLayer to identify whether they implement setContentsToBackgroundColor.
            Currently only the MAC implementation and TextureMapper falls under that category.

        * rendering/RenderBox.h:
        (WebCore::RenderBox::paddingBoxRect):
            Added paddingBoxRect to compliment borderBoxRect and contentsBoxRect. paddingBoxRect corresponds to 
            background-clip: padding.

        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::updateGraphicsLayerConfiguration):
            Update the background color if needed, for every configuration change.
            This should accomodate the old behavior for full-screen, while enabling background color changes for other layers.

        (WebCore::RenderLayerBacking::updateGraphicsLayerGeometry):
            Move the contentsRect logic to updateContentsRect.

        (WebCore::RenderLayerBacking::updateContentsRect):
            Use the background box when directly compositing backgrounds.

        (WebCore::RenderLayerBacking::updateBackgroundColor):
            Set the background color if applicable, otherwise set to trasnparent and clear.
            This was not needed in the past because background colors were only used for the special case of full-screen.

        (WebCore::supportsDirectBoxDecorationsComposition):
            Helper function to determine whether a particular background can be directly composited. Right now only 
            background color can be composited, and only if the GraphicsLayer implementation supports background colors.
            Also we don't yet support background-clip: text and any background-composite other than source-over.

        (WebCore::RenderLayerBacking::paintsBoxDecorations):
            Apply the new supportsDirectBoxDecorationsComposition logic.

        (WebCore::RenderLayerBacking::contentsBox):
            Remove unnecessary local variable.

        (WebCore::backgroundRectForBox):
        (WebCore::RenderLayerBacking::backgroundBox):
            Figure out the correct rect for the GraphicsLayer's contentsRect, based on the renderer's backgroundClip.
            The rectangle has to be adjusted based on the composited layer offset, and snapped to an IntRect as 
            GraphicsLayer::contentsRect expects snapped pixels.


2012-12-06  Ryosuke Niwa  <rniwa@webkit.org>

        Shrink the size of NodeRareData by moving pointers into separate objects
        https://bugs.webkit.org/show_bug.cgi?id=104312

        Reviewed by Andreas Kling.

        This patch does three things:
        1. Move ChildNodeList back into NodeListsNodeData.
        2. Move m_mutationObserverRegistry & m_transientMutationObserverRegistry into a separate object owned by NodeRareData.
        3. Move m_itemProp, m_itemRef, m_itemType & into a separate object owned by NodeRareData.

        Moving m_childNodeList from NodeRareData to NodeListsNodeData also has a nice side-effect of making ChildNodeList
        behave more like other LiveNodeLists.

        This patch also fixes Mac build when microdata is enabled.

        There should be no user-visible behavior change.

        * dom/ChildNodeList.cpp:
        (WebCore::ChildNodeList::~ChildNodeList):
        * dom/Node.cpp:
        (WebCore::Node::childNodes): Moved the code to create ChildNodeList into NodeListsNodeData to match other node lists.
        (WebCore::Node::invalidateNodeListCachesInAncestors):
        (WebCore): Removed removeCachedChildNodeList.
        * dom/Node.h:
        (Node):
        * dom/NodeRareData.cpp:
        (WebCore): Assert the size of NodeRareData at compilation time.
        (WebCore::NodeListsNodeData::reportMemoryUsage):
        (WebCore::NodeRareData::reportMemoryUsage):
        * dom/NodeRareData.h:
        (WebCore::NodeListsNodeData::clearChildNodeListCache): Moved from NodeRareData.
        (WebCore::NodeListsNodeData::ensureChildNodeList): Extracted from Node::childNodes.
        (WebCore::NodeListsNodeData::removeChildNodeList): Added.
        (WebCore::NodeListsNodeData::NodeListsNodeData): Initialize m_childNodeList.
        (WebCore::NodeRareData::NodeMutationObserverData): Extracted from NodeRareData.
        (WebCore::NodeRareData::NodeMutationObserverData::create):
        (WebCore::NodeRareData::NodeMicroDataTokenLists): Ditto.
        (WebCore::NodeRareData::NodeMicroDataTokenLists::create):
        (WebCore::NodeRareData::NodeRareData):
        (WebCore::NodeRareData::ensureNodeLists): Merged setNodeLists since it's not called elsewhere.
        (WebCore::NodeRareData::mutationObserverRegistry):
        (WebCore::NodeRareData::ensureMutationObserverRegistry): Added.
        (WebCore::NodeRareData::transientMutationObserverRegistry):
        (WebCore::NodeRareData::ensureTransientMutationObserverRegistry):
        (WebCore::NodeRareData::ensureMicroDataTokenLists):
        (NodeRareData):
        (WebCore::NodeRareData::itemProp):
        (WebCore::NodeRareData::setItemProp):
        (WebCore::NodeRareData::itemRef):
        (WebCore::NodeRareData::setItemRef):
        (WebCore::NodeRareData::itemType):
        (WebCore::NodeRareData::setItemType):
        * html/HTMLPropertiesCollection.cpp:
        (WebCore::HTMLPropertiesCollection::propertyNodeList): Renamed from namedItem since its return type, PropertyNodeList,
        is different from that, Node, of LiveNodeList::namedItem. It was shadowing the function name instead of overriding.
        * html/HTMLPropertiesCollection.h:
        (HTMLPropertiesCollection):
        * html/HTMLPropertiesCollection.idl:

2012-12-07  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r136993.
        http://trac.webkit.org/changeset/136993
        https://bugs.webkit.org/show_bug.cgi?id=104415

        This patch breaks the mac build (Requested by cabanier on
        #webkit).

        * html/HTMLCanvasElement.cpp:
        (WebCore::HTMLCanvasElement::paint):
        * platform/graphics/BitmapImage.h:
        * platform/graphics/CrossfadeGeneratedImage.cpp:
        (WebCore::CrossfadeGeneratedImage::draw):
        * platform/graphics/CrossfadeGeneratedImage.h:
        (CrossfadeGeneratedImage):
        * platform/graphics/GeneratedImage.h:
        (GeneratedImage):
        * platform/graphics/GeneratorGeneratedImage.cpp:
        (WebCore::GeneratorGeneratedImage::draw):
        * platform/graphics/GeneratorGeneratedImage.h:
        (GeneratorGeneratedImage):
        * platform/graphics/GraphicsContext.cpp:
        (WebCore::GraphicsContext::drawImage):
        (WebCore::GraphicsContext::drawImageBuffer):
        (WebCore::GraphicsContext::setCompositeOperation):
        * platform/graphics/GraphicsContext.h:
        (WebCore::GraphicsContextState::GraphicsContextState):
        (GraphicsContextState):
        (GraphicsContext):
        * platform/graphics/Image.cpp:
        (WebCore::Image::draw):
        (WebCore::Image::drawTiled):
        * platform/graphics/Image.h:
        (Image):
        * platform/graphics/ImageBuffer.h:
        (ImageBuffer):
        * platform/graphics/cairo/BitmapImageCairo.cpp:
        (WebCore::BitmapImage::draw):
        * platform/graphics/cairo/GraphicsContextCairo.cpp:
        (WebCore::GraphicsContext::setPlatformCompositeOperation):
        * platform/graphics/cairo/ImageBufferCairo.cpp:
        (WebCore::ImageBuffer::draw):
        * platform/graphics/cg/BitmapImageCG.cpp:
        (WebCore::BitmapImage::draw):
        * platform/graphics/cg/GraphicsContextCG.cpp:
        (WebCore::GraphicsContext::drawNativeImage):
        (WebCore::GraphicsContext::setPlatformCompositeOperation):
        * platform/graphics/cg/ImageBufferCG.cpp:
        (WebCore::ImageBuffer::draw):
        * platform/graphics/cg/PDFDocumentImage.cpp:
        (WebCore::PDFDocumentImage::draw):
        * platform/graphics/cg/PDFDocumentImage.h:
        (PDFDocumentImage):
        * platform/graphics/qt/GraphicsContextQt.cpp:
        (WebCore::GraphicsContext::setPlatformCompositeOperation):
        * platform/graphics/qt/ImageBufferQt.cpp:
        (WebCore::ImageBuffer::draw):
        * platform/graphics/qt/ImageQt.cpp:
        (WebCore::BitmapImage::draw):
        * platform/graphics/qt/StillImageQt.cpp:
        (WebCore::StillImage::draw):
        * platform/graphics/qt/StillImageQt.h:
        (StillImage):
        * platform/graphics/skia/BitmapImageSingleFrameSkia.h:
        (BitmapImageSingleFrameSkia):
        * platform/graphics/skia/GraphicsContextSkia.cpp:
        (WebCore::GraphicsContext::setPlatformCompositeOperation):
        * platform/graphics/skia/ImageBufferSkia.cpp:
        (WebCore::ImageBuffer::draw):
        * platform/graphics/skia/ImageSkia.cpp:
        (WebCore::BitmapImage::draw):
        (WebCore::BitmapImageSingleFrameSkia::draw):
        * platform/graphics/win/ImageCGWin.cpp:
        (WebCore::BitmapImage::getHBITMAPOfSize):
        (WebCore::BitmapImage::drawFrameMatchingSourceSize):
        * svg/graphics/SVGImage.cpp:
        (WebCore::SVGImage::drawSVGToImageBuffer):
        (WebCore::SVGImage::draw):
        (WebCore::SVGImage::nativeImageForCurrentFrame):
        * svg/graphics/SVGImage.h:
        (SVGImage):

2012-12-07  Alexey Proskuryakov  <ap@apple.com>

        There is no need to change cached resource storage policy through ResourceHandleClient
        https://bugs.webkit.org/show_bug.cgi?id=104413

        Reviewed by Brady Eidson.

        This code was only needed to prevent storing responses to disk in private browsing
        mode, but we now have a storage session to take care of that in a cleaner and more
        reliable way.

        * loader/ResourceLoader.cpp:
        * loader/ResourceLoader.h: (WebCore::ResourceLoader::receivedCancellation):
        * platform/network/ResourceHandleClient.h:
        * platform/network/cf/ResourceHandleCFNet.cpp: (WebCore::willCacheResponse):
        * platform/network/mac/ResourceHandleMac.mm:
        (-[WebCoreResourceHandleAsDelegate connection:willCacheResponse:]):

2012-12-07  Adam Klein  <adamk@chromium.org>

        MutationRecord addedNodes/removedNodes should never be null
        https://bugs.webkit.org/show_bug.cgi?id=98921

        Reviewed by Ryosuke Niwa.

        Per an update to the DOM4 spec that matches Gecko's behavior,
        addedNodes/removedNodes should be empty NodeLists on 'attributes'
        and 'characterData' records, rather than null.

        This is accomplished with lazy initialization of addedNodes/removedNodes
        attributes on 'attributes'/'characterData' records and the
        addition of a new StaticNodeList::createEmpty() factory method.

        * dom/MutationRecord.cpp:
        * dom/MutationRecord.h:
        (MutationRecord):
        * dom/StaticNodeList.h:
        (WebCore::StaticNodeList::adopt):
        (StaticNodeList):
        (WebCore::StaticNodeList::createEmpty):
        (WebCore::StaticNodeList::StaticNodeList):

2012-12-07  Brent Fulgham  <bfulgham@webkit.org>

        Unreviewed build correction after 136959.

        The initialization list should follow the same compiler macro
        exclusions as the class members.

        * inspector/InstrumentingAgents.h: Add USE(ACCELERATED_COMPOSITING)
          guards around m_inspectorLayerTreeAgent as this does not exist
          when the guard is false.

2012-12-07  Rik Cabanier  <cabanier@adobe.com>

        Extend platform layer so it can pass blend modes to the compositing calls
        https://bugs.webkit.org/show_bug.cgi?id=104176

        Reviewed by Dirk Schulze.

        Adding blend mode enumeration to drawImage functions + stored blendmode in graphics context 

        No new tests, no new functionality.

        * html/HTMLCanvasElement.cpp:
        (WebCore::HTMLCanvasElement::paint):
        * platform/graphics/BitmapImage.h:
        * platform/graphics/CrossfadeGeneratedImage.cpp:
        (WebCore::CrossfadeGeneratedImage::draw):
        * platform/graphics/CrossfadeGeneratedImage.h:
        (CrossfadeGeneratedImage):
        * platform/graphics/GeneratedImage.h:
        (GeneratedImage):
        * platform/graphics/GeneratorGeneratedImage.cpp:
        (WebCore::GeneratorGeneratedImage::draw):
        * platform/graphics/GeneratorGeneratedImage.h:
        (GeneratorGeneratedImage):
        * platform/graphics/GraphicsContext.cpp:
        (WebCore::GraphicsContext::drawImage):
        (WebCore):
        (WebCore::GraphicsContext::drawImageBuffer):
        (WebCore::GraphicsContext::setCompositeOperation):
        * platform/graphics/GraphicsContext.h:
        (WebCore::GraphicsContextState::GraphicsContextState):
        (GraphicsContextState):
        (GraphicsContext):
        * platform/graphics/Image.cpp:
        (WebCore::Image::draw):
        (WebCore::Image::drawTiled):
        * platform/graphics/Image.h:
        (Image):
        * platform/graphics/ImageBuffer.h:
        (ImageBuffer):
        * platform/graphics/cairo/BitmapImageCairo.cpp:
        (WebCore::BitmapImage::draw):
        * platform/graphics/cairo/GraphicsContextCairo.cpp:
        (WebCore::GraphicsContext::setPlatformCompositeOperation):
        * platform/graphics/cairo/ImageBufferCairo.cpp:
        (WebCore::ImageBuffer::draw):
        * platform/graphics/cg/BitmapImageCG.cpp:
        (WebCore::BitmapImage::draw):
        * platform/graphics/cg/GraphicsContextCG.cpp:
        (WebCore::GraphicsContext::drawNativeImage):
        (WebCore::GraphicsContext::setPlatformCompositeOperation):
        * platform/graphics/cg/ImageBufferCG.cpp:
        (WebCore::ImageBuffer::draw):
        * platform/graphics/cg/PDFDocumentImage.cpp:
        (WebCore::PDFDocumentImage::draw):
        * platform/graphics/cg/PDFDocumentImage.h:
        (PDFDocumentImage):
        * platform/graphics/qt/GraphicsContextQt.cpp:
        (WebCore::GraphicsContext::setPlatformCompositeOperation):
        * platform/graphics/qt/ImageBufferQt.cpp:
        (WebCore::ImageBuffer::draw):
        * platform/graphics/qt/ImageQt.cpp:
        (WebCore::BitmapImage::draw):
        * platform/graphics/qt/StillImageQt.cpp:
        (WebCore::StillImage::draw):
        * platform/graphics/qt/StillImageQt.h:
        (StillImage):
        * platform/graphics/skia/BitmapImageSingleFrameSkia.h:
        (BitmapImageSingleFrameSkia):
        * platform/graphics/skia/GraphicsContextSkia.cpp:
        (WebCore::GraphicsContext::setPlatformCompositeOperation):
        * platform/graphics/skia/ImageBufferSkia.cpp:
        (WebCore::ImageBuffer::draw):
        * platform/graphics/skia/ImageSkia.cpp:
        (WebCore::BitmapImage::draw):
        (WebCore::BitmapImageSingleFrameSkia::draw):
        * platform/graphics/win/ImageCGWin.cpp:
        (WebCore::BitmapImage::getHBITMAPOfSize):
        (WebCore::BitmapImage::drawFrameMatchingSourceSize):
        * svg/graphics/SVGImage.cpp:
        (WebCore::SVGImage::drawSVGToImageBuffer):
        (WebCore::SVGImage::draw):
        (WebCore::SVGImage::nativeImageForCurrentFrame):
        * svg/graphics/SVGImage.h:
        (SVGImage):

2012-12-07  Alec Flett  <alecflett@chromium.org>

        IndexedDB: propagate transaction_ids through open/upgradeneeded
        https://bugs.webkit.org/show_bug.cgi?id=103922

        Reviewed by Tony Chang.

        Make sure front-end is always generating the transaction id,
        so that it can be relied upon as an alternative to the
        to-be-deprecated IDBTransactionBackendInterface pointer.

        No new tests, this is one stage in a larger refactor.

        * Modules/indexeddb/IDBDatabaseBackendImpl.cpp:
        (WebCore::IDBDatabaseBackendImpl::VersionChangeOperation::create):
        (WebCore::IDBDatabaseBackendImpl::VersionChangeOperation::VersionChangeOperation):
        (IDBDatabaseBackendImpl::VersionChangeOperation):
        (WebCore::IDBDatabaseBackendImpl::PendingOpenCall::create):
        (WebCore::IDBDatabaseBackendImpl::PendingOpenCall::transactionId):
        (WebCore::IDBDatabaseBackendImpl::PendingOpenCall::PendingOpenCall):
        (IDBDatabaseBackendImpl::PendingOpenCall):
        (WebCore::IDBDatabaseBackendImpl::PendingOpenWithVersionCall::create):
        (WebCore::IDBDatabaseBackendImpl::PendingOpenWithVersionCall::transactionId):
        (WebCore::IDBDatabaseBackendImpl::PendingOpenWithVersionCall::PendingOpenWithVersionCall):
        (IDBDatabaseBackendImpl::PendingOpenWithVersionCall):
        (WebCore::IDBDatabaseBackendImpl::VersionChangeOperation::perform):
        (WebCore::IDBDatabaseBackendImpl::processPendingCalls):
        (WebCore::IDBDatabaseBackendImpl::createTransaction):
        (WebCore::IDBDatabaseBackendImpl::openConnection):
        (WebCore::IDBDatabaseBackendImpl::runIntVersionChangeTransaction):
        (WebCore::IDBDatabaseBackendImpl::openConnectionWithVersion):
        * Modules/indexeddb/IDBDatabaseBackendImpl.h:
        (IDBDatabaseBackendImpl):
        * Modules/indexeddb/IDBFactory.cpp:
        (WebCore::IDBFactory::openInternal):
        * Modules/indexeddb/IDBFactoryBackendImpl.cpp:
        (WebCore::IDBFactoryBackendImpl::open):

2012-12-07  Dima Gorbik  <dgorbik@apple.com>

        Implement general ::cue pseudo element for the <video>
        https://bugs.webkit.org/show_bug.cgi?id=104043

        Reviewed by Eric Carlson.

        Implemented the ::cue pseudo element to be able to style all WebVTT cues.
        Added the subcontainer with a '::cue' pseudoId in between the TextTrackContainerElement and WebVTT nodes to separate
        user agent default styles from user defined styles for the cue elements.

        Test: media/track/track-css-all-cues.html

        * css/CSSSelector.cpp: ::cue pseudo selector doesn't have a valid prefix but should be allowed in the user-agent stylesheet.
        (WebCore::CSSSelector::parsePseudoType):
        * html/shadow/MediaControlElements.cpp:
        (WebCore):
        (WebCore::MediaControlTextTrackContainerElement::createSubtrees): create a subcontainer and set its pseudoId to '::cue'.
        (WebCore::MediaControlTextTrackContainerElement::updateDisplay): append WebVTT nodes to the newly created subcontainer.
        * html/shadow/MediaControlElements.h:
        (MediaControlTextTrackContainerElement):
        * html/shadow/MediaControls.cpp:
        (WebCore::MediaControls::createTextTrackDisplay): initiate creating subtrees for the MediaControlTextTrackContainerElement.
        * html/shadow/MediaControlsChromium.cpp:
        (WebCore::MediaControlsChromium::createTextTrackDisplay):

2012-12-06  Geoffrey Garen  <ggaren@apple.com>

        Crash in JSC::Bindings::RootObject::globalObject() sync'ing notes in Evernote
        https://bugs.webkit.org/show_bug.cgi?id=104321
        <rdar://problem/12770497>

        Reviewed by Sam Weinig.

        Missed a null check.

        * bindings/objc/WebScriptObject.mm:
        (-[WebScriptObject JSObject]): If our root object has been cleared, don't
        try to dereference it. This happens in Evernote during tear-down.

        This matches the behavior of other methods in the same class.

        (_isSafeScript returns false if the root object has been cleared.)

        If we believe _isSafeScript is a good idea, it's probably the right test
        to use here (as opposed to just null-checking _rootObject) because this API
        gives the client unlimited access to the underlying JavaScript object.

2012-12-07  Stephen Chenney  <schenney@chromium.org>

        XMLSerializer is too aggressive in adding prefixes
        https://bugs.webkit.org/show_bug.cgi?id=104387

        Reviewed by Ryosuke Niwa.

        We have been adding "xlink:" and "xmlns:" and "xml:" prefixes to any
        attribute that is in one of those namespaces but which did not already
        have the matching prefix. This appears to be in error, at least
        compared to other browsers.

        The correct behavior appears to be to add the prefix only if there is
        no existing prefix. If there is an existing prefix, we now leave it alone.

        No new tests. Existing test expanded.

        * editing/MarkupAccumulator.cpp:
        (WebCore::MarkupAccumulator::appendAttribute): Only replace the prefix
        attribute name prefix if it is empty, and in one of the recognised
        namespaces.

2012-12-07  Jon Lee  <jonlee@apple.com>

        Display the auto-start label image after a delay
        https://bugs.webkit.org/show_bug.cgi?id=104173
        <rdar://problem/12820071>

        Reviewed by Dan Bernstein.

        Treat the button now as a label. Once the user has hovered over the plug-in, wait a little while before showing the label.

        * rendering/RenderSnapshottedPlugIn.h:
        (RenderSnapshottedPlugIn): Add a one-shot timer, and a variable representing whether the label should
        be drawn. Remove the variable that determines whether the label is active.

        * rendering/RenderSnapshottedPlugIn.cpp:
        (WebCore::RenderSnapshottedPlugIn::RenderSnapshottedPlugIn): Set the time to a delay of 1 second.
        (WebCore::RenderSnapshottedPlugIn::paintReplaced): Paint the label only when we should.
        (WebCore::RenderSnapshottedPlugIn::paintLabel): The label should only paint in its hovered state.
        (WebCore::startLabelImage): Renamed.
        (WebCore::RenderSnapshottedPlugIn::repaintLabel): Renamed.
        (WebCore::RenderSnapshottedPlugIn::hoverDelayTimerFired): Now that the timer has fired, we should paint
        the label. Repaint.
        (WebCore::RenderSnapshottedPlugIn::handleEvent): Update event handling. Click event handler is the
        same, except we move the label check inside so that if the click is not the left label we don't
        fall through to the other irrevelant if clauses.
            For the mouse down handler, make sure to check for the left label. If the hover timer is still running,
        stop it, so that we don't draw a label while the user is in the middle of a mouse gesture.
            Redo mouse over and out. On mouse over we start the delay timer. On mouse out we stop the delay timer
        if it is still running, reset state, and paint the label out.
        (WebCore::RenderSnapshottedPlugIn::layout): Refactor.

        * Resources/startButtonPressed.png: Removed.
        * Resources/startButtonPressed@2x.png: Removed.
        * WebCore.xcodeproj/project.pbxproj:

2012-12-07  Scott Violet  <sky@chromium.org>

        [chromium] Remove linux theme related files and switch to default
        https://bugs.webkit.org/show_bug.cgi?id=103897

        Reviewed by Dimitri Glazkov.

        Linux related theme files are now named Default.

        No new tests, code cleanup.

        * WebCore.gyp/WebCore.gyp: Update files
        * WebCore.gypi: Update files
        * platform/chromium/PlatformThemeChromiumLinux.cpp: Removed.
        * platform/chromium/PlatformThemeChromiumLinux.h: Removed.
        * platform/chromium/ScrollbarThemeChromiumLinux.cpp: Removed.
        * platform/chromium/ScrollbarThemeChromiumLinux.h: Removed.
        * rendering/RenderThemeChromiumAndroid.cpp:
        (WebCore::RenderThemeChromiumAndroid::extraDefaultStyleSheet): Linux->Default
        * rendering/RenderThemeChromiumAndroid.h: Change superclass
        * rendering/RenderThemeChromiumLinux.cpp: Removed.
        * rendering/RenderThemeChromiumLinux.h: Removed.

2012-12-07  Eric Carlson  <eric.carlson@apple.com>

        Captions menu doesn't update to track changes
        https://bugs.webkit.org/show_bug.cgi?id=104393

        Reviewed by Dean Jackson.

        Flag the captions menu as needing an update when tracks are added or removed. Don't actually
        change the menu until it needs to be displayed.

        No new tests, media/video-controls-captions-trackmenu.html was updated to test this.

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::addTextTrack): Call closedCaptionTracksChanged().
        (WebCore::HTMLMediaElement::didRemoveTrack): Ditto.
        (WebCore::HTMLMediaElement::configureTextTracks): Ditto.

        * html/shadow/MediaControlElements.cpp:
        (WebCore::MediaControlClosedCaptionsTrackListElement::MediaControlClosedCaptionsTrackListElement):
            Intialize m_trackListHasChanged.
        (WebCore::MediaControlClosedCaptionsTrackListElement::updateDisplay): Call rebuildTrackListMenu if
            the track list has changed.
        (WebCore::MediaControlClosedCaptionsTrackListElement::rebuildTrackListMenu): Renamed from resetTrackListMenu.
        * html/shadow/MediaControlElements.h:
        (WebCore::MediaControlClosedCaptionsTrackListElement::resetTrackListMenu): Just set m_trackListHasChanged.

        * html/shadow/MediaControls.h:
        (WebCore::MediaControls::closedCaptionTracksChanged): New, do nothing for base class.

        * html/shadow/MediaControlsApple.cpp:
        (WebCore::MediaControlsApple::toggleClosedCaptionTrackList): Update the track list before 
            showing it.
        (WebCore::MediaControlsApple::closedCaptionTracksChanged):
        * html/shadow/MediaControlsApple.h:

2012-12-07  Stephen White  <senorblanco@chromium.org>

        CSS url() filters with forward references don't work
        https://bugs.webkit.org/show_bug.cgi?id=90405

        Based on a patch by Keyar Hood.

        Reviewed by Dirk Schulze.

        In order for CSS to reference SVG filters that will occur later in
        the document, or will be added at a future time, we need a way to
        notify the target element (the one the filter style is applied to)
        when the correct SVG filter is added to the DOM.
        There is already code for SVG elements that handles this problem, in
        SVGResourcesCache. This patch allows any element to have a reference to
        an SVG element in SVGResourceCache.

        Tests: css3/filters/effect-reference-after.html
               css3/filters/effect-reference-delete-crash.html
               css3/filters/effect-reference-delete.html
               css3/filters/effect-reference-rename.html
               css3/filters/effect-reference-reset-style-delete-crash.html
               svg/filters/filter-cycle.html

        * dom/Element.cpp:
        (WebCore::Element::hasPendingResources): Added
        (WebCore::Element::setHasPendingResources): Added
        (WebCore::Element::clearHasPendingResources): Added
        * dom/Element.h:
        Accessors for ElementRareData's new bit flag.
        (WebCore::Element::buildPendingResource):
        Virtual function to override for referenced elements (moved from SVGElement).
        * dom/ElementRareData.h:
        (WebCore::ElementRareData::ElementRareData):
        Add a new bit flag to indicate whether the element depends on pending resources or not.
        * platform/graphics/texmap/TextureMapperImageBuffer.cpp:
        (WebCore::BitmapTextureImageBuffer::applyFilters):
        Changed to the new function signature for FilterEffectRenderer::build().
        * rendering/FilterEffectRenderer.cpp:
        (WebCore::FilterEffectRenderer::buildReferenceFilter):
        Changed signature to accept a RenderObject rather than a Document, so we know which node to notify when the SVG filter arrives.  If the referenced filter cannot be found, add its id as a pending reference.
        (WebCore::FilterEffectRenderer::build):
        Changed signature to accept a RenderObject rather than a Document, so we know which node to notify when the SVG filter arrives.
        * rendering/FilterEffectRenderer.h:
        Change to signatures of build() and buildReferenceFilter() to pass
        a RenderObject instead of a Document.
        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::updateOrRemoveFilterEffectRenderer):
        Use the new semantics for FilterEffectRenderer::build().
        * rendering/RenderObject.cpp:
        (WebCore::RenderObject::willBeDestroyed):
        Notify the cache if a RenderObject is destroyed.
        * rendering/svg/RenderSVGResourceContainer.cpp:
        (WebCore::RenderSVGResourceContainer::registerResource):
        Call clearHasPendingResourceIfPossible on the SVGDocumentExtensions, not
        on the element, since we want to support generic Elements.
        * rendering/svg/SVGResources.cpp:
        (WebCore::SVGResources::buildCachedResources):
        Add support for building filters on non-SVG elements.
        * rendering/svg/SVGResourcesCache.cpp:
        (WebCore::SVGResourcesCache::addResourcesFromRenderObject):
        Do cycle detection only on SVG elements.
        (WebCore::SVGResourcesCache::clientStyleChanged):
        For non-SVG elements, set a synthetic style change when parent resources
        are invalidated.
        (WebCore::SVGResourcesCache::resourceDestroyed):
        Add support for non-SVG Elements.
        * svg/SVGDocumentExtensions.cpp:
        (WebCore::SVGDocumentExtensions::addPendingResource):
        (WebCore::SVGDocumentExtensions::isElementPendingResources):
        (WebCore::SVGDocumentExtensions::isElementPendingResource):
        (WebCore::SVGDocumentExtensions::removeElementFromPendingResources):
        (WebCore::SVGDocumentExtensions::removeElementFromPendingResourcesForRemoval):
        Changed to allow use of Element instead of SVGElement.
        (WebCore::SVGDocumentExtensions::clearHasPendingResourcesIfPossible):
        Moved from SVGElement, and made to work on any Element.  This way,
        we avoid adding this function to Element itself.
        * svg/SVGDocumentExtensions.h:
        SVGElement -> Element.
        * svg/SVGElement.cpp:
        * svg/SVGElement.h:
        All functions moved to Element, except for clearHasPendingResourcesIfPossible() moved to SVGDocumentExtensions.
        * svg/SVGElementRareData.h:
        (WebCore::SVGElementRareData::SVGElementRareData):
        m_hasPendingResources add accessors moved to ElementRareData.
        * svg/SVGStyledElement.cpp:
        (WebCore::SVGStyledElement::buildPendingResourcesIfNeeded):
        SVGElement -> Element, and call SVGDocumentExtensions for
        clearHasPendingResourcesIfPossible().

2012-12-07  Eberhard Graether  <egraether@google.com>

        Web Inspector: Add shortcut to set visibility:hidden on elements in the ElementsPanel
        https://bugs.webkit.org/show_bug.cgi?id=104146

        Reviewed by Pavel Feldman.

        This change adds the shortcut H to set and unset visibility:hidden on the inline style
        of elements in the Elementspanel. This feature makes it easier to look for elements that
        cause bad rendering performance, because visibility:hidden does not paint the element,
        but preserves the layout.

        No new tests.

        * English.lproj/localizedStrings.js:
        * inspector/front-end/CSSStyleModel.js:
        (WebInspector.CSSStyleModel.prototype.toggleInlineVisibility):
        * inspector/front-end/ElementsPanelDescriptor.js:
        (WebInspector.ElementsPanelDescriptor.prototype.registerShortcuts):
        * inspector/front-end/ElementsTreeOutline.js:
        (WebInspector.ElementsTreeOutline.prototype.handleShortcut):
        * inspector/front-end/KeyboardShortcut.js:

2012-12-07  Andreas Kling  <akling@apple.com>

        Improve our decoded data size estimation for style sheets.
        <http://webkit.org/b/104388>

        Reviewed by Antti Koivisto.

        Tweak how we estimate the total decoded size of a given style sheet. (We were guessing at about 30% of actual size.)
        This is just used as a hint to the WebCore cache.

        * css/StylePropertySet.cpp:
        (WebCore::StylePropertySet::averageSizeInBytes):
        * css/StyleRule.cpp:
        (WebCore::StyleRule::averageSizeInBytes):

2012-12-07  Robert Hogan  <robert@webkit.org>

        REGRESSION(r127163): Content is offset to the right at rea.ru
        https://bugs.webkit.org/show_bug.cgi?id=103116

        Reviewed by David Hyatt.

        The top margin edge of a self-collapsing block that clears a float intrudes up into it by the height of the margin,
        so to ensure any child floats of the self-collapsing block only go as far as the top content edge 
        add the margin back in to the block's current height before placing them.

        Tests: fast/block/margin-collapse/self-collapsing-block-with-float-child-collapsed-margins.html
               fast/block/margin-collapse/self-collapsing-block-with-float-child.html

        * rendering/RenderBlockLineLayout.cpp:
        (WebCore::RenderBlock::LineBreaker::skipLeadingWhitespace):

2012-12-07  Alexis Menard  <alexis@webkit.org>

        Improve r136754 by hardening checks of expected values for background-position.
        https://bugs.webkit.org/show_bug.cgi?id=104380

        Reviewed by Antti Koivisto.

        r136754 was landed to fix the problem of checking successively two calc
        values with validUnit. It was asserting as validUnit expect you to use
        the parsed value of the calc after the call. In this case we pre-check the
        background-position longhand to count how many values it has to then
        call the right parsing functions accordingly. While r136754 is not
        wrong it is better to harden isPotentialPositionValue with the real
        expected units and keywords. For this matter we can reuse the
        ReleaseParsedCalcValueCondition enum which was created with the same
        idea as this patch. If you are not interested of the calc parsed
        value when calling validUnit() you can now specify it, I believe it is
        good to have it explicit to avoid mistake in the future.

        No new tests : this is covered by css3/*, fast/backgrounds/*.

        * css/CSSParser.cpp:
        (WebCore::CSSParser::validCalculationUnit):
        (WebCore::CSSParser::validUnit):
        (WebCore::CSSParser::isPotentialPositionValue):
        * css/CSSParser.h:
        (WebCore::CSSParser::validUnit):
        (CSSParser):

2012-12-07  Brent Fulgham  <bfulgham@webkit.org>

        Remove unnecessary casts in transformations.
        https://bugs.webkit.org/show_bug.cgi?id=104376

        Reviewed by Simon Fraser.

        Several casts from float-to-double are performed prior to
        storing the result in a double type. These casts are unnecessary
        overhead and reduce the clarity of the source code.

        No new tests. Covered by existing CSS test cases.

        * platform/graphics/transforms/RotateTransformOperation.cpp:
        * platform/graphics/transforms/TransformationMatrix.cpp:

2012-12-07  Antoine Quint  <graouts@apple.com>

        Provide the backend for exposing the layer tree to the Web Inspector
        https://bugs.webkit.org/show_bug.cgi?id=103513

        Reviewed by Pavel Feldman.

        The purpose of this patch is to provide a new agent enabling the Web Inspector to interface
        with WebCore to access information about the render layer tree and, more specifically, expose
        useful information about layers backed by textures composited on the GPU such as metrics and
        backing store. Thus we now provide a LayerTreeAgent which will inform the front-end of 
        changes to the render layer tree via a new layerTreeDidChange event, providing an object
        containing the entire hierarchy of RenderLayers for the inspected document. This hierarchy 
        can be queried at any time using the .getLayerTree() method on the LayerTreeAgent. Finally, 
        the LayerTreeAgent also exposes a .nodeIdForLayerId() method allowing to get the id of the 
        node associated with the RenderLayer with the provided layer id.
        
        In terms of implementation, RenderLayerCompositor has been changed such that in its 
        updateCompositingLayers() method we call the layerTreeDidChange method on the 
        InspectorLayerTreeAgent instance via the InspectorInstrumentation.

        Test: inspector-protocol/layer-tree.html

        * CMakeLists.txt:
        * GNUmakefile.list.am:
        * Target.pri:
        * WebCore.gypi:
        * WebCore.vcproj/WebCore.vcproj:
        * WebCore.xcodeproj/project.pbxproj:
        * inspector/Inspector.json: Define new types IntRect (x, y, width, height) and Layer, which 
        holds the information for a RenderLayer (layerId, bounds, isComposited, memory, 
        compositedBounds) and its children (childLayers). We also define the methods of the 
        LayerTreeAgent object (enable, disable, getLayerTree, nodeIdForLayerId) and the 
        layerTreeDidChange event it  
        fires.
        * inspector/InspectorAllInOne.cpp:
        * inspector/InspectorController.cpp:
        (WebCore::InspectorController::InspectorController):
        * inspector/InspectorDOMAgent.cpp:
        (WebCore::InspectorDOMAgent::pushNodePathForRenderLayerToFrontend): New method facilitating 
        pushing the node associated with a given RenderLayer to the front-end.
        (WebCore):
        * inspector/InspectorDOMAgent.h:
        (InspectorDOMAgent):
        * inspector/InspectorInstrumentation.cpp:
        (WebCore):
        (WebCore::InspectorInstrumentation::didCommitLoadImpl):
        (WebCore::InspectorInstrumentation::layerTreeDidChangeImpl):
        (WebCore::InspectorInstrumentation::renderLayerDestroyedImpl):
        * inspector/InspectorInstrumentation.h:
        (WebCore):
        (InspectorInstrumentation):
        (WebCore::InspectorInstrumentation::layerTreeDidChange):
        (WebCore::InspectorInstrumentation::renderLayerDestroyed):
        * inspector/InspectorLayerTreeAgent.cpp: Added.
        (WebCore):
        (LayerTreeAgentState):
        (WebCore::InspectorLayerTreeAgent::InspectorLayerTreeAgent):
        (WebCore::InspectorLayerTreeAgent::~InspectorLayerTreeAgent):
        (WebCore::InspectorLayerTreeAgent::setFrontend):
        (WebCore::InspectorLayerTreeAgent::clearFrontend):
        (WebCore::InspectorLayerTreeAgent::restore):
        (WebCore::InspectorLayerTreeAgent::reset):
        (WebCore::InspectorLayerTreeAgent::enable):
        (WebCore::InspectorLayerTreeAgent::disable):
        (WebCore::InspectorLayerTreeAgent::layerTreeDidChange):
        (WebCore::InspectorLayerTreeAgent::renderLayerDestroyed):
        (WebCore::InspectorLayerTreeAgent::getLayerTree):
        (WebCore::InspectorLayerTreeAgent::buildObjectForRootLayer):
        (WebCore::InspectorLayerTreeAgent::buildObjectForLayer): Build the entire hierarchy of 
        RenderLayers from the provided RenderLayer.
        (WebCore::InspectorLayerTreeAgent::buildObjectForIntRect):
        (WebCore::InspectorLayerTreeAgent::bind):
        (WebCore::InspectorLayerTreeAgent::unbind):
        (WebCore::InspectorLayerTreeAgent::nodeIdForLayerId):
        * inspector/InspectorLayerTreeAgent.h: Added.
        (WebCore):
        (InspectorLayerTreeAgent):
        (WebCore::InspectorLayerTreeAgent::create):
        * inspector/InstrumentingAgents.h:
        (WebCore):
        (WebCore::InstrumentingAgents::InstrumentingAgents):
        (InstrumentingAgents):
        (WebCore::InstrumentingAgents::inspectorLayerTreeAgent):
        (WebCore::InstrumentingAgents::setInspectorLayerTreeAgent):
        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::updateCompositingLayers): Call the layerTreeDidChange method 
        on the LayerTreeAgent via the InspectorInstrumentation to inform the front-end that the 
        RenderLayer hierarchy has changed.
        (WebCore):
        (WebCore::RenderLayerCompositor::layerBecameNonComposited): Call the renderLayerDestroyed 
        method on the LayerTreeAgent via the InspectorInstrumentation to unbind the layer that is 
        being destroyed.
        * rendering/RenderLayerCompositor.h:
        (RenderLayerCompositor):

2012-12-07  Joshua Bell  <jsbell@chromium.org>

        IndexedDB: Check SSV version when opening database
        https://bugs.webkit.org/show_bug.cgi?id=102243

        Reviewed by Tony Chang.

        Ensure that the data format (SerializedScriptValue) isn't "from the future" when opening
        a backing store. Treat an unknown version the same as an unknown schema version.

        Chromium-side test at https://codereview.chromium.org/11470013/ (same as other schema version tests)

        * Modules/indexeddb/IDBBackingStore.cpp:
        (WebCore):
        (WebCore::isSchemaKnown): Check data version as well.
        (WebCore::setUpMetadata): Ensure data version is recorded; bump schema version.
        * Modules/indexeddb/IDBLevelDBCoding.cpp: Encoding for "DataVersion" global metadata entry.
        (IDBLevelDBCoding):
        (WebCore::IDBLevelDBCoding::compare):
        (WebCore::IDBLevelDBCoding::DataVersionKey::encode):
        * Modules/indexeddb/IDBLevelDBCoding.h:
        (DataVersionKey):
        (IDBLevelDBCoding):
        * bindings/js/SerializedScriptValue.cpp:
        (SerializedScriptValue::wireFormatVersion): New method (JSC side).
        * bindings/js/SerializedScriptValue.h:
        * bindings/v8/SerializedScriptValue.cpp:
        (WebCore::SerializedScriptValue::wireFormatVersion): New method (V8 side).
        (WebCore):
        * bindings/v8/SerializedScriptValue.h:
        (SerializedScriptValue):

2012-12-07  Andreas Kling  <akling@apple.com>

        Throw away StyleResolvers that haven't been used for a long time.
        <http://webkit.org/b/104314>

        Reviewed by Antti Koivisto.

        A lot of memory gets tied up in StyleResolver and the structures and caches that hang from it.
        Add a mechanism to throw it away after it's been unused for a while (1 minute.)
        This frees up large amounts of memory on inactive pages (background tabs) and static content.

        We already have a number of scenarios where the document style is invalidated by throwing away
        the StyleResolver so the major code paths are prepared for having a null StyleResolver* on occasion.

        ~20MB progression on Membuster3.

        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::styleForElement):
        (WebCore::StyleResolver::styleForKeyframe):
        (WebCore::StyleResolver::pseudoStyleForElement):
        (WebCore::StyleResolver::styleForPage):

            Call document()->didAccessStyleResolver() from the relevant parts of StyleResolver's public API.
            This prevents Document from throwing the StyleResolver away for 1 minute after it's used.

        * dom/Document.h:
        * dom/Document.cpp:
        (WebCore::Document::Document):
        (WebCore::Document::createStyleResolver):
        (WebCore::Document::didAccessStyleResolver):
        (WebCore::Document::styleResolverThrowawayTimerFired):

            Add a mechanism to call clearStyleResolver() on a refreshing timer.

        * dom/Element.cpp:
        (WebCore::Element::attributeChanged):

            If an attribute change occurs while the document doesn't have a StyleResolver, dirty the element style
            since we can't be sure that the attribute change didn't affect any rules.

2012-12-07  Antonio Gomes  <a1.gomes@sisa.samsung.com>

        REGRESSION(r136947): Made two tests fail on all platforms (Requested by tonikitoo-ll on #webkit).
        https://bugs.webkit.org/show_bug.cgi?id=104368

        Unreviewed partial rollout.

        r136947 was too aggressive in the sense of fixing RenderBox::canBeScrolledAndHasScrollableArea
        as part of itself. Revert the related changes in order to fix both
        fast/events/autoscroll-should-not-stop-on-keypress.html and
        fast/events/autoscroll-in-textfield.html

        * rendering/RenderBox.cpp:
        (WebCore::RenderBox::canBeScrolledAndHasScrollableArea):
        * rendering/RenderBox.h:

2012-12-07  Allan Sandfeld Jensen  <allan.jensen@digia.com>

        [TexMap] Can not do multiple accelerated animations
        https://bugs.webkit.org/show_bug.cgi?id=104364

        Reviewed by Kenneth Rohde Christiansen.

        By removing all animations with the same name, it is not possible to animate more than one property accelerated. 
        Instead only remove any animations with both same name and property.

        Covered by animations/opacity-transform-animation.html.

        * platform/graphics/GraphicsLayerAnimation.cpp:
        (WebCore::GraphicsLayerAnimations::add):
        (WebCore::GraphicsLayerAnimations::remove):
        * platform/graphics/GraphicsLayerAnimation.h:
        (GraphicsLayerAnimations):

2012-12-07  Sujin Park  <sujjin.park@gmail.com>

        [EFL] Fix build warning in StyleResolver.cpp using gcc 4.7.2
        https://bugs.webkit.org/show_bug.cgi?id=104262

        Reviewed by Alexis Menard.

        EFL port treats build warning as compile error and there are
        maybe-uninitialized when building with gcc 4.7.2.
        This patch adds default case to resolve a build break.

        * css/StyleResolver.cpp:
        (WebCore::getFontAndGlyphOrientation):

2012-12-06  Alexander Pavlov  <apavlov@chromium.org>

        Web Inspector: [Chromium] Ctrl + ']' "Goto right panel" keyboard shortcut doesn't work
        https://bugs.webkit.org/show_bug.cgi?id=104250

        Reviewed by Pavel Feldman.

        Ignore "keypress" event resulting from a WM_CHAR message emitted by Win7 upon Ctrl + ']' keypress.

        * inspector/front-end/InspectorView.js:
        (WebInspector.InspectorView.prototype._keyPress): Ignore all events with charCode < 32.

2012-10-03  Pavel Feldman  <pfeldman@chromium.org>

        Web Inspector: provide a way to reload page with given script preprocessor.
        https://bugs.webkit.org/show_bug.cgi?id=80992

        Reviewed by Yury Semikhatsky.

        This change introduces a way to inject 'preprocessor' script that would process
        each JavaScript file before it gets into the VM for compilation. That way inspector
        can expose capabilities such as assessing code coverage or tracing all the calls.

        Preprocessor script is stored in the page agent where it waits for reload to happen.
        Upon reload, ScriptDebugServer is using it to patch the script sources.

        
        Test: inspector/debugger/debugger-script-preprocessor.html

        * bindings/js/ScriptDebugServer.h:
        (WebCore::ScriptDebugServer::setScriptPreprocessor):
        (ScriptDebugServer):
        * bindings/v8/DebuggerScript.js:
        * bindings/v8/ScriptDebugServer.cpp:
        (ScriptDebugServer::ScriptPreprocessor):
        (WebCore::ScriptDebugServer::ScriptPreprocessor::ScriptPreprocessor):
        (WebCore::ScriptDebugServer::ScriptPreprocessor::preprocessSourceCode):
        (WebCore::ScriptDebugServer::ScriptPreprocessor::~ScriptPreprocessor):
        (WebCore):
        (WebCore::ScriptDebugServer::~ScriptDebugServer):
        (WebCore::ScriptDebugServer::setScriptSource):
        (WebCore::ScriptDebugServer::setScriptPreprocessor):
        (WebCore::ScriptDebugServer::handleV8DebugEvent):
        * bindings/v8/ScriptDebugServer.h:
        (ScriptDebugServer):
        * bindings/v8/custom/V8InjectedScriptManager.cpp:
        (WebCore::InjectedScriptManager::createInjectedScript):
        * inspector/Inspector.json:
        * inspector/InspectorController.cpp:
        (WebCore::InspectorController::InspectorController):
        * inspector/InspectorDebuggerAgent.h:
        (InspectorDebuggerAgent):
        * inspector/InspectorPageAgent.cpp:
        (WebCore::InspectorPageAgent::reload):
        (WebCore::InspectorPageAgent::frameNavigated):
        * inspector/InspectorPageAgent.h:
        (WebCore::InspectorPageAgent::page):
        (WebCore::InspectorPageAgent::scriptPreprocessor):
        (InspectorPageAgent):
        * inspector/PageDebuggerAgent.cpp:
        (WebCore::PageDebuggerAgent::create):
        (WebCore::PageDebuggerAgent::PageDebuggerAgent):
        (WebCore::PageDebuggerAgent::startListeningScriptDebugServer):
        (WebCore::PageDebuggerAgent::stopListeningScriptDebugServer):
        (WebCore::PageDebuggerAgent::injectedScriptForEval):
        (WebCore::PageDebuggerAgent::didClearMainFrameWindowObject):
        (WebCore):
        * inspector/PageDebuggerAgent.h:
        (WebCore):
        (PageDebuggerAgent):

2012-12-07  Alexander Pavlov  <apavlov@chromium.org>

        Web Inspector: the "Sources" column is always empty in CSS selector profiles
        https://bugs.webkit.org/show_bug.cgi?id=104225

        Reviewed by Pavel Feldman.

        r112923 and preceding changesets modified the CSSOM wrapper creation for StyleRules in a way
        that would not specify the parent CSSStyleSheet for the CSSStyleRules created. Instead,
        styleResolver->ensureFullCSSOMWrapperForInspector(rule) is now used to make sure the CSSStyleRule
        has a valid parent CSSStyleSheet.

        Test: inspector/profiler/selector-profiler-url.html

        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::collectMatchingRulesForList):
        (WebCore::StyleResolver::applyProperties):
        * inspector/InspectorInstrumentation.cpp:
        (WebCore):
        (WebCore::InspectorInstrumentation::willMatchRuleImpl):
        (WebCore::InspectorInstrumentation::willProcessRuleImpl):
        * inspector/InspectorInstrumentation.h:
        (WebCore):
        (InspectorInstrumentation):
        (WebCore::InspectorInstrumentation::willMatchRule):
        (WebCore::InspectorInstrumentation::willProcessRule):

2012-12-05  Antonio Gomes  <a1.gomes@sisa.samsung.com>

        Rework bug 97927 to not depend on RenderLayer::allowsScrolling
        https://bugs.webkit.org/show_bug.cgi?id=103999

        Reviewed by James Robinson.

        Patch makes it possible for methods like
        RenderLayer::{updateScrollbarsAfterLayout,updateScrollbarsAfterStyleChange}
        to not depend on RenderLayer::allowsScrolling to determine if a layer should
        be added or removed from its FrameView's ScrollableArea set.

        Following the same logic, the patch also fixes RenderBox::canBeScrolledAndHasScrollableArea
        method to take into account the box' scroll allowance in a given direction only
        when it overflows. This allows simplifying custom methods like InRegionScrollerPrivate::canScrollRenderBox
        (@WebKit/blackberry/Api/InRegionScroller.cpp).

        The naming pattern for the newly added methods were chosen to keep the consistency
        with the existing ones, in the same class.

        No new test: it is already covered by ScrollingCoordinatorChromiumTest.clippedBodyTest.

        * rendering/RenderBox.cpp:
        (WebCore::RenderBox::canBeScrolledAndHasScrollableArea):
        * rendering/RenderBox.h:
        (RenderBox):
        (WebCore::RenderBox::hasScrollableOverflowX):
        (WebCore::RenderBox::hasScrollableOverflowY):
        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::hasScrollableHorizontalOverflow):
        (WebCore):
        (WebCore::RenderLayer::hasScrollableVerticalOverflow):
        (WebCore::RenderLayer::updateScrollbarsAfterLayout):
        (WebCore::RenderLayer::updateScrollbarsAfterStyleChange):
        * rendering/RenderLayer.h:
        (RenderLayer):

2012-12-07  Max Feil  <mfeil@rim.com>

        [BlackBerry] make "isVideo" information available to platform media player
        https://bugs.webkit.org/show_bug.cgi?id=104334

        Reviewed by Rob Buis.

        The platform player needs to know whether the element is <video>
        or <audio>, so it can make certain decisions before metadata
        is ready. This is part of a performance optimization refactor
        which does not change functionality so no new tests are required.

        * platform/graphics/blackberry/MediaPlayerPrivateBlackBerry.cpp:
        (WebCore::MediaPlayerPrivate::load):

2012-12-07  Kondapally Kalyan  <kalyan.kondapally@intel.com>

        [EFL] [AC] Implement ImageExtractor::extractImage in GraphicsContext3DEfl.
        https://bugs.webkit.org/show_bug.cgi?id=104271.

        Reviewed by Kenneth Rohde Christiansen.

        This patch implements ImageExtractor::extractImage in GraphicsContext3DEfl.

        Covered by existing tests.

        * platform/graphics/efl/GraphicsContext3DEfl.cpp:
        (WebCore::GraphicsContext3D::ImageExtractor::~ImageExtractor):
        (WebCore::GraphicsContext3D::ImageExtractor::extractImage):

2012-12-06  Carlos Garcia Campos  <cgarcia@igalia.com>

        Use always the order iterator from data member in RenderFlexibleBox
        https://bugs.webkit.org/show_bug.cgi?id=104112

        Reviewed by Tony Chang.

        Some methods receive it as parameter and others use the data
        member.

        * rendering/RenderFlexibleBox.cpp:
        (WebCore::RenderFlexibleBox::layoutBlock):
        (WebCore::RenderFlexibleBox::repositionLogicalHeightDependentFlexItems):
        (WebCore::RenderFlexibleBox::layoutFlexItems):
        (WebCore::RenderFlexibleBox::computeNextFlexLine):
        (WebCore::RenderFlexibleBox::alignFlexLines):
        (WebCore::RenderFlexibleBox::alignChildren):
        (WebCore::RenderFlexibleBox::flipForRightToLeftColumn):
        (WebCore::RenderFlexibleBox::flipForWrapReverse):
        * rendering/RenderFlexibleBox.h:

2012-12-07  Kent Tamura  <tkent@chromium.org>

        Improve confusing code in BaseMultipleFieldsDateAndTimeInputType
        https://bugs.webkit.org/show_bug.cgi?id=104353

        Reviewed by Kentaro Hara.

        This doesn't change any behavior because call sites of
        isEditControlOwnerDisabled and isEditControlOwnerReadOnly treat them
        similarly.

        * html/BaseMultipleFieldsDateAndTimeInputType.cpp:
        (WebCore::BaseMultipleFieldsDateAndTimeInputType::isEditControlOwnerDisabled):
        Checks element()->disabled, not readOnly.
        (WebCore::BaseMultipleFieldsDateAndTimeInputType::isEditControlOwnerReadOnly):
        Checks element()->readOnly, not disabled.

2012-12-07  Jon Lee  <jonlee@apple.com>

        Build fix.

        * plugins/PlugInOriginHash.cpp:
        (WebCore::PlugInOriginHash::hash):

2012-12-04  Jon Lee  <jonlee@apple.com>

        Add PlugInOriginHash
        https://bugs.webkit.org/show_bug.cgi?id=103655
        <rdar://problem/12778949>

        Reviewed by Alexey Proskuryakov.

        Add the concept of plug-in origin hashes, which are based on a combination of the base domains of the
        page's main frame and the plug-in, and the plug-in MIME type.

        * plugins/PlugInOriginHash.cpp: Added.
        (WebCore::addCaseFoldedCharacters): Add the case-folded string to the hash.
        (WebCore::PlugInOriginHash::hash): The hash is based on the concatenation of the page's host, the plug-in
        URL's host, and the MIME type. We use StringHasher to get all 32-bits of the hash, since using StringImpl's hash
        masks out 8 of the hash bits to make room for bit flags.
        * plugins/PlugInOriginHash.h: Added.

        * CMakeLists.txt:
        * GNUmakefile.list.am:
        * Target.pri:
        * WebCore.gypi:
        * WebCore.vcproj/WebCore.vcproj:
        * WebCore.xcodeproj/project.pbxproj:

2012-12-06  Kent Tamura  <tkent@chromium.org>

        Refactoring: Clean up placeholder attribute usage
        https://bugs.webkit.org/show_bug.cgi?id=104337

        Reviewed by Kentaro Hara.

        No new tests. This doesn't change any behavior.

        * html/HTMLInputElement.cpp: Remove placeholder and setPlacehodler.
        * html/HTMLInputElement.h: Ditto.
        * html/HTMLTextFormControlElement.cpp:
        (WebCore::HTMLTextFormControlElement::strippedPlaceholder):
        We can use fastGetAttribute for placeholder.
        (WebCore::HTMLTextFormControlElement::isPlaceholderEmpty):
        Ditto.

2012-12-06  Kent Tamura  <tkent@chromium.org>

        Refactoring: Rename HTMLFormControlElement::required to isRequired
        https://bugs.webkit.org/show_bug.cgi?id=104336

        Reviewed by Kentaro Hara.

        m_required should be m_isRequired, and required() should be
        isRequired. It's safe to rename them because HTML*Element::required IDL
        attributes are [Reflected].
        http://www.webkit.org/coding/coding-style.html#names-bool

        * accessibility/AccessibilityNodeObject.cpp:
        (WebCore::AccessibilityNodeObject::isRequired):
        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::canShareStyleWithControl):
        * dom/CheckedRadioButtons.cpp:
        (WebCore::RadioButtonGroup::add):
        (WebCore::RadioButtonGroup::requiredAttributeChanged):
        (WebCore::RadioButtonGroup::remove):
        * html/CheckboxInputType.cpp:
        (WebCore::CheckboxInputType::valueMissing):
        * html/FileInputType.cpp:
        (WebCore::FileInputType::valueMissing):
        * html/HTMLFormControlElement.cpp:
        (WebCore::HTMLFormControlElement::HTMLFormControlElement):
        (WebCore::HTMLFormControlElement::parseAttribute):
        (WebCore::HTMLFormControlElement::isRequired):
        * html/HTMLFormControlElement.h:
        (HTMLFormControlElement):
        * html/HTMLInputElement.cpp:
        (WebCore::HTMLInputElement::isRequiredFormControl):
        (WebCore::HTMLInputElement::setupDateTimeChooserParameters):
        * html/HTMLSelectElement.cpp:
        (WebCore::HTMLSelectElement::valueMissing):
        (WebCore::HTMLSelectElement::isRequiredFormControl):
        * html/HTMLTextAreaElement.h:
        (WebCore::HTMLTextAreaElement::isRequiredFormControl):
        * html/TextFieldInputType.cpp:
        (WebCore::TextFieldInputType::valueMissing):

2012-12-06  Hajime Morrita  <morrita@google.com>

        [Shadow DOM] Implement Element::shadowRoot with prefix
        https://bugs.webkit.org/show_bug.cgi?id=102912

        Reviewed by Dimitri Glazkov.

        - Added Element::shadowRoot() which return the youngest author shadow root.
        - Renamed existing Node::shadowRoot() to containingShadowRoot() to avoid name shadowing.
          The name shadowRoot() is confusing anyway so this is good opportunity to rename it.

        Test: fast/dom/shadow/shadow-aware-shadow-root.html

        * css/SelectorChecker.cpp:
        (WebCore::SelectorChecker::checkSelector):
        * css/StyleScopeResolver.cpp:
        (WebCore::StyleScopeResolver::scopeFor):
        (WebCore::StyleScopeResolver::addHostRule):
        * dom/Element.cpp:
        (WebCore::Element::shadowRoot):
        (WebCore):
        * dom/Element.h:
        (Element):
        * dom/Element.idl:
        * dom/ElementShadow.cpp:
        (WebCore::ElementShadow::setShouldCollectSelectFeatureSet):
        * dom/Node.cpp:
        (WebCore::Node::rendererIsEditable):
        (WebCore::Node::shadowHost):
        (WebCore::Node::shadowAncestorNode):
        (WebCore::Node::containingShadowRoot):
        * dom/Node.h:
        (Node):
        * dom/Range.cpp:
        (WebCore::Range::shadowRoot):
        * dom/ShadowRoot.cpp:
        (WebCore::ShadowRoot::insertedInto):
        (WebCore::ShadowRoot::removedFrom):
        * dom/ShadowRoot.h:
        (WebCore::ShadowRoot::isAccessible):
        * editing/TextIterator.cpp:
        (WebCore::TextIterator::handleReplacedElement):
        * editing/htmlediting.cpp:
        (WebCore::indexForVisiblePosition):
        * html/HTMLStyleElement.cpp:
        (WebCore::HTMLStyleElement::scopedAttributeChanged):
        (WebCore::HTMLStyleElement::registerWithScopingNode):
        (WebCore::HTMLStyleElement::removedFrom):
        * html/shadow/ContentDistributor.cpp:
        (WebCore::ContentDistributor::distribute):
        * html/shadow/HTMLContentElement.cpp:
        (WebCore::HTMLContentElement::parseAttribute):
        (WebCore::HTMLContentElement::insertedInto):
        (WebCore::HTMLContentElement::removedFrom):
        * html/shadow/HTMLShadowElement.cpp:
        (WebCore::HTMLShadowElement::insertedInto):
        (WebCore::HTMLShadowElement::removedFrom):
        * html/shadow/InsertionPoint.cpp:
        (WebCore::InsertionPoint::attach):
        (WebCore::InsertionPoint::detach):
        (WebCore::InsertionPoint::isActive):
        (WebCore::InsertionPoint::childrenChanged):
        (WebCore::InsertionPoint::insertedInto):
        (WebCore::InsertionPoint::removedFrom):
        (WebCore::InsertionPoint::setResetStyleInheritance):
        * page/EventHandler.cpp:
        (WebCore::instanceAssociatedWithShadowTreeElement):
        * svg/SVGElement.cpp:
        (WebCore::SVGElement::correspondingElement):
        (WebCore::collectInstancesForSVGElement):

2012-12-06  Michael Pruett  <michael@68k.org>

        IndexedDB: Replace int64 with int64_t
        https://bugs.webkit.org/show_bug.cgi?id=104338

        Reviewed by Kentaro Hara.

        Cleaning up coding inconsistencies, no change in behavior.

        Tests: storage/indexeddb/*

        * Modules/indexeddb/IDBFactory.cpp:
        (WebCore::IDBFactory::openInternal):

2012-12-06  James Simonsen  <simonjam@chromium.org>

        [Resource Timing] Allow detailed timing on same origin sites
        https://bugs.webkit.org/show_bug.cgi?id=104328

        Reviewed by Tony Gentilcore.

        This block was lost when I moved it to PerformanceResourceTiming.cpp.

        Test: http/tests/w3c/webperf/submission/resource-timing/html/test_resource_attribute_order.html

        * page/PerformanceResourceTiming.cpp:
        (WebCore::passesTimingAllowCheck):

2012-12-06  Rick Byers  <rbyers@chromium.org>

        CSS cursor property should support webkit-image-set
        https://bugs.webkit.org/show_bug.cgi?id=99493

        Reviewed by Beth Dakin.

        Add support for image scale factors attached to custom mouse cursor images
        behind ENABLE(MOUSE_CURSOR_SCALE).

        This required refactoring CSSCursorImageValue to derive directly from
        CSSValue since it can contain either a CSSImageValue or a CSSImageSetValue.
        If it contains an image-set, then we can plumb directly through to the
        CSSImageSetValue.  If it contains an image, then either we can plumb directly
        through to the CSSImageValue, or if the URL represents an SVG cursor we have
        to intercept the image loading in order to substitute the actual SVG image URL
        and do the appropriate lifetime management.

        Tests: fast/css/cursor-parsing-image-set.html
               fast/events/mouse-cursor-image-set.html

        * Configurations/FeatureDefines.xcconfig: Add ENABLE_MOUSE_CURSOR_SCALE - disabled
        * GNUmakefile.features.am: ditto
        * css/CSSCursorImageValue.cpp: Refactor to inherit directly from CSSValue and support image sets
        (WebCore::CSSCursorImageValue::CSSCursorImageValue):
        (WebCore::CSSCursorImageValue::~CSSCursorImageValue):
        (WebCore::CSSCursorImageValue::customCssText):
        (WebCore::CSSCursorImageValue::updateIfSVGCursorIsUsed):
        (WebCore::CSSCursorImageValue::cachedImage):
        (WebCore::CSSCursorImageValue::cachedOrPendingImage):
        (WebCore::CSSCursorImageValue::isSVGCursor):
        (WebCore::CSSCursorImageValue::cachedImageURL):
        (WebCore::CSSCursorImageValue::clearCachedImage):
        (WebCore::CSSCursorImageValue::reportDescendantMemoryUsage):
        * css/CSSCursorImageValue.h: Remove cursor-specific hacks
        (WebCore::CSSCursorImageValue::create):
        (CSSCursorImageValue):
        * css/CSSImageValue.cpp:
        (WebCore::CSSImageValue::cachedImage):
        * css/CSSImageValue.h:
        (CSSImageValue):
        * css/CSSParser.cpp:
        (WebCore::CSSParser::parseValue): Parse cursor(-webkit-image-set(...)) rules
        * css/CSSValue.h:
        (WebCore::CSSValue::isImageValue):
        * css/StyleBuilder.cpp:
        (WebCore::ApplyPropertyCursor::applyValue):
        * css/StyleResolver.cpp: Hook up new CSSCursorImageValue support since it can't be handled like other images any more.
        (WebCore::StyleResolver::styleImage):
        (WebCore::StyleResolver::cursorOrPendingFromValue):
        (WebCore::StyleResolver::loadPendingImage):
        * css/StyleResolver.h:
        (StyleResolver):
        * page/EventHandler.cpp:
        (WebCore::EventHandler::selectCursor): Handle StyleCachedImageSet images and plumb scale factor through
        * platform/Cursor.cpp:
        (WebCore::Cursor::Cursor): Add imageScaleFactor
        * platform/Cursor.h: Add imageScaleFactor
        (Cursor):
        (WebCore::Cursor::imageScaleFactor):
        * platform/chromium/CursorChromium.cpp: Add imageScaleFactor
        (WebCore::Cursor::Cursor):
        (WebCore::Cursor::operator=):
        * rendering/style/CursorData.h: Clarify hotspot units
        (CursorData):
        * rendering/style/StyleCachedImage.h:
        (StyleCachedImage::cachedImage): Override new virtual.
        * rendering/style/StyleCachedImageSet.h:
        (StyleCachedImageSet::cachedImage): Override new virtual.
        * rendering/style/StyleImage.h:
        (StyleImage::cachedImage): Add new virtual method to avoid lots of casts and typechecks.
        * rendering/style/StylePendingImage.h: Add CSSCursorImageValue support
        (WebCore::StylePendingImage::cssCursorImageValue):
        * testing/Internals.cpp:
        (WebCore::Internals::getCurrentCursorInfo): Print non-identity scale factors for testing

2012-12-06  Hayato Ito  <hayato@chromium.org>

        Event's relatedTarget re-targeting does not occur for manually fired mouse events created by event.initMouseEvent().
        https://bugs.webkit.org/show_bug.cgi?id=102681

        Reviewed by Dimitri Glazkov.

        Make sure that event's relatedTarget re-targeting occurs for mouse
        events created by event.initMouseEvent().  Since user-generated
        mouse events can have a relatedTarget which is same to the target
        node, the algorithm which calculates event's ancestors is also
        updated so that ancestors are not shrunk wrongly.

        Test: fast/events/dispatch-synthetic-mouseevent.html
              fast/dom/shadow/shadow-dom-event-dispatching.html

        * dom/EventDispatcher.cpp:
        (WebCore::EventRelatedTargetAdjuster::adjust):
        * dom/MouseEvent.cpp:
        (WebCore::MouseEventDispatchMediator::create):
        (WebCore::MouseEventDispatchMediator::MouseEventDispatchMediator):
        (WebCore::MouseEventDispatchMediator::dispatchEvent):
        * dom/MouseEvent.h:
        (WebCore::MouseEventDispatchMediator::isSyntheticMouseEvent):
        (MouseEventDispatchMediator):
        * dom/Node.cpp:
        (WebCore::Node::dispatchEvent):

2012-12-06  Kunihiko Sakamoto  <ksakamoto@chromium.org>

        Disabled file input box stops a certain other div from being rendered
        https://bugs.webkit.org/show_bug.cgi?id=104226

        Reviewed by Dimitri Glazkov.

        The bug was caused by setNeedsStyleRecalc() call during style recalculation,
        which resulted in inconsistent ChildNeedsStyleRecalc flags in DOM tree.

        When reattach of file input happens during style recalculation,
        RenderFileUploadControl::updateFromElement() is called from attach().
        It may change the disabled state of the upload button in its shadow tree,
        but it triggers style recalculation.

        This patch solves this issue by setting disabled state of the upload button in
        FileInputType::disabledAttributeChanged instead of RenderFileUploadControl.

        Test: fast/forms/file/sibling-of-disabled-file-input.html

        * html/FileInputType.cpp:
        (WebCore::FileInputType::disabledAttributeChanged): Added.
        * html/FileInputType.h:
        (FileInputType): Declare disabledAttributeChanged.
        * rendering/RenderFileUploadControl.cpp:
        (WebCore::RenderFileUploadControl::updateFromElement): Remove call to button->setDisabled().

2012-12-06  Dominic Cooney  <dominicc@chromium.org>

        Element.pseudo property should be prefixed
        https://bugs.webkit.org/show_bug.cgi?id=104060

        Reviewed by Hajime Morita.

        Other Shadow DOM properties are prefixed; pseudo should be too.

        Covered by updated tests in fast/dom/shadow.

        * dom/Element.idl:

2012-12-06  Andrei Bucur  <abucur@adobe.com>

        [CSS Regions] Remove the sanitize mechanism from LineFragmentationData
        https://bugs.webkit.org/show_bug.cgi?id=104234

        Reviewed by David Hyatt.

        Remove previous work that ensured an invalid region is never returned by the containingRegion getter. After r136793 the blocks always
        relayout children if the region chain changes. This means the sanitize() method is only necessary when all the regions are removed.
        This case is treated separately in layoutInlineChildren.

        Tests: no new functionality, no bug fixed.

        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::lineWidthForPaginatedLineChanged):
        * rendering/RenderBlockLineLayout.cpp:
        (WebCore::RenderBlock::layoutInlineChildren):
        * rendering/RootInlineBox.cpp:
        (WebCore::RootInlineBox::containingRegion):
        (WebCore):
        (WebCore::RootInlineBox::setContainingRegion):
        * rendering/RootInlineBox.h:
        (RootInlineBox):
        (WebCore::RootInlineBox::LineFragmentationData::LineFragmentationData):
        (LineFragmentationData):

2012-12-06  Kenneth Russell  <kbr@google.com>

        Associate URLs with GraphicsContext3D instances created for WebGL
        https://bugs.webkit.org/show_bug.cgi?id=103793

        Reviewed by Adam Barth.

        Pass down the URL of the topmost frame's document creating the
        WebGL context to the platform layer through
        GraphicsContext3D::Attributes.

        Not feasible to write a layout test for this change; has no
        user-visible effect. Tested manually with failure injection in
        Chromium port.

        * html/canvas/WebGLRenderingContext.cpp:
        (WebCore):
        (WebCore::WebGLRenderingContext::create):
            Pass top document's URL in context creation attributes.
        * platform/chromium/support/GraphicsContext3DChromium.cpp:
        (WebCore::GraphicsContext3D::create):
            Pass URL through WebKit API.
        * platform/graphics/GraphicsContext3D.h:
        (Attributes):
            Add top document's URL to context creation attributes.

2012-12-06  Philip Rogers  <pdr@google.com>

        Unify SVG's animation and target tracking systems.
        https://bugs.webkit.org/show_bug.cgi?id=102655

        Reviewed by Dirk Schulze.

        This patch unifies our animation target tracking system and regular target tracking system.
        This simplifies the code, fixes a bug, and cleans up a historically security-sensitive area.

        Background: When <use>, <mpath>, <animate>, etc. reference another element using
        xlink:href="#id", we need to track when #id changes to #otherId, when #id is removed, etc.
        This bookkeeping of element -> target is done in SVGDocumentExtensions. Additionally, when
        a target changes that causes layout (e.g., rect.x is changed), all dependent elements with
        renderers are notified (<animate> has no renderer and will not use this).

        Previously, xlink:href changes were lazily resolved when targetElement() was called, target
        changes were tracked using the animation tracking framework, and pending targets did not
        work (e.g., <animate xlink:href="#p"><!--animate is now pending #p --><rect id="p"/>).

        After this patch, we no longer lazily resolve targetElement() but instead change it when
        our xlink:href attribute changes. Instead of using the animation tracking framework in
        SVGDocumentExtensions, we now use the regular target tracking framework. Lastly, by using
        the regular target tracking framework we are able to hook into the pending resource handling
        which fixes a bug (see the test).

        A test has been added to test that the order of animation elements does not matter. A second
        test has been added to show we do not regress a pending-while-pending case.

        Tests: svg/animations/svg-animation-order.html
               svg/custom/svg-pending-twice.html

        * svg/SVGAnimateElement.cpp:
        (WebCore::SVGAnimateElement::setTargetElement):

            setTargetElement and setAttributeName now work similarly. When the corresponding attribute
            changes, we update our internal state (target or attributeName) and save it instead of
            looking these values up on each iteration.

        (WebCore::SVGAnimateElement::setAttributeName):
        (WebCore):
        (WebCore::SVGAnimateElement::resetAnimatedPropertyType):
        * svg/SVGAnimateElement.h:
        (SVGAnimateElement):
        * svg/SVGAnimationElement.cpp:
        (WebCore::SVGAnimationElement::setAttributeType):
        (WebCore::SVGAnimationElement::setTargetElement):
        (WebCore::SVGAnimationElement::setAttributeName):
        * svg/SVGAnimationElement.h:
        (SVGAnimationElement):
        * svg/SVGDocumentExtensions.cpp:
        (WebCore::SVGDocumentExtensions::~SVGDocumentExtensions):
        (WebCore):
        * svg/SVGDocumentExtensions.h:
        (SVGDocumentExtensions):
        * svg/SVGElement.cpp:
        (WebCore::SVGElement::~SVGElement):
        (WebCore::SVGElement::removedFrom):
        (WebCore::SVGElement::attributeChanged):
        * svg/SVGElementInstance.cpp:
        (WebCore::SVGElementInstance::invalidateAllInstancesOfElement):

            This can be removed after r131631 landed.

        * svg/SVGMPathElement.cpp:
        (WebCore::SVGMPathElement::buildPendingResource):
        * svg/SVGTextPathElement.cpp:
        (WebCore::SVGTextPathElement::buildPendingResource):

            A bug was discovered in review with our resource tracking in a pending-while-pending
            case. SVGMpathElement and SVGTextPathElement have been updated to fix this as well.

        * svg/animation/SVGSMILElement.cpp:

            The changes in SVGSMILElement should look very similar to SVGFEImageElement,
            SVGMPathElement, etc. The idea is to build pending resources when added or
            removed from the document, or when the href attribute changes.

        (WebCore::SVGSMILElement::~SVGSMILElement):
        (WebCore):
        (WebCore::SVGSMILElement::clearResourceReferences):
        (WebCore::SVGSMILElement::buildPendingResource):
        (WebCore::SVGSMILElement::insertedInto):
        (WebCore::SVGSMILElement::removedFrom):
        (WebCore::SVGSMILElement::svgAttributeChanged):
        (WebCore::SVGSMILElement::setAttributeName):
        (WebCore::SVGSMILElement::setTargetElement):
        * svg/animation/SVGSMILElement.h:
        (WebCore):
        (WebCore::SVGSMILElement::targetElement):
        (SVGSMILElement):

2012-12-06  Jon Lee  <jonlee@apple.com>

        Retry snapshots if they are too empty
        https://bugs.webkit.org/show_bug.cgi?id=104174
        <rdar://problem/12820146>

        Reviewed by Simon Fraser.

        * html/HTMLPlugInImageElement.cpp:
        (WebCore::HTMLPlugInImageElement::updateSnapshot): Change the state machine check so that even
        when the plug-in is displaying a snapshot, the snapshot can still be updated. This allows for the
        retries to be drawn.

2012-12-06  Adam Klein  <adamk@chromium.org>

        [HTMLTemplateElement] make content readonly and cloneNode(deep) clone content
        https://bugs.webkit.org/show_bug.cgi?id=104181

        Reviewed by Adam Barth.

        Note that this patch also adds IDL attributes/custom code to tie the lifetime
        of the content DocumentFragment wrapper to the lifetime of the template element wrapper
        via a hidden JS property.

        Based on a patch by Rafael Weinstein.

        Test: fast/dom/HTMLTemplateElement/contentWrappers.html

        * DerivedSources.cpp:
        * Target.pri:
        * UseJSC.cmake:
        * WebCore.gypi:
        * WebCore.xcodeproj/project.pbxproj:
        * bindings/js/JSBindingsAllInOne.cpp:
        * bindings/js/JSHTMLTemplateElementCustom.cpp: Copied from Source/WebCore/html/HTMLTemplateElement.idl.
        (WebCore):
        (WebCore::JSHTMLTemplateElement::content):
        * bindings/scripts/CodeGeneratorV8.pm: Add support for new V8CacheAttributeForGC attribute.
        * dom/Element.h:
        (Element): Annotate cloneNode() with OVERRIDE
        * html/HTMLTemplateElement.cpp:
        (WebCore::HTMLTemplateElement::cloneNode):
        * html/HTMLTemplateElement.h:
        (HTMLTemplateElement): override cloneNode
        * html/HTMLTemplateElement.idl: Make content readonly and add custom attributes.

2012-12-06  Brent Fulgham  <bfulgham@webkit.org>

        [Windows, WinCairo] Unreviewed build correction.

        Exclude 'DocumentSharedObjectPool.cpp' from build, since it is
        built as part of DOMAllInOne.cpp.  The build (besides wasting
        time) generates a bunch of build warnings for duplicate symbols.

        * WebCore.vcproj/WebCore.vcproj: Mark DocumentSharedObjectPool.cpp
        to not build independently of DOMAllInOne.cpp.

2012-12-06  David Grogan  <dgrogan@chromium.org>

        IndexedDB: Abort transactions because of leveldb errors part 4
        https://bugs.webkit.org/show_bug.cgi?id=103964

        Reviewed by Tony Chang.

        deleteDatabase, open, and deleteObjectStore will now fire more aborts
        and errors in case of leveldb problems

        * Modules/indexeddb/IDBBackingStore.cpp:
        (WebCore::getVarInt): Make return value indicate leveldb error.
        (WebCore::getString): ditto.
        (WebCore::IDBBackingStore::getIDBDatabaseMetaData):
        Change return value to indicate leveldb error.

        (WebCore::IDBBackingStore::deleteDatabase):
        Already had the desired return value semantics. As a consumer of
        getIDBDatabaseMetadata, will return an error (causing an abort) more
        often.

        (WebCore::IDBBackingStore::deleteObjectStore):
        Needed return value change. Will return error to DatabaseBackend to
        indicate leveldb problems.

        * Modules/indexeddb/IDBBackingStore.h:
        (IDBBackingStore):
        * Modules/indexeddb/IDBDatabaseBackendImpl.cpp:
        (WebCore::IDBDatabaseBackendImpl::openInternal):
        Pass leveldb errors up to callers, who already handle internal errors.

        (WebCore::IDBDatabaseBackendImpl::DeleteObjectStoreOperation::perform):
        Abort transaction if there were leveldb problems deleting an object
        store.

2012-12-06  David Grogan  <dgrogan@chromium.org>

        IndexedDB: Add webkitErrorMessage to IDBTransaction
        https://bugs.webkit.org/show_bug.cgi?id=104199

        Reviewed by Tony Chang.

        Don't drop error messages on the floor.

        Expose an error message on IDBTransaction to give developers more
        information than the opaque error code currently available. This is
        exactly what is done in IDBRequest. 

        Tests - transaction-error.html

        * Modules/indexeddb/IDBDatabaseError.h:
        (WebCore::IDBDatabaseError::create):
        * Modules/indexeddb/IDBRequest.cpp:
        (WebCore::IDBRequest::dispatchEvent):
        (WebCore::IDBRequest::uncaughtExceptionInEventHandler):
        * Modules/indexeddb/IDBTransaction.cpp:
        (WebCore::IDBTransaction::setError):
        (WebCore):
        (WebCore::IDBTransaction::webkitErrorMessage):
        (WebCore::IDBTransaction::onAbort):
        * Modules/indexeddb/IDBTransaction.h:
        (IDBTransaction):
        * Modules/indexeddb/IDBTransaction.idl:

2012-12-06  Alexander Shalamov  <alexander.shalamov@intel.com>

        XMLHttpRequest Content-Type should be taken from Blob type
        https://bugs.webkit.org/show_bug.cgi?id=99983

        Reviewed by Alexey Proskuryakov.

        Fix XMLHttpRequest::send(Blob*) method, so that the Content-Type is set according to W3C specification.
        http://www.w3.org/TR/XMLHttpRequest/#the-send-method

        Added test that check if content type is set correctly when blob object is sent.

        Test: http/tests/xmlhttprequest/post-blob-content-type.html

        * xml/XMLHttpRequest.cpp:
        (WebCore::XMLHttpRequest::send):
            Set correct MIME type for Blob objects.
        * WebCore.vcproj/WebCore.vcproj:
            Added ParsedContentType to project file.

2012-12-06  Min Qin  <qinmin@chromium.org>

        Make LazyDecodingPixelRef inherit from skia::LazyPixelRef so that cc thread can access it
        https://bugs.webkit.org/show_bug.cgi?id=103555

        Reviewed by Stephen White.

        Expose LazyDecodingPixelRef to the cc thread by inheriting from skia::LazyPixelRef.
        No test added for now as impl side paiting is still WIP.

        * platform/graphics/chromium/LazyDecodingPixelRef.cpp:
        (WebCore::LazyDecodingPixelRef::LazyDecodingPixelRef):
        (WebCore::LazyDecodingPixelRef::PrepareToDecode):
        (WebCore):
        (WebCore::LazyDecodingPixelRef::Decode):
        * platform/graphics/chromium/LazyDecodingPixelRef.h:
        (LazyDecodingPixelRef):

2012-12-06  Kentaro Hara  <haraken@chromium.org>

        [V8] Make an Isolate mandatory in v8UnsignedInteger()
        https://bugs.webkit.org/show_bug.cgi?id=104235

        Reviewed by Adam Barth.

        No tests. No change in behavior.

        * bindings/v8/ArrayValue.cpp:
        (WebCore::ArrayValue::get):
        * bindings/v8/V8Binding.h:
        (WebCore::v8UnsignedInteger):
        * bindings/v8/V8LazyEventListener.cpp:
        (WebCore::V8LazyEventListener::prepareListenerObject):

2012-12-06  David Hyatt  <hyatt@apple.com>

        [New Multicolumn] Add requiresBalancing booleans to track which column sets need to rebalance.
        https://bugs.webkit.org/show_bug.cgi?id=104297

        Reviewed by Simon Fraser.

        Add requiresBalancing booleans to RenderMultiColumnBlock and RenderMultiColumnSet. For now the former is just propagated
        to the latter, but eventually RenderMultiColumnSets will have a notion of balancing that has to be independent of the
        owning block (e.g., maybe only the last set rebalances, or maybe only a set that contains the content between two forced
        breaks wants to rebalance, etc.).

        * rendering/RenderMultiColumnBlock.cpp:
        (WebCore::RenderMultiColumnBlock::RenderMultiColumnBlock):
        (WebCore::RenderMultiColumnBlock::checkForPaginationLogicalHeightChange):
        (WebCore::RenderMultiColumnBlock::ensureColumnSets):
        * rendering/RenderMultiColumnBlock.h:
        (WebCore::RenderMultiColumnBlock::requiresBalancing):
        (RenderMultiColumnBlock):
        * rendering/RenderMultiColumnSet.cpp:
        (WebCore::RenderMultiColumnSet::RenderMultiColumnSet):
        * rendering/RenderMultiColumnSet.h:
        (WebCore::RenderMultiColumnSet::requiresBalancing):
        (WebCore::RenderMultiColumnSet::setRequiresBalancing):
        (RenderMultiColumnSet):
        (WebCore::toRenderMultiColumnSet):
        (WebCore):

2012-12-06  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r136871.
        http://trac.webkit.org/changeset/136871
        https://bugs.webkit.org/show_bug.cgi?id=104293

        crashes on bots and memory leaks (Requested by esprehn on
        #webkit).

        * dom/Document.h:
        (WebCore::Node::treeScope):
        * dom/Element.cpp:
        (WebCore::Element::createRareData):
        * dom/ElementRareData.h:
        (ElementRareData):
        (WebCore::ElementRareData::ElementRareData):
        * dom/Node.cpp:
        (WebCore::Node::setTreeScope):
        (WebCore::Node::ensureRareData):
        (WebCore::Node::createRareData):
        (WebCore::Node::clearRareData):
        * dom/Node.h:
        (WebCore::NodeRareDataBase::~NodeRareDataBase):
        (WebCore::NodeRareDataBase::NodeRareDataBase):
        (NodeRareDataBase):
        (WebCore::Node::renderer):
        (WebCore::Node::setRenderer):
        (Node):
        (WebCore::Node::hasRareData):
        * dom/NodeRareData.h:
        (WebCore::NodeRareData::NodeRareData):
        (NodeRareData):

2012-12-06  Adam Klein  <adamk@chromium.org>

        Remove non-v8 binding files from WebCore.gypi
        https://bugs.webkit.org/show_bug.cgi?id=104288

        Reviewed by Adam Barth.

        Since the gyp build is only used by the Chromium project,
        there's no need for cpp, gobject, objc, or jsc bindings
        in these build files.

        * WebCore.gypi:

2012-12-06  Tony Chang  <tony@chromium.org>

        REGRESSION(r135082): Restore the ability to insert author level style sheets from script
        https://bugs.webkit.org/show_bug.cgi?id=104042

        Reviewed by Antti Koivisto.

        Add DocumentStyleSheetCollection::addAuthorSheet so embedders can allow scripts
        to insert author level styles. Expose the method to window.interals for testing.

        Test: userscripts/insert-stylesheets.html

        * WebCore.exp.in: Update exports for Internals.cpp.
        * WebCore.order: Update exports for Internals.cpp.
        * dom/DocumentStyleSheetCollection.cpp:
        (WebCore::DocumentStyleSheetCollection::~DocumentStyleSheetCollection):
        (WebCore::DocumentStyleSheetCollection::addAuthorSheet): Add the stylesheet and force a style recalc.
        (WebCore::DocumentStyleSheetCollection::updateActiveStyleSheets): Include author level styles.
        (WebCore::DocumentStyleSheetCollection::reportMemoryUsage): Include author styles.
        * dom/DocumentStyleSheetCollection.h:
        (WebCore::DocumentStyleSheetCollection::documentAuthorStyleSheets): Accessor.
        (DocumentStyleSheetCollection): Keep track of author styles added by script.
        * testing/Internals.cpp:
        (WebCore::Internals::insertAuthorCSS): Testing addAuthorSheet.
        (WebCore::Internals::insertUserCSS): Testing addUserSheet.
        * testing/Internals.h:
        * testing/Internals.idl: Add addAuthorSheet and addUserSheet.

2012-12-06  Elliott Sprehn  <esprehn@gmail.com>

        Create only NodeRareDataBase when setting TreeScope
        https://bugs.webkit.org/show_bug.cgi?id=104202

        Reviewed by Dimitri Glazkov.

        Move many fields from NodeRareData into NodeRareDataBase and rename it
        UncommonNodeData and add a flag to determine if a UncommonNodeData is
        actually a full NodeRareData instance. By moving fields up from NodeRareData
        we ensure that this new flag in the base class doesn't make NodeRareData
        grow in size.

        We then make setting the tree scope only allocate the UncommonNodeData
        instead of creating the full NodeRareData or ElementRareData. This is
        important because when putting nodes into ShadowRoot or any descendant
        we must associate the node with a tree scope which adds rare data to the
        node making NodeRareData and ElementRareData not very rare.

        On 64bit, this reduces the overhead per element from 136 bytes to
        32 bytes for a 76% savings, and on other nodes from 64 bytes to 32 bytes
        for a 50% savings.

        No new tests, no change in behavior.

        * dom/Document.h:
        (WebCore::Node::treeScope):
        * dom/Element.cpp:
        (WebCore::Element::createRareData):
        * dom/ElementRareData.h:
        (ElementRareData):
        (WebCore::ElementRareData::ElementRareData):
        * dom/Node.cpp:
        (WebCore::Node::setTreeScope):
        (WebCore::Node::ensureRareData):
        (WebCore::Node::createRareData):
        (WebCore::Node::clearRareData):
        * dom/Node.h:
        (WebCore::UncommonNodeData::create):
        (UncommonNodeData):
        (WebCore::UncommonNodeData::~UncommonNodeData):
        (WebCore::UncommonNodeData::isNodeRareData):
        (WebCore::UncommonNodeData::UncommonNodeData):
        (WebCore::Node::renderer):
        (WebCore::Node::setRenderer):
        (Node):
        (WebCore::Node::hasRareData):
        (WebCore::Node::hasUncommonNodeData):
        * dom/NodeRareData.h:
        (WebCore::NodeRareData::NodeRareData):
        (NodeRareData):

2012-12-06  Joshua Bell  <jsbell@chromium.org>

        IndexedDB: Remove IDBDatabaseException.idl
        https://bugs.webkit.org/show_bug.cgi?id=102961

        Reviewed by Adam Barth.

        Delete the IDL and references to it. No longer needed as a enum member
        in the autogenerated ExceptionCodeDescription.h so removed from the ".in"
        file; only direct references are retained in the autogenerated cpp file.

        Ideally the code generator would handle these new-style DOMExceptions,
        but we don't have any other examples yet to know what pattern to follow.

        No new tests - just removing dead code.

        * CMakeLists.txt:
        * DerivedSources.cpp:
        * DerivedSources.make:
        * DerivedSources.pri:
        * GNUmakefile.list.am:
        * Modules/indexeddb/IDBDatabaseException.idl: Removed.
        * WebCore.gypi:
        * WebCore.vcproj/WebCore.vcproj:
        * WebCore.xcodeproj/project.pbxproj:
        * dom/DOMExceptions.in:
        * dom/make_dom_exceptions.pl:
        (generateImplementation):

2012-12-06  Andreas Kling  <akling@apple.com>

        [Mac] Drain the CSSValuePool on memory pressure.
        <http://webkit.org/b/104274>

        Reviewed by Antti Koivisto.

        Add a drain() mechanism to CSSValuePool and call it when we're under memory pressure.

        * WebCore.xcodeproj/project.pbxproj:
        * css/CSSValuePool.cpp:
        (WebCore::CSSValuePool::drain):
        * css/CSSValuePool.h:
        * platform/mac/MemoryPressureHandlerMac.mm:
        (WebCore::MemoryPressureHandler::releaseMemory):

2012-12-05  Adam Klein  <adamk@chromium.org>

        Remove gyp config for incomplete and unused Apple Mac gyp build
        https://bugs.webkit.org/show_bug.cgi?id=104068

        Reviewed by Adam Barth.

        As part of the removal, move some files to the proper sections
        of the gypi file.

        * WebCore.gyp/WebCore.gyp:
        * WebCore.gypi:

2012-12-06  Hans Muller  <hmuller@adobe.com>

        [CSS Exclusions] Add support for computing the first included interval position.
        https://bugs.webkit.org/show_bug.cgi?id=103327

        Reviewed by Levi Weintraub.

        If the first "word" in a line doesn't fit within the shape-inside when lineTop
        is the top of the shape's logical bounding box, adjust lineTop downwards to where
        the word fits.  Currently only rounded rectangle shapes are supported.

        Added ExclusionShape::firstIncludedIntervalLogicalTop(). The new virtual method
        computes the topmost/leftmost location where a line segment with the specified
        minLogicalIntervalSize will fit within the exclusion shape and returns the
        corresponding logical Y coordinate.  The result is additionally constrained to
        be at or below minLogicalIntervalTop. If the segment will not fit anywhere within
        the shape, then false is returned.

        During layout, minLogicalIntervalTop is the nominal top of the line being laid
        out within the exclusion shape.

        RenderBlock::layoutRunsAndFloatsInRange() now calls a new ExclusionShapeInsideInfo
        method, adjustLogicalLineTop(), which uses firstIncludedIntervalLogicalTop() to
        decide if the logical top of the line has to be moved downwards, for the first
        word to fit within the exclusion shape.

        Tests: fast/exclusions/shape-inside/shape-inside-rounded-rectangle-fit-001.html
               fast/exclusions/shape-inside/shape-inside-rounded-rectangle-fit-002.html

        * rendering/ExclusionPolygon.cpp:
        (WebCore::ExclusionPolygon::firstIncludedIntervalLogicalTop): This is a stub implementation.
        * rendering/ExclusionPolygon.h:
        * rendering/ExclusionRectangle.cpp:
        (WebCore::ellipseXIntercept): Added spaces to conform to webkit style and to be consistent with ellipseYIntercept()
        (WebCore::ellipseYIntercept): Compute an ellipse's Y intercept for an X coordinate.
        (WebCore::ExclusionRectangle::firstIncludedIntervalLogicalTop): See the description above.
        * rendering/ExclusionRectangle.h:
        * rendering/ExclusionShape.h:
        (ExclusionShape):
        (WebCore::ExclusionShape::logicalTopForMinY): Internal to logical coordinate conversion.
        * rendering/ExclusionShapeInsideInfo.cpp:
        (WebCore::ExclusionShapeInsideInfo::adjustLogicalLineTop): A new method that updates m_lineTop with firstIncludedIntervalPosition().
        * rendering/ExclusionShapeInsideInfo.h:
        (ExclusionShapeInsideInfo):
        (WebCore::ExclusionShapeInsideInfo::logicalLineTop): This is just a cover for the private m_lineTop field.
        * rendering/RenderBlockLineLayout.cpp:
        (WebCore::RenderBlock::layoutRunsAndFloatsInRange): Added code that restarts the layout loop if it's necessary to adjust the line's logicalTop.
        (WebCore::RenderBlock::restartLayoutRunsAndFloatsInRange): Factored newly common code into this helper function.

2012-12-06  Ryosuke Niwa  <rniwa@webkit.org>

        Use ownerNode() instead of base() in HTMLCollection
        https://bugs.webkit.org/show_bug.cgi?id=104244

        Reviewed by Adam Barth.

        Use ownerNode() instead of base() in HTMLCollection to match LiveNodeList.
        Notice that the definition of base(), which this patch removes, is "return ownerNode()".

        * bindings/js/JSHTMLFormControlsCollectionCustom.cpp:
        (WebCore::getNamedItems):
        * bindings/js/JSHTMLOptionsCollectionCustom.cpp:
        (WebCore::JSHTMLOptionsCollection::indexSetter):
        (WebCore::JSHTMLOptionsCollection::remove):
        * bindings/scripts/CodeGeneratorJS.pm:
        (GenerateImplementation):
        * bindings/scripts/CodeGeneratorV8.pm:
        (GenerateOpaqueRootForGC):
        * bindings/scripts/IDLAttributes.txt:
        * bindings/v8/custom/V8HTMLFormControlsCollectionCustom.cpp:
        (WebCore::getNamedItems):
        * bindings/v8/custom/V8HTMLOptionsCollectionCustom.cpp:
        (WebCore::V8HTMLOptionsCollection::removeCallback):
        (WebCore::V8HTMLOptionsCollection::indexedPropertySetter):
        * dom/WebKitNamedFlow.cpp:
        (WebCore::WebKitNamedFlow::ownerNode):
        * dom/WebKitNamedFlow.h:
        (WebKitNamedFlow):
        * dom/WebKitNamedFlow.idl:
        * html/HTMLAllCollection.idl:
        * html/HTMLCollection.h:
        (HTMLCollection):
        * html/HTMLCollection.idl:
        * html/HTMLFormControlsCollection.cpp:
        (WebCore::HTMLFormControlsCollection::HTMLFormControlsCollection):
        (WebCore::HTMLFormControlsCollection::create):
        (WebCore::HTMLFormControlsCollection::formControlElements):
        (WebCore::HTMLFormControlsCollection::formImageElements):
        (WebCore::HTMLFormControlsCollection::namedItem):
        (WebCore::HTMLFormControlsCollection::updateNameCache):
        * html/HTMLFormControlsCollection.idl:
        * html/HTMLNameCollection.cpp:
        (WebCore::HTMLNameCollection::~HTMLNameCollection):
        (WebCore::HTMLNameCollection::virtualItemAfter):
        * html/HTMLOptionsCollection.cpp:
        (WebCore::HTMLOptionsCollection::add):
        (WebCore::HTMLOptionsCollection::remove):
        (WebCore::HTMLOptionsCollection::selectedIndex):
        (WebCore::HTMLOptionsCollection::setSelectedIndex):
        (WebCore::HTMLOptionsCollection::setLength):
        * html/HTMLOptionsCollection.idl:
        * html/HTMLPropertiesCollection.cpp:
        (WebCore::HTMLPropertiesCollection::updateRefElements):
        (WebCore::HTMLPropertiesCollection::namedItem):
        * html/HTMLTableRowsCollection.cpp:
        (WebCore::HTMLTableRowsCollection::virtualItemAfter):

2012-12-06  Tommy Widenflycht  <tommyw@google.com>

        Speech Recognition API: Change the error code to a string on SpeechRecognitionError
        https://bugs.webkit.org/show_bug.cgi?id=104254

        Reviewed by Adam Barth.

        SpeechRecognitionError::code (numeric value) has been changed to SpeechRecognitionError::error (string)
        in the latest specification.

        http://dvcs.w3.org/hg/speech-api/raw-file/tip/speechapi.html#speechreco-error

        Existing tests modified to cover this patch.

        * Modules/speech/SpeechRecognitionError.cpp:
        (WebCore::ErrorCodeToString):
        (WebCore):
        (WebCore::SpeechRecognitionError::create):
        (WebCore::SpeechRecognitionError::SpeechRecognitionError):
        * Modules/speech/SpeechRecognitionError.h:
        (SpeechRecognitionErrorInit):
        (WebCore::SpeechRecognitionError::error):
        (SpeechRecognitionError):
        * Modules/speech/SpeechRecognitionError.idl:

2012-12-06  Stephen Chenney  <schenney@chromium.org>

        SVG <use> element inside an svg-as-image fails
        https://bugs.webkit.org/show_bug.cgi?id=104007

        Reviewed by Eric Seidel.

        Upon redraw, SVGImage calls layout on the document it is drawing into
        the image if the image, provided it believes the redraw does not need
        to be delayed. Unfortunately, when an SVG <use> element is modified
        (by animation, say) and regenerates its shadow tree, the destructors
        invoke redraw, causing the SVGImage to call layout on something that
        is in the process of being deleted. That's bad.

        This change causes SVGImage to always delay the redraw. It is the most robust
        way to protect against this problem, as there may be any number of
        ways to cause this issue (a node being deleted in an svg-as-image
        target) and this protects against them all.

        The test case crashes in Asan Chromium.

        Test: svg/as-image/animated-use-as-image-crash.html

        * svg/graphics/SVGImageCache.cpp:
        (WebCore::SVGImageCache::imageContentChanged): Always redraw on the timer.

2012-12-06  Antoine Quint  <graouts@apple.com>

        TextTrack's .cues not ordered correctly when two cues have the same .startTime
        https://bugs.webkit.org/show_bug.cgi?id=103266

        Reviewed by Eric Carlson.

        Adding a new method TextTrackCueList::updateCueIndex() to update the list of
        cues after changing the .startTime or .endTime of a TextTrackCue. I elected to
        add a new method to TextTrackCueList rather than calling remove() and then add()
        on the list from TextTrack::cueDidChange() so that the nature of the operation
        is abstracted and we can easily change the way we keep the cue list sorted at
        a later time should we choose to.

        * html/track/TextTrack.cpp:
        (WebCore::TextTrack::cueDidChange):
        * html/track/TextTrackCueList.cpp:
        (WebCore::TextTrackCueList::updateCueIndex):
        (WebCore):
        * html/track/TextTrackCueList.h:
        (TextTrackCueList):

2012-12-06  Andras Becsi  <andras.becsi@digia.com>

        [Qt][Mac] Fix libxslt and libxml2 config tests
        https://bugs.webkit.org/show_bug.cgi?id=104164

        Reviewed by Simon Hausmann.

        Since libxml2 is a dependency for libxslt and is not used
        standalone the configurations for it should also depend on
        whether XSLT is enabled.
        Also avoid using pkg-config on Mac, instead use direct
        include paths and add needed libraries to the linker.

        No new tests needed.

        * WebCore.pri:

2012-12-06  Shinya Kawanaka  <shinyak@chromium.org>

        Internals.getElementByIdInShadowRoot is nonsense now.
        https://bugs.webkit.org/show_bug.cgi?id=104241

        Reviewed by Kent Tamura.

        Since we have ShadowRoot.getElementById() now, we don't need Internals.getElementByIdInShadowRoot, which is
        the same functionality of ShadowRoot.getElementById().

        Test: fast/dom/shadow/get-element-by-id-in-shadow-root.html

        * WebCore.exp.in:
        * testing/Internals.cpp:
        * testing/Internals.h:
        (Internals):
        * testing/Internals.idl:

2012-12-06  Kondapally Kalyan  <kalyan.kondapally@intel.com>

        [EFL] Active texture state gets corrupted after updating graphics surface contents.
        https://bugs.webkit.org/show_bug.cgi?id=104248.

        Reviewed by Kenneth Rohde Christiansen.

        GraphicsContext3DPrivate::copyToGraphicsSurface() doesn't restore the previously bound texture
        after copying texture contents. This corrupts the texture state.

        Existing Tests should cover this.

        * platform/graphics/efl/GraphicsContext3DPrivate.cpp:
        (GraphicsContext3DPrivate::copyToGraphicsSurface):
        * platform/graphics/opengl/GLPlatformSurface.cpp:
        (WebCore::GLPlatformSurface::updateContents):
        * platform/graphics/opengl/GLPlatformSurface.h:
        (GLPlatformSurface):

2012-12-06  Alexander Pavlov  <apavlov@chromium.org>

        Web Inspector: Goto panel shortcuts and description are reversed
        https://bugs.webkit.org/show_bug.cgi?id=103988

        Reviewed by Pavel Feldman.

        Swap the square brackets in the shortcuts.

        * inspector/front-end/inspector.js:
        (WebInspector._registerShortcuts):

2012-12-06  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r136818.
        http://trac.webkit.org/changeset/136818
        https://bugs.webkit.org/show_bug.cgi?id=104249

        simulatedClick does not work as per #chrmium irc. (Requested
        by hayato on #webkit).

        * dom/EventDispatcher.cpp:
        (WebCore::EventRelatedTargetAdjuster::adjust):
        * dom/MouseEvent.cpp:
        (WebCore::MouseEventDispatchMediator::create):
        (WebCore::MouseEventDispatchMediator::MouseEventDispatchMediator):
        (WebCore::MouseEventDispatchMediator::dispatchEvent):
        * dom/MouseEvent.h:
        (MouseEventDispatchMediator):
        * dom/Node.cpp:
        (WebCore::Node::dispatchEvent):

2012-12-06  Ulan Degenbaev  <ulan@chromium.org>

        [v8] Fix hidden property name of V8ArrayBufferView flag.
        https://bugs.webkit.org/show_bug.cgi?id=104099

        Reviewed by Kentaro Hara.

        Fix hidden property name of V8ArrayBufferView hidden copy method.

        * bindings/v8/V8HiddenPropertyName.h:
        (WebCore):
        * bindings/v8/custom/V8ArrayBufferViewCustom.cpp:
        (WebCore::getHiddenCopyMethod):
        (WebCore::installHiddenCopyMethod):

2012-12-06  Kentaro Hara  <haraken@chromium.org>

        Unreviewed. Fixed a wrong comment landed in r136822.

        * bindings/v8/V8Binding.h:
        (WebCore):

2012-12-05  Kentaro Hara  <haraken@chromium.org>

        [V8] Implement deprecatedV8String()
        https://bugs.webkit.org/show_bug.cgi?id=104230

        Reviewed by Adam Barth.

        To make an Isolate mandatory in v8String(), we implement
        deprecatedV8String() for call sites that don't have
        an Isolate. Eventually we want to kill the method though.

        No tests. No change in behavior.

        * bindings/scripts/test/V8/V8TestCallback.cpp:
        (WebCore::V8TestCallback::callbackWithClass2Param):
        * bindings/v8/Dictionary.cpp:
        (WebCore::Dictionary::getKey):
        * bindings/v8/IDBBindingUtilities.cpp:
        (WebCore::get):
        (WebCore::set):
        * bindings/v8/JavaScriptCallFrame.cpp:
        (WebCore::JavaScriptCallFrame::evaluate):
        * bindings/v8/ScriptController.cpp:
        (WebCore::ScriptController::compileAndRunScript):
        (WebCore::ScriptController::bindToWindowObject):
        (WebCore::ScriptController::disableEval):
        * bindings/v8/ScriptDebugServer.cpp:
        (WebCore::ScriptDebugServer::setBreakpoint):
        (WebCore::ScriptDebugServer::removeBreakpoint):
        (WebCore::ScriptDebugServer::setScriptSource):
        (WebCore::ScriptDebugServer::ensureDebuggerScriptCompiled):
        (WebCore::ScriptDebugServer::compileScript):
        * bindings/v8/ScriptFunctionCall.cpp:
        (WebCore::ScriptCallArgumentHandler::appendArgument):
        (WebCore::ScriptFunctionCall::call):
        (WebCore::ScriptFunctionCall::construct):
        * bindings/v8/ScriptProfiler.cpp:
        (WebCore::ScriptProfiler::start):
        (WebCore::ScriptProfiler::stop):
        (WebCore::ScriptProfiler::takeHeapSnapshot):
        * bindings/v8/ScriptSourceCode.cpp:
        (WebCore::ScriptSourceCode::compileScript):
        * bindings/v8/V8Binding.h:
        (WebCore):
        (WebCore::deprecatedV8String):
        * bindings/v8/V8DOMWindowShell.cpp:
        (WebCore::V8DOMWindowShell::initializeIfNeeded):
        (WebCore::V8DOMWindowShell::namedItemAdded):
        (WebCore::V8DOMWindowShell::namedItemRemoved):
        * bindings/v8/V8LazyEventListener.cpp:
        (WebCore::V8LazyEventListener::prepareListenerObject):
        * bindings/v8/V8WindowErrorHandler.cpp:
        (WebCore::V8WindowErrorHandler::callListenerFunction):
        * bindings/v8/V8WorkerContextErrorHandler.cpp:
        (WebCore::V8WorkerContextErrorHandler::callListenerFunction):
        * bindings/v8/WorkerScriptController.cpp:
        (WebCore::WorkerScriptController::evaluate):
        * bindings/v8/custom/V8ArrayBufferViewCustom.cpp:
        (WebCore::installHiddenCopyMethod):
        (WebCore::copyElements):
        * bindings/v8/custom/V8CustomXPathNSResolver.cpp:
        (WebCore::V8CustomXPathNSResolver::lookupNamespaceURI):
        * bindings/v8/custom/V8InjectedScriptHostCustom.cpp:
        (WebCore::V8InjectedScriptHost::getEventListenersCallback):
        * bindings/v8/custom/V8InjectedScriptManager.cpp:
        (WebCore::InjectedScriptManager::createInjectedScript):
        * bindings/v8/custom/V8MessageEventCustom.cpp:
        (WebCore::V8MessageEvent::dataAccessorGetter):
        * bindings/v8/custom/V8WebGLRenderingContextCustom.cpp:
        (WebCore::toV8Object):
        (WebCore::V8WebGLRenderingContext::getSupportedExtensionsCallback):

2012-12-06  Keishi Hattori  <keishi@webkit.org>

        Page popup should align to the right when the anchor element is rtl
        https://bugs.webkit.org/show_bug.cgi?id=104219

        Reviewed by Kent Tamura.

        Page popup should align to the right edge of the anchor element when the anchor element is rtl.

        No new tests. Mock page popup can't test popup window position.

        * Resources/pagepopups/pickerCommon.js:
        (_adjustWindowRectHorizontally): Align to the right edge when anchor element is rtl. Removed some redundant lines.
        (setWindowRect): If the window is hidden we want to move first then resize so the popup doesn't flicker.
        (isWindowHidden): Returns true if the window is hidden using hideWindow().

2012-12-06  Kentaro Hara  <haraken@chromium.org>

        [V8] Make an Isolate mandatory for v8StringOrNull() and v8StringOrUndefined()
        https://bugs.webkit.org/show_bug.cgi?id=104213

        Reviewed by Adam Barth.

        All call sites of v8StringOrNull() and v8StringOrUndefined() have an Isolate.

        No tests. No change in behavior.

        * bindings/v8/V8Binding.h:
        (WebCore::v8StringOrNull):
        (WebCore::v8StringOrUndefined):

2012-12-05  Kentaro Hara  <haraken@chromium.org>

        [V8] Implement deprecatedV8Integer(int i)
        https://bugs.webkit.org/show_bug.cgi?id=104220

        Reviewed by Adam Barth.

        To make an Isolate mandatory in v8Integer(), we implement
        deprecatedV8Integer(int i) for call sites that don't have
        an Isolate. Eventually we want to kill deprecatedV8Integer(int i).

        No new tests. No change in behavior.

        * bindings/v8/Dictionary.cpp:
        (WebCore::Dictionary::get):
        * bindings/v8/NPV8Object.cpp:
        (_NPN_Enumerate):
        * bindings/v8/PageScriptDebugServer.cpp:
        (WebCore::PageScriptDebugServer::addListener):
        * bindings/v8/ScriptDebugServer.cpp:
        (WebCore::ScriptDebugServer::setBreakpoint):
        (WebCore::ScriptDebugServer::compileScript):
        * bindings/v8/ScriptSourceCode.cpp:
        (WebCore::ScriptSourceCode::compileScript):
        * bindings/v8/V8Binding.h:
        (WebCore):
        (WebCore::deprecatedV8Integer):
        * bindings/v8/V8DOMConfiguration.cpp:
        (WebCore::V8DOMConfiguration::batchConfigureConstants):
        * bindings/v8/V8NPUtils.cpp:
        (WebCore::convertNPVariantToV8Object):
        * bindings/v8/V8Utilities.cpp:
        (WebCore::createHiddenDependency):
        (WebCore::removeHiddenDependency):
        * bindings/v8/V8WindowErrorHandler.cpp:
        (WebCore::V8WindowErrorHandler::callListenerFunction):
        * bindings/v8/V8WorkerContextErrorHandler.cpp:
        (WebCore::V8WorkerContextErrorHandler::callListenerFunction):
        * bindings/v8/WorkerScriptDebugServer.cpp:
        (WebCore::WorkerScriptDebugServer::addListener):
        * bindings/v8/custom/V8MutationCallbackCustom.cpp:
        (WebCore::V8MutationCallback::handleEvent):

2012-12-06  Hayato Ito  <hayato@chromium.org>

        Event's relatedTarget re-targeting does not occur for manually fired mouse events created by event.initMouseEvent().
        https://bugs.webkit.org/show_bug.cgi?id=102681

        Reviewed by Dimitri Glazkov.

        Make sure that event's relatedTarget re-targeting occurs for mouse
        events created by event.initMouseEvent().  Since user-generated
        mouse events can have a relatedTarget which is same to the target
        node, the algorithm which calculates event's ancestors is also
        updated so that ancestors are not shrunk wrongly.

        Test: fast/events/dispatch-synthetic-mouseevent.html
              fast/dom/shadow/shadow-dom-event-dispatching.html

        * dom/EventDispatcher.cpp:
        (WebCore::EventRelatedTargetAdjuster::adjust):
        * dom/MouseEvent.cpp:
        (WebCore::MouseEventDispatchMediator::create):
        (WebCore::MouseEventDispatchMediator::MouseEventDispatchMediator):
        (WebCore::MouseEventDispatchMediator::dispatchEvent):
        * dom/MouseEvent.h:
        (WebCore::MouseEventDispatchMediator::isSyntheticMouseEvent):
        (MouseEventDispatchMediator):
        * dom/Node.cpp:
        (WebCore::Node::dispatchEvent):

2012-12-06  Michael Pruett  <michael@68k.org>

        [JSC] Check whether property is an array before attempting conversion to array in JSDictionary
        https://bugs.webkit.org/show_bug.cgi?id=96614

        Reviewed by Kentaro Hara.

        JSDictionary should check whether the property being accessed in get()
        is an array before attempting to convert the value to an array.

        Previously calling get() with a result type of Vector<String> when
        the named property could not be converted to an array would generate
        an exception.

        Tests: storage/indexeddb/*

        * bindings/js/JSDictionary.cpp:
        (WebCore::JSDictionary::convertValue):
        * bindings/js/JSDictionary.h:
        (WebCore::JSDictionary::tryGetPropertyAndResult):

2012-12-05  Kentaro Hara  <haraken@chromium.org>

        [V8] Pass Isolate to toDOMStringList()
        https://bugs.webkit.org/show_bug.cgi?id=104224

        Reviewed by Adam Barth.

        No tests. No change in behavior.

        * bindings/scripts/CodeGeneratorV8.pm:
        (JSValueToNative):
        * bindings/scripts/test/V8/V8TestObj.cpp:
        (WebCore::TestObjV8Internal::overloadedMethod6Callback):
        (WebCore::TestObjV8Internal::overloadedMethod7Callback):
        (WebCore::TestObjV8Internal::overloadedMethod9Callback):
        (WebCore::TestObjV8Internal::stringArrayFunctionCallback):
        * bindings/v8/V8Binding.cpp:
        (WebCore::toDOMStringList):
        * bindings/v8/V8Binding.h:
        (WebCore):

2012-12-06  Kentaro Hara  <haraken@chromium.org>

        Remove JSDependentRetained.h and V8DependentRetained.h
        https://bugs.webkit.org/show_bug.cgi?id=104232

        Reviewed by Adam Barth.

        Although (JS|V8)DependentRetained.h were introduced for MutationObservers,
        they are not going to be used (See the discussion in bug 95519).
        We can remove them.

        No tests. No change in behavior.

        * GNUmakefile.list.am:
        * WebCore.gypi:
        * WebCore.vcproj/WebCore.vcproj:
        * WebCore.xcodeproj/project.pbxproj:
        * bindings/js/JSDependentRetained.h: Removed.
        * bindings/v8/V8DependentRetained.h: Removed.
        * bindings/v8/V8PerIsolateData.cpp:
        (WebCore::V8PerIsolateData::V8PerIsolateData):
        * bindings/v8/V8PerIsolateData.h:
        (V8PerIsolateData):

2012-12-06  Kentaro Hara  <haraken@chromium.org>

        [V8] Replace v8String("symbol") with v8::String::NewSymbol("symbol")
        https://bugs.webkit.org/show_bug.cgi?id=104209

        Reviewed by Adam Barth.

        V8 can look up symbols faster than strings.

        No tests. No change in behavior.

        * bindings/v8/JavaScriptCallFrame.cpp:
        (WebCore::JavaScriptCallFrame::caller):
        (WebCore::JavaScriptCallFrame::sourceID):
        (WebCore::JavaScriptCallFrame::line):
        (WebCore::JavaScriptCallFrame::column):
        (WebCore::JavaScriptCallFrame::functionName):
        (WebCore::JavaScriptCallFrame::scopeChain):
        (WebCore::JavaScriptCallFrame::scopeType):
        (WebCore::JavaScriptCallFrame::thisObject):
        (WebCore::JavaScriptCallFrame::evaluate):
        (WebCore::JavaScriptCallFrame::restart):
        * bindings/v8/V8ThrowException.cpp:
        (WebCore::domExceptionStackGetter):
        (WebCore::domExceptionStackSetter):
        (WebCore::V8ThrowException::setDOMException):
        * bindings/v8/custom/V8InspectorFrontendHostCustom.cpp:
        (WebCore::V8InspectorFrontendHost::platformCallback):
        * bindings/v8/custom/V8JavaScriptCallFrameCustom.cpp:
        (WebCore::V8JavaScriptCallFrame::typeAccessorGetter):

2012-12-06  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r136784 and r136802.
        http://trac.webkit.org/changeset/136784
        http://trac.webkit.org/changeset/136802
        https://bugs.webkit.org/show_bug.cgi?id=104231

        breaks chromium canary (Requested by morrita on #webkit).

        * WebCore.gyp/WebCore.gyp:
        * WebCore.gypi:
        * platform/chromium/PlatformThemeChromiumLinux.cpp: Added.
        (WebCore):
        (WebCore::PlatformThemeChromiumLinux::setScrollbarColors):
        (WebCore::clamp):
        (WebCore::PlatformThemeChromiumLinux::saturateAndBrighten):
        (WebCore::PlatformThemeChromiumLinux::outlineColor):
        (WebCore::PlatformThemeChromiumLinux::paintArrowButton):
        * platform/chromium/PlatformThemeChromiumLinux.h: Added.
        (WebCore):
        (PlatformThemeChromiumLinux):
        (WebCore::PlatformThemeChromiumLinux::thumbInactiveColor):
        (WebCore::PlatformThemeChromiumLinux::thumbActiveColor):
        (WebCore::PlatformThemeChromiumLinux::trackColor):
        (WebCore::PlatformThemeChromiumLinux::PlatformThemeChromiumLinux):
        * platform/chromium/ScrollbarThemeChromiumLinux.cpp: Added.
        (WebCore):
        (WebCore::ScrollbarTheme::nativeTheme):
        (WebCore::ScrollbarThemeChromiumLinux::scrollbarThickness):
        (WebCore::ScrollbarThemeChromiumLinux::paintTrackPiece):
        (WebCore::ScrollbarThemeChromiumLinux::paintButton):
        (WebCore::ScrollbarThemeChromiumLinux::paintThumb):
        (WebCore::ScrollbarThemeChromiumLinux::shouldCenterOnThumb):
        (WebCore::ScrollbarThemeChromiumLinux::buttonSize):
        (WebCore::ScrollbarThemeChromiumLinux::minimumThumbLength):
        * platform/chromium/ScrollbarThemeChromiumLinux.h: Added.
        (ScrollbarThemeChromiumLinux):
        * rendering/RenderThemeChromiumAndroid.cpp:
        (WebCore::RenderThemeChromiumAndroid::extraDefaultStyleSheet):
        * rendering/RenderThemeChromiumAndroid.h:
        * rendering/RenderThemeChromiumLinux.cpp: Added.
        (WebCore):
        (WebCore::getWebThemeState):
        (WebCore::RenderThemeChromiumLinux::create):
        (WebCore::RenderTheme::themeForPage):
        (WebCore::RenderThemeChromiumLinux::RenderThemeChromiumLinux):
        (WebCore::RenderThemeChromiumLinux::~RenderThemeChromiumLinux):
        (WebCore::RenderThemeChromiumLinux::systemColor):
        (WebCore::RenderThemeChromiumLinux::extraDefaultStyleSheet):
        (WebCore::RenderThemeChromiumLinux::controlSupportsTints):
        (WebCore::RenderThemeChromiumLinux::activeListBoxSelectionBackgroundColor):
        (WebCore::RenderThemeChromiumLinux::activeListBoxSelectionForegroundColor):
        (WebCore::RenderThemeChromiumLinux::inactiveListBoxSelectionBackgroundColor):
        (WebCore::RenderThemeChromiumLinux::inactiveListBoxSelectionForegroundColor):
        (WebCore::RenderThemeChromiumLinux::platformActiveSelectionBackgroundColor):
        (WebCore::RenderThemeChromiumLinux::platformInactiveSelectionBackgroundColor):
        (WebCore::RenderThemeChromiumLinux::platformActiveSelectionForegroundColor):
        (WebCore::RenderThemeChromiumLinux::platformInactiveSelectionForegroundColor):
        (WebCore::RenderThemeChromiumLinux::sliderTickSize):
        (WebCore::RenderThemeChromiumLinux::sliderTickOffsetFromTrackCenter):
        (WebCore::RenderThemeChromiumLinux::adjustSliderThumbSize):
        (WebCore::RenderThemeChromiumLinux::supportsControlTints):
        (WebCore::RenderThemeChromiumLinux::setCaretBlinkInterval):
        (WebCore::RenderThemeChromiumLinux::caretBlinkIntervalInternal):
        (WebCore::RenderThemeChromiumLinux::setSelectionColors):
        (WebCore::RenderThemeChromiumLinux::paintCheckbox):
        (WebCore::RenderThemeChromiumLinux::setCheckboxSize):
        (WebCore::RenderThemeChromiumLinux::paintRadio):
        (WebCore::RenderThemeChromiumLinux::setRadioSize):
        (WebCore::RenderThemeChromiumLinux::paintButton):
        (WebCore::RenderThemeChromiumLinux::paintTextField):
        (WebCore::RenderThemeChromiumLinux::paintMenuList):
        (WebCore::RenderThemeChromiumLinux::paintSliderTrack):
        (WebCore::RenderThemeChromiumLinux::paintSliderThumb):
        (WebCore::RenderThemeChromiumLinux::adjustInnerSpinButtonStyle):
        (WebCore::RenderThemeChromiumLinux::paintInnerSpinButton):
        (WebCore::RenderThemeChromiumLinux::paintProgressBar):
        (WebCore::RenderThemeChromiumLinux::shouldOpenPickerWithF4Key):
        * rendering/RenderThemeChromiumLinux.h: Added.
        (WebCore):
        (RenderThemeChromiumLinux):

2012-12-05  Sankeerth V S  <sankeerth.vs@samsung.com>

        Web Inspector: Title of "Record Timeline" status button on "Timeline
        Panel" should reflect the recording state.
        https://bugs.webkit.org/show_bug.cgi?id=104108

        Reviewed by Alexander Pavlov.

        Title should be toggled between "Record"/"Stop" to reflect current
        state of the Status bar button.

        No new tests as UI related change.

        * inspector/front-end/TimelinePanel.js:
        (WebInspector.TimelinePanel.prototype.get _toggleTimelineButtonClicked):

2012-12-03  Kent Tamura  <tkent@chromium.org>

        INPUT_MULTIPLE_FIELDS_UI doesn't show digits well in RTL locales
        https://bugs.webkit.org/show_bug.cgi?id=103869

        Reviewed by Hajime Morita.

        We need to use display:inline elements to wrap sub-fields and static
        text in DateTimeEditElement children to apply the Unicode Bidi
        Algorithm.

        Because we can't use display:inline-block for them, we can't specify
        min-width CSS property for them. We stop using customStyleForRenderer of
        sub-fields to specify each of their widths, and use
        customStyleForRenderer of DateTimeEditElement to specify the total
        required width. A sub-field width shrink and grow so that the width fits
        to the field value, and a DateTimeEditElement doesn't.

        No new tests. Coverred by existing tests, especially
        fast/forms/datetime/datetime-appearance-l10n.html shows "23:59"
        correctly.

        * css/html.css:
        (input::-webkit-datetime-edit-year-field):
        - Make this display:inline to apply the Unicode Bidi Algorithm.
        - Use padding instead of margin because of ease of width computation.
          Also, the focus apparance gets better by padding.
        - Don't allow to specify font property here because of ease of width
          computation.
        - Remove text-align:center. It doesn't work for display:inline.
        (input::-webkit-datetime-edit-text):
        - Make this display:inline to apply the Unicode Bidi Algorithm.
        - Don't allow to specify font property here because of ease of width
          computation.

        * html/shadow/DateTimeEditElement.h:
        (DateTimeEditElement): Declare customStyleForRenderer.
        * html/shadow/DateTimeEditElement.cpp:
        (WebCore::DateTimeEditElement::DateTimeEditElement):
        Enable customStyleForRenderer.
        (WebCore::DateTimeEditElement::customStyleForRenderer):
        Compute required width with a font for this element and child maximum
        widths, and set it to min-width style.
        The resultant width value can be inaccurate if a page author specifies
        padding, border, margin, etc. to ::-webkit-datetime-edit-*-field or
        ::-webkit-datetime-edit-text. In such case, the page author should specify
        wider width to <input>.

        * dom/Element.h:
        (Element): Add isDateTimeFieldElement to do static_cast<DateTimeFieldElement> safely.
        * dom/Element.cpp:
        (WebCore::Element::isDateTimeFieldElement): Added.

        * html/shadow/DateTimeFieldElement.h:
        (DateTimeFieldElement): Declare isDateTimeFieldElement and maximumWidth.
        * html/shadow/DateTimeFieldElement.cpp:
        (WebCore::DateTimeFieldElement::isDateTimeFieldElement):
        Added. Returns true.
        (WebCore::DateTimeFieldElement::maximumWidth):
        Added. Returns padding width.

        * html/shadow/DateTimeSymbolicFieldElement.h:
        (DateTimeSymbolicFieldElement):
        Remove customStyleForRenderer, and declare maximumWidth.
        * html/shadow/DateTimeSymbolicFieldElement.cpp:
        (WebCore::DateTimeSymbolicFieldElement::DateTimeSymbolicFieldElement):
        Disable customStyleForRenderer.
        (WebCore::DateTimeSymbolicFieldElement::maximumWidth):
        Added. Returns the expected maximum width with the specified font.

        * html/shadow/DateTimeNumericFieldElement.h:
        (DateTimeNumericFieldElement):
        Remove customStyleForRenderer, declare maximumWidth, and make m_placeholder
        non-const because it is updated in the constructor.
        * html/shadow/DateTimeNumericFieldElement.cpp:
        (WebCore::DateTimeNumericFieldElement::DateTimeNumericFieldElement):
        Disable customStyleForRenderer.
        If a numeric value for this field is LTR and the whole direction is RTL,
        wrap the placeholder string with left-to-right-mark and
        right-to-left-mark so that it is handled as LTR. Without this,
        sub-fields order would be changed when the content of a field is changed
        from a placeholder to a numeric value.
        (WebCore::DateTimeNumericFieldElement::maximumWidth):
        Added. Returns the expected maximum width with the specified font.

2012-12-05  Kent Tamura  <tkent@chromium.org>

        INPUT_MULTIPLE_FIELDS_UI: The hour, am/pm, millisecond fields should support read-only state correctly
        https://bugs.webkit.org/show_bug.cgi?id=104210

        Reviewed by Kentaro Hara.

        1. The hour, am/pm, and millisecond fields should have CSS rules for
           [readonly]. They should be gray when they are read-only.
        2. The am/pm field should reject to set an empty value like other
           numeric fields do.

        Tests: Add test cases to fast/forms/time/time-appearance-basic.html.

        * css/html.css: merge existing readonly rules, and add ampm, hour, and
        millisecond pseudo classes.
        * html/shadow/DateTimeSymbolicFieldElement.cpp:
        (WebCore::DateTimeSymbolicFieldElement::setEmptyValue):
        Reject to set empty value if it is read-only.

2012-12-05  Dan Beam  <dbeam@chromium.org>

        HTMLFormElement#requestAutocomplete() should require a user action
        https://bugs.webkit.org/show_bug.cgi?id=102320

        Reviewed by Kent Tamura.

        This patch dispatches an autocompleteerror when HTMLFormElement::requestAutocomplete() is called while not processing
        a user gesture.

        * fast/forms/form-request-autocomplete.html is updated.

        * html/HTMLFormElement.cpp:
        (WebCore::HTMLFormElement::requestAutocomplete):

        Asynchronously dispatch an autocomplete error when not processing a user action when
        HTMLFormElement#requestAutocomplete() is invoked.

2012-12-05  Kentaro Hara  <haraken@chromium.org>

        [V8] Optimize v8StringOrNull() and v8StringOrUndefined()
        https://bugs.webkit.org/show_bug.cgi?id=104206

        Reviewed by Adam Barth.

        Currently v8StringOrNull() and v8StringOrUndefined() are checking
        a null string twice. It is redundant.

        [div.localName]
        Before this patch: 20.03 ns
        After this patch:  19.34 ns

        * bindings/v8/V8Binding.h:
        (WebCore::v8StringOrNull):
        (WebCore::v8StringOrUndefined):

2012-12-05  Kentaro Hara  <haraken@chromium.org>

        [V8] Optimize v8String() for uninitialized DOM attributes
        https://bugs.webkit.org/show_bug.cgi?id=104205

        Reviewed by Adam Barth.

        This patch makes uninitialized div.lang, div.title etc 6.3% faster.

        [div.lang]
        Before this patch: 12.6 ns
        After this patch:  11.8 ns

        * bindings/v8/V8Binding.h:
        (WebCore::v8String):

2012-12-05  Kentaro Hara  <haraken@chromium.org>

        [V8] Remove addImplicitReferencesForNodeWithEventListeners()
        https://bugs.webkit.org/show_bug.cgi?id=104203

        Reviewed by Adam Barth.

        We can use opaqueRootForGC() instead. By this change, we can remove
        all AddImplicitReferences() from V8 bindings.

        Tests: fast/dom/gc-image-element.html
               fast/dom/gc-image-element-2.html
               fast/dom/inline-event-attributes-lookup-removed.html

        * bindings/v8/V8GCController.cpp:

2012-12-05  Andrei Bucur  <abucur@adobe.com>

        [CSS Regions] Blocks don't relayout children if the width of a region changes
        https://bugs.webkit.org/show_bug.cgi?id=103993

        Reviewed by David Hyatt.

        After r135750 lines are no longer invalidating when regions change width. This is happening because the detection for the width change was being done
        only at line layout time. This patch moves the line relayout decision to the containing block by setting the relayoutChildren flag if the block
        has no region chain attached.

        Tests: fast/regions/region-width-change-relayout-1.html
               fast/regions/region-width-change-relayout-2.html
               fast/regions/region-width-change-relayout-3.html

        * rendering/RenderFlowThread.cpp:
        (WebCore::RenderFlowThread::logicalWidthChangedInRegions):

2012-12-05  Kihong Kwon  <kihong.kwon@samsung.com>

        Parameter event need to covert to RefPtr in the DeviceController::dispatchDeviceEvent
        https://bugs.webkit.org/show_bug.cgi?id=104201

        Reviewed by Laszlo Gombos.

        Parameter 'event' need to covert to RefPtr in the DeviceController::dispatchDeviceEvent.
        This can make crash sometimes.

        No new tests. Covered by existing layout tests.

        * page/DeviceController.cpp:
        (WebCore::DeviceController::dispatchDeviceEvent):

2012-12-05  Halton Huo  <halton.huo@intel.com>

        [CMake] Unify coding style for CMake files
        https://bugs.webkit.org/show_bug.cgi?id=103605

        Reviewed by Laszlo Gombos.

        Update cmake files(.cmake, CMakeLists.txt) with following style rules:
        1. Indentation
        1.1 Use spaces, not tabs.
        1.2 Four spaces as indent.
        2. Spacing
        2.1 Place one space between control statements and their parentheses.
            For eg, if (), else (), elseif (), endif (), foreach (),
            endforeach (), while (), endwhile (), break ().
        2.2 Do not place spaces between function and macro statements and
            their parentheses. For eg, macro(), endmacro(), function(),
            endfunction().
        2.3 Do not place spaces between a command or function or macro and its
            parentheses, or between a parenthesis and its content. For eg,
            message("testing") not message( "testing") or message ("testing" )
        2.4 No space at line ending.
        3. Lowercase when call commands macros and functions. For eg,
           add_executable() not ADD_EXECUTABLE(), set() not SET().

        * CMakeLists.txt:
        * PlatformBlackBerry.cmake:
        * PlatformEfl.cmake:
        * PlatformWinCE.cmake:
        * UseJSC.cmake:
        * UseV8.cmake:

2012-12-05  Kentaro Hara  <haraken@chromium.org>

        [V8] Remove unused property names from V8HiddenPropertyName
        https://bugs.webkit.org/show_bug.cgi?id=104194

        Reviewed by Adam Barth.

        We can remove unused property names from V8HiddenPropertyName.

        No tests. No change in behavior.

        * bindings/v8/V8HiddenPropertyName.h:
        (WebCore):

2012-12-05  Greg Billock  <gbillock@google.com>

        Add runtime enable for web intents.
        https://bugs.webkit.org/show_bug.cgi?id=103669

        Reviewed by Adam Barth.

        Make web intents Javascript API enabled by a runtime setting.

        * Modules/intents/DOMWindowIntents.idl:
        * Modules/intents/NavigatorIntents.idl:
        * bindings/generic/RuntimeEnabledFeatures.cpp:
        (WebCore):
        * bindings/generic/RuntimeEnabledFeatures.h:
        (RuntimeEnabledFeatures):
        (WebCore::RuntimeEnabledFeatures::webkitStartActivityEnabled):
        (WebCore::RuntimeEnabledFeatures::webkitIntentEnabled):
        (WebCore::RuntimeEnabledFeatures::webKitIntentEnabled):
        (WebCore::RuntimeEnabledFeatures::setWebIntentsEnabled):

2012-12-05  Scott Violet  <sky@chromium.org>

        [chromium] Remove linux theme related files and switch to default
        https://bugs.webkit.org/show_bug.cgi?id=103897

        Reviewed by Tony Chang.

        Linux related theme files are now named Default.

        No new tests, code cleanup.

        * WebCore.gyp/WebCore.gyp: Update files
        * WebCore.gypi: Update files
        * platform/chromium/PlatformThemeChromiumLinux.cpp: Removed.
        * platform/chromium/PlatformThemeChromiumLinux.h: Removed.
        * platform/chromium/ScrollbarThemeChromiumLinux.cpp: Removed.
        * platform/chromium/ScrollbarThemeChromiumLinux.h: Removed.
        * rendering/RenderThemeChromiumAndroid.cpp:
        (WebCore::RenderThemeChromiumAndroid::extraDefaultStyleSheet): Linux->Default
        * rendering/RenderThemeChromiumAndroid.h: Change superclass
        * rendering/RenderThemeChromiumLinux.cpp: Removed.
        * rendering/RenderThemeChromiumLinux.h: Removed.

2012-12-05  Joshua Bell  <jsbell@chromium.org>

        IndexedDB: Allow multiple transactions to interleave request execution
        https://bugs.webkit.org/show_bug.cgi?id=97570

        Reviewed by Tony Chang.

        Implement spec logic for allowing read-only transactions, and read-write transactions
        with non-overlapping scopes, to run concurrently. Transactions all still run in the
        same thread with tasks triggered via timers, so tasks and the underlying database
        operations are interleaved rather than truly parallelized.

        Within IDBTransactionCoordinator, rename started->queued, running->started to match
        spec terminology and clear up confusion.

        Test: storage/indexeddb/transaction-coordination-across-databases.html
              storage/indexeddb/transaction-coordination-within-database.html
              storage/indexeddb/transaction-readwrite-exclusive.html
              storage/indexeddb/transaction-scope-sequencing.html
              storage/indexeddb/transaction-starvation.html

        * Modules/indexeddb/IDBDatabaseBackendImpl.cpp: Use IDBTransaction::Mode enum
        (WebCore::IDBDatabaseBackendImpl::createTransaction):
        * Modules/indexeddb/IDBDatabaseBackendImpl.h: Ditto.
        (IDBDatabaseBackendImpl):
        * Modules/indexeddb/IDBDatabaseBackendInterface.h: Ditto.
        (IDBDatabaseBackendInterface):
        * Modules/indexeddb/IDBTransactionBackendImpl.cpp: Convert scope as a HashSet for
        fast intersecting.
        (WebCore::IDBTransactionBackendImpl::create):
        (WebCore::IDBTransactionBackendImpl::IDBTransactionBackendImpl):
        * Modules/indexeddb/IDBTransactionBackendImpl.h:
        (IDBTransactionBackendImpl):
        (WebCore::IDBTransactionBackendImpl::mode):
        (WebCore::IDBTransactionBackendImpl::scope):
        * Modules/indexeddb/IDBTransactionCoordinator.cpp: Spec logic goes here.
        (WebCore::IDBTransactionCoordinator::processStartedTransactions): Extend this
        method to test all plausibly runnable transactions.
        (WebCore):
        (WebCore::IDBTransactionCoordinator::canRunTransaction): Test to see if one
        particular transaction can be run.
        (WebCore::IDBTransactionCoordinator::doScopesOverlap): Do a quick intersection
        test between transaction scopes.
        * Modules/indexeddb/IDBTransactionCoordinator.h:
        (IDBTransactionCoordinator):

2012-12-05  No'am Rosenthal  <noam@webkit.org>

        Coordinated Graphics: Enable support for setContentsToBackgroundColor
        https://bugs.webkit.org/show_bug.cgi?id=104128

        Reviewed by Kenneth Rohde Christiansen.

        Enable background color in GraphicsLayerTextureMapper, and paint it using TextureMapper::drawSolidColor.
        Once https://bugs.webkit.org/show_bug.cgi?id=103786 is enabled, this would enable Qt/GTK/EFL to directly
        composite colors that only have a background color, without having to create a backing store for them.
        This would eliminate the memory usage for those layers, reduce the time needed for them to draw into the
        backing store and upload the texture, and in the future allow direct compositing of things other than
        background colors.

        Compositing tests cover this, but are still skipped for ports using coordinated graphics. 
        See https://bugs.webkit.org/show_bug.cgi?id=104129.

        * platform/graphics/texmap/GraphicsLayerTextureMapper.cpp:
        (WebCore::GraphicsLayerTextureMapper::setContentsToBackgroundColor):
        (WebCore::GraphicsLayerTextureMapper::backgroundColor):
            Maintain a backgroundColor member variable in GraphicsLayerTextureMapper

        * platform/graphics/texmap/TextureMapperGL.cpp:
        (WebCore::TextureMapperGL::drawSolidColor):
            TextureMapperGL::drawSolidColor should allow blending when the solid color has alpha.

        * platform/graphics/texmap/TextureMapperLayer.cpp:
        (WebCore::TextureMapperLayer::paintSelf):
        (WebCore::TextureMapperLayer::flushCompositingStateSelf):
        * platform/graphics/texmap/TextureMapperLayer.h:
        (State):

2012-12-05  Kentaro Hara  <haraken@chromium.org>

        Unreviewed, rolling out r136481.
        http://trac.webkit.org/changeset/136481
        https://bugs.webkit.org/show_bug.cgi?id=103868

        it might have regressed dom_perf/CloneNodes (See bug 104177)

        * dom/ContainerNodeAlgorithms.h:
        (ChildNodeInsertionNotifier):
        (WebCore::ChildNodeInsertionNotifier::notifyNodeInsertedIntoDocument):
        (WebCore::ChildNodeInsertionNotifier::notifyNodeInsertedIntoTree):
        (WebCore::ChildNodeInsertionNotifier::notify):

2012-12-05  David Grogan  <dgrogan@chromium.org>

        IndexedDB: Abort transactions because of leveldb errors part 3
        https://bugs.webkit.org/show_bug.cgi?id=103960

        Reviewed by Tony Chang.

        Transactions are aborted when there are leveldb problems creating
        indexes on an object store with existing data or when adding data to an
        objectstore that has indexes.

        * Modules/indexeddb/IDBObjectStoreBackendImpl.cpp:
        (WebCore):
        (WebCore::makeIndexWriters):
        (WebCore::IDBObjectStoreBackendImpl::setIndexKeys):
        (WebCore::IDBObjectStoreBackendImpl::ObjectStoreStorageOperation::perform):

2012-12-05  Simon Fraser  <simon.fraser@apple.com>

        Fix some repaint/paintCounter confusion, and reset it when getting layers out of the layer pool
        https://bugs.webkit.org/show_bug.cgi?id=104180

        Reviewed by Tim Horton.

        Layers retrieved from the LayerPool by TileCache need to have their
        repaint counters reset, otherwise the scroll performance logging gets
        confused.
        
        Also, the counter counts paints, not repaints (invalidations), so
        rename it accordingly.

        * page/scrolling/mac/ScrollingTreeScrollingNodeMac.mm:
        (WebCore::ScrollingTreeScrollingNodeMac::logExposedUnfilledArea): Whitespace fix.
        * platform/graphics/GraphicsLayer.h:
        * platform/graphics/ca/mac/TileCache.mm:
        (WebCore::TileCache::blankPixelCountForTiles):
        (WebCore::TileCache::createTileLayer):
        (WebCore::TileCache::drawRepaintCounter):
        * platform/graphics/ca/mac/WebTileLayer.h:
        * platform/graphics/ca/mac/WebTileLayer.mm:
        (-[WebTileLayer resetPaintCount]):
        (-[WebTileLayer incrementPaintCount]):
        (-[WebTileLayer paintCount]):
        (-[WebTileLayer logFilledFreshTile]):

2012-12-05  Oliver Hunt  <oliver@apple.com>

        Empty parse cache when receiving a low memory warning
        https://bugs.webkit.org/show_bug.cgi?id=104161

        Reviewed by Filip Pizlo.

        Use new discardAllCode() function on the global data, rather than
        directly interacting with the heap.

        * bindings/js/GCController.cpp:
        (WebCore::GCController::discardAllCompiledCode):

2012-12-05  Dan Bernstein  <mitz@apple.com>

        Text decorations are rotated when text-combine takes effect
        https://bugs.webkit.org/show_bug.cgi?id=104172

        Reviewed by Dave Hyatt.

        Test: fast/text/decorations-with-text-combine.html

        * rendering/InlineTextBox.cpp:
        (WebCore::InlineTextBox::paint): Applied a rotation to the graphics context when painting
        the text decorations for combined text.

2012-12-05  Justin Novosad  <junov@google.com>

        [skia] Improve performance of GraphicsContext::createCompatibleBuffer by using SkDevice:createCompatibleDevice
        https://bugs.webkit.org/show_bug.cgi?id=103896

        Reviewed by Stephen White.

        Refactored GraphicsContext::createCompatibleBuffer (platform common
        code) to use platform-specific implementations provided by ImageBuffer.
        There is no change in behavior for non-skia ports. The skia
        implementation uses skia'a own createCompatibleDevice implementation,
        which offers several performance benefits:
        1. For accelerated contexts, the backing store may be allocated from
        the scratch texture pool, which minimizes texture allocation and
        deallocation overhead.
        2. The backing store will not be initially cleared if it is known
        in advance that fully opaque contents will be drawn into the buffer.
        3. For non-accelerated contexts, if the backing store is flagged as
        opaque, faster blitter loop implementations will be used for drawing
        the buffer contents into other buffers. (e.g. generated opaque gradient
        fills)

        No new tests: covered by existing layout tests 

        * platform/graphics/Generator.h:
        (Generator):
        Added hasAlpha method so that it can be used by GeneratorGeneratedImage
        * platform/graphics/GeneratorGeneratedImage.cpp:
        (WebCore::GeneratorGeneratedImage::drawPattern):
        Passing m_generator->hasAlpha() to createCompatibleBuffer in order to
        take advantage of optimizations that apply to opaque buffers.
        * platform/graphics/Gradient.h:
        (Gradient):
        Made hasAlpha virtual so that it now overrides Generator::hasAlpha
        * platform/graphics/GraphicsContext.cpp:
        (WebCore::GraphicsContext::createCompatibleBuffer):
        Refactored to use platform-specific implementation
        * platform/graphics/GraphicsContext.h:
        * platform/graphics/ImageBuffer.cpp:
        (WebCore::createCompatibleBuffer):
        Non-skia implementation. Mimics old
        GraphicsContext::createCompatibleBuffer
        * platform/graphics/ImageBuffer.h:
        (ImageBuffer):
        New skia-specific constructor
        * platform/graphics/skia/ImageBufferSkia.cpp:
        (WebCore::ImageBuffer::createCompatibleBuffer):
        (WebCore::ImageBuffer::ImageBuffer):
        * platform/graphics/skia/PlatformContextSkia.cpp:
        (WebCore::PlatformContextSkia::createCompatibleDevice):
        (WebCore):
        * platform/graphics/skia/PlatformContextSkia.h:
        (PlatformContextSkia):

2012-12-05  Alexis Menard  <alexis@webkit.org>

        REGRESSION (r136683): css3/calc/background-position-parsing.html failing on EFL Linux 64-bit Debug WK2
        https://bugs.webkit.org/show_bug.cgi?id=104131

        Reviewed by Antti Koivisto.

        css3/calc/background-position-parsing.html assert in debug because we
        call CSSParser::validUnit multiple times in a row. The problem was with
        validUnit which check calc() values and save the result inside
        m_parsedCalculation for later usage. validUnit expects you to
        use m_parsedCalculation therefore calling validUnit again with
        m_parsedCalculation being set asserts. As parseFillBackgroundPosition
        just want to check wether the current value is maybe valid for
        background-position we can just relax the check to allow either the
        valid keywords or any other units (we will anyway filter the incorrect
        values later in the parsing). The most important check at this point
        for the shorthand is the validity of the keyword.

        No new tests : the assert was covered by css3/calc/background-position-parsing.html.

        * css/CSSParser.cpp:
        (WebCore::CSSParser::isPotentialPositionValue):
        (WebCore::CSSParser::parseFillBackgroundPosition):
        * css/CSSParser.h:

2012-12-05  Stephen White  <senorblanco@chromium.org>

        Unreviewed, rolling out r136735.
        http://trac.webkit.org/changeset/136735
        https://bugs.webkit.org/show_bug.cgi?id=102699

        Broke Chrome/Win build.

        * platform/chromium/PlatformSupport.h:
        (PlatformSupport):
        * platform/chromium/ScrollbarThemeChromiumWin.cpp:
        (WebCore::ScrollbarThemeChromiumWin::paintTrackPiece):
        (WebCore::ScrollbarThemeChromiumWin::paintButton):
        (WebCore::ScrollbarThemeChromiumWin::paintThumb):
        * rendering/RenderThemeChromiumWin.cpp:
        (WebCore):
        (WebCore::RenderThemeChromiumWin::paintButton):
        (WebCore::RenderThemeChromiumWin::paintSliderTrack):
        (WebCore::RenderThemeChromiumWin::paintSliderThumb):
        (WebCore::RenderThemeChromiumWin::paintMenuList):
        (WebCore::RenderThemeChromiumWin::paintTextFieldInternal):
        (WebCore::RenderThemeChromiumWin::paintInnerSpinButton):
        (WebCore::RenderThemeChromiumWin::paintProgressBar):

2012-12-05  Jun Jiang  <jun.a.jiang@intel.com>

        WebGL: use pointer to the source data for Image directly in texImage2D and texSubImage2D to avoid memory copy if no conversion is needed
        https://bugs.webkit.org/show_bug.cgi?id=103885

        Reviewed by Kenneth Russell.

        In texImage2D() and texSubImage2D(), there is a redundant memory copy from Image data to the intermediate vector when no conversion is needed. If the Image resource can be locked properly, it is better to use the pointer to the image source directly and hence avoid the memory copy and improve the performance. 

        Already covered by current tests.

        * html/canvas/WebGLRenderingContext.cpp:
        (WebCore):
        (WebCore::WebGLRenderingContext::texImage2DBase):
        (WebCore::WebGLRenderingContext::texImage2DImpl):
        (WebCore::WebGLRenderingContext::texSubImage2DBase):
        (WebCore::WebGLRenderingContext::texSubImage2DImpl):
        * html/canvas/WebGLRenderingContext.h:
        (WebGLRenderingContext):
        * platform/graphics/GraphicsContext3D.h:
        (ImageExtractor):

2012-12-05  Elliott Sprehn  <esprehn@chromium.org>

        Add infrastructure for :before and :after in DOM
        https://bugs.webkit.org/show_bug.cgi?id=103705

        Reviewed by Eric Seidel.

        Add all infrastructure for reimplementing generated content :before and
        :after as DOM Elements. Now ElementRareData has two pointers to PseudoElements
        for the generated content and Node has methods for traversing the tree
        including generated content.

        This will allow the generated content to be treated as real nodes instead
        of anonymous and take part in the usual recalcStyle and attach flow which
        fixes many bugs and vastly simplifies the ifecycle of generated content.

        Instead of attempting to land both the infrastructure and enable it at
        the same time which has proven problematic due to how drastic this change
        is, this patch contains only the support code so a much smaller future
        patch can be used to switch it on.

        No new behavior, this is just the infrastructure.

        * CMakeLists.txt:
        * GNUmakefile.list.am:
        * Target.pri:
        * WebCore.gypi:
        * WebCore.vcproj/WebCore.vcproj:
        * WebCore.xcodeproj/project.pbxproj:
        * dom/DOMAllInOne.cpp:
        * dom/Element.cpp:
        (WebCore::Element::~Element):
        (WebCore::Element::detach):
        (WebCore::Element::updatePseudoElement):
        (WebCore::Element::createPseudoElementIfNeeded):
        (WebCore::Element::beforePseudoElement):
        (WebCore::Element::afterPseudoElement):
        * dom/Element.h:
        (Element):
        * dom/ElementRareData.h:
        (ElementRareData):
        (WebCore::ElementRareData::ElementRareData):
        (WebCore::ElementRareData::~ElementRareData):
        (WebCore::ElementRareData::setPseudoElement):
        (WebCore::ElementRareData::pseudoElement):
        (WebCore::ElementRareData::releasePseudoElement):
        * dom/Node.cpp:
        (WebCore::Node::pseudoAwarePreviousSibling):
        (WebCore::Node::pseudoAwareNextSibling):
        (WebCore::Node::rendererIsEditable):
        (WebCore::checkAcceptChild):
        * dom/Node.h:
        (Node):
        (WebCore::Node::isPseudoElement):
        (WebCore::Node::isBeforePseudoElement):
        (WebCore::Node::isAfterPseudoElement):
        (WebCore::Node::pseudoId):
        (WebCore::Node::customPseudoId):
        * dom/NodeRenderingContext.cpp:
        (WebCore::NodeRenderingContext::nextRenderer):
        (WebCore::NodeRenderingContext::previousRenderer):
        * dom/Position.cpp:
        (WebCore::Position::hasRenderedNonAnonymousDescendantsWithHeight):
        * dom/PseudoElement.cpp: Added.
        (WebCore::pseudoElementTagName):
        (WebCore::PseudoElement::PseudoElement):
        (WebCore::PseudoElement::customStyleForRenderer):
        (WebCore::PseudoElement::attach):
        (WebCore::PseudoElement::rendererIsNeeded):
        (WebCore::PseudoElement::updateChildStyle):
        (WebCore::PseudoElement::didRecalcStyle):
        * dom/PseudoElement.h: Added.
        (PseudoElement):
        (WebCore::PseudoElement::create):
        (WebCore::pseudoElementIsNeeded):
        * editing/visible_units.cpp:
        (WebCore::logicallyPreviousBox):
        (WebCore::logicallyNextBox):
        (WebCore::startPositionForLine):
        (WebCore::endPositionForLine):
        * page/animation/AnimationController.cpp:
        (WebCore::AnimationController::updateAnimations):
        * rendering/HitTestResult.cpp:
        (WebCore::HitTestResult::setInnerNode):
        (WebCore::HitTestResult::setInnerNonSharedNode):
        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::isSelectionRoot):
        (WebCore::RenderBlock::renderName):
        * rendering/RenderCounter.cpp:
        (WebCore::RenderCounter::originalText):
        * rendering/RenderDeprecatedFlexibleBox.cpp:
        (WebCore::RenderDeprecatedFlexibleBox::renderName):
        * rendering/RenderInline.cpp:
        (WebCore::RenderInline::renderName):
        * rendering/RenderMultiColumnBlock.cpp:
        (WebCore::RenderMultiColumnBlock::renderName):
        * rendering/RenderObject.cpp:
        (WebCore::RenderObject::createObject):
        (WebCore::RenderObject::setPseudoStyle):
        (WebCore::RenderObject::createVisiblePosition):
        * rendering/RenderObject.h:
        (WebCore::RenderObject::isPseudoElement):
        (RenderObject):
        (WebCore::RenderObject::generatingNode):
        * rendering/RenderTableCell.h:
        (WebCore::RenderTableCell::renderName):
        * rendering/RenderTableRow.h:
        (WebCore::RenderTableRow::renderName):
        * rendering/RenderTableSection.h:
        (WebCore::RenderTableSection::renderName):
        * rendering/RenderTreeAsText.cpp:
        (WebCore::RenderTreeAsText::writeRenderObject):
        * rendering/style/ContentData.cpp:
        (WebCore::ImageContentData::createRenderer):
        (WebCore::TextContentData::createRenderer):
        (WebCore::CounterContentData::createRenderer):
        (WebCore::QuoteContentData::createRenderer):

2012-12-05  Justin Novosad  <junov@google.com>

        Use of uninitialized variable in WebCore::RenderBox::paintFillLayers
        https://bugs.webkit.org/show_bug.cgi?id=104154

        Reviewed by Stephen White.

        Method FillLayer::clipOccludesNextLayers performs an internal
        initialization when called on the first layer of a list of layers.
        Without this initialization, calls to clipOccludesNextLayers on
        subsequent layers will use uninitialized data.  In some cases, the
        call to clipOccludesNextLayers was being short-circuited in
        RenderBox::paintFillLayers. 
        Fix: Predicate was permuted to ensure that clipOccludesNextLayers
        is never short-circuited.
        
        Test: fast/backgrounds/size/contain-and-cover-zoomed.html
        Running with valgrind reveals the error.

        * rendering/RenderBox.cpp:
        (WebCore::RenderBox::paintFillLayers):

2012-12-05  Elliott Sprehn  <esprehn@gmail.com>

        Encapsulate ElementRareData for possible future sharing
        https://bugs.webkit.org/show_bug.cgi?id=103948

        Reviewed by Eric Seidel.

        Encapsulate ElementRareData and make all access go through getters and
        setters. This is already true for NodeRareData, but ElementRareData
        had many places where people directly access it.

        This the first step in possible future sharing of ElementRareData
        instances across nodes. All nodes in a shadow tree have rare data to
        store the TreeScope, but in most cases all they have is the TreeScope!
        Instead of making every node in a shadow subtree have rare data
        and use lots of memory we could just share a single instance of rare data
        and only allocate a unique one on modification. Encapsulation lets us
        assert about mutations on shared instances.

        * dom/Element.cpp:
        (WebCore::Element::~Element):
        (WebCore::Element::attributes):
        (WebCore::Element::shadow):
        (WebCore::Element::ensureShadow):
        (WebCore::Element::minimumSizeForResizing):
        (WebCore::Element::setMinimumSizeForResizing):
        (WebCore::Element::computedStyle):
        (WebCore::Element::classList):
        (WebCore::Element::optionalClassList):
        (WebCore::Element::dataset):
        (WebCore::Element::hasNamedNodeMap):
        (WebCore::Element::savedLayerScrollOffset):
        (WebCore::Element::setSavedLayerScrollOffset):
        * dom/ElementRareData.cpp:
        (WebCore::ElementRareData::reportMemoryUsage):
        * dom/ElementRareData.h:
        (WebCore::ElementRareData::needsFocusAppearanceUpdateSoonAfterAttach):
        (WebCore::ElementRareData::setNeedsFocusAppearanceUpdateSoonAfterAttach):
        (ElementRareData):
        (WebCore::ElementRareData::styleAffectedByEmpty):
        (WebCore::ElementRareData::setStyleAffectedByEmpty):
        (WebCore::ElementRareData::isInCanvasSubtree):
        (WebCore::ElementRareData::setIsInCanvasSubtree):
        (WebCore::ElementRareData::containsFullScreenElement):
        (WebCore::ElementRareData::setContainsFullScreenElement):
        (WebCore::ElementRareData::isInTopLayer):
        (WebCore::ElementRareData::setIsInTopLayer):
        (WebCore::ElementRareData::childrenAffectedByHover):
        (WebCore::ElementRareData::setChildrenAffectedByHover):
        (WebCore::ElementRareData::childrenAffectedByActive):
        (WebCore::ElementRareData::setChildrenAffectedByActive):
        (WebCore::ElementRareData::childrenAffectedByDrag):
        (WebCore::ElementRareData::setChildrenAffectedByDrag):
        (WebCore::ElementRareData::childrenAffectedByFirstChildRules):
        (WebCore::ElementRareData::setChildrenAffectedByFirstChildRules):
        (WebCore::ElementRareData::childrenAffectedByLastChildRules):
        (WebCore::ElementRareData::setChildrenAffectedByLastChildRules):
        (WebCore::ElementRareData::childrenAffectedByDirectAdjacentRules):
        (WebCore::ElementRareData::setChildrenAffectedByDirectAdjacentRules):
        (WebCore::ElementRareData::childrenAffectedByForwardPositionalRules):
        (WebCore::ElementRareData::setChildrenAffectedByForwardPositionalRules):
        (WebCore::ElementRareData::childrenAffectedByBackwardPositionalRules):
        (WebCore::ElementRareData::setChildrenAffectedByBackwardPositionalRules):
        (WebCore::ElementRareData::childIndex):
        (WebCore::ElementRareData::setChildIndex):
        (WebCore::ElementRareData::shadow):
        (WebCore::ElementRareData::setShadow):
        (WebCore::ElementRareData::attributeMap):
        (WebCore::ElementRareData::setAttributeMap):
        (WebCore::ElementRareData::computedStyle):
        (WebCore::ElementRareData::setComputedStyle):
        (WebCore::ElementRareData::classList):
        (WebCore::ElementRareData::setClassList):
        (WebCore::ElementRareData::dataset):
        (WebCore::ElementRareData::setDataset):
        (WebCore::ElementRareData::minimumSizeForResizing):
        (WebCore::ElementRareData::setMinimumSizeForResizing):
        (WebCore::ElementRareData::savedLayerScrollOffset):
        (WebCore::ElementRareData::setSavedLayerScrollOffset):
        (WebCore::ElementRareData::resetComputedStyle):
        * dom/NodeRareData.h:
        (NodeRareData):

2012-12-05  Mark Pilgrim  <pilgrim@chromium.org>

        [Chromium][Win] Remove theme-related functions from PlatformSupport
        https://bugs.webkit.org/show_bug.cgi?id=102699

        Reviewed by Adam Barth.

        Call theme engine directly instead of going through
        PlatformSupport. Part of a refactoring series. See tracking bug 82948.

        * platform/chromium/PlatformSupport.h:
        (PlatformSupport):
        * platform/chromium/ScrollbarThemeChromiumWin.cpp:
        (WebCore::ScrollbarThemeChromiumWin::paintTrackPiece):
        (WebCore::ScrollbarThemeChromiumWin::paintButton):
        * rendering/RenderThemeChromiumWin.cpp:
        (WebCore):
        (WebCore::RenderThemeChromiumWin::paintButton):
        (WebCore::RenderThemeChromiumWin::paintSliderTrack):
        (WebCore::RenderThemeChromiumWin::paintSliderThumb):
        (WebCore::RenderThemeChromiumWin::paintMenuList):
        (WebCore::RenderThemeChromiumWin::paintTextFieldInternal):
        (WebCore::RenderThemeChromiumWin::paintInnerSpinButton):
        (WebCore::RenderThemeChromiumWin::paintProgressBar):

2012-12-05  Stephen White  <senorblanco@chromium.org>

        Unreviewed, rolling out r136609.
        http://trac.webkit.org/changeset/136609
        https://bugs.webkit.org/show_bug.cgi?id=103793

        Breaking Chrome/Mac Debug builds.

        * html/canvas/WebGLRenderingContext.cpp:
        (WebCore):
        (WebCore::WebGLRenderingContext::create):
        * platform/chromium/support/GraphicsContext3DChromium.cpp:
        (WebCore::GraphicsContext3D::create):
        * platform/graphics/GraphicsContext3D.h:
        (Attributes):

2012-12-05  Bear Travis  <betravis@adobe.com>

        [CSS Exclusions] Enable shape-inside for multiple-segment polygons
        https://bugs.webkit.org/show_bug.cgi?id=91878

        Reviewed by David Hyatt.

        Patch adding support for multiple-segment polygons for shape-insides from
        the CSS Exclusions specification. The layout code has been modified to first
        support dividing text into multiple segments per line, and then to lay out
        multiple segments per line box.

        Tests:  fast/exclusions/shape-inside/shape-inside-multiple-segments-001.html
                fast/exclusions/shape-inside/shape-inside-multiple-segments-002.html
                fast/exclusions/shape-inside/shape-inside-multiple-segments-003.html
                fast/exclusions/shape-inside/shape-inside-multiple-segments-004.html

        * platform/text/BidiResolver.h:
        (WebCore::BidiCharacterRun::BidiCharacterRun):
        (BidiCharacterRun): Added a 'startsSegment' bitfield to track whether a
        run begins a new segment. The field is here, rather than in BidiRun, in
        order to save space. See Bug 100173.
        * rendering/BidiRun.h:
        (WebCore::BidiRun::BidiRun):
        (BidiRun): Set the initial value for 'startsSegment'.
        * rendering/ExclusionShapeInsideInfo.cpp:
        (WebCore::ExclusionShapeInsideInfo::computeSegmentsForLine): Clear the
        segment ranges when computing segments for a new line.
        * rendering/ExclusionShapeInsideInfo.h:
        (LineSegmentRange): Added a new type to track segment offsets.
        (WebCore::ExclusionShapeInsideInfo::segmentRanges): Added a getter for
        the line segment ranges vector.
        * rendering/InlineFlowBox.cpp:
        (WebCore::InlineFlowBox::placeBoxesInInlineDirection): Modified to call
        a refactored box placement algorithm that takes a beginning and end position.
        (WebCore::InlineFlowBox::placeBoxRangeInInlineDirection): Similar to the
        placeBoxes method, but takes an end position that may occur before the end
        of the line.
        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::exclusionShapeInsideInfo): Factored out calls
        to ExclusionShapeInsideInfo to the .cpp file, as ExclusionShapeInsideInfo
        requires InlineIterator.h, which would create a circular dependency in
        ExclusionShapeInsideInfo.h.
        * rendering/RenderBlock.h:
        (WebCore::RenderBlock::exclusionShapeInsideInfo): Modified to call
        exclusionShapeInsideInfo to be non-inline.
        * rendering/RenderBlockLineLayout.cpp:
        (WebCore::LineWidth::LineWidth): LineWidth now uses the number of computed
        segmentRanges to determine which LineSegment to use when calculating width.
        (WebCore::RenderBlock::createLineBoxes): Now takes a boolean to determine
        whether or not it can share the same parentBox as its siblings (segments
        must be able to position themselves separately in the RootInlineBox).
        (WebCore::RenderBlock::constructLine):
        (WebCore::computeExpansionForJustifiedText): Do include runs that start new
        segments when calculating justification for the current segment.
        (WebCore::RenderBlock::computeInlineDirectionPositionsForLine): Modified to
        use the computeInlineDirectionPositionsForSegment, which can position
        multiple segments of text per line.
        (WebCore::RenderBlock::computeInlineDirectionPositionsForSegment): Positions
        the given segment of text and calculates its layout offsets.
        (WebCore::constructBidiRuns): Modified some variables from 'endOfLine' to 'endOfSegment'.
        (WebCore::constructBidiRunsForLine): Construct the bidi runs for each segment in
        the given line.
        (WebCore::RenderBlock::layoutRunsAndFloatsInRange): Call constructBidiRunsForLine.
        (WebCore::RenderBlock::LineBreaker::nextLineBreak): Moved the line breaking code
        to break segments, with nextLineBreak iterating over segment breaks for the entire line.
        (WebCore::RenderBlock::LineBreaker::nextSegmentBreak): Calculates how much text a
        segment can hold. This code was originally in nextLineBreak.

2012-12-05  Stephen White  <senorblanco@chromium.org>

        Unreviewed, rolling out r136630.
        http://trac.webkit.org/changeset/136630
        https://bugs.webkit.org/show_bug.cgi?id=103555

        It's breaking Chrome/Win Debug builds.

        * platform/graphics/chromium/LazyDecodingPixelRef.cpp:
        (WebCore::LazyDecodingPixelRef::LazyDecodingPixelRef):
        * platform/graphics/chromium/LazyDecodingPixelRef.h:
        (LazyDecodingPixelRef):

2012-12-05  Andreas Kling  <akling@apple.com>

        REGRESSION(r136615): Incorrect style sharing in view-source documents.
        <http://webkit.org/b/104089>

        Reviewed by Antti Koivisto.

        Make sure we collect feature data about the default view-source style sheet before evaluating
        style sharing candidates, otherwise it won't know which class selectors to care about.

        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::collectFeatures):

2012-12-05  Mike West  <mkwst@chromium.org>

        Stop generating call stacks inside ContentSecurityPolicy
        https://bugs.webkit.org/show_bug.cgi?id=104126

        Reviewed by Yury Semikhatsky.

        Now that bug 100650 has made it possible for ConsoleMessage to generate
        call stacks, we can remove the stack being generated in
        ContentSecurityPolicy::logToConsole. We need the ScriptState*, however,
        so this patch makes it possible to pipe it through addConsoleMessage
        down into the guts of the inspector.

        This patch also removes an unused addConsoleMessage variant from
        ScriptExecutionContext, which should have been removed from the patch to
        100650 before landing it. My bad.

        * dom/Document.cpp:
        (WebCore::Document::addMessage):
        * dom/Document.h:
        (Document):
            Accept a ScriptState* parameter in Document::addMessage, and pass it
            through to Console::addMessage.
        * dom/ScriptExecutionContext.cpp:
        (WebCore::ScriptExecutionContext::addConsoleMessage):
        * dom/ScriptExecutionContext.h:
        (ScriptExecutionContext):
            Accept a ScriptState* parameter in Document::addMessage, and pass it
            through to ScriptExecutionContext::addMessage. Also, remove an unused
            variant of ScriptExecutionContext::addConsoleMessage that accepted
            only a call stack in addition to the basics.
        * inspector/ConsoleMessage.cpp:
        (WebCore::ConsoleMessage::ConsoleMessage):
        * inspector/ConsoleMessage.h:
        (ConsoleMessage):
            Accept a ScriptState* and pass it into autogenerateMetadata for
            call stack generational goodness.
        * inspector/InspectorConsoleAgent.cpp:
        (WebCore::InspectorConsoleAgent::addMessageToConsole):
            Accept a ScriptState* and pass it into addConsoleMessage.
        (WebCore::InspectorConsoleAgent::didFinishXHRLoading):
        (WebCore::InspectorConsoleAgent::didReceiveResponse):
        (WebCore::InspectorConsoleAgent::didFailLoading):
            Add an empty ScriptState parameter to the addConsoleMessage call.
        * inspector/InspectorConsoleAgent.h:
        (InspectorConsoleAgent):
        * inspector/InspectorConsoleInstrumentation.h:
        (WebCore::InspectorInstrumentation::addMessageToConsole):
        * inspector/InspectorInstrumentation.cpp:
        (WebCore):
        (WebCore::InspectorInstrumentation::addMessageToConsoleImpl):
        * inspector/InspectorInstrumentation.h:
        (InspectorInstrumentation):
        * page/Console.cpp:
        (WebCore::Console::addMessage):
        * page/Console.h:
        (Console):
            Pipe ScriptState through the intermediate classes.
        * page/ContentSecurityPolicy.cpp:
        (WebCore::ContentSecurityPolicy::logToConsole):
            Drop call stack generation, and pass ScriptState* into addConsoleMessage.
        * workers/WorkerContext.cpp:
        (WebCore::WorkerContext::addConsoleMessage):
        (WebCore::WorkerContext::addMessage):
        (WebCore::WorkerContext::addMessageToWorkerConsole):
        * workers/WorkerContext.h:
        (WorkerContext):
            Accept ScriptState* and pass it into addMessageToConsole.

2012-12-05  Rafael Weinstein  <rafaelw@chromium.org>

        DOMImplementation.createDocument should call appendChild rather than parserAppendChild to add docType and documentElement
        https://bugs.webkit.org/show_bug.cgi?id=104040

        Reviewed by Ojan Vafai.

        createDocument now calls appendChild.

        No new tests (no observable changes).

        * dom/ContainerNode.cpp:
        (WebCore::ContainerNode::parserAppendChild):
        * dom/DOMImplementation.cpp:
        (WebCore::DOMImplementation::createDocument):

2012-12-05  Alec Flett  <alecflett@chromium.org>

        IndexedDB: Stub out transaction-backend methods
        https://bugs.webkit.org/show_bug.cgi?id=103921

        Reviewed by Dimitri Glazkov.

        In preparation for a refactoring. Legacy methods 
        will be removed in https://bugs.webkit.org/show_bug.cgi?id=103923.

        No new tests, just adding unused methods for refactoring.

        * Modules/indexeddb/IDBCallbacks.h:
        (WebCore::IDBCallbacks::onUpgradeNeeded):
        * Modules/indexeddb/IDBDatabase.cpp:
        (WebCore::IDBDatabase::onAbort):
        (WebCore):
        (WebCore::IDBDatabase::onComplete):
        * Modules/indexeddb/IDBDatabase.h:
        (IDBDatabase):
        * Modules/indexeddb/IDBDatabaseBackendImpl.cpp:
        (WebCore::IDBDatabaseBackendImpl::createTransaction):
        (WebCore):
        * Modules/indexeddb/IDBDatabaseBackendImpl.h:
        (IDBDatabaseBackendImpl):
        (WebCore::IDBDatabaseBackendImpl::commit):
        (WebCore::IDBDatabaseBackendImpl::abort):
        * Modules/indexeddb/IDBDatabaseBackendInterface.h:
        (IDBDatabaseBackendInterface):
        * Modules/indexeddb/IDBDatabaseCallbacks.h:
        (IDBDatabaseCallbacks):
        * Modules/indexeddb/IDBDatabaseCallbacksImpl.cpp:
        (WebCore::IDBDatabaseCallbacksImpl::onAbort):
        (WebCore):
        (WebCore::IDBDatabaseCallbacksImpl::onComplete):
        * Modules/indexeddb/IDBDatabaseCallbacksImpl.h:
        (IDBDatabaseCallbacksImpl):
        * Modules/indexeddb/IDBFactoryBackendImpl.cpp:
        (WebCore::IDBFactoryBackendImpl::open):
        * Modules/indexeddb/IDBFactoryBackendImpl.h:
        (WebCore::IDBFactoryBackendImpl::open):
        (IDBFactoryBackendImpl):
        * Modules/indexeddb/IDBFactoryBackendInterface.h:
        (IDBFactoryBackendInterface):
        * Modules/indexeddb/IDBOpenDBRequest.cpp:
        (WebCore::IDBOpenDBRequest::onUpgradeNeeded):
        (WebCore):
        * Modules/indexeddb/IDBOpenDBRequest.h:
        (IDBOpenDBRequest):
        * Modules/indexeddb/IDBTransactionBackendInterface.h:
        (WebCore):
        * Modules/indexeddb/IDBTransactionCoordinator.h:

2012-11-27  Alec Flett  <alecflett@chromium.org>

        IndexedDB: remove IDBDatabaseBackendInterface::transaction()
        https://bugs.webkit.org/show_bug.cgi?id=102733

        Reviewed by Darin Fisher.

        Part 3 of a refactor, remove the old transaction() method.

        No new tests as this is just post-refactor cleanup.

        * Modules/indexeddb/IDBDatabaseBackendInterface.h:
        (IDBDatabaseBackendInterface):

2012-12-05  Robert Hogan  <robert@webkit.org>

        REGRESSION(r126683): Table cell are getting borders when the style doesn't mention any
        https://bugs.webkit.org/show_bug.cgi?id=101677

        Reviewed by Julien Chaffraix.

        The bordercolor attribute on a cell or row has no effect on FF and Opera, even when the parent
        table has a border attribute. IE displays the bordercolor of the cell and row in all cases except when
        the parent has no border attribute. WebKit's old behaviour (before r126683) was to display the
        bordercolor of the row but not the cells (I don't think this behaviour was particularly deliberate). No
        browser displays the bordercolor for a col or tbody element.

        Bring WebKit into line with Opera and FF by ignoring the bordercolor attribute on cells, rows, cols, rowgroups, and
        colgroups in all cases, regardless of whether the table has a border or not.

        Test: fast/table/td-bordercolor-attribute.html

        * html/HTMLTablePartElement.cpp:
        (WebCore::HTMLTablePartElement::isPresentationAttribute):
        (WebCore::HTMLTablePartElement::collectStyleForPresentationAttribute):

2012-12-05  Krzysztof Czech  <k.czech@samsung.com>

        [EFL][WK2] Introduce WebKit-EFL to Assistive Technologies
        https://bugs.webkit.org/show_bug.cgi?id=104000

        Reviewed by Chris Fleizach.

        Introduce Webkit-EFL so that Assistive Technologies can distinguish it.

        * accessibility/atk/WebKitAccessibleWrapperAtk.cpp:
        (webkitAccessibleGetAttributes):

2012-12-05  Carlos Garcia Campos  <cgarcia@igalia.com>

        Remove unneeded WTF prefix from WTF types in RenderFlexibleBox
        https://bugs.webkit.org/show_bug.cgi?id=104109

        Reviewed by Eric Seidel.

        WTF prefix is not needed because WTF headers have a using
        statement at the end of the file.

        * rendering/RenderFlexibleBox.cpp:
        (WebCore::RenderFlexibleBox::layoutBlock):
        (WebCore::RenderFlexibleBox::repositionLogicalHeightDependentFlexItems):
        (WebCore::RenderFlexibleBox::layoutFlexItems):
        (WebCore::RenderFlexibleBox::freezeViolations):
        (WebCore::RenderFlexibleBox::resolveFlexibleLengths):
        (WebCore::RenderFlexibleBox::layoutAndPlaceChildren):
        (WebCore::RenderFlexibleBox::alignFlexLines):
        (WebCore::RenderFlexibleBox::alignChildren):
        (WebCore::RenderFlexibleBox::flipForWrapReverse):
        * rendering/RenderFlexibleBox.h:

2012-12-05  Andras Becsi  <andras.becsi@digia.com>

        Fix compilation for Qt5.0.0 stable branch.
        https://bugs.webkit.org/show_bug.cgi?id=103870

        Reviewed by Simon Hausmann.

        This is a squashed patch consisting of patches by multiple authors.

        Fixed use of to-be-removed compatibility functions in QWindow
        Patch by Samuel Rødal <samuel.rodal@digia.com>

        Build fix. No new tests needed.

        * platform/graphics/gstreamer/PlatformVideoWindowQt.cpp:
        (FullScreenVideoWindow::FullScreenVideoWindow):
        (PlatformVideoWindow::PlatformVideoWindow):

2012-12-05  John J. Barton  <johnjbarton@chromium.org>

        Web Inspector: more robust treeoutline.findTreeElement
        https://bugs.webkit.org/show_bug.cgi?id=103911

        Reviewed by Vsevolod Vlasov.

        Non-recursive algorithm to populate the treeoutline given an DOMNode
        as representedObject. Walk up the parents from the desired object
        until we find one that is currently represented in the treeoutline 
        cache. Then walk down, putting children in the cache until we get 
        to the desired object again. 
        With Pavel Feldeman <pfeldman@chromium.org>

        No new tests, refactoring, no new function

       * inspector/front-end/treeoutline.js:
        (TreeOutline.prototype.findTreeElement):

2012-12-05  Alexander Shalamov  <alexander.shalamov@intel.com>

        [EFL][GTK] List value response headers are not handled in RespourceResponse (libsoup specific)
        https://bugs.webkit.org/show_bug.cgi?id=95181

        Reviewed by Martin Robinson.

        When list-value response headers are received, they are handled as single
        value headers. This patch fixes incorrect behavior. New test was added to
        verify list-value header handling.

        Test: http/tests/xmlhttprequest/xmlhttprequest-test-custom-headers.html

        * platform/network/soup/ResourceResponseSoup.cpp:
        (WebCore::ResourceResponse::updateFromSoupMessage):

2012-12-05  Pavel Feldman  <pfeldman@chromium.org>

        Web Inspector: Don't include error message text in the editor buffer.
        https://bugs.webkit.org/show_bug.cgi?id=103932

        Reviewed by Alexander Pavlov.

        Skip entire decoration content when collecting dirty regions.
        
        * inspector/front-end/DefaultTextEditor.js:
        (WebInspector.TextEditorMainPanel.prototype._collectLinesFromDOM):

2012-12-05  Joshua Bell  <jsbell@chromium.org>

        IndexedDB: Replace use of ScriptExecutionContext::Task (Part 2)
        https://bugs.webkit.org/show_bug.cgi?id=103931

        Reviewed by Tony Chang.

        Actually drop use of ScriptExecutionContext::Task and remove incorrect usage of
        ThreadSafeRefCounted<>. Define a new IDBTransactionBackendImpl::Operation base class
        for operations; storage of per-operation data becomes explicit.

        No new tests - just a refactor.

        * Modules/indexeddb/IDBCallbacks.h: Remove bogus "ThreadSafe"
        * Modules/indexeddb/IDBCursorBackendImpl.cpp:
        (WebCore::IDBCursorBackendImpl::CursorIterationOperation::create):
        (IDBCursorBackendImpl::CursorIterationOperation):
        (WebCore::IDBCursorBackendImpl::CursorIterationOperation::CursorIterationOperation):
        (WebCore::IDBCursorBackendImpl::CursorAdvanceOperation::create):
        (IDBCursorBackendImpl::CursorAdvanceOperation):
        (WebCore::IDBCursorBackendImpl::CursorAdvanceOperation::CursorAdvanceOperation):
        (WebCore::IDBCursorBackendImpl::CursorPrefetchIterationOperation::create):
        (IDBCursorBackendImpl::CursorPrefetchIterationOperation):
        (WebCore::IDBCursorBackendImpl::CursorPrefetchIterationOperation::CursorPrefetchIterationOperation):
        (WebCore::IDBCursorBackendImpl::CursorAdvanceOperation::perform):
        (WebCore::IDBCursorBackendImpl::CursorIterationOperation::perform):
        (WebCore::IDBCursorBackendImpl::CursorPrefetchIterationOperation::perform):
        * Modules/indexeddb/IDBCursorBackendInterface.h: Remove bogus "ThreadSafe"
        * Modules/indexeddb/IDBDatabase.cpp:
        * Modules/indexeddb/IDBDatabaseBackendImpl.cpp:
        (WebCore::IDBDatabaseBackendImpl::CreateObjectStoreOperation::create):
        (IDBDatabaseBackendImpl::CreateObjectStoreOperation):
        (WebCore::IDBDatabaseBackendImpl::CreateObjectStoreOperation::CreateObjectStoreOperation):
        (WebCore::IDBDatabaseBackendImpl::DeleteObjectStoreOperation::create):
        (IDBDatabaseBackendImpl::DeleteObjectStoreOperation):
        (WebCore::IDBDatabaseBackendImpl::DeleteObjectStoreOperation::DeleteObjectStoreOperation):
        (WebCore::IDBDatabaseBackendImpl::VersionChangeOperation::create):
        (IDBDatabaseBackendImpl::VersionChangeOperation):
        (WebCore::IDBDatabaseBackendImpl::VersionChangeOperation::VersionChangeOperation):
        (WebCore::IDBDatabaseBackendImpl::CreateObjectStoreAbortOperation::create):
        (IDBDatabaseBackendImpl::CreateObjectStoreAbortOperation):
        (WebCore::IDBDatabaseBackendImpl::CreateObjectStoreAbortOperation::CreateObjectStoreAbortOperation):
        (WebCore::IDBDatabaseBackendImpl::DeleteObjectStoreAbortOperation::create):
        (IDBDatabaseBackendImpl::DeleteObjectStoreAbortOperation):
        (WebCore::IDBDatabaseBackendImpl::DeleteObjectStoreAbortOperation::DeleteObjectStoreAbortOperation):
        (WebCore::IDBDatabaseBackendImpl::VersionChangeAbortOperation::create):
        (IDBDatabaseBackendImpl::VersionChangeAbortOperation):
        (WebCore::IDBDatabaseBackendImpl::VersionChangeAbortOperation::VersionChangeAbortOperation):
        (WebCore::IDBDatabaseBackendImpl::createObjectStore):
        (WebCore::IDBDatabaseBackendImpl::CreateObjectStoreOperation::perform):
        (WebCore::IDBDatabaseBackendImpl::deleteObjectStore):
        (WebCore::IDBDatabaseBackendImpl::DeleteObjectStoreOperation::perform):
        (WebCore::IDBDatabaseBackendImpl::VersionChangeOperation::perform):
        (WebCore::IDBDatabaseBackendImpl::runIntVersionChangeTransaction):
        (WebCore::IDBDatabaseBackendImpl::CreateObjectStoreAbortOperation::perform):
        (WebCore::IDBDatabaseBackendImpl::DeleteObjectStoreAbortOperation::perform):
        (WebCore::IDBDatabaseBackendImpl::VersionChangeAbortOperation::perform):
        * Modules/indexeddb/IDBDatabaseBackendInterface.h: Remove bogus "ThreadSafe"
        * Modules/indexeddb/IDBDatabaseCallbacks.h: Remove bogus "ThreadSafe"
        * Modules/indexeddb/IDBFactoryBackendImpl.cpp:
        * Modules/indexeddb/IDBFactoryBackendInterface.h: Remove bogus "ThreadSafe"
        * Modules/indexeddb/IDBIndexBackendImpl.cpp:
        (WebCore::IDBIndexBackendImpl::OpenIndexCursorOperation::create):
        (IDBIndexBackendImpl::OpenIndexCursorOperation):
        (WebCore::IDBIndexBackendImpl::OpenIndexCursorOperation::OpenIndexCursorOperation):
        (WebCore::IDBIndexBackendImpl::IndexCountOperation::create):
        (IDBIndexBackendImpl::IndexCountOperation):
        (WebCore::IDBIndexBackendImpl::IndexCountOperation::IndexCountOperation):
        (WebCore::IDBIndexBackendImpl::IndexReferencedValueRetrievalOperation::create):
        (IDBIndexBackendImpl::IndexReferencedValueRetrievalOperation):
        (WebCore::IDBIndexBackendImpl::IndexReferencedValueRetrievalOperation::IndexReferencedValueRetrievalOperation):
        (WebCore::IDBIndexBackendImpl::IndexValueRetrievalOperation::create):
        (IDBIndexBackendImpl::IndexValueRetrievalOperation):
        (WebCore::IDBIndexBackendImpl::IndexValueRetrievalOperation::IndexValueRetrievalOperation):
        (WebCore::IDBIndexBackendImpl::OpenIndexCursorOperation::perform):
        (WebCore::IDBIndexBackendImpl::openCursor):
        (WebCore::IDBIndexBackendImpl::openKeyCursor):
        (WebCore::IDBIndexBackendImpl::IndexCountOperation::perform):
        (WebCore::IDBIndexBackendImpl::count):
        (WebCore::IDBIndexBackendImpl::IndexReferencedValueRetrievalOperation::perform):
        (WebCore::IDBIndexBackendImpl::IndexValueRetrievalOperation::perform):
        (WebCore::IDBIndexBackendImpl::get):
        (WebCore::IDBIndexBackendImpl::getKey):
        * Modules/indexeddb/IDBIndexBackendInterface.h: Remove bogus "ThreadSafe"
        * Modules/indexeddb/IDBKey.h: Remove bogus "ThreadSafe"
        (IDBKey):
        * Modules/indexeddb/IDBKeyRange.h: Remove bogus "ThreadSafe"
        * Modules/indexeddb/IDBObjectStoreBackendImpl.cpp:
        (WebCore::IDBObjectStoreBackendImpl::ObjectStoreRetrievalOperation::create):
        (IDBObjectStoreBackendImpl::ObjectStoreRetrievalOperation):
        (WebCore::IDBObjectStoreBackendImpl::ObjectStoreRetrievalOperation::ObjectStoreRetrievalOperation):
        (WebCore::IDBObjectStoreBackendImpl::ObjectStoreStorageOperation::create):
        (IDBObjectStoreBackendImpl::ObjectStoreStorageOperation):
        (WebCore::IDBObjectStoreBackendImpl::ObjectStoreStorageOperation::ObjectStoreStorageOperation):
        (WebCore::IDBObjectStoreBackendImpl::ObjectStoreIndexesReadyOperation::create):
        (IDBObjectStoreBackendImpl::ObjectStoreIndexesReadyOperation):
        (WebCore::IDBObjectStoreBackendImpl::ObjectStoreIndexesReadyOperation::ObjectStoreIndexesReadyOperation):
        (WebCore::IDBObjectStoreBackendImpl::ObjectStoreDeletionOperation::create):
        (IDBObjectStoreBackendImpl::ObjectStoreDeletionOperation):
        (WebCore::IDBObjectStoreBackendImpl::ObjectStoreDeletionOperation::ObjectStoreDeletionOperation):
        (WebCore::IDBObjectStoreBackendImpl::ObjectStoreClearOperation::create):
        (IDBObjectStoreBackendImpl::ObjectStoreClearOperation):
        (WebCore::IDBObjectStoreBackendImpl::ObjectStoreClearOperation::ObjectStoreClearOperation):
        (WebCore::IDBObjectStoreBackendImpl::CreateIndexOperation::create):
        (IDBObjectStoreBackendImpl::CreateIndexOperation):
        (WebCore::IDBObjectStoreBackendImpl::CreateIndexOperation::CreateIndexOperation):
        (WebCore::IDBObjectStoreBackendImpl::DeleteIndexOperation::create):
        (IDBObjectStoreBackendImpl::DeleteIndexOperation):
        (WebCore::IDBObjectStoreBackendImpl::DeleteIndexOperation::DeleteIndexOperation):
        (WebCore::IDBObjectStoreBackendImpl::OpenObjectStoreCursorOperation::create):
        (IDBObjectStoreBackendImpl::OpenObjectStoreCursorOperation):
        (WebCore::IDBObjectStoreBackendImpl::OpenObjectStoreCursorOperation::OpenObjectStoreCursorOperation):
        (WebCore::IDBObjectStoreBackendImpl::ObjectStoreCountOperation::create):
        (IDBObjectStoreBackendImpl::ObjectStoreCountOperation):
        (WebCore::IDBObjectStoreBackendImpl::ObjectStoreCountOperation::ObjectStoreCountOperation):
        (WebCore::IDBObjectStoreBackendImpl::CreateIndexAbortOperation::create):
        (IDBObjectStoreBackendImpl::CreateIndexAbortOperation):
        (WebCore::IDBObjectStoreBackendImpl::CreateIndexAbortOperation::CreateIndexAbortOperation):
        (WebCore::IDBObjectStoreBackendImpl::DeleteIndexAbortOperation::create):
        (IDBObjectStoreBackendImpl::DeleteIndexAbortOperation):
        (WebCore::IDBObjectStoreBackendImpl::DeleteIndexAbortOperation::DeleteIndexAbortOperation):
        (WebCore::IDBObjectStoreBackendImpl::get):
        (WebCore::IDBObjectStoreBackendImpl::ObjectStoreRetrievalOperation::perform):
        (WebCore::IDBObjectStoreBackendImpl::put):
        (WebCore):
        (WebCore::IDBObjectStoreBackendImpl::setIndexesReady):
        (WebCore::IDBObjectStoreBackendImpl::ObjectStoreIndexesReadyOperation::perform):
        (WebCore::IDBObjectStoreBackendImpl::ObjectStoreStorageOperation::perform):
        (WebCore::IDBObjectStoreBackendImpl::deleteFunction):
        (WebCore::IDBObjectStoreBackendImpl::ObjectStoreDeletionOperation::perform):
        (WebCore::IDBObjectStoreBackendImpl::clear):
        (WebCore::IDBObjectStoreBackendImpl::ObjectStoreClearOperation::perform):
        (WebCore::IDBObjectStoreBackendImpl::createIndex):
        (WebCore::IDBObjectStoreBackendImpl::CreateIndexOperation::perform):
        (WebCore::IDBObjectStoreBackendImpl::deleteIndex):
        (WebCore::IDBObjectStoreBackendImpl::DeleteIndexOperation::perform):
        (WebCore::IDBObjectStoreBackendImpl::openCursor):
        (WebCore::IDBObjectStoreBackendImpl::OpenObjectStoreCursorOperation::perform):
        (WebCore::IDBObjectStoreBackendImpl::count):
        (WebCore::IDBObjectStoreBackendImpl::ObjectStoreCountOperation::perform):
        (WebCore::IDBObjectStoreBackendImpl::CreateIndexAbortOperation::perform):
        (WebCore::IDBObjectStoreBackendImpl::DeleteIndexAbortOperation::perform):
        * Modules/indexeddb/IDBObjectStoreBackendInterface.h: Remove bogus "ThreadSafe"
        * Modules/indexeddb/IDBRequest.h: Remove bogus "ThreadSafe"
        (IDBRequest):
        * Modules/indexeddb/IDBTransactionBackendImpl.cpp:
        (WebCore::IDBTransactionBackendImpl::IDBTransactionBackendImpl): Appease RefPtr<> adoption strictness.
        (WebCore::IDBTransactionBackendImpl::scheduleTask):
        (WebCore::IDBTransactionBackendImpl::abort):
        (WebCore::IDBTransactionBackendImpl::taskTimerFired):
        * Modules/indexeddb/IDBTransactionBackendImpl.h:
        (Operation):
        (WebCore::IDBTransactionBackendImpl::Operation::~Operation):
        (IDBTransactionBackendImpl):
        (WebCore::IDBTransactionBackendImpl::scheduleTask):
        * Modules/indexeddb/IDBTransactionBackendInterface.h: Remove bogus "ThreadSafe"

2012-12-05  Noel Gordon  <noel.gordon@gmail.com>

        ENABLE(IMAGE_DECODER_DOWN_SAMPLING): Don't swizzle decode down sampled images
        https://bugs.webkit.org/show_bug.cgi?id=103856

        Reviewed by Yong Li.

        For ports using ENABLE(IMAGE_DECODER_DOWN_SAMPLING), turbo swizzle decodes provide
        no speed-up when the decoded image will be down sampled because the data must pass
        through the buffer.setRGBA() slow path. That is not the swizzled path. Instead use
        JCS_RGB decodes to clarify the output color space handling in outputScanlines().

        No new tests. Covered by existing JPEG decoding tests.

        * platform/image-decoders/jpeg/JPEGImageDecoder.cpp:
        (WebCore::JPEGImageReader::decode): libjpeg-turbo swizzle decodes provides no real
        speed-up if the image will be down sampled. Revert to using JCS_RGA in this case.
        (WebCore::setPixel): Remove the libjpeg-turbo JCS_EXT_BGRA and JCS_EXT_RGBA cases.
        (WebCore::JPEGImageDecoder::outputScanlines): ditto.
        * platform/image-decoders/jpeg/JPEGImageDecoder.h:
        (WebCore::JPEGImageDecoder::willDownSample): Return true if image down sampling 
        will be applied to the decoded image (m_scaled). Note: the willDownSample() return
        value is valid only after setSize() has been called: add an ASSERT for that.

2012-12-05  Michael Pruett  <michael@68k.org>

        IndexedDB: Implement IndexedDB bindings for JSC
        https://bugs.webkit.org/show_bug.cgi?id=103484

        Reviewed by Kentaro Hara.

        IndexedDB is currently implemented only for V8. This change adds
        the bindings necessary for IndexedDB to work with JSC. With this
        patch, IndexedDB for JSC passes 112 out of the 196 layout tests in
        storage/indexeddb. IndexedDB is still not enabled for any JSC port.

        Tests: storage/indexeddb/*

        * CMakeLists.txt:
        * GNUmakefile.list.am:
        * Modules/indexeddb/IDBOpenDBRequest.idl:
        * Modules/indexeddb/IDBVersionChangeRequest.idl:
        * UseJSC.cmake:
        * WebCore.xcodeproj/project.pbxproj:
        * bindings/js/DOMRequestState.h: Added to match bindings/v8/DOMRequestState.h.
        (WebCore):
        (DOMRequestState):
        (WebCore::DOMRequestState::DOMRequestState):
        (WebCore::DOMRequestState::clear):
        (Scope):
        (WebCore::DOMRequestState::Scope::Scope):
        (WebCore::DOMRequestState::exec):
        * bindings/js/IDBBindingUtilities.cpp: Add utility functions matching those in bindings/v8/IDBBindingUtilities.cpp.
        (WebCore::get):
        (WebCore):
        (WebCore::canSet):
        (WebCore::set):
        (WebCore::createIDBKeyFromValue):
        (WebCore::getNthValueOnKeyPath):
        (WebCore::createIDBKeyFromScriptValueAndKeyPath):
        (WebCore::ensureNthValueOnKeyPath):
        (WebCore::canInjectNthValueOnKeyPath):
        (WebCore::injectIDBKeyIntoScriptValue):
        (WebCore::canInjectIDBKeyIntoScriptValue):
        (WebCore::deserializeIDBValue):
        (WebCore::idbKeyToScriptValue):
        * bindings/js/IDBBindingUtilities.h: Add utility functions matching those in bindings/v8/IDBBindingUtilities.h.
        (WebCore):
        * bindings/js/JSIDBAnyCustom.cpp:
        (WebCore::toJS):
        * bindings/js/JSIDBKeyCustom.cpp:
        (WebCore::toJS):
        * bindings/js/JSIDBVersionChangeRequestCustom.cpp: Removed.

2012-12-05  Antoine Quint  <graouts@apple.com>

        TextTrackCue's .endTime property should fire a TypeError when NaN is assigned
        https://bugs.webkit.org/show_bug.cgi?id=103413

        Reviewed by Eric Carlson.

        Check whether the new time passed to setStartTime() and setEndTime() is none of NaN or Infinity,
        otherwise throwing a TypeError.
        
        Thanks to this fix, we're no longer skipping media/track/opera/interfaces/TextTrackCue/endTime.html and
        media/track/opera/interfaces/TextTrackCue/startTime.html.

        * html/track/TextTrackCue.cpp:
        (WebCore::TextTrackCue::setStartTime):
        (WebCore::TextTrackCue::setEndTime):
        * html/track/TextTrackCue.h:
        (TextTrackCue):
        * html/track/TextTrackCue.idl:

2012-12-05  Alexis Menard  <alexis@webkit.org>

        [CSS3 Backgrounds and Borders] Allow the CSS3 background position offset for background shorthand.
        https://bugs.webkit.org/show_bug.cgi?id=104014

        Reviewed by Dirk Schulze.

        Add the support of the new <position> type if set from within the
        background shorthand. The patch just modify the way we count the values
        of the current context by checking wether we encounter a comma (it is
        then the next background layer), or if we encounter a '/' (which is in the
        background shorthand context the background-size) or any value that is
        not a valid background-position keyword or length (which means we are
        already parsing the next property of the background shorthand).

        Tests: LayoutTests/fast/backgrounds/background-position-parsing-2.html
        has been modified to cover this use case.

        * css/CSSParser.cpp:
        (WebCore::CSSParser::isPositionValue):
        (WebCore):
        (WebCore::CSSParser::parseFillBackgroundPosition):
        (WebCore::CSSParser::parseFillProperty):
        * css/CSSParser.h:

2012-12-05  Elliott Sprehn  <esprehn@gmail.com>

        ShadowRoot should recalcStyle for itself
        https://bugs.webkit.org/show_bug.cgi?id=103933

        Reviewed by Hajime Morita.

        ShadowRoot should support recalcStyle just like Element instead of
        having the code inside ElementShadow. This was once the case and
        the dead method prototype for recalcShadowTreeStyle is still in
        ShadowRoot.h.

        No new tests, just refactoring.

        * dom/ElementShadow.cpp:
        (WebCore::ElementShadow::recalcStyle):
        * dom/ShadowRoot.cpp:
        (WebCore::ShadowRoot::recalcStyle):
        * dom/ShadowRoot.h:

2012-12-05  Keishi Hattori  <keishi@webkit.org>

        Fix text direction in datalist popup for time controls
        https://bugs.webkit.org/show_bug.cgi?id=103853

        Reviewed by Kent Tamura.

        The datalist entry value should be displayed with the same text direction as the date/time format.

        Tests: platform/chromium/fast/forms/suggestion-picker/datetime-suggestion-picker-appearance-locale-hebrew.html
               platform/chromium/fast/forms/suggestion-picker/datetimelocal-suggestion-picker-appearance-locale-hebrew.html
               platform/chromium/fast/forms/suggestion-picker/time-suggestion-picker-appearance-locale-hebrew.html

        * Resources/pagepopups/calendarPicker.js: Renamed isCalendarRTL to isLocaleRTL.
        (CalendarPicker.prototype._layout):
        (CalendarPicker.prototype.fixWindowSize):
        (DaysTable.prototype._handleKey):
        (MonthPickerDaysTable.prototype._handleKey):
        (WeekPickerDaysTable.prototype._handleKey):
        * Resources/pagepopups/suggestionPicker.css:
        (.suggestion-list-entry .title): Title should have the same text direction as the locale.
        (.locale-rtl .suggestion-list-entry .title):
        * Resources/pagepopups/suggestionPicker.js:
        (SuggestionPicker.prototype._layout): Add locale-rtl class if the isLocaleRTL is true.

2012-12-05  Keishi Hattori  <keishi@webkit.org>

        Fix flickering when hiding page popup
        https://bugs.webkit.org/show_bug.cgi?id=104100

        Reviewed by Kent Tamura.

        Moving the page popup while hiding was causing flickering in some environments.

        No new tests. Can't reproduce in layout test.

        * Resources/pagepopups/pickerCommon.js:
        (hideWindow): Don't move and just resize.

2012-12-05  Allan Sandfeld Jensen  <allan.jensen@digia.com>

        [Qt] Don't rely on QMimeDatabase for essential MIME types
        https://bugs.webkit.org/show_bug.cgi?id=103865

        Based on patch by Pierre Rossi.
        Reviewed by Jocelyn Turcotte.

        Extend the short static list to also include MIME types essential to WebKit,
        and detect these first before checking the system mimedatabase.

        * platform/qt/MIMETypeRegistryQt.cpp:
        (WebCore::MIMETypeRegistry::getMIMETypeForExtension):
        (WebCore::MIMETypeRegistry::getMIMETypeForPath):

2012-12-05  Zoltan Herczeg  <zherczeg@webkit.org>

        Optimize ColorMatrix filter
        https://bugs.webkit.org/show_bug.cgi?id=103728

        Reviewed by Dirk Schulze.

        ColorMatrix filter recalculates several constants for
        every pixel. It is enough to do these calculations only
        once during the initialization. Style issues also fixed.

        Existing tests cover this feature.

        * platform/graphics/filters/FEColorMatrix.cpp:
        (WebCore::matrix):
        (WebCore::saturateAndHueRotate):
        (WebCore::effectType):

2012-12-05  Carlos Garcia Campos  <cgarcia@igalia.com>

        Flex item auto margins in the cross direction should safe center
        https://bugs.webkit.org/show_bug.cgi?id=103919

        Reviewed by Ojan Vafai.

        Do not apply auto margins for cross axis if there's no alignment
        space available.

        Test: css3/flexbox/flex-flow-auto-margins-no-available-space.html

        * rendering/RenderFlexibleBox.cpp:
        (WebCore::RenderFlexibleBox::alignChildren): Make sure we pass a
        positive value for availableAlignmentSpace to
        updateAutoMarginsInCrossAxis().

2012-12-05  Mike West  <mkwst@chromium.org>

        Web Inspector: Autogenerate stack traces and line numbers when possible.
        https://bugs.webkit.org/show_bug.cgi?id=100650

        Reviewed by Yury Semikhatsky.

        Console messages generated in WebCore generally are asked to do a bit of
        work in order to provide a developer with a detailed report. We ask the
        caller to either generate stack traces, or pass in a url/line number
        pair, which can be a bit of work. Predictably, most callers don't pass
        in what we'd like to see.

        This patch creates a new, simpler console message generation API that we
        expect most call sites to use. Source, type, level, and message are
        required, and an optional request ID can be passed in. Everything else
        will be autogenerated inside ConsoleMessage when appropriate.

        In a subsequent patch, we expect to be able to trim down more of the
        external call sites (ContentSecurityPolicy springs to mind) in order to
        further consolidate the external interface. Simple is good.

        * Modules/websockets/WebSocket.cpp:
        (WebCore::WebSocket::connect):
        * Modules/websockets/WebSocketChannel.cpp:
        (WebCore::WebSocketChannel::didFailSocketStream):
            Drop the now-redundant URL parameter from various WebSocket errors.
        * css/MediaList.cpp:
        (WebCore::addResolutionWarningMessageToConsole):
            Switch to Document::addConsoleMessage, which means that we can move
            line-number generation out of MediaList.
        * dom/Document.cpp:
        (WebCore::Document::logExceptionToConsole):
            Use the long-form 'addMessage()' rather than the public interface.
        (WebCore::Document::processHttpEquiv):
            Drop the URL parameter, as it's now autogenerated.
        (WebCore::Document::addConsoleMessage):
        (WebCore):
        * dom/Document.h:
        (Document):
            Override the pure virtual method on ScriptExecutionContext, and pass
            the call through to the new Console::addMessage, which accepts a
            pointer to the Document in order to do line-number generation.
        * dom/ScriptExecutionContext.h:
        (ScriptExecutionContext):
            Add a pure virtual variant of addConsoleMessage which accepts only
            bare minimum data, and expects autogeneration of the rest.
            Additionally, ensure that the other variants always have either a
            URL/line number, or a stack trace.
        * dom/ViewportArguments.cpp:
        (WebCore::reportViewportWarning):
            Drop line numbers and URLs from Viewport warnings. We can generate
            these now.
        * html/HTMLFormElement.cpp:
        (WebCore::HTMLFormElement::validateInteractively):
            Drop the URL from form autofocus warnings
        * html/HTMLIFrameElement.cpp:
        (WebCore::HTMLIFrameElement::parseAttribute):
            Drop the URL and line from sandbox attribute warnings.
        * html/canvas/WebGLRenderingContext.cpp:
        (WebCore):
        (WebCore::WebGLRenderingContext::printWarningToConsole):
            Drop the URL from WebGL warnings.
        * inspector/ConsoleMessage.cpp:
        (WebCore::ConsoleMessage::ConsoleMessage):
            Call 'autogenerateMetadata' to ensure that a stack trace is
            generated if one isn't provided. Create a new constructor that
            accepts a ScriptState/ScriptArguments pair, and use it for console
            API calls.
        (WebCore):
        (WebCore::ConsoleMessage::autogenerateMetadata):
            Generate a stack trace given whatever information we've got.
        * inspector/ConsoleMessage.h:
        (ConsoleMessage):
            Create a new constructor that accepts a ScriptState/ScriptArguments
            pair, and use it for console API calls.
        * inspector/InspectorConsoleAgent.cpp:
        (WebCore::InspectorConsoleAgent::enable):
            Use the short-form ConsoleMessage constructor.
        (WebCore::InspectorConsoleAgent::addMessageToConsole):
            Use the stack-only constructor, or the ScriptState
            constructor, as appropriate.
        (WebCore::InspectorConsoleAgent::count):
            We generated a stack, pass it in.
        * inspector/InspectorConsoleAgent.cpp:
        (WebCore::InspectorConsoleAgent::isWorkerAgent):
        * inspector/PageConsoleAgent.h:
        (WebCore::PageConsoleAgent::isWorkerAgent):
        * inspector/PageConsoleAgent.h:
        (WebCore::PageConsoleAgent::isWorkerAgent):
            We only want to generate call stacks for non-Workers (because
            createScriptCallStack explodes in JSC if we're not on the main
            thread). This method will allow us to distinguish between those
            messages generated from Workers, and those from Pages.
        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::shouldInterruptLoadForXFrameOptions):
        * loader/MainResourceLoader.cpp:
        (WebCore::MainResourceLoader::didReceiveResponse):
            Drop the URL parameter from the console message for X-Frame-Options
            parsing errors.
        * page/Console.cpp:
        (WebCore::Console::addMessage):
            When given a Document*, generate a line number if: 1) the document
            is still being parsed, 2) the document is not in document.write(),
            3) the parser isn't waiting for script, and 4) the parser isn't
            executing script. Many callsites didn't check all of these, which
            is why the SVG rebaseline (for example) drops lots and lots of line
            numbers which point at a closing '</script>' tag.
        (WebCore):
        * page/Console.h:
        (WebCore):
        (Console):
            Update the public API to accept a Document* and little else.
        * page/DOMWindow.cpp:
        (WebCore::DOMWindow::printErrorMessage):
            Don't generate a stack here. We can do it later.
        * svg/SVGDocumentExtensions.cpp:
        (WebCore::reportMessage):
            Drop the URL and line number. We'll generate them. It'll be sweet.
        * workers/WorkerContext.cpp:
        (WebCore::WorkerContext::addConsoleMessage):
        (WebCore):
        * workers/WorkerContext.h:
        (WorkerContext):
            Implement the new addConsoleMessage variant.

2012-12-04  Carlos Garcia Campos  <cgarcia@igalia.com>

        Reduce the children repaints when moved multiple times during the layout
        https://bugs.webkit.org/show_bug.cgi?id=103510

        Reviewed by Darin Adler.

        Cache the children positions before the layout and move to the
        final position after the layout.

        Test: css3/flexbox/repaint-column-reverse.html

        * rendering/RenderFlexibleBox.cpp:
        (WebCore::RenderFlexibleBox::OrderIterator::OrderIterator): Do not
        call first() on the consructor.
        (WebCore::RenderFlexibleBox::layoutBlock): Use a Vector with the
        children frame rects before the layout and call
        repaintChildrenDuringLayoutIfMoved() to repaint the children that
        have been moved.
        (WebCore::RenderFlexibleBox::appendChildrenFrameRects): Return a
        Vector with children frame rects.
        (WebCore::RenderFlexibleBox::repaintChildrenDuringLayoutIfMoved):
        Call repaintDuringLayoutIfMoved() for every children using the old
        frame rects.
        (WebCore::RenderFlexibleBox::setFlowAwareLocationForChild): Do not
        call repaintDuringLayoutIfMoved().
        (WebCore::RenderFlexibleBox::layoutFlexItems): Make sure the
        passed iterator points to the first child.
        * rendering/RenderFlexibleBox.h:

2012-12-05  Dan Carney  <dcarney@google.com>

        [V8] toV8Fast for all classes with ScriptWrapper Holder objects
        https://bugs.webkit.org/show_bug.cgi?id=102686

        Reviewed by Adam Barth.

        This patch makes most generated bindings use toV8Fast
        by adding a fast path to the main world DOMDataStore.
        Additionally, toV8Fast is now being called on callbacks
        which use v8::Arguments.

        No new tests. No change in functionality.

        * bindings/scripts/CodeGeneratorV8.pm:
        (GenerateHeader):
        (GenerateNormalAttrGetter):
        (GenerateFunctionCallString):
        (NativeToJSValue):
        * bindings/v8/DOMDataStore.cpp:
        (WebCore::DOMDataStore::mainWorldStore):
        (WebCore::DOMDataStore::current):
        * bindings/v8/DOMDataStore.h:

2012-12-05  Andrey Adaikin  <aandrey@chromium.org>

        Web Inspector: [Canvas] nit: add more typization for js compiler
        https://bugs.webkit.org/show_bug.cgi?id=103994

        Reviewed by Pavel Feldman.

        * inspector/InjectedScriptCanvasModuleSource.js:
        (.):

2012-12-05  Hans Muller  <hmuller@adobe.com>

        [CSS Exclusions] ExclusionShape inlines should use isFlippedBlocksWritingMode()
        https://bugs.webkit.org/show_bug.cgi?id=103939

        Reviewed by Dirk Schulze.

        Just a minor cleanup: the protected ExclusionShape inlines, like minYForLogicalLine(),
        now use isFlippedBlocksWritingMode() instead of testing for RightToLeftWritingMode directly.
        This changeimproves consistency with the rest of WebKit and will work correctly
        if "horizontal-bt" writing-mode support is ever added.

        No new tests were added since the existing tests cover these methods.

        * rendering/ExclusionShape.h:
        (WebCore::ExclusionShape::minYForLogicalLine):
        (WebCore::ExclusionShape::maxYForLogicalLine):
        (WebCore::ExclusionShape::internalToLogicalBoundingBox):

2012-12-05  Bear Travis  <betravis@adobe.com>

        Absolutely positioned non-replaced elements should resolve vertical margins against
        their containing block's logical width
        https://bugs.webkit.org/show_bug.cgi?id=103576

        Reviewed by Emil A Eklund.

        According to the CSS box model specification, all percentage margin & padding values,
        including top & bottom, should be resolved based on the containing block's width.
        http://www.w3.org/TR/CSS2/box.html#margin-properties
        The writing modes specification has refined this definition to use the containing
        block's logical width to resolve percentage margin & padding values.
        http://dev.w3.org/csswg/css3-writing-modes/#dimension-mapping

        Previously, positioned elements measured their container in the element's block
        direction (containerLogicalHeight) to resolve margin-before/after, and in the inline
        direction (containerLogicalWidth) to resolve margin-start/end. This patch measures the
        container's logical width in its own inline direction (containerRelativeLogicalWidth)
        to resolve all margin percentage values.

        Test: fast/writing-mode/percentage-margins-absolute.html

        * rendering/RenderBox.cpp:
        (WebCore::RenderBox::computePositionedLogicalWidthUsing): Calculate the logical width
        of the container, and use it to calculate margins.
        (WebCore::RenderBox::computePositionedLogicalHeightUsing): Ditto.

2012-12-04  Kentaro Hara  <haraken@chromium.org>

        [V8] Replace String::New("symbol") with String::NewSymbol("symbol") (part 2)
        https://bugs.webkit.org/show_bug.cgi?id=104082

        Reviewed by Adam Barth.

        V8 can look up symbols faster than strings.

        No tests. No change in behavior.

        * bindings/v8/custom/V8ArrayBufferViewCustom.cpp:
        (WebCore::getHiddenCopyMethod):
        (WebCore::installHiddenCopyMethod):
        * bindings/v8/custom/V8ArrayBufferViewCustom.h:
        (WebCore::constructWebGLArray):
        (WebCore::setWebGLArrayHelper):
        * bindings/v8/custom/V8CustomXPathNSResolver.cpp:
        (WebCore::V8CustomXPathNSResolver::lookupNamespaceURI):
        * bindings/v8/custom/V8DOMWindowCustom.cpp:
        (WebCore::DialogHandler::dialogCreated):
        (WebCore::DialogHandler::returnValue):
        * bindings/v8/custom/V8GeolocationCustom.cpp:
        (WebCore::createPositionOptions):
        * bindings/v8/custom/V8HTMLDocumentCustom.cpp:
        (WebCore::V8HTMLDocument::wrapInShadowObject):
        (WebCore::V8HTMLDocument::openCallback):
        * bindings/v8/custom/V8HTMLImageElementConstructor.cpp:
        (WebCore::V8HTMLImageElementConstructor::GetTemplate):
        * bindings/v8/custom/V8SQLTransactionCustom.cpp:
        (WebCore::V8SQLTransaction::executeSqlCallback):

2012-12-04  Elliott Sprehn  <esprehn@chromium.org>

        Clicking a scrollbar unfocuses the current activeElement
        https://bugs.webkit.org/show_bug.cgi?id=96335

        Reviewed by Ojan Vafai.

        Previously we only tested for clicks inside frame scrollbars before
        moving the focus, this patch expands the check to overflow scrollbars.
        Now clicking inside a scrollbar only moves the focus when the scrollbar
        has an ancestor that is mouse focusable.

        This matches Gecko behavior, and was agreed to be the most sensible for now:
        http://lists.whatwg.org/htdig.cgi/whatwg-whatwg.org/2012-October/037759.html

        Test: fast/overflow/scrollbar-click-retains-focus.html

        * page/EventHandler.cpp:
        (WebCore::EventHandler::handleMousePressEvent):
          Never start selections inside scrollbars because it would cause asserts. 
          This wasn't a problem before because we always moved the focus when clicking a scrollbar.        
        (WebCore::EventHandler::dispatchMouseEvent): 
          Check that the click is not inside a scrollbar before moving the focus.
        (WebCore::EventHandler::isInsideScrollbar): Tests if a point is in a scrollbar.
        (WebCore):
        (WebCore::EventHandler::sendContextMenuEvent):
          Never start selections inside scrollbars because it would cause asserts.
        * page/EventHandler.h:
        (EventHandler):
        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::hitTestOverflowControls):

2012-12-04  Kentaro Hara  <haraken@chromium.org>

        [V8] Replace String::New("symbol") with String::NewSymbol("symbol")
        https://bugs.webkit.org/show_bug.cgi?id=104084

        Reviewed by Adam Barth.

        V8 can look up symbols faster than strings. This is a final patch for the replacement.

        No tests. No change in behavior.

        * bindings/v8/DateExtension.cpp:
        (WebCore::DateExtension::setAllowSleep):
        (WebCore::DateExtension::GetNativeFunction):
        * bindings/v8/NPV8Object.cpp:
        (WebCore::npIdentifierToV8Identifier):
        (_NPN_Invoke):
        * bindings/v8/PageScriptDebugServer.cpp:
        (WebCore::PageScriptDebugServer::addListener):
        * bindings/v8/ScriptController.cpp:
        (WebCore::ScriptController::setContextDebugId):
        * bindings/v8/ScriptDebugServer.cpp:
        (WebCore::ScriptDebugServer::callDebuggerMethod):
        (WebCore::ScriptDebugServer::setBreakpoint):
        (WebCore::ScriptDebugServer::removeBreakpoint):
        (WebCore::ScriptDebugServer::clearBreakpoints):
        (WebCore::ScriptDebugServer::setBreakpointsActivated):
        (WebCore::ScriptDebugServer::handleV8DebugEvent):
        (WebCore::ScriptDebugServer::dispatchDidParseSource):
        * bindings/v8/ScriptObject.cpp:
        (WebCore::ScriptGlobalObject::set):
        (WebCore::ScriptGlobalObject::get):
        (WebCore::ScriptGlobalObject::remove):
        * bindings/v8/V8Binding.h:
        (WebCore::toV8Sequence):
        * bindings/v8/V8DOMWindowShell.cpp:
        (WebCore::setInjectedScriptContextDebugId):
        (WebCore::V8DOMWindowShell::updateDocumentProperty):
        (WebCore::V8DOMWindowShell::clearDocumentProperty):
        * bindings/v8/V8NPObject.cpp:
        (WebCore::npObjectPropertyEnumerator):
        * bindings/v8/V8NodeFilterCondition.cpp:
        (WebCore::V8NodeFilterCondition::acceptNode):
        * bindings/v8/V8PerIsolateData.cpp:
        (WebCore::V8PerIsolateData::constructorOfToString):
        * bindings/v8/WorkerScriptController.cpp:
        (WebCore::WorkerScriptController::initializeContextIfNeeded):
        * bindings/v8/WorkerScriptDebugServer.cpp:
        (WebCore::WorkerScriptDebugServer::addListener):

2012-12-04  Dan Bernstein  <mitz@apple.com>

        Support text-orientation: sideways-right (and sideways when it maps to sideways-right)
        https://bugs.webkit.org/show_bug.cgi?id=104035

        Reviewed by Anders Carlsson.

        Test: fast/text/orientation-sideways.html

        * GNUmakefile.list.am: Updated for rename of TextOrientation.h.

        * WebCore.gypi: Ditto.

        * WebCore.xcodeproj/project.pbxproj: Ditto.

        * css/CSSComputedStyleDeclaration.cpp:
        (WebCore::CSSComputedStyleDeclaration::getPropertyCSSValue): Changed to retrieve
        text-orientation from RenderStyle rather than from the font description.

        * css/CSSParser.cpp:
        (WebCore::CSSParser::parseValue): Added sideways and sideways-right as acceptable
        text-orientation values.

        * css/CSSPrimitiveValueMappings.h:
        (WebCore::CSSPrimitiveValue::CSSPrimitiveValue): Added mappings for sideways and
        sideways-right.
        (WebCore::CSSPrimitiveValue::operator TextOrientation): Ditto.

        * css/CSSValueKeywords.in: Added sideways and sideways-right.

        * css/StyleBuilder.cpp:
        (WebCore::StyleBuilder::StyleBuilder): Removed text-orientation property handler, as it is
        now handled in CSSStyleResolver.

        * css/StyleResolver.cpp:
        (WebCore::getFontAndGlyphOrientation): Added this helper function that determines the font
        orientation and non-CJK glyph orientation based on writing-mode and text-orientation.
        (WebCore::StyleResolver::styleForDocument): Added code to set the font orientation and
        non-CJK glyph orientation in the document style.
        (WebCore::checkForOrientationChange): Added. Sets the font orientation and non-CJK glyph
        orientation in the child style if the difference between the parent and child styles requires
        doing so.
        (WebCore::StyleResolver::updateFont): Added call to checkForOrientationChange().
        (WebCore::StyleResolver::applyProperty): Changed the writing-mode case to call the new
        setWritingMode helper, which dirties the font as needed, rather than changing the font
        here. Moved handling of text-orientation here, by calling setTextOrientation, which also
        dirties the font as needed.

        * css/StyleResolver.h:
        (WebCore::StyleResolver::setWritingMode): Added. Dirties the font if the writing mode changes.
        (WebCore::StyleResolver::setTextOrientation): Ditto for text orientation.

        * platform/graphics/FontDescription.h:
        (WebCore::FontDescription::FontDescription): Updated initializer for rename.
        (WebCore::FontDescription::nonCJKGlyphOrientation): Renamed textOrientation to this.
        (WebCore::FontDescription::setNonCJKGlyphOrientation): Renamed setTextOrientation to this.
        (FontDescription): Renamed member variable m_textOrientation to m_nonCJKGlyphOrientation.
        (WebCore::FontDescription::operator==): Updated for rename.

        * platform/graphics/FontFastPath.cpp:
        (WebCore::glyphDataAndPageForNonCJKCharacterWithGlyphOrientation): Renamed
        glyphDataAndPageForCharacterWithTextOrientation to this and changed the parameter type from
        TextOrientation to NonCJKGlyphOrientation.
        (WebCore::Font::glyphDataAndPageForCharacter): Updated for above rename.

        * platform/graphics/mac/FontComplexTextMac.cpp:
        (WebCore::Font::fontDataForCombiningCharacterSequence): Updated for rename of
        FontDescription::textOrientation().

        * platform/text/NonCJKGlyphOrientation.h: Renamed TextOrientation.h to this, and renamed
        the enum and its values to better reflect that they describe how glyphs for non-CJK
        characters are to be rendered in vertical text.

        * rendering/InlineFlowBox.cpp:
        (WebCore::InlineFlowBox::requiresIdeographicBaseline): Updated for rename of
        FontDescription::textOrientation().

        * rendering/style/RenderStyle.cpp:
        (WebCore::RenderStyle::diff): Made text-orientation change a layout change.

        * rendering/style/RenderStyle.h:
        (WebCore::RenderStyle::setTextOrientation): Added.

        * rendering/style/RenderStyleConstants.h: Added a new TextOrientation enum here.

        * rendering/style/StyleRareInheritedData.cpp:
        (WebCore::StyleRareInheritedData::StyleRareInheritedData): Added initialization and copying
        of m_textOrientation member variable.
        (WebCore::StyleRareInheritedData::operator==): Added comparing of m_textOrientation.

        * rendering/style/StyleRareInheritedData.h:
        (StyleRareInheritedData): Added m_textOrientation member variable.

2012-12-04  Kentaro Hara  <haraken@chromium.org>

        [V8] Use ScopedPersistent for IntegerCache::smallIntegers
        https://bugs.webkit.org/show_bug.cgi?id=104066

        Reviewed by Adam Barth.

        We can use ScopedPersistent for IntegerCache::smallIntegers
        instead of manual Persistent::New().

        I confirmed no performance regression in Bindings/scroll-top.html

        No tests. No change in behavior.

        * bindings/v8/V8PerIsolateData.cpp:
        (WebCore::V8PerIsolateData::V8PerIsolateData):
        * bindings/v8/V8ValueCache.cpp:
        (WebCore::IntegerCache::IntegerCache):
        * bindings/v8/V8ValueCache.h:
        (IntegerCache):
        (WebCore::IntegerCache::v8Integer):
        (WebCore::IntegerCache::v8UnsignedInteger):

2012-12-04  Eugene Klyuchnikov  <eustas@chromium.org>

        Web Inspector: Resources: domain cookies are not shown for sub-sub domain pages.
        https://bugs.webkit.org/show_bug.cgi?id=104016

        Reviewed by Pavel Feldman.

        Fixed regexp to allow zero or more subdomain prefix (was zero or one).

        * inspector/front-end/CookieParser.js:
        (WebInspector.Cookies.cookieDomainMatchesResourceDomain): Fixed regexp.

2012-12-04  Alpha Lam  <hclam@chromium.org>

        Not reviewed. Build fix.

        Fix Chromium Windows build.

        * platform/graphics/chromium/ImageDecodingStore.h:
        (CacheEntry):

2012-12-04  Kentaro Hara  <haraken@chromium.org>

        [V8] Remove toV8Object()
        https://bugs.webkit.org/show_bug.cgi?id=103987

        Reviewed by Adam Barth.

        toV8Object() is used only for MessagePort and ArrayBuffer
        only by SerializedScriptValue. It is wasteful to generate
        toV8Object() for all interfaces.

        No tests. No change in behavior.

        * bindings/scripts/CodeGeneratorV8.pm:
        (GenerateHeader):
        * bindings/scripts/test/V8/V8Float64Array.h:
        (WebCore):
        * bindings/scripts/test/V8/V8TestActiveDOMObject.h:
        * bindings/scripts/test/V8/V8TestCustomNamedGetter.h:
        * bindings/scripts/test/V8/V8TestEventConstructor.h:
        * bindings/scripts/test/V8/V8TestEventTarget.h:
        * bindings/scripts/test/V8/V8TestException.h:
        * bindings/scripts/test/V8/V8TestInterface.h:
        * bindings/scripts/test/V8/V8TestMediaQueryListListener.h:
        * bindings/scripts/test/V8/V8TestNamedConstructor.h:
        * bindings/scripts/test/V8/V8TestNode.h:
        * bindings/scripts/test/V8/V8TestObj.h:
        * bindings/scripts/test/V8/V8TestOverloadedConstructors.h:
        * bindings/scripts/test/V8/V8TestSerializedScriptValueInterface.h:
        * bindings/v8/SerializedScriptValue.cpp:

2012-12-04  Kentaro Hara  <haraken@chromium.org>

        [V8] Replace v8::Null(isolate) with v8Null(isolate)
        https://bugs.webkit.org/show_bug.cgi?id=104070

        Reviewed by Adam Barth.

        v8Null(isolate) is a faster version of v8::Null(isolate).

        No tests. No change in behavior.

        * bindings/v8/V8Binding.h:
        (WebCore::v8StringOrNull):
        * bindings/v8/custom/V8ClipboardCustom.cpp:
        (WebCore::V8Clipboard::typesAccessorGetter):
        * bindings/v8/custom/V8CoordinatesCustom.cpp:
        (WebCore::V8Coordinates::altitudeAccessorGetter):
        (WebCore::V8Coordinates::altitudeAccuracyAccessorGetter):
        (WebCore::V8Coordinates::headingAccessorGetter):
        (WebCore::V8Coordinates::speedAccessorGetter):
        * bindings/v8/custom/V8DeviceMotionEventCustom.cpp:
        (WebCore::V8DeviceMotionEvent::accelerationAccessorGetter):
        (WebCore::V8DeviceMotionEvent::accelerationIncludingGravityAccessorGetter):
        (WebCore::V8DeviceMotionEvent::rotationRateAccessorGetter):
        (WebCore::V8DeviceMotionEvent::intervalAccessorGetter):
        * bindings/v8/custom/V8DeviceOrientationEventCustom.cpp:
        (WebCore::V8DeviceOrientationEvent::alphaAccessorGetter):
        (WebCore::V8DeviceOrientationEvent::betaAccessorGetter):
        (WebCore::V8DeviceOrientationEvent::gammaAccessorGetter):
        (WebCore::V8DeviceOrientationEvent::absoluteAccessorGetter):
        * bindings/v8/custom/V8DocumentLocationCustom.cpp:
        (WebCore::V8Document::locationAccessorGetter):
        * bindings/v8/custom/V8HTMLCanvasElementCustom.cpp:
        (WebCore::V8HTMLCanvasElement::getContextCallback):
        * bindings/v8/custom/V8HistoryCustom.cpp:
        (WebCore::V8History::stateAccessorGetter):
        * bindings/v8/custom/V8MessageEventCustom.cpp:
        (WebCore::V8MessageEvent::dataAccessorGetter):
        * bindings/v8/custom/V8MicroDataItemValueCustom.cpp:
        (WebCore::toV8):
        * bindings/v8/custom/V8NodeCustom.cpp:
        (WebCore::V8Node::insertBeforeCallback):
        (WebCore::V8Node::replaceChildCallback):
        (WebCore::V8Node::removeChildCallback):
        (WebCore::V8Node::appendChildCallback):
        * bindings/v8/custom/V8PopStateEventCustom.cpp:
        (WebCore::V8PopStateEvent::stateAccessorGetter):
        * bindings/v8/custom/V8SQLResultSetRowListCustom.cpp:
        (WebCore::V8SQLResultSetRowList::itemCallback):
        * bindings/v8/custom/V8TrackEventCustom.cpp:
        (WebCore::V8TrackEvent::trackAccessorGetter):
        * bindings/v8/custom/V8WebGLRenderingContextCustom.cpp:
        (WebCore::toV8Object):
        (WebCore::V8WebGLRenderingContext::getAttachedShadersCallback):
        (WebCore::V8WebGLRenderingContext::getSupportedExtensionsCallback):

2012-12-04  Min Qin  <qinmin@chromium.org>

        Make LazyDecodingPixelRef inherit from skia::LazyPixelRef so that cc thread can access it
        https://bugs.webkit.org/show_bug.cgi?id=103555

        Reviewed by Stephen White.

        Expose LazyDecodingPixelRef to the cc thread by inheriting from skia::LazyPixelRef.
        No test added for now as impl side paiting is still WIP.

        * platform/graphics/chromium/LazyDecodingPixelRef.cpp:
        (WebCore::LazyDecodingPixelRef::LazyDecodingPixelRef):
        (WebCore::LazyDecodingPixelRef::PrepareToDecode):
        (WebCore):
        (WebCore::LazyDecodingPixelRef::Decode):
        * platform/graphics/chromium/LazyDecodingPixelRef.h:
        (LazyDecodingPixelRef):

2012-12-04  Takashi Sakamoto  <tasak@google.com>

        Fix compile error when SVG is disabled.

        Unreviewed gardening.

        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::sharingCandidateHasIdenticalStyleAffectingAttributes):

2012-12-04  Anthony Scian  <ascian@rim.com>

        Static code analysis warning fixes
        https://bugs.webkit.org/show_bug.cgi?id=103837

        Reviewed by Rob Buis.

        172,174: disable copy ctor, op= in AutofillBackingStore
        504,506: disable copy ctor, op= in CookieManager
        1488,1491: disable copy ctor, op= in RSSParserBase
        1489,1490: disable copy ctor, op= in RSSItem
        514,516: disable copy ctor, op= in CredentialBackingStore
        1363: m_state not initialized in ctor

        * platform/blackberry/CookieManager.h:
        * platform/blackberry/PlatformTouchPointBlackBerry.cpp:
        (WebCore::PlatformTouchPoint::PlatformTouchPoint):
        * platform/network/blackberry/AutofillBackingStore.h:
        (AutofillBackingStore):
        * platform/network/blackberry/CredentialBackingStore.h:
        (CredentialBackingStore):
        * platform/network/blackberry/rss/RSSParserBase.h:
        (RSSParserBase):

2012-12-04  Noel Gordon  <noel.gordon@gmail.com>

        [v8] Improve worker.postMessage() string performance: avoid utf8 conversion
        https://bugs.webkit.org/show_bug.cgi?id=102230

        Reviewed by Eric Seidel.

        Avoid utf8 conversion when serializing strings with SerializedScriptValue. Provide 
        Ascii and UChar writers for v8 string serialization and provide a UChar reader for
        deserialization. Define/use serialization StringUCharTag to indicate UChar strings
        in the wire format. Increment the SerializedScriptValue wire format version.

        In the wire format, StringUCharTag is followed by the string length in bytes, then
        the length/2 UChars of the string.

        Note the string length is VarInt encoded. During serialization, compute the number
        of bytes used to encode the length and prepend a PaddingTag if needed so the UChar
        data appears on an even-byte boundary. This prevents unaligned reads of UChar data
        during deserialization (the deserialization buffer is even-byte aligned).

        Testing transfers of large strings to and from workers indicates a 10X improvement
        in transfer rate for strings, and strings within js objects, with this change. For
        example, 500 MByte/s on my test machine (50 MByte/s without this change) for flat,
        32 MByte string postMessage() transfers.

        Covered by platform/chromium/fast/storage/serialized-script-value.html

        * bindings/v8/SerializedScriptValue.cpp:

2012-12-04  Kentaro Hara  <haraken@chromium.org>

        [V8] V8Binding::v8ExternalString() is redundant
        https://bugs.webkit.org/show_bug.cgi?id=103979

        Reviewed by Adam Barth.

        v8String(), v8StringOrNull() and v8StringOrUndefined() are enough.
        We can remove V8Binding::v8ExternalString().

        No tests. No change in behavior.

        * bindings/scripts/CodeGeneratorV8.pm:
        (GenerateNormalAttrGetter):
        * bindings/v8/ScriptController.cpp:
        (WebCore::ScriptController::compileAndRunScript):
        * bindings/v8/ScriptDebugServer.cpp:
        (WebCore::ScriptDebugServer::compileScript):
        * bindings/v8/V8Binding.h:
        (WebCore):
        (WebCore::v8String):
        (WebCore::v8StringOrNull):
        (WebCore::v8StringOrUndefined):
        * bindings/v8/V8LazyEventListener.cpp:
        (WebCore::V8LazyEventListener::prepareListenerObject):
        * bindings/v8/WorkerScriptController.cpp:
        (WebCore::WorkerScriptController::evaluate):

2012-12-04  Kentaro Hara  <haraken@chromium.org>

        [V8] Remove v8NonStringValueToWebCoreString() and v8NonStringValueToAtomicWebCoreString()
        https://bugs.webkit.org/show_bug.cgi?id=103981

        Reviewed by Adam Barth.

        v8NonStringValueToWebCoreString() and v8NonStringValueToAtomicWebCoreString()
        are equivalent to what StringResource does.

        No tests. No change in behavior.

        * bindings/v8/V8Binding.cpp:
        * bindings/v8/V8Binding.h:
        (WebCore::toWebCoreString):
        (WebCore):
        (WebCore::toWebCoreStringWithNullCheck):
        (WebCore::toWebCoreStringWithUndefinedOrNullCheck):
        (WebCore::toWebCoreAtomicString):
        (WebCore::toWebCoreAtomicStringWithNullCheck):
        * bindings/v8/V8StringResource.h:
        (WebCore::V8StringResource::V8StringResource):
        (V8StringResource):

2012-12-04  Abhishek Arya  <inferno@chromium.org>

        Crash in WebCore::ApplyStyleCommand::pushDownInlineStyleAroundNode
        https://bugs.webkit.org/show_bug.cgi?id=103515

        Reviewed by Ryosuke Niwa.

        |current| is weak node pointer that iterates in the hierarchy chain
        between |highestAncestor| and |targetNode|. Script executed as part
        of iframe onload event can blow away the nodes and we no longer have
        |targetNode| in our descendants chain. So, we RefPtr |current| and bail
        out when |targetNode| stops being a part of descendant chain.

        Test blocked on https://bugs.webkit.org/show_bug.cgi?id=104044.

        * editing/ApplyStyleCommand.cpp:
        (WebCore::ApplyStyleCommand::pushDownInlineStyleAroundNode):

2012-12-04  Bruno de Oliveira Abinader  <bruno.abinader@basyskom.com>

        Avoid repeated calls to decorationColor on RenderObject::getTextDecorationColors
        https://bugs.webkit.org/show_bug.cgi?id=94131

        Reviewed by Brent Fulgham.

        Replaces repeated calls to decorationColor by adding a variable that reads the
        return value from that function just once on each loop and gets used upon need.

        This change won't affect text decoration behavior, so current tests suffice.

        * rendering/RenderObject.cpp:
        (WebCore::RenderObject::getTextDecorationColors):

2012-12-04  Alpha Lam  <hclam@chromium.org>

        [chromium] Implement cache eviction logic in ImageDecodingStore
        https://bugs.webkit.org/show_bug.cgi?id=103480

        Reviewed by James Robinson.

        This patch implements these features in the new image cache:
        - Least-recently-used eviction logic
        - Setting cache limit (default is 32MB)
        - Remove cache entries when ImageFrameGenerator is removed

        New tests in ImageDecodingTestTest. Also covered by platform/chromium/virtual/deferred.

        * platform/graphics/chromium/ImageDecodingStore.cpp:
        (WebCore::ImageDecodingStore::ImageDecodingStore):
        (WebCore::ImageDecodingStore::~ImageDecodingStore):
        Code to assert that everything is cleaned up.
        (WebCore::ImageDecodingStore::lockCompleteCache):
        (WebCore::ImageDecodingStore::unlockCache):
        (WebCore::ImageDecodingStore::insertAndLockCache):
        (WebCore::ImageDecodingStore::removeCacheIndexedByGenerator):
        New method to remove all cache entries index by ImageFrameGenerator.
        (WebCore):
        (WebCore::ImageDecodingStore::setCacheLimitInBytes):
        (WebCore::ImageDecodingStore::memoryUsageInBytes):
        (WebCore::ImageDecodingStore::cacheEntries):
        (WebCore::ImageDecodingStore::prune):
        New code to implement LRU eviction logic.
        (WebCore::ImageDecodingStore::insertCacheInternal):
        New method to help new cache insertion. This is separately because it touches 3 containers.
        (WebCore::ImageDecodingStore::removeFromCacheInternal):
        New method to help remove a cache entry from containers.
        (WebCore::ImageDecodingStore::removeFromCacheListInternal):
        New helper method to help remove cache entry from doubly linked list.
        * platform/graphics/chromium/ImageDecodingStore.h:
        (ImageDecodingStore):
        (CacheEntry):
        (WebCore::ImageDecodingStore::CacheEntry::createAndUse):
        (WebCore::ImageDecodingStore::CacheEntry::CacheEntry):
        (WebCore::ImageDecodingStore::CacheEntry::~CacheEntry):
        (WebCore::ImageDecodingStore::CacheEntry::cacheKey):
        (WebCore::ImageDecodingStore::CacheEntry::cachedImage):
        (WebCore::ImageDecodingStore::CacheEntry::useCount):
        (WebCore::ImageDecodingStore::CacheEntry::incrementUseCount):
        (WebCore::ImageDecodingStore::CacheEntry::decrementUseCount):
        (WebCore::ImageDecodingStore::CacheEntry::memoryUsageInBytes):
        (WebCore::ImageDecodingStore::incrementMemoryUsage):
        (WebCore::ImageDecodingStore::decrementMemoryUsage):
        New helper methods.
        * platform/graphics/chromium/ImageFrameGenerator.cpp:
        (WebCore::ImageFrameGenerator::~ImageFrameGenerator):

2012-12-04  Andreas Kling  <akling@apple.com>

        Style sharing: Allow sharing between elements with classes not referenced by any selectors.
        <http://webkit.org/b/103925>

        Reviewed by Antti Koivisto.

        When looking for elements that can share style, instead of blindly rejecting candidates with
        a different "class" attribute, check if it's actually referenced by any of the tracked style rules.
        It's surprisingly common for web pages to have elements with classes to which no rules apply,
        mediawiki content is especially good at this.

        ~2100 new sharing "hits" on <https://en.wikipedia.org/wiki/Steve_Jobs>.

        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::canShareStyleWithElement):

            Don't bail early if the two elements have different return values for hasClass().

        (WebCore::StyleResolver::classNamesAffectedByRules):

            Helper function that returns whether a SpaceSplitString contains a class name referenced
            by any style rules.

        (WebCore::StyleResolver::sharingCandidateHasIdenticalStyleAffectingAttributes):

            Make this a member function since we need access to m_features.classesInRules.

        * css/StyleResolver.h:
        (StyleResolver):
        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::locateSharedStyle):

            Cache whether the element we're resolving style for has a "class" attribute referenced by style rules.

2012-12-04  Silvia Pfeiffer  <silviapf@chromium.org>

        Refactor Media Control Elements to remove code duplication.
        https://bugs.webkit.org/show_bug.cgi?id=101877

        Reviewed by Eric Carlson.

        Instead of having two different types of inheritance trees for
        MediaControlElement and MediaControlInputElement, this
        creates a stand-alone virtual class MediaControlElement that
        provides the common functions: show(), hide(), isShowing(),
        setMediaController(), displayType(), isMediaControlElement(),
        shadowPseudoId(), mediaController(), setDisplayType().

        The individual elements inherit from MediaControlElement and
        either HTMLInputElement or HTMLDivElement. They extend/override
        the base functions as appropriate.

        As part of this, the RenderXXX classes mixed in between the media
        controls in MediaControlElements.cpp are also moved to
        rendering/RenderMediaControls.h/cpp to follow common code separation.

        No new tests since this is just a refactoring.

        * CMakeLists.txt:
        * GNUmakefile.list.am:
        * Target.pri:
        * WebCore.gypi:
        * WebCore.vcproj/WebCore.vcproj:
        * WebCore.xcodeproj/project.pbxproj:
        Build files extended with new files.

        * html/HTMLMediaElement.h:
        (WebCore::HTMLMediaElement::textTracksIndexNotFound):
        Replaced const with function, since it is used in multiple files.

        * html/shadow/MediaControlElementTypes.cpp: new file
        * html/shadow/MediaControlElementTypes.h: new file
        Added new MediaControlElement class. Moved MediaControlDivElement and MediaControlInputElement
        classes into these files from MediaControlElements.cpp/h. Moved MediaControlElementTypes enum
        into these. Moved other media control element classes that are the basis for inheriting media
        control elements into these (MediaControlTimeDisplayElement, MediaControlMuteButtonElement,
        MediaControlSeekButtonElement, MediaControlVolumeSliderElement).

        * html/shadow/MediaControlElements.cpp:
        * html/shadow/MediaControlElements.h:
        Removed common functions between media elements that are now in the common
        base class MediaControlElement.
        Also moved common base classes to MediaControlElementTypes.h/cpp

        * html/shadow/MediaControls.cpp:
        * html/shadow/MediaControls.h:
        Renamed MediaControlVolumeSliderElement to MediaControlPanelVolumeSliderElement
        to be consistent in inheritance tree. Updated copyright date.

        * html/shadow/MediaControlsApple.cpp:
        * html/shadow/MediaControlsApple.h:
        Renamed MediaControlVolumeSliderElement to MediaControlPanelVolumeSliderElement
        to be consistent in inheritance tree. Updated copyright dates.n

        * html/shadow/MediaControlsChromium.cpp:
        * html/shadow/MediaControlsChromium.h:
        Renamed MediaControlVolumeSliderElement to MediaControlPanelVolumeSliderElement
        to be consistent in inheritance tree.
        Moved enclosure element definitions to common MediaControlElements.cpp/h
        file through which different media elements are made available to different ports.

        * html/shadow/MediaControlsChromiumAndroid.cpp:
        * html/shadow/MediaControlsChromiumAndroid.h:
        Moved enclosure for overlay button to MediaControlElements.cpp/h files
        through which different media elements are made available to different ports.

        * rendering/RenderMediaControlElements.cpp: new file
        * rendering/RenderMediaControlElements.h: new file
        Moved rendering classes for media control elements into these files from
        MediaControlElements.cpp/h.

        * rendering/RenderThemeMac.mm:
        Added new RenderMediaControlElements.h file.

        * rendering/RenderingAllInOne.cpp:
        Added new RenderMediaControlEleemnt.cpp file.

2012-12-04  Kenneth Russell  <kbr@google.com>

        Associate URLs with GraphicsContext3D instances created for WebGL
        https://bugs.webkit.org/show_bug.cgi?id=103793

        Reviewed by Adam Barth.

        Pass down the URL of the topmost frame's document creating the
        WebGL context to the platform layer through
        GraphicsContext3D::Attributes.

        Not feasible to write a layout test for this change; has no
        user-visible effect. Tested manually with failure injection in
        Chromium port.

        * html/canvas/WebGLRenderingContext.cpp:
        (WebCore):
        (WebCore::WebGLRenderingContext::create):
            Pass top document's URL in context creation attributes.
        * platform/chromium/support/GraphicsContext3DChromium.cpp:
        (WebCore::GraphicsContext3D::create):
            Pass URL through WebKit API.
        * platform/graphics/GraphicsContext3D.h:
        (Attributes):
            Add top document's URL to context creation attributes.

2012-12-04  Yury Semikhatsky  <yurys@chromium.org>

        Web Inspector: simplify reportMemoryUsage signature
        https://bugs.webkit.org/show_bug.cgi?id=104028

        Reviewed by Vsevolod Vlasov.

        Removed const& modifier from instrumented pointer type. Was const T* const&,
        now it is const T*

        * platform/graphics/NativeImagePtr.h:
        (WebCore):
        * platform/graphics/skia/NativeImageSkia.cpp:
        (WebCore::reportMemoryUsage):

2012-12-04  Adam Barth  <abarth@webkit.org>

        [V8] Rename V8DOMWrapper member functions to be more descriptive
        https://bugs.webkit.org/show_bug.cgi?id=104069

        Reviewed by Eric Seidel.

        In addition to the renames, this patch also inline lookupDOMWrapper
        into its callers.

        * bindings/scripts/CodeGeneratorV8.pm:
        (GenerateDomainSafeFunctionGetter):
        (GenerateDomainSafeFunctionSetter):
        (GenerateNormalAttrGetter):
        (GenerateSingleConstructorCallback):
        (GenerateEventConstructorCallback):
        (GenerateNamedConstructorCallback):
        (GenerateToV8Converters):
        * bindings/scripts/test/V8/V8TestSerializedScriptValueInterface.cpp:
        (WebCore::V8TestSerializedScriptValueInterface::constructorCallback):
        * bindings/v8/Dictionary.cpp:
        (WebCore::Dictionary::get):
        * bindings/v8/PageScriptDebugServer.cpp:
        (WebCore::retrieveFrameWithGlobalObjectCheck):
        * bindings/v8/V8Binding.cpp:
        (WebCore::toDOMWindow):
        (WebCore::toScriptExecutionContext):
        * bindings/v8/V8DOMWindowShell.cpp:
        (WebCore::V8DOMWindowShell::clearForNavigation):
        (WebCore::V8DOMWindowShell::installDOMWindow):
        * bindings/v8/V8DOMWrapper.cpp:
        (WebCore::V8DOMWrapper::create):
        * bindings/v8/V8DOMWrapper.h:
        (V8DOMWrapper):
        (WebCore::V8DOMWrapper::setNativeInfo):
        (WebCore::V8DOMWrapper::clearNativeInfo):
        (WebCore::V8DOMWrapper::associateObjectWithWrapper):
        * bindings/v8/V8Initializer.cpp:
        (WebCore::findFrame):
        * bindings/v8/V8NPObject.cpp:
        (WebCore::createV8ObjectForNPObject):
        (WebCore::forgetV8ObjectForNPObject):
        * bindings/v8/WorkerScriptController.cpp:
        (WebCore::WorkerScriptController::initializeContextIfNeeded):
        (WebCore::WorkerScriptController::controllerForContext):
        * bindings/v8/custom/V8ArrayBufferCustom.cpp:
        (WebCore::V8ArrayBuffer::constructorCallbackCustom):
        * bindings/v8/custom/V8ArrayBufferViewCustom.h:
        (WebCore::wrapArrayBufferView):
        (WebCore::constructWebGLArray):
        * bindings/v8/custom/V8AudioContextCustom.cpp:
        (WebCore::V8AudioContext::constructorCallbackCustom):
        * bindings/v8/custom/V8DOMFormDataCustom.cpp:
        (WebCore::V8DOMFormData::constructorCallbackCustom):
        * bindings/v8/custom/V8DOMWindowCustom.cpp:
        (WebCore::V8DOMWindow::eventAccessorGetter):
        (WebCore::V8DOMWindow::eventAccessorSetter):
        (WebCore::V8DOMWindow::toStringCallback):
        (WebCore::V8DOMWindow::namedSecurityCheck):
        (WebCore::V8DOMWindow::indexedSecurityCheck):
        (WebCore::toV8):
        * bindings/v8/custom/V8DataViewCustom.cpp:
        (WebCore::V8DataView::constructorCallbackCustom):
        * bindings/v8/custom/V8HTMLDocumentCustom.cpp:
        (WebCore::V8HTMLDocument::wrapInShadowObject):
        * bindings/v8/custom/V8HTMLImageElementConstructor.cpp:
        (WebCore::v8HTMLImageElementConstructorCallback):
        * bindings/v8/custom/V8InjectedScriptManager.cpp:
        (WebCore::createInjectedScriptHostV8Wrapper):
        (WebCore::InjectedScriptManager::canAccessInspectedWindow):
        * bindings/v8/custom/V8IntentCustom.cpp:
        (WebCore::V8Intent::constructorCallbackCustom):
        * bindings/v8/custom/V8LocationCustom.cpp:
        (WebCore::V8Location::reloadAccessorGetter):
        (WebCore::V8Location::replaceAccessorGetter):
        (WebCore::V8Location::assignAccessorGetter):
        * bindings/v8/custom/V8MessageChannelCustom.cpp:
        (WebCore::V8MessageChannel::constructorCallbackCustom):
        * bindings/v8/custom/V8MessageEventCustom.cpp:
        (WebCore::V8MessageEvent::initMessageEventCallback):
        * bindings/v8/custom/V8MutationObserverCustom.cpp:
        (WebCore::V8MutationObserver::constructorCallbackCustom):
        * bindings/v8/custom/V8ScriptProfileCustom.cpp:
        (WebCore::toV8):
        * bindings/v8/custom/V8ScriptProfileNodeCustom.cpp:
        (WebCore::toV8):
        * bindings/v8/custom/V8WebKitPointCustom.cpp:
        (WebCore::V8WebKitPoint::constructorCallbackCustom):
        * bindings/v8/custom/V8XMLHttpRequestCustom.cpp:
        (WebCore::V8XMLHttpRequest::constructorCallbackCustom):

2012-12-04  Adam Barth  <abarth@webkit.org>

        [V8] Cleanup style in V8DOMWrapper
        https://bugs.webkit.org/show_bug.cgi?id=104062

        Reviewed by Kentaro Hara.

        This patch moves a number of functions from inside the class
        declaration to below the class declaration. I've also inlined
        domWrapperType into each of its callers and renamed a few functions.
        A subsequent patch will improve the names of the remaining functions.

        * bindings/scripts/CodeGeneratorV8.pm:
        (GenerateToV8Converters):
        * bindings/v8/ScriptProfiler.cpp:
        (WebCore::ScriptProfiler::visitExternalArrays):
        * bindings/v8/V8Collection.h:
        (WebCore::getNamedPropertyOfCollection):
        (WebCore::getIndexedPropertyOfCollection):
        * bindings/v8/V8DOMWrapper.cpp:
        (WebCore::V8DOMWrapper::instantiateDOMWrapper):
        (WebCore::V8DOMWrapper::isWrapperOfType):
        * bindings/v8/V8DOMWrapper.h:
        (V8DOMWrapper):
        (WebCore::V8DOMWrapper::setWrapperClass):
        (WebCore::V8DOMWrapper::setDOMWrapper):
        (WebCore):
        (WebCore::V8DOMWrapper::clearDOMWrapper):
        (WebCore::V8DOMWrapper::lookupDOMWrapper):
        (WebCore::V8DOMWrapper::createDOMWrapper):
        * bindings/v8/V8GCController.cpp:
        * bindings/v8/custom/V8InspectorFrontendHostCustom.cpp:
        (WebCore::V8InspectorFrontendHost::showContextMenuCallback):

2012-12-04  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r136597.
        http://trac.webkit.org/changeset/136597
        https://bugs.webkit.org/show_bug.cgi?id=104065

        broke Windows compilation (Requested by yurys on #webkit).

        * platform/graphics/NativeImagePtr.h:
        (WebCore):
        * platform/graphics/skia/NativeImageSkia.cpp:
        (WebCore::reportMemoryUsage):

2012-12-04  Yury Semikhatsky  <yurys@chromium.org>

        Web Inspector: simplify reportMemoryUsage signature
        https://bugs.webkit.org/show_bug.cgi?id=104028

        Reviewed by Vsevolod Vlasov.

        Removed const& modifier from instrumented pointer type. Was const T* const&,
        now it is const T*

        * platform/graphics/NativeImagePtr.h:
        (WebCore):
        * platform/graphics/skia/NativeImageSkia.cpp:
        (WebCore::reportMemoryUsage):

2012-12-04  Adam Barth  <abarth@webkit.org>

        [V8] V8DOMWrapper shouldn't know about NodeFilter
        https://bugs.webkit.org/show_bug.cgi?id=104057

        Reviewed by Kentaro Hara.

        This patch just moves this code into V8Bindings.h, which is where we
        have our other type conversion functions. It's too bad that we still
        need to special case NodeFilter, but fixing that is going to be a bit
        more work.

        * bindings/scripts/CodeGeneratorV8.pm:
        (JSValueToNative):
        * bindings/v8/V8Binding.cpp:
        (WebCore::toNodeFilter):
        (WebCore):
        * bindings/v8/V8Binding.h:
        (WebCore):
        * bindings/v8/V8DOMWrapper.cpp:
        * bindings/v8/V8DOMWrapper.h:
        (WebCore):
        (V8DOMWrapper):

2012-12-04  Simon Fraser  <simon.fraser@apple.com>

        Show a mini visualizer for the tile cache tiles
        https://bugs.webkit.org/show_bug.cgi?id=104053

        Reviewed by Beth Dakin.

        Replace the current red/green/yellow scrolling indicator with a
        mini map of the tile cache that shows the current tiles, and the
        visible rect.
        
        Visibility is controlled via a new preference.

        * WebCore.exp.in: Add Settings::setShowTiledScrollingIndicator(bool),
        and remove ScrollingTree::setDebugRootLayer(CALayer*)
        * WebCore.xcodeproj/project.pbxproj: Remove ScrollingTreeMac.mm which
        is no longer needed; it just contained debug layer stuff.
        * page/Settings.cpp:
        (WebCore::Settings::Settings): Support the new setting.
        (WebCore::Settings::setShowTiledScrollingIndicator):
        * page/Settings.h:
        (WebCore::Settings::showTiledScrollingIndicator):
        * page/scrolling/ScrollingTree.cpp:
        (WebCore::ScrollingTree::commitNewTreeState): We no longer update the debug
        indicator on tree commit.
        * page/scrolling/ScrollingTree.h:
        (WebCore::ScrollingTree::hasWheelEventHandlers): Needed for the tiled
        scrolling indicator.
        (ScrollingTree):
        * page/scrolling/mac/ScrollingCoordinatorMac.mm:
        (WebCore::ScrollingCoordinatorMac::commitTreeState): Tell the TiledBacking
        about the current scrolling mode.
        * page/scrolling/mac/ScrollingTreeMac.mm: Removed.
        * platform/graphics/TiledBacking.h: Add functions to set the indicator scrolling
        mode, and to get the tiled scrolling indicator layer. This has to be parented by
        the DrawingArea, to ensure that it's in front of all other layers.
        * platform/graphics/ca/mac/TileCache.h:
        (WebCore::TileCache::scale): Exposed for the indicator drawing code to use.
        * platform/graphics/ca/mac/TileCache.mm:
        (-[WebTileCacheMapLayer init]): The indicator has a sublayer which renders the
        visible rect frame, owned by it.
        (-[WebTileCacheMapLayer drawInContext:]):
        (WebCore::TileCache::TileCache): The indicator mode has to be stored here,
        since it can be pushed down before we have an indicator layer.
        (WebCore::TileCache::~TileCache): Clear the TileCache on the indicator layer, which
        may outlive us.
        (WebCore::TileCache::revalidateTiles): Call updateTileCoverageMap().
        (WebCore::TileCache::updateTileCoverageMap): Resize the indicator layer to fit
        within the window, and update the indicator color.
        (WebCore::TileCache::tiledScrollingIndicatorLayer): Create and initialize the layer.
        (WebCore::TileCache::setScrollingModeIndication):
        (WebCore::TileCache::drawTileMapContents): Draw small white rects for the tiles over
        an translucent gray background.

2012-12-04  David Grogan  <dgrogan@chromium.org>

        IndexedDB: Propagate more leveldb errors to IDBIndex and IDBObjectStore
        https://bugs.webkit.org/show_bug.cgi?id=103782

        Reviewed by Tony Chang.

        index.get[Key]() and objectStore.get() will receive more error events.

        * Modules/indexeddb/IDBBackingStore.cpp:
        (WebCore::IDBBackingStore::getRecord):
        (WebCore::versionExists):
        (WebCore::IDBBackingStore::findKeyInIndex):
        (WebCore::IDBBackingStore::getPrimaryKeyViaIndex):
        (WebCore::IDBBackingStore::keyExistsInIndex):
        * Modules/indexeddb/IDBBackingStore.h:
        (IDBBackingStore):
        * Modules/indexeddb/IDBIndexBackendImpl.cpp:
        (WebCore::IDBIndexBackendImpl::getInternal):
        (WebCore::IDBIndexBackendImpl::getKeyInternal):
        * Modules/indexeddb/IDBObjectStoreBackendImpl.cpp:
        (WebCore::IDBObjectStoreBackendImpl::getInternal):
        (WebCore):

2012-12-04  Kentaro Hara  <haraken@chromium.org>

        [V8] Remove IntegerCache::m_initialized
        https://bugs.webkit.org/show_bug.cgi?id=103978

        Reviewed by Adam Barth.

        Thanks to r136479, we can now initialize V8 integers in IntegerCache's
        constructor. We can remove IntegerCache::m_initialized, which slightly
        improves performance.

        [Bindings/scroll-top.html in Chromium/Linux]
        Before this patch: 285 runs/sec, 281 runs/sec, 281 runs/sec, 280 runs/sec
        After this patch : 290 runs/sec, 291 runs/sec, 297 runs/sec, 291 runs/sec

        No tests. No change in behavior.

        * bindings/v8/V8ValueCache.cpp:
        (WebCore::IntegerCache::IntegerCache):
        (WebCore::IntegerCache::~IntegerCache):
        * bindings/v8/V8ValueCache.h:
        (IntegerCache):
        (WebCore::IntegerCache::v8Integer):
        (WebCore::IntegerCache::v8UnsignedInteger):
        (WebCore):

2012-12-04  Kentaro Hara  <haraken@chromium.org>

        [V8] Replace String::New("symbol") with String::NewSymbol("symbol")
        https://bugs.webkit.org/show_bug.cgi?id=103989

        Reviewed by Adam Barth.

        In V8, a symbol lookup is faster than a string lookup. We should use
        String::NewSymbol("symbol") for symbols.

        No tests. No change in behavior.

        * bindings/v8/custom/V8DeviceMotionEventCustom.cpp:
        * bindings/v8/custom/V8HTMLCanvasElementCustom.cpp:
        (WebCore::V8HTMLCanvasElement::getContextCallback):
        * bindings/v8/custom/V8InjectedScriptHostCustom.cpp:
        (WebCore::V8InjectedScriptHost::typeCallback):
        (WebCore::V8InjectedScriptHost::functionDetailsCallback):
        (WebCore::getJSListenerFunctions):
        * bindings/v8/custom/V8InspectorFrontendHostCustom.cpp:
        (WebCore::populateContextMenuItems):

2012-12-04  Julien Chaffraix  <jchaffraix@webkit.org>

        [CSS Grid Layout] Implement CSS parsing and handling for <track-minmax>
        https://bugs.webkit.org/show_bug.cgi?id=103799

        Reviewed by Tony Chang.

        This change adds support for:
        <track-minmax> => minmax( <track-breadth> , <track-breadth> ) | auto | <track-breadth>
        (note that we already supported auto | <track-breadth>).

        The change is mostly mechanical, the only newness is that GridTrackSize was updated to
        hold 2 Lengths internally and we map the single Length case to 2 by duplicating the value
        as this matches the rendering algorithm in the spec.

        Tests: fast/css-grid-layout/grid-columns-rows-get-set-multiple.html
               fast/css-grid-layout/resources/grid-columns-rows-get-set-multiple.js

        * css/CSSComputedStyleDeclaration.cpp:
        (WebCore::valueForGridTrackBreadth):
        Changed the function to do the conversion of one track breadth (one Length).
        This was forgotten in the preparatory change in bug 103703.

        (WebCore::valueForGridTrackMinMax):
        Convert the value back using valueForGridTrackBreadth.

        * css/CSSFunctionValue.cpp:
        (WebCore::CSSFunctionValue::CSSFunctionValue):
        * css/CSSFunctionValue.h:
        (WebCore::CSSFunctionValue::create):
        (CSSFunctionValue):
        Added a new constructor. This enables us to return minmax(..., ...) when queried
        from JavaScript. I couldn't find a better way to serialize inside CSSComputedStyleDeclaration
        so that it properly match the function output.

        * css/CSSParser.cpp:
        (WebCore::CSSParser::parseGridTrackMinMax):
        Added parsing for the new syntax. We convert the 2 values into a Pair if we manage to
        parse both values correctly.

        * css/StyleResolver.cpp:
        (WebCore::createGridTrackMinMax):
        Updated to handle a Pair - for minmax - and set the 2 values on GridTrackSize.

        * rendering/RenderGrid.cpp:
        (WebCore::RenderGrid::computedUsedBreadthOfGridTracks):
        Updated to check the style. For now, we don't handle minmax values.

        * rendering/style/GridTrackSize.h:
        (WebCore::GridTrackSize::GridTrackSize):
        (WebCore::GridTrackSize::length):
        (WebCore::GridTrackSize::setLength):
        (WebCore::GridTrackSize::minTrackBreadth):
        (WebCore::GridTrackSize::maxTrackBreadth):
        (WebCore::GridTrackSize::setMinMax):
        (WebCore::GridTrackSize::operator==):
        Updated the class to handle minmax values. This means that we now always store
        2 values (the <length> case being a subset of minmax, however we kept the distinction
        to be able to reconstruct a <length> for getComputedStyle).

2012-12-04  Elliott Sprehn  <esprehn@chromium.org>

        parser* methods in ContainerNode should not support DocumentFragment
        https://bugs.webkit.org/show_bug.cgi?id=103965

        Reviewed by Darin Adler.

        Only parserInsertBefore ever supported DocumentFragment and this feature
        is never used. It appears this code ended up in parserInsertBefore when
        it was created as a copy of insertBefore that didn't fire events. This
        patch removes that code and adds assertions that we never pass
        DocumentFragments since doing so would cause a corrupted tree as we never
        check checkAcceptChild or do other validation in the parser methods.

        No new tests, just refactoring.

        * dom/ContainerNode.cpp:
        (WebCore::ContainerNode::parserInsertBefore):
        (WebCore::ContainerNode::parserRemoveChild):
        (WebCore::ContainerNode::parserAppendChild):

2012-12-04  Elliott Sprehn  <esprehn@gmail.com>

        Simplify ShadowRoot::cloneNode(bool,ExceptionCode)
        https://bugs.webkit.org/show_bug.cgi?id=103928

        Reviewed by Dimitri Glazkov.

        ShadowRoot can never be cloned and ShadowRoot::cloneNode(bool) always
        returns null so there's no reason to have code in the cloneNode method
        for script that acts as if it may not return null.

        * dom/ShadowRoot.cpp:
        (WebCore::ShadowRoot::cloneNode):

2012-12-04  Elliott Sprehn  <esprehn@chromium.org>

        setIsInTopLayer is not really a setter
        https://bugs.webkit.org/show_bug.cgi?id=103912

        Reviewed by Eric Seidel.

        Element::setInTopLayer isn't just a setter, it also adds the element
        to the top layer vector in the document which changes it's display and
        causes a reattach.

        To make this more obvious make HTMLDialogElement use the methods on
        Document and make those update the state boolean.

        There also doesn't seem to be any reason for setInTopLayer
        or isInTopLayer to be virtual, it appears it was a typo.

        No new tests, just refactoring.

        * dom/Document.cpp:
        (WebCore::Document::addToTopLayer):
        (WebCore::Document::removeFromTopLayer):
        * dom/Element.cpp:
        (WebCore::Element::setIsInTopLayer):
        * dom/Element.h:
        * html/HTMLDialogElement.cpp:
        (WebCore::HTMLDialogElement::close):
        (WebCore::HTMLDialogElement::showModal):

2012-12-04  Elliott Sprehn  <esprehn@chromium.org>

        Automatically handle suspend and resume of post attach callbacks
        https://bugs.webkit.org/show_bug.cgi?id=103910

        Reviewed by Eric Seidel.

        Use RAII to handle suspend and resume of post attach callbacks since
        they should always be called in pairs.

        No new tests, just refactoring.

        * dom/ContainerNode.h:
        (PostAttachCallbackDisabler):
        (WebCore::PostAttachCallbackDisabler::PostAttachCallbackDisabler):
        (WebCore::PostAttachCallbackDisabler::~PostAttachCallbackDisabler):
        (ContainerNode):
        * dom/Document.cpp:
        (WebCore::Document::recalcStyle):
        * dom/Element.cpp:
        (WebCore::Element::attach):
        * html/HTMLFormControlElement.cpp:
        (WebCore::HTMLFormControlElement::attach):
        * html/HTMLInputElement.cpp:
        (WebCore::HTMLInputElement::attach):
        * html/HTMLPlugInImageElement.cpp:
        (WebCore::HTMLPlugInImageElement::attach):
        (WebCore):

2012-12-04  Elliott Sprehn  <esprehn@chromium.org>

        createRareData should return a PassOwnPtr
        https://bugs.webkit.org/show_bug.cgi?id=103851

        Reviewed by Eric Seidel.

        createRareData should return a PassOwnPtr, not an OwnPtr since it's
        transfering ownership.

        * dom/Element.cpp:
        (WebCore::Element::createRareData):
        * dom/Element.h:
        (Element):
        * dom/Node.cpp:
        (WebCore::Node::createRareData):
        * dom/Node.h:

2012-12-04  Filip Pizlo  <fpizlo@apple.com>

        Rename Profiler to LegacyProfiler
        https://bugs.webkit.org/show_bug.cgi?id=104031

        Rubber stamped by Mark Hahnenberg

        Just renaming, no new tests.

        * ForwardingHeaders/profiler/LegacyProfiler.h: Copied from Source/WebCore/ForwardingHeaders/profiler/Profiler.h.
        * ForwardingHeaders/profiler/Profiler.h: Removed.
        * bindings/js/ScriptProfiler.cpp:
        (WebCore::ScriptProfiler::start):
        (WebCore::ScriptProfiler::stop):

2012-12-04  James Simonsen  <simonjam@chromium.org>

        [User Timing] Fix clang build by removing need for exit time destructor
        https://bugs.webkit.org/show_bug.cgi?id=104036

        Reviewed by Tony Gentilcore.

        Modeled after r99588.

        No new tests. No change in functionality.

        * page/PerformanceUserTiming.cpp:
        (WebCore::UserTiming::UserTiming):
        (WebCore::UserTiming::mark):
        (WebCore::UserTiming::findExistingMarkStartTime):
        * page/PerformanceUserTiming.h:
        (UserTiming):

2012-12-04  James Simonsen  <simonjam@chromium.org>

        [User Timing] Fix negative durations
        https://bugs.webkit.org/show_bug.cgi?id=104038

        Reviewed by Tony Gentilcore.

        At some point, we went from passing in a duration to passing in the end time. User Timing
        wasn't updated.

        Tests: http/tests/w3c/webperf/submission/Intel/user-timing

        * page/PerformanceMark.h:
        (WebCore::PerformanceMark::PerformanceMark):
        * page/PerformanceUserTiming.cpp:
        (WebCore::UserTiming::measure):

2012-12-04  Abhishek Arya  <inferno@chromium.org>

        Heap-use-after-free in WebCore::StyleCachedImageSet::cssValue
        https://bugs.webkit.org/show_bug.cgi?id=100621

        Reviewed by Eric Seidel.

        r115639 fixed a memory leak caused by reference cycle between StyleCachedImageSet
        and its owner CSSImageSetValue. The fix caused StyleCachedImageSet to maintain
        a weak pointer to CSSImageSetValue. This patch makes sure that the weak pointer
        is cleared when CSSImageSetValue is going away.

        Test: fast/css/image-set-value-not-removed-crash.html

        * css/CSSImageSetValue.cpp:
        (WebCore::CSSImageSetValue::~CSSImageSetValue):
        * rendering/style/StyleCachedImageSet.h:
        (WebCore::StyleCachedImageSet::clearImageSetValue):
        (StyleCachedImageSet):

2012-12-04  Adam Barth  <abarth@webkit.org>

        NodeFilter leaks memory in V8
        https://bugs.webkit.org/show_bug.cgi?id=104027

        Reviewed by Eric Seidel.

        NodeFilter holds a RefPtr to NodeFilterCondition, which holds a
        ScopedPersistent to its callback function. If the callback function can
        see the NodeFilter wrapper, we have a cycle and a leak.

        This patch makes the NodeFilterCondition hold a weak pointer to the
        callback function and ties the lifetime of that callback function to
        the NodeFilter wrapper (so they live and die together).

        * bindings/v8/V8GCController.cpp:
        * bindings/v8/V8NodeFilterCondition.cpp:
        (WebCore::V8NodeFilterCondition::V8NodeFilterCondition):
        (WebCore::V8NodeFilterCondition::weakCallback):
        (WebCore):
        (WebCore::V8NodeFilterCondition::acceptNode):
        * bindings/v8/V8NodeFilterCondition.h:
        (WebCore::V8NodeFilterCondition::create):
        (V8NodeFilterCondition):
        (WebCore::V8NodeFilterCondition::callback):
        * dom/NodeFilter.h:
        (WebCore::NodeFilter::condition):

2012-12-04  Abhishek Arya  <inferno@chromium.org>

        Crash in CachedResource::checkNotify due to -webkit-crossfade.
        https://bugs.webkit.org/show_bug.cgi?id=98068

        Reviewed by Nate Chapin.

        Make sure to not re-add the same client again for |m_cachedFromImage|
        and |m_cachedToImage|. This would otherwise cause the CSSCrossfadeValue
        client to not get removed from its cached image resource (when it is
        going away).

        Test: fast/images/crossfade-client-not-removed-crash.html

        * css/CSSCrossfadeValue.cpp:
        (WebCore::CSSCrossfadeValue::loadSubimages):

2012-12-04  Julien Chaffraix  <jchaffraix@webkit.org>

        Heap-use-after-free in WebCore::RenderLayer::paintList [MathML]
        https://bugs.webkit.org/show_bug.cgi?id=100764

        Reviewed by Eric Seidel.

        Test: mathml/mfenced-root-layer.html

        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::stackingContext):
        Fixed this function to ensure that it always returns a stacking context, the bug
        was that the document element's layer wasn't guaranteed to be a stacking context.

2012-12-04  Adam Barth  <abarth@webkit.org>

        [V8] GetNativeType in CodeGeneratorV8.pm needs a bath
        https://bugs.webkit.org/show_bug.cgi?id=104022

        Reviewed by Eric Seidel.

        This change shouldn't have any effect on the generated code.

        * bindings/scripts/CodeGeneratorV8.pm:
        (GetNativeType):
            - DOMUserData was removed in 2005. There's no need for the code
              generator to still know about it.
        (JSValueToNative):
        (ConvertToV8StringResource):

2012-12-04  Adam Barth  <abarth@webkit.org>

        [V8] EventTarget shouldn't be a special snowflake
        https://bugs.webkit.org/show_bug.cgi?id=104018

        Reviewed by Eric Seidel.

        Previously we special-cased the toV8 operation for event targets.
        There's no need for that. We can use IDL attribute to handle
        EventTarget using the same general-purpose code that we use for other
        interfaces.

        * WebCore.gypi:
        * bindings/scripts/CodeGeneratorV8.pm:
        (NativeToJSValue):
        * bindings/v8/V8AbstractEventListener.cpp:
        (WebCore::V8AbstractEventListener::getReceiverObject):
        * bindings/v8/V8DOMWrapper.cpp:
        * bindings/v8/V8DOMWrapper.h:
        (V8DOMWrapper):
        * bindings/v8/V8WorkerContextEventListener.cpp:
        (WebCore::V8WorkerContextEventListener::getReceiverObject):
        * bindings/v8/custom/V8EventTargetCustom.cpp: Added.
        (WebCore):
        (WebCore::toV8):
        * dom/EventTarget.idl:

2012-12-04  Florin Malita  <fmalita@chromium.org>

        Stale SVGUseElement reference in CachedResource::checkNotify()
        https://bugs.webkit.org/show_bug.cgi?id=104004

        Reviewed by Eric Seidel.

        SVGUseElement tracks one CachedSVGDocument at a time (for external references), but when
        the href attribute is updated it fails to unregister with the current CachedSVGDocument
        and only updates its CachedSVGDocument with the new instance. This leaves an untracked
        reference with the original CachedSVGDocument.

        The patch adds the missing removeClient() call on href change, and encapsulates the
        CachedSVGDocument manipulation in a helper method which handles the necessary cleanup.

        Test: svg/custom/use-href-update-crash.svg

        * svg/SVGUseElement.cpp:
        (WebCore::SVGUseElement::~SVGUseElement):
        (WebCore::SVGUseElement::svgAttributeChanged):
        (WebCore::SVGUseElement::setCachedDocument):
        (WebCore):
        * svg/SVGUseElement.h:
        (SVGUseElement):

2012-12-04  Yury Semikhatsky  <yurys@chromium.org>

        Web Inspector: Can't take a heap snapshot in chromium ("Uncaught ReferenceError")
        https://bugs.webkit.org/show_bug.cgi?id=103997

        Reviewed by Pavel Feldman.

        utilities.js used in both page and worker contexts should not access window
        object as there is no one in case of workers. NonLeakingMutationObserver implementation
        has moved to DOMExtension.js

        * inspector/front-end/DOMExtension.js:
        (NonLeakingMutationObserver.NonLeakingMutationObserver._unloadListener):
        (NonLeakingMutationObserver):
        (NonLeakingMutationObserver.prototype.observe):
        (NonLeakingMutationObserver.prototype.disconnect):
        * inspector/front-end/utilities.js:

2012-12-04  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r136509.
        http://trac.webkit.org/changeset/136509
        https://bugs.webkit.org/show_bug.cgi?id=104015

        broke layout tests (Requested by eae on #webkit).

        * platform/graphics/IntSize.h:
        (WebCore::IntSize::scale):

2012-12-04  Antoine Quint  <graouts@apple.com>

        INVALID_STATE_ERR error upon calling .addCue() for an already-in-use cue
        https://bugs.webkit.org/show_bug.cgi?id=103264

        Reviewed by Eric Carlson.

        Adhere to the latest spec for TextTrack's .addCue() method. This also fixes
        https://bugs.webkit.org/show_bug.cgi?id=103265 and we've removed
        media/track/opera/interfaces/TextTrack/addCue.html from the Skipped list.

        * html/track/TextTrack.cpp:
        (WebCore::TextTrack::addCue):
        * html/track/TextTrack.h:
        (TextTrack):
        * html/track/TextTrack.idl:

2012-12-04  Mike West  <mkwst@chromium.org>

        Log to console when forms and popups are blocked by 'sandbox'.
        https://bugs.webkit.org/show_bug.cgi?id=103615

        Reviewed by Adam Barth.

        Adds two console messages to cover form submissions blocked by a
        sandboxed frame lacking the 'allow-forms' permission, and window
        creation blocked by a sandboxed frame lacking the 'allow-popups'
        permission.

        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::submitForm):
            Log a warning when form submission is blocked by sandboxing flags.
        (WebCore::createWindow):
            Log a warning when window.open is blocked due to sandboxing flags.

2012-12-04  Kentaro Hara  <haraken@chromium.org>

        [V8] Make v8::Null(isolate) faster by caching the value in V8 bindings
        https://bugs.webkit.org/show_bug.cgi?id=103862

        Reviewed by Adam Barth.

        Performance comparison between V8 and JSC revealed that DOM attributes
        that return v8::Null(isolate) are much slower than JSC.
        (https://docs.google.com/a/chromium.org/spreadsheet/ccc?key=0AlobCOyvTnPKdDg5S0dMdGRGRTRSaW53V1ppVzh6eXc#gid=2)

        We can optimize v8::Null(isolate) by caching the value to V8PerIsolateData.
        (Although I don't like the optimization, it looks difficult to optimize
        v8::Null(isolate) more.)

        [Bindings/undefined-first-child.html]
        Before: 969 runs/sec, 970 runs/sec, 962 runs/sec
        After:  1086 runs/sec, 1085 runs/sec, 1086 runs/sec

        No tests. No change in behavior.

        * bindings/scripts/CodeGeneratorV8.pm:
        (GenerateHeader):
        (GenerateNormalAttrGetter):
        (GenerateFunctionCallback):
        (NativeToJSValue):
        * bindings/scripts/test/V8/V8TestNode.h:
        (WebCore::toV8Fast):
        * bindings/scripts/test/V8/V8TestObj.cpp:
        (WebCore::TestObjV8Internal::contentDocumentAttrGetter):
        (WebCore::TestObjV8Internal::getSVGDocumentCallback):
        * bindings/scripts/test/V8/V8TestSerializedScriptValueInterface.cpp:
        (WebCore::TestSerializedScriptValueInterfaceV8Internal::valueAttrGetter):
        (WebCore::TestSerializedScriptValueInterfaceV8Internal::readonlyValueAttrGetter):
        (WebCore::TestSerializedScriptValueInterfaceV8Internal::cachedValueAttrGetter):
        (WebCore::TestSerializedScriptValueInterfaceV8Internal::cachedReadonlyValueAttrGetter):
        * bindings/v8/V8Binding.h:
        (WebCore):
        (WebCore::v8Null):
        (WebCore::v8NullWithCheck):
        * bindings/v8/V8PerIsolateData.cpp:
        (WebCore::V8PerIsolateData::V8PerIsolateData):
        * bindings/v8/V8PerIsolateData.h:
        (WebCore::V8PerIsolateData::v8Null):
        (V8PerIsolateData):

2012-12-04  Alexis Menard  <alexis@webkit.org>

        Add an helper function in CSSParser to check for '/' character.
        https://bugs.webkit.org/show_bug.cgi?id=104009

        Reviewed by Ryosuke Niwa.

        Remove unwanted null check from r136525

        No new tests : just a refactor, existing tests should cover.

        * css/CSSParser.cpp:
        (WebCore::isForwardSlashOperator):

2012-12-04  Alexis Menard  <alexis@webkit.org>

        Add an helper function in CSSParser to check for '/' character.
        https://bugs.webkit.org/show_bug.cgi?id=104009

        Reviewed by Ryosuke Niwa.

        I'm about to add the same pattern in a following patch. Let's do an
        helper function first. We also did that for the comma. The slash
        character is pretty used in shorthands definitions.

        No new tests : just a refactor, existing tests should cover.

        * css/CSSParser.cpp:
        (WebCore::isForwardSlashOperator):
        (WebCore):
        (WebCore::CSSParser::parseFillShorthand):
        (WebCore::CSSParser::parseFont):
        (WebCore::CSSParser::parseBorderImage):
        (WebCore::CSSParser::parseAspectRatio):

2012-12-04  Ken Kania  <kkania@chromium.org>

        Inspector: Introduce Input.dispatchKeyEvent and DOM.focus for typing simulation.
        https://bugs.webkit.org/show_bug.cgi?id=103530

        Reviewed by Yury Semikhatsky.

        Input.dispatchKeyEvent simply calls EventHandler::keyEvent with the key event data
        from the command parameters. The client will be responsible for providing proper
        events to simulate desired typing behavior.
        DOM.focus calls focus on a dom element.

        Tests: inspector-protocol/dom-focus.html
               inspector-protocol/input-dispatchKeyEvent.html

        * CMakeLists.txt:
        * GNUmakefile.list.am:
        * Target.pri:
        * WebCore.gypi:
        * WebCore.vcproj/WebCore.vcproj:
        * WebCore.xcodeproj/project.pbxproj:
        * inspector/Inspector.json:
        * inspector/InspectorAllInOne.cpp:
        * inspector/InspectorController.cpp:
        (WebCore::InspectorController::InspectorController):
        * inspector/InspectorDOMAgent.cpp:
        (WebCore::InspectorDOMAgent::focus):
        (WebCore):
        (WebCore::InspectorDOMAgent::resolveNode):
        * inspector/InspectorDOMAgent.h:
        (InspectorDOMAgent):
        * inspector/InspectorInputAgent.cpp: Added.
        (WebCore):
        (WebCore::InspectorInputAgent::InspectorInputAgent):
        (WebCore::InspectorInputAgent::~InspectorInputAgent):
        (WebCore::InspectorInputAgent::dispatchKeyEvent):
        * inspector/InspectorInputAgent.h: Added.
        (WebCore):
        (InspectorInputAgent):
        (WebCore::InspectorInputAgent::create):

2012-12-04  Dan Bernstein  <mitz@apple.com>

        FontPlatformData has unnecessary m_textOrientation member
        https://bugs.webkit.org/show_bug.cgi?id=103971

        Reviewed by Darin Adler.

        Nothing in SimpleFontData depends on the FontPlatformData’s textOrientation, so we don’t
        need separate data for vertical-right and upright. We simply choose between
        verticalRightOrientationFontData() and uprightOrientationFontData() based on the
        textOrientation in the FontDescription.

        * WebCore.exp.in: Updated FontPlatformData constructor exports.

        * css/CSSFontFaceSource.cpp:
        (WebCore::CSSFontFaceSource::getFontData): Removed the text orientation bit from the hash key,
        and updated for the removal of the TextOrientation parameter to
        CachedFont::platformDataFromCustomData().

        * loader/cache/CachedFont.cpp:
        (WebCore::CachedFont::platformDataFromCustomData): Removed the TextOrientation parameter.
        * loader/cache/CachedFont.h:

        * platform/graphics/FontCache.cpp:
        (WebCore::FontPlatformDataCacheKey::FontPlatformDataCacheKey): Removed the TextOrientation
        parameter and initializer.
        (WebCore::FontPlatformDataCacheKey::operator==): Updated for removal of m_textOrientation
        member variable.
        (FontPlatformDataCacheKey): Removed m_textOrientation member variable.
        (WebCore::computeHash): Removed text orientation bit from the hash.
        (WebCore::FontCache::getCachedFontPlatformData): Updated for FontPlatformDataCacheKey
        change.

        * platform/graphics/FontPlatformData.cpp:
        (WebCore::FontPlatformData::FontPlatformData): Removed TextOrientation parameters and
        initializers.
        (WebCore::FontPlatformData::operator=): Updated for removal of m_textOrientation
        member variable.
        * platform/graphics/FontPlatformData.h:
        (FontPlatformData): Removed m_textOrientation member variable, removed TextOrientation
        parameters from constructors.
        (WebCore::FontPlatformData::hash): Removed text orientation bit.
        (WebCore::FontPlatformData::operator==): Updated for removed member variable.

        * platform/graphics/cairo/FontCustomPlatformData.h:
        (FontCustomPlatformData::fontPlatformData): Removed TextOrientation parameter.

        * platform/graphics/chromium/FontCacheAndroid.cpp:
        (WebCore::FontCache::createFontPlatformData): Updated for FontPlatformData change.

        * platform/graphics/cocoa/FontPlatformDataCocoa.mm:
        (WebCore::FontPlatformData::FontPlatformData): Removed TextOrientation parameter and
        initializer.

        * platform/graphics/freetype/FontCustomPlatformDataFreeType.cpp:
        (WebCore::FontCustomPlatformData::fontPlatformData): Removed TextOrientation parameter.
        * platform/graphics/harfbuzz/FontPlatformDataHarfBuzz.cpp:
        (WebCore::FontPlatformData::FontPlatformData): Removed TextOrientation parameter and
        initializers.
        (WebCore::FontPlatformData::operator=): Updated for removed member variable.
        (WebCore::FontPlatformData::operator==): Ditto.
        (WebCore::FontPlatformData::hash): Removed text orientation bit.

        * platform/graphics/harfbuzz/FontPlatformDataHarfBuzz.h:
        (FontPlatformData): Removed TextOrientation parameter from the constructor declaration.

        * platform/graphics/mac/FontCacheMac.mm:
        (WebCore::FontCache::createFontPlatformData): Updated for FontPlatformData change.

        * platform/graphics/mac/FontCustomPlatformData.cpp:
        (WebCore::FontCustomPlatformData::fontPlatformData): Removed TextOrientation parameter.

        * platform/graphics/mac/FontCustomPlatformData.h:
        (FontCustomPlatformData): Removed TextOrientation parameter from declaration of
        fontPlatformData().

        * platform/graphics/mac/SimpleFontDataMac.mm:
        (WebCore::SimpleFontData::getCompositeFontReferenceFontData): Updated for FontPlatformData
        change.

        * platform/graphics/pango/FontCustomPlatformDataPango.cpp:
        (WebCore::FontCustomPlatformData::fontPlatformData): Removed TextOrientation parameter.
        * platform/graphics/qt/FontCustomPlatformData.h:

        * platform/graphics/qt/FontCustomPlatformDataQt.cpp:
        (WebCore::FontCustomPlatformData::fontPlatformData): Ditto.

        * platform/graphics/skia/FontCacheSkia.cpp:
        (WebCore::FontCache::createFontPlatformData): Updated for FontPlatformData change.

        * platform/graphics/skia/FontCustomPlatformData.cpp:
        (WebCore::FontCustomPlatformData::fontPlatformData): Removed TextOrientation parameter.
        * platform/graphics/skia/FontCustomPlatformData.h:

        * platform/graphics/win/FontCustomPlatformData.cpp:
        (WebCore::FontCustomPlatformData::fontPlatformData): Removed TextOrientation parameter.
        * platform/graphics/win/FontCustomPlatformData.h:

        * platform/graphics/win/FontCustomPlatformDataCairo.cpp:
        (WebCore::FontCustomPlatformData::fontPlatformData): Removed TextOrientation parameter.
        * platform/graphics/win/FontCustomPlatformDataCairo.h:

        * platform/graphics/win/FontPlatformDataCGWin.cpp:
        (WebCore::FontPlatformData::FontPlatformData): Removed m_textOrientation initializer.

        * platform/graphics/win/FontPlatformDataCairoWin.cpp:
        (WebCore::FontPlatformData::FontPlatformData): Ditto.

        * platform/graphics/win/FontPlatformDataWin.cpp:
        (WebCore::FontPlatformData::FontPlatformData): Ditto.

        * platform/graphics/wince/FontCustomPlatformData.cpp:
        (WebCore::FontCustomPlatformData::fontPlatformData): Removed TextOrientation parameter.
        * platform/graphics/wince/FontCustomPlatformData.h:

2012-12-04  Charlie Reis  <creis@chromium.org>

        Add FrameLoaderClient::didDisownOpener
        https://bugs.webkit.org/show_bug.cgi?id=103789

        Reviewed by Darin Fisher.

        Adds a didDisownOwner notification when a frame's opener is cleared,
        so that FrameLoaderClients can react.

        No new tests.

        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::setOpener): Calls didDisownOpener if opener is cleared.
        * loader/FrameLoaderClient.h:
        (FrameLoaderClient):
        (WebCore::FrameLoaderClient::didDisownOpener):

2012-12-04  Robert Hogan  <robert@webkit.org>

        Redrawing issue with inserting new inline element between existing inline elements
        https://bugs.webkit.org/show_bug.cgi?id=50315

        Reviewed by Levi Weintraub.

        When inserting an element such as '<span>text<br></span>' between two lineboxes, the second of which has leading space
        collapsed away after a line-break, dirtyLinesFromChangeChild() needs to ensure that the linebox the fragment is inserted into (the second 
        of the two lineboxes) gets dirtied. 
        
        Since the element has been inserted before the first element in the linebox, but after the collapsed leading
        space, the search for the new element's linebox will go past the leading space to the previous linebox and select that
        one by mistake.
        
        So in order to ensure the element's linebox is dirtied make sure its previous sibling is not the line-break object of the
        linebox we selected when searching for a linebox to dirty. If the previous sibling is the linebox's line-break object then
        the element is in the one after the one we selected and we should dirty that linebox too. 

        Test: fast/inline/layout-after-inserting-nested-br.html

        * rendering/RenderLineBoxList.cpp:
        (WebCore::RenderLineBoxList::dirtyLinesFromChangedChild):

2012-12-04  Mikhail Pozdnyakov  <mikhail.pozdnyakov@intel.com>

        IntSize::scale() should return rounded value
        https://bugs.webkit.org/show_bug.cgi?id=103984

        Reviewed by Kenneth Rohde Christiansen.

        IntSize::scale() is now rounding float value to the nearest integer instead of blind type casting.

        Test: css3/device-adapt/viewport-width-not-affecting-next-page.html

        * platform/graphics/IntSize.h:
        (WebCore::IntSize::scale):

2012-12-04  Adam Bergkvist  <adam.bergkvist@ericsson.com>

        Add support for generic types in arrays and sequences to the code generators
        https://bugs.webkit.org/show_bug.cgi?id=103642

        Reviewed by Kentaro Hara.

        Updated the bindings generators to support arrays and sequences of host objects.

        - Arrays and sequences of host objects are mapped to Vector<RefPtr<%RefPtrType%> >.
        - Fixed issue where "sequence<String>" was used in IDL files instead of "sequence<DOMString>".

        Updated existing test results.

        * Modules/indexeddb/IDBDatabase.idl:
        * Modules/indexeddb/IDBObjectStore.idl:
        * Modules/mediastream/RTCStatsElement.idl:
        * Modules/websockets/WebSocket.idl:
        * bindings/js/JSDOMBinding.h:
        (WebCore::toRefPtrNativeArray):
        (WebCore):
        * bindings/scripts/CodeGenerator.pm:
        (IsRefPtrType):
        * bindings/scripts/CodeGeneratorJS.pm:
        (AddIncludesForType):
        (GetNativeType):
        (GetNativeVectorInnerType):
        (JSValueToNative):
        (NativeToJSValue):
        * bindings/scripts/CodeGeneratorV8.pm:
        (GenerateNormalAttrGetter):
        (GenerateNormalAttrSetter):
        (GenerateParametersCheckExpression):
        (GenerateFunctionCallString):
        (GetNativeType):
        (JSValueToNative):
        (CreateCustomSignature):
        (NativeToJSValue):
        * bindings/scripts/test/JS/JSTestObj.cpp:
        (WebCore::jsTestObjPrototypeFunctionMethodWithSequenceArg):
        * bindings/scripts/test/V8/V8TestObj.cpp:
        (WebCore::TestObjV8Internal::longLongAttrAttrSetter):
        (WebCore::TestObjV8Internal::unsignedLongLongAttrAttrSetter):
        (WebCore::TestObjV8Internal::methodWithSequenceArgCallback):
        (WebCore::TestObjV8Internal::overloadedMethod10Callback):
        * bindings/v8/V8Binding.h:
        (WebCore::toRefPtrNativeArray):
        * testing/Internals.idl:

2012-12-04  Antoine Quint  <graouts@apple.com>

        TextTrack's .kind property should return lower-case values
        https://bugs.webkit.org/show_bug.cgi?id=103411

        Reviewed by Eric Carlson.

        While the HTML "kind" attribute on the <track> element allows upper-case values, the related APIs
        on HTMLMediaElement and TextTrack expect only to deal with lower-case values. As such, we're updating
        TextTrack::isValidKindKeyword() to be case-sensitive and ensure that values fed from the DOM (the values
        read from HTML attributes) are lower-case'd.

        Thanks to this fix, we're no longer skipping media/track/opera/interfaces/TextTrack/kind.html and
        media/track/opera/interfaces/HTMLElement/HTMLMediaElement/addTextTrack.html 

        This patch also fixes https://bugs.webkit.org/show_bug.cgi?id=103256.

        * html/HTMLTrackElement.cpp:
        (WebCore::HTMLTrackElement::parseAttribute):
        (WebCore::HTMLTrackElement::ensureTrack):
        * html/track/TextTrack.cpp:
        (WebCore::TextTrack::isValidKindKeyword):

2012-12-04  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r136498.
        http://trac.webkit.org/changeset/136498
        https://bugs.webkit.org/show_bug.cgi?id=103992

        Patch causes a lot of tests to crash in GTK+ bots (Requested
        by KaL on #webkit).

        * bindings/scripts/CodeGeneratorGObject.pm:
        (GenerateProperties):
        (GenerateHeader):
        (GenerateCFile):
        (GenerateEventTargetIface):
        (WriteData):
        * bindings/scripts/test/GObject/WebKitDOMFloat64Array.cpp:
        (WebKit::core):
        (WebKit::wrapFloat64Array):
        (webkit_dom_float64array_finalize):
        (webkit_dom_float64array_class_init):
        (webkit_dom_float64array_init):
        * bindings/scripts/test/GObject/WebKitDOMFloat64Array.h:
        * bindings/scripts/test/GObject/WebKitDOMTestActiveDOMObject.cpp:
        (WebKit::core):
        (WebKit::wrapTestActiveDOMObject):
        (webkit_dom_test_active_dom_object_finalize):
        (webkit_dom_test_active_dom_object_class_init):
        (webkit_dom_test_active_dom_object_init):
        * bindings/scripts/test/GObject/WebKitDOMTestActiveDOMObject.h:
        * bindings/scripts/test/GObject/WebKitDOMTestCallback.cpp:
        (WebKit::core):
        (WebKit::wrapTestCallback):
        (webkit_dom_test_callback_finalize):
        (webkit_dom_test_callback_class_init):
        (webkit_dom_test_callback_init):
        * bindings/scripts/test/GObject/WebKitDOMTestCallback.h:
        * bindings/scripts/test/GObject/WebKitDOMTestCustomNamedGetter.cpp:
        (WebKit::core):
        (WebKit::wrapTestCustomNamedGetter):
        (webkit_dom_test_custom_named_getter_finalize):
        (webkit_dom_test_custom_named_getter_class_init):
        (webkit_dom_test_custom_named_getter_init):
        * bindings/scripts/test/GObject/WebKitDOMTestCustomNamedGetter.h:
        * bindings/scripts/test/GObject/WebKitDOMTestEventConstructor.cpp:
        (WebKit::core):
        (WebKit::wrapTestEventConstructor):
        (webkit_dom_test_event_constructor_finalize):
        (webkit_dom_test_event_constructor_class_init):
        (webkit_dom_test_event_constructor_init):
        * bindings/scripts/test/GObject/WebKitDOMTestEventConstructor.h:
        * bindings/scripts/test/GObject/WebKitDOMTestEventTarget.cpp:
        (WebKit::core):
        (WebKit::wrapTestEventTarget):
        (webkit_dom_test_event_target_dispatch_event):
        (webkit_dom_test_event_target_add_event_listener):
        (webkit_dom_test_event_target_remove_event_listener):
        (webkit_dom_test_event_target_finalize):
        (webkit_dom_test_event_target_class_init):
        (webkit_dom_test_event_target_init):
        * bindings/scripts/test/GObject/WebKitDOMTestEventTarget.h:
        * bindings/scripts/test/GObject/WebKitDOMTestException.cpp:
        (WebKit::core):
        (WebKit::wrapTestException):
        (webkit_dom_test_exception_finalize):
        (webkit_dom_test_exception_class_init):
        (webkit_dom_test_exception_init):
        * bindings/scripts/test/GObject/WebKitDOMTestException.h:
        * bindings/scripts/test/GObject/WebKitDOMTestInterface.cpp:
        (WebKit::core):
        (WebKit::wrapTestInterface):
        (webkit_dom_test_interface_finalize):
        (webkit_dom_test_interface_class_init):
        (webkit_dom_test_interface_init):
        * bindings/scripts/test/GObject/WebKitDOMTestInterface.h:
        * bindings/scripts/test/GObject/WebKitDOMTestMediaQueryListListener.cpp:
        (WebKit::core):
        (WebKit::wrapTestMediaQueryListListener):
        (webkit_dom_test_media_query_list_listener_finalize):
        (webkit_dom_test_media_query_list_listener_class_init):
        (webkit_dom_test_media_query_list_listener_init):
        * bindings/scripts/test/GObject/WebKitDOMTestMediaQueryListListener.h:
        * bindings/scripts/test/GObject/WebKitDOMTestNamedConstructor.cpp:
        (WebKit::core):
        (WebKit::wrapTestNamedConstructor):
        (webkit_dom_test_named_constructor_finalize):
        (webkit_dom_test_named_constructor_class_init):
        (webkit_dom_test_named_constructor_init):
        * bindings/scripts/test/GObject/WebKitDOMTestNamedConstructor.h:
        * bindings/scripts/test/GObject/WebKitDOMTestNode.cpp:
        (WebKit::core):
        (WebKit::wrapTestNode):
        (webkit_dom_test_node_dispatch_event):
        (webkit_dom_test_node_add_event_listener):
        (webkit_dom_test_node_remove_event_listener):
        (webkit_dom_test_node_finalize):
        (webkit_dom_test_node_class_init):
        (webkit_dom_test_node_init):
        * bindings/scripts/test/GObject/WebKitDOMTestNode.h:
        * bindings/scripts/test/GObject/WebKitDOMTestObj.cpp:
        (WebKit::core):
        (WebKit::wrapTestObj):
        (webkit_dom_test_obj_finalize):
        (webkit_dom_test_obj_class_init):
        (webkit_dom_test_obj_init):
        * bindings/scripts/test/GObject/WebKitDOMTestObj.h:
        * bindings/scripts/test/GObject/WebKitDOMTestOverloadedConstructors.cpp:
        (WebKit::core):
        (WebKit::wrapTestOverloadedConstructors):
        (webkit_dom_test_overloaded_constructors_finalize):
        (webkit_dom_test_overloaded_constructors_class_init):
        (webkit_dom_test_overloaded_constructors_init):
        * bindings/scripts/test/GObject/WebKitDOMTestOverloadedConstructors.h:
        * bindings/scripts/test/GObject/WebKitDOMTestSerializedScriptValueInterface.cpp:
        (WebKit::core):
        (WebKit::wrapTestSerializedScriptValueInterface):
        (webkit_dom_test_serialized_script_value_interface_finalize):
        (webkit_dom_test_serialized_script_value_interface_class_init):
        (webkit_dom_test_serialized_script_value_interface_init):
        * bindings/scripts/test/GObject/WebKitDOMTestSerializedScriptValueInterface.h:

2012-12-04  Markus Heintz  <markusheintz@chromium.org>

        Web Inspector: Viewport console warnings cleanup.
        https://bugs.webkit.org/show_bug.cgi?id=102890

        Reviewed by Jochen Eisinger.

        Improve the console message text for a viewport console warning and
        change the log level to warning.

        No new tests added, as this change is covered by updates to existing
        test expectations.

        * dom/ViewportArguments.cpp:
        (WebCore::viewportErrorMessageTemplate):
            Improve the console message text for invalid values.
        (WebCore::viewportErrorMessageLevel):
            Upgraded the TruncatedViewportArgumentValueError and the
            TargetDensityDpiUnsupported messages's MessageLeval to warning.
        (WebCore::reportViewportWarning):
            Adding only a comment for a FIXIT reminder.

2012-12-04  Carlos Garcia Campos  <cgarcia@igalia.com>

        [GTK] Use a private struct and placement new syntax in GObject DOM bindings
        https://bugs.webkit.org/show_bug.cgi?id=101074

        Reviewed by Xan Lopez.

        It allows to use RefPtr for the wrapped object and it simplifies
        the code.

        * bindings/scripts/CodeGeneratorGObject.pm:
        (GenerateProperties):
        (GenerateHeader):
        (GenerateCFile):
        (GenerateEventTargetIface):
        (WriteData):
        * bindings/scripts/test/GObject/WebKitDOMFloat64Array.cpp:
        (_WebKitDOMFloat64ArrayPrivate):
        (WebKit::core):
        (WebKit::wrapFloat64Array):
        (webkit_dom_float64array_finalize):
        (webkit_dom_float64array_constructor):
        (webkit_dom_float64array_class_init):
        (webkit_dom_float64array_init):
        * bindings/scripts/test/GObject/WebKitDOMFloat64Array.h:
        (_WebKitDOMFloat64Array):
        * bindings/scripts/test/GObject/WebKitDOMTestActiveDOMObject.cpp:
        (_WebKitDOMTestActiveDOMObjectPrivate):
        (WebKit::core):
        (WebKit::wrapTestActiveDOMObject):
        (webkit_dom_test_active_dom_object_finalize):
        (webkit_dom_test_active_dom_object_constructor):
        (webkit_dom_test_active_dom_object_class_init):
        (webkit_dom_test_active_dom_object_init):
        * bindings/scripts/test/GObject/WebKitDOMTestActiveDOMObject.h:
        (_WebKitDOMTestActiveDOMObject):
        * bindings/scripts/test/GObject/WebKitDOMTestCallback.cpp:
        (_WebKitDOMTestCallbackPrivate):
        (WebKit::core):
        (WebKit::wrapTestCallback):
        (webkit_dom_test_callback_finalize):
        (webkit_dom_test_callback_constructor):
        (webkit_dom_test_callback_class_init):
        (webkit_dom_test_callback_init):
        * bindings/scripts/test/GObject/WebKitDOMTestCallback.h:
        (_WebKitDOMTestCallback):
        * bindings/scripts/test/GObject/WebKitDOMTestCustomNamedGetter.cpp:
        (_WebKitDOMTestCustomNamedGetterPrivate):
        (WebKit::core):
        (WebKit::wrapTestCustomNamedGetter):
        (webkit_dom_test_custom_named_getter_finalize):
        (webkit_dom_test_custom_named_getter_constructor):
        (webkit_dom_test_custom_named_getter_class_init):
        (webkit_dom_test_custom_named_getter_init):
        * bindings/scripts/test/GObject/WebKitDOMTestCustomNamedGetter.h:
        (_WebKitDOMTestCustomNamedGetter):
        * bindings/scripts/test/GObject/WebKitDOMTestEventConstructor.cpp:
        (_WebKitDOMTestEventConstructorPrivate):
        (WebKit::core):
        (WebKit::wrapTestEventConstructor):
        (webkit_dom_test_event_constructor_finalize):
        (webkit_dom_test_event_constructor_constructor):
        (webkit_dom_test_event_constructor_class_init):
        (webkit_dom_test_event_constructor_init):
        * bindings/scripts/test/GObject/WebKitDOMTestEventConstructor.h:
        (_WebKitDOMTestEventConstructor):
        * bindings/scripts/test/GObject/WebKitDOMTestEventTarget.cpp:
        (_WebKitDOMTestEventTargetPrivate):
        (WebKit::core):
        (WebKit::wrapTestEventTarget):
        (webkit_dom_test_event_target_dispatch_event):
        (webkit_dom_test_event_target_add_event_listener):
        (webkit_dom_test_event_target_remove_event_listener):
        (webkit_dom_test_event_target_finalize):
        (webkit_dom_test_event_target_constructor):
        (webkit_dom_test_event_target_class_init):
        (webkit_dom_test_event_target_init):
        * bindings/scripts/test/GObject/WebKitDOMTestEventTarget.h:
        (_WebKitDOMTestEventTarget):
        * bindings/scripts/test/GObject/WebKitDOMTestException.cpp:
        (_WebKitDOMTestExceptionPrivate):
        (WebKit::core):
        (WebKit::wrapTestException):
        (webkit_dom_test_exception_finalize):
        (webkit_dom_test_exception_constructor):
        (webkit_dom_test_exception_class_init):
        (webkit_dom_test_exception_init):
        * bindings/scripts/test/GObject/WebKitDOMTestException.h:
        (_WebKitDOMTestException):
        * bindings/scripts/test/GObject/WebKitDOMTestInterface.cpp:
        (_WebKitDOMTestInterfacePrivate):
        (WebKit::core):
        (WebKit::wrapTestInterface):
        (webkit_dom_test_interface_finalize):
        (webkit_dom_test_interface_constructor):
        (webkit_dom_test_interface_class_init):
        (webkit_dom_test_interface_init):
        * bindings/scripts/test/GObject/WebKitDOMTestInterface.h:
        (_WebKitDOMTestInterface):
        * bindings/scripts/test/GObject/WebKitDOMTestMediaQueryListListener.cpp:
        (_WebKitDOMTestMediaQueryListListenerPrivate):
        (WebKit::core):
        (WebKit::wrapTestMediaQueryListListener):
        (webkit_dom_test_media_query_list_listener_finalize):
        (webkit_dom_test_media_query_list_listener_constructor):
        (webkit_dom_test_media_query_list_listener_class_init):
        (webkit_dom_test_media_query_list_listener_init):
        * bindings/scripts/test/GObject/WebKitDOMTestMediaQueryListListener.h:
        (_WebKitDOMTestMediaQueryListListener):
        * bindings/scripts/test/GObject/WebKitDOMTestNamedConstructor.cpp:
        (_WebKitDOMTestNamedConstructorPrivate):
        (WebKit::core):
        (WebKit::wrapTestNamedConstructor):
        (webkit_dom_test_named_constructor_finalize):
        (webkit_dom_test_named_constructor_constructor):
        (webkit_dom_test_named_constructor_class_init):
        (webkit_dom_test_named_constructor_init):
        * bindings/scripts/test/GObject/WebKitDOMTestNamedConstructor.h:
        (_WebKitDOMTestNamedConstructor):
        * bindings/scripts/test/GObject/WebKitDOMTestNode.cpp:
        (_WebKitDOMTestNodePrivate):
        (WebKit::core):
        (WebKit::wrapTestNode):
        (webkit_dom_test_node_dispatch_event):
        (webkit_dom_test_node_add_event_listener):
        (webkit_dom_test_node_remove_event_listener):
        (webkit_dom_test_node_finalize):
        (webkit_dom_test_node_constructor):
        (webkit_dom_test_node_class_init):
        (webkit_dom_test_node_init):
        * bindings/scripts/test/GObject/WebKitDOMTestNode.h:
        (_WebKitDOMTestNode):
        * bindings/scripts/test/GObject/WebKitDOMTestObj.cpp:
        (_WebKitDOMTestObjPrivate):
        (WebKit::core):
        (WebKit::wrapTestObj):
        (webkit_dom_test_obj_finalize):
        (webkit_dom_test_obj_constructor):
        (webkit_dom_test_obj_class_init):
        (webkit_dom_test_obj_init):
        * bindings/scripts/test/GObject/WebKitDOMTestObj.h:
        (_WebKitDOMTestObj):
        * bindings/scripts/test/GObject/WebKitDOMTestSerializedScriptValueInterface.cpp:
        (_WebKitDOMTestSerializedScriptValueInterfacePrivate):
        (WebKit::core):
        (WebKit::wrapTestSerializedScriptValueInterface):
        (webkit_dom_test_serialized_script_value_interface_finalize):
        (webkit_dom_test_serialized_script_value_interface_constructor):
        (webkit_dom_test_serialized_script_value_interface_class_init):
        (webkit_dom_test_serialized_script_value_interface_init):
        * bindings/scripts/test/GObject/WebKitDOMTestSerializedScriptValueInterface.h:
        (_WebKitDOMTestSerializedScriptValueInterface):

2012-12-04  David Grogan  <dgrogan@chromium.org>

        IndexedDB: Make leveldb histogram entries more fine-grained
        https://bugs.webkit.org/show_bug.cgi?id=103688

        Reviewed by Tony Chang.

        Allow us better insight into which functions the IO errors originate
        from.

        * Modules/indexeddb/IDBBackingStore.cpp:
        (WebCore::setUpMetadata):
        (WebCore::IDBBackingStore::getIDBDatabaseMetaData):
        (WebCore::IDBBackingStore::getObjectStores):
        (WebCore::IDBBackingStore::getRecord):
        (WebCore::IDBBackingStore::getKeyGeneratorCurrentNumber):
        (WebCore::IDBBackingStore::keyExistsInObjectStore):
        (WebCore::IDBBackingStore::getIndexes):
        (WebCore::IDBBackingStore::findKeyInIndex):
        (WebCore::ObjectStoreKeyCursorImpl::loadCurrentRow):
        (WebCore::ObjectStoreCursorImpl::loadCurrentRow):
        (WebCore::IndexKeyCursorImpl::loadCurrentRow):
        (WebCore::IndexCursorImpl::loadCurrentRow):

2012-12-04  Carlos Garcia Campos  <cgarcia@igalia.com>

        [GTK] Avoid unnecessary heap allocations during drag and drop operations
        https://bugs.webkit.org/show_bug.cgi?id=87938

        Reviewed by Martin Robinson.

        * platform/gtk/GtkDragAndDropHelper.cpp:
        (WebCore::GtkDragAndDropHelper::handleDragMotion): Return a
        pointer to the DataObjectGtk so that the caller can create the
        DragData object in the stack.
        (WebCore::GtkDragAndDropHelper::handleDragDataReceived): Ditto.
        (WebCore::GtkDragAndDropHelper::handleDragDrop): Ditto.
        * platform/gtk/GtkDragAndDropHelper.h:

2012-12-04  Alexander Pavlov  <apavlov@chromium.org>

        Web Inspector: [Overrides] Add ability to override the page CSS media type
        https://bugs.webkit.org/show_bug.cgi?id=103752

        Reviewed by Pavel Feldman.

        This change emulates the CSS media types through the instrumentation of FrameView::mediaType().
        Even though it already checks the associated FrameLoaderClient::overrideMediaType(), instrumenting
        every single platform FrameLoaderClient implementation out there seems wrong.

        Test: inspector/styles/media-emulation.html

        * English.lproj/localizedStrings.js:
        * inspector/Inspector.json: Add Page.setEmulatedMedia().
        * inspector/InspectorInstrumentation.cpp:
        (WebCore::InspectorInstrumentation::applyEmulatedMediaImpl): Added.
        * inspector/InspectorInstrumentation.h:
        (WebCore::InspectorInstrumentation::applyEmulatedMedia): Added.
        * inspector/InspectorPageAgent.cpp:
        (WebCore::InspectorPageAgent::restore): Restores the media emulation state.
        (WebCore::InspectorPageAgent::disable): Resets the media emulation state.
        (WebCore::InspectorPageAgent::setEmulatedMedia): Added.
        (WebCore::InspectorPageAgent::applyEmulatedMedia): Applies the emulated CSS media if needed.
        * inspector/InspectorPageAgent.h:
        * inspector/front-end/CSSStyleModel.js: Add the list of media types.
        * inspector/front-end/OverridesView.js: Add the CSS media type override UI.
        (WebInspector.OverridesView):
        (WebInspector.OverridesView.prototype._createMediaEmulationElement): Builds the UI.
        (WebInspector.OverridesView.prototype._emulateMediaChanged): Handles the control value changes.
        * inspector/front-end/Settings.js: Add the "emulatedCSSMedia" setting.
        * page/FrameView.cpp:
        (WebCore::FrameView::mediaType):
          Uses InspectorInstrumentation::applyEmulatedMedia() to provide the emulated value.

2012-12-03  Carlos Garcia Campos  <cgarcia@igalia.com>

        [GTK] Simplify GObject DOM bindings code for handling properties
        https://bugs.webkit.org/show_bug.cgi?id=101072

        Reviewed by Xan Lopez.

        Do not override GObjectClass::set_property if the wrapped object
        doesn't have writable properties, and don't override
        GObjectClass::get_property if the wrapped object doesn't have
        properties at all. It reduces some GObject boilerplate in
        generated code for some objects.

        * bindings/scripts/CodeGeneratorGObject.pm:
        (GenerateProperties):
        * bindings/scripts/test/GObject/WebKitDOMFloat64Array.cpp:
        (webkit_dom_float64array_class_init):
        * bindings/scripts/test/GObject/WebKitDOMTestActiveDOMObject.cpp:
        (webkit_dom_test_active_dom_object_class_init):
        * bindings/scripts/test/GObject/WebKitDOMTestCallback.cpp:
        (webkit_dom_test_callback_class_init):
        * bindings/scripts/test/GObject/WebKitDOMTestCustomNamedGetter.cpp:
        (webkit_dom_test_custom_named_getter_class_init):
        * bindings/scripts/test/GObject/WebKitDOMTestEventConstructor.cpp:
        (webkit_dom_test_event_constructor_class_init):
        * bindings/scripts/test/GObject/WebKitDOMTestEventTarget.cpp:
        (webkit_dom_test_event_target_class_init):
        * bindings/scripts/test/GObject/WebKitDOMTestException.cpp:
        (webkit_dom_test_exception_class_init):
        * bindings/scripts/test/GObject/WebKitDOMTestInterface.cpp:
        (webkit_dom_test_interface_class_init):
        * bindings/scripts/test/GObject/WebKitDOMTestMediaQueryListListener.cpp:
        (webkit_dom_test_media_query_list_listener_class_init):
        * bindings/scripts/test/GObject/WebKitDOMTestNamedConstructor.cpp:
        (webkit_dom_test_named_constructor_class_init):
        * bindings/scripts/test/GObject/WebKitDOMTestNode.cpp:
        (webkit_dom_test_node_class_init):
        * bindings/scripts/test/GObject/WebKitDOMTestObj.cpp:
        (webkit_dom_test_obj_class_init):
        * bindings/scripts/test/GObject/WebKitDOMTestSerializedScriptValueInterface.cpp:
        (webkit_dom_test_serialized_script_value_interface_class_init):

2012-12-04  Kentaro Hara  <haraken@chromium.org>

        Unreviewed. Rebaselined run-bindings-tests.

        * bindings/scripts/test/JS/JSTestNode.cpp:
        (WebCore::JSTestNode::visitChildren):
        (WebCore):

2012-12-03  Alexander Pavlov  <apavlov@chromium.org>

        Web Inspector: [REGRESSION] [Styles] Rule disappears if edited selector does not affect selected node
        https://bugs.webkit.org/show_bug.cgi?id=103059

        Reviewed by Pavel Feldman.

        This change effectively turns WebInspector.cssModel.setRuleSelector() into a _userOperation
        (in terms of StylesSidebarPane), which finishes upon the _finishOperationAndMoveEditor() invocation.

        * inspector/front-end/CSSStyleModel.js:
        (WebInspector.CSSRule): Fix selectorText now that r136370 has landed.
        * inspector/front-end/StylesSidebarPane.js:
        (WebInspector.StylePropertiesSection.prototype.update): Update the selector text from the model.
        (WebInspector.StylePropertiesSection.prototype._markSelectorMatches): Set the "selector" className regardless of the matched selectors presence.
        (WebInspector.StylePropertiesSection.prototype.successCallback): Make use of the _userOperation flag.
        (WebInspector.StylePropertiesSection.prototype.finishOperationAndMoveEditor): Delete the _userOperation flag.
        (WebInspector.StylePropertiesSection.prototype.editingSelectorCommitted): Make use of the _userOperation flag.
        (WebInspector.BlankStylePropertiesSection.prototype.editingSelectorCommitted): Mark selector matches.
        (WebInspector.BlankStylePropertiesSection.prototype.editingSelectorCancelled): Delete the _userOperation flag.

2012-12-04  Kondapally Kalyan  <kalyan.kondapally@intel.com>

        [EFL][WK2][AC] USE_GRAPHICS_SURFACE should be enabled only if Xcomposite and Xrender extensions are found.
        https://bugs.webkit.org/show_bug.cgi?id=103710.

        Reviewed by Kenneth Rohde Christiansen.

        When using GLX back-end we are dependent on GLX support, Xcomposite and Xrender extensions.
        In this case, GraphicsSurface usage depends on Xcomposite and Xrender extensions. 
        USE_GRAPHICS_SURFACE should be enabled only if Xcomposite and Xrender extensions are found.

        * platform/graphics/opengl/GLPlatformSurface.cpp:
        (WebCore::GLPlatformSurface::createTransportSurface):
        * platform/graphics/surfaces/glx/GLXSurface.cpp:
        (WebCore):
        * platform/graphics/surfaces/glx/GLXSurface.h:
        (WebCore::SharedX11Resources::createConfig):
        (SharedX11Resources):

2012-12-04  Michael Pruett  <michael@68k.org>

        [JSC] Generate visitChildren() for uncustomized EventTarget interfaces
        https://bugs.webkit.org/show_bug.cgi?id=103908

        Reviewed by Geoffrey Garen.

        CodeGeneratorJS.pm should automatically generate visitChildren()
        for EventTarget interfaces without custom mark functions even if
        those interfaces have no functions or cached attributes.

        This change is needed for IDBOpenDBRequest and IDBVersionChangeRequest.

        No new tests. Covered by existing tests.

        * bindings/scripts/CodeGeneratorJS.pm:
        (GenerateImplementation):

2012-12-04  Kentaro Hara  <haraken@chromium.org>

        Change ChildNodeInsertionNotifier::m_postInsertionsNotificationTargets from a Vector to an OwnPtr
        https://bugs.webkit.org/show_bug.cgi?id=103868

        Reviewed by Darin Adler.

        ChildNodeInsertionNotifier::m_postInsertionsNotificationTargets is
        used for HTMLFrameElement and HTMLBodyElement only, which would be
        a cold path. We can change it from a Vector to an OwnPtr<Vector>
        so that ChildNodeInsertionNotifier can be allocated faster. This patch
        optimizes Dromaeo/dom-modify by 1.4%.

        [Dromaeo/dom-modify in Chromium/Linux]
        Before: 4532 runs/sec, 4545 runs/sec, 4530 runs/sec, 4536 runs/sec
        After:  4595 runs/sec, 4606 runs/sec, 4597 runs/sec, 4602 runs/sec

        No tests. No change in behavior.

        * dom/ContainerNodeAlgorithms.h:
        (ChildNodeInsertionNotifier):
        (WebCore::ChildNodeInsertionNotifier::notifyNodeInsertedIntoDocument):
        (WebCore::ChildNodeInsertionNotifier::notifyNodeInsertedIntoTree):
        (WebCore::ChildNodeInsertionNotifier::notify):

2012-12-03  Rafael Weinstein  <rafaelw@chromium.org>

        Unreviewed build fix after r136467

        The template element patch added asserts in parserAppendChild and parserInsertBefore which should be valid, but DOMImplementation::createDocument() calls parserAppendChild with docType without regard to its owner. This patch removes the assert and adds a FIXME.

        * dom/ContainerNode.cpp:
        (WebCore::ContainerNode::parserInsertBefore):
        (WebCore::ContainerNode::parserAppendChild):

2012-12-03  Kentaro Hara  <haraken@chromium.org>

        [V8] Enter an Isolate before initializing PerIsolateData
        https://bugs.webkit.org/show_bug.cgi?id=103949

        Reviewed by Adam Barth.

        Currently we initialize PerIsolateData before entering an Isolate,
        which prevents us from using an Isolate in the PerIsolateData
        constructor. We should enter an Isolate first and then initialize
        PerIsolateData.

        No tests. No change in behavior.

        * bindings/v8/WorkerScriptController.cpp:
        (WebCore::WorkerScriptController::WorkerScriptController):

2012-12-03  Sergio Villar Senin  <svillar@igalia.com>

        [GTK] Add WebKitDOMShadowRoot.h to the list of public API headers after r135693
        https://bugs.webkit.org/show_bug.cgi?id=103909

        Reviewed by Martin Robinson.

        WebKitDOMShadowRoot was added in r135693. As it is added to
        webkitdom.h we have to export the include file, otherwise clients
        will fail to build due to the missing file.

        * bindings/gobject/GNUmakefile.am:

2012-12-03  Joshua Bell  <jsbell@chromium.org>

        IndexedDB: Correct database version after aborted upgrade
        https://bugs.webkit.org/show_bug.cgi?id=103763

        Reviewed by Tony Chang.

        After an aborted "versionchange" transaction, the IDBDatabase would fetch a fresh snapshot
        of the metadata from the back end. If the back end had already started a new "versionchange"
        transaction the snapshot would be bogus. Instead, save a copy of the IDBDatabase's metadata
        and roll back to that, as is done for IDBObjectStore.

        Tests: storage/indexeddb/intversion-abort-in-initial-upgradeneeded.html
               storage/indexeddb/mozilla/versionchange-abort.html
               storage/indexeddb/unblocked-version-changes.html

        * Modules/indexeddb/IDBDatabase.cpp:
        (WebCore::IDBDatabase::IDBDatabase):
        (WebCore::IDBDatabase::transactionCreated):
        * Modules/indexeddb/IDBDatabase.h:
        (WebCore::IDBDatabase::setMetadata): Let IDBOpenDBRequest and IDBTransaction tinker.
        * Modules/indexeddb/IDBOpenDBRequest.cpp:
        (WebCore::IDBOpenDBRequest::onUpgradeNeeded): Fetch new and compute old metadata.
        (WebCore::IDBOpenDBRequest::onSuccess): Fetch new metadata, in case upgrade changed it.
        * Modules/indexeddb/IDBTransaction.cpp:
        (WebCore::IDBTransaction::create): Stash the old metadata, in case of rollback.
        (WebCore::IDBTransaction::IDBTransaction):
        (WebCore::IDBTransaction::onAbort): Revert the database as well as the stores.
        * Modules/indexeddb/IDBTransaction.h:
        (IDBTransaction):

2012-12-03  Rafael Weinstein  <rafaelw@chromium.org>

        Implement HTMLTemplateElement
        https://bugs.webkit.org/show_bug.cgi?id=86031

        Reviewed by Adam Barth.

        Initial implementation. This patch includes the parser changes, new IDL and element implementation for <template>.

        Spec: http://dvcs.w3.org/hg/webcomponents/raw-file/tip/spec/templates/index.html

        Tests: fast/dom/HTMLTemplateElement/cloneNode.html
               fast/dom/HTMLTemplateElement/inertContents.html
               fast/dom/HTMLTemplateElement/innerHTML.html
               fast/dom/HTMLTemplateElement/ownerDocument.html
               html5lib/run-template.html

        * WebCore.gypi:
        * css/html.css:
        (template):
        * dom/Document.cpp:
        (WebCore):
        (WebCore::Document::templateContentsOwnerDocument):
        * dom/Document.h:
        (Document):
        * editing/MarkupAccumulator.cpp:
        (WebCore::MarkupAccumulator::serializeNodesWithNamespaces):
        * html/HTMLElement.h:
        (HTMLElement):
        * html/HTMLElementsAllInOne.cpp:
        * html/HTMLTagNames.in:
        * html/HTMLTemplateElement.cpp: Added.
        (WebCore):
        (WebCore::HTMLTemplateElement::HTMLTemplateElement):
        (WebCore::HTMLTemplateElement::setInnerHTML):
        (WebCore::HTMLTemplateElement::~HTMLTemplateElement):
        (WebCore::HTMLTemplateElement::create):
        (WebCore::HTMLTemplateElement::content):
        (WebCore::HTMLTemplateElement::setContent):
        (WebCore::toHTMLTemplateElement):
        * html/HTMLTemplateElement.h: Added.
        (WebCore):
        (HTMLTemplateElement):
        (WebCore::toHTMLTemplateElement):
        * html/HTMLTemplateElement.idl: Added.
        * html/parser/HTMLConstructionSite.cpp:
        (WebCore::executeTask):
        (WebCore::HTMLConstructionSite::insertComment):
        (WebCore::HTMLConstructionSite::insertTextNode):
        (WebCore::HTMLConstructionSite::createElement):
        (WebCore::HTMLConstructionSite::ownerDocumentForCurrentNode):
        (WebCore):
        (WebCore::HTMLConstructionSite::createHTMLElement):
        (WebCore::HTMLConstructionSite::findFosterSite):
        * html/parser/HTMLConstructionSite.h:
        (HTMLConstructionSite):
        * html/parser/HTMLElementStack.cpp:
        (WebCore):
        (WebCore::HTMLElementStack::hasTemplateInHTMLScope):
        * html/parser/HTMLElementStack.h:
        (HTMLElementStack):
        * html/parser/HTMLTreeBuilder.cpp:
        (WebCore::HTMLTreeBuilder::constructTreeFromToken):
        (WebCore::HTMLTreeBuilder::processStartTagForInBody):
        (WebCore):
        (WebCore::HTMLTreeBuilder::processTemplateEndTag):
        (WebCore::HTMLTreeBuilder::processStartTagForInTable):
        (WebCore::HTMLTreeBuilder::processStartTag):
        (WebCore::HTMLTreeBuilder::processHtmlStartTagForInBody):
        (WebCore::HTMLTreeBuilder::resetInsertionModeAppropriately):
        (WebCore::HTMLTreeBuilder::processEndTagForInTableBody):
        (WebCore::HTMLTreeBuilder::processEndTagForInRow):
        (WebCore::HTMLTreeBuilder::processEndTagForInCell):
        (WebCore::HTMLTreeBuilder::processEndTagForInBody):
        (WebCore::HTMLTreeBuilder::processTrEndTagForInRow):
        (WebCore::HTMLTreeBuilder::processTableEndTagForInTable):
        (WebCore::HTMLTreeBuilder::processEndTag):
        (WebCore::HTMLTreeBuilder::processCharacterBuffer):
        (WebCore::HTMLTreeBuilder::processEndOfFile):
        (WebCore::HTMLTreeBuilder::processStartTagForInHead):
        * html/parser/HTMLTreeBuilder.h:
        (HTMLTreeBuilder):
        (WebCore::HTMLTreeBuilder::isParsingTemplateContents):
        (WebCore::HTMLTreeBuilder::isParsingFragmentOrTemplateContents):
        * page/DOMWindow.idl:

2012-12-03  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r136460.
        http://trac.webkit.org/changeset/136460
        https://bugs.webkit.org/show_bug.cgi?id=103958

        This patch caused compile error when building DumpRenderTree
        (Requested by tasak on #webkit).

        * WebCore.gyp/WebCore.gyp:
        * WebCore.gypi:
        * platform/chromium/PlatformThemeChromiumLinux.cpp: Added.
        (WebCore):
        (WebCore::PlatformThemeChromiumLinux::setScrollbarColors):
        (WebCore::clamp):
        (WebCore::PlatformThemeChromiumLinux::saturateAndBrighten):
        (WebCore::PlatformThemeChromiumLinux::outlineColor):
        (WebCore::PlatformThemeChromiumLinux::paintArrowButton):
        * platform/chromium/PlatformThemeChromiumLinux.h: Added.
        (WebCore):
        (PlatformThemeChromiumLinux):
        (WebCore::PlatformThemeChromiumLinux::thumbInactiveColor):
        (WebCore::PlatformThemeChromiumLinux::thumbActiveColor):
        (WebCore::PlatformThemeChromiumLinux::trackColor):
        (WebCore::PlatformThemeChromiumLinux::PlatformThemeChromiumLinux):
        * platform/chromium/ScrollbarThemeChromiumLinux.cpp: Added.
        (WebCore):
        (WebCore::ScrollbarTheme::nativeTheme):
        (WebCore::ScrollbarThemeChromiumLinux::scrollbarThickness):
        (WebCore::ScrollbarThemeChromiumLinux::paintTrackPiece):
        (WebCore::ScrollbarThemeChromiumLinux::paintButton):
        (WebCore::ScrollbarThemeChromiumLinux::paintThumb):
        (WebCore::ScrollbarThemeChromiumLinux::shouldCenterOnThumb):
        (WebCore::ScrollbarThemeChromiumLinux::buttonSize):
        (WebCore::ScrollbarThemeChromiumLinux::minimumThumbLength):
        * platform/chromium/ScrollbarThemeChromiumLinux.h: Added.
        (ScrollbarThemeChromiumLinux):
        * rendering/RenderThemeChromiumAndroid.cpp:
        (WebCore::RenderThemeChromiumAndroid::extraDefaultStyleSheet):
        * rendering/RenderThemeChromiumAndroid.h:
        * rendering/RenderThemeChromiumLinux.cpp: Added.
        (WebCore):
        (WebCore::getWebThemeState):
        (WebCore::RenderThemeChromiumLinux::create):
        (WebCore::RenderTheme::themeForPage):
        (WebCore::RenderThemeChromiumLinux::RenderThemeChromiumLinux):
        (WebCore::RenderThemeChromiumLinux::~RenderThemeChromiumLinux):
        (WebCore::RenderThemeChromiumLinux::systemColor):
        (WebCore::RenderThemeChromiumLinux::extraDefaultStyleSheet):
        (WebCore::RenderThemeChromiumLinux::controlSupportsTints):
        (WebCore::RenderThemeChromiumLinux::activeListBoxSelectionBackgroundColor):
        (WebCore::RenderThemeChromiumLinux::activeListBoxSelectionForegroundColor):
        (WebCore::RenderThemeChromiumLinux::inactiveListBoxSelectionBackgroundColor):
        (WebCore::RenderThemeChromiumLinux::inactiveListBoxSelectionForegroundColor):
        (WebCore::RenderThemeChromiumLinux::platformActiveSelectionBackgroundColor):
        (WebCore::RenderThemeChromiumLinux::platformInactiveSelectionBackgroundColor):
        (WebCore::RenderThemeChromiumLinux::platformActiveSelectionForegroundColor):
        (WebCore::RenderThemeChromiumLinux::platformInactiveSelectionForegroundColor):
        (WebCore::RenderThemeChromiumLinux::sliderTickSize):
        (WebCore::RenderThemeChromiumLinux::sliderTickOffsetFromTrackCenter):
        (WebCore::RenderThemeChromiumLinux::adjustSliderThumbSize):
        (WebCore::RenderThemeChromiumLinux::supportsControlTints):
        (WebCore::RenderThemeChromiumLinux::setCaretBlinkInterval):
        (WebCore::RenderThemeChromiumLinux::caretBlinkIntervalInternal):
        (WebCore::RenderThemeChromiumLinux::setSelectionColors):
        (WebCore::RenderThemeChromiumLinux::paintCheckbox):
        (WebCore::RenderThemeChromiumLinux::setCheckboxSize):
        (WebCore::RenderThemeChromiumLinux::paintRadio):
        (WebCore::RenderThemeChromiumLinux::setRadioSize):
        (WebCore::RenderThemeChromiumLinux::paintButton):
        (WebCore::RenderThemeChromiumLinux::paintTextField):
        (WebCore::RenderThemeChromiumLinux::paintMenuList):
        (WebCore::RenderThemeChromiumLinux::paintSliderTrack):
        (WebCore::RenderThemeChromiumLinux::paintSliderThumb):
        (WebCore::RenderThemeChromiumLinux::adjustInnerSpinButtonStyle):
        (WebCore::RenderThemeChromiumLinux::paintInnerSpinButton):
        (WebCore::RenderThemeChromiumLinux::paintProgressBar):
        (WebCore::RenderThemeChromiumLinux::shouldOpenPickerWithF4Key):
        * rendering/RenderThemeChromiumLinux.h: Added.
        (WebCore):
        (RenderThemeChromiumLinux):

2012-12-03  Julien Chaffraix  <jchaffraix@webkit.org>

        [CSS Grid Layout] Support paddings and margins on grid items
        https://bugs.webkit.org/show_bug.cgi?id=103677

        Reviewed by Tony Chang.

        After bug 102968, we properly resolve grid items' width and height against the
        grid areas' sizes. However we didn't check for paddings and margins, which is
        what this change fixes..

        Test: fast/css-grid-layout/percent-padding-margin-resolution-grid-item.html

        * rendering/RenderBox.cpp:
        (WebCore::RenderBox::computeLogicalWidthInRegion):
        Don't stretch the end margin to match the containing block's extent.
        The fix is similar to what was done for flex-box in bug 65887.

        * rendering/RenderBoxModelObject.cpp:
        (WebCore::RenderBoxModelObject::computeStickyPositionConstraints):
        Added a comment about not using containingBlockLogicalWidthForContent.

        (WebCore::RenderBoxModelObject::computedCSSPaddingTop):
        (WebCore::RenderBoxModelObject::computedCSSPaddingBottom):
        (WebCore::RenderBoxModelObject::computedCSSPaddingLeft):
        (WebCore::RenderBoxModelObject::computedCSSPaddingRight):
        (WebCore::RenderBoxModelObject::computedCSSPaddingBefore):
        (WebCore::RenderBoxModelObject::computedCSSPaddingAfter):
        (WebCore::RenderBoxModelObject::computedCSSPaddingStart):
        (WebCore::RenderBoxModelObject::computedCSSPaddingEnd):
        Updated these functions to use containingBlockLogicalWidthForContent.

        * rendering/RenderGrid.h:
        * rendering/RenderObject.h:
        (WebCore::RenderObject::isRenderGrid):
        Added isRenderGrid.

2012-12-03  Scott Violet  <sky@chromium.org>

        [chromium] Remove linux theme related files and switch to default
        https://bugs.webkit.org/show_bug.cgi?id=103897

        Reviewed by Darin Fisher.

        linux theme related files are now named default. This removes
        linux theme files, updates build files and removes ifdefs.

        Code cleanup, no new tests.

        * WebCore.gyp/WebCore.gyp: Update build rules
        * WebCore.gypi: Update build rules
        * platform/chromium/PlatformThemeChromiumLinux.cpp: Removed.
        * platform/chromium/PlatformThemeChromiumLinux.h: Removed.
        * platform/chromium/ScrollbarThemeChromiumLinux.cpp: Removed.
        * platform/chromium/ScrollbarThemeChromiumLinux.h: Removed.
        * rendering/RenderThemeChromiumAndroid.h: Change superclass
        * rendering/RenderThemeChromiumAndroid.cpp: Change call to superclass
        * rendering/RenderThemeChromiumLinux.cpp: Removed.
        * rendering/RenderThemeChromiumLinux.h: Removed.

2012-12-03  Pierre Rossi  <pierre.rossi@digia.com>

        [Qt] Unreviewed build fix after r136410

        When building without libjpeg, take JPEGImageDecoder's header out, since it now includes libjpeg.h.

        * Target.pri: conditionally add JPEGImageDecoder.h to HEADERS
        * platform/image-decoders/ImageDecoder.cpp: guard JPEGImageDecoder.h's include

2012-12-03  Kenneth Rohde Christiansen  <kenneth@webkit.org>

        [EFL][Qt][WK2] Fixed position elements are not always fixed
        https://bugs.webkit.org/show_bug.cgi?id=103452

        Reviewed by Simon Fraser.

        The code figuring out whether fixed position layers are inside
        the visible viewport, assumes that the visible viewport is always
        the size of the layout viewport. This assumption doesn't hold with
        how the Qt and EFL tiled backing store and coordinated graphics
        works, so instead using the visibleContentsRect(), which provides
        the right values in all cases.

        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::requiresCompositingForPosition):

            Use visibleContentsRect instead of scrollOffsetForFixedPosition().

            scrollOffsetForFixedPosition() is needed sometimes in the Mac code
            because visibleContentRect() will return negative offsets when you
            are in the rubber-band phase of a scroll on the Mac.

            However that is not an issue here.

2012-12-03  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r135271.
        http://trac.webkit.org/changeset/135271
        https://bugs.webkit.org/show_bug.cgi?id=103940

        Some user stylesheet API clients broken (Requested by anttik
        on #webkit).

        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::StyleResolver):
        (WebCore::StyleResolver::collectRulesFromUserStyleSheets):
        (WebCore::collectCSSOMWrappers):
        * css/StyleResolver.h:
        (StyleResolver):
        * dom/Document.cpp:
        (WebCore::Document::setCompatibilityMode):
        * dom/DocumentStyleSheetCollection.cpp:
        (WebCore::DocumentStyleSheetCollection::~DocumentStyleSheetCollection):
        (WebCore::DocumentStyleSheetCollection::pageUserSheet):
        (WebCore::DocumentStyleSheetCollection::clearPageUserSheet):
        (WebCore::DocumentStyleSheetCollection::updatePageUserSheet):
        (WebCore::collectActiveCSSStyleSheetsFromSeamlessParents):
        (WebCore::DocumentStyleSheetCollection::updateActiveStyleSheets):
        (WebCore::DocumentStyleSheetCollection::reportMemoryUsage):
        * dom/DocumentStyleSheetCollection.h:
        (DocumentStyleSheetCollection):
        (WebCore::DocumentStyleSheetCollection::documentUserStyleSheets):
        * page/Page.cpp:
        (WebCore::Page::userStyleSheetLocationChanged):

2012-11-30  Andrey Kosyakov  <caseq@chromium.org>

        Web Inspector: make it possible to fliter out messages from console.{time,timeEnd}()
        https://bugs.webkit.org/show_bug.cgi?id=103781

        Reviewed by Yury Semikhatsky.

        - make console messages produced by console.timeEnd() TimingMessageType & DebugMessageLevel;
        - add console filter for Debug messages;

        * inspector/ConsoleMessage.cpp:
        (WebCore::messageTypeValue):
        * inspector/Inspector.json:
        * inspector/InspectorConsoleAgent.cpp:
        (WebCore::InspectorConsoleAgent::stopTiming):
        * inspector/front-end/ConsoleMessage.js:
        (WebInspector.ConsoleMessageImpl.prototype.toMessageElement):
        * inspector/front-end/ConsoleView.js:
        (WebInspector.ConsoleView.prototype.):
        (WebInspector.ConsoleView.prototype.filter):
        * inspector/front-end/inspector.css:
        (.console-warning-level, .console-error-level, .console-log-level, .console-debug-level):
        (.filter-all .console-debug-level, .filter-debug .console-debug-level):
        (.filter-all .console-debug-level.repeated-message, .filter-debug .console-debug-level.repeated-message):
        * page/ConsoleTypes.h:

2012-12-03  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r136444.
        http://trac.webkit.org/changeset/136444
        https://bugs.webkit.org/show_bug.cgi?id=103938

        broke chromium build (Requested by zhenyao_wfh on #webkit).

        * Target.pri:
        * platform/image-decoders/ImageDecoder.cpp:

2012-12-03  Pierre Rossi  <pierre.rossi@digia.com>

        [Qt] Unreviewed build fix after r136410

        When building without libjpeg, take JPEGImageDecoder's header out, since it now includes libjpeg.h.

        * Target.pri: conditionally add JPEGImageDecoder.h to HEADERS
        * platform/image-decoders/ImageDecoder.cpp: guard JPEGImageDecoder.h's include

2012-11-30  James Simonsen  <simonjam@chromium.org>

        [Resource Timing] Record and report initiator
        https://bugs.webkit.org/show_bug.cgi?id=103777

        Reviewed by Nate Chapin.

        This will start populating the Resource Timing buffer with entries. The initiator will be
        recorded for each CachedResourceLoader. This should match the next update of the spec.

        Tests: http/tests/w3c/webperf/submission/resource-timing

        * css/CSSFontSelector.cpp:
        (WebCore::CSSFontSelector::beginLoadTimerFired):
        * loader/ResourceLoadNotifier.cpp: Always record timing information if ENABLE(RESOURCE_TIMING).
        (WebCore::ResourceLoadNotifier::dispatchWillSendRequest):
        * loader/SubresourceLoader.cpp:
        (WebCore::SubresourceLoader::releaseResources): Report the actual resource that called loadDone().
        * loader/cache/CachedResourceLoader.cpp:
        (WebCore::CachedResourceLoader::loadResource): Record the initiator.
        (WebCore::CachedResourceLoader::loadDone): Record the entry in Resource Timing.
        * loader/cache/CachedResourceLoader.h:
        (CachedResourceLoader):
        (InitiatorInfo):

2012-12-03  Florin Malita  <fmalita@chromium.org>

        [Skia] Deferred SkCanvas save()
        https://bugs.webkit.org/show_bug.cgi?id=102272

        Reviewed by Stephen White.

        Implement a lazy save() strategy: instead of delegating to the canvas upfront, defer and
        only commit when a clip/matrix mutation is observed.

        The patch yields a 1-20% SkCanvas save/restore reduction for heavy pages, with much larger
        gains observed for deeply nested SVG content.

        No new tests: no behaviour changes, coverage provided by existing tests.

        * platform/graphics/skia/GraphicsContextSkia.cpp:
        (WebCore::GraphicsContext::canvasClip):
        * platform/graphics/skia/PlatformContextSkia.cpp:
        (WebCore):
        (WebCore::PlatformContextSkia::DeferredSaveState::DeferredSaveState):
        (PlatformContextSkia::DeferredSaveState):
        (WebCore::PlatformContextSkia::PlatformContextSkia):
        (WebCore::PlatformContextSkia::save):
        (WebCore::PlatformContextSkia::saveLayer):
        (WebCore::PlatformContextSkia::beginLayerClippedToImage):
        (WebCore::PlatformContextSkia::restore):
        (WebCore::PlatformContextSkia::applyClipFromImage):
        * platform/graphics/skia/PlatformContextSkia.h:
        (PlatformContextSkia):
        (WebCore::PlatformContextSkia::realizeSave):
        (WebCore):
        (WebCore::PlatformContextSkia::canvas):
        (WebCore::PlatformContextSkia::clipPath):
        (WebCore::PlatformContextSkia::clipRect):
        (WebCore::PlatformContextSkia::setMatrix):
        (WebCore::PlatformContextSkia::concat):
        (WebCore::PlatformContextSkia::rotate):
        (WebCore::PlatformContextSkia::scale):
        (WebCore::PlatformContextSkia::translate):

2012-12-03  Simon Fraser  <simon.fraser@apple.com>

        When animating mask-postion on a composited layer, element renders incorrectly
        https://bugs.webkit.org/show_bug.cgi?id=103700

        Reviewed by Tim Horton.

        When a composited layer has a mask, we clipped the layer bounds to the
        size of the mask. This caused problems when animating the mask origin,
        which is considered a 'repaint' style change and so should not require
        layout or compositing geometry changes.
        
        Fix by ignoring the mask when computing the bounds of the compositing
        layer.

        Test: compositing/masks/mask-layer-size.html

        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::localBoundingBox):
        (WebCore::RenderLayer::calculateLayerBounds):
        * rendering/RenderLayer.h:
        (RenderLayer):
        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::calculateCompositedBounds):

2012-12-03  Xan Lopez  <xan@igalia.com>

        [CSS Grid Layout] Support <percentage> and viewport-relative breadth sizes
        https://bugs.webkit.org/show_bug.cgi?id=103335

        Reviewed by Julien Chaffraix.

        Test: fast/css-grid-layout/breadth-size-resolution-grid.html

        * css/CSSComputedStyleDeclaration.cpp:
        (WebCore::valueForGridTrackBreadth): Support the new types.
        (WebCore::valueForGridTrackMinMax): Modify the call to previous
        method, since the signature has changed.
        (WebCore::valueForGridTrackGroup): Ditto.
        (WebCore::valueForGridTrackList): Ditto.
        (WebCore::CSSComputedStyleDeclaration::getPropertyCSSValue): Ditto.
        * rendering/RenderGrid.cpp:
        (WebCore::RenderGrid::computedUsedBreadthOfGridTracks): Suport
        percent and viewport relative types, calc() will be supported in a
        follow up (see bug #103761)

2012-12-03  Peter Rybin  <prybin@chromium.org>

        Web Inspector: make ASSERTION FAILED: foundPropertiesCount == object->size() more useful
        https://bugs.webkit.org/show_bug.cgi?id=103254

        Reviewed by Pavel Feldman.

        Assert code generation is slightly changed so that it dumped JSON object text before crashing.

        * inspector/CodeGeneratorInspector.py:

2012-12-03  Max Vujovic  <mvujovic@adobe.com>

        [CSS Shaders] Do not clamp indirect array indices during CSS Shaders ANGLE validation pass
        https://bugs.webkit.org/show_bug.cgi?id=102731

        Reviewed by Dean Jackson.

        Before this patch, we validated all shaders with the compile flag
        SH_CLAMP_INDIRECT_ARRAY_BOUNDS in ANGLEWebKitBridge. This would insert a GLSL function
        "webgl_int_clamp" in validated CSS shaders. However, when validated CSS shaders would pass
        through ANGLE again at the GC3D level, ANGLE would reject them because they would contain
        the "webgl_" restricted prefix.

        Now, we only pass the compile flag SH_CLAMP_INDIRECT_ARRAY_BOUNDS at the GC3D level.

        Test: css3/filters/custom/custom-filter-array-uniform-indirect-index.html

        * platform/graphics/ANGLEWebKitBridge.cpp:
        (WebCore::ANGLEWebKitBridge::compileShaderSource):
            Remove the SH_CLAMP_INDIRECT_ARRAY_BOUNDS compile flag.
        * platform/graphics/filters/CustomFilterValidatedProgram.cpp:
        (WebCore::CustomFilterValidatedProgram::compiledProgram):
            Add an assert that validated programs compile at the GC3D or platform level to help us
            catch validation and rewriting issues.
        * platform/graphics/opengl/Extensions3DOpenGLCommon.cpp:
        (WebCore::Extensions3DOpenGLCommon::getTranslatedShaderSourceANGLE):
            Pass the SH_CLAMP_INDIRECT_ARRAY_BOUNDS to compileShaderSource.

2012-12-03  Eugene Klyuchnikov  <eustas@chromium.org>

        Web Inspector: Make main-thread monitoring go through InspectorController
        https://bugs.webkit.org/show_bug.cgi?id=103550

        Reviewed by Pavel Feldman.

        InspectorInstrumentation was a wrong path.

        * inspector/InspectorClient.h: Remove start/stop methods.
        * inspector/InspectorController.cpp:
        Dispatch main thread activity notifications.
        * inspector/InspectorController.h: Ditto.
        * inspector/InspectorInstrumentation.cpp: Remove dispatchng.
        * inspector/InspectorInstrumentation.h: Ditto.
        * inspector/InspectorTimelineAgent.cpp:
        Do not subscribe for notifications explicitly.

2012-12-03  Philip Rogers  <pdr@google.com>

        Invalidate SVG width on width attribute changes.
        https://bugs.webkit.org/show_bug.cgi?id=103304

        Reviewed by Dirk Schulze.

        An inline SVG element's replaced width can depend on both attributes and style properties.
        After r105513, we invalidated this width on style changes but not attribute changes. With
        this patch we invalidate the replaced width on width attribute changes too. Note that height
        is handled differently for replaced elements so only the width attribute needs this handling
        (the added test covers this too).

        Test: svg/custom/root-size-attribute-changes.html

        * svg/SVGSVGElement.cpp:
        (WebCore::SVGSVGElement::svgAttributeChanged):

2012-12-03  Alec Flett  <alecflett@chromium.org>

        IndexedDB: remove IDBDatabaseBackendInterface::transaction()
        https://bugs.webkit.org/show_bug.cgi?id=102733

        Reviewed by Darin Fisher.

        Part 3 of a refactor, remove the old transaction() method.

        No new tests as this is just post-refactor cleanup.

        * Modules/indexeddb/IDBDatabaseBackendInterface.h:
        (IDBDatabaseBackendInterface):

2012-12-03  Andrey Adaikin  <aandrey@chromium.org>

        Web Inspector: [Canvas] show replay screenshot of the last call's canvas
        https://bugs.webkit.org/show_bug.cgi?id=103739

        Reviewed by Pavel Feldman.

        When many canvases are being instrumented we'll want to show replay screenshots for each canvas.
        Meanwhile, show the screenshot of the last-touched canvas during the current replay.

        * inspector/InjectedScriptCanvasModuleSource.js:
        (.):

2012-12-03  Joshua Bell  <jsbell@chromium.org>

        IndexedDB: Rename exception enum members from UGLY_ERR to PrettyError
        https://bugs.webkit.org/show_bug.cgi?id=103759

        Reviewed by Darin Fisher.

        Now that IDBDatabaseException isn't exposed to script with constants, the exception types
        can be renamed to match the much friendlier names used in newer iterations of the spec. Also
        remove the legacy/unused types.

        No new tests, just constant renames.

        * Modules/indexeddb/IDBCursor.cpp:
        (WebCore::IDBCursor::update):
        (WebCore::IDBCursor::advance):
        (WebCore::IDBCursor::continueFunction):
        (WebCore::IDBCursor::deleteFunction):
        * Modules/indexeddb/IDBCursorBackendImpl.cpp:
        (WebCore::IDBCursorBackendImpl::continueFunction):
        (WebCore::IDBCursorBackendImpl::advance):
        (WebCore::IDBCursorBackendImpl::prefetchContinue):
        * Modules/indexeddb/IDBDatabase.cpp:
        (WebCore::IDBDatabase::createObjectStore):
        (WebCore::IDBDatabase::deleteObjectStore):
        (WebCore::IDBDatabase::transaction):
        * Modules/indexeddb/IDBDatabaseBackendImpl.cpp:
        (WebCore::IDBDatabaseBackendImpl::createObjectStore):
        (WebCore::IDBDatabaseBackendImpl::deleteObjectStore):
        (WebCore::IDBDatabaseBackendImpl::VersionChangeOperation::perform):
        (WebCore::IDBDatabaseBackendImpl::transactionFinishedAndAbortFired):
        (WebCore::IDBDatabaseBackendImpl::openConnection):
        (WebCore::IDBDatabaseBackendImpl::openConnectionWithVersion):
        (WebCore::IDBDatabaseBackendImpl::deleteDatabase):
        (WebCore::IDBDatabaseBackendImpl::close):
        * Modules/indexeddb/IDBDatabaseException.cpp: Tidying and renaming.
        (WebCore):
        (WebCore::getErrorEntry):
        * Modules/indexeddb/IDBDatabaseException.h:
        * Modules/indexeddb/IDBFactory.cpp:
        (WebCore::IDBFactory::cmp):
        * Modules/indexeddb/IDBFactoryBackendImpl.cpp:
        (WebCore::IDBFactoryBackendImpl::getDatabaseNames):
        (WebCore::IDBFactoryBackendImpl::deleteDatabase):
        (WebCore::IDBFactoryBackendImpl::open):
        * Modules/indexeddb/IDBIndex.cpp:
        (WebCore::IDBIndex::openCursor):
        (WebCore::IDBIndex::count):
        (WebCore::IDBIndex::openKeyCursor):
        (WebCore::IDBIndex::get):
        (WebCore::IDBIndex::getKey):
        * Modules/indexeddb/IDBIndexBackendImpl.cpp:
        (WebCore::IDBIndexBackendImpl::openCursor):
        (WebCore::IDBIndexBackendImpl::openKeyCursor):
        (WebCore::IDBIndexBackendImpl::count):
        (WebCore::IDBIndexBackendImpl::get):
        (WebCore::IDBIndexBackendImpl::getKey):
        * Modules/indexeddb/IDBKeyRange.cpp:
        (WebCore::IDBKeyRange::only):
        (WebCore::IDBKeyRange::lowerBound):
        (WebCore::IDBKeyRange::upperBound):
        (WebCore::IDBKeyRange::bound):
        * Modules/indexeddb/IDBObjectStore.cpp:
        (WebCore::IDBObjectStore::get):
        (WebCore::IDBObjectStore::put):
        (WebCore::IDBObjectStore::deleteFunction):
        (WebCore::IDBObjectStore::clear):
        (WebCore):
        (WebCore::IDBObjectStore::createIndex):
        (WebCore::IDBObjectStore::index):
        (WebCore::IDBObjectStore::deleteIndex):
        (WebCore::IDBObjectStore::openCursor):
        (WebCore::IDBObjectStore::count):
        * Modules/indexeddb/IDBObjectStoreBackendImpl.cpp:
        (WebCore::IDBObjectStoreBackendImpl::get):
        (WebCore::IDBObjectStoreBackendImpl::put):
        (WebCore):
        (WebCore::IDBObjectStoreBackendImpl::setIndexKeys):
        (WebCore::IDBObjectStoreBackendImpl::ObjectStoreStorageOperation::perform):
        (WebCore::IDBObjectStoreBackendImpl::deleteFunction):
        (WebCore::IDBObjectStoreBackendImpl::clear):
        (WebCore::IDBObjectStoreBackendImpl::createIndex):
        (WebCore::IDBObjectStoreBackendImpl::deleteIndex):
        (WebCore::IDBObjectStoreBackendImpl::openCursor):
        (WebCore::IDBObjectStoreBackendImpl::count):
        * Modules/indexeddb/IDBOpenDBRequest.cpp:
        (WebCore::IDBOpenDBRequest::dispatchEvent):
        * Modules/indexeddb/IDBRequest.cpp:
        (WebCore::IDBRequest::result):
        (WebCore::IDBRequest::error):
        (WebCore::IDBRequest::errorCode):
        (WebCore::IDBRequest::webkitErrorMessage):
        (WebCore::IDBRequest::abort):
        (WebCore::IDBRequest::dispatchEvent):
        (WebCore::IDBRequest::uncaughtExceptionInEventHandler):
        * Modules/indexeddb/IDBTransaction.cpp:
        (WebCore::IDBTransaction::objectStore):
        (WebCore::IDBTransaction::abort):
        * Modules/indexeddb/IDBTransactionBackendImpl.cpp:
        (WebCore::IDBTransactionBackendImpl::objectStore):
        (WebCore::IDBTransactionBackendImpl::abort):
        (WebCore::IDBTransactionBackendImpl::commit):

2012-12-03  Alexis Menard  <alexis@webkit.org>

        [Mac] Enable CSS3 background-position offset by default.
        https://bugs.webkit.org/show_bug.cgi?id=103905

        Reviewed by Simon Fraser.

        Turn the flag on by default.

        No new tests : covered by tests landed previously.

        * Configurations/FeatureDefines.xcconfig:
        * css/CSSToStyleMap.cpp:
        (WebCore::CSSToStyleMap::mapFillXPosition): Build fix in release on Mac with unused variable.
        (WebCore::CSSToStyleMap::mapFillYPosition): Ditto.

2012-12-03  Jan Keromnes  <janx@linux.com>

        Web Inspector: Implement context menus in CodeMirrorTextEditor
        https://bugs.webkit.org/show_bug.cgi?id=94062

        Reviewed by Pavel Feldman.

        Listen for contextmenu events in the editor and handle them differently
        if triggered on gutter line number or in text body. This adds controls
        for breakpoints (including disabled / conditional), debugger navigation
        and text input methods.

        * inspector/front-end/CodeMirrorTextEditor.js:
        (WebInspector.CodeMirrorTextEditor):
        (WebInspector.CodeMirrorTextEditor.prototype._contextMenu):

2012-12-03  Nate Chapin  <japhet@chromium.org>

        Make MainResourceLoader not use m_frame directly.
        https://bugs.webkit.org/show_bug.cgi?id=103907

        Reviewed by Darin Adler.

        MainResourceLoader will soon cease to be a ResourceLoader subclass.  It currently
        makes extensively use of both m_documentLoader and m_frame from ResourceLoader.
        By moving everything over to going through m_documentLoader, we reduce the number
        of members we have to add to MainResourceLoader in https://bugs.webkit.org/show_bug.cgi?id=49246.

        No new tests, refactor only.

        * loader/DocumentLoader.cpp:
        (WebCore::DocumentLoader::startLoadingMainResource):
        * loader/MainResourceLoader.cpp:
        (WebCore::MainResourceLoader::MainResourceLoader):
        (WebCore::MainResourceLoader::create):
        (WebCore::MainResourceLoader::receivedError):
        (WebCore::MainResourceLoader::willSendRequest):
        (WebCore::MainResourceLoader::continueAfterContentPolicy):
        (WebCore::MainResourceLoader::didReceiveResponse):
        (WebCore::MainResourceLoader::didReceiveData):
        (WebCore::MainResourceLoader::startDataLoadTimer):
        * loader/MainResourceLoader.h:
        (MainResourceLoader):

2012-12-03  Anton Vayvod  <avayvod@chromium.org>

        Text Autosizing: don't autosize horizontal menu items implemented via floating list items
        https://bugs.webkit.org/show_bug.cgi?id=103840

        Reviewed by Kenneth Rohde Christiansen.

        Floating list items are often used to implement horizontal menus. Currently, text autosizing 
        disregards such elements as autosizing containers. List items are often then autosized as part
        of a bigger cluster (usually the whole page) and look too big.
        This change turns floating list items into autosizing clusters so they are autosized separately
        resulting in no font size multiplication for menu items implemented in this manner.

        Test: fast/text-autosizing/cluster-list-item.html

        * rendering/TextAutosizer.cpp:
        (WebCore::TextAutosizer::isAutosizingContainer): Returns true for floating list items; split the
        condition logically.

2012-12-03  Viatcheslav Ostapenko  <v.ostapenko@samsung.com>

        Optimization in image decoding
        https://bugs.webkit.org/show_bug.cgi?id=88424

        Reviewed by Brent Fulgham.

        Replace int with J_COLOR_SPACE in parameters of templates setPixel and
        outputScanlines to avoid casting from int to enum. It required move 
        inclusion of jpeglib.h and related #if to JPEGImageDecoder.h .

        * platform/image-decoders/jpeg/JPEGImageDecoder.cpp:
        (WebCore):
        (WebCore::setPixel):
        (WebCore::JPEGImageDecoder::outputScanlines):
        * platform/image-decoders/jpeg/JPEGImageDecoder.h:
        (JPEGImageDecoder):

2012-12-03  Tony Chang  <tony@chromium.org>

        [mathml] Improve performance of nested sup or sub elements
        https://bugs.webkit.org/show_bug.cgi?id=103665

        Reviewed by Darin Adler.

        Reduce the number of extra layouts. Since RenderMathMLSubSup calls
        layout twice, this can lead to an exponential number of layouts. Avoid
        extra layouts.

        Test: mathml/presentation/sup-nested.html - Should not time out.

        * css/mathml.css:
        (msup): Stretching children also causes extra layouts. Avoid this by aligning to the top.
        (msub): Same as msup, but align to the bottom.
        * rendering/mathml/RenderMathMLSubSup.cpp:
        (WebCore::RenderMathMLSubSup::layout): Only do the second layout if the padding changed.
        Also fix up the calls to setNeedsLayout (since we're calling it on this) and
        setChildNeedsLayout (since we're calling it on a child).

2012-12-03  Konrad Piascik  <kpiascik@rim.com>

        Web Inspector: free Page resources on inspector disconnect
        https://bugs.webkit.org/show_bug.cgi?id=103888

        Reviewed by Yury Semikhatsky.

        We don't need to keep the page around and can free up memory when disconnecting web inspector.

        Not testable.

        * inspector/InspectorController.cpp:
        (WebCore::InspectorController::disconnectFrontend):
        * inspector/InspectorOverlay.cpp:
        (WebCore::InspectorOverlay::freePage):
        (WebCore):
        * inspector/InspectorOverlay.h:
        (InspectorOverlay):

2012-12-03  Alexis Menard  <alexis@webkit.org>

        [GTK] Enable CSS3 background-background position offset by default.
        https://bugs.webkit.org/show_bug.cgi?id=103903

        Reviewed by Philippe Normand.

        Turn the feature on by default.

        No new tests : covered by tests already landed.

        * GNUmakefile.features.am:

2012-12-03  Hajime Morrita  <morrita@google.com>

        Corrupted DOM tree during appendChild/insertBefore
        https://bugs.webkit.org/show_bug.cgi?id=103601

        Reviewed by Abhishek Arya.

        There are some missing protection in appendChild() and insertBefore().
        This change added these.

        Dromaeo dom-modify shows no speed regression (5445run/s before vs 5351run/s after)

        Tests: fast/events/mutation-during-append-child.html
               fast/events/mutation-during-insert-before.html

        * dom/ContainerNode.cpp:
        (WebCore::checkAcceptChildGuaranteedNodeTypes):
        (WebCore):
        (WebCore::ContainerNode::insertBefore):
        (WebCore::ContainerNode::appendChild):

2012-12-03  Jocelyn Turcotte  <jocelyn.turcotte@digia.com>

        Document::initSecurityContext() fails to call securityOrigin().grantLoadLocalResources()
        https://bugs.webkit.org/show_bug.cgi?id=68711

        Reviewed by Adam Barth.

        It currently fails since Document::loader() will return 0 until
        Frame::setDocument is called and we are doing this check before it happens.

        Delay the check and let the FrameLoader take care of doing grantLoadLocalResources()
        on the Document along with other header checks in FrameLoader::didBeginDocument.

        * dom/Document.cpp:
        (WebCore::Document::initSecurityContext):
        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::didBeginDocument):

2012-12-03  Yong Li  <yoli@rim.com>

        ENABLE(IMAGE_DECODER_DOWN_SAMPLING): Should use TURBO_JPEG_RGB_SWIZZLE fast path for non-scaled images
        https://bugs.webkit.org/show_bug.cgi?id=103749

        Reviewed by Rob Buis.

        Replace !ENABLE(IMAGE_DECODER_DOWN_SAMPLING) with !m_scaled.

        No new tests as existing jpegs are good with IMAGE_DECODER_DOWN_SAMPLING set up.

        * platform/image-decoders/jpeg/JPEGImageDecoder.cpp:
        (WebCore::JPEGImageDecoder::outputScanlines):

2012-12-03  Tommy Widenflycht  <tommyw@google.com>

        Speech Recognition API: Update SpeechRecognitionEvent to match the specification
        https://bugs.webkit.org/show_bug.cgi?id=103407

        Reviewed by Kentaro Hara.

        Specification for the Speech Recognition API:
        http://dvcs.w3.org/hg/speech-api/raw-file/tip/speechapi.html

        This patch does the following:
        o Adds results, and removing result, on SpeechRecognitionEvent
        o Renaming SpeechRecognitionResult::final to isFinal
        o Removing emma from SpeechRecognitionResult

        The emma attribute is supposed to move from SpeechRecognitionResult to the SpeechRecognitionEvent,
        but that caused GC issues for unrelated code so it will be added later when properly fixed.

        Existing tests updated to test the new API.

        * Modules/speech/SpeechRecognition.cpp:
        (WebCore::SpeechRecognition::start):
        (WebCore::SpeechRecognition::didReceiveResults):
        (WebCore):
        * Modules/speech/SpeechRecognition.h:
        (SpeechRecognition):
        * Modules/speech/SpeechRecognitionEvent.cpp:
        (WebCore::SpeechRecognitionEvent::createResult):
        (WebCore):
        (WebCore::SpeechRecognitionEvent::SpeechRecognitionEvent):
        (WebCore::SpeechRecognitionEvent::~SpeechRecognitionEvent):
        * Modules/speech/SpeechRecognitionEvent.h:
        (SpeechRecognitionEventInit):
        (SpeechRecognitionEvent):
        (WebCore::SpeechRecognitionEvent::resultIndex):
        (WebCore::SpeechRecognitionEvent::results):
        * Modules/speech/SpeechRecognitionEvent.idl:
        * Modules/speech/SpeechRecognitionResult.cpp:
        * Modules/speech/SpeechRecognitionResult.h:
        (WebCore::SpeechRecognitionResult::isFinal):
        (SpeechRecognitionResult):
        * Modules/speech/SpeechRecognitionResult.idl:
        * WebCore.gypi:
        * bindings/js/JSDictionary.cpp:
        (WebCore::JSDictionary::convertValue):
        (WebCore):
        * bindings/js/JSDictionary.h:
        * bindings/v8/Dictionary.cpp:
        (WebCore::Dictionary::get):
        (WebCore):
        * bindings/v8/Dictionary.h:
        (Dictionary):
        * bindings/v8/custom/V8SpeechRecognitionResultCustom.cpp: Removed.

2012-12-03  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r136377.
        http://trac.webkit.org/changeset/136377
        https://bugs.webkit.org/show_bug.cgi?id=103881

        Causes crashes on debug builds that use JSC. (Requested by
        mkwst on #webkit).

        * Modules/websockets/WebSocket.cpp:
        (WebCore::WebSocket::connect):
        * Modules/websockets/WebSocketChannel.cpp:
        (WebCore::WebSocketChannel::didFailSocketStream):
        * css/MediaList.cpp:
        (WebCore::addResolutionWarningMessageToConsole):
        * dom/Document.cpp:
        (WebCore::Document::logExceptionToConsole):
        (WebCore::Document::processHttpEquiv):
        * dom/Document.h:
        (Document):
        * dom/ScriptExecutionContext.h:
        (ScriptExecutionContext):
        * dom/ViewportArguments.cpp:
        (WebCore):
        (WebCore::parserLineNumber):
        (WebCore::reportViewportWarning):
        * html/HTMLFormElement.cpp:
        (WebCore::HTMLFormElement::validateInteractively):
        * html/HTMLIFrameElement.cpp:
        (WebCore::HTMLIFrameElement::parseAttribute):
        * html/canvas/WebGLRenderingContext.cpp:
        (WebCore):
        (WebCore::WebGLRenderingContext::printWarningToConsole):
        * inspector/ConsoleMessage.cpp:
        (WebCore::ConsoleMessage::ConsoleMessage):
        * inspector/ConsoleMessage.h:
        (ConsoleMessage):
        * inspector/InspectorConsoleAgent.cpp:
        (WebCore::InspectorConsoleAgent::enable):
        (WebCore::InspectorConsoleAgent::addMessageToConsole):
        (WebCore::InspectorConsoleAgent::count):
        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::shouldInterruptLoadForXFrameOptions):
        * loader/MainResourceLoader.cpp:
        (WebCore::MainResourceLoader::didReceiveResponse):
        * page/Console.cpp:
        * page/Console.h:
        (Console):
        * page/DOMWindow.cpp:
        (WebCore::DOMWindow::printErrorMessage):
        * svg/SVGDocumentExtensions.cpp:
        (WebCore):
        (WebCore::parserLineNumber):
        (WebCore::reportMessage):
        * workers/WorkerContext.cpp:
        * workers/WorkerContext.h:
        (WorkerContext):

2012-12-03  Kihong Kwon  <kihong.kwon@samsung.com>

        Remove useless included header and change position of Proximity Events test cases
        https://bugs.webkit.org/show_bug.cgi?id=103871

        Reviewed by Antonio Gomes.

        Remove useless included header from DeviceProximityEvent.cpp.

        No new tests, It is just code refactoring.

        * Modules/proximity/DeviceProximityEvent.cpp:

2012-12-03  Jussi Kukkonen  <jussi.kukkonen@intel.com>

        [GStreamer] initial volume events on media elements should happen earlier
        https://bugs.webkit.org/show_bug.cgi?id=96912

        Reviewed by Philippe Normand.

        Update mediaelement volume and mute properties to whatever values
        playbin has as soon as possible (when the playbin reaches PAUSED state).
        This will improve user experience as the volume visuals won't suddenly
        change when user clicks play.

        No new tests: media/event-attributes.html already tests media events.
        Unfortunately this test is flaky on EFL and GTK (more specifically
        it is flaky on pulseaudio-using gstreamer platforms: http://webkit.org/b/83704).

        * platform/graphics/gstreamer/MediaPlayerPrivateGStreamer.cpp:
        (WebCore::MediaPlayerPrivateGStreamer::load):
        * platform/graphics/gstreamer/MediaPlayerPrivateGStreamer.h:
        (MediaPlayerPrivateGStreamer):

2012-12-03  Alexis Menard  <alexis@webkit.org>

        Unreviewed build fix after r136378.

        * css/CSSPrimitiveValueMappings.h:
        (WebCore):
        (WebCore::CSSPrimitiveValue::operator BackgroundEdgeOrigin):

2012-12-03  Alexis Menard  <alexis@webkit.org>

        [CSS3 Backgrounds and Borders] Implement CSS3 background-position offsets rendering.
        https://bugs.webkit.org/show_bug.cgi?id=103440

        Reviewed by Julien Chaffraix.

        Add the rendering bits of the new background-position offsets. It adds
        new bits in FillLayer to store the edges used to position the
        background. The old x and y members are used the same way as before, to
        store the value of the offset.

        Test: fast/backgrounds/background-position-rendering.html

        * css/CSSComputedStyleDeclaration.cpp:
        (WebCore::createPositionListForLayer): Refactor into a function the
        code duplicated in getPropertyCSSValue to avoid more code
        duplication.
        (WebCore):
        (WebCore::CSSComputedStyleDeclaration::getPropertyCSSValue):
        * css/CSSPrimitiveValueMappings.h:
        (WebCore):
        (WebCore::CSSPrimitiveValue::CSSPrimitiveValue):
        Add implicit conversion from the enums used in the rendering code to
        CSS values.
        (WebCore::CSSPrimitiveValue::operator BackgroundEdgeOrigin):
        * css/CSSToStyleMap.cpp:
        (WebCore::CSSToStyleMap::mapFillXPosition):
        (WebCore::CSSToStyleMap::mapFillYPosition):
        * rendering/RenderBoxModelObject.cpp:
        (WebCore::RenderBoxModelObject::calculateBackgroundImageGeometry): Add
        support for the new positioning and refactor a little naming of the
        variables for better readability.
        * rendering/style/FillLayer.cpp:
        (SameSizeAsFillLayer):
        (WebCore::FillLayer::FillLayer):
        (WebCore::FillLayer::operator=):
        (WebCore::FillLayer::operator==):
        (WebCore::FillLayer::fillUnsetProperties):
        (WebCore::FillLayer::fillUnsetProperties): When filling the layer with
        unset properties make sure we also set the x and y origins of the
        background in case they were set.
        * rendering/style/FillLayer.h:
        (WebCore::FillLayer::backgroundXOrigin):
        (WebCore::FillLayer::backgroundYOrigin):
        (WebCore::FillLayer::isBackgroundOriginSet):
        (FillLayer):
        (WebCore::FillLayer::setBackgroundXOrigin):
        (WebCore::FillLayer::setBackgroundYOrigin):
        (WebCore::FillLayer::clearPositionX):
        (WebCore::FillLayer::clearPositionY):
        * rendering/style/RenderStyleConstants.h:

2012-12-03  Mike West  <mkwst@chromium.org>

        Web Inspector: Autogenerate stack traces and line numbers when possible.
        https://bugs.webkit.org/show_bug.cgi?id=100650

        Reviewed by Yury Semikhatsky.

        Console messages generated in WebCore generally are asked to do a bit of
        work in order to provide a developer with a detailed report. We ask the
        caller to either generate stack traces, or pass in a url/line number
        pair, which can be a bit of work. Predictably, most callers don't pass
        in what we'd like to see.

        This patch creates a new, simpler console message generation API that we
        expect most call sites to use. Source, type, level, and message are
        required, and an optional request ID can be passed in. Everything else
        will be autogenerated inside ConsoleMessage when appropriate.

        In a subsequent patch, we expect to be able to trim down more of the
        external call sites (ContentSecurityPolicy springs to mind) in order to
        further consolidate the external interface. Simple is good.

        * Modules/websockets/WebSocket.cpp:
        (WebCore::WebSocket::connect):
        * Modules/websockets/WebSocketChannel.cpp:
        (WebCore::WebSocketChannel::didFailSocketStream):
            Drop the now-redundant URL parameter from various WebSocket errors.
        * css/MediaList.cpp:
        (WebCore::addResolutionWarningMessageToConsole):
            Switch to Document::addConsoleMessage, which means that we can move
            line-number generation out of MediaList.
        * dom/Document.cpp:
        (WebCore::Document::logExceptionToConsole):
            Use the long-form 'addMessage()' rather than the public interface.
        (WebCore::Document::processHttpEquiv):
            Drop the URL parameter, as it's now autogenerated.
        (WebCore::Document::addConsoleMessage):
        (WebCore):
        * dom/Document.h:
        (Document):
            Override the pure virtual method on ScriptExecutionContext, and pass
            the call through to the new Console::addMessage, which accepts a
            pointer to the Document in order to do line-number generation.
        * dom/ScriptExecutionContext.h:
        (ScriptExecutionContext):
            Add a pure virtual variant of addConsoleMessage which accepts only
            bare minimum data, and expects autogeneration of the rest.
            Additionally, ensure that the other variants always have either a
            URL/line number, or a stack trace.
        * dom/ViewportArguments.cpp:
        (WebCore::reportViewportWarning):
            Drop line numbers and URLs from Viewport warnings. We can generate
            these now.
        * html/HTMLFormElement.cpp:
        (WebCore::HTMLFormElement::validateInteractively):
            Drop the URL from form autofocus warnings
        * html/HTMLIFrameElement.cpp:
        (WebCore::HTMLIFrameElement::parseAttribute):
            Drop the URL and line from sandbox attribute warnings.
        * html/canvas/WebGLRenderingContext.cpp:
        (WebCore):
        (WebCore::WebGLRenderingContext::printWarningToConsole):
            Drop the URL from WebGL warnings.
        * inspector/ConsoleMessage.cpp:
        (WebCore::ConsoleMessage::ConsoleMessage):
            Call 'autogenerateMetadata' to ensure that a stack trace is
            generated if one isn't provided. Create a new constructor that
            accepts a ScriptState/ScriptArguments pair, and use it for console
            API calls.
        (WebCore):
        (WebCore::ConsoleMessage::autogenerateMetadata):
            Generate a stack trace given whatever information we've got.
        * inspector/ConsoleMessage.h:
        (ConsoleMessage):
            Create a new constructor that accepts a ScriptState/ScriptArguments
            pair, and use it for console API calls.
        * inspector/InspectorConsoleAgent.cpp:
        (WebCore::InspectorConsoleAgent::enable):
            Use the short-form ConsoleMessage constructor.
        (WebCore::InspectorConsoleAgent::addMessageToConsole):
            Use the stack-only constructor, or the ScriptState
            constructor, as appropriate.
        (WebCore::InspectorConsoleAgent::count):
            We generated a stack, pass it in.
        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::shouldInterruptLoadForXFrameOptions):
        * loader/MainResourceLoader.cpp:
        (WebCore::MainResourceLoader::didReceiveResponse):
            Drop the URL parameter from the console message for X-Frame-Options
            parsing errors.
        * page/Console.cpp:
        (WebCore::Console::addMessage):
            When given a Document*, generate a line number if: 1) the document
            is still being parsed, 2) the document is not in document.write(),
            3) the parser isn't waiting for script, and 4) the parser isn't
            executing script. Many callsites didn't check all of these, which
            is why the SVG rebaseline (for example) drops lots and lots of line
            numbers which point at a closing '</script>' tag.
        (WebCore):
        * page/Console.h:
        (WebCore):
        (Console):
            Update the public API to accept a Document* and little else.
        * page/DOMWindow.cpp:
        (WebCore::DOMWindow::printErrorMessage):
            Don't generate a stack here. We can do it later.
        * svg/SVGDocumentExtensions.cpp:
        (WebCore::reportMessage):
            Drop the URL and line number. We'll generate them. It'll be sweet.
        * workers/WorkerContext.cpp:
        (WebCore::WorkerContext::addConsoleMessage):
            Generate a stack here, as we likely won't have the context to do
            so later. Pass it through.
        (WebCore):
        * workers/WorkerContext.h:
        (WorkerContext):
            Implement the new addConsoleMessage variant.

2012-12-03  Gabor Rapcsanyi  <rgabor@webkit.org>

        [Qt] Remove an unnecessary masking from swapBgrToRgb()
        https://bugs.webkit.org/show_bug.cgi?id=103630

        Reviewed by Zoltan Herczeg.

        Get rid of a masking command in swapBgrToRgb() to speed up a little bit.

        * platform/graphics/qt/GraphicsContext3DQt.cpp:
        (WebCore::swapBgrToRgb):

2012-12-03  Mikhail Pozdnyakov  <mikhail.pozdnyakov@intel.com>

        CSS Device Adaptation: window.innerWidth returns wrong value if CSS viewport descriptors are applied
        https://bugs.webkit.org/show_bug.cgi?id=103737

        Reviewed by Kenneth Rohde Christiansen.

        ViewportStyleResolver used frame view visibleContentRect size as initial viewport size.
        This however caused a problem when page enabled/disabled CSS stylesheets, having viewport
        descriptors. Viewport descriptors from new stylesheet were applied to the visibleContentRect
        affected already by the viewport descriptors from the previous stylesheet.

        New 'initialViewportSize' property (http://dev.w3.org/csswg/css-device-adapt/#initial-viewport)
        was added to frame view so that viewport descriptors can always be applied to the reliable
        viewport size.

        Test: css3/device-adapt/viewport-width-check-window-innerwidth-correct.html

        * css/ViewportStyleResolver.cpp:
        (WebCore::ViewportStyleResolver::ViewportStyleResolver):
        (WebCore::ViewportStyleResolver::getViewportArgumentValue):
        * css/ViewportStyleResolver.h:
        (ViewportStyleResolver):
        * dom/Document.cpp:
        (WebCore):
        (WebCore::Document::initialViewportSize):
        * dom/Document.h:
        (Document):
        * page/FrameView.h:
        (FrameView):
        (WebCore::FrameView::initialViewportSize):
        (WebCore::FrameView::setInitialViewportSize):

2012-12-03  Alexander Pavlov  <apavlov@chromium.org>

        Web Inspector: [Styles] Retain selector case as written in the source code
        https://bugs.webkit.org/show_bug.cgi?id=103118

        Reviewed by Antti Koivisto.

        This change:
        - adds parsing of selector group components in the CSSParser;
        - builds the SelectorList.selectors based on the source code whenever possible.
          Strips [multiline] comments and whitespace;
        - adds the MultilineMode to RegularExpression.

        Test: inspector/styles/selector-list.html

        * WebCore.exp.in: Update the exported symbol.
        * css/CSSGrammar.y.in: Add invocations for CSSParser::markSelector[Start|End]() as required.
        * css/CSSParser.cpp:
        (WebCore::CSSParser::markSelectorStart): Gets invoked to mark a selector group item start offset.
        (WebCore::CSSParser::markSelectorEnd): Ditto for the end offset.
        * css/CSSParser.h: Add new methods and a SourceRange tracking field.
        * css/CSSPropertySourceData.h: Add SelectorRangeList to the CSSRuleSourceData.
        * inspector/InspectorStyleSheet.cpp:
        (WebCore::selectorsFromSource): Builds the SelectorList based on the underlying source data.
        Strips comments and whitespace from selectors.
        (WebCore::InspectorStyleSheet::buildObjectForSelectorList):
        Builds SelectorList based on the availability of the source code.
        * inspector/front-end/StylesSidebarPane.js:
        (WebInspector.StylePropertiesSection.prototype._markSelectorMatches):
        Update selectors in all cases to make use of the source-based information whenever possible.
        * platform/text/RegularExpression.cpp:
        Add the MultilineMode parameter into the constructor/factory method and ultimately pass it into YarrPattern.
        (WebCore::RegularExpression::Private::create): See above.
        (WebCore::RegularExpression::Private::Private): See above.
        (WebCore::RegularExpression::Private::compile): See above.
        (WebCore::RegularExpression::RegularExpression): See above.
        * platform/text/RegularExpression.h:
        Add enum MultilineMode, modify constructor and factory method signatures accordingly.

2012-12-02  Noel Gordon  <noel.gordon@gmail.com>

        ImageOrientation::transformFromDefault() case labels should be in numerical order
        https://bugs.webkit.org/show_bug.cgi?id=101596

        Reviewed by Simon Fraser.

        Place the orientation case labels in numerical order to better match the EXIF2.2 spec
        definitions of orientation values and their ImageOrientation.h enumeration.

        No change in behavior. Covered by existing tests:
           fast/images/exif-orientation-css.html
           fast/images/exif-orientation-image-document.html
           fast/images/exif-orientation.html

        * platform/graphics/ImageOrientation.cpp:
        (WebCore::ImageOrientation::transformFromDefault): Numerically order the orientation 
        case statement labels.

2012-12-02  Mary Wu  <mary.wu@torchmobile.com.cn>

        should sniff it if mimetype don't contain a slash.
        https://bugs.webkit.org/show_bug.cgi?id=102778

        Reviewed by George Staikos.

        Based on http://mimesniff.spec.whatwg.org/, a valid media type
        is the string represented by concatenating type, the string "/",
        and subtype. So if the mimetype don't contain slash, we should
        possible get sniffed type from the content like Firefox/chrome/safari.

        RIM Bug# 219590, internally reviewed by Liam Quinn.

        No new tests, the patch only impact qt/blackberry porting to be consistent
        with chrome, other portings have their own behavior.

        * platform/network/MIMESniffing.cpp:
        (std::isUnknownType):

2012-12-02  Otto Derek Cheung  <otcheung@rim.com>

        [BlackBerry] Adding checks for null when checking cookie status in CookieJarBlackBerry
        https://bugs.webkit.org/show_bug.cgi?id=103748

        Reviewed by Rob Buis.

        The logic is flipped in the previous patch.

        * loader/blackberry/CookieJarBlackBerry.cpp:
        (WebCore::cookiesEnabled):

2012-12-02  Robert Hogan  <robert@webkit.org>

        Bad rendering of web page because of image's height is set to 100%
        https://bugs.webkit.org/show_bug.cgi?id=28035

        Reviewed by Eric Seidel.

        Call computeReplacedLogicalHeight() to get the correct logical height of a replaced element
        for calculating the element's width. RenderBox::computeLogicalHeightUsing() is a helper function designed for finding
        the min and max height values and is not the way to find the actual used height of a replaced element.

        WebKit's quirks-mode behaviour for the test case is unaffected by this change.

        Tests: fast/css/computed-image-width-with-percent-height-quirksmode.html
               fast/css/computed-image-width-with-percent-height.html

        * rendering/RenderReplaced.cpp:
        (WebCore::RenderReplaced::computeReplacedLogicalWidth):

2012-12-02  Mihnea Ovidenie  <mihnea@adobe.com>

        [CSS Regions] regionlayoutupdate event fires continuously
        https://bugs.webkit.org/show_bug.cgi?id=102101

        Reviewed by David Hyatt.

        According to the CSSRegions spec, http://dev.w3.org/csswg/css3-regions/#region-flow-layout-events, the regionlayoutupdate event
        should be dispatched when there is a possible layout change in the region chain.
        In the current implementation, regionlayoutupdate is dispatched when:
        1. a region from region chain changed its regionOverset value
        2. a region from region chain has regionOverset = fit| overset

        In the case of a named flow having an auto-height region with regionOverset = fit, the second step of layout was done
        also when there was not required, therefore the regionlayoutuodate was unnecessary triggered.

        We should proceed with the 2-pass layout only if the flow-thread having auto-height regions in region chain needs layout.

        Test: fast/regions/autoheight-regionlayoutupdate-multipletimes.html

        * rendering/FlowThreadController.cpp:
        (WebCore::FlowThreadController::hasRenderNamedFlowThreadsNeedingLayout):
        * rendering/FlowThreadController.h:
        * rendering/RenderView.cpp:
        (WebCore::RenderView::layout):

2012-12-02  Rik Cabanier  <cabanier@adobe.com>

        Extend JavaScript support for blending in canvas
        https://bugs.webkit.org/show_bug.cgi?id=101804

        Reviewed by Dirk Schulze.

        Added parsing code and variables to support additional canvas blend modes
        see spec: https://dvcs.w3.org/hg/FXTF/rawfile/tip/compositing/index.html#canvascompositingandblending

        Test: canvas/philip/tests/2d.composite.globalComposite.html

        * html/HTMLImageElement.cpp:
        (WebCore::HTMLImageElement::parseAttribute):
        * html/canvas/CanvasRenderingContext2D.cpp:
        (WebCore::CanvasRenderingContext2D::State::State):
        (WebCore::CanvasRenderingContext2D::State::operator=):
        (WebCore::CanvasRenderingContext2D::globalCompositeOperation):
        (WebCore::CanvasRenderingContext2D::setGlobalCompositeOperation):
        (WebCore::CanvasRenderingContext2D::drawImageFromRect):
        * html/canvas/CanvasRenderingContext2D.h:
        (State):
        * platform/graphics/GraphicsTypes.cpp:
        (WebCore):
        (WebCore::parseCompositeAndBlendOperator):
        (WebCore::compositeOperatorName):
        * platform/graphics/GraphicsTypes.h:

2012-12-02  KyungTae Kim  <ktf.kim@samsung.com>

        [EFL] Fix build warning in GraphicsContext3DEfl.cpp
        https://bugs.webkit.org/show_bug.cgi?id=103807

        Reviewed by Laszlo Gombos.

        Because GraphicsContext3D::ImageExtractor::extractImage is not implemented yet, 
        comment out the parameter names for removing -Wunused-parameter warnings.

        * platform/graphics/efl/GraphicsContext3DEfl.cpp:
        (WebCore::GraphicsContext3D::ImageExtractor::extractImage):

2012-12-02  Andreas Kling  <akling@apple.com>

        Keep ElementAttributeData sharing cache open for a while after document parsing finishes.
        <http://webkit.org/b/103720>

        Reviewed by Antti Koivisto.

        Allow web pages that generate content dynamically to benefit more from the ElementAttributeData sharing
        cache by keeping it open for 10 seconds after document parsing finishes. This enables elements constructed
        from HTML fragments to share attribute data with other identical elements.

        Elements created via Document.createElement are still unsupported since we don't know the list of attributes
        at the time of construction.

        401kB progression on Membuster3.

        Document now holds on to a DocumentSharedObjectPool, accessible via Document::sharedObjectPool().
        It is non-null during parsing and for some time afterwards, and can be used to implement additional
        caches that are not worth holding on to permanently.

        * CMakeLists.txt:
        * GNUmakefile.list.am:
        * Target.pri:
        * WebCore.gypi:
        * WebCore.xcodeproj/project.pbxproj:
        * WebCore.vcproj/WebCore.vcproj:

            Add new class DocumentSharedObjectPool.

        * dom/Document.cpp:
        (WebCore::Document::Document):
        (WebCore::Document::setParsing):
        (WebCore::Document::finishedParsing):
        (WebCore::Document::sharedObjectPoolClearTimerFired):
        * dom/Document.h:
        (WebCore::Document::sharedObjectPool):

            Create DocumentSharedObjectPool when parsing starts, kill it on a 10s timer after parsing finishes.

        * dom/DocumentSharedObjectPool.cpp: Added.
        (ImmutableElementAttributeDataCacheKey):
        (WebCore::ImmutableElementAttributeDataCacheKey::ImmutableElementAttributeDataCacheKey):
        (WebCore::ImmutableElementAttributeDataCacheKey::operator!=):
        (WebCore::ImmutableElementAttributeDataCacheKey::hash):
        (ImmutableElementAttributeDataCacheEntry):
        (WebCore::ImmutableElementAttributeDataCacheEntry::ImmutableElementAttributeDataCacheEntry):
        (WebCore::DocumentSharedObjectPool::cachedImmutableElementAttributeData):
        (WebCore::DocumentSharedObjectPool::DocumentSharedObjectPool):
        (WebCore::DocumentSharedObjectPool::~DocumentSharedObjectPool):
        * dom/DocumentSharedObjectPool.h: Added.
        (DocumentSharedObjectPool):
        (WebCore::DocumentSharedObjectPool::create):
        * dom/Element.cpp:
        (WebCore::Element::parserSetAttributes):

            Moved the ElementAttributeData cache to DocumentSharedObjectPool.

2012-12-02  John Bauman  <jbauman@chromium.org>

        [chromium] Let Pepper Flash use integrated GPU
        https://bugs.webkit.org/show_bug.cgi?id=103800

        Reviewed by Kenneth Russell.

        Pepper Flash uses the SharedGraphicsContext3D as a parent, so don't
        require that to use the discrete GPU. This means that accelerated
        canvas will use the integrated GPU, but that will save battery life
        and seems acceptable. 

        * platform/graphics/gpu/SharedGraphicsContext3D.cpp:
        (WebCore::SharedGraphicsContext3DImpl::createContext):

2012-12-02  Elliott Sprehn  <esprehn@gmail.com>

        documentElement should not always get a renderer
        https://bugs.webkit.org/show_bug.cgi?id=103475

        Reviewed by Ojan Vafai.

        Only SVG documents need a renderer on the documentElement when it's
        display: none. This behavior is wrong, but there's assumptions in
        FrameView and SVGImage that depend on a RenderSVGRoot existing for all
        loaded SVG document and images.

        The current code has logic that makes it appear as if we always create
        a renderer for the documentElement even when it's display: none, but
        because HTMLElement::createRenderer doesn't call super we end up with
        HTMLElement::rendererIsNeeded returning true for display: none, but
        HTMLElement::createRenderer returning null.

        Instead of this generic documentElement logic only special case SVG
        until someone can fix Bug 103493 so we don't need it.

        Test: fast/css/display-none-documentElement.html

        * dom/Element.cpp:
        (WebCore::Element::rendererIsNeeded):
        (WebCore::Element::createRenderer):
        * svg/SVGSVGElement.cpp:
        (WebCore::SVGSVGElement::rendererIsNeeded):
        * svg/SVGSVGElement.h:
        (SVGSVGElement):

2012-12-02  Pan Deng  <pan.deng@intel.com>

        [Resource Timing] implementation of cross origin resouce timing restrictions.
        https://bugs.webkit.org/show_bug.cgi?id=84886.

        Reviewed by Tony Gentilcore.

        This patch implemented resource timing behaviors of cross origin. By default, detailed timing info is hided in cross origin resource timing, only startTime, duration, fetchStart and responseEnd can be observed. Exceptions are, server side allow its origin can be timing by another through a header with "timing-allow-origin" field.

        Tests: http/tests/w3c/webperf/submission/Intel/resource-timing/test_resource_timing_cross_origin_resource_request.html
               http/tests/w3c/webperf/submission/Intel/resource-timing/test_resource_timing_timing_allow_cross_origin_resource_request.html

        * page/Performance.cpp:
        (WebCore::passesTimingAllowCheck):
        (WebCore):
        (WebCore::Performance::addResourceTiming):
        * page/Performance.h:
        (WebCore):
        (Performance):
        * page/PerformanceResourceTiming.cpp:
        (WebCore):
        * page/PerformanceResourceTiming.h:
        (WebCore::PerformanceResourceTiming::create):
        (PerformanceResourceTiming):

2012-12-02  Elliott Sprehn  <esprehn@gmail.com>

        Simplify treeScope and setTreeScope
        https://bugs.webkit.org/show_bug.cgi?id=103708

        Reviewed by Hajime Morita.

        By making the default treeScope in NodeRareData the document and then
        moving the m_treeScope field to NodeRareDataBase we can make treeScope
        inline and make setTreeScope much simpler.

        There's also no reason to save calls to rareData() now that the map has
        been eliminated by r133372 so we can eliminate the return value from
        setTreeScope.

        No new tests, just refactoring.

        * WebCore.exp.in:
        * dom/Document.h:
        (WebCore::Node::treeScope):
        (WebCore):
        * dom/Element.cpp:
        (WebCore::Element::createRareData):
        * dom/ElementRareData.h:
        (ElementRareData):
        (WebCore::ElementRareData::ElementRareData):
        * dom/Node.cpp:
        (WebCore::Node::setTreeScope):
        (WebCore::Node::createRareData):
        * dom/Node.h:
        (NodeRareDataBase):
        (WebCore::NodeRareDataBase::treeScope):
        (WebCore::NodeRareDataBase::setTreeScope):
        (WebCore::NodeRareDataBase::NodeRareDataBase):
        (Node):
        * dom/NodeRareData.cpp:
        (WebCore::NodeRareData::reportMemoryUsage):
        * dom/NodeRareData.h:
        (WebCore::NodeRareData::NodeRareData):
        (NodeRareData):
        * dom/TreeScopeAdopter.cpp:
        (WebCore::TreeScopeAdopter::moveTreeToNewScope):

2012-12-02  Justin Novosad  <junov@google.com>

        Fix occlusion culling logic to handle css background layer clipping
        https://bugs.webkit.org/show_bug.cgi?id=103276

        Reviewed by Simon Fraser.

        Bug was introduced by r135629
        This patch fixes it by verifying layer clip.  A fill layer must
        not be treated as if it occludes the layers under it unless it has
        a larger or equal clip setting than the layers under it.

        Test: fast/backgrounds/background-opaque-clipped-gradients.html

        * rendering/RenderBox.cpp:
        (WebCore::RenderBox::paintFillLayers):
        * rendering/style/FillLayer.cpp:
        (WebCore::clipMax):
        (WebCore::FillLayer::computeClipMax):
        (WebCore::FillLayer::clipOccludesNextLayers):
        * rendering/style/FillLayer.h:
        (FillLayer):

2012-12-02  Tony Chang  <tony@chromium.org>

        Avoid a second layout of flex items in layoutAndPlaceChildren()
        https://bugs.webkit.org/show_bug.cgi?id=102352

        Reviewed by Ojan Vafai.

        Avoid doing a second layout if we're going to get the same size as before.
        This prevents us from doing an exponential number of layouts in some
        common cases.

        Test: css3/flexbox/stretch-after-sibling-size-change.html

        * html/shadow/SliderThumbElement.cpp:
        (WebCore::RenderSliderContainer::layout): Force a layout of the track, which positions the thumb.
        * rendering/RenderFlexibleBox.cpp:
        (WebCore::RenderFlexibleBox::needToStretchChild): Determine if a child is going to stretch.
        (WebCore::RenderFlexibleBox::resetAutoMarginsAndLogicalTopInCrossAxis): Makes sure we're in a consistent state before
        we apply auto margins.
        (WebCore::RenderFlexibleBox::layoutAndPlaceChildren):
        * rendering/RenderFlexibleBox.h: Add needToStretchChild.

2012-12-02  Yongjun Zhang  <yongjun_zhang@apple.com>

        Need a method to close all idle localstorage databases immediately.
        https://bugs.webkit.org/show_bug.cgi?id=103469

        Reviewed by David Kilzer.

        Add a new PageGroup method closeIdleLocalStorageDatabases, which walks through
        all local storage areas that don't have document referencing to them and closes
        their underlying databases.

        Test: storage/domstorage/localstorage/close-idle-localstorage-databases-immediately.html

        * WebCore.exp.in:
        * page/PageGroup.cpp:
        (WebCore::PageGroup::clearLocalStorageForOrigin):
        (WebCore):
        (WebCore::PageGroup::closeIdleLocalStorageDatabases): walking through all idle local storages and
            closing their databases.
        * page/PageGroup.h:
        (PageGroup):
        * storage/StorageArea.h:
        (WebCore::StorageArea::closeDatabaseIfIdle):
        * storage/StorageAreaImpl.cpp:
        (WebCore::StorageAreaImpl::closeDatabaseIfIdle): close the database if it is idle.
        (WebCore):
        * storage/StorageAreaImpl.h:
        (StorageAreaImpl):
        * storage/StorageNamespace.h:
        (StorageNamespace):
        * storage/StorageNamespaceImpl.cpp:
        (WebCore::StorageNamespaceImpl::closeIdleLocalStorageDatabases):
        (WebCore):
        * storage/StorageNamespaceImpl.h:
        (StorageNamespaceImpl):

2012-12-02  Otto Derek Cheung  <otcheung@rim.com>

        [BlackBerry] Adding checks for null when checking cookie status in CookieJarBlackBerry
        https://bugs.webkit.org/show_bug.cgi?id=103748

        Reviewed by Rob Buis.

        Updating CookieJarBlackBerry::cookieEnabled and have other methods in the class call that
        method. Also, adding null checks for document->settings().

        No change in behaviour.

        * loader/blackberry/CookieJarBlackBerry.cpp:
        (WebCore::cookies):
        (WebCore::setCookies):
        (WebCore::cookiesEnabled):
        (WebCore::getRawCookies):
        (WebCore::deleteCookie):
        (WebCore::cookieRequestHeaderFieldValue):

2012-12-02  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r136236.
        http://trac.webkit.org/changeset/136236
        https://bugs.webkit.org/show_bug.cgi?id=103833

        [chromium] Flakey crashes in SpeechRecognitionEvent::emma
        during GC. (Requested by mkwst on #webkit).

        * Modules/speech/SpeechRecognition.cpp:
        (WebCore::SpeechRecognition::start):
        * Modules/speech/SpeechRecognition.h:
        (SpeechRecognition):
        * Modules/speech/SpeechRecognitionEvent.cpp:
        (WebCore::SpeechRecognitionEvent::SpeechRecognitionEvent):
        * Modules/speech/SpeechRecognitionEvent.h:
        (SpeechRecognitionEventInit):
        (SpeechRecognitionEvent):
        (WebCore::SpeechRecognitionEvent::resultIndex):
        * Modules/speech/SpeechRecognitionEvent.idl:
        * Modules/speech/SpeechRecognitionResult.cpp:
        (WebCore::emmaQualifiedName):
        (WebCore):
        (WebCore::SpeechRecognitionResult::emma):
        * Modules/speech/SpeechRecognitionResult.h:
        (WebCore):
        (WebCore::SpeechRecognitionResult::final):
        (SpeechRecognitionResult):
        * Modules/speech/SpeechRecognitionResult.idl:
        * WebCore.gypi:
        * bindings/v8/custom/V8SpeechRecognitionResultCustom.cpp: Renamed from Source/WebCore/bindings/v8/custom/V8SpeechRecognitionEventCustom.cpp.
        (WebCore):
        (WebCore::V8SpeechRecognitionResult::opaqueRootForGC):

2012-12-01  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r136015.
        http://trac.webkit.org/changeset/136015
        https://bugs.webkit.org/show_bug.cgi?id=103821

        Did not heal performance bot and caused other performance
        regressions (Requested by abarth on #webkit).

        * bindings/scripts/CodeGeneratorV8.pm:
        (GenerateHeader):

2012-12-01  Xiaobo Wang  <xiaobo.wang@torchmobile.com.cn>

        DRT - crashed in WebCore::SearchFieldCancelButtonElement::defaultEventHandler
        https://bugs.webkit.org/show_bug.cgi?id=103592

        Reviewed by Kent Tamura.

        The crash happened when the search field cancel button handles mouseout
        event after the search input was detached. When it happens the input
        element returned from shadowHost() is null, need to check the pointer
        before dereferencing.
        InputFieldSpeechButton and SearchFieldResultsButtonElement have the
        similar issue.

        No new tests. The patch fixes the following test on BlackBerry platform.
        Test: fast/forms/search-delete-while-cancel-button-clicked.html

        * html/shadow/TextControlInnerElements.cpp:
        (WebCore::SearchFieldResultsButtonElement::defaultEventHandler):
        (WebCore::SearchFieldCancelButtonElement::defaultEventHandler):
        (WebCore::SearchFieldCancelButtonElement::willRespondToMouseClickEvents):
        (WebCore::InputFieldSpeechButtonElement::defaultEventHandler):
        (WebCore::InputFieldSpeechButtonElement::willRespondToMouseClickEvents):
        (WebCore::InputFieldSpeechButtonElement::setRecognitionResult):

2012-11-30  Mike West  <mkwst@chromium.org>

        CSP 1.1: Make the CSP_NEXT flag runtime enabled.
        https://bugs.webkit.org/show_bug.cgi?id=103652

        Reviewed by Adam Barth.

        Content Security Policy 1.1 continues to live behind the CSP_NEXT flag,
        this patch adds another layer on top of that in order to enable runtime
        decisions about whether it should be active.

        * bindings/generic/RuntimeEnabledFeatures.cpp:
        (WebCore):
        * bindings/generic/RuntimeEnabledFeatures.h:
        (RuntimeEnabledFeatures):
        (WebCore::RuntimeEnabledFeatures::experimentalContentSecurityPolicyFeaturesEnabled):
        (WebCore::RuntimeEnabledFeatures::setExperimentalContentSecurityPolicyFeaturesEnabled):
            Adds methods in order to correctly handle enabling and disabling
            CSP 1.1 features.
        * dom/Document.idl:
            Gate the 'document.securityPolicy' object on the runtime flag.
        * page/ContentSecurityPolicy.cpp:
        (WebCore::CSPDirectiveList::addDirective):
            Check that experimental features are runtime enabled before
            processing 1.1 directives.
        (WebCore::ContentSecurityPolicy::experimentalFeaturesEnabled):
        (WebCore):
        * page/ContentSecurityPolicy.h:
            Adds a new method which checks against the runtime flag to determine
            whether CSP 1.1 features are enabled.

2012-11-30  Simon Fraser  <simon.fraser@apple.com>

        Avoid calling into NSUserDefaults every time we start a scroll
        https://bugs.webkit.org/show_bug.cgi?id=103804

        Reviewed by Dan Bernstein.

        Cache the NSScrollAnimationEnabled preference to avoid
        hitting NSUserDefaults every time we start scrolling.

        * platform/mac/ScrollAnimatorMac.mm:
        (WebCore::scrollAnimationEnabledForSystem):

2012-11-30  Beth Dakin  <bdakin@apple.com>

        https://bugs.webkit.org/show_bug.cgi?id=103790
        The LayerPool m_pruneTimer should have a longer delay

        Reviewed by Simon Fraser.

        A 1 second delay is more appropriate here.
        * platform/graphics/ca/mac/LayerPool.mm:
        (WebCore::LayerPool::schedulePrune):

2012-11-30  Jer Noble  <jer.noble@apple.com>

        Unreviewed Windows build fix.

        Add a default: entry to an case statement to fix a build error when compiled in VS2005.

        * html/MediaController.cpp:
        (MediaController::playbackState):

2012-11-30  Jer Noble  <jer.noble@apple.com>

        Add support for the 'unpause()' method on MediaController.
        https://bugs.webkit.org/show_bug.cgi?id=103751

        Reviewed by Eric Carlson.

        The MediaController spec has been updated to add an unpause() method
        which is functionally identical to the old play() method, and changes
        the semantics of play() to call play() on the underlying slaved media
        elements. The spec also added a playbackState() method, returning a
        string representing the last calculated playback state.

        Test: media/media-controller-unpause.html

        * html/MediaController.cpp:
        (MediaController::unpause): Renamed from play().
        (MediaController::play): Added. Same as unpause(), but also call
            play() on slaved media elements.
        (playbackStateWaiting): Static string accessor.
        (playbackStatePlaying): Ditto.
        (playbackStateEnded): Ditto.
        (MediaController::playbackState): Added. Returns string value of
            m_playbackState.
        * html/MediaController.h:
        * html/MediaController.idl:

2012-11-30  Julien Chaffraix  <jchaffraix@webkit.org>

        [CSS Grid Layout] Align the grid track code with the specification's production rules
        https://bugs.webkit.org/show_bug.cgi?id=103703

        Reviewed by Alexis Menard.

        In order to support more of the syntax and make the code more readable, this change
        splits following the grammar's production rules (see
        http://dev.w3.org/csswg/css3-grid-layout/#grid-definition-columns-and-grid-definit).

        Refactoring covered by existing tests.

        * css/CSSComputedStyleDeclaration.cpp:
        (WebCore::valueForGridTrackMinMax):
        (WebCore::valueForGridTrackGroup):
        (WebCore::valueForGridTrackList):
        * css/CSSParser.cpp:
        (WebCore::CSSParser::parseGridTrackList):
        (WebCore::CSSParser::parseGridTrackGroup):
        (WebCore::CSSParser::parseGridTrackMinMax):
        * css/CSSParser.h:
        * css/StyleResolver.cpp:
        (WebCore::createGridTrackMinMax):
        (WebCore::createGridTrackGroup):
        (WebCore::createGridTrackList):
        Mechanical split of the parsing, resolving and computed style code into
        <track-list>, <track-group>, <track-minmax> and <track-breadth> parts.

        * css/CSSParser.cpp:
        (WebCore::CSSParser::parseGridBreadth):
        Changed this function to just parse a single value (without any extra logic).

        * css/StyleResolver.cpp:
        (WebCore::createGridTrackBreadth):
        Changed this function to take a Length as it is used to parse a <track-breadth>.
        The goal is for it to be the low-level function createGridTrackMinmax will call on
        each function parameter.

2012-11-30  Simon Fraser  <simon.fraser@apple.com>

        Fix potential crash when canceling animations on renderers with no node
        https://bugs.webkit.org/show_bug.cgi?id=103784

        Reviewed by Dan Bernstein.

        We could crash when tearing down RenderScrollbars because we hit
        AnimationController::cancelAnimations() for a renderer with no node.
        The assertion already check for a null node, but the line after
        does not, so fix that.

        I tried to make a test with animations/transitions on a custom scrollbar, but was not able
        to get it to crash.

        * page/animation/AnimationController.cpp:
        (WebCore::AnimationController::cancelAnimations):

2012-11-30  Tim Horton  <timothy_horton@apple.com>

        PluginDocument fires didFinishDocumentLoadForFrame upon receiving initial bytes instead of when load completes
        https://bugs.webkit.org/show_bug.cgi?id=103702
        <rdar://problem/12762534>

        Reviewed by Alexey Proskuryakov.

        Remove the call to finish() from PluginDocumentParser::appendBytes().

        This was introduced in http://trac.webkit.org/changeset/14838, when finish() wouldn't get
        called for PluginDocuments any other way. In the time since, DocumentWriter::end() was made
        to call finish() anyway, at the correct time (the call from appendBytes makes a PluginDocument
        appear to be finished loading after the first bytes are received).

        No new tests, because there doesn't seem to be any state in a PluginDocument that can be accessed
        from JavaScript to determine whether or not it has finished loading.

        * html/PluginDocument.cpp:
        (WebCore::PluginDocumentParser::appendBytes):

2012-11-29  Ilya Tikhonovsky  <loislo@chromium.org>

        RenderBlock minor clean-up: replace raw pointers with OwnPtrs.
        https://bugs.webkit.org/show_bug.cgi?id=103690

        Reviewed by Eric Seidel.

        raw pointers were replaced with OwnPtrs.
        Probably we also gain a small performance improvements because
        I replaced get && remove pair with take.

        * rendering/RenderBlock.cpp:
        (WebCore):
        (WebCore::removeBlockFromDescendantAndContainerMaps):
        (WebCore::RenderBlock::~RenderBlock):
        (WebCore::RenderBlock::addOverflowFromFloats):
        (WebCore::RenderBlock::addContinuationWithOutline):
        (WebCore::RenderBlock::paintContinuationOutlines):
        (WebCore::RenderBlock::insertIntoTrackedRendererMaps):
        (WebCore::RenderBlock::removeFromTrackedRendererMaps):
        (WebCore::RenderBlock::setDesiredColumnCountAndWidth):
        * rendering/RenderBlock.h:
        (WebCore):

2012-11-30  Jun Jiang  <jun.a.jiang@intel.com>

        WebGL: Add a class to abstract the status of the Image in texImage2D() and texSubImage2D()
        https://bugs.webkit.org/show_bug.cgi?id=103606

        Reviewed by Kenneth Russell.

        In texImage2D() and texSubImage2D() for WebGL, the status of the Image is extracted and kept in the function GraphicsContext3D::getImageData() but provides no interface or guaranteed way to use the status of the Image outside GraphicsContext3D::getImageData() safely. For example, you can not get the address of the raw Image data and operate it outside the scope of the GraphicsContext3D::getImageData() and there is at least one memory copy existed from the Image to the intermediate vector.
       This patch refactors the code by adding a ImageExtractor class to abstract and keep the status of the Image. The lifetime and validity of Image status are determined by the lifetime of the object instead of the scope of getImageData(). It provides flexibility on future optimizations.

        No new tests. It is a code refactoring patch.

        * html/canvas/WebGLRenderingContext.cpp:
        (WebCore):
        (WebCore::WebGLRenderingContext::texImage2DImpl):
        (WebCore::WebGLRenderingContext::texSubImage2DImpl):
        * platform/graphics/GraphicsContext3D.cpp:
        (WebCore::GraphicsContext3D::ImageExtractor::ImageExtractor):
        (WebCore):
        (WebCore::GraphicsContext3D::packImageData):
        * platform/graphics/GraphicsContext3D.h:
        (WebCore):
        (GraphicsContext3D):
        (ImageExtractor):
        (WebCore::GraphicsContext3D::ImageExtractor::extractSucceeded):
        (WebCore::GraphicsContext3D::ImageExtractor::imagePixelData):
        (WebCore::GraphicsContext3D::ImageExtractor::imageWidth):
        (WebCore::GraphicsContext3D::ImageExtractor::imageHeight):
        (WebCore::GraphicsContext3D::ImageExtractor::imageSourceFormat):
        (WebCore::GraphicsContext3D::ImageExtractor::imageAlphaOp):
        (WebCore::GraphicsContext3D::ImageExtractor::imageSourceUnpackAlignment):
        * platform/graphics/NativeImagePtr.h:
        * platform/graphics/cairo/GraphicsContext3DCairo.cpp:
        (WebCore::GraphicsContext3D::ImageExtractor::~ImageExtractor):
        (WebCore):
        (WebCore::GraphicsContext3D::ImageExtractor::extractImage):
        * platform/graphics/cg/GraphicsContext3DCG.cpp:
        (WebCore::GraphicsContext3D::ImageExtractor::~ImageExtractor):
        (WebCore):
        (WebCore::GraphicsContext3D::ImageExtractor::extractImage):
        * platform/graphics/clutter/GraphicsContext3DClutter.cpp:
        (WebCore::GraphicsContext3D::ImageExtractor::~ImageExtractor):
        (WebCore):
        (WebCore::GraphicsContext3D::ImageExtractor::extractImage):
        * platform/graphics/efl/GraphicsContext3DEfl.cpp:
        (WebCore::GraphicsContext3D::ImageExtractor::~ImageExtractor):
        (WebCore):
        (WebCore::GraphicsContext3D::ImageExtractor::extractImage):
        * platform/graphics/qt/GraphicsContext3DQt.cpp:
        (WebCore::GraphicsContext3D::ImageExtractor::~ImageExtractor):
        (WebCore):
        (WebCore::GraphicsContext3D::ImageExtractor::extractImage):
        * platform/graphics/skia/GraphicsContext3DSkia.cpp:
        (WebCore::GraphicsContext3D::ImageExtractor::~ImageExtractor):
        (WebCore):
        (WebCore::GraphicsContext3D::ImageExtractor::extractImage):

2012-11-30  Simon Fraser  <simon.fraser@apple.com>

        Make RenderLayer::updateLayerPosition() private
        https://bugs.webkit.org/show_bug.cgi?id=102624

        Reviewed by Ryosuke Niwa.

        Made updateLayerPosition() private. The only external caller was
        MouseRelatedEvent::computeRelativePosition(), which has no business updating
        layer positions. In fact it had positively dangerous behavior; doing just
        a style update without layout, and then calling absoluteToLocal() and walking
        layers. Fixed by having it call updateLayoutIgnorePendingStylesheets().
        
        This revealed a bug where event.offsetX/offsetY could be wrong in some cases.
        fast/events/stopPropagation-submit.html does a simulated click (which has
        client coordinates at 0,0), so the image submit coordinates were incorrectly
        0,0. Now that we do layout before computing them, they are correctly reported
        as being relative to the element.

        * dom/MouseRelatedEvent.cpp:
        (WebCore::MouseRelatedEvent::computeRelativePosition):
        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::updateLayerPositionsAfterScroll):
        * rendering/RenderLayer.h:
        (RenderLayer):

2012-11-30  Simon Fraser  <simon.fraser@apple.com>

        Late-loading stylesheets can cause composited layers to be blank
        https://bugs.webkit.org/show_bug.cgi?id=103773

        Reviewed by Tim Horton.

        Early painting can be short-circuited in RenderBlock::paintContents() if we know a stylesheet
        is pending, which is done to avoid a flash of unstyled content (FOUC). When the stylesheet
        finally loaded, Document::styleResolverChanged() would try to repaint everything by calling
        repaint() on the RenderView(). In a composited world, however, this repaint() doesn't repaint
        composited layers.
        
        This was particularly prevalent on this specific URL because it failed to load
        a CSS file from typekit.com, so Document::styleResolverChanged()
        just did the repaint and returned (rather than doing a recalc style as would
        happen for correctly loaded stylesheets).
        
        Fix by making a way to repaint all compositing layers, and calling it
        from Document::styleResolverChanged().

        No tests because this is timing-dependant.

        * dom/Document.cpp:
        (WebCore::Document::styleResolverChanged): Call repaintViewAndCompositedLayers().
        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::paintContents): Fix the comment.
        * rendering/RenderLayerCompositor.cpp: Convert repaintCompositedLayersAbsoluteRect()
        and associated recursiveRepaintLayerRect() to allow the rect to be null, which indicates
        that we should just repaint the entire layer, and improve their names.
        (WebCore::RenderLayerCompositor::repaintCompositedLayers):
        (WebCore::RenderLayerCompositor::recursiveRepaintLayer):
        * rendering/RenderLayerCompositor.h:
        * rendering/RenderView.cpp:
        (WebCore::RenderView::repaintRectangleInViewAndCompositedLayers): repaintCompositedLayersAbsoluteRect()
        was renamed to repaintCompositedLayers().
        (WebCore::RenderView::repaintViewAndCompositedLayers):
        * rendering/RenderView.h:
        (RenderView): repaintViewRectangle() and repaintRectangleInViewAndCompositedLayers() should not
        be virtual. Add repaintViewAndCompositedLayers().

2012-11-30  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r136142.
        http://trac.webkit.org/changeset/136142
        https://bugs.webkit.org/show_bug.cgi?id=103768

        break a bunch of interactive_ui_tests in chromium win
        (Requested by zhenyao_home on #webkit).

        * css/CSSComputedStyleDeclaration.cpp:
        (WebCore::CSSComputedStyleDeclaration::getPropertyCSSValue):
        * css/CSSParser.cpp:
        (WebCore::isValidKeywordPropertyAndValue):
        (WebCore::isKeywordPropertyID):
        (WebCore::CSSParser::parseValue):
        * css/CSSPrimitiveValueMappings.h:
        * css/CSSProperty.cpp:
        (WebCore::CSSProperty::isInheritedProperty):
        * css/CSSPropertyNames.in:
        * css/CSSValueKeywords.in:
        * css/StyleBuilder.cpp:
        (WebCore::StyleBuilder::StyleBuilder):
        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::applyProperty):
        * rendering/InlineFlowBox.cpp:
        (WebCore::InlineFlowBox::placeBoxesInBlockDirection):
        (WebCore::InlineFlowBox::computeOverAnnotationAdjustment):
        (WebCore::InlineFlowBox::computeUnderAnnotationAdjustment):
        * rendering/RenderRubyRun.cpp:
        (WebCore::RenderRubyRun::layout):
        * rendering/style/RenderStyle.cpp:
        (WebCore::RenderStyle::diff):
        * rendering/style/RenderStyle.h:
        * rendering/style/RenderStyleConstants.h:
        * rendering/style/StyleRareInheritedData.cpp:
        (WebCore::StyleRareInheritedData::StyleRareInheritedData):
        (WebCore::StyleRareInheritedData::operator==):
        * rendering/style/StyleRareInheritedData.h:
        (StyleRareInheritedData):

2012-11-30  Joshua Bell  <jsbell@chromium.org>

        IndexedDB: Replace use of ScriptExecutionContext::Task (Part 1)
        https://bugs.webkit.org/show_bug.cgi?id=101483

        Reviewed by Tony Chang.

        The IDB back end (which runs on a single thread) makes use of ScriptExecutionContext's
        Task and facilities for cross-task posting with callbacks, and requires decorating various
        IDB classes with "ThreadSafe" when they are not. Move towards encapsulating the tasks
        in "Operation" classes which are IDB-operation specific.

        Part 1 (this patch) retains the use of ScriptExecutionContext::Task but wraps the creation
        and the callback function in an Operation class which will be fleshed out in later patches.
        As an aside, a little bit of RefPtr churn is eliminated, and IDB_TRACE sprinkled in.

        No new tests - just a refactor.

        * Modules/indexeddb/IDBCursorBackendImpl.cpp:
        (IDBCursorBackendImpl::CursorIterationOperation):
        (WebCore::IDBCursorBackendImpl::CursorIterationOperation::create):
        (WebCore):
        (IDBCursorBackendImpl::CursorAdvanceOperation):
        (WebCore::IDBCursorBackendImpl::CursorAdvanceOperation::create):
        (IDBCursorBackendImpl::CursorPrefetchIterationOperation):
        (WebCore::IDBCursorBackendImpl::CursorPrefetchIterationOperation::create):
        (WebCore::IDBCursorBackendImpl::continueFunction):
        (WebCore::IDBCursorBackendImpl::advance):
        (WebCore::IDBCursorBackendImpl::CursorAdvanceOperation::perform):
        (WebCore::IDBCursorBackendImpl::CursorIterationOperation::perform):
        (WebCore::IDBCursorBackendImpl::prefetchContinue):
        (WebCore::IDBCursorBackendImpl::CursorPrefetchIterationOperation::perform):
        * Modules/indexeddb/IDBCursorBackendImpl.h:
        (IDBCursorBackendImpl):
        * Modules/indexeddb/IDBDatabaseBackendImpl.cpp:
        (IDBDatabaseBackendImpl::CreateObjectStoreOperation):
        (WebCore::IDBDatabaseBackendImpl::CreateObjectStoreOperation::create):
        (WebCore):
        (IDBDatabaseBackendImpl::DeleteObjectStoreOperation):
        (WebCore::IDBDatabaseBackendImpl::DeleteObjectStoreOperation::create):
        (IDBDatabaseBackendImpl::VersionChangeOperation):
        (WebCore::IDBDatabaseBackendImpl::VersionChangeOperation::create):
        (IDBDatabaseBackendImpl::CreateObjectStoreAbortOperation):
        (WebCore::IDBDatabaseBackendImpl::CreateObjectStoreAbortOperation::create):
        (IDBDatabaseBackendImpl::DeleteObjectStoreAbortOperation):
        (WebCore::IDBDatabaseBackendImpl::DeleteObjectStoreAbortOperation::create):
        (IDBDatabaseBackendImpl::VersionChangeAbortOperation):
        (WebCore::IDBDatabaseBackendImpl::VersionChangeAbortOperation::create):
        (WebCore::IDBDatabaseBackendImpl::createObjectStore):
        (WebCore::IDBDatabaseBackendImpl::CreateObjectStoreOperation::perform):
        (WebCore::IDBDatabaseBackendImpl::deleteObjectStore):
        (WebCore::IDBDatabaseBackendImpl::DeleteObjectStoreOperation::perform):
        (WebCore::IDBDatabaseBackendImpl::VersionChangeOperation::perform):
        (WebCore::IDBDatabaseBackendImpl::runIntVersionChangeTransaction):
        (WebCore::IDBDatabaseBackendImpl::CreateObjectStoreAbortOperation::perform):
        (WebCore::IDBDatabaseBackendImpl::DeleteObjectStoreAbortOperation::perform):
        (WebCore::IDBDatabaseBackendImpl::VersionChangeAbortOperation::perform):
        * Modules/indexeddb/IDBDatabaseBackendImpl.h:
        (IDBDatabaseBackendImpl):
        * Modules/indexeddb/IDBIndexBackendImpl.cpp:
        (IDBIndexBackendImpl::OpenIndexCursorOperation):
        (WebCore::IDBIndexBackendImpl::OpenIndexCursorOperation::create):
        (WebCore):
        (IDBIndexBackendImpl::IndexCountOperation):
        (WebCore::IDBIndexBackendImpl::IndexCountOperation::create):
        (IDBIndexBackendImpl::IndexReferencedValueRetrievalOperation):
        (WebCore::IDBIndexBackendImpl::IndexReferencedValueRetrievalOperation::create):
        (IDBIndexBackendImpl::IndexValueRetrievalOperation):
        (WebCore::IDBIndexBackendImpl::IndexValueRetrievalOperation::create):
        (WebCore::IDBIndexBackendImpl::OpenIndexCursorOperation::perform):
        (WebCore::IDBIndexBackendImpl::openCursor):
        (WebCore::IDBIndexBackendImpl::openKeyCursor):
        (WebCore::IDBIndexBackendImpl::IndexCountOperation::perform):
        (WebCore::IDBIndexBackendImpl::count):
        (WebCore::IDBIndexBackendImpl::IndexReferencedValueRetrievalOperation::perform):
        (WebCore::IDBIndexBackendImpl::IndexValueRetrievalOperation::perform):
        (WebCore::IDBIndexBackendImpl::get):
        (WebCore::IDBIndexBackendImpl::getKey):
        * Modules/indexeddb/IDBIndexBackendImpl.h:
        (WebCore::IDBIndexBackendImpl::metadata):
        (IDBIndexBackendImpl):
        * Modules/indexeddb/IDBObjectStoreBackendImpl.cpp:
        (IDBObjectStoreBackendImpl::ObjectStoreRetrievalOperation):
        (WebCore::IDBObjectStoreBackendImpl::ObjectStoreRetrievalOperation::create):
        (WebCore):
        (IDBObjectStoreBackendImpl::ObjectStoreStorageOperation):
        (WebCore::IDBObjectStoreBackendImpl::ObjectStoreStorageOperation::create):
        (IDBObjectStoreBackendImpl::ObjectStoreIndexesReadyOperation):
        (WebCore::IDBObjectStoreBackendImpl::ObjectStoreIndexesReadyOperation::create):
        (IDBObjectStoreBackendImpl::ObjectStoreDeletionOperation):
        (WebCore::IDBObjectStoreBackendImpl::ObjectStoreDeletionOperation::create):
        (IDBObjectStoreBackendImpl::ObjectStoreClearOperation):
        (WebCore::IDBObjectStoreBackendImpl::ObjectStoreClearOperation::create):
        (IDBObjectStoreBackendImpl::CreateIndexOperation):
        (WebCore::IDBObjectStoreBackendImpl::CreateIndexOperation::create):
        (IDBObjectStoreBackendImpl::DeleteIndexOperation):
        (WebCore::IDBObjectStoreBackendImpl::DeleteIndexOperation::create):
        (IDBObjectStoreBackendImpl::OpenObjectStoreCursorOperation):
        (WebCore::IDBObjectStoreBackendImpl::OpenObjectStoreCursorOperation::create):
        (IDBObjectStoreBackendImpl::ObjectStoreCountOperation):
        (WebCore::IDBObjectStoreBackendImpl::ObjectStoreCountOperation::create):
        (IDBObjectStoreBackendImpl::CreateIndexAbortOperation):
        (WebCore::IDBObjectStoreBackendImpl::CreateIndexAbortOperation::create):
        (IDBObjectStoreBackendImpl::DeleteIndexAbortOperation):
        (WebCore::IDBObjectStoreBackendImpl::DeleteIndexAbortOperation::create):
        (WebCore::IDBObjectStoreBackendImpl::get):
        (WebCore::IDBObjectStoreBackendImpl::ObjectStoreRetrievalOperation::perform):
        (WebCore::IDBObjectStoreBackendImpl::put):
        (WebCore::IDBObjectStoreBackendImpl::setIndexesReady):
        (WebCore::IDBObjectStoreBackendImpl::ObjectStoreIndexesReadyOperation::perform):
        (WebCore::IDBObjectStoreBackendImpl::ObjectStoreStorageOperation::perform):
        (WebCore::IDBObjectStoreBackendImpl::deleteFunction):
        (WebCore::IDBObjectStoreBackendImpl::ObjectStoreDeletionOperation::perform):
        (WebCore::IDBObjectStoreBackendImpl::clear):
        (WebCore::IDBObjectStoreBackendImpl::ObjectStoreClearOperation::perform):
        (WebCore::IDBObjectStoreBackendImpl::createIndex):
        (WebCore::IDBObjectStoreBackendImpl::CreateIndexOperation::perform):
        (WebCore::IDBObjectStoreBackendImpl::deleteIndex):
        (WebCore::IDBObjectStoreBackendImpl::DeleteIndexOperation::perform):
        (WebCore::IDBObjectStoreBackendImpl::openCursor):
        (WebCore::IDBObjectStoreBackendImpl::OpenObjectStoreCursorOperation::perform):
        (WebCore::IDBObjectStoreBackendImpl::count):
        (WebCore::IDBObjectStoreBackendImpl::ObjectStoreCountOperation::perform):
        (WebCore::IDBObjectStoreBackendImpl::CreateIndexAbortOperation::perform):
        (WebCore::IDBObjectStoreBackendImpl::DeleteIndexAbortOperation::perform):
        * Modules/indexeddb/IDBObjectStoreBackendImpl.h:
        (IDBObjectStoreBackendImpl):

2012-11-30  Tim Horton  <timothy_horton@apple.com>

        (Simple)PDFPlugin: Support conversion of PostScript documents
        https://bugs.webkit.org/show_bug.cgi?id=103289
        <rdar://problem/10235708>

        Reviewed by Dan Bernstein.

        SimplePDFPlugin (and PDFPlugin) should support converting PostScript files
        to PDF before handing them off to their respective backends.

        * English.lproj/Localizable.strings:
        * WebCore.exp.in:
        * platform/LocalizedStrings.cpp:
        (WebCore::postScriptDocumentTypeDescription):
        * platform/LocalizedStrings.h:
        Add and export postScriptDocumentTypeDescription, for PostScript files.

2012-11-30  Justin Novosad  <junov@google.com>

        [Chromium] Animation updates fail when using a canvas as a CSS backround-image style with -webkit-canvas
        https://bugs.webkit.org/show_bug.cgi?id=103643

        Reviewed by Stephen White.

        CanvasRenderingContext2D::didDraw was not propagating the change
        notification to observers in the accelerated compositing case.
        Problem fixed by adding observer notifications.

        New manual test: animated-canvas-as-background.html

        * html/HTMLCanvasElement.cpp:
        (WebCore::HTMLCanvasElement::didDraw):
        The observer notification was factored out into a separate method
        so that it can be invoked directly for accelerated compositing.
        (WebCore):
        (WebCore::HTMLCanvasElement::notifyObserversCanvasChanged):
        * html/HTMLCanvasElement.h:
        (HTMLCanvasElement):
        * html/canvas/CanvasRenderingContext2D.cpp:
        (WebCore::CanvasRenderingContext2D::didDraw):
        Added observer notification call to trigger repainting of elements that
        use this canvas for their style.

2012-11-30  James Simonsen  <simonjam@chromium.org>

        Report CSS as initiator instead of elements, except body
        https://bugs.webkit.org/show_bug.cgi?id=103546

        Reviewed by Tony Gentilcore.

        The Resource Timing spec says the initiator should be "css" when the the load comes from a
        url() rule in a stylesheet. Separately, WebKit reports <body background> as a CSS load, we
        need to override that to match the spec.

        Tests: http/tests/w3c/webperf/submission/resource-timing

        * css/CSSCursorImageValue.cpp:
        (WebCore::CSSCursorImageValue::cachedImage):
        * css/CSSImageValue.cpp:
        (WebCore::CSSImageValue::cachedImage): By default, the initiator is "css".
        * css/CSSImageValue.h:
        (CSSImageValue):
        (WebCore::CSSImageValue::setInitiator): Allow users to manually override it (see body).
        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::loadPendingImage):
        * html/HTMLBodyElement.cpp:
        (WebCore::HTMLBodyElement::collectStyleForPresentationAttribute): Record "body" as the initiator.

2012-11-30  James Simonsen  <simonjam@chromium.org>

        Remember the CachedResourceRequest for preloads
        https://bugs.webkit.org/show_bug.cgi?id=102995

        Reviewed by Tony Gentilcore.

        Without this, the initiator is lost.

        Tests: http/tests/w3c/webperf/submission/resource-timing

        * loader/cache/CachedResourceLoader.cpp:
        (WebCore::CachedResourceLoader::requestResource):
        (WebCore::CachedResourceLoader::loadResource):
        (WebCore::CachedResourceLoader::preload):
        (WebCore::CachedResourceLoader::checkForPendingPreloads):
        (WebCore::CachedResourceLoader::requestPreload):
        (WebCore::CachedResourceLoader::isPreloaded):
        * loader/cache/CachedResourceLoader.h:
        (CachedResourceLoader):
        (PendingPreload):

2012-11-30  Michelangelo De Simone  <michelangelo@webkit.org>

        [CSS Shaders] Clamp input colors before blending
        https://bugs.webkit.org/show_bug.cgi?id=98962

        Reviewed by Dean Jackson.

        The result of css_ColorMatrix multiplication is now clamped in [0.0, 1.0]
        before the blending step.

        Relevant spec section is:
        http://dvcs.w3.org/hg/FXTF/raw-file/tip/filters/index.html#shader-processing-model

        Tests: css3/filters/custom/custom-filter-color-clamping-negative.html
               css3/filters/custom/custom-filter-color-clamping.html

        * platform/graphics/filters/CustomFilterValidatedProgram.cpp:
        (WebCore::CustomFilterValidatedProgram::rewriteMixFragmentShader): Added clamping
        code.

2012-11-30  Abhishek Arya  <inferno@chromium.org>

        Crash due to intruding float not removed after writing mode changed.
        https://bugs.webkit.org/show_bug.cgi?id=100149

        Reviewed by Levi Weintraub.

        When RenderView writing mode changes, make sure to mark all descendants
        with floats for layout.

        Test: fast/block/float/intruding-float-not-removed-writing-mode.xhtml

        * rendering/RenderBox.cpp:
        (WebCore::RenderBox::styleDidChange):

2012-11-30  Florin Malita  <fmalita@chromium.org>

        SVG pattern data deleted while in use
        https://bugs.webkit.org/show_bug.cgi?id=103415

        Reviewed by Dirk Schulze.

        Various calls in RenderSVGResourcePattern::applyResource() can trigger invalidations,
        which may end up deleting our current pattern data (via removeAllClientsFromCache).
        To avoid this, we should add the pattern data to the cache only after it is fully built.
        For clarity, the patch also refactors the pattern setup code into a separate method.

        Test: svg/custom/large-image-pattern-crash.html

        * rendering/svg/RenderSVGResourcePattern.cpp:
        (WebCore::RenderSVGResourcePattern::buildPattern):
        (WebCore::RenderSVGResourcePattern::applyResource):
        * rendering/svg/RenderSVGResourcePattern.h:
        (RenderSVGResourcePattern):

2012-11-30  Alexander Pavlov  <apavlov@chromium.org>

        Web Inspector: It's Sass, not SASS
        https://bugs.webkit.org/show_bug.cgi?id=103626

        Reviewed by Yury Semikhatsky.

        Change "SASS" to "Sass" in UI strings.

        * English.lproj/localizedStrings.js:
        * inspector/front-end/Settings.js:
        (WebInspector.ExperimentsSettings):
        * inspector/front-end/SettingsScreen.js:

2012-11-29  Tommy Widenflycht  <tommyw@google.com>

        Speech Recognition API: Update SpeechRecognitionEvent/Result to match the specification
        https://bugs.webkit.org/show_bug.cgi?id=103407

        Reviewed by Adam Barth.

        This patch does the following:
        o Adds results, and removing result on SpeechRecognitionEvent
        o Renaming SpeechRecognitionResult::final to isFinal
        o Moving emma to SpeechRecognitionEvent from SpeechRecognitionResult

        Existing tests updated to test the new API.

        * Modules/speech/SpeechRecognition.cpp:
        (WebCore::SpeechRecognition::start):
        (WebCore::SpeechRecognition::didReceiveResults):
        (WebCore):
        * Modules/speech/SpeechRecognition.h:
        (SpeechRecognition):
        * Modules/speech/SpeechRecognitionEvent.cpp:
        (WebCore::SpeechRecognitionEvent::createResult):
        (WebCore):
        (WebCore::SpeechRecognitionEvent::SpeechRecognitionEvent):
        (WebCore::SpeechRecognitionEvent::~SpeechRecognitionEvent):
        (WebCore::emmaQualifiedName):
        (WebCore::SpeechRecognitionEvent::emma):
        * Modules/speech/SpeechRecognitionEvent.h:
        (WebCore):
        (SpeechRecognitionEventInit):
        (SpeechRecognitionEvent):
        (WebCore::SpeechRecognitionEvent::resultIndex):
        (WebCore::SpeechRecognitionEvent::results):
        * Modules/speech/SpeechRecognitionEvent.idl:
        * Modules/speech/SpeechRecognitionResult.cpp:
        * Modules/speech/SpeechRecognitionResult.h:
        (WebCore::SpeechRecognitionResult::isFinal):
        (SpeechRecognitionResult):
        * Modules/speech/SpeechRecognitionResult.idl:
        * WebCore.gypi:
        * bindings/v8/custom/V8SpeechRecognitionEventCustom.cpp: Renamed from Source/WebCore/bindings/v8/custom/V8SpeechRecognitionResultCustom.cpp.
        (WebCore):
        (WebCore::V8SpeechRecognitionEvent::opaqueRootForGC):

2012-11-30  Simon Hausmann  <simon.hausmann@digia.com>, Pierre Rossi  <pierre.rossi@digia.com>

        [Qt] Separate Qt WebKit into Qt WebKit and Qt WebKit Widgets
        https://bugs.webkit.org/show_bug.cgi?id=99314

        Reviewed by Tor Arne Vestbø.

        This big change separates QtWebKit into QtWebKit and QtWebKitWidgets as
        shared libraries.

        It's a big refactoring that mostly involves moving WebCore dependent
        code into QtWebKit and accessing it through exported QWebFrameAdapter
        and QWebPageAdapter classes.

        * Target.pri:
        * platform/qt/QStyleFacade.h: Get rid of styleForPage function, not needed
        anymore.
        * platform/qt/QWebPageClient.h:
        (QWebPageClient): Remove a whole lot of cruft in favour of a simple GL enabling
        callback to select the GL texture mapper.
        (QWebPageClient::makeOpenGLContextCurrentIfAvailable):

2012-11-30  Simon Hausmann  <simon.hausmann@digia.com>

        Unreviewed, rolling out r136227.
        http://trac.webkit.org/changeset/136227

        Broke the Qt bots due to version mismatch

        * platform/graphics/gstreamer/PlatformVideoWindowQt.cpp:
        (FullScreenVideoWindow::FullScreenVideoWindow):
        (PlatformVideoWindow::PlatformVideoWindow):

2012-11-30  Samuel Rødal  <samuel.rodal@digia.com>

        [Qt] Fixed use of to-be-removed compatibility functions in QWindow.

        Reviewed by Simon Hausmann.

        * platform/graphics/gstreamer/PlatformVideoWindowQt.cpp:
        (FullScreenVideoWindow::FullScreenVideoWindow):
        (PlatformVideoWindow::PlatformVideoWindow):

2012-11-30  Arpita Bahuguna  <arpitabahuguna@gmail.com>

        Caret is painted horizontally in vertical writing mode when there are no visible text
        https://bugs.webkit.org/show_bug.cgi?id=102359

        Reviewed by Ryosuke Niwa.

        In the vertical writing mode the caret rect on an empty editable box or
        an empty line is rendered as per the horizontal writing mode.

        This changes though when any text is added; the caret is then displayed
        in accordance with the vertical writing mode.

        Test: editing/selection/caret-alignment-for-vertical-text.html

        * rendering/RenderBox.cpp:
        (WebCore::RenderBox::localCaretRect):
        * rendering/RenderBoxModelObject.cpp:
        (WebCore::RenderBoxModelObject::localCaretRectForEmptyElement):
        The caret rect should be transposed for the vertical writing mode. Its
        width and height values need to be interchanged for it to be oriented
        as per the vertical text.

2012-11-30  Sankeerth V S  <sankeerth.vs@samsung.com>

        Web Inspector: [Timeline] JS error when clicking in Memory Statistics view
        https://bugs.webkit.org/show_bug.cgi?id=103486

        Reviewed by Alexander Pavlov.

        The counter value can be null/undefined. Hence a check is needed
        before we access the "time" property on this counter object.

        No new tests required as UI related change.

        * inspector/front-end/MemoryStatistics.js:
        (WebInspector.MemoryStatistics.prototype._onClick):

2012-11-30  Kent Tamura  <tkent@chromium.org>

        Fix typos in DateTimeNumericFieldElement.cpp and DateTimeSymbolicFieldElement.cpp
        https://bugs.webkit.org/show_bug.cgi?id=103717

        Reviewed by Hajime Morita.

        * html/shadow/DateTimeNumericFieldElement.cpp:
        (WebCore::DateTimeNumericFieldElement::customStyleForRenderer):
        maximum, not maxium.
        * html/shadow/DateTimeSymbolicFieldElement.cpp:
        (WebCore::DateTimeSymbolicFieldElement::customStyleForRenderer): Ditto.

2012-11-30  Halton Huo  <halton.huo@intel.com>

        [EFL] libwebcore_efl.a fail to link when enable webgl
        https://bugs.webkit.org/show_bug.cgi?id=103610

        Reviewed by Gyuyoung Kim.

        libwebcore_efl.a should link to X11, Xcomposite and Xrender libraries when ENABLE_WEBGL is ON

        No new tests, no behavior change for layout tests.

        * PlatformEfl.cmake: Append ${X11_X11_LIB}, ${X11_Xcomposite_LIB} and ${X11_Xrender_LIB} to WebCore_LIBRARIES

2012-11-30  Tim Horton  <timothy_horton@apple.com>

        Unreviewed, fix the PDFPlugin build after http://trac.webkit.org/changeset/136205.

        * WebCore.xcodeproj/project.pbxproj:

2012-11-30  Mihai Maerean  <mmaerean@adobe.com>

        [CSSRegions] when WebKit uses V8, there should be a single variable to store if the CSS Regions feature is enabled
        https://bugs.webkit.org/show_bug.cgi?id=101192

        Reviewed by Hajime Morita.

        Removed the CSS Regions flag in Settings and switched to using the new flag I have added in RuntimeEnabledFeatures.

        Tests: No new tests because there is no functional change.

        * WebCore.exp.in:
        * WebCore.vcproj/copyForwardingHeaders.cmd:
        * WebCore.xcodeproj/project.pbxproj:
        * bindings/generic/RuntimeEnabledFeatures.cpp:
        (WebCore):
        * bindings/generic/RuntimeEnabledFeatures.h:
        (RuntimeEnabledFeatures):
        (WebCore::RuntimeEnabledFeatures::setCSSRegionsEnabled):
        (WebCore::RuntimeEnabledFeatures::cssRegionsEnabled):
        * dom/Document.cpp:
        (WebCore::Document::cssRegionsEnabled):
        * page/Settings.cpp:
        (WebCore::Settings::Settings):
        * page/Settings.h:
        (Settings):

2012-11-29  Martin Robinson  <mrobinson@igalia.com>

        [GTK] [WebKit2] WebKitWebViewBase creates a GL context for the redirected XComposite window crashing WebKit in Xvfb
        https://bugs.webkit.org/show_bug.cgi?id=103476

        Reviewed by Alejandro G. Castro.

        Allow creation of RedirectedXCompositeWindow in a mode which does not have a backing
        GLContext. For WebKit2 the GLContext is always in the WebProcess. Creating the GLContext
        in both processes can cause crashes when library is run in Xvfb.

        No new tests. This fixes a crash running tests on some systems.

        * platform/gtk/RedirectedXCompositeWindow.cpp:
        (WebCore::RedirectedXCompositeWindow::RedirectedXCompositeWindow):
        (WebCore::RedirectedXCompositeWindow::resize): Do not create the GLContext when
        in the new no-GLContext mode.
        (WebCore::RedirectedXCompositeWindow::context): ASSERT that we are not in
        no-GLContext mode.

2012-11-29  Keishi Hattori  <keishi@webkit.org>

        Better type ahead for DateTimeSymbolicFieldElement
        https://bugs.webkit.org/show_bug.cgi?id=103031

        Reviewed by Kent Tamura.

        This cuts out the type ahead code that will be used by HTMLSelectElement
        and DateTimeSymbolicFieldElement into a TypeAhead class. This will
        improve DateTimeSymbolicFieldElement type ahead which was first
        character match only, by adding cycling, prefix match and index number
        match.

        Added tests to month-multiple-fields-keyboard-events.html.

        * GNUmakefile.list.am: Added TypeAhead.{h,cpp}
        * Target.pri: Ditto.
        * WebCore.gypi: Ditto.
        * WebCore.vcproj/WebCore.vcproj: Ditto.
        * WebCore.xcodeproj/project.pbxproj: Ditto.
        * CMakeLists.txt: Ditto.
        * html/HTMLSelectElement.cpp:
        (WebCore):
        (WebCore::HTMLSelectElement::HTMLSelectElement):
        (WebCore::HTMLSelectElement::indexOfSelectedOption): Returns index of current selection.
        (WebCore::HTMLSelectElement::optionCount): Returns total number of options.
        (WebCore::HTMLSelectElement::optionAtIndex): Returns option at index.
        (WebCore::HTMLSelectElement::typeAheadFind): Use TypeAhead.
        * html/HTMLSelectElement.h:
        (HTMLSelectElement):
        * html/TypeAhead.cpp: Added.
        (WebCore):
        (WebCore::TypeAhead::TypeAhead):
        (WebCore::stripLeadingWhiteSpace): Moved from HTMLSelectElement.cpp.
        (WebCore::TypeAhead::handleEvent): Returns index for match.
        * html/TypeAhead.h: Added.
        (WebCore):
        (TypeAheadDataSource): Provide the data about the options that TypeAhead should match against.
        (TypeAhead):
        * html/shadow/DateTimeSymbolicFieldElement.cpp:
        (WebCore::DateTimeSymbolicFieldElement::DateTimeSymbolicFieldElement):
        (WebCore::DateTimeSymbolicFieldElement::handleKeyboardEvent):
        (WebCore::DateTimeSymbolicFieldElement::indexOfSelectedOption):
        (WebCore):
        (WebCore::DateTimeSymbolicFieldElement::optionCount):
        (WebCore::DateTimeSymbolicFieldElement::optionAtIndex):
        * html/shadow/DateTimeSymbolicFieldElement.h:
        (DateTimeSymbolicFieldElement):

2012-11-29  Rafael Weinstein  <rafaelw@chromium.org>

        [HTMLTemplateElement] Add feature flag
        https://bugs.webkit.org/show_bug.cgi?id=103694

        Reviewed by Adam Barth.

        This flag will guard the implementation of the HTMLTemplateElement.
        http://dvcs.w3.org/hg/webcomponents/raw-file/tip/spec/templates/index.html

        * Configurations/FeatureDefines.xcconfig:
        * GNUmakefile.features.am:

2012-11-29  Viatcheslav Ostapenko  <v.ostapenko@samsung.com>

        Fix typo in commit 136189
        https://bugs.webkit.org/show_bug.cgi?id=103706

        Reviewed by Kentaro Hara.

        Because of typo in commit 136189 blue color value was set twice for every pixel.

        * platform/image-decoders/jpeg/JPEGImageDecoder.cpp:
        (WebCore::setPixel):

2012-11-29  Elliott Sprehn  <esprehn@chromium.org>

        Node::isDescendantOf contains logic that duplicates isDocumentNode
        https://bugs.webkit.org/show_bug.cgi?id=103698

        Reviewed by Hajime Morita.

        Instead of checking for documents with node->document() == node just
        use node->isDocumentNode().

        * dom/Node.cpp:
        (WebCore::Node::isDescendantOf):

2012-11-29  Alexey Proskuryakov  <ap@apple.com>

        [WK2] Forward cookie jar calls to NetworkProcess
        https://bugs.webkit.org/show_bug.cgi?id=103457

        Reviewed by Darin Adler.

        * WebCore.exp.in:
        * WebCore.xcodeproj/project.pbxproj:
        PlatformCookieJar.h functions are now used in WebKit2.

        * loader/CookieJar.cpp:
        (WebCore::cookies):
        (WebCore::setCookies):
        (WebCore::cookiesEnabled):
        (WebCore::cookieRequestHeaderFieldValue):
        (WebCore::getRawCookies):
        (WebCore::deleteCookie):
        (WebCore::getHostnamesWithCookies):
        (WebCore::deleteCookiesForHostname):
        (WebCore::deleteAllCookies):
        Use a strategy instead of going to PlatformCookieJar directly.

        * platform/Cookie.h: (Cookie): Added a default constructor, so that Cookie could be
        sent over IPC.

        * platform/CookiesStrategy.h: Added functions for cookie jar.

2012-11-29  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r136167.
        http://trac.webkit.org/changeset/136167
        https://bugs.webkit.org/show_bug.cgi?id=103701

        Win debug build failure (Requested by zhenyao on #webkit).

        * platform/graphics/chromium/LazyDecodingPixelRef.cpp:
        (WebCore::LazyDecodingPixelRef::LazyDecodingPixelRef):
        * platform/graphics/chromium/LazyDecodingPixelRef.h:
        (LazyDecodingPixelRef):

2012-11-29  David Grogan  <dgrogan@chromium.org>

        IndexedDB: Propagate more leveldb errors to script
        https://bugs.webkit.org/show_bug.cgi?id=103580

        Reviewed by Tony Chang.

        LevelDBDatabase used a single return value to indicate both I/O problems
        and a missing key. Now an out variable is used to indicate if the
        requested key was found. The return value is used to report corruption
        or disk error.

        This is a small step toward propagating low level errors everywhere
        possible. So far only one scenario will newly cause script to receive
        an error: when leveldb has trouble looking for existing keys during an
        objectstore->add.

        * Modules/indexeddb/IDBBackingStore.cpp:
        (WebCore::getInt):
        (WebCore::getVarInt):
        (WebCore::getString):
        (WebCore::IDBBackingStore::getKeyGeneratorCurrentNumber):
        (WebCore::IDBBackingStore::maybeUpdateKeyGeneratorCurrentNumber):
        (WebCore::IDBBackingStore::keyExistsInObjectStore):
        * Modules/indexeddb/IDBBackingStore.h:
        (IDBBackingStore):
        * Modules/indexeddb/IDBObjectStoreBackendImpl.cpp:
        (WebCore::IDBObjectStoreBackendImpl::setIndexKeys):
        (WebCore::IDBObjectStoreBackendImpl::putInternal):
        (WebCore::IDBObjectStoreBackendImpl::generateKey):
        (WebCore::IDBObjectStoreBackendImpl::updateKeyGenerator):
        * Modules/indexeddb/IDBObjectStoreBackendImpl.h:
        (IDBObjectStoreBackendImpl):
        * platform/leveldb/LevelDBDatabase.cpp:
        (WebCore::LevelDBDatabase::safeGet):
        * platform/leveldb/LevelDBDatabase.h:
        (LevelDBDatabase):
        * platform/leveldb/LevelDBTransaction.cpp:
        (WebCore::LevelDBTransaction::safeGet):
        (WebCore):
        (WebCore::LevelDBTransaction::get):
        * platform/leveldb/LevelDBTransaction.h:
        (LevelDBTransaction):

2012-11-29  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r136171.
        http://trac.webkit.org/changeset/136171
        https://bugs.webkit.org/show_bug.cgi?id=103695

        Likely caused ReOpenedWithID and ReOpenedWithURL to fail in
        linux/chromeos (Requested by zhenyao on #webkit).

        * inspector/InspectorClient.h:
        (WebCore::InspectorClient::startMainThreadMonitoring):
        (WebCore::InspectorClient::stopMainThreadMonitoring):
        * inspector/InspectorController.cpp:
        * inspector/InspectorController.h:
        (InspectorController):
        * inspector/InspectorInstrumentation.cpp:
        (WebCore):
        (WebCore::InspectorInstrumentation::willProcessTaskImpl):
        (WebCore::InspectorInstrumentation::didProcessTaskImpl):
        * inspector/InspectorInstrumentation.h:
        (InspectorInstrumentation):
        (WebCore::InspectorInstrumentation::willProcessTask):
        (WebCore):
        (WebCore::InspectorInstrumentation::didProcessTask):
        * inspector/InspectorTimelineAgent.cpp:
        (WebCore::InspectorTimelineAgent::start):
        (WebCore::InspectorTimelineAgent::stop):

2012-11-29  Viatcheslav Ostapenko  <v.ostapenko@samsung.com>

        Optimization in image decoding.
        https://bugs.webkit.org/show_bug.cgi?id=88424

        Reviewed by Brent Fulgham.

        Reduce branching and multiplications in JPEG image decoding loops and functions.
        Code is moved to the template functions with scale and color space template parameters
        because they were reason of branches inside loops. With templated funtions compiler
        will generate separate instance of function for every set of parameters removing
        unreachable code in every condition where constant value is used.

        Rebase and update of original patch by Misha Tyutyunik <michael.tyuytunik@nokia.com> .

        Thanks to Noel Gordon for his help in cleaning up remaining issues.

        Covered by existing tests.

        * platform/image-decoders/jpeg/JPEGImageDecoder.cpp:
        (WebCore):
        (WebCore::setPixel):
        (WebCore::JPEGImageDecoder::outputScanlines):
        * platform/image-decoders/jpeg/JPEGImageDecoder.h:
        (JPEGImageDecoder):

2012-11-29  Kentaro Hara  <haraken@chromium.org>

        Unreviewed, rolling out r135862.
        http://trac.webkit.org/changeset/135862
        https://bugs.webkit.org/show_bug.cgi?id=103367

        We've been observing 'Fatal error in
        v8::V8::AddMessageListener()' in bots

        * bindings/v8/V8Binding.cpp:
        (WebCore::v8NonStringValueToWebCoreString):
        * bindings/v8/V8StringResource.cpp:
        (WebCore::int32ToWebCoreStringFast):
        (WebCore::int32ToWebCoreString):
        * bindings/v8/V8StringResource.h:
        (WebCore::V8StringResource::V8StringResource):
        (WebCore::V8StringResource::prepareBase):
        (WebCore::V8StringResource::setString):
        (V8StringResource):
        (WebCore::V8StringResource::toString):
        (WebCore::::prepare):

2012-11-29  Pavel Feldman  <pfeldman@chromium.org>

        Web Inspector: optimize repaint regions upon text editing
        https://bugs.webkit.org/show_bug.cgi?id=103674

        Reviewed by Vsevolod Vlasov.

        There is a lot happening that makes repaint area larger than it should be,
        namely unnecessary tabbed pane and navigator updates.

        * inspector/front-end/NavigatorView.js:
        (WebInspector.NavigatorView.prototype._updateScriptTitle):
        * inspector/front-end/TabbedPane.js:
        (WebInspector.TabbedPaneTab.prototype.set title):

2012-11-29  KyungTae Kim  <ktf.kim@samsung.com>

        Unused parameters on plugins/npapi.cpp
        https://bugs.webkit.org/show_bug.cgi?id=103676

        Reviewed by Kentaro Hara.

        Because 'instance' and 'menu' are not used when !PLATFORM(QT) || !defined(XP_MACOSX),
        use UNUSED_PARAM macro to fix build warning -Wunused-parameter

        * plugins/npapi.cpp:
        (NPN_PopUpContextMenu):

2012-11-29  Pablo Flouret  <pablof@motorola.com>

        REGRESSION(r134693): Compilation error on @supports grammar code
        https://bugs.webkit.org/show_bug.cgi?id=103678

        Reviewed by Tony Chang.

        Coming from https://bugs.webkit.org/show_bug.cgi?id=102295

        No new tests, compile fix.

        * css/CSSGrammar.y.in:

2012-11-29  Simon Fraser  <simon.fraser@apple.com>

        Avoid painting lots of small rects in WebLayer painting
        https://bugs.webkit.org/show_bug.cgi?id=103673

        Reviewed by Tim Horton.

        r109186 added code in drawLayerContents() to enumerate over the rects in
        the CALayer's dirty region, and paint them individually. This was done
        to help performance on the IE Maze Solver test.
        
        On large, complex pages like Facebook, the overhead of traversing the
        RenderLayer tree for painting is such that it's better to paint a single,
        or fewer rects rather than lots of little ones.
        
        So adopt a heuristic similar to that in DrawingArea, where if the
        combined area of the small rects is 75% or more of the combined rect,
        just paint the combined rect. Also paint the combined rect if there
        are more than 5 individual rects.
        
        I verified that this preserves the optimization for IE Maze Solver.

        * platform/graphics/mac/WebLayer.mm:
        (drawLayerContents):

2012-11-29  Eugene Klyuchnikov  <eustas@chromium.org>

        Web Inspector: Web Inspector: Make main-thread monitoring go through InspectorController.
        https://bugs.webkit.org/show_bug.cgi?id=103550

        Reviewed by Pavel Feldman.

        InspectorInstrumentation was a wrong path.

        * inspector/InspectorClient.h: Remove start/stop methods.
        * inspector/InspectorController.cpp:
        Dispatch main thread activity notifications. 
        * inspector/InspectorController.h: Ditto.
        * inspector/InspectorInstrumentation.cpp: Remove dispatching.
        * inspector/InspectorInstrumentation.h: Ditto.
        * inspector/InspectorTimelineAgent.cpp:
        Do not subscribe for notifications explicitly.

2012-11-29  Adam Barth  <abarth@webkit.org>

        [V8] DOM callbacks shouldn't reimplement ScopedPersistent they should use it
        https://bugs.webkit.org/show_bug.cgi?id=103662

        Reviewed by Eric Seidel.

        This patch replaces yet another instance of the ScopedPersistent
        pattern with ScopedPersistent.

        * bindings/scripts/CodeGeneratorV8.pm:
        (GenerateCallbackHeader):
        (GenerateCallbackImplementation):
        * bindings/v8/custom/V8CustomSQLStatementErrorCallback.cpp:
        (WebCore::V8SQLStatementErrorCallback::handleEvent):
        * bindings/v8/custom/V8MutationCallbackCustom.cpp:
        (WebCore::V8MutationCallback::handleEvent):

2012-11-29  Min Qin  <qinmin@chromium.org>

        Make LazyDecodingPixelRef inherit from skia::LazyPixelRef so that cc thread can access it
        https://bugs.webkit.org/show_bug.cgi?id=103555

        Reviewed by Stephen White.

        Expose LazyDecodingPixelRef to the cc thread by inheriting from skia::LazyPixelRef.
        No test added for now as impl side paiting is still WIP.

        * platform/graphics/chromium/LazyDecodingPixelRef.cpp:
        (WebCore::LazyDecodingPixelRef::LazyDecodingPixelRef):
        (WebCore::LazyDecodingPixelRef::PrepareToDecode):
        (WebCore):
        (WebCore::LazyDecodingPixelRef::Decode):
        * platform/graphics/chromium/LazyDecodingPixelRef.h:
        (LazyDecodingPixelRef):

2012-11-29  Julien Chaffraix  <jchaffraix@webkit.org>

        Unreviewed build fix.

        * WebCore.gypi:
        The new file is GridTrackSize.h not GridTrackSizes.h. For some reason, the
        EWS didn't complain.

2012-11-29  John Knottenbelt  <jknotten@chromium.org>

        Use GeolocationController's last geoposition as cached position.
        https://bugs.webkit.org/show_bug.cgi?id=103540

        Reviewed by Benjamin Poulain.

        The page's GeolocationController mediates access to the
        GeolocationClient for multiple frames' Geolocation instances. This
        patch changes the position cache to be on the GeolocationController
        rather than on the Geolocation instance.

        This fixes a bug where if one frame has has received a fresh
        position, then a request for a cached position from a second frame
        does not succeed because the Geolocation instance in the second
        frame's position cache hasn't received the position update that
        went to the first frame.

        Test: fast/dom/Geolocation/cached-position-iframe.html

        * Modules/geolocation/Geolocation.cpp:
        (WebCore::Geolocation::makeCachedPositionCallbacks):
        (WebCore::Geolocation::haveSuitableCachedPosition):
        (WebCore::Geolocation::positionChanged):
        * Modules/geolocation/Geolocation.h:
        * Modules/geolocation/GeolocationController.h:
        (GeolocationController):

2012-11-29  Alexei Filippov  <alph@chromium.org>

        Web Inspector: Allow sorting in NMI snapshot grid view
        https://bugs.webkit.org/show_bug.cgi?id=102955

        Reviewed by Yury Semikhatsky.

        * English.lproj/localizedStrings.js:
        * inspector/front-end/NativeMemorySnapshotView.js:
        (WebInspector.NativeSnapshotDataGrid.prototype.sortingChanged):
        (WebInspector.NativeSnapshotDataGrid.prototype._sortingFunction):
        (WebInspector.NativeSnapshotNode):
        (WebInspector.NativeSnapshotNode.prototype._storeState):
        (WebInspector.NativeSnapshotNode.prototype._restoreState):
        (WebInspector.NativeSnapshotNode.prototype.uid):
        (WebInspector.NativeSnapshotNode.prototype._createSizeCell):

2012-11-29  Martin Robinson  <mrobinson@igalia.com>

        [GTK] [WebKit2] Embed the HTTP authentication dialog into the WebView
        https://bugs.webkit.org/show_bug.cgi?id=103277

        Reviewed by Carlos Garcia Campos.

        Refactor the WebCore authentication dialog so that it can be reused for the WebKit2
        embedded authentication dialog. The main purpose of this refactor is so that the
        dialog does not rely on GtkDialog to add the action buttons to the dialog itself.
        This also simplifies the structure of the dialog, using the GtkTable or GtkGrid to
        contain more of the widget elements, greatly simplifying this code. We also expose
        a new constructor that does not create the parent GtkDialog -- so that WebKit2
        can embed the dialog directly into the WebView.

        No new tests. This shouldn't change behavior, only slightly the look of the authentication
        dialog.

        * platform/gtk/GtkAuthenticationDialog.cpp:
        (WebCore::GtkAuthenticationDialog::GtkAuthenticationDialog): Added this new constructor
        which does not add the dialog contents to a GtkDialog.
        (WebCore::packTwoColumnLayoutInBox): Added this generic method for creating a two column
        layout in the style the dialog box needs (for both GTK+ 2.x and GTK+ 3.x).
        (WebCore::createDialogLabel): Added this helper.
        (WebCore::createDialogEntry): ditto.
        (WebCore::GtkAuthenticationDialog::createContentsInContainer): Added this method which
        can be used by subclasses to add the guts of the dialog to the parent container.
        (WebCore::GtkAuthenticationDialog::show): Added some focus/default handling code that
        GtkDialog was calling before.
        (WebCore::GtkAuthenticationDialog::buttonClickedCallback): Added a button clicked handler.
        Before GtkDialog handled this.
        * platform/gtk/GtkAuthenticationDialog.h: Updated methods to reflect new functionality.
        (WebCore::GtkAuthenticationDialog::~GtkAuthenticationDialog): Inline the default constructor.

2012-11-29  Beth Dakin  <bdakin@apple.com>

        https://bugs.webkit.org/show_bug.cgi?id=103577
        TiledDrawingArea should recycle tiles
        -and corresponding-
        <rdar://problem/12714586>

        Reviewed by Simon Fraser.

        New class LayerPool will keep a list of layers to reuse so that 
        we can avoid creating and destroying so many layer.

        When removing layers, add them to the LayerPool
        * platform/graphics/ca/mac/TileCache.mm:
        (WebCore::TileCache::revalidateTiles):

        Before creating a new layer, try to get one of the appropriate size 
        from the LayerPool.
        (WebCore::TileCache::createTileLayer):

        New class.
        * WebCore.xcodeproj/project.pbxproj:
        * platform/graphics/ca/mac/LayerPool.h: Added.
        (WebCore):
        (LayerPool):
        (WebCore::LayerPool::capacity):
        (WebCore::LayerPool::canReuseLayerWithSize):
        * platform/graphics/ca/mac/LayerPool.mm: Added.
        (WebCore):
        (WebCore::LayerPool:: LayerPool):
        (WebCore::LayerPool::sharedPool):
        (WebCore::LayerPool::bytesBackingLayerWithPixelSize):
        (WebCore::LayerPool::listOfLayersWithSize):
        (WebCore::LayerPool::addLayer):
        (WebCore::LayerPool::takeLayerWithSize):
        (WebCore::LayerPool::decayedCapacity):
        (WebCore::LayerPool::schedulePrune):
        (WebCore::LayerPool::prune):
        (WebCore::LayerPool::drain):

        If we're under memory pressure, drain the LayerPool
        * platform/mac/MemoryPressureHandlerMac.mm:
        (WebCore::MemoryPressureHandler::releaseMemory):

2012-11-29  Julien Chaffraix  <jchaffraix@webkit.org>

        [CSS Grid Layout] track sizing functions should have their own type
        https://bugs.webkit.org/show_bug.cgi?id=103343

        Reviewed by Tony Chang.

        The current code uses a Length to represent the track sizing function. This is
        fine as we only parse <length> | <percentage> but in order to support minmax
        sizing, we have to store 2 Lengths. We could go with a pair but that would make
        the code not very readable so this change introduces GridTrackSize.

        Refactoring, covered by existing tests.

        * GNUmakefile.list.am:
        * Target.pri:
        * WebCore.gypi:
        * WebCore.vcproj/WebCore.vcproj:
        * WebCore.xcodeproj/project.pbxproj:
        Added GridTrackSize.h to all our build systems.

        * css/CSSComputedStyleDeclaration.cpp:
        (WebCore::valueForGridTrackBreadth):
        (WebCore::valueForGridTrackList):
        * css/StyleResolver.cpp:
        (WebCore::createGridTrackBreadth):
        (WebCore::createGridTrackList):
        (WebCore::StyleResolver::applyProperty):
        * rendering/RenderGrid.cpp:
        (WebCore::RenderGrid::computePreferredLogicalWidths):
        (WebCore::RenderGrid::computedUsedBreadthOfGridTracks):
        * rendering/style/RenderStyle.h:
        Updated the above call sites to use GridTrackSize. While
        touching them, changed the code to use an empty Vector to represent
        'none' instead of Length(Undefined).

        * rendering/style/StyleGridData.h:
        Updated #include, removed a comment as it would have gone stale after
        adding more grammar support and added a FIXME to rename some variables.

        * rendering/RenderGrid.cpp:
        (WebCore::RenderGrid::layoutGridItems):
        Implemented a work-around to avoid crashing due to implicit columns / rows.

        * rendering/style/GridTrackSize.h: Added.
        (WebCore::GridTrackSize::GridTrackSize):
        (WebCore::GridTrackSize::length):
        (WebCore::GridTrackSize::setLength):
        (WebCore::GridTrackSize::type):
        (WebCore::GridTrackSize::operator==):
        New class, it now only wraps a single Length.

2012-11-29  Helder Correia  <helder.correia@nokia.com>

        Typo in Color creation function name
        https://bugs.webkit.org/show_bug.cgi?id=103464

        Reviewed by Alexey Proskuryakov.

        Renaming createUnCheked() as createUnchecked().

        No new tests.

        * platform/graphics/Color.cpp:
        (WebCore::colorFromPremultipliedARGB):
        * platform/graphics/Color.h:
        (WebCore::Color::createUnchecked):

2012-11-29  Otto Derek Cheung  <otcheung@rim.com>

        [BlackBerry] Cookies in private mode should not have access to public cookies
        https://bugs.webkit.org/show_bug.cgi?id=103649

        Reviewed by Rob Buis.

        PR 253983

        When CookieManager switches back from public to private mode,
        we will clear the cookie tree so the browser won't have access
        to the public cookies.

        Tested using browser.swlab.rim.net cookie tests and the steps in
        the PR.

        * platform/blackberry/CookieManager.cpp:
        (WebCore::CookieManager::setPrivateMode):

2012-11-29  Brent Fulgham  <bfulgham@gmail.com>

        Be consistent in handling of frameAtIndex (and related) returns.
        https://bugs.webkit.org/show_bug.cgi?id=103207

        Reviewed by David Hyatt.

        Under various conditions, frameAtIndex (and therefore,
        nativeImageForCurrentFrame) returns null. A series of bugs over
        the years has ensured null returns are handled in some cases,
        but there are a handful of remaining cases where this is still a
        problem. 

        No new tests, as these low-level functions are covered by
        numerous existing test cases.

2012-11-29  David Hyatt  <hyatt@apple.com>

        [New Multicolumn] Add minimum column height tracking and forced break tracking to column sets.
        https://bugs.webkit.org/show_bug.cgi?id=103657

        Reviewed by Simon Fraser.

        * rendering/RenderMultiColumnSet.cpp:
        (WebCore::RenderMultiColumnSet::RenderMultiColumnSet):
        * rendering/RenderMultiColumnSet.h:
        (WebCore::RenderMultiColumnSet::updateMinimumColumnHeight):
        (WebCore::RenderMultiColumnSet::minimumColumnHeight):
        (RenderMultiColumnSet):
        (WebCore::RenderMultiColumnSet::forcedBreaksCount):
        (WebCore::RenderMultiColumnSet::forcedBreakOffset):
        (WebCore::RenderMultiColumnSet::maximumDistanceBetweenForcedBreaks):
        (WebCore::RenderMultiColumnSet::clearForcedBreaks):
        (WebCore::RenderMultiColumnSet::addForcedBreak):

2012-11-29  Pavel Feldman  <pfeldman@chromium.org>

        Web Inspector: introduce fast case for within-chunk edit
        https://bugs.webkit.org/show_bug.cgi?id=103545

        Reviewed by Vsevolod Vlasov.

        Special-casing edits within the chunk for faster operation.

        * inspector/front-end/DOMExtension.js:
        (removeSubsequentNodes):
        * inspector/front-end/DefaultTextEditor.js:
        (WebInspector.TextEditorMainPanel.prototype._updateChunksForRanges):

2012-11-29  Pavel Feldman  <pfeldman@chromium.org>

        Web Inspector: Console: hovering node wrappers in object tree should highlight them on the page
        https://bugs.webkit.org/show_bug.cgi?id=101150

        Reviewed by Vsevolod Vlasov.

        - Introduced a way to highlight nodes by object id in addition to node id.
        - Decorated nodes in the object tree outline and added on-hover highlighting.

        * inspector/Inspector.json:
        * inspector/InspectorDOMAgent.cpp:
        (WebCore::InspectorDOMAgent::highlightNode):
        * inspector/InspectorDOMAgent.h:
        (InspectorDOMAgent):
        * inspector/front-end/ConsoleMessage.js:
        (WebInspector.ConsoleMessageImpl.prototype._appendPropertyPreview):
        * inspector/front-end/DOMAgent.js:
        (WebInspector.DOMAgent.prototype.highlightDOMNode):
        * inspector/front-end/DOMPresentationUtils.js:
        (WebInspector.DOMPresentationUtils.createSpansForNodeTitle):
        * inspector/front-end/ObjectPropertiesSection.js:
        (WebInspector.ObjectPropertyTreeElement.prototype.update):
        (WebInspector.ObjectPropertyTreeElement.prototype._mouseMove):
        (WebInspector.ObjectPropertyTreeElement.prototype._mouseOut):
        * inspector/front-end/RemoteObject.js:
        (WebInspector.RemoteObject.prototype.highlightAsDOMNode):
        (WebInspector.RemoteObject.prototype.hideDOMNodeHighlight):
        * inspector/front-end/TestController.js:
        * inspector/front-end/externs.js:
        * inspector/front-end/inspector.css:
        (.console-formatted-node:hover):
        * inspector/front-end/utilities.js:

2012-11-29  Dan Bernstein  <mitz@apple.com>

        <rdar://problem/12771885> Support ruby-position: {before, after}
        https://bugs.webkit.org/show_bug.cgi?id=103569

        Reviewed by Anders Carlsson.

        Specified in <http://www.w3.org/TR/2011/WD-css3-ruby-20110630/#rubypos>, the ruby-position
        property takes four values: before, after, inter-character, and inline. This change adds
        support for the values before and after.

        Test: fast/ruby/position-after.html

        * css/CSSComputedStyleDeclaration.cpp:
        (WebCore::CSSComputedStyleDeclaration::getPropertyCSSValue): Handle ruby-position.
        * css/CSSParser.cpp:
        (WebCore::isValidKeywordPropertyAndValue): Accept before and after as valid values for
        ruby-position.
        (WebCore::isKeywordPropertyID): Added ruby-position to the list of properties with keyword
        values.
        (WebCore::CSSParser::parseValue): Added ruby-position to the switch statement.
        * css/CSSPrimitiveValueMappings.h:
        (WebCore::CSSPrimitiveValue::CSSPrimitiveValue): Added mapping from RubyPosition.
        (WebCore::CSSPrimitiveValue::operator RubyPosition): Added mapping from CSSPrimitiveValue.
        * css/CSSProperty.cpp:
        (WebCore::CSSProperty::isInheritedProperty): Added ruby-position as an inherited property.
        * css/CSSPropertyNames.in: Added -webkit-ruby-position.
        * css/CSSValueKeywords.in: Added after and before.
        * css/StyleBuilder.cpp:
        (WebCore::StyleBuilder::StyleBuilder): Added a handler for ruby-position.
        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::applyProperty): Added ruby-position.
        * rendering/InlineFlowBox.cpp:
        (WebCore::InlineFlowBox::placeBoxesInBlockDirection): Changed to choose which of
        hasAnnotationsBefore and hasAnnotationsAfter to set based on ruby position.
        (WebCore::InlineFlowBox::computeOverAnnotationAdjustment): Changed to adjust only for
        ruby positioned before the base.
        (WebCore::InlineFlowBox::computeUnderAnnotationAdjustment): Added adjustment for ruby
        positioned after the base.
        * rendering/RenderRubyRun.cpp:
        (WebCore::RenderRubyRun::layout): Account for ruby-position when positioning the ruby text
        relative to the base.
        * rendering/style/RenderStyle.cpp:
        (WebCore::RenderStyle::diff): Made a ruby-position difference a layout difference.
        * rendering/style/RenderStyle.h: Added rubyPosition(), setRubyPosition(), and 
        initialRubyPosition().
        * rendering/style/RenderStyleConstants.h: Added the RubyPosition enum.
        * rendering/style/StyleRareInheritedData.cpp:
        (WebCore::StyleRareInheritedData::StyleRareInheritedData): Added initialized for
        m_rubyPosition. Added copying the value of this member to the copy constructor.
        (WebCore::StyleRareInheritedData::operator==): Added comparison of m_rubyPosition.
        * rendering/style/StyleRareInheritedData.h:
        (StyleRareInheritedData): Added m_rubyPosition member variable.

2012-11-29  Tiancheng Jiang  <tijiang@rim.com>

        [BlackBerry] Update BB10 form theme.
        https://bugs.webkit.org/show_bug.cgi?id=100760

        Reviewed by Rob Buis.

        Internally Reviewed by Eli Fidler.
        Set text color after buttons are pressed.

        * css/themeBlackBerry.css:
        (input[type="button"]:active, input[type="submit"]:active, input[type="reset"]:active, input[type="file"]:active::-webkit-file-upload-button, button:active):
        (select:active):
        * platform/blackberry/RenderThemeBlackBerry.cpp:
        (WebCore):
        (WebCore::RenderThemeBlackBerry::paintButton):
        (WebCore::RenderThemeBlackBerry::paintMenuList):

2012-11-29  Zeno Albisser  <zeno@webkit.org>

        GraphicsSurfaceGLX: remove redundant parameter from resolveGLMethods.
        https://bugs.webkit.org/show_bug.cgi?id=103636

        Reviewed by Kenneth Rohde Christiansen.

        * platform/graphics/surfaces/qt/GraphicsSurfaceGLX.cpp:
        (WebCore::resolveGLMethods):
        (WebCore::GraphicsSurface::platformCreate):
        (WebCore::GraphicsSurface::platformImport):

2012-11-29  Mike West  <mkwst@chromium.org>

        Typo in 'autofocus' sandboxing error message.
        https://bugs.webkit.org/show_bug.cgi?id=103616

        Reviewed by Jochen Eisinger.

        The sandbox attribute name is 'allow-scripts', not 'allow-script'. :(

        * html/HTMLFormControlElement.cpp:
        (WebCore::shouldAutofocus):

2012-11-29  Hajime Morrita  <morrita@google.com>

        HTMLMediaElement's .textTracks property does not reflect <track> element
        https://bugs.webkit.org/show_bug.cgi?id=103420

        Reviewed by Eric Carlson.

        There were some assumptions that <track> elements are valid only
        if the parent <media> is in document. This change relaxes this
        assumption so that <track> is valid when it has <media> as a
        parent regardless whether the <media> is in the document or not.

        HTMLMediaElement::didAddTrack and didRemoveTrack are now called
        when the <track> is inserted to or removed from the parent <media>
        element.

        Test: media/track/track-node-add-remove.html

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::didRemoveTrack):
        Renamed from willRemoveTrack() to reflect the timing. This was once called from
        Node::willRemove(), which was removed a while ago.
        * html/HTMLMediaElement.h:
        (HTMLMediaElement):
        * html/HTMLTrackElement.cpp:
        (WebCore::HTMLTrackElement::insertedInto):
        The old code notified parent <media> only if the subtree became a part of the document.
        Now it notifies the <media> when this <track> becomes a child of that <media>.

        (WebCore::HTMLTrackElement::removedFrom):
        The old code notifies the parent <media> every time as long as the parent is available.
        Now it notifies the <media> only if this <track> is removed from the parent <media>.
        This matches how corresponding notification is done in insertedInto().

        * html/track/LoadableTextTrack.cpp:
        (WebCore::LoadableTextTrack::trackElementIndex):

2012-11-29  Florin Malita  <fmalita@chromium.org>

        [Skia] Add missing OpaqueRegionSkia notifier calls
        https://bugs.webkit.org/show_bug.cgi?id=102824

        Reviewed by Stephen White.

        http://trac.webkit.org/changeset/135390 exposed some canvas draw clients which are not
        updating the opaque region tracker. This patch adds the required notifier calls.

        No new tests: platform unit tests added.

        * platform/graphics/skia/OpaqueRegionSkia.h:
        (OpaqueRegionSkia):
        * platform/graphics/skia/PlatformContextSkia.h:
        (WebCore::PlatformContextSkia::writePixels):
        (WebCore::PlatformContextSkia::drawBitmap):
        (WebCore::PlatformContextSkia::drawBitmapRect):
        (WebCore::PlatformContextSkia::drawIRect):
        (WebCore::PlatformContextSkia::drawPosText):
        (WebCore::PlatformContextSkia::drawPosTextH):
        (WebCore::PlatformContextSkia::drawTextOnPath):

2012-11-29  Andy Shaw  <andy.shaw@digia.com>

        [Qt] Implement support for Cocoa based NPAPI plugins on Mac
        https://bugs.webkit.org/show_bug.cgi?id=72358

        Reviewed by Simon Hausmann.

        With later versions of Flash they are only Cocoa based which meant that it was not possible to use Flash in a QtWebKit browser.
        This makes it possible to also use 64bit based plugins too.  

        * plugins/PluginPackage.cpp:
        (WebCore::PluginPackage::initializeBrowserFuncs):
        (WebCore):
        * plugins/PluginQuirkSet.h:
        * plugins/PluginView.cpp:
        (WebCore::PluginView::handleEvent):
        (WebCore::PluginView::PluginView):
        (WebCore):
        (WebCore::PluginView::userAgent):
        * plugins/PluginView.h:
        (WebCore):
        (PluginView):
        * plugins/mac/PluginPackageMac.cpp:
        (WebCore::PluginPackage::determineQuirks):
        (WebCore::PluginPackage::fetchInfo):
        * plugins/mac/PluginViewMac.mm:
        (WebCore):
        (WebCore::initializeNPCocoaEvent):
        (WebCore::getModifiers):
        (WebCore::PluginView::platformStart):
        * plugins/npapi.cpp:
        (NPN_PopUpContextMenu):
        * plugins/npapi.h:

2012-11-29  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r136111.
        http://trac.webkit.org/changeset/136111
        https://bugs.webkit.org/show_bug.cgi?id=103620

        Broke compilation on Mac (unused private field m_matchMode)
        (Requested by apavlov on #webkit).

        * CMakeLists.txt:
        * GNUmakefile.list.am:
        * Target.pri:
        * WebCore.gypi:
        * WebCore.vcproj/WebCore.vcproj:
        * WebCore.xcodeproj/project.pbxproj:
        * html/HTMLSelectElement.cpp:
        (WebCore):
        (WebCore::HTMLSelectElement::HTMLSelectElement):
        (WebCore::stripLeadingWhiteSpace):
        (WebCore::HTMLSelectElement::typeAheadFind):
        * html/HTMLSelectElement.h:
        (HTMLSelectElement):
        * html/TypeAhead.cpp: Removed.
        * html/TypeAhead.h: Removed.
        * html/shadow/DateTimeSymbolicFieldElement.cpp:
        (WebCore::DateTimeSymbolicFieldElement::DateTimeSymbolicFieldElement):
        (WebCore::DateTimeSymbolicFieldElement::handleKeyboardEvent):
        * html/shadow/DateTimeSymbolicFieldElement.h:
        (DateTimeSymbolicFieldElement):

2012-11-29  Keishi Hattori  <keishi@webkit.org>

        Better type ahead for DateTimeSymbolicFieldElement
        https://bugs.webkit.org/show_bug.cgi?id=103031

        Reviewed by Kent Tamura.

        This cuts out the type ahead code that will be used by HTMLSelectElement
        and DateTimeSymbolicFieldElement into a TypeAhead class. This will
        improve DateTimeSymbolicFieldElement type ahead which was first
        character match only, by adding cycling, prefix match and index number
        match.

        Added tests to month-multiple-fields-keyboard-events.html.

        * GNUmakefile.list.am: Added TypeAhead.{h,cpp}
        * Target.pri: Ditto.
        * WebCore.gypi: Ditto.
        * WebCore.vcproj/WebCore.vcproj: Ditto.
        * WebCore.xcodeproj/project.pbxproj: Ditto.
        * CMakeLists.txt: Ditto.
        * html/HTMLSelectElement.cpp:
        (WebCore):
        (WebCore::HTMLSelectElement::HTMLSelectElement):
        (WebCore::HTMLSelectElement::indexOfSelectedOption): Returns index of current selection.
        (WebCore::HTMLSelectElement::optionCount): Returns total number of options.
        (WebCore::HTMLSelectElement::optionAtIndex): Returns option at index.
        (WebCore::HTMLSelectElement::typeAheadFind): Use TypeAhead.
        * html/HTMLSelectElement.h:
        (HTMLSelectElement):
        * html/TypeAhead.cpp: Added.
        (WebCore):
        (WebCore::TypeAhead::TypeAhead):
        (WebCore::stripLeadingWhiteSpace): Moved from HTMLSelectElement.cpp.
        (WebCore::TypeAhead::handleEvent): Returns index for match.
        * html/TypeAhead.h: Added.
        (WebCore):
        (TypeAheadDataSource): Provide the data about the options that TypeAhead should match against.
        (TypeAhead):
        * html/shadow/DateTimeSymbolicFieldElement.cpp:
        (WebCore::DateTimeSymbolicFieldElement::DateTimeSymbolicFieldElement):
        (WebCore::DateTimeSymbolicFieldElement::handleKeyboardEvent):
        (WebCore::DateTimeSymbolicFieldElement::indexOfSelectedOption):
        (WebCore):
        (WebCore::DateTimeSymbolicFieldElement::optionCount):
        (WebCore::DateTimeSymbolicFieldElement::optionAtIndex):
        * html/shadow/DateTimeSymbolicFieldElement.h:
        (DateTimeSymbolicFieldElement):

2012-11-29  Andrei Bucur  <abucur@adobe.com>

        [CSS Regions] Fix content node renderers ordering inside the named flow thread
        https://bugs.webkit.org/show_bug.cgi?id=103501

        Reviewed by David Hyatt.

        This patch fixes two issues with how content nodes renderers are added to a named flow thread.
        The first issue was about determining the insertion position of a renderer inside the children list of a named flow thread. Before this patch, the
        insertion point was based on both the DOM ordering of the elements and insertion order of previous renderers.
        The patch fixes this and makes the renderer position just a function of the DOM ordering of elements.
        The second issue appeared when next/previousRenderer methods were skipping nodes because they had the flow-into property as a side effect
        of copying the style of the parent element (e.g. Text nodes). The patch ensures the skipped nodes are also elements.

        Tests: fast/regions/named-flow-content-order-1.html
               fast/regions/named-flow-content-order-2.html
               fast/regions/named-flow-content-order-3.html

        * dom/NodeRenderingContext.cpp:
        (WebCore::NodeRenderingContext::nextRenderer): Skip only elements.
        (WebCore::NodeRenderingContext::previousRenderer): Skip only elements.
        * rendering/RenderNamedFlowThread.cpp:
        (WebCore::RenderNamedFlowThread::addFlowChild): Insert the renderer in the list based on the DOM position of the owner element.
        * rendering/RenderNamedFlowThread.h:
        (RenderNamedFlowThread):
        * rendering/RenderObject.cpp:
        (WebCore::RenderObject::renderNamedFlowThreadWrapper): Rename to eliminate the confusion with enclosingRenderFlowThread.
        (WebCore::RenderObject::insertedIntoTree):
        (WebCore::RenderObject::willBeRemovedFromTree):
        * rendering/RenderObject.h:
        (RenderObject):

2012-11-28  Mike West  <mkwst@chromium.org>

        Add a test to ensure that 'seamless' iframes do not inherit contenteditable.
        https://bugs.webkit.org/show_bug.cgi?id=95890

        Reviewed by Ojan Vafai.

        We don't currently support inheriting contenteditable into a seamless
        frame. http://html5.org/tools/web-apps-tracker?from=7318&to=7319
        brought the spec in line with WebKit's behavior (ha!). This patch
        defends the behavior by adding a test, and removes a FIXME comment
        now that the question is settled.

        It also exposes a brand new bug: https://bugs.webkit.org/show_bug.cgi?id=103539
        How exciting.

        Test: fast/frames/seamless/seamless-contenteditable-not-inherited.html

        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::styleForDocument):
            No functional change, just dropping a FIXME comment.

2012-11-28  Mike West  <mkwst@chromium.org>

        Web Inspector: Console message's anchor element should be trimmed for readability.
        https://bugs.webkit.org/show_bug.cgi?id=100095

        Reviewed by Pavel Feldman.

        We're currently trimming URLs that go through
        'WebInspector.linkifyURLAsNode' down to 150 characters total. Not all
        URLs go that path, however. We were missing a few cases that dropped
        back to the default Linkifier (which especially showed up for "Live"
        anchor elements).

        This patch ensures that anything using WebInspector.Linkifier is also
        trimmed by default. It adds a new constant to do so in order to avoid
        magic numbers in the code.

        Test: http/tests/inspector/network/script-as-text-loading-long-url.html

        * inspector/front-end/Linkifier.js:
        (WebInspector.Linkifier):
            Pass the max length into the default formatter that's created and
            stored when creating a 'WebInspector.Linkifier' object.
        * inspector/front-end/ResourceUtils.js:
        (WebInspector.linkifyURLAsNode):
            Use the new maxlength constant rather than hard-coding 150.

2012-11-28  Kentaro Hara  <haraken@chromium.org>

        Unreviewed. Rebaselined run-bindings-tests.

        * bindings/scripts/test/V8/V8TestNode.h:
        (WebCore::toV8Fast):

2012-11-28  Shinya Kawanaka  <shinyak@chromium.org>

        [Shadow] ShadowRoot should cache InsertionPointList.
        https://bugs.webkit.org/show_bug.cgi?id=103212

        Reviewed by Hajime Morita.

        When distributing or invalidating distribution, we used to traverse all descendent nodes in Shadow DOM.
        If ShadowRoot has a InsertionPoint list, we can just traverse the list.

        No new tests, should be covered by existing tests.

        * dom/ShadowRoot.cpp:
        (WebCore::ShadowRoot::insertionPointList):
        (WebCore):
        * dom/ShadowRoot.h:
        (ShadowRoot):
        * html/shadow/ContentDistributor.cpp:
        (WebCore::ShadowRootContentDistributionData::ShadowRootContentDistributionData):
        (WebCore::ShadowRootContentDistributionData::invalidateInsertionPointList):
        (WebCore):
        (WebCore::ShadowRootContentDistributionData::ensureInsertionPointList): Creates InsertionPoint list
        if it's not created and return it.
        (WebCore::ContentDistributor::distribute): Traverse InsertionPointList instead of all descendent nodes in Shadow DOM.
        (WebCore::ContentDistributor::invalidate): ditto.
        * html/shadow/ContentDistributor.h:
        (WebCore::ShadowRootContentDistributionData::incrementNumberOfShadowElementChildren): Invalidate InsertionPointList cache.
        (WebCore::ShadowRootContentDistributionData::decrementNumberOfShadowElementChildren): ditto.
        (WebCore::ShadowRootContentDistributionData::incrementNumberOfContentElementChildren): ditto.
        (WebCore::ShadowRootContentDistributionData::decrementNumberOfContentElementChildren): ditto.
        (ShadowRootContentDistributionData):

2012-11-28  Michael Pruett  <michael@68k.org>

        IndexedDB: Remove duplicate toWireString() and createFromWire() methods in JSC SerializedScriptValue
        https://bugs.webkit.org/show_bug.cgi?id=103554

        Reviewed by Kentaro Hara.

        In r135022, duplicate createFromWire() and toWireString() methods
        were added to the JSC version of SerializedScriptValue. In
        order to allow the JSC SerializedScriptValue to compile when
        ENABLE(INDEXED_DATABASE) is turned on, these new methods have
        been removed and the old methods have been moved outside the
        ENABLE(INDEXED_DATABASE) guard.

        No new tests. No change in functionality.

        * WebCore.exp.in:
        * bindings/js/SerializedScriptValue.cpp:
        (WebCore::SerializedScriptValue::toWireString):
        (WebCore):
        (WebCore::SerializedScriptValue::createFromWire):
        * bindings/js/SerializedScriptValue.h:

2012-11-28  Hajime Morrita  <morrita@google.com>

        [Shadow DOM] Element.createShadowRoot() should be prefixed.
        https://bugs.webkit.org/show_bug.cgi?id=103595

        Reviewed by Kentaro Hara.

        No new tests, updated shadow-aware-create-shadow-root.html to follow the change.

        * dom/Element.idl:

2012-11-28  Hayato Ito  <hayato@chromium.org>

        Node::compareDocumentPosition returns wrong value for a node in the different shadow tree.
        https://bugs.webkit.org/show_bug.cgi?id=103502

        Reviewed by Dimitri Glazkov.

        Make Node::compareDocumentPosition() return the correct value when two nodes are in the different shadow trees.

        Test: fast/dom/shadow/compare-document-position.html

        * dom/Node.cpp:
        (WebCore::Node::compareDocumentPosition):

2012-11-28  Joshua Bell  <jsbell@chromium.org>

        [Chromium] IndexedDB: Assert/crash in indexing layout tests in content_shell
        https://bugs.webkit.org/show_bug.cgi?id=103562

        Reviewed by Tony Chang.

        In multi-process ports, an commit request or setIndexesReady request may arrive from the
        front-end after the back-end has already aborted. Don't freak out if those occur.

        Tests: storage/indexeddb/index-population.html
               storage/indexeddb/lazy-index-population.html
               storage/indexeddb/transaction-error.html

        * Modules/indexeddb/IDBObjectStoreBackendImpl.cpp:
        (WebCore::IDBObjectStoreBackendImpl::setIndexKeys): Ensure transaction hasn't finished before continuing.
        (WebCore::IDBObjectStoreBackendImpl::setIndexesReady): Ditto.
        * Modules/indexeddb/IDBTransactionBackendImpl.cpp:
        (WebCore::IDBTransactionBackendImpl::commit): Ignore a commit request if already aborted.

2012-11-28  Shinya Kawanaka  <shinyak@chromium.org>

        [Shadow] Move Distribution requirements from ShadowRoot
        https://bugs.webkit.org/show_bug.cgi?id=103481

        Reviewed by Hajime Morita.

        We would like to shrink the ShadowRoot memory size in this patch. ShadowRoot had several distribution related members,
        however they were used only if ShadowRoot has <content>, <shadow>, or nested ShadowRoot.
        Since <input> or <textarea> do not have such requirements, the members consume a few amount of memory.

        We remove them from ShadowRoot and introduce some RareData-like data structure for ShadowRoot.
        This will reduce memory footprint in most cases.

        No new tests, refactoring.

        * WebCore.exp.in:
        * dom/ShadowRoot.cpp:
        (SameSizeAsShadowRoot): Reduced 3 * sizeof(unsigned) bytes from ShadowRoot.
        (WebCore::ShadowRoot::ShadowRoot): DistributionData is created only when necessary. <input> or <textarea> won't
        create such data.
        (WebCore::ShadowRoot::assignedTo):
        (WebCore):
        (WebCore::ShadowRoot::setAssignedTo):
        (WebCore::ShadowRoot::ensureDistributionData):
        (WebCore::ShadowRoot::registerShadowElement):
        (WebCore::ShadowRoot::unregisterShadowElement):
        (WebCore::ShadowRoot::hasShadowInsertionPoint):
        (WebCore::ShadowRoot::registerContentElement):
        (WebCore::ShadowRoot::unregisterContentElement):
        (WebCore::ShadowRoot::hasContentElement):
        (WebCore::ShadowRoot::registerElementShadow):
        (WebCore::ShadowRoot::unregisterElementShadow):
        (WebCore::ShadowRoot::hasElementShadow):
        (WebCore::ShadowRoot::countElementShadow):
        (WebCore::ShadowRoot::reportMemoryUsage):
        * dom/ShadowRoot.h:
        (WebCore):
        (ShadowRoot):
        (WebCore::ShadowRoot::distributionData):
        * html/shadow/ContentDistributor.cpp:
        (WebCore::ShadowRootContentDistributionData::ShadowRootContentDistributionData):
        (WebCore):
        * html/shadow/ContentDistributor.h:
        (ShadowRootContentDistributionData): Distribution related fields in ShadowRoot are moved to here.
        (WebCore::ShadowRootContentDistributionData::insertionPointAssignedTo):
        (WebCore::ShadowRootContentDistributionData::setInsertionPointAssignedTo):
        (WebCore::ShadowRootContentDistributionData::incrementNumberOfShadowElementChildren):
        (WebCore::ShadowRootContentDistributionData::decrementNumberOfShadowElementChildren):
        (WebCore::ShadowRootContentDistributionData::numberOfShadowElementChildren):
        (WebCore::ShadowRootContentDistributionData::incrementNumberOfContentElementChildren):
        (WebCore::ShadowRootContentDistributionData::decrementNumberOfContentElementChildren):
        (WebCore::ShadowRootContentDistributionData::numberOfContentElementChildren):
        (WebCore::ShadowRootContentDistributionData::incrementNumberOfElementShadowChildren):
        (WebCore::ShadowRootContentDistributionData::decrementNumberOfElementShadowChildren):
        (WebCore::ShadowRootContentDistributionData::numberOfElementShadowChildren):
        (WebCore):

2012-11-23  Dirk Schulze  <krit@webkit.org>

        Remove -webkit-mask-attachment
        https://bugs.webkit.org/show_bug.cgi?id=67137

        Reviewed by David Hyatt.

        Remove CSS property '-webkit-attachment'. The CSS WG agreed that this should not be
        part of the CSS Masking specification. WebKit never implemented the behavior of
        attached masks either. The property was just exposed in CSSOM.

        Test: Added negative tests to fast/masking/parsing-mask.html.

        * css/CSSComputedStyleDeclaration.cpp:
        (WebCore):
        (WebCore::CSSComputedStyleDeclaration::getPropertyCSSValue):
        * css/CSSParser.cpp:
        (WebCore::CSSParser::parseValue):
        (WebCore::CSSParser::parseFillProperty):
        * css/CSSProperty.cpp:
        (WebCore::CSSProperty::isInheritedProperty):
        * css/CSSPropertyNames.in:
        * css/StyleBuilder.cpp:
        (WebCore::StyleBuilder::StyleBuilder):
        * css/StylePropertySet.cpp:
        (WebCore::StylePropertySet::asText):
        * css/StylePropertyShorthand.cpp:
        (WebCore::webkitMaskShorthand):
        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::applyProperty):
        * rendering/style/RenderStyle.h:

2012-11-28  Michael Pruett  <michael@68k.org>

        IndexedDB: Add forward declaration of SecurityOrigin to IDBBackingStore.h
        https://bugs.webkit.org/show_bug.cgi?id=103578

        Reviewed by Kentaro Hara.

        Add forward declaration of SecurityOrigin to IDBBackingStore.h
        in order to enable compilation of IndexedDB for JSC.

        Tests: storage/indexeddb/*

        * Modules/indexeddb/IDBBackingStore.h:
        (WebCore):

2012-11-28  Hajime Morrita  <morrita@google.com>

        checkAcceptChild() needs fewer virtual calls
        https://bugs.webkit.org/show_bug.cgi?id=103372

        Reviewed by Ojan Vafai.

        This change reorganizes checkAcceptChild family for speed.

        - Made Node::checkAddChild and Node::checkReplaceChild() static inline functions
          in ContainerNode.cpp. checkAcceptChild() was also moved to the same file. This allows us
          more aggressive inlining.

        - Added a fast path in checkAcceptChild(), where we can assume that the parent is element
          and the new child is element or text. Under this assumption, we need no extra type checks
          and just needs a cycle prevention through Node::contains(). This is faster than current generic version.

        - Moved extra checks from checkAddChild() and checkReplaceChild() to
          checkAcceptChild(). This allows the fast path skips even these extra checks.

        - Node::canReplaceChild() is devirtualized. Since the only override is on
          Document, we can check isDocumentNode() to call it directly.

        - The default implemenation of Node::canReplaceChild() just calls isChildTypeAllowed().
          That is what an extra check for checkAddChild() did. So we can share these code path in checkAcceptChild().

        This gains 2-3% win on Dromaeo dom-modify.html.

        No new tests, covered by existing tests.

        * dom/ContainerNode.cpp:
        (WebCore::isChildTypeAllowed): Moved from Node.cpp
        (WebCore::checkAcceptChild): Moved from Node.cpp, Added a fast path.
        (WebCore::checkAddChild): Moved from Node.cpp
        (WebCore::checkReplaceChild): Moved from Node.cpp
        (WebCore::ContainerNode::insertBefore): Followed the signature change.
        (WebCore::ContainerNode::replaceChild): Followed the signature change, moved null check from checkReplaceChild to here.
        (WebCore::ContainerNode::appendChild): Followed the signature change.
        * dom/Document.h:
        (Document):
        * dom/Node.cpp:
        * dom/Node.h:
        (WebCore::Node::isDocumentTypeNode): Added for better readability of call sites.

2012-11-28  Kenichi Ishibashi  <bashi@chromium.org>

        StyleResolver should not set NaN to font size
        https://bugs.webkit.org/show_bug.cgi?id=99506

        Reviewed by Abhishek Arya.

        fixedScaleFactor could be NaN since settings->defaultFixedFontSize()
        and settings->defaultFontSize() are zero in some case. This turns
        out setting NaN to font size. Add a zero checks so that
        fixedScaleFactor won't be NaN.

        Test: fast/css/font-size-nan.html

        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::checkForGenericFamilyChange):

2012-11-28  Tim Horton  <timothy_horton@apple.com>

        [mac] WebHTMLConverter should maintain font size even when there is no related NSFont
        https://bugs.webkit.org/show_bug.cgi?id=103568

        Reviewed by Alexey Proskuryakov.

        WebHTMLConverter should use the default font at the correct size when it
        encounters a font that cannot be backed by an NSFont (e.g. a WebFont).

        * platform/mac/HTMLConverter.mm:
        (+[WebHTMLConverter editingAttributedStringFromRange:]):

2012-11-23  Dirk Schulze  <krit@webkit.org>

        CSS parser does not support -webkit-mask-size for -webkit-mask shorthand
        https://bugs.webkit.org/show_bug.cgi?id=103020

        Reviewed by David Hyatt.

        Harmonize the syntax of '-webkit-mask' property with 'background' according to the
        CSS Masking specification[1]. This should make it easier to maintain both shorthand
        properties in the long term.
        It is very unlikely that a lot of content (if any) is affected by this change. The
        computed style still is not implemented and this change should rather make it easier
        for developers.

        With the harmonization, the '-webkit-mask-size' property is part of the shorthand as
        well now.

        parsing-mask.html covers all the changes. Added new tests for the changed syntax and
        '-webkit-mask-size'

        [1] http://dvcs.w3.org/hg/FXTF/raw-file/tip/masking/index.html#mask-property

        * css/CSSParser.cpp:
        (WebCore::CSSParser::parseValue):
        (WebCore::CSSParser::parseFillShorthand):
        * css/StylePropertySet.cpp:
        (WebCore::StylePropertySet::getLayeredShorthandValue):
        * css/StylePropertyShorthand.cpp:
        (WebCore::webkitMaskShorthand):

2012-11-28  Alec Flett  <alecflett@chromium.org>

        IndexedDB: Change frontend to call IDBDatabaseBackendInterface::createTransaction()
        https://bugs.webkit.org/show_bug.cgi?id=102732

        Reviewed by Tony Chang.

        Use the new createTransaction, now that it has been stubbed
        out. This is part 2 of 3 of a refactor. See
        https://bugs.webkit.org/show_bug.cgi?id=102733 for part 3.

        No new tests as this refactor simply keeps and propagates a
        counter that is currently unused.

        * Modules/indexeddb/IDBDatabase.cpp:
        (WebCore::IDBDatabase::nextTransactionId):
        (WebCore):
        (WebCore::IDBDatabase::transaction):
        * Modules/indexeddb/IDBDatabase.h:
        (IDBDatabase):
        * Modules/indexeddb/IDBOpenDBRequest.cpp:
        (WebCore::IDBOpenDBRequest::onUpgradeNeeded):
        * Modules/indexeddb/IDBRequest.cpp:
        (WebCore::IDBRequest::onSuccess):
        * Modules/indexeddb/IDBTransaction.cpp:
        (WebCore::IDBTransaction::create):
        (WebCore::IDBTransaction::IDBTransaction):
        * Modules/indexeddb/IDBTransaction.h:
        (IDBTransaction):

2012-11-28  Michael Saboff  <msaboff@apple.com>

        HTMLFontElement font size parsing should directly handle 8 bit strings
        https://bugs.webkit.org/show_bug.cgi?id=103315

        Reviewed by Oliver Hunt.

        Split parseFontSize() into a templated function based on character type and a wrapper that determines
        a string's bitness before calling the template.

        No new tests. No change in functionality.

        * html/HTMLFontElement.cpp:
        (WebCore::parseFontSize):

2012-11-28  Robert Kroeger  <rjkroege@chromium.org>

        remove unused PlatformGestureCurve code
        https://bugs.webkit.org/show_bug.cgi?id=103296

        Reviewed by Adam Barth.

        Previous CLs have made the Chromium embedder provide gesture fling
        curve implementation to WebKit. Consequently no platform uses the
        gestural fling code currently found in WebKit. This CL removes this code.

        Code removal only: covered by existing tests.

        * CMakeLists.txt:
        * GNUmakefile.list.am:
        * WebCore.gypi:
        * platform/ActivePlatformGestureAnimation.cpp: Removed.
        * platform/ActivePlatformGestureAnimation.h: Removed.
        * platform/PlatformGestureCurve.h: Removed.
        * platform/PlatformGestureCurveTarget.h: Removed.
        * platform/ScrollAnimatorNone.cpp: References to removed code removed.
        * platform/ScrollAnimatorNone.h:
        * platform/TouchFlingPlatformGestureCurve.cpp: Removed.
        * platform/TouchFlingPlatformGestureCurve.h: Removed.
        * platform/WheelFlingPlatformGestureCurve.cpp: Removed.
        * platform/WheelFlingPlatformGestureCurve.h: Removed.
        * platform/chromium/support/PlatformGestureCurveFactory.cpp: Removed.
        * platform/chromium/support/PlatformGestureCurveFactory.h: Removed.
        * platform/chromium/support/WebFlingAnimatorToGestureCurveAdapter.h: Removed.

2012-11-28  Abhishek Arya  <inferno@chromium.org>

        Heap-use-after-free in WebCore::EventHandler::handleMousePressEvent
        https://bugs.webkit.org/show_bug.cgi?id=101098

        Reviewed by Adam Barth.

        |subframe| can be blown away inside passMousePressEventToSubframe
        call. Use RefPtr to protect it in handleMousePressEvent function.
        We use similar approach in handleMouseMoveEvent function.

        No new tests. Test is extremely time dependent and needs to trigger
        interaction gesture. Reproduced on ClusterFuzz.

        * page/EventHandler.cpp:
        (WebCore::EventHandler::handleMousePressEvent):

2012-11-28  Tom Sepez  <tsepez@chromium.org>

        XSSAuditor bypass with script src=data: URL ending in <!--
        https://bugs.webkit.org/show_bug.cgi?id=103548

        Reviewed by Adam Barth.

        This fixes an additional case where characters from the page itself are
        included with the snippet to match against the reflected vector, and the
        JS remains legitimate because of a <!--- comment. Truncate the snippet at
        such a comment.
        
        Test: http/tests/security/xssAuditor/script-tag-with-source-data-url3.html

        * html/parser/XSSAuditor.cpp:
        (WebCore::XSSAuditor::decodedSnippetForAttribute):

2012-11-28  Abhishek Arya  <inferno@chromium.org>

        Heap-use-after-free in WebCore::RenderLayerModelObject::hasSelfPaintingL
ayer
        https://bugs.webkit.org/show_bug.cgi?id=101970

        Reviewed by David Hyatt.

        RenderInline::splitFlow and RenderBlock::splitFlow re-use |pre|
        block in some cases. In those cases, |pre| might hold floating objects
        and those floating descendants might get moved to |post| block. If
        the |pre| block does not get a layout later, then the floating
        descendant will never get removed since it is now part of |post|
        ancestor chain. We don't want failing-to-layout bugs turned into
        security bugs and hence clear floating objects list since we expect
        it to be rebuilt in subsequent layout.

        Test: fast/block/float/float-not-removed-from-pre-block.html

        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::splitFlow): Call removeFloatingObjects on |pre| block.
        (WebCore::RenderBlock::removeFloatingObjects): Clear all floating objects from our list.
        (WebCore):
        * rendering/RenderBlock.h: 
        (RenderBlock):
        * rendering/RenderInline.cpp:
        (WebCore::RenderInline::splitFlow): Call removeFloatingObjects on |pre| block.

2012-11-28  Mark Pilgrim  <pilgrim@chromium.org>

        [Chromium] Remove pluginsScriptableObject from PlatformSupport
        https://bugs.webkit.org/show_bug.cgi?id=103542

        Reviewed by Adam Barth.

        Part of a refactoring series. See tracking bug 82948.

        * bindings/v8/ScriptController.cpp:
        (WebCore::ScriptController::createScriptInstanceForWidget):
        * platform/chromium/PlatformSupport.h:
        (PlatformSupport):
        * plugins/PluginViewBase.h:
        (PluginViewBase):
        (WebCore::PluginViewBase::scriptableObject):

2012-11-28  Otto Derek Cheung  <otcheung@rim.com>

        [BlackBerry] CookieJarBlackBerry will use document settings for cookiesEnabled
        https://bugs.webkit.org/show_bug.cgi?id=103560

        Reviewed by Rob Buis.

        PR 253490

        CookieJarBlackBerry will now use page settings to check whether
        cookie is enabled.

        Tested setting/reading cookies on different client cookie settings using
        javascript and HTTP. Cookie behaviour is now back to spec.

        * loader/blackberry/CookieJarBlackBerry.cpp:
        (WebCore::cookies):
        (WebCore::cookieRequestHeaderFieldValue):

2012-11-28  Mark Pilgrim  <pilgrim@chromium.org>

        [Chromium][Win] Remove ensureFontLoaded from PlatformSupport
        https://bugs.webkit.org/show_bug.cgi?id=97696

        Reviewed by Adam Barth.

        Move ensureFontLoaded() from PlatformSupport to
        FontPlatformDataChromiumWin. Part of a refactoring series; see
        tracking bug 82948.

        * platform/chromium/PlatformSupport.h:
        (PlatformSupport):
        * platform/graphics/chromium/FontCacheChromiumWin.cpp:
        (WebCore::fontContainsCharacter):
        * platform/graphics/chromium/FontChromiumWin.cpp:
        (WebCore::drawGlyphsWin):
        * platform/graphics/chromium/FontPlatformDataChromiumWin.cpp:
        (WebCore::FontPlatformData::scriptFontProperties):
        (WebCore):
        (WebCore::FontPlatformData::ensureFontLoaded):
        * platform/graphics/chromium/FontPlatformDataChromiumWin.h:
        (FontPlatformData):
        * platform/graphics/chromium/GlyphPageTreeNodeChromiumWin.cpp:
        (WebCore::getGlyphIndices):
        (WebCore::fillBMPGlyphs):
        * platform/graphics/chromium/SimpleFontDataChromiumWin.cpp:
        (WebCore::SimpleFontData::platformInit):
        (WebCore::SimpleFontData::determinePitch):
        (WebCore::SimpleFontData::platformBoundsForGlyph):
        (WebCore::SimpleFontData::platformWidthForGlyph):
        * platform/graphics/chromium/UniscribeHelperTextRun.cpp:
        (WebCore::UniscribeHelperTextRun::tryToPreloadFont):
        * platform/graphics/skia/SkiaFontWin.cpp:
        (WebCore::paintSkiaText):

2012-11-28  peavo@outlook.com  <peavo@outlook.com>

        [WinCairo] Crash when requesting favicon.
        https://bugs.webkit.org/show_bug.cgi?id=102689

        Reviewed by Brent Fulgham.

        * platform/graphics/BitmapImage.h: Made frameCount() method virtual, subclasses made for testing can then override it.
        * platform/graphics/win/ImageCairoWin.cpp:
        (WebCore::BitmapImage::getHBITMAPOfSize): Added NULL pointer check.
        (WebCore::BitmapImage::drawFrameMatchingSourceSize): Added NULL pointer check.

2012-11-28  Tony Chang  <tony@chromium.org>

        Move internals.settings.setPageScaleFactor to internals.setPageScaleFactor
        https://bugs.webkit.org/show_bug.cgi?id=103559

        Reviewed by Jochen Eisinger.

        This method doesn't alter the Settings object, so move it to internals.

        No new tests, this is a refactor.

        * testing/InternalSettings.cpp: Remove.
        * testing/InternalSettings.h: Remove.
        * testing/InternalSettings.idl: Remove.
        * testing/Internals.cpp:
        (WebCore::Internals::resetToConsistentState): Add reset code.
        (WebCore::Internals::setPageScaleFactor): Add method.
        * testing/Internals.h: Add method.
        * testing/Internals.idl: Add method.

2012-11-28  Alexandru Chiculita  <achicu@adobe.com>

        [CSS Regions] Elements using transforms are not repainted correctly when rendered in a region
        https://bugs.webkit.org/show_bug.cgi?id=102826

        Reviewed by Dave Hyatt.

        Follow up update of a comment after the patch was landed by the commit queue in r135921.

        * rendering/RenderObject.cpp:
        (WebCore::RenderObject::containerForRepaint):

2012-11-28  Christophe Dumez  <christophe.dumez@intel.com>

        CSS3 Multicolumn: column-span should accept value 'none' (instead of '1')
        https://bugs.webkit.org/show_bug.cgi?id=101462

        Reviewed by David Hyatt.

        According to the latest CSS3 Multi-column specification:
        http://www.w3.org/TR/2011/CR-css3-multicol-20110412/#column-span

        column-span should accept values [ none | all ], instead of
        [ 1 | all ]. This patch updates WebKit implementation to reflect
        this change in the specification. The value 1 is still supported
        for compatibility reasons and is mapped to none.

        No new tests, already covered by existing tests.

        * css/CSSComputedStyleDeclaration.cpp:
        (WebCore::CSSComputedStyleDeclaration::getPropertyCSSValue):
        * css/CSSParser.cpp:
        (WebCore::CSSParser::parseValue):
        * css/CSSPrimitiveValueMappings.h:
        (WebCore::CSSPrimitiveValue::CSSPrimitiveValue):
        (WebCore::CSSPrimitiveValue::operator ColumnSpan):
        * rendering/style/RenderStyle.h:
        * rendering/style/RenderStyleConstants.h:

2012-11-28  Anton Vayvod  <avayvod@chromium.org>

        Text Autosizing: Clusters should use width of LCA of their text nodes
        https://bugs.webkit.org/show_bug.cgi?id=102562

        Reviewed by Kenneth Rohde Christiansen.

        Many pages set a max-width on their content. So especially for the
        RenderView, instead of just taking the width of |cluster| we find
        the lowest common ancestor of the first and last descendant text node of
        the cluster (i.e. the deepest wrapper block that contains all the text),
        and use its width instead.

        Tests: fast/text-autosizing/cluster-with-narrow-lca-and-cluster.html
               fast/text-autosizing/cluster-with-narrow-lca.html
               fast/text-autosizing/cluster-with-wide-lca.html
               fast/text-autosizing/list-item-out-of-flow.html
               fast/text-autosizing/wide-in-narrow-overflow-scroll.html

        * rendering/TextAutosizer.cpp:
        (WebCore::TextAutosizer::processCluster): use text nodes LCA instead of cluster for width calculation
        (WebCore::TextAutosizer::isAutosizingContainer): list items that are out of parent list element's flow are valid containers (that therefore become clusters in isAutosizingCluster)
        (WebCore::TextAutosizer::findDeepestBlockContainingAllText): searches for LCA of text nodes ignoring descendant clusters
        (WebCore::TextAutosizer::findFirstTextLeafNotInCluster): searches for the first or the last (depending on specified direction) text leaf node in-order ignoring any descendant clusters
        * rendering/TextAutosizer.h: new private methods declarations and an enum for tree traversal direction.

2012-11-28  Sadrul Habib Chowdhury  <sadrul@chromium.org>

        cleanup: Change some code to be cleaner, more readable and style conforming
        https://bugs.webkit.org/show_bug.cgi?id=103543

        Reviewed by Antonio Gomes.

        Use more appropriate function name and more meaningful variable names to make the code cleaner.
        This is covered by existing tests. This does not make any behavioural changes, so no new tests.

        * page/EventHandler.cpp:
        (WebCore::closestScrollableNodeInDocumentIfPossible):
        (WebCore::EventHandler::handleWheelEvent):

2012-11-28  Alexandru Chiculita  <achicu@adobe.com>

        [CSS Regions] Crash when using hover and first-letter inside a flow-thread
        https://bugs.webkit.org/show_bug.cgi?id=102957

        Reviewed by David Hyatt.

        Some RenderObjects use a different path when they are destroyed. That's because they are dynamically
        added just before layout happens and their parent is usually not their actual owner. In those cases the parent
        will remove the object from the tree, but it's actually the owner that will destroy the object and all its
        children.

        RenderFlowThread maintains a RenderBoxRegionInfo object for each RenderObject that is rendered inside the
        flow-thread. When the RenderObject is removed from the RenderFlowThread, the associated RenderBoxRegionInfo object
        also needs to be removed.

        In these special cases (list-marker, first-letter), the object itself was removed from the RenderFlowThread,
        but its children were still left in the flow-thread. When the these special objects were later destroyed, 
        they will remove their own children. Removing their children means it will try to remove them from the
        associated RenderFlowThread. However, in this cases there would be no link back to the parent flow-thread,
        as the tree is now detached from the enclosing RenderFlowThread.

        Added code that recursively removes the whole children tree from the RenderFlowThread when the root is removed.

        Tests: fast/regions/firstletter-inside-flowthread.html
               fast/regions/listmarker-inside-flowthread.html

        * rendering/RenderObject.cpp:
        (WebCore::RenderObject::willBeRemovedFromTree):
        (WebCore::RenderObject::removeFromRenderFlowThread):
        (WebCore):
        (WebCore::RenderObject::removeFromRenderFlowThreadRecursive):
        * rendering/RenderObject.h:
        (RenderObject):

2012-11-28  Alexandru Chiculita  <achicu@adobe.com>

        [CSS Regions] Auto-height regions will not calculate the height correctly when the content changes dynamically
        https://bugs.webkit.org/show_bug.cgi?id=102954

        Reviewed by David Hyatt.

        Whenever the flow changes, we need to reset the region computed auto-heights.
        However, when we reset the region heights to "auto" or "un-computed", we also need to make
        sure that all the region breaks are counted again, so that we split regions correctly during the new layout.
        I've reused the m_regionsInvalidated property to force the flow do a complete layout.

        Test: fast/regions/autoheight-dynamic-update.html

        * rendering/RenderFlowThread.cpp:
        (WebCore::RenderFlowThread::resetRegionsOverrideLogicalContentHeight):

2012-11-28  Alexandru Chiculita  <achicu@adobe.com>

        [CSS Regions] InRenderFlowThread returns false in the first setStyle
        https://bugs.webkit.org/show_bug.cgi?id=102839

        Reviewed by Dave Hyatt.

        Some render objects use the "inRenderFlowThread" during the first styleWillChange/styleDidChange.
        The first call to these methods comes from NodeRendererFactory::createRenderer. That happens before the RenderObject is 
        attached to the parent renderer, meaning that inRenderFlowThread is false. That means a RenderLayerBacking will be 
        created for renderers inside the RenderFlowThread, but composited layers inside the RenderFlowThread are not supported yet.
        https://bugs.webkit.org/show_bug.cgi?id=84900

        Test: fast/repaint/region-painting-composited-element.html

        * dom/NodeRenderingContext.cpp:
        (WebCore::NodeRendererFactory::createRenderer):
        Added code to propagate the inRenderFlowThread flag from the parent node before the style is set for the first time.

2012-11-28  Dan Bernstein  <mitz@apple.com>

        <rdar://problem/12645085> REGRESSION (r130851): With kerning enabled, a white-space: pre-wrap inline starting with tab+space has the wrong width
        https://bugs.webkit.org/show_bug.cgi?id=103541

        Reviewed by Anders Carlsson.

        Test: fast/text/tab-with-kerning.html

        When kerning is enabled, words are measured with their trailing space, then the width of a
        space is subtracted. The logic to do this was incorrectly being invoked even when the
        trailing whitespace character was a tab or a newline.

        * rendering/RenderBlockLineLayout.cpp:
        (WebCore::RenderBlock::LineBreaker::nextLineBreak): Changed to check only for the space
        character, not other space-like characters.

2012-11-28  Nate Chapin  <japhet@chromium.org>

        Move empty loading to DocumentLoader, simplify FrameLoader::init()
        https://bugs.webkit.org/show_bug.cgi?id=101512

        Reviewed by Adam Barth.

        No new tests, though several outputs changed because we no longer send resource
            load callbacks for empty loads.

        * loader/DocumentLoader.cpp:
        (WebCore::DocumentLoader::DocumentLoader):
        (WebCore::DocumentLoader::~DocumentLoader):
        (WebCore::DocumentLoader::finishedLoading):
        (WebCore::DocumentLoader::commitData):
        (WebCore::DocumentLoader::clearMainResourceLoader):
        (WebCore::DocumentLoader::isLoadingInAPISense):
        (WebCore::DocumentLoader::documentURL):
        (WebCore::DocumentLoader::isLoadingMainResource):
        (WebCore::DocumentLoader::maybeLoadEmpty):
        (WebCore):
        (WebCore::DocumentLoader::startLoadingMainResource): Handle empty main resource
             loads directly here.
        * loader/DocumentLoader.h:
        (WebCore::DocumentLoader::serverRedirectSourceForHistory):
        (DocumentLoader):
        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::FrameLoader): Initialize some variables whose values
            were previously being reset in init(). Given that the FrameLoader is in
            an inconsistent state before init() is called anyway, there doesn't seem
            to be a disadvantage to just initializing them to their post-init() values.
        (WebCore::FrameLoader::init): Just call startLoadingMainResource(), instead of
            doing a bunch of direct calls to functions FrameLoader shouldn't know about.
        * loader/FrameLoaderStateMachine.cpp:
        (WebCore::FrameLoaderStateMachine::FrameLoaderStateMachine):
        * loader/FrameLoaderStateMachine.h:
        * loader/MainResourceLoader.cpp: Throughout, remove the concept of an empty load.
        (WebCore::MainResourceLoader::loadNow): This only returned true when an empty
            load got deferred, which won't happen now. Return void and always treat
            as returning false.
        * loader/MainResourceLoader.h:
        (MainResourceLoader):

2012-11-28  Antoine Quint  <graouts@apple.com>

        Calling .removeCue() for a cue that was never added should raise a NOT_FOUND_ERR
        https://bugs.webkit.org/show_bug.cgi?id=103412

        Reviewed by Eric Carlson.

        Updating the .removeCue() implementation to match the latest spec. This means we now
        raise a NOT_FOUND_ERR exception when trying to remove a cue that wasn't present in the
        cue list instead of a INVALID_STATE_ERR exception like the spec used to mandate.

        * html/track/TextTrack.cpp:
        (WebCore::TextTrack::removeCue):

2012-11-28  Zeno Albisser  <zeno@webkit.org>

        [Qt][Win] Enable usage of QTWEBKIT_PLUGIN_PATH.
        https://bugs.webkit.org/show_bug.cgi?id=103529

        This patch enables the same behavior for Windows
        as it is currently implemented for all other operating
        systems supported by Qt.
        Directories listed in the environment variable
        QTWEBKIT_PLUGIN_PATH are being searched for additional
        plugins.
        The only difference is that directories on Windows
        need to be separated by a semicolon instead of a colon.

        Reviewed by Kenneth Rohde Christiansen.

        * plugins/win/PluginDatabaseWin.cpp:
        (WebCore):
        (WebCore::addQtWebKitPluginPath):
        (WebCore::PluginDatabase::defaultPluginDirectories):

2012-11-28  Adam Barth  <abarth@webkit.org>

        [v8] 4% regression in dom_traverse tests
        https://bugs.webkit.org/show_bug.cgi?id=102858

        Unreviewed.

        This patch is a manual rollout of
        http://trac.webkit.org/changeset/134729. We can't do a mechanical
        rollout because V8DOMWrapper::getCachedWrapper no longer exists.

        * bindings/scripts/CodeGeneratorV8.pm:
        (GenerateHeader):

2012-11-28  Denis Nomiyama  <d.nomiyama@samsung.com>

        Removed extra definition of GLXContext.
        https://bugs.webkit.org/show_bug.cgi?id=103500

        Reviewed by Martin Robinson.

        A minor cleanup to remove a spare definition of GLXContext in GLContextGLX.h.

        No new tests. This doesn't change any behavior.

        * platform/graphics/glx/GLContextGLX.h:

2012-11-28  Sadrul Habib Chowdhury  <sadrul@chromium.org>

        Fix gesture scrolling when the target-element of scroll-begin is removed
        https://bugs.webkit.org/show_bug.cgi?id=103355

        Reviewed by Antonio Gomes.

        When a touch-scroll starts, the node under the touch-point gets latched, and
        subsequent scroll-update events are dispatched to that node. But if the node is
        removed while the gesture event is in progress (e.g. in a dynamically updated
        list), then the scrolling stops, although there are enough elements to still
        enable scrolling. So instead of latching on to the node immediately under the
        touch point, latch on to the scrollable node under the touch point.

        Test: fast/events/touch/gesture/touch-gesture-scroll-remove-node.html

        * page/EventHandler.cpp:
        (WebCore::getClosestScrollableNodeInDocumentIfPossible):
        (WebCore):
        (WebCore::EventHandler::handleWheelEvent):

2012-11-28  Anton Obzhirov  <a.obzhirov@samsung.com>

        Fix .libs/libwebkitgtk-3.0.so: undefined reference to `WebCore::validationMessageBadInputForNumberText().
        https://bugs.webkit.org/show_bug.cgi?id=103509

        Reviewed by Philippe Normand.

        GTK build fix after r136001.

        * platform/gtk/LocalizedStringsGtk.cpp:
        (WebCore::validationMessageBadInputForNumberText):
        (WebCore):

2012-11-28  Byungwoo Lee  <bw80.lee@samsung.com>

        [EFL] Use mutex locker in wakeUp() to ensure thread-safety.
        https://bugs.webkit.org/show_bug.cgi?id=101132

        Reviewed by Gyuyoung Kim.

        Add mutex locker for the ecore pipe to ensure thread-safety of
        RunLoop::wakeUp().

        RunLoop::wakeUp() can be called by multiple thread. It uses
        ecore_pipe_write() function but the function is not thread-safe.

        * platform/RunLoop.h:
        (RunLoop):
        * platform/efl/RunLoopEfl.cpp:
        (WebCore::RunLoop::wakeUp):

2012-11-28  Ryuan Choi  <ryuan.choi@gmail.com>

        [EFL] Refactor theme to choose whether to support foreground color of selection
        https://bugs.webkit.org/show_bug.cgi?id=102037

        Reviewed by Kenneth Rohde Christiansen.

        If foreground selection color is supported, selected text is painted to
        SelectionForegroundColor instead of text color. If not, text can be painted
        to text color.

        However, EFL port does not have a way to disable support of foreground
        selection color. So this patch refactors color classes of theme from
        active and inactive to foreground and background in order to disable support
        of foreground selection color when foreground color class is not specified.

        * platform/efl/RenderThemeEfl.cpp:
        (WebCore::fillColorsFromEdjeClass):
        Returned false without error message when colorClass is not specified.
        (WebCore::RenderThemeEfl::setColorFromThemeClass):
        (WebCore::RenderThemeEfl::loadTheme):
        (WebCore::RenderThemeEfl::RenderThemeEfl):
        (WebCore::RenderThemeEfl::supportsSelectionForegroundColors):
        (WebCore):
        * platform/efl/RenderThemeEfl.h:
        (RenderThemeEfl):

2012-11-28  Allan Sandfeld Jensen  <allan.jensen@digia.com>

        Move childrenAffectedBy bits from RenderStyle to Element
        https://bugs.webkit.org/show_bug.cgi?id=101448

        Unreviewed buildfix.

        To use renderStyle() on some Macs we need to include NodeRenderStyle.h.

        * dom/ContainerNode.cpp:

2012-11-28  Allan Sandfeld Jensen  <allan.jensen@digia.com>

        Move childrenAffectedBy bits from RenderStyle to Element
        https://bugs.webkit.org/show_bug.cgi?id=101448
        https://bugs.webkit.org/show_bug.cgi?id=98021

        Reviewed by Antti Koivisto.

        Moves facts observed about restyling dependencies out of RenderStyle and
        into RareData for Node and Element. This also enables further cleanup
        in related code that tried to deal with problems caused with the placement
        of the data.

        Test: fast/css/nth-child-not-in-rightmost.html

        * css/SelectorChecker.cpp:
        (WebCore::SelectorChecker::checkSelector):
        (WebCore::SelectorChecker::checkOneSelector):
        * css/SiblingTraversalStrategies.h:
        (WebCore::DOMSiblingTraversalStrategy::countElementsBefore):
        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::sortAndTransferMatchedRules):
        (WebCore::StyleResolver::canShareStyleWithElement):
        (WebCore::parentElementPreventsSharing):
        (WebCore::StyleResolver::locateSharedStyle):
        * dom/ContainerNode.cpp:
        (WebCore::ContainerNode::setActive):
        (WebCore::ContainerNode::setHovered):
        * dom/Element.cpp:
        (WebCore::Element::detach):
        (WebCore::Element::recalcStyle):
        (WebCore::checkForEmptyStyleChange):
        (WebCore::checkForSiblingStyleChanges):
        (WebCore::Element::setChildrenAffectedByHover):
        (WebCore::Element::setChildrenAffectedByActive):
        (WebCore::Element::setChildrenAffectedByDrag):
        (WebCore::Element::setChildrenAffectedByFirstChildRules):
        (WebCore::Element::setChildrenAffectedByLastChildRules):
        (WebCore::Element::setChildrenAffectedByDirectAdjacentRules):
        (WebCore::Element::setChildrenAffectedByForwardPositionalRules):
        (WebCore::Element::setChildrenAffectedByBackwardPositionalRules):
        (WebCore::Element::setChildIndex):
        (WebCore::Element::rareDataStyleAffectedByEmpty):
        (WebCore::Element::rareDataChildrenAffectedByHover):
        (WebCore::Element::rareDataChildrenAffectedByActive):
        (WebCore::Element::rareDataChildrenAffectedByDrag):
        (WebCore::Element::rareDataChildrenAffectedByFirstChildRules):
        (WebCore::Element::rareDataChildrenAffectedByLastChildRules):
        (WebCore::Element::rareDataChildrenAffectedByDirectAdjacentRules):
        (WebCore::Element::rareDataChildrenAffectedByForwardPositionalRules):
        (WebCore::Element::rareDataChildrenAffectedByBackwardPositionalRules):
        (WebCore::Element::rareDataChildIndex):
        * dom/Element.h:
        (Element):
        (WebCore::Element::styleAffectedByEmpty):
        (WebCore::Element::childrenAffectedByHover):
        (WebCore::Element::childrenAffectedByActive):
        (WebCore::Element::childrenAffectedByDrag):
        (WebCore::Element::childrenAffectedByPositionalRules):
        (WebCore::Element::childrenAffectedByFirstChildRules):
        (WebCore::Element::childrenAffectedByLastChildRules):
        (WebCore::Element::childrenAffectedByDirectAdjacentRules):
        (WebCore::Element::childrenAffectedByForwardPositionalRules):
        (WebCore::Element::childrenAffectedByBackwardPositionalRules):
        (WebCore::Element::childIndex):
        * dom/ElementRareData.h:
        (ElementRareData):
        (WebCore::ElementRareData::resetComputedStyle):
        (WebCore::ElementRareData::resetDynamicRestyleObservations):
        * dom/Node.cpp:
        (WebCore::Node::diff):
        * dom/NodeRareData.h:
        (WebCore::NodeRareData::NodeRareData):
        (WebCore::NodeRareData::childrenAffectedByHover):
        (WebCore::NodeRareData::setChildrenAffectedByHover):
        (WebCore::NodeRareData::childrenAffectedByActive):
        (WebCore::NodeRareData::setChildrenAffectedByActive):
        (WebCore::NodeRareData::childrenAffectedByDrag):
        (WebCore::NodeRareData::setChildrenAffectedByDrag):
        (NodeRareData):
        (WebCore::NodeRareData::childrenAffectedByFirstChildRules):
        (WebCore::NodeRareData::setChildrenAffectedByFirstChildRules):
        (WebCore::NodeRareData::childrenAffectedByLastChildRules):
        (WebCore::NodeRareData::setChildrenAffectedByLastChildRules):
        (WebCore::NodeRareData::childrenAffectedByDirectAdjacentRules):
        (WebCore::NodeRareData::setChildrenAffectedByDirectAdjacentRules):
        (WebCore::NodeRareData::childrenAffectedByForwardPositionalRules):
        (WebCore::NodeRareData::setChildrenAffectedByForwardPositionalRules):
        (WebCore::NodeRareData::childrenAffectedByBackwardPositionalRules):
        (WebCore::NodeRareData::setChildrenAffectedByBackwardPositionalRules):
        (WebCore::NodeRareData::childIndex):
        (WebCore::NodeRareData::setChildIndex):
        * dom/NodeRenderingContext.cpp:
        (WebCore::NodeRenderingContext::createRendererForElementIfNeeded):
        * page/TouchAdjustment.cpp:
        (WebCore::TouchAdjustment::nodeRespondsToTapGesture):
        * rendering/RenderObject.cpp:
        (WebCore::RenderObject::updateDragState):
        * rendering/style/RenderStyle.cpp:
        (WebCore::RenderStyle::copyNonInheritedFrom):
        * rendering/style/RenderStyle.h:

2012-11-28  Zeno Albisser  <zeno@webkit.org>

        GraphicsSurface: Implement usage of GraphicsSurface for WebGL in WK1.
        https://bugs.webkit.org/show_bug.cgi?id=103497

        Unreviewed buildfix.

        Any usage of GraphicsSurface needs to be wrapped with USE(GRAPHICS_SURFACE).

        * platform/graphics/qt/GraphicsContext3DQt.cpp:
        (WebCore::GraphicsContext3DPrivate::paintToTextureMapper):

2012-11-28  Zeno Albisser  <zeno@webkit.org>

        GraphicsSurface: Implement usage of GraphicsSurface for WebGL in WK1.
        https://bugs.webkit.org/show_bug.cgi?id=103497

        This is a temporary workaround for an issue with GraphicsSurfaceMac.
        GraphicsSurfaceMac is currently implemented using CGL only.
        CGL does not allow us to properly restore the NSView a context was made current with.
        Therefore we have to go through QOpenGLContext to ensure the context
        is being restored correctly.
        As soon as we are updating GraphicsSurfaceMac to use NSOpenGL,
        we should revert this patch.

        Reviewed by Simon Hausmann.

        * platform/graphics/qt/GraphicsContext3DQt.cpp:
        (WebCore::GraphicsContext3DPrivate::paintToTextureMapper):

2012-11-28  Zeno Albisser  <zeno@webkit.org>

        GraphicsSurface: Implement usage of GraphicsSurface for WebGL in WK1.
        https://bugs.webkit.org/show_bug.cgi?id=103497

        Using GraphicsSurface for WebGL in WK1 allows us to share
        the code with the WK2 implementation.

        Reviewed by Simon Hausmann.

        * platform/graphics/qt/GraphicsContext3DQt.cpp:
        (WebCore::GraphicsContext3DPrivate::GraphicsContext3DPrivate):
            Remove obsolete code.
        (WebCore::GraphicsContext3DPrivate::paintToTextureMapper):
            After blitting the multisample framebuffer,
            we can copy the contents onto the GraphicsSurface.
            Right after that we can use the GraphicsSurface
            as a texture origin to paint to the TextureMapper.
            Flags related to flipping and blending are being resolved
            by GraphicsSurface, and do not need to be handled here anymore.
        (WebCore::GraphicsContext3DPrivate::copyToGraphicsSurface):
            Remove a redundant makeCurrentIfNeeded call.
            The original context is being restored by
            blitMultisampleFramebufferAndRestoreContext anyway.
            Instead of explicitly calling swapBuffers here,
            we call swapBuffers on the GraphicsSurface implicitly
            after in GraphicsSurfacePrivate::copyFromTexture().
        * platform/graphics/surfaces/mac/GraphicsSurfaceMac.cpp:
            Add members to hold the reading end texture IDs.
            The texture on the reading side are in a different
            context than the texture on the writing side.
            By using GraphicsSurface in WK1 we have to distinguish
            between these textures, as a single instance serves
            for reading and writing.
        (WebCore::GraphicsSurfacePrivate::GraphicsSurfacePrivate):
        (WebCore::GraphicsSurfacePrivate::~GraphicsSurfacePrivate):
        (WebCore::GraphicsSurfacePrivate::swapBuffers):
        (WebCore::GraphicsSurfacePrivate::copyFromTexture):
            Add an implicit call to swapBuffers().
        (WebCore::GraphicsSurfacePrivate::frontBufferTextureID):
        (GraphicsSurfacePrivate):
        * platform/graphics/surfaces/qt/GraphicsSurfaceGLX.cpp:
        (WebCore::GraphicsSurfacePrivate::GraphicsSurfacePrivate):
            Add a flag to distinguish between sending and receiving/reading
            side of the surface. This flag is being initialized in the constructor
            which is the only place where we know if an instance will be used for
            writing or reading.
            The purpose of this flag is to avoid erroneously swapping the buffers
            on the reading side. We can no longer rely on m_xPixmap for this purpose.
        (WebCore::GraphicsSurfacePrivate::swapBuffers):
        (WebCore::GraphicsSurfacePrivate::copyFromTexture):
        (WebCore::GraphicsSurfacePrivate::glxPixmap):
            Lazily create the GLX pixmap on demand.
        (GraphicsSurfacePrivate):
        (WebCore::GraphicsSurface::platformImport):

2012-11-28  Roger Fong  <roger_fong@apple.com>

        Unreviewed. Fix extra spaces in SimpleFontData::initGDIFont().

        * platform/graphics/win/SimpleFontDataWin.cpp:
        (WebCore::SimpleFontData::initGDIFont):

2012-11-28  Dan Carney  <dcarney@google.com>

        [V8] Crash wrapping media element when MediaPlayer isn't available
        https://bugs.webkit.org/show_bug.cgi?id=103431

        Reviewed by Kentaro Hara.

        Call HTMLElement::createWrapper directly when dispatching a
        disabled MediaElement wrap.

        No new tests. Testing this must apparently be manual.

        * bindings/scripts/CodeGeneratorV8.pm:
        (GenerateHeader):
        * dom/make_names.pl:
        (printWrapperFunctions):
        (printWrapperFactoryHeaderFile):

2012-11-28  Roger Fong  <roger_fong@apple.com>

        Initialize identity matrix in SimpleFontData::initGDIFont() properly.
        https://bugs.webkit.org/show_bug.cgi?id=103499
        <rdar://problem/12400700>

        Reviewed by Timothy Horton.

        We are incorrectly initializing the matrix passed into GetGlyphOutline.
        This patch fixes MAT2 initialization to match the way we initialize the 
        identity matrix in SimpleFontData::boundsForGDIGlyph and SimpleFontData::widthForGDIGlyph.

        * platform/graphics/win/SimpleFontDataWin.cpp:
        (WebCore::SimpleFontData::initGDIFont):

2012-11-28  Huang Dongsung  <luxtella@company100.net>

        [Texmap] REGRESSION(r135620) QtTestBrowser crashes on Google-gravity.
        https://bugs.webkit.org/show_bug.cgi?id=103410

        Reviewed by Noam Rosenthal.

        GraphicsLayerTextureMapper::updateBackingStore() should return early
        before TextureMapper is set.

        GraphicsLayer::FlushCompositingState() can be called by RenderLayerBacking. It
        means this method can be called before creating TextureMapper. So
        TextureMapperLayer::flushCompositingState() checks and returns early if
        TextureMapper was not created.

        However, GraphicsLayerTextureMapper::updateBackingStore() expects that TextureMapper
        always exists. updateBackingStore should also return early when TextureMapper
        was not created.

        No new tests. Covered by existing tests.

        * platform/graphics/texmap/GraphicsLayerTextureMapper.cpp:
        (WebCore::GraphicsLayerTextureMapper::setNeedsDisplay):
        (WebCore::GraphicsLayerTextureMapper::setNeedsDisplayInRect):
        (WebCore::GraphicsLayerTextureMapper::didFlushCompositingState):
        (WebCore::GraphicsLayerTextureMapper::prepareBackingStore):

2012-11-28  Tommy Widenflycht  <tommyw@google.com>

        Add basic implementation for MediaStreamAudioDestinationNode
        https://bugs.webkit.org/show_bug.cgi?id=101815

        Reviewed by Chris Rogers.

        Implements an audio destination node which has a MediaStream.
        This can be added to a PeerConnection with peerConnection.addStream().
        Please see use case (3):
        https://dvcs.w3.org/hg/audio/raw-file/tip/webaudio/webrtc-integration.html

        Test: webaudio/mediastreamaudiodestinationnode.html

        * Modules/webaudio/AudioContext.cpp:
        (WebCore):
        (WebCore::AudioContext::createMediaStreamDestination):
        * Modules/webaudio/AudioContext.h:
        (WebCore):
        (AudioContext):
        * Modules/webaudio/AudioContext.idl:
        * Modules/webaudio/AudioNode.h:
        * Modules/webaudio/MediaStreamAudioDestinationNode.cpp: Added.
        (WebCore):
        (WebCore::MediaStreamAudioDestinationNode::create):
        (WebCore::MediaStreamAudioDestinationNode::MediaStreamAudioDestinationNode):
        (WebCore::MediaStreamAudioDestinationNode::mediaStreamSource):
        (WebCore::MediaStreamAudioDestinationNode::~MediaStreamAudioDestinationNode):
        (WebCore::MediaStreamAudioDestinationNode::process):
        (WebCore::MediaStreamAudioDestinationNode::reset):
        * Modules/webaudio/MediaStreamAudioDestinationNode.h: Added.
        (WebCore):
        (MediaStreamAudioDestinationNode):
        (WebCore::MediaStreamAudioDestinationNode::stream):
        * Modules/webaudio/MediaStreamAudioDestinationNode.idl: Added.
        * WebCore.gypi:
        * platform/audio/AudioDestinationConsumer.h: Copied from Source/WebCore/platform/mediastream/MediaStreamSource.cpp.
        (WebCore):
        (AudioDestinationConsumer):
        (WebCore::AudioDestinationConsumer::~AudioDestinationConsumer):
        * platform/chromium/support/WebMediaStreamSource.cpp:
        (WebKit::WebMediaStreamSource::extraData):
        (WebKit::WebMediaStreamSource::setExtraData):
        (WebKit::WebMediaStreamSource::requiresAudioConsumer):
        (WebKit):
        (ConsumerWrapper):
        (WebKit::ConsumerWrapper::create):
        (WebKit::ConsumerWrapper::consumer):
        (WebKit::ConsumerWrapper::ConsumerWrapper):
        (WebKit::ConsumerWrapper::consumeAudio):
        (WebKit::WebMediaStreamSource::addAudioConsumer):
        (WebKit::WebMediaStreamSource::removeAudioConsumer):
        * platform/mediastream/MediaStreamSource.cpp:
        (WebCore::MediaStreamSource::create):
        (WebCore::MediaStreamSource::MediaStreamSource):
        (WebCore::MediaStreamSource::addAudioConsumer):
        (WebCore):
        (WebCore::MediaStreamSource::removeAudioConsumer):
        (WebCore::MediaStreamSource::consumeAudio):
        * platform/mediastream/MediaStreamSource.h:
        (WebCore):
        (MediaStreamSource):
        (WebCore::MediaStreamSource::requiresAudioConsumer):
        (WebCore::MediaStreamSource::audioConsumers):

2012-11-27  Mike West  <mkwst@chromium.org>

        Improve WebSocketChannel connection failure console messages.
        https://bugs.webkit.org/show_bug.cgi?id=103448

        Reviewed by Adam Barth.

        When a WebSocket connection fails, the current implementation of
        WebSocketChannel::fail binds the generated console message to the
        document's URL, but doesn't give much indication as to the connection
        itself. This patch adjusts the console message to explicitly show the
        URL of the failed connection to give developers a better chance of
        debugging and resolving errors.

        * Modules/websockets/WebSocketChannel.cpp:
        (WebCore::WebSocketChannel::fail):
            Drop the URL parameter from addConsoleMessage, in favour of adding
            the WebSocketHandshake's URL to the message text.

2012-11-27  Zan Dobersek  <zandobersek@gmail.com>

        Unreviewed functionality fix, return the height in ImageFrame::height()
        on non-Skia platforms.

        * platform/image-decoders/ImageDecoder.h:
        (WebCore::ImageFrame::height):

2012-11-27  Viatcheslav Ostapenko  <v.ostapenko@samsung.com>

        Optimization in image decoding
        https://bugs.webkit.org/show_bug.cgi?id=88424

        Reviewed by Brent Fulgham.

        Optimization in image decoding.
        Reduce branching and multiplications in GIF image decoding loops and functions.
        Rebase and update of original patch by Misha Tyutyunik <michael.tyuytunik@nokia.com>

        Covered by existing tests.

        * platform/image-decoders/gif/GIFImageDecoder.cpp:
        (WebCore::GIFImageDecoder::haveDecodedRow):

2012-11-27  Michael Saboff  <msaboff@apple.com>

        TextIterator unnecessarily converts 8 bit strings to 16 bits
        https://bugs.webkit.org/show_bug.cgi?id=103295

        Reviewed by Brent Fulgham.

        Changed TextIterator to use the contained string instead of calling characters() on that string.
        Other sources of text, like emitCharacter() still use the contained UChar* buffer.
        Added appendTextToStringBuilder() to append the text contents of the current iterator to a string builder
        irrespective of the source of the text.

        No new tests as functionality covered by existing tests.

        * WebCore.exp.in: Updated plainText export and eliminated plainTextToMallocAllocatedBuffer export
        * accessibility/AccessibilityObject.cpp:
        (WebCore::AccessibilityObject::stringForVisiblePositionRange): Updated to use TextIterator::appendTextToStringBuilder()
        * editing/TextIterator.cpp:
        (WebCore::TextIterator::characterAt): New function to return the indexed character of the current TextIterator
        (WebCore::TextIterator::appendTextToStringBuilder): Added method to append whatever the current text to a StringBuilder
        (WebCore::TextIterator::emitText): Eliminated accessing the character data via characters().
        (WebCore::TextIterator::rangeFromLocationAndLength): Changed to use characterAt().
        (WebCore::plainText): Combined with plainTextToMallocAllocatedBuffer().
        * editing/TextIterator.h:
        (WebCore::TextIterator::startOffset): New getter.
        (WebCore::TextIterator::string): New getter.
        (WebCore::TextIterator::characters): Updated to use correct test source.
        * page/ContextMenuController.cpp:
        (WebCore::selectionContainsPossibleWord): Changed to use characterAt().

2012-11-27  Noel Gordon  <noel.gordon@gmail.com>

        Inline ImageFrame width() and height()
        https://bugs.webkit.org/show_bug.cgi?id=103401

        Reviewed by Brent Fulgham.

        Inline ImageFrame width() and height() to improve the performance of ImageFrame
        function getAddr(x,y) per https://bugs.webkit.org/show_bug.cgi?id=88424#c38

        No new tests. Covered by many existing tests.

        * platform/image-decoders/ImageDecoder.cpp: Remove width() and height() routines
        since they now inlined in the ImageFrame class definition in ImageDecoder.h.
        * platform/image-decoders/ImageDecoder.h: Add inline definitions of width() and
        height() for all ports.
        * platform/image-decoders/skia/ImageDecoderSkia.cpp:
        (WebCore::ImageFrame::width): Remove.
        (WebCore::ImageFrame::height): Remove.

2012-11-27  Michael Pruett  <michael@68k.org>

        Remove ASSERT_NOT_REACHED() from IDBCursorBackendImpl::postSuccessHandlerCallback()
        https://bugs.webkit.org/show_bug.cgi?id=103461

        Reviewed by Kentaro Hara.

        The assertion is applicable only to the Chromium port.

        Tests: storage/indexeddb/*

        * Modules/indexeddb/IDBCursorBackendImpl.h:
        (WebCore::IDBCursorBackendImpl::postSuccessHandlerCallback):

2012-11-27  Shinya Kawanaka  <shinyak@chromium.org>

        [Refactoring] HasSelectorForClassStyleFunctor in Element.cpp seems verbose
        https://bugs.webkit.org/show_bug.cgi?id=103474

        Reviewed by Hajime Morita.

        The code introduced in r135174 looks verbose. We would like to make it simpler.
        We have removed several inline functions and unnecessary structs.

        No new tests, simple refactoring.

        * dom/Element.cpp:
        (WebCore):
        (WebCore::checkSelectorForClassChange):
        (WebCore::Element::classAttributeChanged):
        (WebCore::Element::shouldInvalidateDistributionWhenAttributeChanged):

2012-11-27  Julien Chaffraix  <jchaffraix@webkit.org>

        Support proper <percent> / calc() resolution for grid items
        https://bugs.webkit.org/show_bug.cgi?id=102968

        Reviewed by Ojan Vafai.

        This change introduces a mechanism similar to logical height / width override
        but for containing block. This is required as we don't have a renderer for the
        grid area but any <percent> or calc() size should be resolved against the grid
        area size (which is sized after the grid tracks).

        Tests: fast/css-grid-layout/calc-resolution-grid-item.html
               fast/css-grid-layout/percent-resolution-grid-item.html
               fast/css-grid-layout/percent-grid-item-in-percent-grid-track.html
               fast/css-grid-layout/percent-grid-item-in-percent-grid-track-in-percent-grid.html

        * rendering/RenderBox.cpp:
        (WebCore::RenderBox::willBeDestroyed):
        Remove any containing block size override.

        (WebCore::RenderBox::overrideContainingBlockContentLogicalWidth):
        (WebCore::RenderBox::overrideContainingBlockContentLogicalHeight):
        (WebCore::RenderBox::hasOverrideContainingBlockLogicalWidth):
        (WebCore::RenderBox::hasOverrideContainingBlockLogicalHeight):
        (WebCore::RenderBox::setOverrideContainingBlockContentLogicalWidth):
        (WebCore::RenderBox::setOverrideContainingBlockContentLogicalHeight):
        (WebCore::RenderBox::clearContainingBlockOverrideSize):
        Containing block override size functions.

        (WebCore::RenderBox::containingBlockLogicalWidthForContent):
        Updated the function to check for any override logical width.

        (WebCore::RenderBox::containingBlockLogicalHeightForContent):
        New function, similar to RenderBox::containingBlockLogicalWidthForContent.

        (WebCore::RenderBox::perpendicularContainingBlockLogicalHeight):
        (WebCore::RenderBox::computePercentageLogicalHeight):
        Updated these function to return overrideContainingBlockContentLogicalHeight as needed.

        (WebCore::RenderBox::computeReplacedLogicalHeightUsing):
        (WebCore::RenderBox::availableLogicalHeightUsing):
        Updated these functions to use the new containingBlockLogicalHeightForContent instead
        of availableLogicalHeight.

        * rendering/RenderBox.h:
        Added the previous new functions.

        * rendering/RenderGrid.cpp:
        (WebCore::RenderGrid::layoutGridItems):
        Updated to override the containing block size so that we properly size our grid items.

2012-11-27  Kent Tamura  <tkent@chromium.org>

        Fix build errors by r135955.

        * dom/ShadowRoot.cpp: Use struct instead of class.
        * dom/TreeScope.cpp: Ditto.

2012-11-27  Eugene Klyuchnikov  <eustas@chromium.com>

        Web Inspector: [Timeline] "Show CPU activity on the ruler" settings checkbox does not take effect until Inspector restart
        https://bugs.webkit.org/show_bug.cgi?id=102210

        Reviewed by Pavel Feldman.

        The checkbox changes should take effect in the real time.

        * inspector/front-end/SettingsScreen.js:
        (WebInspector.GenericSettingsTab):
        Do not show checkpox if browser is not capable.
        * inspector/front-end/TimelinePanel.js:
        Added setting change listener.

2012-11-27  Andreas Kling  <akling@apple.com>

        Compile time size assertions for TreeScope, ShadowRoot and ElementAttributeData.

        Rubber-stamped by Anders Carlsson.

        * dom/ShadowRoot.cpp:
        (SameSizeAsShadowRoot):
        * dom/TreeScope.cpp:
        (SameSizeAsTreeScope):
        * dom/ElementAttributeData.cpp: Derp.

2012-11-27  James Simonsen  <simonjam@chromium.org>

        Consolidate FrameLoader::load() into one function taking a FrameLoadRequest
        https://bugs.webkit.org/show_bug.cgi?id=102151

        Reviewed by Adam Barth.

        There's a FIXME that we have too many FrameLoader::load*() functions. This patch consolidates 3 into 1.
        There are still a few more load functions that will be consolidated later. Using FrameLoadRequest as
        the interface into FrameLoader will also provide a place to pass in the initiator. Finally, this matches
        the refactoring done with CachedResourceRequest and CachedResourceLoader.

        No new tests. No change in functionality.

        * WebCore.exp.in:
        * loader/FrameLoadRequest.h:
        (WebCore::FrameLoadRequest::FrameLoadRequest):
        (WebCore::FrameLoadRequest::setLockHistory): These are former arguments to load().
        (WebCore::FrameLoadRequest::lockHistory): Ditto.
        (FrameLoadRequest):
        (WebCore::FrameLoadRequest::setShouldCheckNewWindowPolicy): Ditto.
        (WebCore::FrameLoadRequest::shouldCheckNewWindowPolicy): Ditto.
        (WebCore::FrameLoadRequest::substituteData): Ditto.
        (WebCore::FrameLoadRequest::setSubstituteData): Ditto.
        (WebCore::FrameLoadRequest::hasSubstituteData): Ditto.
        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::load): No change in behavior, just merged it all into one function.
        * loader/FrameLoader.h:
        (FrameLoader):
        * page/DragController.cpp:
        (WebCore::DragController::performDrag):

2012-11-27  Jer Noble  <jer.noble@apple.com>

        Unreviewed build fix; NSSize is not a CGSize in 32-bit.

        * platform/mac/WebCoreFullScreenWarningView.mm:

2012-11-27  Dean Jackson  <dino@apple.com>

        Attempted build fix for my last commit. The private member variable
        is only used on MAC (at the moment) so guard it with #if PLATFORM.
        I did this rather than having another constructor, because I expect
        other platforms will follow the MAC code soon.

        * html/shadow/MediaControlElements.cpp:
        (WebCore::MediaControlToggleClosedCaptionsButtonElement::MediaControlToggleClosedCaptionsButtonElement):
        * html/shadow/MediaControlElements.h:

2012-11-14  Jer Noble  <jer.noble@apple.com>

        Add a new shared class WebCoreFullScreenPlaceholderView, for use in WebKit and WebKit2.
        https://bugs.webkit.org/show_bug.cgi?id=102300

        Reviewed by Anders Carlsson.

        Add a new shared class WebCoreFullScreenPlaceholderView, which presents the contents of the 
        WebView prior to full screen with a message informing the user how to exit from full screen mode.

        * platform/mac/WebCoreFullScreenPlaceholderView.mm:
        (-[WebCoreFullScreenPlaceholderView initWithFrame:]): Create the warning view and set up the placeholder layer.
        (-[WebCoreFullScreenPlaceholderView setContents:]): Pass along to content view layer.
        (-[WebCoreFullScreenPlaceholderView contents]): Ditto.
        (-[WebCoreFullScreenPlaceholderView setExitWarningVisible:]): Show or hide the exit warning.
        (-[WebCoreFullScreenPlaceholderView mouseDown:]): Call the target with action.

         Add a localized string entry for the "click to exit" text:
         * English.lproj/Localizable.strings:
        * platform/LocalizedStrings.cpp:
        (WebCore::clickToExitFullScreenText):
        * platform/LocalizedStrings.h:
        * English.lproj/Localizable.strings:

        Add the new files to the project and exports list:
        * WebCore.exp.in:
        * WebCore.xcodeproj/project.pbxproj:

2012-11-27  Andreas Kling  <akling@apple.com>

        Shrink ShadowRoot and TreeScope.
        <http://webkit.org/b/103459>

        Reviewed by Antti Koivisto.

        We're creating ~1500 ShadowRoots on Apple's PLT3 content (from <input> and <textarea> elements)
        and a lot of this is wasted space.

        Shrink ShadowRoot and TreeScope a bit by making TreeScope's DocumentOrderedMaps heap-allocated
        and packing the counters on ShadowRoot harder together with the bits.

        202kB progression on Membuster3.

        * dom/ShadowRoot.cpp:
        (WebCore::ShadowRoot::ShadowRoot):
        * dom/ShadowRoot.h:
        (WebCore::ShadowRoot::countElementShadow):
        (ShadowRoot):
        * dom/TreeScope.cpp:
        (WebCore::TreeScope::TreeScope):
        (WebCore::TreeScope::getElementById):
        (WebCore::TreeScope::addElementById):
        (WebCore::TreeScope::removeElementById):
        (WebCore::TreeScope::addImageMap):
        (WebCore::TreeScope::removeImageMap):
        (WebCore::TreeScope::getImageMap):
        (WebCore::TreeScope::addLabel):
        (WebCore::TreeScope::removeLabel):
        (WebCore::TreeScope::labelElementForId):
        * dom/TreeScope.h:
        (WebCore::TreeScope::shouldCacheLabelsByForAttribute):
        (TreeScope):
        (WebCore::TreeScope::hasElementWithId):
        (WebCore::TreeScope::containsMultipleElementsWithId):

2012-11-14  Jer Noble  <jer.noble@apple.com>

        Add a new shared class WebCoreFullScreenWarningView which presents a styled warning message.
        https://bugs.webkit.org/show_bug.cgi?id=102299

        Reviewed by Alexey Proskuryakov.

        Add a shared implementation of a warning view for use in WebKit and WebKit2.

        * platform/mac/WebCoreFullScreenWarningView.h: Added.
        * platform/mac/WebCoreFullScreenWarningView.mm: Added.
        (-[WebCoreFullScreenWarningView initWithTitle:]): Create the view.

        Add the new files to the project and exports list:
        * WebCore.exp.in:
        * WebCore.xcodeproj/project.pbxproj:

2012-11-27  Dean Jackson  <dino@apple.com>

        Make track list control active
        https://bugs.webkit.org/show_bug.cgi?id=101670

        Reviewed by Eric Carlson.

        Hook up the event handler for the captions menu so that it enables or
        disables tracks in the associated HTMLMediaElement.

        Test: media/video-controls-captions-trackmenu.html

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::toggleTrackAtIndex): New method to toggle the state of a track, by index.
        * html/HTMLMediaElement.h:
        (HTMLMediaElement): Ditto.
        (WebCore::HTMLMediaElement::textTracksOffIndex): Static method to return the "Off" value.
        * html/shadow/MediaControlElements.cpp:
        (WebCore::trackListIndexForElement): Helper function to take a track list <li> element and return the value of the custom attribute.
        (WebCore::MediaControlToggleClosedCaptionsButtonElement::updateDisplayType): Toggle the state of the button based on captions visibility.
        (WebCore::MediaControlToggleClosedCaptionsButtonElement::defaultEventHandler): On Mac platforms show the captions menu. On other platforms, toggle captions.
        (WebCore::MediaControlClosedCaptionsTrackListElement::MediaControlClosedCaptionsTrackListElement): Now has a reference to the controls.
        (WebCore::MediaControlClosedCaptionsTrackListElement::create):
        (WebCore::MediaControlClosedCaptionsTrackListElement::defaultEventHandler): When the user clicks on a track list item, look
        for the custom attribute that identifies the associated track, and then toggle that track.
        (WebCore::MediaControlClosedCaptionsTrackListElement::updateDisplay): Set a class on the track list elements so they can be
        styled by the injected CSS (with tick marks to represent visibility).
        (WebCore::MediaControlClosedCaptionsTrackListElement::resetTrackListMenu): When building the list of track menu items, add
        a custom HTML attribute to the element so that the corresponding track can be found in the event handler.
        * html/shadow/MediaControlElements.h:
        (MediaControlClosedCaptionsTrackListElement): Add a list of elements representing the track list.
        * html/shadow/MediaControlsApple.cpp:
        (WebCore::MediaControlsApple::createControls):
        (WebCore::MediaControlsApple::changedClosedCaptionsVisibility): Make sure to update the track menu.
        (WebCore::MediaControlsApple::reset):
        * html/shadow/MediaControlsApple.h:
        (MediaControlsApple):

2012-11-27  Joshua Bell  <jsbell@chromium.org>

        IndexedDB: Simplify transaction timers and event tracking
        https://bugs.webkit.org/show_bug.cgi?id=102984

        Reviewed by Tony Chang.

        Now that the transaction "commit" decision is made on the front-end, the back end no-longer
        needs to be aware of when individual IDBRequests have dispatched to script or track pending
        events (except for preemptive ones like createIndex). This also lets two timers be collapsed
        into one which significantly simplifies the code flow in IDBTransactionBackendImpl.

        No new tests - just simplification. Exercised by storage/indexeddb/transaction-*.html etc.

        * Modules/indexeddb/IDBCursorBackendImpl.cpp:
        (WebCore::IDBCursorBackendImpl::prefetchContinueInternal): No more tracking.
        (WebCore::IDBCursorBackendImpl::prefetchReset): No more tracking.
        * Modules/indexeddb/IDBDatabaseBackendImpl.cpp:
        (WebCore::IDBDatabaseBackendImpl::createObjectStoreInternal): No more tracking.
        (WebCore::IDBDatabaseBackendImpl::deleteObjectStoreInternal): No more tracking.
        * Modules/indexeddb/IDBObjectStoreBackendImpl.cpp:
        (WebCore::IDBObjectStoreBackendImpl::setIndexesReadyInternal): No more tracking.
        (WebCore::IDBObjectStoreBackendImpl::createIndexInternal): No more tracking.
        (WebCore::IDBObjectStoreBackendImpl::deleteIndexInternal): No more tracking.
        * Modules/indexeddb/IDBRequest.cpp:
        (WebCore::IDBRequest::dispatchEvent): Order must be:
        1. request is unregistered from transaction (so request list may be empty)
        2. abort transaction if event being dispatched was an error
        3. deactivate transaction (which may commit if #1 left it empty and #2 didn't abort)
        * Modules/indexeddb/IDBTransactionBackendImpl.cpp:
        (WebCore::IDBTransactionBackendImpl::IDBTransactionBackendImpl): Need to track if commit
        was requested; previously the front end would have triggered an event timer which, on
        completion, would be the signal that the front end was finished.
        (WebCore::IDBTransactionBackendImpl::scheduleTask): Schedule a timer to service the new
        task, if necessary.
        (WebCore::IDBTransactionBackendImpl::abort):
        (WebCore::IDBTransactionBackendImpl::hasPendingTasks):
        (WebCore::IDBTransactionBackendImpl::commit):
        (WebCore::IDBTransactionBackendImpl::taskTimerFired): Picks up "commit" responsibilities
        from the now deleted taskEventTimerFired, if everything is truly complete done.
        * Modules/indexeddb/IDBTransactionBackendImpl.h:
        (IDBTransactionBackendImpl):
        * Modules/indexeddb/IDBTransactionBackendInterface.h:
        (WebCore::IDBTransactionBackendInterface::didCompleteTaskEvents): Removed from interface.

2012-11-27  Kentaro Hara  <haraken@chromium.org>

        [V8] Replace toWebCoreString()/toWebCoreAtomicString() in CodeGeneratorV8.pm with V8StringResource
        https://bugs.webkit.org/show_bug.cgi?id=103391

        Reviewed by Adam Barth.

        This is an incremental effort for fixing bug 103331.
        I confirmed that this patch causes no performance regression
        for the micro benchmarks (https://bugs.webkit.org/attachment.cgi?id=176178).

        No tests. No change in behavior.

        * bindings/scripts/CodeGeneratorV8.pm:
        (GenerateNormalAttrSetter):
        (GenerateEventListenerCallback):
        * bindings/scripts/test/V8/V8TestEventTarget.cpp:
        (WebCore::TestEventTargetV8Internal::addEventListenerCallback):
        (WebCore::TestEventTargetV8Internal::removeEventListenerCallback):
        * bindings/scripts/test/V8/V8TestObj.cpp:
        (WebCore::TestObjV8Internal::addEventListenerCallback):
        (WebCore::TestObjV8Internal::removeEventListenerCallback):

2012-11-27  Alexandru Chiculita  <achicu@adobe.com>

        [CSS Regions] Elements using transforms are not repainted correctly when rendered in a region
        https://bugs.webkit.org/show_bug.cgi?id=102826

        Reviewed by David Hyatt.

        When the page is composited, all the elements will have a composited repaint container. In that case we will
        never catch the repaints in the RenderFlowThread, but they will go directly to the RenderView. 
        There's a single case when the parent composited layer of an element inside the RenderFlowThread will get 
        its own repaints. That case only happens when the parent composited layer is also part of the same flow thread.
        Right now compositing is disabled for elements inside the RenderFlowThread, so that case doesn't even happen yet.
        That will be fixed in https://bugs.webkit.org/show_bug.cgi?id=84900.

        Test: fast/repaint/region-painting-in-composited-view.html

        * rendering/RenderObject.cpp:
        (WebCore::RenderObject::containerForRepaint):

2012-11-27  Tony Chang  <tony@chromium.org>

        Unreviewed, win compile fix take 2.

        Try again to force this file to recompile.

        * rendering/RenderingAllInOne.cpp:

2012-11-27  Tony Chang  <tony@chromium.org>

        Unreviewed, win compile fix.

        Touch RenderingAllInOne.cpp to force it to rebuild.

        * rendering/RenderingAllInOne.cpp:

2012-11-27  Tim Horton  <timothy_horton@apple.com>

        PDFPlugin: Scroll bars do not grow on hover
        https://bugs.webkit.org/show_bug.cgi?id=103382
        <rdar://problem/12555262>

        Reviewed by Beth Dakin.

        Export a few WebCore::Scrollbar methods to WebKit(2).

        * WebCore.exp.in:

2012-11-27  Tom Sepez  <tsepez@chromium.org>

        Regression(r129406): Fix the scope of the WidgetHierarchyUpdateSuspensionScope in Element::Attach().
        https://bugs.webkit.org/show_bug.cgi?id=100803

        Reviewed by Abhishek Arya.

        Ensures that the suspension scope has gone out of scope before calling into
        resumePostAttachCallbacks().
        
        Test: fast/dom/adopt-node-crash-2.html

        * dom/Element.cpp:
        (WebCore::Element::attach):

2012-11-27  Tony Chang  <tony@chromium.org>

        Remove hidden limiter div in the input slider shadow DOM
        https://bugs.webkit.org/show_bug.cgi?id=102993

        Reviewed by Ojan Vafai.

        The shadow DOM for input sliders would have a hidden div (the TrackLimiterElement)
        the size of the thumb which would limit the position of thumb since the width of
        the thumb takes up space in the track. This patch simplifies the shadow DOM by
        removing this hidden div and computing the position of the thumb taking the size of
        the thumb into account.

        No new tests, covered by existing tests in fast/forms.

        * css/mediaControlsChromium.css:
        (input[type="range"]::-webkit-media-slider-container > div): We were depending on the behavior of the limiter having negative margins, causing the slider div
        to overflow. Moving the negative margin to the slider produces the same effect.
        * css/mediaControlsChromiumAndroid.css:
        (input[type="range"]::-webkit-media-slider-container > div): Ditto.
        * html/RangeInputType.cpp:
        (WebCore::RangeInputType::createShadowSubtree): Remove limiter div.
        * html/shadow/SliderThumbElement.cpp:
        (WebCore::RenderSliderContainer::layout): Adjust the available space for the thumb and correctly position in the vertical case.
        (WebCore::SliderThumbElement::setPositionFromPoint): Adjust the usable track size and simplify RTL code (no need to account for the limiter).
        (WebCore): Delete limiter code.
        * html/shadow/SliderThumbElement.h:
        (WebCore): Delete limiter code.
        * rendering/RenderSlider.cpp:
        (WebCore::RenderSlider::layout): Delete limiter code.
        * rendering/RenderTheme.cpp:
        (WebCore::RenderTheme::paintSliderTicks): Simplify code for painting tick marks.

2012-11-27  Alpha Lam  <hclam@chromium.org>

        [chromium] Implement full-featured image cache
        https://bugs.webkit.org/show_bug.cgi?id=99784

        Reviewed by Stephen White.

        Implement a thread-safe image cache to be used with deferred image
        decoding. Image cache can now be accessed on any thread.

        The patch implements the following logic:
        1. Mutex to protect all cache operations.
        2. Cache indexing using key (ImageFrameGenerator*, SkISize scaledSize)
        3. Cache lookup.
        4. Cache insertion.
        5. Generation of cache entry by scaling full size image.
        6. Generation of cache entries by decoding and scaling.

        Classes involved:

        ImageDecodingStore

        Responsible for owning cache entries and indexing. Pruning and memory
        management will be added later.

        ImageFrameGenerator

        Responsible for generating new cache enties and insert them into
        ImageDecodingStore.

        LazyDecodingPixelRef

        Responsible for cache lookup and lazy generation of cache entries
        using ImageFrameGenerator. There is a mutex to protect concurrent
        lock operations.

        These items are not implemented in this patch:
        1. Cache pruning.
        2. Setting cache memory limit.
        3. Cache deletion.
        4. Caching incomplete images and ImageDecoder.

        Unit tests added in ImageFrameGeneratorTest.cpp.
        Layout tests are under platform/chromium/virtual/fast/images.

        * platform/graphics/chromium/DeferredImageDecoder.cpp:
        (WebCore::DeferredImageDecoder::~DeferredImageDecoder):
        (WebCore::DeferredImageDecoder::createResizedLazyDecodingBitmap):
        (WebCore::DeferredImageDecoder::setEnabled):
        (WebCore):
        (WebCore::DeferredImageDecoder::frameBufferAtIndex):
        (WebCore::DeferredImageDecoder::createLazyDecodingBitmap):
        * platform/graphics/chromium/DeferredImageDecoder.h:
        (DeferredImageDecoder):
        * platform/graphics/chromium/ImageDecodingStore.cpp:
        (WebCore::ImageDecodingStore::instance):
        (WebCore::ImageDecodingStore::initializeOnce):
        (WebCore::ImageDecodingStore::shutdown):
        (WebCore::ImageDecodingStore::lockCompleteCache):
        Lookup complete cache entry using hash key, increment use count.
        (WebCore::ImageDecodingStore::lockIncompleteCache): TODO.
        (WebCore::ImageDecodingStore::unlockCache):
        Lookup cache entry using hash key, decrement use count.
        (WebCore):
        (WebCore::ImageDecodingStore::insertAndLockCache):
        Insert new cache entry and increment use count.
        (WebCore::ImageDecodingStore::prune): TODO.
        * platform/graphics/chromium/ImageDecodingStore.h:
        (WebCore):
        (ImageDecodingStore):
        (WebCore::ImageDecodingStore::CacheEntry::create):
        (WebCore::ImageDecodingStore::CacheEntry::createAndUse):
        (CacheEntry):
        (WebCore::ImageDecodingStore::CacheEntry::CacheEntry):
        (WebCore::ImageDecodingStore::CacheEntry::~CacheEntry):
        * platform/graphics/chromium/ImageFrameGenerator.cpp:
        (WebCore::ImageFrameGenerator::ImageFrameGenerator):
        (WebCore::ImageFrameGenerator::setData):
        (WebCore::ImageFrameGenerator::decodeAndScale):
        Method for creating new cache entries. This is protected by a mutex
        to prevent concurrent operations. Which means only one thread can
        generate new cache entries for a set of encoded data.
        (WebCore):
        (WebCore::ImageFrameGenerator::tryToLockCache):
        Tries to lookup a cache entry.
        (WebCore::ImageFrameGenerator::tryToScale):
        Tries to lookup a full size cache entry and generate a scaled version.
        (WebCore::ImageFrameGenerator::tryToDecodeAndScale):
        Tries to decode and scale.
        * platform/graphics/chromium/ImageFrameGenerator.h:
        (WebCore):
        (ImageDecoderFactory):
        (WebCore::ImageFrameGenerator::create):
        (ImageFrameGenerator):
        (WebCore::ImageFrameGenerator::setImageDecoderFactoryForTesting):
        * platform/graphics/chromium/LazyDecodingPixelRef.cpp:
        (WebCore::LazyDecodingPixelRef::LazyDecodingPixelRef):
        (WebCore::LazyDecodingPixelRef::onLockPixels):
        (WebCore::LazyDecodingPixelRef::onUnlockPixels):
        * platform/graphics/chromium/LazyDecodingPixelRef.h:
        (WebCore):
        (LazyDecodingPixelRef):
        * platform/graphics/chromium/ScaledImageFragment.cpp:
        (WebCore::ScaledImageFragment::ScaledImageFragment):
        * platform/graphics/chromium/ScaledImageFragment.h:
        (WebCore):
        (WebCore::ScaledImageFragment::create):
        (ScaledImageFragment):
        (WebCore::ScaledImageFragment::scaledSize):
        * platform/graphics/chromium/SkSizeHash.h: Added.
        (WTF):

2012-11-27  Mike West  <mkwst@chromium.org>

        Expanding variable names in ConsoleMessage.
        https://bugs.webkit.org/show_bug.cgi?id=103436

        Reviewed by Adam Barth.

        Variable names like 'm' should be replaced with full words, like
        'myOhMyThisIsAnAwesomeVariable' (or something more descriptive).

        * inspector/ConsoleMessage.cpp:
        (WebCore::ConsoleMessage::ConsoleMessage):
        * inspector/ConsoleMessage.h:
        (ConsoleMessage):

2012-11-27  Aaron Colwell  <acolwell@chromium.org>

        Use-after-free in media player handling
        https://bugs.webkit.org/show_bug.cgi?id=103426

        Reviewed by Eric Carlson.

        Fixed use-after-free bugs caused by the MediaSource not being closed before the HTMLMediaElement or the MediaPlayer
        is destroyed. Closing the MediaSource causes it to clear its reference to the MediaPlayer which prevents
        the use-after-free problems from happening.

        Test: http/tests/media/media-source/video-media-source-closed-on-htmlmediaelement-destruction.html

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::~HTMLMediaElement):
        (WebCore::HTMLMediaElement::clearMediaPlayer):

2012-11-27  David Grogan  <dgrogan@chromium.org>

        IndexedDB: Remove IDBDatabase.setVersion API
        https://bugs.webkit.org/show_bug.cgi?id=94972

        Reviewed by Tony Chang.

        This has been out of the spec for over a year. No other browser has
        implemented it for close to a year.

        Tests - removed.html

        * Modules/indexeddb/IDBCallbacks.h:
        (IDBCallbacks):
        * Modules/indexeddb/IDBDatabase.cpp:
        (WebCore::IDBDatabase::IDBDatabase):
        * Modules/indexeddb/IDBDatabase.h:
        (IDBDatabase):
        * Modules/indexeddb/IDBDatabase.idl:
        * Modules/indexeddb/IDBDatabaseBackendImpl.cpp:
        (WebCore::IDBDatabaseBackendImpl::processPendingCalls):
        * Modules/indexeddb/IDBDatabaseBackendImpl.h:
        (IDBDatabaseBackendImpl):
        * Modules/indexeddb/IDBDatabaseBackendInterface.h:
        (IDBDatabaseBackendInterface):
        * Modules/indexeddb/IDBRequest.cpp:
        * Modules/indexeddb/IDBRequest.h:

2012-11-27  Mike West  <mkwst@chromium.org>

        Log to console when autofocus is blocked by sandbox attribute.
        https://bugs.webkit.org/show_bug.cgi?id=103255

        Reviewed by Ojan Vafai.

        Adding a short log message when autofocus is blocked by a document's
        sandbox flags, as it's currently a black box.

        Test: fast/forms/autofocus-in-sandbox-without-allow-scripts.html

        * html/HTMLFormControlElement.cpp:
        (WebCore::shouldAutofocus):

2012-11-27  Dean Jackson  <dino@apple.com>

        Attempted build fix after http://trac.webkit.org/changeset/135888.

        * WebCore.exp.in:
        * WebCore.order:

2012-11-27  Ryosuke Niwa  <rniwa@webkit.org>

        Build fix after r135890. #else, not #elif.

        * platform/graphics/ca/PlatformCALayer.h:
        (PlatformCALayer):

2012-11-27  Ryosuke Niwa  <rniwa@webkit.org>

        HTMLCollection on Document should be stored on NodeListsNodeData like other HTMLCollections and LiveNodeLists
        https://bugs.webkit.org/show_bug.cgi?id=103364

        Reviewed by Anders Carlsson.

        Replaced the HTMLCollection storage in Document by NodeListsNodeData used by other HTMLCollection's
        and LiveNodeList's. Now NodeListsNodeData is the only storage for HTMLCollection and LiveNodeList.

        * dom/Document.cpp:
        (WebCore::Document::Document): Removed code for m_collection since it has been removed.
        (WebCore::Document::~Document): Ditto.
        (WebCore::Document::registerNodeList): Renamed. 
        (WebCore::Document::unregisterNodeList): Ditto.
        (WebCore::Document::ensureCachedCollection): Renamed from cachedCollection to match the convetion
        used elsewhere. Also use NodeListNodeData::addCacheWithAtomicName now that m_collection is gone.
        (WebCore::Document::images):
        (WebCore::Document::applets):
        (WebCore::Document::embeds):
        (WebCore::Document::plugins):
        (WebCore::Document::scripts):
        (WebCore::Document::links):
        (WebCore::Document::forms):
        (WebCore::Document::anchors):
        (WebCore::Document::all):
        (WebCore::Document::windowNamedItems): Use addCacheWithAtomicName.
        (WebCore::Document::documentNamedItems): Ditto.
        (WebCore::Document::reportMemoryUsage): Removed code for m_collection since it has been removed.
        * dom/Document.h:
        (WebCore::Document): Removed m_collections, m_documentNamedItemCollections, and
        m_windowNamedItemCollections.
        * dom/Element.cpp:
        (WebCore::Element::ensureCachedHTMLCollection): Merged ElementRareData::ensureCachedHTMLCollection.
        (WebCore::Element::cachedHTMLCollection): Merged ElementRareData::cachedHTMLCollection.
        * Source/WebCore/dom/ElementRareData.h: Removed ensureCachedHTMLCollection, cachedHTMLCollection,
        and removeCachedHTMLCollection since they're no longer used.
        * dom/LiveNodeList.h:
        (WebCore::LiveNodeListBase::LiveNodeListBase): Call registerNodeList now that LiveNodeList
        and HTMLCollection share the same storage in all nodes.
        (WebCore::LiveNodeListBase::~LiveNodeListBase): Ditto about unregisterNodeList.
        (WebCore::LiveNodeList): Removed the calls to registerNodeList and unregisterNodeList since they
        are now called in the base class.
        * dom/NameNodeList.h:
        (WebCore::NameNodeList::create):
        * dom/NodeRareData.h:
        (WebCore::NodeListsNodeData::addCacheWithAtomicName): Pass in CollectionType as the second argument
        to T::create. This is used in HTMLNameCollection::create. Sevearl LiveNodeList constructors and
        create functions have been modified to support this.
        (WebCore::NodeListsNodeData::adoptTreeScope):
        (WebCore::NodeListsNodeData::namedNodeListKey): CollectionType is no longer restricted in its range.
        * dom/TagNodeList.h:
        (WebCore::TagNodeList::create):
        (WebCore::HTMLTagNodeList::create):
        * html/CollectionType.h: Deleted a bunch of unused inline functions and constants, and cleanup enum.
        * html/HTMLCollection.cpp:
        (WebCore::HTMLCollection::HTMLCollection): Removed the call to registerNodeListCache since it's called
        in LiveNodeListBase now.
        (WebCore::HTMLCollection::~HTMLCollection): Ditto. Also replaced calls to removeCachedHTMLCollection
        of Element and Document by a call to NodeListsNodeData::removeCacheWithAtomicName.
        * html/HTMLFormControlsCollection.cpp:
        (WebCore::HTMLFormControlsCollection::HTMLFormControlsCollection):
        (WebCore::HTMLFormControlsCollection::create):
        * html/HTMLFormControlsCollection.h:
        (HTMLFormControlsCollection):
        * html/HTMLNameCollection.cpp:
        (WebCore::HTMLNameCollection::HTMLNameCollection):
        (WebCore::HTMLNameCollection::~HTMLNameCollection):
        * html/HTMLNameCollection.h:
        (WebCore::HTMLNameCollection::create):
        (HTMLNameCollection):
        * html/HTMLOptionsCollection.cpp:
        (WebCore::HTMLOptionsCollection::HTMLOptionsCollection):
        (WebCore::HTMLOptionsCollection::create):
        * html/HTMLOptionsCollection.h:
        (HTMLOptionsCollection):
        * html/HTMLTableRowsCollection.cpp:
        (WebCore::HTMLTableRowsCollection::HTMLTableRowsCollection):
        (WebCore::HTMLTableRowsCollection::create):
        * html/HTMLTableRowsCollection.h:
        (HTMLTableRowsCollection):
        * html/LabelsNodeList.h:
        (WebCore::LabelsNodeList::create):
        * html/RadioNodeList.h:
        (WebCore::RadioNodeList::create):

2012-11-27  Pravin D  <pravind.2k4@gmail.com>

        max-height property not respected in case of tables
        https://bugs.webkit.org/show_bug.cgi?id=98633

        Reviewed by Julien Chaffraix.

        The max-height property determines the maximum computed height an element can have. In case of tables
        the computed height was not being limited by the max-height property. The current patch fixes the same.

        Test: fast/table/css-table-max-height.html

        * rendering/RenderTable.cpp:
        (WebCore::RenderTable::convertStyleLogicalHeightToComputedHeight):
          Helper function to compute height from the given style height.
          This function handles style height of type fixed, percent and viewport percent.
          As height of type 'calculated' gets internally resolved to either fixed or percent
          there is no special handling required for the same.

        (WebCore):
        (WebCore::RenderTable::layout):
          Logic to compute the logical height of an element such that it does not exceed the max-height value given that
          min-width < Content height < max-height, when min-height < max-height.
          However max-height value is not respected if either min-height > max-height or Content height > max-height.

        * rendering/RenderTable.h:
        (RenderTable):
          Function definition for the newly add function convertStyleLogicalHeightToComputedHeight().

2012-11-27  Roger Fong  <roger_fong@apple.com>

        Windows specific implementation of usesTileCacheLayer needed after r133056.
        https://bugs.webkit.org/show_bug.cgi?id=103321

        Reviewed by Simon Fraser.

        After r133056 it no longer suffices to use the existing usesTileCacheLayer method on Windows.
        The change resulted in 3 crashing tests:
        compositing/rotated-tiled-clamped
        compositing/rotated-tiled-preserve3d-clamped
        fast/events/tabindex-focus-blur-all

        * platform/graphics/ca/PlatformCALayer.h:
        (WebCore::PlatformCALayer::usesTileCacheLayer):
        (PlatformCALayer): 
        Adding in platform specific method for Windows that returns false for this method.

2012-11-27  Christophe Dumez  <christophe.dumez@intel.com>

        Canvas does not draw any text if the font is not fully loaded yet
        https://bugs.webkit.org/show_bug.cgi?id=103392

        Reviewed by Kenneth Rohde Christiansen.

        Update CanvasRenderingContext2D::drawTextInternal() so that the
        text is being drawn, even if custom fonts are still being loaded.
        Without this, WebKit was not drawing any text on the canvas if
        the needed font is custom and is not fully loaded yet. This seems
        broken.

        The new behavior is according to specification:
        http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html

        The specification says: "If a font is used before it is fully
        loaded, or if the font style source object does not have that
        font in scope at the time the font is to be used, then it must be
        treated as if it was an unknown font, falling back to another as
        described by the relevant CSS specifications."

        Test: http/tests/canvas/canvas-slow-font-loading.html

        * html/canvas/CanvasRenderingContext2D.cpp:
        (WebCore::CanvasRenderingContext2D::drawTextInternal):
        * platform/graphics/Font.cpp:
        (WebCore::Font::drawText): Add argument to specify the behavior
        when custom fonts are not ready. By default, it will not draw
        anything (same behavior as before). However, the Canvas code
        can now request that a fallback font is used if the custom
        font is not fully loaded yet.
        * platform/graphics/Font.h: #undef Complex if defined to avoid
        conflicting with Complex value in CodePath enum. X11/X.h is
        defining Complex to 0.
        * platform/graphics/GraphicsContext.cpp:
        (WebCore::GraphicsContext::drawBidiText):
        * platform/graphics/GraphicsContext.h:
        (WebCore):
        (GraphicsContext):

2012-11-27  Dean Jackson  <dino@apple.com>

        No need for ExceptionCode in HTMLMediaElement::load
        https://bugs.webkit.org/show_bug.cgi?id=103438

        Reviewed by Eric Carlson.

        After https://bugs.webkit.org/show_bug.cgi?id=103318, there is no
        need for the ExceptionCode parameter in load(). The HTML5 spec says
        that all errors in loading are communicated via state.
        http://dev.w3.org/html5/spec/media-elements.html#dom-media-load

        Of the 29 tests exercising load(), none of them were exercising
        exceptions (obviously).

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::load):
        (WebCore::HTMLMediaElement::resume):
        * html/HTMLMediaElement.h:
        * html/HTMLMediaElement.idl:

2012-11-27  Robert Hogan  <robert@webkit.org>

        REGRESSION (r125578): word-wrapping in absolute position with nbsp, word-spacing and custom font
        https://bugs.webkit.org/show_bug.cgi?id=101443

        Reviewed by David Hyatt.

        Leading non-breaking space in a text run should always get word-spacing applied. When RenderText
        calculates the preferred with of a run of text it breaks it up into word segments that contain
        no breaking spaces and calculates the width of each. So when calculating the width of '&nbsp;b' 
        it needs to add word-spacing to the leading non-breaking space as it does not get collapsed away.

        Test: fast/text/word-space-nbsp.html

        * platform/graphics/WidthIterator.cpp:
        (WebCore::WidthIterator::advanceInternal):

2012-11-27  Yong Li  <yoli@rim.com>

        [BlackBerry] EventLoop should end when WebKit thread is exiting
        https://bugs.webkit.org/show_bug.cgi?id=103301

        Reviewed by Rob Buis.
        RIM PR# 194379.
        Internally reviewed by Joe Mason.

        Break the nested event loop when WebKit thread has been asked to quit.

        * platform/blackberry/EventLoopBlackBerry.cpp:
        (WebCore::EventLoop::cycle):

2012-11-27  Pratik Solanki  <psolanki@apple.com>

        objc/objc-runtime.h does not exist on all PLATFORM(MAC)
        https://bugs.webkit.org/show_bug.cgi?id=101780

        Reviewed by Brent Fulgham.

        Clean up header includes so we don't include objc/objc-runtime.h.

        No new tests because no functional changes.

        * bridge/objc/objc_header.h:
        * page/mac/EventHandlerMac.mm:
        * platform/graphics/avfoundation/objc/MediaPlayerPrivateAVFoundationObjC.mm:
        * platform/graphics/avfoundation/objc/WebCoreAVFResourceLoader.mm:
        * platform/graphics/ca/mac/PlatformCALayerMac.mm:
        * platform/graphics/mac/MediaPlayerPrivateQTKit.mm:
        * platform/graphics/mac/WebLayer.mm:
        * platform/mac/WebCoreObjCExtras.mm:
        * platform/mac/WebVideoFullscreenController.mm:

2012-11-27  Eberhard Graether  <egraether@google.com>

        Plumbing showPaintRects out of InspectorPageAgent to use a different drawing implementation if available.
        https://bugs.webkit.org/show_bug.cgi?id=102452

        Reviewed by Pavel Feldman.

        This change makes the showPaintRects setting in the Web Inspector's settings notify InspectorClient
        when changed. And the default paint rects drawing is not used if an alternative is available.
        This allows Chromium to draw the paint rects in the compositor's HUDLayer.

        No new tests.

        * inspector/InspectorClient.h:
        (WebCore::InspectorClient::overridesShowPaintRects):
        (WebCore::InspectorClient::setShowPaintRects):
        (InspectorClient):
        * inspector/InspectorPageAgent.cpp:
        (PageAgentState):
        (WebCore::InspectorPageAgent::restore):
        (WebCore::InspectorPageAgent::disable):
        (WebCore::InspectorPageAgent::setShowPaintRects):
        (WebCore::InspectorPageAgent::didPaint):

2012-11-27  Allan Sandfeld Jensen  <allan.jensen@digia.com>

        Unreviewed cleanup.

        Remove leftover file that was replaced by PlatformScreenQt.cpp 4 years ago.

        * platform/qt/ScreenQt.cpp: Removed.

2012-11-27  Istiaque Ahmed  <lazyboy@chromium.org>

        freeV8NPObject: Skip trying to remove object from per context data's ObjectMap if the object does not exist in the map.
        https://bugs.webkit.org/show_bug.cgi?id=103356

        Reviewed by Adam Barth.

        Before introducing per context data, it used to be the case that we would ignore removing v8 object
        from context data's map if we couldn't find it. With perContextData change, this turned into an ASSERT
        instead and we had crash reports.
        Related crbug.com/154462.

        Test: platform/chromium/plugins/release-frame-content-window.html

        * bindings/v8/NPV8Object.cpp:
        (WebCore::freeV8NPObject):

2012-11-27  Marja Hölttä  <marja@chromium.org>

        Add callbacks to the FrameLoaderClient when a resource is requested
        https://bugs.webkit.org/show_bug.cgi?id=92761

        Reviewed by Adam Barth.

        In Chromium, when an extension script cancels a network
        request (which happens out of process), we'd like to
        notify content scripts running on the current page about
        which elements failed to load because the requests were
        cancelled (as opposed to e.g. the network request just
        didn't work). Since the resource request itself does not
        carry any information what DOM element is was made for,
        currently a content script has to search the DOM tree and
        guess which requests will be cancelled by its counter
        part. By adding these callbacks, the embedder can make
        this connection explictly.

        Test: platform/chromium/fast/loader/resource-request-callbacks.html

        * loader/FrameLoaderClient.h:
        (WebCore):
        (WebCore::FrameLoaderClient::dispatchWillRequestResource):
        (FrameLoaderClient):
        * loader/cache/CachedResourceLoader.cpp:
        (WebCore::CachedResourceLoader::requestResource):

2012-11-27  Dean Jackson  <dino@apple.com>

        Unreviewed build fix for r135866.

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::load):

2012-11-27  Leo Yang  <leoyang@rim.com>

        [BlackBerry] Adapt to the change of BlackBerry::Platform::FilterStream::notifyHeadersReceived
        https://bugs.webkit.org/show_bug.cgi?id=103425

        Reviewed by Yong Li.

        A const has been added for HeaderList parameter of BlackBerry::Platform::FilterStream::notifyHeadersReceived.
        The patch is adapting to this change.

        No functionalities changed no new tests.

        * platform/network/blackberry/NetworkJob.cpp:
        (WebCore::NetworkJob::notifyHeadersReceived):
        * platform/network/blackberry/NetworkJob.h:
        (NetworkJob):
        * platform/network/blackberry/rss/RSSFilterStream.cpp:
        (WebCore::RSSFilterStream::notifyHeadersReceived):
        * platform/network/blackberry/rss/RSSFilterStream.h:

2012-11-27  Min Qin  <qinmin@chromium.org>

        Don't throw an exception if user gesture is required for load
        https://bugs.webkit.org/show_bug.cgi?id=103318

        Reviewed by Eric Carlson.

        There is no need to throw an exception if media load requires user gesture.
        Since chrome does not render the poster and media control after an exception is thrown, throwing an exception may break a lot of sites on android.
        Change a current test to match the new behavior: media/video-load-require-user-gesture.html

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::load):

2012-11-27  Víctor Manuel Jáquez Leal  <vjaquez@igalia.com>

        [GStreamer] Verify if GStreamer was previously initialized
        https://bugs.webkit.org/show_bug.cgi?id=103151

        Reviewed by Philippe Normand.

        This patch calls gst_is_initialized() before calling gst_init_check()
        in order to verify if GStreamer has not been initialized before.

        This is useful particularly for WebKit1 so the applications could
        initialize GStreamer before.

        As the API call was added in GStreamer v0.10.31, the patch fences the
        call only in that version of GStreamer or above.

        No new tests, existing media tests cover this change.

        * platform/graphics/gstreamer/GStreamerUtilities.cpp:
        (WebCore::initializeGStreamer):

2012-11-27  Kentaro Hara  <haraken@chromium.org>

        [V8] Remove V8StringResource::m_string
        https://bugs.webkit.org/show_bug.cgi?id=103367

        Reviewed by Adam Barth.

        This patch cleans up V8StringResource and removes V8StringResource::m_string.
        This patch won't change performance. (This patch just adds one redundant IsString()
        check and one IsInt32() check.) I confirmed no performance regression in micro benchmarks
        (https://bugs.webkit.org/attachment.cgi?id=176178).

        No tests. No change in behavior.

        * bindings/v8/V8Binding.cpp:
        (WebCore::v8NonStringValueToWebCoreString):
        * bindings/v8/V8StringResource.cpp:
        (WebCore::int32ToWebCoreStringFast):
        (WebCore::String):
        (WebCore::AtomicString):
        (WebCore):
        * bindings/v8/V8StringResource.h:
        (WebCore::V8StringResource::V8StringResource):
        (WebCore::V8StringResource::prepareBase):
        (WebCore::V8StringResource::toString):
        (V8StringResource):
        (WebCore::::prepare):

2012-11-27  Alec Flett  <alecflett@chromium.org>

        IndexedDB: stub out IDBDatabaseBackendInterface::createTransaction
        https://bugs.webkit.org/show_bug.cgi?id=102730

        Reviewed by Darin Fisher.

        Stub out and support passing a 64-bit transaction id
        so the frontend can refer to transactions by id rather than
        a proxy object or a direct pointer reference. This will ultimately
        loosen ownership and lifetime of transactions from the frontend
        and backend.

        No new tests, this is just part of a refactor.

        * Modules/indexeddb/IDBDatabase.cpp:
        * Modules/indexeddb/IDBDatabaseBackendImpl.cpp:
        (WebCore):
        (WebCore::IDBDatabaseBackendImpl::transaction):
        (WebCore::IDBDatabaseBackendImpl::createTransaction):
        * Modules/indexeddb/IDBDatabaseBackendImpl.h:
        (IDBDatabaseBackendImpl):
        * Modules/indexeddb/IDBDatabaseBackendInterface.h:
        (IDBDatabaseBackendInterface):
        * Modules/indexeddb/IDBTransactionBackendImpl.cpp:
        (WebCore::IDBTransactionBackendImpl::create):
        (WebCore::IDBTransactionBackendImpl::IDBTransactionBackendImpl):
        * Modules/indexeddb/IDBTransactionBackendImpl.h:
        (IDBTransactionBackendImpl):
        (WebCore::IDBTransactionBackendImpl::id):

2012-11-27  Andrei Bucur  <abucur@adobe.com>

        [CSS Regions] Crash when dispatching regionlayoutupdate
        https://bugs.webkit.org/show_bug.cgi?id=102944

        Reviewed by Andreas Kling.

        The event dispatch function was incorrectly assuming the RenderNamedFlowThread is valid. Because the event is asynchronous it's
        possible for the flow to be in the "NULL" state (the renderer is 0) while the regionlayoutupdate event is dispatched.

        Test: fast/regions/webkit-named-flow-event-crash.html

        * dom/WebKitNamedFlow.cpp:
        (WebCore::WebKitNamedFlow::dispatchRegionLayoutUpdateEvent): Remove the ASSERT and don't dispatch the event if the flow is
            in the "NULL" state.

2012-11-27  Mihnea Ovidenie  <mihnea@adobe.com>

        [CSS Regions] Absolutely positioned regions do not expand to fill their container
        https://bugs.webkit.org/show_bug.cgi?id=102385

        Reviewed by Julien Chaffraix.

        In the case of an absolutely positioned region with height auto, height computation should follow
        the path of block elements instead of replaced elements.

        Tests: fast/regions/autosize-abspos-anchoredregion-vertlr.html
               fast/regions/autosize-abspos-anchoredregion.html

        * rendering/RenderBox.cpp:
        (WebCore::RenderBox::computePositionedLogicalHeight): Skip replaced element height computation when a region has height auto.
        * rendering/RenderRegion.h:
        (WebCore::RenderRegion::shouldHaveAutoLogicalHeight): Make it private since it is not accessed from outside.

2012-11-27  Alexander Pavlov  <apavlov@chromium.org>

        Incorrect value of CSSStyleDeclaration#length when a shorthand property is inherit or initial
        https://bugs.webkit.org/show_bug.cgi?id=73002

        Reviewed by Alexis Menard.

        Before the patch, "inherit" and "initial" shorthands would get added to the StylePropertySet as-is, their longhands unspecified.
        This patch tackles two aspects of the problem:
        - When parsing "initial" and "inherit" shorthands, their longhands are added to the property set with the corresponding values.
        - When querying "initial" and "inherit" shorthands, their values are reconstructed from the longhands as usual, but if all of the longhands
          are found to have the same explicit "initial" or "inherit" value, the respective single value is returned as the shorthand value.

        When reconstructing shorthands, a "common value" is tracked. If all longhands involved have the same explicit value, it becomes the
        "common value", otherwise it is a String(). The "inherit" or "initial" common value ultimately becomes the shorthand value
        (except for the "background-position" shorthand, which is a special case).

        * css/CSSParser.cpp:
        (WebCore::parseKeywordValue): Parse shorthands' "initial" and "inherit" values using the CSSParser.
        (WebCore::CSSParser::addExpandedPropertyForValue): Add simple property or all sharthand's longhands with given value and priority.
        (WebCore::CSSParser::parseValue): For "initial" and "inherit" shorthands, add their longhands with the respective value, not the shorthands proper.
        * css/CSSParser.h: Add addExpandedPropertyForValue().
        * css/StylePropertySet.cpp:
        (WebCore::isInitialOrInherit): Check if the value is "initial" or "inherit".
        (WebCore):
        (WebCore::StylePropertySet::appendFontLonghandValueIfExplicit): Modified to track the common value for the "font" shorthand.
        (WebCore::StylePropertySet::fontValue): Ditto.
        (WebCore::StylePropertySet::get4Values): Return "inherit" or "initial" if all 4 values are explicitly "inherit" or "initial".
        (WebCore::StylePropertySet::getLayeredShorthandValue): Use the common value approach for layered shorthands.
        (WebCore::StylePropertySet::getShorthandValue): Ditto for ordinary shorthands.
        (WebCore::StylePropertySet::borderPropertyValue): Ditto for the "border" shorthand.
        * css/StylePropertySet.h: Modify the appendFontLonghandValueIfExplicit() signature.
        * html/canvas/CanvasRenderingContext2D.cpp:
        (WebCore::CanvasRenderingContext2D::setFont): Now that "inherit" and "initial" shorthands are represented by their longhands,
        we need to check the string value of the "font" shorthand for being "inherit" or "initial" instead: getPropertyCSSValue() no longer works,
        since the shorthand itself is no longer added to the StylePropertySet.

2012-11-27  Kentaro Hara  <haraken@chromium.org>

        Unreviewed. Renamed TRYCATCH => V8TRYCATCH.
        (I forgot to apply reviewer's comment in bug 103352 when landing r135817.)

        * bindings/scripts/CodeGeneratorV8.pm:
        (GenerateParametersCheck):
        (GenerateEventConstructorCallback):
        (ConvertToV8StringResource):
        * bindings/scripts/test/V8/V8Float64Array.cpp:
        (WebCore::Float64ArrayV8Internal::fooCallback):
        * bindings/scripts/test/V8/V8TestActiveDOMObject.cpp:
        (WebCore::TestActiveDOMObjectV8Internal::excitingFunctionCallback):
        (WebCore::TestActiveDOMObjectV8Internal::postMessageCallback):
        * bindings/scripts/test/V8/V8TestCustomNamedGetter.cpp:
        (WebCore::TestCustomNamedGetterV8Internal::anotherFunctionCallback):
        * bindings/scripts/test/V8/V8TestEventConstructor.cpp:
        (WebCore::V8TestEventConstructor::constructorCallback):
        * bindings/scripts/test/V8/V8TestEventTarget.cpp:
        (WebCore::TestEventTargetV8Internal::itemCallback):
        (WebCore::TestEventTargetV8Internal::dispatchEventCallback):
        * bindings/scripts/test/V8/V8TestInterface.cpp:
        (WebCore::TestInterfaceV8Internal::supplementalStaticAttrAttrSetter):
        (WebCore::TestInterfaceV8Internal::supplementalStr2AttrSetter):
        (WebCore::TestInterfaceV8Internal::supplementalMethod2Callback):
        (WebCore::V8TestInterface::constructorCallback):
        * bindings/scripts/test/V8/V8TestMediaQueryListListener.cpp:
        (WebCore::TestMediaQueryListListenerV8Internal::methodCallback):
        * bindings/scripts/test/V8/V8TestNamedConstructor.cpp:
        (WebCore::V8TestNamedConstructorConstructorCallback):
        * bindings/scripts/test/V8/V8TestObj.cpp:
        (WebCore::TestObjV8Internal::staticStringAttrAttrSetter):
        (WebCore::TestObjV8Internal::stringAttrAttrSetter):
        (WebCore::TestObjV8Internal::reflectedStringAttrAttrSetter):
        (WebCore::TestObjV8Internal::reflectedURLAttrAttrSetter):
        (WebCore::TestObjV8Internal::reflectedCustomURLAttrAttrSetter):
        (WebCore::TestObjV8Internal::stringAttrWithGetterExceptionAttrSetter):
        (WebCore::TestObjV8Internal::stringAttrWithSetterExceptionAttrSetter):
        (WebCore::TestObjV8Internal::voidMethodWithArgsCallback):
        (WebCore::TestObjV8Internal::longMethodWithArgsCallback):
        (WebCore::TestObjV8Internal::objMethodWithArgsCallback):
        (WebCore::TestObjV8Internal::methodWithSequenceArgCallback):
        (WebCore::TestObjV8Internal::methodReturningSequenceCallback):
        (WebCore::TestObjV8Internal::methodThatRequiresAllArgsAndThrowsCallback):
        (WebCore::TestObjV8Internal::idbKeyCallback):
        (WebCore::TestObjV8Internal::optionsObjectCallback):
        (WebCore::TestObjV8Internal::methodWithOptionalArgCallback):
        (WebCore::TestObjV8Internal::methodWithNonOptionalArgAndOptionalArgCallback):
        (WebCore::TestObjV8Internal::methodWithNonOptionalArgAndTwoOptionalArgsCallback):
        (WebCore::TestObjV8Internal::methodWithOptionalStringCallback):
        (WebCore::TestObjV8Internal::methodWithOptionalStringIsUndefinedCallback):
        (WebCore::TestObjV8Internal::methodWithOptionalStringIsNullStringCallback):
        (WebCore::TestObjV8Internal::methodWithNonCallbackArgAndCallbackArgCallback):
        (WebCore::TestObjV8Internal::overloadedMethod1Callback):
        (WebCore::TestObjV8Internal::overloadedMethod2Callback):
        (WebCore::TestObjV8Internal::overloadedMethod3Callback):
        (WebCore::TestObjV8Internal::overloadedMethod4Callback):
        (WebCore::TestObjV8Internal::overloadedMethod6Callback):
        (WebCore::TestObjV8Internal::overloadedMethod7Callback):
        (WebCore::TestObjV8Internal::overloadedMethod8Callback):
        (WebCore::TestObjV8Internal::overloadedMethod9Callback):
        (WebCore::TestObjV8Internal::overloadedMethod10Callback):
        (WebCore::TestObjV8Internal::overloadedMethod11Callback):
        (WebCore::TestObjV8Internal::classMethodWithOptionalCallback):
        (WebCore::TestObjV8Internal::overloadedMethod12Callback):
        (WebCore::TestObjV8Internal::classMethodWithClampCallback):
        (WebCore::TestObjV8Internal::enabledAtRuntimeMethod1Callback):
        (WebCore::TestObjV8Internal::enabledAtRuntimeMethod2Callback):
        (WebCore::TestObjV8Internal::enabledPerContextMethod1Callback):
        (WebCore::TestObjV8Internal::enabledPerContextMethod2Callback):
        (WebCore::TestObjV8Internal::stringArrayFunctionCallback):
        (WebCore::TestObjV8Internal::convert1Callback):
        (WebCore::TestObjV8Internal::convert2Callback):
        (WebCore::TestObjV8Internal::convert4Callback):
        (WebCore::TestObjV8Internal::convert5Callback):
        (WebCore::TestObjV8Internal::strictFunctionCallback):
        (WebCore::TestObjV8Internal::variadicStringMethodCallback):
        (WebCore::TestObjV8Internal::variadicDoubleMethodCallback):
        (WebCore::TestObjV8Internal::variadicNodeMethodCallback):
        * bindings/scripts/test/V8/V8TestOverloadedConstructors.cpp:
        (WebCore::V8TestOverloadedConstructors::constructor1Callback):
        (WebCore::V8TestOverloadedConstructors::constructor2Callback):
        (WebCore::V8TestOverloadedConstructors::constructor3Callback):
        (WebCore::V8TestOverloadedConstructors::constructor4Callback):
        * bindings/scripts/test/V8/V8TestSerializedScriptValueInterface.cpp:
        (WebCore::V8TestSerializedScriptValueInterface::constructorCallback):
        * bindings/v8/V8Binding.h:
        (WebCore::toV8Sequence):
        * bindings/v8/V8BindingMacros.h:
        * bindings/v8/custom/V8BlobCustom.cpp:
        (WebCore::V8Blob::constructorCallbackCustom):
        * bindings/v8/custom/V8ConsoleCustom.cpp:
        (WebCore::V8Console::profileCallback):
        (WebCore::V8Console::profileEndCallback):
        * bindings/v8/custom/V8DOMWindowCustom.cpp:
        (WebCore::handlePostMessageCallback):
        * bindings/v8/custom/V8DataViewCustom.cpp:
        (WebCore::V8DataView::getInt8Callback):
        (WebCore::V8DataView::getUint8Callback):
        (WebCore::V8DataView::setInt8Callback):
        (WebCore::V8DataView::setUint8Callback):
        * bindings/v8/custom/V8DeviceMotionEventCustom.cpp:
        (WebCore::V8DeviceMotionEvent::initDeviceMotionEventCallback):
        * bindings/v8/custom/V8DeviceOrientationEventCustom.cpp:
        (WebCore::V8DeviceOrientationEvent::initDeviceOrientationEventCallback):
        * bindings/v8/custom/V8DocumentCustom.cpp:
        (WebCore::V8Document::evaluateCallback):
        * bindings/v8/custom/V8HTMLOptionsCollectionCustom.cpp:
        (WebCore::V8HTMLOptionsCollection::addCallback):
        * bindings/v8/custom/V8HistoryCustom.cpp:
        (WebCore::V8History::pushStateCallback):
        (WebCore::V8History::replaceStateCallback):
        * bindings/v8/custom/V8IntentCustom.cpp:
        (WebCore::V8Intent::constructorCallbackCustom):
        * bindings/v8/custom/V8SQLTransactionCustom.cpp:
        (WebCore::V8SQLTransaction::executeSqlCallback):
        * bindings/v8/custom/V8SQLTransactionSyncCustom.cpp:
        (WebCore::V8SQLTransactionSync::executeSqlCallback):
        * bindings/v8/custom/V8SVGLengthCustom.cpp:
        (WebCore::V8SVGLength::convertToSpecifiedUnitsCallback):
        * bindings/v8/custom/V8WebGLRenderingContextCustom.cpp:
        (WebCore::V8WebGLRenderingContext::getExtensionCallback):
        * bindings/v8/custom/V8WorkerContextCustom.cpp:
        (WebCore::V8WorkerContext::importScriptsCallback):

2012-11-27  Dan Carney  <dcarney@google.com>

        [V8] add contextForWorld helper function to ScriptController
        https://bugs.webkit.org/show_bug.cgi?id=103376

        Reviewed by Kentaro Hara.

        Reducing some commonly occuring code with an inline function.

        No new tests. No change in functionality.

        * bindings/v8/ScriptController.cpp:
        (WebCore::ScriptController::contextForWorld):
        (WebCore):
        (WebCore::ScriptController::currentWorldContext):
        (WebCore::ScriptController::mainWorldContext):
        * bindings/v8/ScriptController.h:
        (ScriptController):

2012-11-26  Allan Sandfeld Jensen  <allan.jensen@digia.com>

        [Qt] Implement the mimetype icon methods
        https://bugs.webkit.org/show_bug.cgi?id=103260

        Reviewed by Simon Hausmann.

        * platform/graphics/Icon.h:
        (Icon):
        * platform/graphics/qt/IconQt.cpp:
        (WebCore::Icon::createIconForFiles):
        (WebCore::Icon::paint):

2012-09-17  Allan Sandfeld Jensen  <allan.jensen@nokia.com>

        Incorrect rect-based hit-test result when hit-test region includes culled inlines
        https://bugs.webkit.org/show_bug.cgi?id=88376

        Reviewed by Dave Hyatt.

        Move the handling of culled inlines from HitTestResult::addNodeToRectBasedTestResult to 
        InlineFlowBox::nodeAtPoint. This makes it possible to fix a number of bugs with how
        culled inlines were handled. They are now checked after all their children, and may
        terminate area-based hit-testing if they contain the whole area.

        Tests: fast/dom/nodesFromRect/nodesFromRect-culled-inlines.html
               fast/dom/nodesFromRect/nodesFromRect-culled-inline-with-linebreak.html

        * rendering/HitTestResult.cpp:
        (WebCore::HitTestLocation::HitTestLocation):
        (WebCore::HitTestResult::addNodeToRectBasedTestResult):
        * rendering/HitTestResult.h:
        (HitTestLocation):
        * rendering/InlineFlowBox.cpp:
        (WebCore::InlineFlowBox::nodeAtPoint):
        * rendering/RenderInline.cpp:
        (WebCore::RenderInline::hitTestCulledInline):
        * rendering/RenderInline.h:
        (RenderInline):

2012-11-27  Kenneth Rohde Christiansen  <kenneth@webkit.org>

        REGRESSION(134887) [Qt][EFL][WK2] Repaint counter not working
        https://bugs.webkit.org/show_bug.cgi?id=103261

        Reviewed by Noam Rosenthal.

        Fixed regression introduced in 134887, which introduced the
        updateContentsNoSwizzle method and called it directly from
        the repaint counter.

        This method obviously needs to bind the texture.

        * platform/graphics/texmap/TextureMapperGL.cpp:
        (WebCore::BitmapTextureGL::updateContentsNoSwizzle):

2012-11-27  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r135786.
        http://trac.webkit.org/changeset/135786
        https://bugs.webkit.org/show_bug.cgi?id=103379

        It made 3 plugin tests timeout on several platforms (Requested
        by Ossy on #webkit).

        * CMakeLists.txt:
        * GNUmakefile.list.am:
        * Target.pri:
        * WebCore.exp.in:
        * WebCore.gypi:
        * WebCore.vcproj/WebCore.vcproj:
        * WebCore.xcodeproj/project.pbxproj:
        * loader/FrameLoadRequest.cpp: Removed.
        * loader/FrameLoadRequest.h:
        (WebCore::FrameLoadRequest::FrameLoadRequest):
        (FrameLoadRequest):
        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::load):
        * loader/FrameLoader.h:
        (FrameLoader):
        * page/DragController.cpp:
        (WebCore::DragController::performDrag):
        * plugins/PluginView.cpp:
        (WebCore::PluginView::performRequest):

2012-11-27  Kent Tamura  <tkent@chromium.org>

        Implement ValidityState::badInput
        https://bugs.webkit.org/show_bug.cgi?id=102861

        Reviewed by Hajime Morita.

        Add ValidityState::badInput, add hasBadInput, which always returns
        false, to FormAssociatedElement, HTMLInputElement, and InputType.

        For NumberInputType, we had hasUnacceptableValue, which was a hack to
        make an input element match to :invalid if the element had non-number
        strings. We don't need the hack any more because badInput affects :invalid
        style. hasUnacceptableValue is re-used for hasBadInput implementation.
        We cleared invalid numbers when elements lost focus to tell users that
        the element had invalid numbers. We don't need this behavior because the
        interactive validation tells it.

        For date/time input types, we should make an input badInput when the
        input has empty value but its sub-fields have values. It covers both of
        partial input cases such as 12/--/2012 and invalid dates such as
        02/31/2012.

        For other types, ValidityState::badInput always returns false.

        This patch doesn't contain tests for badInput validation messages. They
        will be added later.

        Tests: fast/forms/date-multiple-fields/date-multiple-fields-validity-badinput.html
               fast/forms/datetime-multiple-fields/datetime-multiple-fields-validity-badinput.html
               fast/forms/datetimelocal-multiple-fields/datetimelocal-multiple-fields-validity-badinput.html
               fast/forms/month-multiple-fields/month-multiple-fields-validity-badinput.html
               fast/forms/number/number-validity-badinput.html
               fast/forms/time-multiple-fields/time-multiple-fields-validity-badinput.html
               fast/forms/week-multiple-fields/week-multiple-fields-validity-badinput.html

        * html/ValidityState.idl: Add badInput IDL attribute.
        * html/ValidityState.h:
        (ValidityState): Add badInput.
        * html/ValidityState.cpp:
        (WebCore::ValidityState::badInput):
        Added. Calls FormAssociatedElement::hasBadInput.

        * html/FormAssociatedElement.h:
        (FormAssociatedElement): Add hasBadInput.
        * html/FormAssociatedElement.cpp:
        (WebCore::FormAssociatedElement::hasBadInput):
        Added. It always returns false.
        (WebCore::FormAssociatedElement::valid): Takes account of hasBadInput().

        * html/HTMLInputElement.h:
        (HTMLInputElement):
        Remove hasUnacceptableValue, and add hasBadInput override.
        * html/HTMLInputElement.cpp:
        (WebCore::HTMLInputElement::hasBadInput):
        Added. Delegate to InputType::hasBadInput.
        (WebCore): Remove hasUnacceptableValue.

        * html/InputType.h:
        (InputType): Add hasBadInput and badInputText, and remove
        hasUnacceptableValue.
        * html/InputType.cpp:
        (WebCore::InputType::hasBadInput): Added. Returns false.
        (WebCore::InputType::badInputText):
        Added. This function should not be called because hasBadInput always
        returns false.
        (WebCore::InputType::validationMessage):
        Supports badInput. This returns badInputText if hasBadInput is true.

        * html/NumberInputType.h:
        (NumberInputType): Add hasBadInput and badInputTest. Remove
        handleBlurEvent and hasUnacceptableValue.
        * html/NumberInputType.cpp:
        Remove handleBlurEvent, which cleared invalid number strings.
        (WebCore::NumberInputType::hasBadInput):
        Added. We don't need to check existence of a renderer. The standard form
        validation feature doesn't care of it.
        (WebCore::NumberInputType::badInputText): Returns
        validationMessageBadInputForNumberText defined in LocalizedStrings.h.
        * css/SelectorChecker.cpp:
        (WebCore::SelectorChecker::checkOneSelector):
        Remove a hack for hasUnacceptableValue. isValidFormControlElement takes
        account of badInput.
        * dom/Element.h: Remove hasUnacceptableValue.

        * html/BaseMultipleFieldsDateAndTimeInputType.h:
        (BaseMultipleFieldsDateAndTimeInputType): Add hasBadInput and badInputText.
        * html/BaseMultipleFieldsDateAndTimeInputType.cpp:
        (WebCore::BaseMultipleFieldsDateAndTimeInputType::badInputText):
        Returns validationMessageBadInputForDateTimeText defined in LocalizedStrings.h.
        (WebCore::BaseMultipleFieldsDateAndTimeInputType::hasBadInput):
        Added.
        (WebCore::BaseMultipleFieldsDateAndTimeInputType::setValue):
        Add setNeedsValidityCheck call. It is needed because
        updateInnerTextValue can modify subfields empty state.

        * html/TextFieldInputType.cpp:
        (WebCore::TextFieldInputType::subtreeHasChanged): Update a comment.
        * platform/LocalizedStrings.h:
        (WebCore): Add validationMessageBadInputForNumberText and
        validationMessageBadInputForDateTimeText.
        * platform/LocalizedStrings.cpp:
        (WebCore::validationMessageBadInputForNumberText):
        Added a placeholder implementation. This should be fixed later.
        * platform/blackberry/LocalizedStringsBlackBerry.cpp:
        (WebCore::validationMessageBadInputForNumberText): Ditto.
        * platform/efl/LocalizedStringsEfl.cpp:
        (WebCore::validationMessageBadInputForNumberText): Ditto.
        * platform/qt/LocalizedStringsQt.cpp:
        (WebCore::validationMessageBadInputForNumberText): Ditto.

2012-11-27  Hajime Morrita  <morrita@google.com>

        [Refactoring] NodeFlags::IsShadowRootFlag should be Node::IsDocumentFragmentFlag
        https://bugs.webkit.org/show_bug.cgi?id=103370

        Reviewed by Kentaro Hara.

        This chagne introduces Node::IsDocumentFragmentFlag so that we can
        have fast Node::isDocumentFragment().

        Note that Node::isShadowRoot() can become slightly slower when it
        returns true, but that is minor in terms of the number of calls at runtime.

        No new tests. No behavior change.

        * dom/DocumentFragment.cpp:
        (WebCore::DocumentFragment::create):
        * dom/DocumentFragment.h:
        * dom/Node.cpp:
        (WebCore::Node::documentFragmentIsShadowRoot):
        (WebCore):
        * dom/Node.h:
        (Node):
        (WebCore::Node::isDocumentFragment):
        (WebCore::Node::isShadowRoot):
        (WebCore::Node::parentNode):
        (WebCore::Node::parentNodeGuaranteedHostFree):
        * dom/ShadowRoot.h:

2012-11-26  Kent Tamura  <tkent@chromium.org>

        :read-only selector should match to date/time input types
        https://bugs.webkit.org/show_bug.cgi?id=103350

        Reviewed by Kentaro Hara.

        We supported :read-only and :read-write only for text form controls;
        i.e. <textarea> and text-field <input>. According to [1], we should
        support them for date/time types. So, this patch removes
        isTextFormControl check in SelectorChecker, and just relies on
        shouldMatchRead{Only,Write}Selector virtual functions.

        Tests: Update fast/forms/*/*-appearance-pseudo-classes.html.

        [1] http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary

        * css/SelectorChecker.cpp:
        (WebCore::SelectorChecker::checkOneSelector):
        Remove isFormControlElement check and isTextFormControl check.

        * html/HTMLFormControlElement.cpp:
        Remove shouldMatchRead{Only,Write}Selector functions. We don't need
        common implementations any more.
        * html/HTMLFormControlElement.h: Ditto.

        * html/HTMLTextAreaElement.h:
        (HTMLTextAreaElement): Add shouldMatchRead{Only,Write}Selector overrides.
        * html/HTMLTextAreaElement.cpp:
        (WebCore::HTMLTextAreaElement::shouldMatchReadOnlySelector): Added.
        (WebCore::HTMLTextAreaElement::shouldMatchReadWriteSelector): Added.

        * html/HTMLInputElement.h:
        (HTMLInputElement): Add shouldMatchRead{Only,Write}Selector overrides.
        * html/HTMLInputElement.cpp:
        (WebCore::HTMLInputElement::shouldMatchReadOnlySelector):
        Added. This checks InputType::supportsReadOnly and readOnly.
        (WebCore::HTMLInputElement::shouldMatchReadWriteSelector): Ditto.

        * html/InputType.h:
        (InputType): Add supportsReadOnly.
        * html/InputType.cpp:
        (WebCore::InputType::supportsReadOnly): Added. Returns false by default.

        * html/BaseDateAndTimeInputType.h:
        (BaseDateAndTimeInputType): Add supportsReadOnly.
        * html/BaseDateAndTimeInputType.cpp:
        (WebCore::BaseDateAndTimeInputType::supportsReadOnly): Added. Returns true.
        * html/TextFieldInputType.h:
        (TextFieldInputType): Add supportsReadOnly.
        * html/TextFieldInputType.cpp:
        (WebCore::TextFieldInputType::supportsReadOnly): Added. Returns true.

2012-11-26  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r135822.
        http://trac.webkit.org/changeset/135822
        https://bugs.webkit.org/show_bug.cgi?id=103369

        Undo the revert of r135818, since that change does not affect
        code used by Chromium (Requested by apavlov on #webkit).

        * platform/graphics/texmap/GraphicsLayerTextureMapper.cpp:
        (WebCore::GraphicsLayerTextureMapper::setMaskLayer):
        (WebCore::GraphicsLayerTextureMapper::setContentsVisible):

2012-11-26  Michael Pruett  <michael@68k.org>

        [GTK] Fix build error on GTK due to r135749
        https://bugs.webkit.org/show_bug.cgi?id=103365

        Reviewed by Dean Jackson.

        In r135749, many files which were already included
        in webcore_built_sources were erroneously added to
        webcore_svg_built_sources in GNUmakefile.list.am.

        * GNUmakefile.list.am:

2012-11-26  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r135818.
        http://trac.webkit.org/changeset/135818
        https://bugs.webkit.org/show_bug.cgi?id=103368

        platform/chromium/virtual/threaded/compositing/visibility
        /visibility-simple-webgl-layer.html crash on Mountain Lion
        (Requested by apavlov on #webkit).

        * platform/graphics/texmap/GraphicsLayerTextureMapper.cpp:
        (WebCore::GraphicsLayerTextureMapper::setMaskLayer):
        (WebCore::GraphicsLayerTextureMapper::setContentsVisible):

2012-11-26  Huang Dongsung  <luxtella@company100.net>

        Coordinated Graphics: Set visibility to a mask layer in GraphicsLayer::setContentsVisible().
        https://bugs.webkit.org/show_bug.cgi?id=103297

        Reviewed by Noam Rosenthal.

        GraphicsLayerTextureMapper and CoordinatedGraphicsLayer set the visibility of a
        mask layer in setContentsVisible() and setMaskLayer() like setting a size.
        This patch is needed because RenderLayerBacking does not set the visibility to a
        mask layer like the size.

        This patch does not change user experience because an invisible layer is not
        rendered although the mask layer is rendered. In that sense, it is an
        optimization patch.

        No new tests. It is an optimization patch.

        * platform/graphics/texmap/GraphicsLayerTextureMapper.cpp:
        (WebCore::GraphicsLayerTextureMapper::setMaskLayer):
        (WebCore::GraphicsLayerTextureMapper::setContentsVisible):

2012-11-26  Kentaro Hara  <haraken@chromium.org>

        [V8] Rename EXCEPTION_BLOCK() macros
        https://bugs.webkit.org/show_bug.cgi?id=103352

        Reviewed by Adam Barth.

        Since V8Parameter was renamed to V8StringResource,
        we rename macros that use V8Parameter.

        EXCEPTION_BLOCK() => V8TRYCATCH()
        STRING_TO_V8PARAMETER_EXCEPTION_BLOCK() => V8TRYCATCH_FOR_V8STRINGRESOURCE()
        STRING_TO_V8PARAMETER_EXCEPTION_BLOCK_VOID() => V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID()

        No tests. No change in behavior.

        * bindings/scripts/CodeGeneratorV8.pm:
        (GenerateParametersCheck):
        (GenerateEventConstructorCallback):
        (ConvertToV8StringResource):
        * bindings/scripts/test/V8/V8Float64Array.cpp:
        (WebCore::Float64ArrayV8Internal::fooCallback):
        * bindings/scripts/test/V8/V8TestActiveDOMObject.cpp:
        (WebCore::TestActiveDOMObjectV8Internal::excitingFunctionCallback):
        (WebCore::TestActiveDOMObjectV8Internal::postMessageCallback):
        * bindings/scripts/test/V8/V8TestCustomNamedGetter.cpp:
        (WebCore::TestCustomNamedGetterV8Internal::anotherFunctionCallback):
        * bindings/scripts/test/V8/V8TestEventConstructor.cpp:
        (WebCore::V8TestEventConstructor::constructorCallback):
        * bindings/scripts/test/V8/V8TestEventTarget.cpp:
        (WebCore::TestEventTargetV8Internal::itemCallback):
        (WebCore::TestEventTargetV8Internal::dispatchEventCallback):
        * bindings/scripts/test/V8/V8TestInterface.cpp:
        (WebCore::TestInterfaceV8Internal::supplementalStaticAttrAttrSetter):
        (WebCore::TestInterfaceV8Internal::supplementalStr2AttrSetter):
        (WebCore::TestInterfaceV8Internal::supplementalMethod2Callback):
        (WebCore::V8TestInterface::constructorCallback):
        * bindings/scripts/test/V8/V8TestMediaQueryListListener.cpp:
        (WebCore::TestMediaQueryListListenerV8Internal::methodCallback):
        * bindings/scripts/test/V8/V8TestNamedConstructor.cpp:
        (WebCore::V8TestNamedConstructorConstructorCallback):
        * bindings/scripts/test/V8/V8TestObj.cpp:
        (WebCore::TestObjV8Internal::staticStringAttrAttrSetter):
        (WebCore::TestObjV8Internal::stringAttrAttrSetter):
        (WebCore::TestObjV8Internal::reflectedStringAttrAttrSetter):
        (WebCore::TestObjV8Internal::reflectedURLAttrAttrSetter):
        (WebCore::TestObjV8Internal::reflectedCustomURLAttrAttrSetter):
        (WebCore::TestObjV8Internal::stringAttrWithGetterExceptionAttrSetter):
        (WebCore::TestObjV8Internal::stringAttrWithSetterExceptionAttrSetter):
        (WebCore::TestObjV8Internal::voidMethodWithArgsCallback):
        (WebCore::TestObjV8Internal::longMethodWithArgsCallback):
        (WebCore::TestObjV8Internal::objMethodWithArgsCallback):
        (WebCore::TestObjV8Internal::methodWithSequenceArgCallback):
        (WebCore::TestObjV8Internal::methodReturningSequenceCallback):
        (WebCore::TestObjV8Internal::methodThatRequiresAllArgsAndThrowsCallback):
        (WebCore::TestObjV8Internal::idbKeyCallback):
        (WebCore::TestObjV8Internal::optionsObjectCallback):
        (WebCore::TestObjV8Internal::methodWithOptionalArgCallback):
        (WebCore::TestObjV8Internal::methodWithNonOptionalArgAndOptionalArgCallback):
        (WebCore::TestObjV8Internal::methodWithNonOptionalArgAndTwoOptionalArgsCallback):
        (WebCore::TestObjV8Internal::methodWithOptionalStringCallback):
        (WebCore::TestObjV8Internal::methodWithOptionalStringIsUndefinedCallback):
        (WebCore::TestObjV8Internal::methodWithOptionalStringIsNullStringCallback):
        (WebCore::TestObjV8Internal::methodWithNonCallbackArgAndCallbackArgCallback):
        (WebCore::TestObjV8Internal::overloadedMethod1Callback):
        (WebCore::TestObjV8Internal::overloadedMethod2Callback):
        (WebCore::TestObjV8Internal::overloadedMethod3Callback):
        (WebCore::TestObjV8Internal::overloadedMethod4Callback):
        (WebCore::TestObjV8Internal::overloadedMethod6Callback):
        (WebCore::TestObjV8Internal::overloadedMethod7Callback):
        (WebCore::TestObjV8Internal::overloadedMethod8Callback):
        (WebCore::TestObjV8Internal::overloadedMethod9Callback):
        (WebCore::TestObjV8Internal::overloadedMethod10Callback):
        (WebCore::TestObjV8Internal::overloadedMethod11Callback):
        (WebCore::TestObjV8Internal::classMethodWithOptionalCallback):
        (WebCore::TestObjV8Internal::overloadedMethod12Callback):
        (WebCore::TestObjV8Internal::classMethodWithClampCallback):
        (WebCore::TestObjV8Internal::enabledAtRuntimeMethod1Callback):
        (WebCore::TestObjV8Internal::enabledAtRuntimeMethod2Callback):
        (WebCore::TestObjV8Internal::enabledPerContextMethod1Callback):
        (WebCore::TestObjV8Internal::enabledPerContextMethod2Callback):
        (WebCore::TestObjV8Internal::stringArrayFunctionCallback):
        (WebCore::TestObjV8Internal::convert1Callback):
        (WebCore::TestObjV8Internal::convert2Callback):
        (WebCore::TestObjV8Internal::convert4Callback):
        (WebCore::TestObjV8Internal::convert5Callback):
        (WebCore::TestObjV8Internal::strictFunctionCallback):
        (WebCore::TestObjV8Internal::variadicStringMethodCallback):
        (WebCore::TestObjV8Internal::variadicDoubleMethodCallback):
        (WebCore::TestObjV8Internal::variadicNodeMethodCallback):
        * bindings/scripts/test/V8/V8TestOverloadedConstructors.cpp:
        (WebCore::V8TestOverloadedConstructors::constructor1Callback):
        (WebCore::V8TestOverloadedConstructors::constructor2Callback):
        (WebCore::V8TestOverloadedConstructors::constructor3Callback):
        (WebCore::V8TestOverloadedConstructors::constructor4Callback):
        * bindings/scripts/test/V8/V8TestSerializedScriptValueInterface.cpp:
        (WebCore::V8TestSerializedScriptValueInterface::constructorCallback):
        * bindings/v8/V8Binding.h:
        (WebCore::toV8Sequence):
        * bindings/v8/V8BindingMacros.h:
        * bindings/v8/custom/V8BlobCustom.cpp:
        (WebCore::V8Blob::constructorCallbackCustom):
        * bindings/v8/custom/V8ConsoleCustom.cpp:
        (WebCore::V8Console::profileCallback):
        (WebCore::V8Console::profileEndCallback):
        * bindings/v8/custom/V8DOMWindowCustom.cpp:
        (WebCore::handlePostMessageCallback):
        * bindings/v8/custom/V8DataViewCustom.cpp:
        (WebCore::V8DataView::getInt8Callback):
        (WebCore::V8DataView::getUint8Callback):
        (WebCore::V8DataView::setInt8Callback):
        (WebCore::V8DataView::setUint8Callback):
        * bindings/v8/custom/V8DeviceMotionEventCustom.cpp:
        (WebCore::V8DeviceMotionEvent::initDeviceMotionEventCallback):
        * bindings/v8/custom/V8DeviceOrientationEventCustom.cpp:
        (WebCore::V8DeviceOrientationEvent::initDeviceOrientationEventCallback):
        * bindings/v8/custom/V8DocumentCustom.cpp:
        (WebCore::V8Document::evaluateCallback):
        * bindings/v8/custom/V8HTMLOptionsCollectionCustom.cpp:
        (WebCore::V8HTMLOptionsCollection::addCallback):
        * bindings/v8/custom/V8HistoryCustom.cpp:
        (WebCore::V8History::pushStateCallback):
        (WebCore::V8History::replaceStateCallback):
        * bindings/v8/custom/V8IntentCustom.cpp:
        (WebCore::V8Intent::constructorCallbackCustom):
        * bindings/v8/custom/V8SQLTransactionCustom.cpp:
        (WebCore::V8SQLTransaction::executeSqlCallback):
        * bindings/v8/custom/V8SQLTransactionSyncCustom.cpp:
        (WebCore::V8SQLTransactionSync::executeSqlCallback):
        * bindings/v8/custom/V8SVGLengthCustom.cpp:
        (WebCore::V8SVGLength::convertToSpecifiedUnitsCallback):
        * bindings/v8/custom/V8WebGLRenderingContextCustom.cpp:
        (WebCore::V8WebGLRenderingContext::getExtensionCallback):
        * bindings/v8/custom/V8WorkerContextCustom.cpp:
        (WebCore::V8WorkerContext::importScriptsCallback):

2012-11-26  Andreas Kling  <akling@apple.com>

        Node: Move AreSVGAttributesValidFlag to ElementAttributeData.
        <http://webkit.org/b/103349>

        Reviewed by Anders Carlsson.

        Moved AreSVGAttributesValidFlag to ElementAttributeData and change it to use "dirty" semantics.
        This frees up a bit on Node, and we will always have ElementAttributeData if the animated
        attributes are dirty anyway.

        * dom/Element.cpp:
        (WebCore::Element::getAttribute):
        * dom/Element.h:
        (WebCore::Element::updateInvalidAttributes):
        * dom/ElementAttributeData.cpp:
        (WebCore::ElementAttributeData::ElementAttributeData):
        * dom/ElementAttributeData.h:
        (WebCore::ElementAttributeData::ElementAttributeData):
        (ElementAttributeData):
        * dom/Node.h:
        (Node):
        * svg/SVGElement.cpp:
        (WebCore::SVGElement::updateAnimatedSVGAttribute):
        * svg/SVGElement.h:
        (WebCore::SVGElement::invalidateSVGAttributes):

2012-11-26  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r135798.
        http://trac.webkit.org/changeset/135798
        https://bugs.webkit.org/show_bug.cgi?id=103354

        Broke the chrome mac build (Requested by noel_ on #webkit).

        * platform/graphics/chromium/DeferredImageDecoder.cpp:
        (WebCore::DeferredImageDecoder::~DeferredImageDecoder):
        (WebCore::DeferredImageDecoder::createResizedLazyDecodingBitmap):
        (WebCore::DeferredImageDecoder::frameBufferAtIndex):
        (WebCore::DeferredImageDecoder::createLazyDecodingBitmap):
        * platform/graphics/chromium/DeferredImageDecoder.h:
        (DeferredImageDecoder):
        * platform/graphics/chromium/ImageDecodingStore.cpp:
        (WebCore::ImageDecodingStore::instanceOnMainThread):
        (WebCore::ImageDecodingStore::initializeOnMainThread):
        (WebCore::ImageDecodingStore::shutdown):
        (WebCore::ImageDecodingStore::calledOnValidThread):
        (WebCore::ImageDecodingStore::lookupFrameCache):
        (WebCore::ImageDecodingStore::deleteFrameCache):
        * platform/graphics/chromium/ImageDecodingStore.h:
        (WebCore):
        (ImageDecodingStore):
        * platform/graphics/chromium/ImageFrameGenerator.cpp:
        (WebCore::ImageFrameGenerator::ImageFrameGenerator):
        (WebCore::ImageFrameGenerator::~ImageFrameGenerator):
        (WebCore::ImageFrameGenerator::setData):
        (WebCore::ImageFrameGenerator::decodeAndScale):
        * platform/graphics/chromium/ImageFrameGenerator.h:
        (WebCore):
        (WebCore::ImageFrameGenerator::create):
        (ImageFrameGenerator):
        * platform/graphics/chromium/LazyDecodingPixelRef.cpp:
        (WebCore::LazyDecodingPixelRef::LazyDecodingPixelRef):
        (WebCore::LazyDecodingPixelRef::onLockPixels):
        (WebCore::LazyDecodingPixelRef::onUnlockPixels):
        * platform/graphics/chromium/LazyDecodingPixelRef.h:
        (WebCore):
        (LazyDecodingPixelRef):
        * platform/graphics/chromium/ScaledImageFragment.cpp:
        (WebCore::ScaledImageFragment::ScaledImageFragment):
        (WebCore::ScaledImageFragment::isEqual):
        (WebCore):
        * platform/graphics/chromium/ScaledImageFragment.h:
        (WebCore):
        (WebCore::ScaledImageFragment::create):
        (ScaledImageFragment):
        * platform/graphics/chromium/SkSizeHash.h: Removed.

2012-11-26  Huang Dongsung  <luxtella@company100.net>

        [TexMap] GraphicsLayerTextureMapper::setSize() sets the size of a mask layer.
        https://bugs.webkit.org/show_bug.cgi?id=103297

        Reviewed by Noam Rosenthal.

        Currently, CoordinatedGraphicsLayer sets the size of a mask layer in setSize()
        and setMaksLayer(). GraphicsLayerTextureMapper follows the behavior. If so we
        don't have to check the size of the mask layer in TextureMapperLayer::flushCompositingState().

        No new tests. Covered by existing tests.

        * platform/graphics/texmap/GraphicsLayerTextureMapper.cpp:
        (WebCore::GraphicsLayerTextureMapper::setMaskLayer):
        (WebCore::GraphicsLayerTextureMapper::setSize):
        * platform/graphics/texmap/TextureMapperLayer.cpp:
        (WebCore::TextureMapperLayer::flushCompositingState):

2012-11-26  Kentaro Hara  <haraken@chromium.org>

        [V8] Remove V8Parameter::object()
        https://bugs.webkit.org/show_bug.cgi?id=103340

        Reviewed by Adam Barth.

        V8Parameter can use m_v8Object directly.

        No tests. No change in behavior.

        * bindings/v8/V8StringResource.h:
        (WebCore::::prepare):

2012-11-26  Kentaro Hara  <haraken@chromium.org>

        [V8] Rename V8Parameter to V8StringResource
        https://bugs.webkit.org/show_bug.cgi?id=103341

        Reviewed by Adam Barth.

        We can rename V8Parameter to V8StringResource. In a follow-up patch,
        I will rename macros around V8Parameter.

        No tests. No change in behavior.

        * bindings/scripts/CodeGeneratorV8.pm:
        (GenerateNormalAttrGetter):
        (GenerateNormalAttrSetter):
        (GenerateParametersCheck):
        (GenerateEventConstructorCallback):
        (GetNativeTypeFromSignature):
        (GetNativeType):
        (ConvertToV8StringResource):
        * bindings/scripts/test/V8/V8TestActiveDOMObject.cpp:
        (WebCore::TestActiveDOMObjectV8Internal::postMessageCallback):
        * bindings/scripts/test/V8/V8TestCustomNamedGetter.cpp:
        (WebCore::TestCustomNamedGetterV8Internal::anotherFunctionCallback):
        * bindings/scripts/test/V8/V8TestEventConstructor.cpp:
        (WebCore::V8TestEventConstructor::constructorCallback):
        * bindings/scripts/test/V8/V8TestInterface.cpp:
        (WebCore::TestInterfaceV8Internal::supplementalStaticAttrAttrSetter):
        (WebCore::TestInterfaceV8Internal::supplementalStr2AttrSetter):
        (WebCore::TestInterfaceV8Internal::supplementalMethod2Callback):
        (WebCore::V8TestInterface::constructorCallback):
        * bindings/scripts/test/V8/V8TestNamedConstructor.cpp:
        (WebCore::V8TestNamedConstructorConstructorCallback):
        * bindings/scripts/test/V8/V8TestObj.cpp:
        (WebCore::TestObjV8Internal::staticStringAttrAttrSetter):
        (WebCore::TestObjV8Internal::stringAttrAttrSetter):
        (WebCore::TestObjV8Internal::reflectedStringAttrAttrSetter):
        (WebCore::TestObjV8Internal::reflectedURLAttrAttrSetter):
        (WebCore::TestObjV8Internal::reflectedCustomURLAttrAttrSetter):
        (WebCore::TestObjV8Internal::stringAttrWithGetterExceptionAttrSetter):
        (WebCore::TestObjV8Internal::stringAttrWithSetterExceptionAttrSetter):
        (WebCore::TestObjV8Internal::voidMethodWithArgsCallback):
        (WebCore::TestObjV8Internal::longMethodWithArgsCallback):
        (WebCore::TestObjV8Internal::objMethodWithArgsCallback):
        (WebCore::TestObjV8Internal::methodThatRequiresAllArgsAndThrowsCallback):
        (WebCore::TestObjV8Internal::methodWithOptionalStringCallback):
        (WebCore::TestObjV8Internal::methodWithOptionalStringIsUndefinedCallback):
        (WebCore::TestObjV8Internal::methodWithOptionalStringIsNullStringCallback):
        (WebCore::TestObjV8Internal::overloadedMethod1Callback):
        (WebCore::TestObjV8Internal::overloadedMethod3Callback):
        (WebCore::TestObjV8Internal::overloadedMethod11Callback):
        (WebCore::TestObjV8Internal::overloadedMethod12Callback):
        (WebCore::TestObjV8Internal::strictFunctionCallback):
        (WebCore::TestObjV8Internal::variadicStringMethodCallback):
        * bindings/scripts/test/V8/V8TestOverloadedConstructors.cpp:
        (WebCore::V8TestOverloadedConstructors::constructor4Callback):
        * bindings/scripts/test/V8/V8TestSerializedScriptValueInterface.cpp:
        (WebCore::V8TestSerializedScriptValueInterface::constructorCallback):
        * bindings/v8/V8StringResource.h:
        (WebCore::V8StringResource::V8StringResource):
        (WebCore::::prepare):
        * bindings/v8/custom/V8ConsoleCustom.cpp:
        (WebCore::V8Console::profileCallback):
        (WebCore::V8Console::profileEndCallback):
        * bindings/v8/custom/V8DOMWindowCustom.cpp:
        (WebCore::handlePostMessageCallback):
        * bindings/v8/custom/V8DeviceMotionEventCustom.cpp:
        (WebCore::V8DeviceMotionEvent::initDeviceMotionEventCallback):
        * bindings/v8/custom/V8DeviceOrientationEventCustom.cpp:
        (WebCore::V8DeviceOrientationEvent::initDeviceOrientationEventCallback):
        * bindings/v8/custom/V8HistoryCustom.cpp:
        (WebCore::V8History::pushStateCallback):
        (WebCore::V8History::replaceStateCallback):
        * bindings/v8/custom/V8IntentCustom.cpp:
        (WebCore::V8Intent::constructorCallbackCustom):
        * bindings/v8/custom/V8SQLTransactionCustom.cpp:
        (WebCore::V8SQLTransaction::executeSqlCallback):
        * bindings/v8/custom/V8SQLTransactionSyncCustom.cpp:
        (WebCore::V8SQLTransactionSync::executeSqlCallback):
        * bindings/v8/custom/V8WebGLRenderingContextCustom.cpp:
        (WebCore::V8WebGLRenderingContext::getExtensionCallback):

2012-11-26  Andreas Kling  <akling@apple.com>

        HTMLOptionElement: Remove two unused members.
        <http://webkit.org/b/103337>

        Reviewed by Kent Tamura.

        Remove two unused members from HTMLOptionElement, m_value and m_label.
        40kB progression on Membuster3.

        * html/HTMLOptionElement.h:
        (HTMLOptionElement):

2012-11-26  Stephen White  <senorblanco@chromium.org>

        [Chromium] Shared graphics context should only pushGroupMarker() once
        https://bugs.webkit.org/show_bug.cgi?id=103082

        Reviewed by James Robinson.

        GraphicsContext3D's pushGroupMarkerEXT() is being called every time
        an ImageBuffer is created, leading to unlimited memory growth, since
        they share a common GraphicsContext3D.  It should be called only once,
        on context creation.

        Tested by manually checking the memory usage in Chrome's TaskManager.
        (Sorry, I can't think of a way to test this automatically.)

        * platform/graphics/gpu/SharedGraphicsContext3D.cpp:
        (WebCore::SharedGraphicsContext3DImpl::getOrCreateContext):
        * platform/graphics/skia/ImageBufferSkia.cpp:
        (WebCore::createAcceleratedCanvas):

2012-11-26  Kentaro Hara  <haraken@chromium.org>

        [V8] Remove WorkerContextExecutionProxy.{h,cpp}
        https://bugs.webkit.org/show_bug.cgi?id=103325

        Reviewed by Adam Barth.

        Now WorkerContextExecutionProxy.{h,cpp} are empty.

        No tests. No change in behavior.

        * UseV8.cmake:
        * WebCore.gypi:
        * bindings/v8/ScheduledAction.cpp:
        * bindings/v8/V8AbstractEventListener.cpp:
        * bindings/v8/V8DOMWrapper.cpp:
        * bindings/v8/V8WorkerContextEventListener.h:
        (WebCore):
        * bindings/v8/WorkerContextExecutionProxy.cpp: Removed.
        * bindings/v8/WorkerContextExecutionProxy.h: Removed.
        * bindings/v8/WorkerScriptController.cpp:
        * bindings/v8/custom/V8DedicatedWorkerContextCustom.cpp:
        * bindings/v8/custom/V8MessageChannelCustom.cpp:
        * bindings/v8/custom/V8MessagePortCustom.cpp:
        * bindings/v8/custom/V8WorkerCustom.cpp:
        * bindings/v8/custom/V8XMLHttpRequestCustom.cpp:

2012-11-26  Michael Saboff  <msaboff@apple.com>

        Grapheme cluster functions can be simplified for 8 bit Strings
        https://bugs.webkit.org/show_bug.cgi?id=102996

        Reviewed by Alexey Proskuryakov.

        For 8 bit strings, check for the uncommon CR-LF by looking for any CR.  If there aren't any CR characters,
        the number of Extended Grapheme Clusters is equal to the string length.  If we need to handle Tailored
        Graheme Clusters, then this will need to change.

        No new tests. No change in functionality.

        * platform/text/TextBreakIterator.cpp:
        (WebCore::numGraphemeClusters):
        (WebCore::numCharactersInGraphemeClusters):

2012-11-26  Istiaque Ahmed  <lazyboy@chromium.org>

        Check for empty perContextData while creating NP V8 Object.
        https://bugs.webkit.org/show_bug.cgi?id=98448

        Reviewed by Adam Barth.

        Fixes crash in npCreateV8ScriptObject(), if NP Invoke is called from a document
        that is no longer displayed in frame (isCurrentlyDisplayedInFrame() ==
        false), we have empty perContextData and this results in invalid memory access.

        Test: platform/chromium/plugins/empty-per-context-data.html

        * bindings/v8/NPV8Object.cpp:
        (WebCore::npCreateV8ScriptObject):

2012-11-26  Michael Saboff  <msaboff@apple.com>

        HTML/XML parser helper unconsumeCharacters() can push back 8 bit text as 16 bit text
        https://bugs.webkit.org/show_bug.cgi?id=103317

        Reviewed by Oliver Hunt.

        Changed to use the String directly from the StringBuilder instead of creating our own.
        Used toStringPreserveCapacity() in case the caller may want to add to the StringBuilder
        even though current callers don't.

        No new tests. No change in functionality.

        * xml/parser/CharacterReferenceParserInlines.h:
        (WebCore::unconsumeCharacters):

2012-11-26  Noel Gordon  <noel.gordon@gmail.com>

        PNG decode performance: avoid using frame buffer.setRGBA(x,y)
        https://bugs.webkit.org/show_bug.cgi?id=103216

        Reviewed by Brent Fulgham.

        Writing decoded row pixels to the frame buffer with buffer.setRGBA(x,y) is slow compared
        to writing direct to the frame buffer address. Use buffer.getAddr() to obtain the output
        pixel row address, write the decoded row pixels to that address.

        No new tests. Covered by many existing tests.

        * platform/image-decoders/ImageDecoder.h:
        (WebCore::ImageFrame::setRGBA): Make routine setRGBA(PixelData* dest, ...) public. Test
        m_premultiplyAlpha once to minimize code branching in this routine.
        * platform/image-decoders/png/PNGImageDecoder.cpp:
        (WebCore::PNGImageDecoder::rowAvailable): Write decoded row pixels to the frame buffer
        using the pixel address form: buffer.setRGBA(address++, ...).

2012-11-26  Alpha Lam  <hclam@chromium.org>

        [chromium] Implement full-featured image cache
        https://bugs.webkit.org/show_bug.cgi?id=99784

        Reviewed by James Robinson.

        Implement a thread-safe image cache to be used with deferred image
        decoding. Image cache can now be accessed on any thread.

        The patch implements the following logic:
        1. Mutex to protect all cache operations.
        2. Cache indexing using key (ImageFrameGenerator*, SkISize scaledSize)
        3. Cache lookup.
        4. Cache insertion.
        5. Generation of cache entry by scaling full size image.
        6. Generation of cache entries by decoding and scaling.

        Classes involved:

        ImageDecodingStore

        Responsible for owning cache entries and indexing. Pruning and memory
        management will be added later.

        ImageFrameGenerator

        Responsible for generating new cache enties and insert them into
        ImageDecodingStore.

        LazyDecodingPixelRef

        Responsible for cache lookup and lazy generation of cache entries
        using ImageFrameGenerator. There is a mutex to protect concurrent
        lock operations.

        These items are not implemented in this patch:
        1. Cache pruning.
        2. Setting cache memory limit.
        3. Cache deletion.
        4. Caching incomplete images and ImageDecoder.

        Unit tests added in ImageFrameGeneratorTest.cpp.
        Layout tests are under platform/chromium/virtual/fast/images.

        * platform/graphics/chromium/DeferredImageDecoder.cpp:
        (WebCore::DeferredImageDecoder::~DeferredImageDecoder):
        (WebCore::DeferredImageDecoder::createResizedLazyDecodingBitmap):
        (WebCore::DeferredImageDecoder::setEnabled):
        (WebCore):
        (WebCore::DeferredImageDecoder::frameBufferAtIndex):
        (WebCore::DeferredImageDecoder::createLazyDecodingBitmap):
        * platform/graphics/chromium/DeferredImageDecoder.h:
        (DeferredImageDecoder):
        * platform/graphics/chromium/ImageDecodingStore.cpp:
        (WebCore::ImageDecodingStore::instance):
        (WebCore::ImageDecodingStore::initializeOnce):
        (WebCore::ImageDecodingStore::shutdown):
        (WebCore::ImageDecodingStore::lockCompleteCache):
        Lookup complete cache entry using hash key, increment use count.
        (WebCore::ImageDecodingStore::lockIncompleteCache): TODO.
        (WebCore::ImageDecodingStore::unlockCache):
        Lookup cache entry using hash key, decrement use count.
        (WebCore):
        (WebCore::ImageDecodingStore::insertAndLockCache):
        Insert new cache entry and increment use count.
        (WebCore::ImageDecodingStore::prune): TODO.
        * platform/graphics/chromium/ImageDecodingStore.h:
        (WebCore):
        (ImageDecodingStore):
        (WebCore::ImageDecodingStore::CacheEntry::create):
        (WebCore::ImageDecodingStore::CacheEntry::createAndUse):
        (CacheEntry):
        (WebCore::ImageDecodingStore::CacheEntry::CacheEntry):
        (WebCore::ImageDecodingStore::CacheEntry::~CacheEntry):
        * platform/graphics/chromium/ImageFrameGenerator.cpp:
        (WebCore::ImageFrameGenerator::ImageFrameGenerator):
        (WebCore::ImageFrameGenerator::setData):
        (WebCore::ImageFrameGenerator::decodeAndScale):
        Method for creating new cache entries. This is protected by a mutex
        to prevent concurrent operations. Which means only one thread can
        generate new cache entries for a set of encoded data.
        (WebCore):
        (WebCore::ImageFrameGenerator::tryToLockCache):
        Tries to lookup a cache entry.
        (WebCore::ImageFrameGenerator::tryToScale):
        Tries to lookup a full size cache entry and generate a scaled version.
        (WebCore::ImageFrameGenerator::tryToDecodeAndScale):
        Tries to decode and scale.
        * platform/graphics/chromium/ImageFrameGenerator.h:
        (WebCore):
        (ImageDecoderFactory):
        (WebCore::ImageFrameGenerator::create):
        (ImageFrameGenerator):
        (WebCore::ImageFrameGenerator::setImageDecoderFactoryForTesting):
        * platform/graphics/chromium/LazyDecodingPixelRef.cpp:
        (WebCore::LazyDecodingPixelRef::LazyDecodingPixelRef):
        (WebCore::LazyDecodingPixelRef::onLockPixels):
        (WebCore::LazyDecodingPixelRef::onUnlockPixels):
        * platform/graphics/chromium/LazyDecodingPixelRef.h:
        (WebCore):
        (LazyDecodingPixelRef):
        * platform/graphics/chromium/ScaledImageFragment.cpp:
        (WebCore::ScaledImageFragment::ScaledImageFragment):
        * platform/graphics/chromium/ScaledImageFragment.h:
        (WebCore):
        (WebCore::ScaledImageFragment::create):
        (ScaledImageFragment):
        (WebCore::ScaledImageFragment::scaledSize):
        * platform/graphics/chromium/SkSizeHash.h: Added.
        (WTF):

2012-11-26  Andreas Kling  <akling@apple.com>

        Node: Remove IsSynchronizingSVGAttributesFlag.
        <http://webkit.org/b/103328>

        Reviewed by Antti Koivisto.

        Animated SVG attributes used to be synchronized by using DOM API which could use unwanted re-entrancy
        via callbacks below Element::attributeChanged(). The "is synchronizing SVG attributes" flag was used
        to protect against such re-entrancy.

        These days, lazy attributes are synchronized using Element::setSynchronizedLazyAttribute() to avoid
        issues like this. The flag does nothing, so we can just remove it.

        * dom/Node.h:
        (WebCore):
        * svg/SVGElement.cpp:
        (WebCore::SVGElement::attributeChanged):
        (WebCore::SVGElement::updateAnimatedSVGAttribute):

2012-11-26  Kentaro Hara  <haraken@chromium.org>

        [V8] Refactor WorkerScriptController
        https://bugs.webkit.org/show_bug.cgi?id=103330

        Reviewed by Adam Barth.

        r135703 just moved methods from WorkerContextExecutionProxy
        to WorkerScriptController. We should refactor the methods as a follow-up.

        No tests. No change in behavior.

        * bindings/v8/WorkerScriptController.cpp:
        (WebCore::WorkerScriptController::~WorkerScriptController):
        (WebCore::WorkerScriptController::disposeContext):
        (WebCore::WorkerScriptController::initializeContextIfNeeded):
        (WebCore::WorkerScriptController::evaluate):
        (WebCore::WorkerScriptController::disableEval):
        * bindings/v8/WorkerScriptController.h:
        (WorkerScriptController):

2012-11-26  Varun Jain  <varunjain@chromium.org>

        LongPress and LongTap gestures should start drag/drop and open context menu respectively.
        https://bugs.webkit.org/show_bug.cgi?id=101545

        Reviewed by Antonio Gomes.

        For LongPress, we simulate drag by sending a mouse down and mouse drag
        events. If a drag is not started (because maybe there is no draggable
        element), then we show context menu instead (which is the current
        behavior for LongPress). For LongTap, we use the existing functions that
        LongPress uses to summon the context menu. LongPress initiated drag and
        drop can be enabled/disabled by the platform using the Setting
        touchDragDropEnabled which is disabled by default.

        Tests: fast/events/touch/gesture/context-menu-on-long-tap.html
               fast/events/touch/gesture/long-press-on-draggable-element-triggers-drag.html

        * page/EventHandler.cpp:
        (WebCore::EventHandler::EventHandler):
        (WebCore::EventHandler::clear):
        (WebCore::EventHandler::handleMouseDraggedEvent):
        (WebCore::EventHandler::handleGestureEvent):
        (WebCore::EventHandler::handleGestureLongPress):
        (WebCore::EventHandler::handleGestureLongTap):
        (WebCore):
        (WebCore::EventHandler::handleGestureForTextSelectionOrContextMenu):
        (WebCore::EventHandler::adjustGesturePosition):
        (WebCore::EventHandler::handleDrag):
        * page/EventHandler.h:
        (EventHandler):
        * page/Settings.in:

2012-11-26  Andreas Kling  <akling@apple.com>

        RenderStyle: Move 'list-style-image' to rare inherited data.
        <http://webkit.org/b/103300>

        Reviewed by Antti Koivisto.

        list-style-image is not nearly common enough to merit a spot in StyleInheritedData.
        Move it to StyleRareInheritedData.

        134kB progression on Membuster3.

        * rendering/style/RenderStyle.cpp:
        (WebCore::RenderStyle::diff):
        (WebCore::RenderStyle::listStyleImage):
        (WebCore::RenderStyle::setListStyleImage):
        * rendering/style/StyleInheritedData.cpp:
        (WebCore::StyleInheritedData::StyleInheritedData):
        (WebCore::StyleInheritedData::operator==):
        * rendering/style/StyleInheritedData.h:
        (StyleInheritedData):
        * rendering/style/StyleRareInheritedData.h:
        * rendering/style/StyleRareInheritedData.cpp:
        (SameSizeAsStyleRareInheritedData):
        (WebCore::StyleRareInheritedData::StyleRareInheritedData):
        (WebCore::StyleRareInheritedData::operator==):

2012-11-26  James Simonsen  <simonjam@chromium.org>

        Consolidate FrameLoader::load() into one function taking a FrameLoadRequest
        https://bugs.webkit.org/show_bug.cgi?id=102151

        Reviewed by Adam Barth.

        There's a FIXME that we have too many FrameLoader::load*() functions. This patch consolidates 3 into 1.
        There are still a few more load functions that will be consolidated later. Using FrameLoadRequest as
        the interface into FrameLoader will also provide a place to pass in the initiator. Finally, this matches
        the refactoring done with CachedResourceRequest and CachedResourceLoader.

        No new tests. No change in functionality.

        * WebCore.exp.in:
        * loader/FrameLoadRequest.h:
        (WebCore::FrameLoadRequest::FrameLoadRequest):
        (WebCore::FrameLoadRequest::setLockHistory): These are former arguments to load().
        (WebCore::FrameLoadRequest::lockHistory): Ditto.
        (FrameLoadRequest):
        (WebCore::FrameLoadRequest::setShouldCheckNewWindowPolicy): Ditto.
        (WebCore::FrameLoadRequest::shouldCheckNewWindowPolicy): Ditto.
        (WebCore::FrameLoadRequest::substituteData): Ditto.
        (WebCore::FrameLoadRequest::setSubstituteData): Ditto.
        (WebCore::FrameLoadRequest::hasSubstituteData): Ditto.
        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::load): No change in behavior, just merged it all into one function.
        * loader/FrameLoader.h:
        (FrameLoader):
        * page/DragController.cpp:
        (WebCore::DragController::performDrag):

2012-11-24 Genevieve Mak <gmak@rim.com>

        [BlackBerry] Stop sending touch events to plugins.
        https://bugs.webkit.org/show_bug.cgi?id=103188

        Reviewed by Rob Buis.

        Reviewed internally by Jeff Rogers and Mike Lattanzio.
        No tests required.
        PR #248605

        * plugins/blackberry/PluginViewBlackBerry.cpp:
        (WebCore::PluginView::handleTouchEvent):
        (WebCore::PluginView::handleMouseEvent):

2012-11-26  Adenilson Cavalcanti  <cavalcantii@gmail.com>

        Removing unnecessary friend classes in RenderObject: LayoutRepainter, RenderSVGContainer
        https://bugs.webkit.org/show_bug.cgi?id=103164

        Reviewed by Simon Fraser.

        Removing some of classes marked as friend of RenderObject. This patch solves this issue
        for 2 classes: RenderSVGContainer (that is derived from RenderObject) and LayoutRepainter
        (that accesses one const member function in RenderObject that is now made public).

        No new tests, no changes in functionality.

        * rendering/RenderObject.h:
        (RenderObject):
        (WebCore::RenderObject::outlineBoundsForRepaint):

2012-11-26  Jon Lee  <jonlee@apple.com>

        Pass clicks through to the restarted plugin
        https://bugs.webkit.org/show_bug.cgi?id=102150
        <rdar://problem/12695575>

        Reviewed by Simon Fraser.

        Add a new state to the machine for plugin snapshotting, called PlayingWithPendingMouseClick.
        This represents the state where the plugin is playing, but before the pending mouse click
        has been fired. Once the click is sent, the plugin state transitions to Playing. For
        situations where the plugin just runs normally without a simulated click, the plugin state
        jumps from DisplayingSnapshot straight to Playing, as before.

        * html/HTMLPlugInElement.h: Add new display state to represent when the plugin is running,
        but a pending mouse click is about to be sent to the plugin.
        (WebCore::HTMLPlugInElement::dispatchPendingMouseClick): Called by the plugin when it is
        ok for the element to send the pending mouse click.
        * html/HTMLPlugInElement.cpp:
        (WebCore::HTMLPlugInElement::defaultEventHandler): Update the handler to pass the event
        to the renderer to handle if the state is before PlayingWithPendingMouseClick.

        * html/HTMLPlugInImageElement.h:
        * html/HTMLPlugInImageElement.cpp: Add a click timer to delay the mouse click so that the
        plugin has some time to initialize.
        (WebCore::HTMLPlugInImageElement::HTMLPlugInImageElement): Initialize the mouse timer.
        (WebCore::HTMLPlugInImageElement::setPendingClickEvent): Keep track of the click event
        the user made to restart the plugin.
        (WebCore::HTMLPlugInImageElement::dispatchPendingMouseClick): Start the timer.
        (WebCore::HTMLPlugInImageElement::simulatedMouseClickTimerFired): When the timer fires,
        dispatch the simulated click, with mouse over, mouse down, and mouse up events. Transition
        to the Playing state, and we no longer need the click event.

        * rendering/RenderSnapshottedPlugIn.cpp: Change the threshold state to PlayingWithPendingMouseClick
        instead of Playing, since that is the earliest state where the plugin is playing.
        (WebCore::RenderSnapshottedPlugIn::paint):
        (WebCore::RenderSnapshottedPlugIn::paintReplaced):
        (WebCore::RenderSnapshottedPlugIn::getCursor):
        (WebCore::RenderSnapshottedPlugIn::handleEvent): If the user clicked on the button, jump to
        Playing, and don't send a simulated click. Otherwise, transition to PlayingWithPendingMouseClick,
        and keep track of that mouse event.

        * WebCore.exp.in: Export MouseRelatedEvent::offsetX() and offsetY().

2012-11-26  Dan Carney  <dcarney@google.com>

        Refactor V8 bindings to allow content scripts to access subframes
        https://bugs.webkit.org/show_bug.cgi?id=93646

        Reviewed by Adam Barth.

        Isolated window shells are now initialized on the fly
        as needed.

        No new tests. Existing test modified.

        * bindings/v8/DOMWrapperWorld.cpp:
        (WebCore::DOMWrapperWorld::ensureIsolatedWorld):
        * bindings/v8/DOMWrapperWorld.h:
        (WebCore::DOMWrapperWorld::createdFromUnitializedWorld):
        (DOMWrapperWorld):
        * bindings/v8/ScriptController.cpp:
        (WebCore::ScriptController::currentWorldContext):

2012-11-26  Alex Christensen  <alex.christensen@flexsim.com>

        clipboardwin compile error for win64
        https://bugs.webkit.org/show_bug.cgi?id=94124

        Reviewed by Brent Fulgham.

        The clipboard utilities code uses std::min with one unsigned int parameter and one size_t parameter.
        This causes a problem when compiling for 64-bit Windows because the two types are not the same size.
        To resolve this issue, we specify the template type as the type the return value is being cast into

        Fixed a few compile errors for Windows x64 by specifying template parameters.

        * platform/win/ClipboardUtilitiesWin.cpp:
        (WebCore::setFileDescriptorData): Specify the types for the std::min macro to avoid compiler errors
        under 64-bit builds.

2012-11-26  Arnaud Renevier  <a.renevier@sisa.samsung.com>

        [GTK] GtkSocket is leaked until webview is destroyed.
        https://bugs.webkit.org/show_bug.cgi?id=102564

        Reviewed by Martin Robinson.

        Remove GtkSocket from its parent when pluginview is destroyed. Then,
        the GtkSocket and it's possible child widgets are realeased when it is
        no more needed.

        No new tests, already covered by existing tests.

        * plugins/gtk/PluginViewGtk.cpp:
        (WebCore::PluginView::platformDestroy):

2012-11-26  Luke Macpherson   <macpherson@chromium.org>

        Make StyleResolver::applyProperty use isInherit in CSSPropertyWebkitMarquee instead of calculating equivalent in-place.
        https://bugs.webkit.org/show_bug.cgi?id=102446

        Reviewed by Tony Chang.

        !m_parentNode || !value->isInheritedValue() is equivalent to !isInherit (by De Morgan's law).

        No new tests / code is provably equivalent.

        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::applyProperty):

2012-11-26  Pratik Solanki  <psolanki@apple.com>

        Add ResourceBuffer::append(CFDataRef) to get code to compile with USE(NETWORK_CFDATA_ARRAY_CALLBACK)
        https://bugs.webkit.org/show_bug.cgi?id=102706

        Reviewed by Brent Fulgham.

        No new tests because the flag isn't enabled. Also the functionality should be covered by
        existing tests.

        * loader/ResourceBuffer.cpp:
        (WebCore):
        (WebCore::ResourceBuffer::append):
        * loader/ResourceBuffer.h:
        (ResourceBuffer):
        * loader/mac/ResourceLoaderMac.mm:

2012-11-26  Tony Chang  <tony@chromium.org>

        Move more functions from internals.settings to internals
        https://bugs.webkit.org/show_bug.cgi?id=102976

        Reviewed by Adam Barth.

        Move functions that don't have to do with Settings off of internals.settings.
        setPagination and configurationForViewport were defined on internals, so we
        can inline the functions (no test change).

        setEnableMockPagePopup is moved to Internals.

        No new tests, this is a refactor.

        * testing/InternalSettings.cpp:
        (WebCore::InternalSettings::reset): Move reset code into Internals.
        * testing/InternalSettings.h:
        (InternalSettings): Remove code for setPagination, configurationForViewport and setEnableMockPagePopup.
        * testing/InternalSettings.idl: Remove setPagination and setEnableMockPagePopup.
        * testing/Internals.cpp:
        (WebCore): Use a static to keep track of the MockPagePopupDriver.
        (WebCore::Internals::resetToConsistentState): Code from InternalSettings::reset
        (WebCore::Internals::setEnableMockPagePopup): Code copied from InternalSettings.
        (WebCore::Internals::pagePopupController): Code copied from InternalSettings.
        (WebCore::Internals::setPagination): Code copied from InternalSettings.
        (WebCore::Internals::configurationForViewport): Code copied from InternalSettings.
        * testing/Internals.h:
        (Internals): Add setEnableMockPagePopup.
        * testing/Internals.idl: Add setEnableMockPagePopup.

2012-11-26  Andrei Bucur  <abucur@adobe.com>

        [CSS Regions] Add Region info for RootLineBoxes and pack the pagination data
        https://bugs.webkit.org/show_bug.cgi?id=101332

        Reviewed by David Hyatt.

        Currently the pagination information for lines is spread between the RootInlineBox and InlineFlowBox classes, consuming memory even though
        the boxes were not the result of an pagination layout. To overcome this, a new struct (LineFragmentationData) is created that wraps all the data,
        including two new members, the containing Region for the line and a boolean that states if the line was laid out in a Region or not.
        The flag is necessary because the sanitize function on LineFragmentationData resets the containing Region to 0 if the Region was removed from
        chain (so a value of 0 for the containing Region means two things). The sanitize function should prevent access to an invalid address.
        The containing Region is used to detect if a line changed the Region where it resides. This will be helpful especially when implementing region
        styling for layout properties (e.g. the font-size property https://bugs.webkit.org/show_bug.cgi?id=95559 ).
        A line can change the region when it is shifted inside the containing block or if the entire block moves. This means it's better to delegate
        the task of updating the containing Region to the block.

        Tests: fast/regions/line-containing-region-crash.html

        * rendering/InlineFlowBox.cpp:
        (SameSizeAsInlineFlowBox):
        * rendering/InlineFlowBox.h:
        (WebCore::InlineFlowBox::InlineFlowBox):
        (InlineFlowBox):
        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::lineWidthForPaginatedLineChanged):
        * rendering/RenderBlockLineLayout.cpp:
        (WebCore::RenderBlock::layoutRunsAndFloatsInRange):
        (WebCore::RenderBlock::linkToEndLineIfNeeded):
        (WebCore::RenderBlock::determineStartPosition):
        * rendering/RootInlineBox.cpp:
        (WebCore::RootInlineBox::RootInlineBox):
        (WebCore::RootInlineBox::setContainingRegion):
        (WebCore):
        (WebCore::RootInlineBox::LineFragmentationData::sanitize): This is an O(1) function that checks if the containig Region is still valid pointer.
        * rendering/RootInlineBox.h:
        (WebCore):
        (WebCore::RootInlineBox::paginationStrut):
        (WebCore::RootInlineBox::setPaginationStrut):
        (WebCore::RootInlineBox::isFirstAfterPageBreak):
        (WebCore::RootInlineBox::setIsFirstAfterPageBreak):
        (WebCore::RootInlineBox::paginatedLineWidth):
        (WebCore::RootInlineBox::setPaginatedLineWidth):
        (RootInlineBox):
        (WebCore::RootInlineBox::containingRegion):
        (WebCore::RootInlineBox::hasContainingRegion): Use this to determine if the line has a region or not.
        (WebCore::RootInlineBox::ensureLineFragmentationData):
        (LineFragmentationData):
        (WebCore::RootInlineBox::LineFragmentationData::LineFragmentationData):


2012-11-26  Michelangelo De Simone  <michelangelo@webkit.org>

        [CSS Shaders] Add IDL file and bindings for mix function
        https://bugs.webkit.org/show_bug.cgi?id=93011

        Reviewed by Dean Jackson.

        JavaScript bindings have been added for the Custom Filter mix()
        function (WebKitCSSMixFunctionValue). As of now, this is only a
        placeholder that extends CSSValueList without adding any new
        property.

        Test: css3/filters/custom/custom-filter-mix-bindings.html

        * CMakeLists.txt: mix() IDL has been added to the Generator;
        DerivedSources have been included.
        * DerivedSources.cpp: Ditto.
        * DerivedSources.make: Ditto.
        * DerivedSources.pri: Ditto.
        * GNUmakefile.list.am: Ditto.
        * WebCore.gypi: Ditto.
        * WebCore.vcproj/WebCore.vcproj: Ditto.
        * WebCore.xcodeproj/project.pbxproj: Ditto.
        * bindings/js/JSCSSValueCustom.cpp:
        (WebCore::toJS): return a JSC DOM wrapper for WebKitCSSMixFunctionValue.
        * bindings/v8/custom/V8CSSValueCustom.cpp:
        (WebCore::V8CSSValue::dispatchWrapCustom): Ditto, for V8.
        * css/WebKitCSSMixFunctionValue.idl: Added.

2012-11-26  Simon Fraser  <simon.fraser@apple.com>

        Optimize layer updates after scrolling
        https://bugs.webkit.org/show_bug.cgi?id=102635

        Reviewed by Sam Weinig.

        updateLayerPositionsAfterScroll() previously unconditionally cleared clip
        rects, and recomputed repaint rects too often. Recomputing both of these
        can be very expensive, as they involve tree walks up to the root.
        
        We can optimize layer updates after document scrolling by only clearing clip
        rects, and recomputing repaint rects, if we encounter a fixed- or sticky-position
        element. For overflow scroll, we have to clear clip rects and recompute repaint rects.

        * page/FrameView.cpp:
        (WebCore::FrameView::repaintFixedElementsAfterScrolling): Call updateLayerPositionsAfterDocumentScroll().
        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::updateLayerPositions): Call clearClipRects() because
        updateLayerPosition() no longer does.
        (WebCore::RenderLayer::updateLayerPositionsAfterDocumentScroll): Version of updateLayerPositionsAfterScroll()
        that is for document scrolls. It has no need to push layers to the geometry map.
        (WebCore::RenderLayer::updateLayerPositionsAfterOverflowScroll): Pushes layers to the geometry map,
        and calls updateLayerPositionsAfterScroll() with the IsOverflowScroll flag.
        (WebCore::RenderLayer::updateLayerPositionsAfterScroll): Set the HasChangedAncestor flag
        if our location changed, and use that as a hint to clear cached rects. Be more conservative
        than before about when to clear cached clip rects.
        (WebCore::RenderLayer::updateLayerPosition):  Move responsibility for calling
        clearClipRects() ouf of this function and into callers.
        (The one caller outside RenderLayer will be removed via bug 102624).
        Return a bool indicating whether our position changed.
        (WebCore::RenderLayer::scrollTo): Call updateLayerPositionsAfterOverflowScroll().
        (WebCore::RenderLayer::updateClipRects): Added some #ifdeffed out code that is useful
        to verify that cached clips are correct; it's too slow to leave enabled in debug builds.
        * rendering/RenderLayer.h:
        (WebCore::RenderLayer::setLocation): Change to take a LayoutPoint, rather than separate
        x and y.

2012-11-26  Rafael Brandao  <rafael.lobo@openbossa.org>

        [Cairo] Surface should not be destroyed before its usage
        https://bugs.webkit.org/show_bug.cgi?id=103273

        Reviewed by Brent Fulgham.

        * platform/graphics/texmap/TextureMapperGL.cpp:
        (WebCore::TextureMapperGL::drawRepaintCounter): There's some calls to get
        the bits and stride from surface right after its destructions. It should
        be postponed to avoid annoying bugs.

2012-11-26  Julien Chaffraix  <jchaffraix@webkit.org>

        RenderBox::computePercentageLogicalHeight should use containingBlockLogicalWidthForContent
        https://bugs.webkit.org/show_bug.cgi?id=103075

        Reviewed by Ojan Vafai.

        Using the containing block's content logical block was working for most renderers but 2 renderers
        were special and were broken in orthogonal writing modes:
        - captions as they override containingBlockLogicalWidthForContent to return the table's logical width.
        - multi-column renderers as they override availableLogicalWidth to constrain the child to the column logical width.

        By switching to containingBlockLogicalWidthForContent, we got those 2 cases covered.

        Tests: fast/multicol/fixed-column-percent-logical-height-orthogonal-writing-mode.html
               fast/table/caption-orthogonal-writing-mode-sizing.html

        * rendering/RenderBox.cpp:
        (WebCore::RenderBox::computePercentageLogicalHeight):
        Updated the function to track which renderer's containing block we use and call
        containingBlockLogicalWidthForContent on it.

2012-11-26  Abhishek Arya  <inferno@chromium.org>

        Crash in Frame::dispatchVisibilityStateChangeEvent.
        https://bugs.webkit.org/show_bug.cgi?id=102053

        Reviewed by Adam Barth.

        Child frame can go away inside webkitvisibilitychange
        event handler. Store it in a ref counted vector.

        Test: fast/frames/page-visibility-crash.html

        * page/Frame.cpp:
        (WebCore::Frame::dispatchVisibilityStateChangeEvent):

2012-11-26  Hurnjoo Lee  <hurnjoo.lee@samsung.com>

        [Cairo] fillRectWithColor with Color::transparent doesn't perform anything
        https://bugs.webkit.org/show_bug.cgi?id=101911

        Reviewed by Kenneth Rohde Christiansen.

        fillRectWithColor with Color::transparent doesn't perform anything
        because fillRectWithColor does early-return if the alpha value of
        color is zero. But we expect that fill the rect with transparent color
        in case the cairo_operator is CAIRO_OPERATOR_SOURCE.

        Covered by existing tests.

        * platform/graphics/cairo/GraphicsContextCairo.cpp:
        (WebCore::fillRectWithColor):Add condition to prevent early-return if
        cairo_operator is not CAIRO_OPERATOR_OVER

2012-11-26  Jae Hyun Park  <jae.park@company100.net>

        Remove redundant assignment in TextureMapperLayer::flushCompositingStateSelf
        https://bugs.webkit.org/show_bug.cgi?id=103233

        Reviewed by Noam Rosenthal.

        This patch removes redundant assignment in TextureMapperLayer::flushCompositingStateSelf.

        No new tests, because no change in bahavior.

        * platform/graphics/texmap/TextureMapperLayer.cpp:
        (WebCore::TextureMapperLayer::flushCompositingStateSelf):

2012-11-26  Tamas Czene  <tczene@inf.u-szeged.hu>

        OpenCL version of SourceAlpha, SourceGraphics and FETurbulence filter effects 
        https://bugs.webkit.org/show_bug.cgi?id=99829

        Reviewed by Zoltan Herczeg.

        This patch contains the OpenCL implementation of SourceAlpha, SourceGraphic, FETurbulence and a simple OpenCL environment. 
        At the moment only the Qt build system is supported 
        ~3x speed-up (depending on hardware configuration)

        * Target.pri:
        * WebCore.pri:
        * platform/graphics/filters/FETurbulence.h: Added platformApplyOpenCL() virtual function.
        (FETurbulence):
        * platform/graphics/filters/FilterEffect.cpp: Added platform specific apply.
        (WebCore::FilterEffect::apply):
        (WebCore):
        (WebCore::FilterEffect::platformApplyOpenCL): A function to use software computing if a filter is not implemented on OpenCL. It will be deleted after all of the filters are implemented.
        (WebCore::FilterEffect::clearResult):
        (WebCore::FilterEffect::asImageBuffer):
        (WebCore::FilterEffect::openCLImageToImageBuffer): Gets the result of the filter from the OpenCL device and converts it to ImageBuffer type.
        (WebCore::FilterEffect::createOpenCLImageResult): Allocates memory on OpenCL device and if it gets an image as a parameter, it uploads the image to the OpenCL device.
        (WebCore::FilterEffect::transformResultColorSpace): 
        * platform/graphics/filters/FilterEffect.h:
        (FilterEffect):
        (WebCore::FilterEffect::openCLImage):
        (WebCore::FilterEffect::setOpenCLImage):
        (WebCore::FilterEffect::hasResult):
        * platform/graphics/filters/SourceAlpha.h:
        (SourceAlpha):
        * platform/graphics/filters/SourceGraphic.h:
        (SourceGraphic):
        * platform/graphics/gpu/opencl/FilterContextOpenCL.cpp: Added.
        (WebCore):
        (WebCore::FilterContextOpenCL::context): Configures the OpenCL environment.
        (WebCore::FilterContextOpenCL::createOpenCLImage): Allocates memory on OpenCL device.
        (WebCore::FilterContextOpenCL::openCLTransformColorSpace): OpenCL implementation of transformColorSpace.
        (WebCore::FilterContextOpenCL::compileProgram):
        * platform/graphics/gpu/opencl/FilterContextOpenCL.h: Added.
        (WebCore):
        (FilterContextOpenCL):
        (WebCore::FilterContextOpenCL::deviceId):
        (WebCore::FilterContextOpenCL::deviceContext):
        (WebCore::FilterContextOpenCL::commandQueue):
        (RunKernel):
        (WebCore::FilterContextOpenCL::RunKernel::RunKernel):
        (WebCore::FilterContextOpenCL::RunKernel::addArgument):
        (WebCore::FilterContextOpenCL::RunKernel::run):
        (WebCore::FilterContextOpenCL::kernelByName): Returns the reference of a function in the OpenCL program.
        * platform/graphics/gpu/opencl/OpenCLFESourceAlpha.cpp: Added.
        (WebCore):
        (WebCore::SourceAlpha::platformApplyOpenCL):
        * platform/graphics/gpu/opencl/OpenCLFESourceGraphic.cpp: Added.
        (WebCore):
        (WebCore::SourceGraphic::platformApplyOpenCL):
        * platform/graphics/gpu/opencl/OpenCLFETurbulence.cpp: Added.
        (WebCore):
        (WebCore::FilterContextOpenCL::compileFETurbulence):
        (WebCore::FilterContextOpenCL::applyFETurbulence):
        (WebCore::FETurbulence::platformApplyOpenCL):
        * platform/graphics/gpu/opencl/OpenCLHandle.h: Added.
        (WebCore):
        (OpenCLHandle):
        (WebCore::OpenCLHandle::OpenCLHandle):
        (WebCore::OpenCLHandle::operator cl_mem):
        (WebCore::OpenCLHandle::operator=):
        (WebCore::OpenCLHandle::operator UnspecifiedBoolType):
        (WebCore::OpenCLHandle::handleAddress):
        (WebCore::OpenCLHandle::clear):

2012-11-26  'Pavel Feldman'  <pfeldman@chromium.org>

        Not reviewed: follow up for r135720, fixing node highlight.

        * inspector/InspectorOverlayPage.html:

2012-11-26  Viatcheslav Ostapenko  <v.ostapenko@samsung.com>

        [EFL] Crashes in compositing layout tests with AC on.
        https://bugs.webkit.org/show_bug.cgi?id=103144

        Reviewed by Noam Rosenthal.

        Application could leave texture packing parameters in non-zero state before
        texture mapper drawing/texture uploading. To avoid crash texture upload should
        specify packing parameters before each texture upload if packing is supported.

        Covered by existing tests.

        * platform/graphics/texmap/TextureMapperGL.cpp:
        (WebCore::BitmapTextureGL::updateContentsNoSwizzle):

2012-11-26  George Staikos  <staikos@webkit.org>

        [BlackBerry] Remove a lot of unnecessary and incorrect code causing crashes
        https://bugs.webkit.org/show_bug.cgi?id=103199

        Reviewed by Yong Li.

        This is the first big step to unforking this code.  It's very close to
        where it needs to be now, but the first step is to get rid of the
        crashes by deleting code that isn't needed and makes bad assumptions
        about object lifetime.  Crashes were found by automation without
        test case or reproduction steps.

        * loader/blackberry/CookieJarBlackBerry.cpp:
        (WebCore::cookies): delete most code
        (WebCore::setCookies): delete most code

2012-11-26  Thiago Marcos P. Santos  <thiago.santos@intel.com>

        Viewport CSS rules should not clamp values like Viewport META
        https://bugs.webkit.org/show_bug.cgi?id=103068

        Reviewed by Kenneth Rohde Christiansen.

        CSS Device Adaption does not clamp the length and zoom values the
        same way as the Viewport META. In fact, they are not clamped at all,
        but instead, we just make sure that length values are at least 1px.

        Tests: css3/device-adapt/opera/constrain-018.xhtml
               css3/device-adapt/opera/constrain-019.xhtml
               css3/device-adapt/opera/constrain-023.xhtml
               css3/device-adapt/opera/constrain-024.xhtml

        * dom/ViewportArguments.cpp:
        (WebCore::ViewportArguments::resolve):

2012-11-26  Mike West  <mkwst@chromium.org>

        Web Inspector: URLs containing '^' are improperly linked in console messages.
        https://bugs.webkit.org/show_bug.cgi?id=103248

        Reviewed by Yury Semikhatsky.

        This patch adds '^' to WebInspector's regex of acceptable characters for
        URLs that it knows how to display.

        Test: http/tests/inspector/network/script-as-text-loading-with-caret.html

        * inspector/front-end/ResourceUtils.js:
        (WebInspector.linkifyStringAsFragmentWithCustomLinkifier):

2012-11-26  Yury Semikhatsky  <yurys@chromium.org>

        Unreviewed. Fix Qt minimal compilation after r135713.

        * inspector/InspectorController.h: hid file content behind ENABLE(INSPECTOR)

2012-11-26  Pavel Feldman  <pfeldman@chromium.org>

        Web Inspector: object preview does not render node id, className; logs too many functions for jQuery.
        https://bugs.webkit.org/show_bug.cgi?id=103222

        Reviewed by Yury Semikhatsky.

        - Added node class name and id into the preview
        - Now keeps track of properties separately from array indexes.

        * inspector/InjectedScriptSource.js:
        (.):
        * inspector/InspectorOverlayPage.html:
        * inspector/front-end/ConsoleMessage.js:
        (WebInspector.ConsoleMessageImpl.prototype._appendObjectPreview):
        (WebInspector.ConsoleMessageImpl.prototype._appendPropertyPreview):

2012-11-26  Florin Malita  <fmalita@chromium.org>

        RenderSVGResourceContainer does not clear cached data on removal
        https://bugs.webkit.org/show_bug.cgi?id=102620

        Reviewed by Dirk Schulze.

        RenderSVGResourceContainer::removeClient needs to also remove the client from specialized
        caches, otherwise we can end up with stale references.

        Test: svg/custom/stale-resource-data-crash.svg

        * rendering/svg/RenderSVGResourceContainer.cpp:
        (WebCore::RenderSVGResourceContainer::removeClient):

2012-11-26  'Pavel Feldman'  <pfeldman@chromium.org>

        Not reviewed: rolling out r135714 and r135712 for breaking debug tests.

        * inspector/InjectedScriptSource.js:
        (.):
        * inspector/InspectorOverlayPage.html:
        * inspector/front-end/ConsoleMessage.js:
        (WebInspector.ConsoleMessageImpl.prototype._appendObjectPreview):

2012-11-26  Zeno Albisser  <zeno@webkit.org>

        [Qt][Win] buildfix after r135706.
        https://bugs.webkit.org/show_bug.cgi?id=103249

        The Windows implementation of GraphicsSurface cannot use
        m_size anymore, as this member has been removed.
        Further it needs to implement a platformSize() function.

        Reviewed by Kenneth Rohde Christiansen.

        * platform/graphics/surfaces/win/GraphicsSurfaceWin.cpp:
        (WebCore::GraphicsSurfacePrivate::size):
        (WebCore::GraphicsSurface::platformPaintToTextureMapper):
        (WebCore::GraphicsSurface::platformSize):
        (WebCore):

2012-11-26  Yury Semikhatsky  <yurys@chromium.org>

        Web Inspector: unify agents handling in Page and Worker inspector controllers
        https://bugs.webkit.org/show_bug.cgi?id=103238

        Reviewed by Alexander Pavlov.

        Introduced a class that represents a collection of inspector agents and allows
        to call methods declared on InspectorAgentBaseInterface for all registered agents.
        InspectorController and WorkerInspectorController switched to this class.

        * inspector/InspectorBaseAgent.cpp:
        (WebCore::InspectorAgentRegistry::append):
        (WebCore):
        (WebCore::InspectorAgentRegistry::setFrontend):
        (WebCore::InspectorAgentRegistry::clearFrontend):
        (WebCore::InspectorAgentRegistry::restore):
        (WebCore::InspectorAgentRegistry::registerInDispatcher):
        (WebCore::InspectorAgentRegistry::discardAgents):
        * inspector/InspectorBaseAgent.h:
        (InspectorAgentRegistry):
        (WebCore):
        * inspector/InspectorController.cpp:
        (WebCore::InspectorController::~InspectorController):
        (WebCore::InspectorController::connectFrontend):
        (WebCore::InspectorController::disconnectFrontend):
        (WebCore::InspectorController::reconnectFrontend):
        * inspector/InspectorController.h:
        (InspectorController):

2012-11-26  Pavel Feldman  <pfeldman@chromium.org>

        Web Inspector: object preview does not render node id, className; logs too many functions for jQuery.
        https://bugs.webkit.org/show_bug.cgi?id=103222

        Reviewed by Yury Semikhatsky.

        - Added node class name and id into the preview
        - Now keeps track of properties separately from array indexes.

        * inspector/InjectedScriptSource.js:
        (.):
        * inspector/InspectorOverlayPage.html:
        * inspector/front-end/ConsoleMessage.js:
        (WebInspector.ConsoleMessageImpl.prototype._appendObjectPreview):
        (WebInspector.ConsoleMessageImpl.prototype._appendPropertyPreview):

2012-11-26  Andrey Adaikin  <aandrey@chromium.org>

        Web Inspector: [WebGL] Save WebGL extensions and restore on replay
        https://bugs.webkit.org/show_bug.cgi?id=103141

        Reviewed by Yury Semikhatsky.

        Save WebGL extensions that were enabled by the application, and restore it before the replay.
        Drive-by: remove redundant if- checks in WebGL custom function wrappers (similar to 2D canvas).

        * inspector/InjectedScriptCanvasModuleSource.js:
        (.):

2012-11-26  Allan Sandfeld Jensen  <allan.jensen@digia.com>

        HitTestResult should not be a HitTestLocation
        https://bugs.webkit.org/show_bug.cgi?id=101590

        Reviewed by Sam Weinig.

        Change HitTestResult from being a HitTestLocation to having a HitTestLocation. 
        A result of a test should not be a special case of the location of the test.

        No change in functionality. No new tests.

        * rendering/HitTestResult.cpp:
        (WebCore::HitTestResult::HitTestResult):
        (WebCore::HitTestResult::operator=):
        (WebCore::HitTestResult::isSelected):
        (WebCore::HitTestResult::spellingToolTip):
        (WebCore::HitTestResult::replacedString):
        * rendering/HitTestResult.h:
        (WebCore::HitTestResult::isRectBasedTest):
        (WebCore::HitTestResult::pointInInnerNodeFrame):
        (WebCore::HitTestResult::hitTestLocation):
        (HitTestResult):

2012-11-26  Marja Hölttä  <marja@chromium.org>

        Circular reference between Document and MediaQueryMatcher.
        https://bugs.webkit.org/show_bug.cgi?id=103242

        Reviewed by Kenneth Rohde Christiansen.

        It's not enough to clean up listeners in MediaQueryMatcher in ~Document,
        since MediaQueryListListener keeps the Document alive. This caused
        www.crbug.com/113983.

        No new tests: No visible change in behavior (except that it doesn't leak memory).

        * dom/Document.cpp:
        (WebCore::Document::~Document):
        (WebCore::Document::detach):

2012-11-26  Eugene Klyuchnikov  <eustas@chromium.org>

        Web Inspector: HeapProfiler: remove snapshotView reference from data-grids.
        https://bugs.webkit.org/show_bug.cgi?id=103240

        Reviewed by Yury Semikhatsky.

        Cleanup: remove redundant dependency.

        * inspector/front-end/HeapSnapshotDataGrids.js: Do not store view ref.
        * inspector/front-end/HeapSnapshotGridNodes.js:
        Removed unused assignments.
        * inspector/front-end/HeapSnapshotView.js:
        Do not pass self to data-grids.

2012-11-26  Zeno Albisser  <zeno@webkit.org>

        GraphicsSurface should only store its size in a single place.
        https://bugs.webkit.org/show_bug.cgi?id=103143

        Reviewed by Kenneth Rohde Christiansen.

        * platform/graphics/qt/GraphicsContext3DQt.cpp:
        (WebCore::GraphicsContext3DPrivate::GraphicsContext3DPrivate):
            Cosmetics only.
        * platform/graphics/surfaces/GraphicsSurface.cpp:
        (WebCore::GraphicsSurface::size):
            Return the size as received from the platform abstraction.
        (WebCore):
        (WebCore::GraphicsSurface::GraphicsSurface):
        * platform/graphics/surfaces/GraphicsSurface.h:
        (GraphicsSurface):
            Remove data member m_size.
        * platform/graphics/surfaces/mac/GraphicsSurfaceMac.cpp:
        (WebCore::GraphicsSurfacePrivate::GraphicsSurfacePrivate):
            Always take the size of the GraphicsSurface as an argument.
        (WebCore::GraphicsSurfacePrivate::size):
        (GraphicsSurfacePrivate):
        (WebCore::GraphicsSurface::platformPaintToTextureMapper):
            Retrieve the size from GraphicsSurfacePrivate where necessary.
        (WebCore::GraphicsSurface::platformSize):
        (WebCore):
        (WebCore::GraphicsSurface::platformImport):
        * platform/graphics/surfaces/qt/GraphicsSurfaceGLX.cpp:
        (WebCore::GraphicsSurfacePrivate::GraphicsSurfacePrivate):
            Add a constructor that takes a window id as an argument
            for the receiving side of the GraphcisSurface.
            The GraphicsSurface can then determine its dimensions
            from the provided XWindow.
        (WebCore::GraphicsSurfacePrivate::createPixmap):
        (WebCore::GraphicsSurfacePrivate::size):
            Query the size of the GraphicsSurface backing from X.
        (WebCore::GraphicsSurface::platformPaintToTextureMapper):
            Retrieve the size from GraphicsSurfacePrivate where necessary.
        (WebCore::GraphicsSurface::platformSize):
        (WebCore):
        (WebCore::GraphicsSurface::platformImport):

2012-11-26  Thiago Santos  <thiago.sousa.santos@collabora.com>

        [GStreamer] Floating reference handling fix
        https://bugs.webkit.org/show_bug.cgi?id=101349

        Reviewed by Philippe Normand.

        GStreamer 0.10 and 1.0 differ when creating GstGhostPad from pad
        templates, the 1.0 doesn't take ownership on the passed
        GstPadTemplate, while 0.10 does. So this patch adds a
        GStreamerVersioning function to handle this different approach
        transparently in Webkit gstreamer elements.

        Existing media tests cover this change.

        * platform/audio/gstreamer/WebKitWebAudioSourceGStreamer.cpp:
        (webkit_web_audio_src_init):
        * platform/graphics/gstreamer/GStreamerVersioning.cpp:
        (webkitGstGhostPadFromStaticTemplate):
        * platform/graphics/gstreamer/GStreamerVersioning.h:
        * platform/graphics/gstreamer/WebKitWebSourceGStreamer.cpp:
        (webkit_web_src_init):

2012-11-26  Kentaro Hara  <haraken@chromium.org>

        [V8] Remove WorkerContextExecutionProxy
        https://bugs.webkit.org/show_bug.cgi?id=103210

        Reviewed by Adam Barth.

        This patch moves all methods in WorkerContextExecutionProxy
        to WorkerScriptController.

        Due to the dependency between WorkerContextExecutionProxy's methods,
        it is a bit difficult to split this patch into pieces.
        This patch simply moves methods without changing their logic.
        Also this patch doesn't remove empty WorkerContextExecutionProxy.{h,cpp}
        to keep the diff sane. I will address these issues in a follow-up patch.

        Tests: fast/worker/*

        * bindings/v8/ScriptState.cpp:
        (WebCore::scriptStateFromWorkerContext):
        * bindings/v8/V8Binding.cpp:
        (WebCore::toV8Context):
        * bindings/v8/V8WorkerContextEventListener.cpp:
        (WebCore::V8WorkerContextEventListener::handleEvent):
        * bindings/v8/WorkerContextExecutionProxy.cpp:
        * bindings/v8/WorkerContextExecutionProxy.h:
        * bindings/v8/WorkerScriptController.cpp:
        (WebCore::WorkerScriptController::WorkerScriptController):
        (WebCore::WorkerScriptController::~WorkerScriptController):
        (WebCore::WorkerScriptController::dispose):
        (WebCore):
        (WebCore::WorkerScriptController::initializeIfNeeded):
        (WebCore::WorkerScriptController::evaluate):
        (WebCore::WorkerScriptController::setEvalAllowed):
        (WebCore::WorkerScriptController::disableEval):
        * bindings/v8/WorkerScriptController.h:
        (WebCore):
        (WebCore::WorkerContextExecutionState::WorkerContextExecutionState):
        (WorkerContextExecutionState):
        (WorkerScriptController):
        (WebCore::WorkerScriptController::context):
        * bindings/v8/WorkerScriptDebugServer.cpp:
        (WebCore::WorkerScriptDebugServer::addListener):
        * bindings/v8/custom/V8WorkerContextCustom.cpp:
        (WebCore::SetTimeoutOrInterval):
        (WebCore::toV8):

2012-11-26  Hajime Morrita  <morrita@google.com>

        [Refactoring] Some Node::isDescendant calls can be replaced with Node::contains()
        https://bugs.webkit.org/show_bug.cgi?id=103211

        Reviewed by Daniel Bates.

        A couple of call sites of isDescendant() does same as Node::contains().
        This change replaces these locations with Node::contains().

        No new tests, no behavior change.

        * dom/Node.cpp:
        (WebCore::checkAcceptChild):
        * dom/Range.cpp:
        (WebCore::Range::surroundContents):

2012-11-26  Kunihiko Sakamoto  <ksakamoto@chromium.org>

        [Chromium] Enable input type datetime-local
        https://bugs.webkit.org/show_bug.cgi?id=103213

        Reviewed by Kent Tamura.

        This patch enables <input type=datetime-local> for Chromium.

        No new tests. Covered by existing tests.

        * bindings/generic/RuntimeEnabledFeatures.cpp:
        (WebCore): Changed RuntimeEnabledFeatures::isInputTypeDateTimeLocalEnabled to true
        if INPUT_TYPE_DATETIMELOCAL is enabled.

2012-11-26  Hajime Morrita  <morrita@google.com>

        [Shadow DOM] Implement Element::createShadowRoot()
        https://bugs.webkit.org/show_bug.cgi?id=102911

        Reviewed by Kentaro Hara.

        Added an API implementation and exposed it.

        This is basically an alias of the ShadowRoot constructor, which
        will be removed as bug 102913.

        Test: fast/dom/shadow/shadow-aware-create-shdow-root.html

        * bindings/gobject/GNUmakefile.am:
        * dom/Element.cpp:
        (WebCore::Element::createShadowRoot):
        (WebCore):
        * dom/Element.h:
        (Element):
        * dom/Element.idl:

2012-11-26  Jon Lee  <jonlee@apple.com>

        Extend EventDispatcher::dispatchSimulatedClick to allow sending a mouseover event
        https://bugs.webkit.org/show_bug.cgi?id=102610
        <rdar://problem/12725663>

        Reviewed by Darin Adler.

        Update the dispatchSimulatedClick() to take option enums for dispatching events.

        * dom/SimulatedClickOptions.h: Added. Define two options enums. One tracks which mouse
        events to send. The other determines whether to force the element to repaint.

        * dom/EventDispatcher.cpp:
        (WebCore::EventDispatcher::dispatchSimulatedClick): Refactor to use the option enums.
        * dom/EventDispatcher.h:
        (EventDispatcher): Update function signature.

        * dom/Node.cpp: Refactor parameters to use the options enums rather than booleans.
        (WebCore::Node::dispatchSimulatedClick):
        * dom/Node.h:

        Refactor. Remove redundant comments.
        * html/BaseCheckableInputType.cpp:
        (WebCore::BaseCheckableInputType::accessKeyAction):
        * html/BaseClickableWithKeyInputType.cpp:
        (WebCore::BaseClickableWithKeyInputType::accessKeyAction):
        * html/HTMLAnchorElement.cpp:
        (WebCore::HTMLAnchorElement::accessKeyAction):
        * html/HTMLButtonElement.cpp:
        (WebCore::HTMLButtonElement::accessKeyAction):
        * html/HTMLElement.cpp:
        (WebCore::HTMLElement::click):
        (WebCore::HTMLElement::accessKeyAction):
        * html/HTMLSelectElement.cpp:
        (WebCore::HTMLSelectElement::accessKeyAction):
        * html/RadioInputType.cpp:
        (WebCore::RadioInputType::handleKeydownEvent):
        * html/RangeInputType.cpp:
        (WebCore::RangeInputType::accessKeyAction):

        Add SimulatedClickOptions.h.
        * GNUmakefile.list.am:
        * Target.pri:
        * WebCore.gypi:
        * WebCore.vcproj/WebCore.vcproj:
        * WebCore.xcodeproj/project.pbxproj:

2012-11-26  Shinya Kawanaka  <shinyak@chromium.org>

        [Shadow] Attaching children of a shadow host takes O(N^2) where N is the number of host children
        https://bugs.webkit.org/show_bug.cgi?id=103017

        Reviewed by Hajime Morita.

        Since ContentDistribution was just a Vector, ContentDistribution::find() took O(N). Each child of shadow host calls it.
        As a result, attaching children of shadow host takes O(N^2) at all.

        In this patch, we make ContentDistribution::find() O(1) amortizedly. We introduce HashMap from a Node to Vector index,
        and use it for ContentDistribution::find().

        No new tests, covered by existing tests.

        * html/shadow/ContentDistributor.cpp:
        (WebCore::ContentDistribution::swap):
        (WebCore):
        (WebCore::ContentDistribution::append):
        (WebCore::ContentDistribution::find):
        (WebCore::ContentDistributor::distributeSelectionsTo):
        * html/shadow/ContentDistributor.h:
        (ContentDistribution): ContentDistribution now contains Vector and a reverse map.
        (WebCore::ContentDistribution::first):
        (WebCore::ContentDistribution::last):
        (WebCore::ContentDistribution::at):
        (WebCore::ContentDistribution::size):
        (WebCore::ContentDistribution::isEmpty):
        (WebCore::ContentDistribution::clear):
        (WebCore::ContentDistribution::contains):
        (WebCore::ContentDistribution::nodes):

2012-11-26  Dan Carney  <dcarney@google.com>

        [V8] Give isolated shells a lifecycle like that of main shells
        https://bugs.webkit.org/show_bug.cgi?id=96522

        Reviewed by Adam Barth.

        Refactored the isolated shells in ScriptController
        to be cleaned up the same way the main shell is.

        No new tests. No change in functionality.

        * bindings/v8/ScriptController.cpp:
        (WebCore::ScriptController::~ScriptController):
        (WebCore::ScriptController::clearForOutOfMemory):
        (WebCore::ScriptController::clearForClose):
        (WebCore::ScriptController::clearWindowShell):
        * bindings/v8/ScriptController.h:
        (ScriptController):
        * bindings/v8/V8DOMWindowShell.cpp:
        (WebCore::V8DOMWindowShell::destroyIsolatedShell):
        (WebCore::V8DOMWindowShell::clearForClose):
        * bindings/v8/V8DOMWindowShell.h:
        (V8DOMWindowShell):

2012-11-25  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r135656.
        http://trac.webkit.org/changeset/135656
        https://bugs.webkit.org/show_bug.cgi?id=103218

        Made a few SVG tests crash on all platforms (Requested by
        apavlov on #webkit).

        * css/CSSComputedStyleDeclaration.cpp:
        (WebCore::valueForFamily):
        * css/CSSValuePool.cpp:
        (WebCore::CSSValuePool::createFontFamilyValue):

2012-11-25  Takashi Sakamoto  <tasak@google.com>

        WebCore::RenderBlock::determineStartPosition crash
        https://bugs.webkit.org/show_bug.cgi?id=98993

        Reviewed by Brent Fulgham.

        If we move some node and the node has some text,
        InlineFlowBox::removeChild() is invoked. The method invokes
        RootInlineBox::childRemoved(). childRemoved() checks whether the
        removed inlinebox has the renderer of its parent's line break object.
        If so, use setLineBreakInfo to make the parent's line break info to
        be 0. However in RenderBlock::determineStartPosition(), the code
        assume that all line break info is solved, i.e.
        prevRootBox->lineBreakObj()->isText(). Since lineBreakObj() returns 0
        because of removeChild(), determineStartPosition crash occurs.

        Test: fast/inline/inline-box-append-child-crash.html

        * rendering/RenderBlockLineLayout.cpp:
        (WebCore::RenderBlock::determineStartPosition):
        Checks whether lineBreakObj() is 0 or not before using lineBreakObj().

2012-11-25  Nikita Vasilyev  <me@elv1s.ru>

        Web Inspector: use native Element.prototype.normalize instead of custom defined Element.prototype.pruneEmptyTextNodes
        https://bugs.webkit.org/show_bug.cgi?id=103205

        Reviewed by Pavel Feldman.

        * inspector/front-end/DOMExtension.js:
        * inspector/front-end/TextPrompt.js:
        (WebInspector.TextPrompt.prototype.clearAutoComplete):
        (WebInspector.TextPrompt.prototype._completionsReady):
        (WebInspector.TextPrompt.prototype.applySuggestion):

2012-11-25  Nikita Vasilyev  <me@elv1s.ru>

        Web Inspector: remove unused DOM methods
        https://bugs.webkit.org/show_bug.cgi?id=103204

        Reviewed by Pavel Feldman.

        * inspector/front-end/DOMExtension.js:

2012-11-25  Nikita Vasilyev  <me@elv1s.ru>

        Web Inspector: Remove unused Array.convert method
        https://bugs.webkit.org/show_bug.cgi?id=103202

        Reviewed by Daniel Bates.

        * inspector/front-end/utilities.js:

2012-11-25  Chris Fleizach  <cfleizach@apple.com>

        AX: file upload input cannot be activated with VoiceOver
        https://bugs.webkit.org/show_bug.cgi?id=100343

        Reviewed by Sam Weinig.

        Simulated events were not allowed to be processed in the file input type in the DOMActivate handler.
        This was a problem for accessibility clients which rely on simulated events.

        The solution is to mark the UserGestureIndicator as definitely processing an event.

        Test: accessibility/file-upload-button-with-axpress.html

        * accessibility/AccessibilityObject.cpp:
        (WebCore::AccessibilityObject::press):

2012-11-25  Nikita Vasilyev  <me@elv1s.ru>

        Web Inspector: dispatch an event upon heap snapshot filter change
        https://bugs.webkit.org/show_bug.cgi?id=103201

        Reviewed by Pavel Feldman.

        Dispatch heapSnapshotFilterChanged event so it can be received by third parties.

        * inspector/front-end/HeapSnapshotView.js:
        (WebInspector.HeapSnapshotView.prototype._changeFilter):
        * inspector/front-end/UserMetrics.js:

2012-11-25  Kent Tamura  <tkent@chromium.org>

        Refactoring: Move the content of HTMLInputElement::subtreeHasChanged to TextFieldInputType
        https://bugs.webkit.org/show_bug.cgi?id=103195

        Reviewed by Kentaro Hara.

        HTMLInputElement::subtreeHasChanged is called only if the input is
        a text field. The code should be moved to TextFieldInputType.

        No new tests. This should not change any behavior.

        * html/HTMLInputElement.cpp:
        - Remove unnecessary NumberInputType.h inclusion.
        - Remove convertFromVisibleValue. It was used only by subtreeHasChanged.
        (WebCore::HTMLInputElement::subtreeHasChanged):
        Move the code to TextFieldInputType::subtreeHasChanged except
        calculateAndAdjustDirectionality, which is a protected member of
        HTMLElement.
        * html/HTMLInputElement.h:
        (HTMLInputElement): Remove convertFromVisibleValue.

        * html/InputType.cpp:
        Move convertFromVisibleValue to TextFieldInputType.
        (WebCore::InputType::subtreeHasChanged):
        Add ASSERT_NOT_REACHED.
        * html/InputType.h:
        (InputType): Remove convertFromVisibleValue.

        * html/TextFieldInputType.cpp:
        (WebCore::TextFieldInputType::convertFromVisibleValue):
        Moved from InputType.
        (WebCore::TextFieldInputType::subtreeHasChanged):
        Moved from HTMLInputElement. A latter part is moved to
        didSetValueByUserEdit to be hooked by SearchInputType.
        (WebCore::TextFieldInputType::didSetValueByUserEdit):
        Moved from HTMLInputElement::subtreeHasChanged, and clean up the code.
        * html/TextFieldInputType.h:
        (TextFieldInputType):
        - Move convertFromVisibleValue from InputType.
        - Add didSetValueByUserEdit and subtreeHasChanged.

        * html/SearchInputType.cpp:
        (WebCore::SearchInputType::didSetValueByUserEdit):
        Renamed from subtreeHasChanged, and calls TextFieldInputType::didSetValueByUserEdit.
        * html/SearchInputType.h:
        (SearchInputType): Rename subtreeHasChanged to didSetValueByUserEdit.

2012-11-22  Kentaro Hara  <haraken@chromium.org>

        [V8] Move WorkerExecutionContextProxy::initializeIfNeeded() to V8Initializer
        https://bugs.webkit.org/show_bug.cgi?id=103061

        Reviewed by Adam Barth.

        This is an incremental step to remove WorkerExecutionContextProxy.
        This patch moves WorkerExecutionContextProxy::initializeIfNeeded() to V8Initializer.
        This patch also renames methods so that the names become consistent
        between the main thread and workers.

        No tests. No change in behavior.

        * bindings/v8/V8Initializer.cpp:
        (WebCore::reportFatalErrorInMainThread):
        (WebCore::messageHandlerInMainThread):
        (WebCore::failedAccessCheckCallbackInMainThread):
        (WebCore::V8Initializer::initializeMainThreadIfNeeded):
        (WebCore::reportFatalErrorInWorker):
        (WebCore):
        (WebCore::messageHandlerInWorker):
        (WebCore::V8Initializer::initializeWorkerIfNeeded):
        * bindings/v8/V8Initializer.h:
        (V8Initializer):
        * bindings/v8/WorkerContextExecutionProxy.cpp:
        (WebCore::WorkerContextExecutionProxy::WorkerContextExecutionProxy):
        * bindings/v8/WorkerContextExecutionProxy.h:
        (WorkerContextExecutionProxy):

2012-11-25  Christophe Dumez  <christophe.dumez@intel.com>

        [EFL] Refactor RenderThemeEfl::ThemePartCacheEntry::reuse()
        https://bugs.webkit.org/show_bug.cgi?id=103189

        Reviewed by Kenneth Rohde Christiansen.

        Check if the entry size and type changed in
        RenderThemeEfl::ThemePartCacheEntry::reuse() to avoid
        useless processing if one of them did not change.

        Remove useless call to cairo_surface_finish() since
        we are using a smart pointer for the surface.

        Resize the edge object *after* loading its content
        from the theme file as it seems more logical this
        way.

        No new tests, no behavior change for layout tests.

        * platform/efl/RenderThemeEfl.cpp:
        (WebCore::RenderThemeEfl::ThemePartCacheEntry::reuse):
        * platform/efl/RenderThemeEfl.h:
        (ThemePartCacheEntry):

2012-11-25  Ryosuke Niwa  <rniwa@webkit.org>

        Rename DynamicNodeList to LiveNodeList
        https://bugs.webkit.org/show_bug.cgi?id=103197

        Reviewed by Ojan Vafai.

        Rename DynamicNodeList to LiveNodeList to match the terminology used in DOM4 working draft:
        http://www.w3.org/TR/2012/WD-dom-20120405/#concept-collection-live
        "A collection (either NodeList or HTMLCollection) can be either live or static".

        Also rename DynamicNodeListCacheBase to LiveNodeListBase, and merge DynamicSubtreeNodeList
        into LiveNodeList (old DynamicNodeList) now that the only difference between those two classes
        is the former calling registerNodeListCache and unregisterNodeListCache on Document.

        This patch completes the series of simplification of NodeList/HTMLCollection classes.

        * CMakeLists.txt:
        * GNUmakefile.list.am:
        * Target.pri:
        * WebCore.gypi:
        * WebCore.xcodeproj/project.pbxproj:
        * bindings/js/JSHTMLOptionsCollectionCustom.cpp:
        (WebCore::getNamedItems):
        * bindings/js/JSNodeListCustom.cpp:
        (WebCore::JSNodeListOwner::isReachableFromOpaqueRoots):
        * bindings/v8/custom/V8NodeListCustom.cpp:
        (WebCore::V8NodeList::opaqueRootForGC):
        * dom/ChildNodeList.cpp:
        (WebCore::ChildNodeList::ChildNodeList):
        (WebCore::ChildNodeList::nodeMatches):
        * dom/ChildNodeList.h:
        * dom/ClassNodeList.cpp:
        (WebCore::ClassNodeList::ClassNodeList):
        * dom/ClassNodeList.h:
        * dom/DOMAllInOne.cpp:
        * dom/Document.cpp:
        (WebCore::Document::registerNodeListCache):
        (WebCore::Document::unregisterNodeListCache):
        (WebCore):
        * dom/Document.h:
        (WebCore):
        (Document):
        * dom/DynamicNodeList.cpp: Removed.
        * dom/DynamicNodeList.h: Removed.
        * dom/LiveNodeList.cpp: Copied from Source/WebCore/dom/DynamicNodeList.cpp.
        (WebCore::LiveNodeListBase::rootNode):
        (WebCore::LiveNodeListBase::invalidateCache):
        (WebCore::LiveNodeListBase::invalidateIdNameCacheMaps):
        (WebCore::LiveNodeListBase::reportMemoryUsage):
        (WebCore::LiveNodeList::namedItem):
        * dom/LiveNodeList.h: Copied from Source/WebCore/dom/DynamicNodeList.h.
        (WebCore::LiveNodeListBase::LiveNodeListBase):
        (WebCore::LiveNodeListBase::shouldInvalidateTypeOnAttributeChange):
        (WebCore::LiveNodeList::LiveNodeList):
        (WebCore::LiveNodeList::~LiveNodeList):
        (LiveNodeList):
        * dom/MicroDataItemList.cpp:
        (WebCore::MicroDataItemList::MicroDataItemList):
        * dom/MicroDataItemList.h:
        * dom/NameNodeList.cpp:
        (WebCore::NameNodeList::NameNodeList):
        * dom/NameNodeList.h:
        * dom/Node.cpp:
        (WebCore::shouldInvalidateNodeListCachesForAttr):
        (WebCore::Document::invalidateNodeListCaches):
        * dom/Node.h:
        (WebCore):
        * dom/NodeList.h:
        (WebCore::NodeList::isLiveNodeList):
        * dom/NodeRareData.h:
        (NodeListsNodeData):
        (WebCore::NodeListsNodeData::removeCacheWithAtomicName):
        (WebCore::NodeListsNodeData::removeCacheWithName):
        (WebCore::NodeListsNodeData::removeCacheWithQualifiedName):
        (WebCore::NodeListsNodeData::adoptTreeScope):
        * dom/PropertyNodeList.cpp:
        (WebCore::PropertyNodeList::PropertyNodeList):
        * dom/PropertyNodeList.h:
        * dom/TagNodeList.cpp:
        (WebCore::TagNodeList::TagNodeList):
        * dom/TagNodeList.h:
        * html/HTMLCollection.cpp:
        (WebCore::HTMLCollection::HTMLCollection):
        (WebCore::LiveNodeListBase::iterateForNextNode):
        (WebCore::LiveNodeListBase::itemBeforeOrAfter):
        (WebCore::LiveNodeListBase::itemBefore):
        (WebCore::LiveNodeListBase::itemAfter):
        (WebCore::LiveNodeListBase::isLastItemCloserThanLastOrCachedItem):
        (WebCore::LiveNodeListBase::isFirstItemCloserThanCachedItem):
        (WebCore::LiveNodeListBase::setItemCache):
        (WebCore::LiveNodeListBase::length):
        (WebCore::LiveNodeListBase::item):
        (WebCore::LiveNodeListBase::itemBeforeOrAfterCachedItem):
        * html/HTMLCollection.h:
        * html/LabelsNodeList.cpp:
        (WebCore::LabelsNodeList::LabelsNodeList):
        * html/LabelsNodeList.h:
        * html/RadioNodeList.cpp:
        (WebCore::RadioNodeList::RadioNodeList):
        * html/RadioNodeList.h:

2012-10-08  Robert Hogan  <robert@webkit.org>

        Changing position:relative to position:static results in mis-positioned div
        https://bugs.webkit.org/show_bug.cgi?id=26397

        Reviewed by Ojan Vafai.

        When a block changes position from relative to static it is no longer the containing block for any
        positioned objects it may have. If any of those positioned objects actually have a position specified
        they are going to need a layout as their new containing block will likely have a different location they
        need to offset from. Positioned objects without a specified position always get a layout anyway 
        in layoutPositionedObjects() so no need to worry about them in this situation. 

        Test: fast/block/abspos-child-container-changes-from-relative-to-static-expected.html

        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::styleWillChange):
        (WebCore::RenderBlock::layoutPositionedObjects):
        (WebCore::RenderBlock::removePositionedObjects):
        * rendering/RenderBlock.h:
        (RenderBlock):

2012-11-24  Antti Koivisto  <antti@apple.com>

        Make renderer construction less generic
        https://bugs.webkit.org/show_bug.cgi?id=103175

        Reviewed by Ojan Vafai.

        The renderer construction code currently operates on Nodes and is very generic. In reality
        only Element and Text nodes can have renderers and the Text case is much simpler.

        This patch separates the Text and Element renderer construction paths and makes it statically
        known that other Node types can't have renderers. Less generic code is less branchy and enables
        further optimizations.

        * dom/CharacterData.cpp:
        (WebCore::CharacterData::parserAppendData):
        (WebCore::CharacterData::setDataAndUpdate):
        (WebCore):
        (WebCore::CharacterData::rendererIsNeeded):
        (WebCore::CharacterData::createRenderer):
        
            Only Text subclass of CharacterData can have renderers.

        * dom/CharacterData.h:
        (CharacterData):
        * dom/ContainerNode.h:
        (WebCore::ContainerNode::childShouldCreateRenderer):
        
            Move childShouldCreateRenderer from Node to ContainerNode.

        (ContainerNode):
        * dom/Element.cpp:
        (WebCore::Element::rendererIsNeeded):
        (WebCore):
        (WebCore::Element::attach):
        (WebCore::Element::childShouldCreateRenderer):
        * dom/Element.h:
        
            Move rendererIsNeeded and createRenderer from Node to Element.

        (Element):
        * dom/Node.cpp:
        (WebCore::Node::attach):
        (WebCore):
        * dom/Node.h:
        (Node):
        * dom/NodeRenderingContext.cpp:
        (WebCore::NodeRenderingContext::createRendererForElementIfNeeded):
        (WebCore::NodeRenderingContext::createRendererForTextIfNeeded):
        
            Separate the Element and Text renderer creation paths. Both are less branchy.
            The Text path is much simpler and avoids a bunch of virtual calls.

        (WebCore):
        * dom/NodeRenderingContext.h:
        (NodeRenderingContext):
        * dom/Text.cpp:
        (WebCore::Text::textRendererIsNeeded):
        (WebCore::Text::createTextRendererIfNeeded):
        (WebCore):
        (WebCore::Text::createTextRenderer):
        (WebCore::Text::attach):
        (WebCore::Text::updateTextRenderer):
        * dom/Text.h:
        
                Add non-virtual Text specific functions.

        (WebCore):
        (Text):
        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::clone):

2012-11-22  Ryosuke Niwa  <rniwa@webkit.org>

        REGRESSION(r135493): HTMLCollection and DynamicNodeList have two vtable pointers
        https://bugs.webkit.org/show_bug.cgi?id=103096

        Reviewed by Sam Weinig.

        Co-authored by Ilya Tikhonovsky.

        Made DynamicNodeListCacheBase inherit from NodeList. While HTMLCollection doesn't inherit
        from NodeList in IDL, it makes a lot of sense for the C++ implementation to do so via
        DynamicNodeListCacheBase since HTMLCollection and live NodeList share a lot of code in
        DynamicNodeListCacheBase.

        This lets remove proxies for item() and length() in DynamicNodeList and HTMLCollection
        and directly implement them in DynamicNodeListCacheBase which used to provide itemCommon()
        and lengthCommon().

        Also renamed NodeList::itemWithName() to NodeList::namedItem() to match HTMLCollection's
        naming convention.

        Finally, removed reportMemoryUsage in DynamicNodeList::reportMemoryUsage since DynamicNodeList
        now uses single inheritance.

        * bindings/js/JSNodeListCustom.cpp:
        (WebCore::JSNodeList::canGetItemsForName): Calls namedItem, which has been renamed from
        itemWithName.
        (WebCore::JSNodeList::nameGetter): Ditto.
        * bindings/v8/custom/V8NodeListCustom.cpp:
        (WebCore::V8NodeList::namedPropertyGetter): Ditto.
        * bindings/v8/custom/V8NamedNodesCollection.cpp:
        (WebCore::V8NamedNodesCollection::namedItem): Renamed from itemWithName.
        * bindings/v8/custom/V8NamedNodesCollection.h:
        * dom/ChildNodeList.cpp:
        (WebCore::ChildNodeList::nodeMatches): Updated comment.
        * dom/DynamicNodeList.cpp:
        (WebCore::DynamicNodeList::namedItem): Renamed from itemWithName.
        * dom/DynamicNodeList.h:
        (DynamicNodeListCacheBase): Inhertis from NodeList and renamed lengthCommon and itemCommon
        to virtual length and item respectively.
        (DynamicNodeList): Now inherits from just DynamicNodeListCacheBase instead of NodeList
        and DynamicNodeListCacheBase since the former now inhertis from NodeList. Also removed
        length() and item() since they're implemented in DynamicNodeListCacheBase now and renamed
        itemWithName() to namedItem() to match HTMLCollection's naming convention.
        * dom/NodeList.h:
        (NodeList::namedItem): Renamed from itemWithName. Note that this member function is not
        exposed via IDL. It's merely used in the binding code.
        * dom/StaticHashSetNodeList.cpp:
        (WebCore::StaticHashSetNodeList::namedItem): Ditto.
        * dom/StaticHashSetNodeList.h:
        (StaticHashSetNodeList::namedItem): Ditto.
        * dom/StaticNodeList.cpp:
        (WebCore::StaticNodeList::namedItem): Ditto.
        * dom/StaticNodeList.h:
        (StaticNodeList::namedItem): Ditto.
        * html/HTMLCollection.cpp:
        (WebCore::DynamicNodeListCacheBase::length): Renamed from lengthCommon.
        (WebCore::DynamicNodeListCacheBase::item): Renamed from itemCommon.
        * html/HTMLCollection.h:
        (HTMLCollection): Inherits from DynamicNodeListCacheBase since DynamicNodeListCacheBase
        is already RefCount'ed and NodeList, from which DynamicNodeListCacheBase inherits,
        inherits from ScriptWrappable.

2012-11-24  Christophe Dumez  <christophe.dumez@intel.com>

        [EFL] Refactor RenderThemeEfl::paintThemePart()
        https://bugs.webkit.org/show_bug.cgi?id=103192

        Reviewed by Kenneth Rohde Christiansen.

        Refactor RenderThemeEfl::paintThemePart() so that:
        - Some C'ism is removed
        - RTL related code is moved to applyEdjeRTLState()
        - evas_render() is called instead of evas_render_updates()
          to avoid creating uselessly update rects.

        No new tests, no behavior change for layout tests.

        * platform/efl/RenderThemeEfl.cpp:
        (WebCore::RenderThemeEfl::applyEdjeRTLState):
        (WebCore):
        (WebCore::RenderThemeEfl::paintThemePart):
        * platform/efl/RenderThemeEfl.h:
        (RenderThemeEfl):

2012-11-24  Brent Fulgham  <bfulgham@webkit.org>

        [WinCairo] Avoid access violation when frame is NULL.
        https://bugs.webkit.org/show_bug.cgi?id=68753

        BitmapImage::drawFrameMatchingSourceSize causes an access violation
        if BitmapImage::frameAtIndex returns NULL. (Found by David Delaune).

        Reviewed by Simon Fraser.

        * platform/graphics/win/ImageCairoWin.cpp:
        (WebCore::BitmapImage::drawFrameMatchingSourceSize): Check for null
        cairo_surface_t pointer and avoid dereferencing.

2012-11-24  Christophe Dumez  <christophe.dumez@intel.com>

        [EFL] Refactor RenderThemeEfl::getThemePartFromCache()
        https://bugs.webkit.org/show_bug.cgi?id=103186

        Reviewed by Kenneth Rohde Christiansen.

        Refactor getThemePartFromCache() so that a list is used
        for the cache instead of a vector. The function moves
        items to the head of the container which is much more
        efficient with a list than a vector.

        The list ordering is also slightly altered so that the
        cached parts that were used last come first. Previously,
        they were sorted by creation time which may cause an
        item to be removed from the cache because it is older
        even if is was used recently.

        This patch also gets rid of some code duplication at the
        end of the function.

        No new tests, no behavior change.

        * platform/efl/RenderThemeEfl.cpp:
        (WebCore::RenderThemeEfl::ThemePartCacheEntry::create): Return
        a smart pointer instead of a raw pointer.
        (WebCore::RenderThemeEfl::getThemePartFromCache):
        (WebCore::RenderThemeEfl::clearThemePartCache): Rename 
        flushThemePartCache to clearThemePartCache for clarity.
        (WebCore::RenderThemeEfl::loadTheme):
        (WebCore::RenderThemeEfl::RenderThemeEfl):
        (WebCore::RenderThemeEfl::~RenderThemeEfl):
        * platform/efl/RenderThemeEfl.h:
        (ThemePartCacheEntry):
        (RenderThemeEfl):

2012-11-24  Liam Quinn  <lquinn@rim.com>

        [BlackBerry] RTSP should use the same MediaDocument as HTTP videos.
        https://bugs.webkit.org/show_bug.cgi?id=103185
        RIM PR 250114

        Reviewed by George Staikos.

        Make our MediaPlayer implementation indicate that it supports RTSP. That way, DOMImplementation::createDocument will create the same MediaDocument as is used for HTTP videos.

        * platform/graphics/blackberry/MediaPlayerPrivateBlackBerry.cpp:
        (WebCore::MediaPlayerPrivate::supportsType):

2012-11-24  Andreas Kling  <akling@apple.com>

        Put computed style 'font-family' values in the CSSValuePool.
        <http://webkit.org/b/103184>

        Reviewed by Ojan Vafai.

        Use CSSValuePool::createFontFamilyValue() when handing out 'font-family' values from CSSComputedStyleDeclaration.
        This avoids creating extra CSSPrimitiveValue objects since we already have these in the pool from parsing.
        Also added a max capacity to the font-family cache (using random eviction.)

        * css/CSSComputedStyleDeclaration.cpp:
        (WebCore::valueForFamily):
        * css/CSSValuePool.cpp:
        (WebCore::CSSValuePool::createFontFamilyValue):

2012-11-24  Hayato Ito  <hayato@chromium.org>

        It's confusing that return values of 'bool Node::dispatchEvent(...)' and 'bool Node::dispatchMouseEvent(..)' have the opposite meanings.
        https://bugs.webkit.org/show_bug.cgi?id=103058

        Reviewed by Ojan Vafai.

        Refactor MouseEventDispatchMediator::dispatchEvent() and
        EventHandler::dispatchMouseEvent() so that they return bool
        which has the same meaning of the return value of
        Node::dispatchEvent().

        No tests. No change in behavior.

        * dom/MouseEvent.cpp:
        (WebCore::MouseEventDispatchMediator::dispatchEvent):
        * page/EventHandler.cpp:
        (WebCore::EventHandler::handleMousePressEvent):
        (WebCore::EventHandler::handleMouseDoubleClickEvent):
        (WebCore::EventHandler::handleMouseMoveEvent):
        (WebCore::EventHandler::handleMouseReleaseEvent):
        (WebCore::EventHandler::dispatchMouseEvent):
        (WebCore::EventHandler::sendContextMenuEvent):
        (WebCore::EventHandler::sendContextMenuEventForKey):

2012-11-23  Kangil Han  <kangil.han@samsung.com>

        Fix unused parameter compile warnings
        https://bugs.webkit.org/show_bug.cgi?id=103167

        Reviewed by Gyuyoung Kim.

        Remove compile warning messages by omitting parameter name and using UNUSED_PARAM.

        * accessibility/atk/WebKitAccessibleHyperlink.cpp:
        (webkitAccessibleHyperlinkIsSelectedLink):
        * accessibility/atk/WebKitAccessibleInterfaceText.cpp:
        (webkitAccessibleTextGetTextAfterOffset):
        (webkitAccessibleTextGetTextAtOffset):
        (webkitAccessibleTextGetTextBeforeOffset):
        (webkitAccessibleTextGetOffsetAtPoint):

2012-11-23  Michael Saboff  <msaboff@apple.com>

        listMarkerText() should create 8 bit strings when possible
        https://bugs.webkit.org/show_bug.cgi?id=103011

        Reviewed by Filip Pizlo.

        Made processing of marker text items use 8 bit strings where possible in order to reduce 16 bit strings.

        Changes covered by existing tests.

        * rendering/RenderListMarker.cpp:
        (WebCore::toRoman): Changed character constants and buffer to build string to LChar's
        (WebCore::toAlphabeticOrNumeric): Made a template based on character type.
        (WebCore::toSymbolic): Made a template based on character type.
        (WebCore::toAlphabetic): Made a template based on character type.
        (WebCore::toNumeric): Added character type template parameter.
        (WebCore::listMarkerText): Changed character constants to LChar where possible.

2012-11-23  Robert Kroeger  <rjkroege@chromium.org>

        Remove unused ScrollByPixelVelocity
        https://bugs.webkit.org/show_bug.cgi?id=102840

        Reviewed by Sam Weinig.

        https://bugs.webkit.org/show_bug.cgi?id=80311 wrongly introduced a new
        kind of scroll: "ScrollByPixelVelocity". This code is not used on any platform
        and will not be of use in the future so this patch removes it.

        No new tests: code removal/cleanup.

        * page/EventHandler.cpp:
        (WebCore::EventHandler::defaultWheelEventHandler):
        (WebCore::EventHandler::handleGestureEvent):
        * platform/PlatformWheelEvent.h:
        * platform/ScrollAnimator.cpp:
        (WebCore::ScrollAnimator::handleWheelEvent):
        * platform/ScrollAnimatorNone.cpp:
        (WebCore::ScrollAnimatorNone::ScrollAnimatorNone):
        (WebCore::ScrollAnimatorNone::scroll):
        (WebCore::ScrollAnimatorNone::cancelAnimations):
        (WebCore::ScrollAnimatorNone::animationTimerFired):
        * platform/ScrollAnimatorNone.h:
        (ScrollAnimatorNone):
        * platform/ScrollTypes.h:
        * platform/ScrollableArea.cpp:
        (WebCore::ScrollableArea::scroll):

2012-11-23  Adenilson Cavalcanti  <cavalcantii@gmail.com>

        Removing unnecessary RenderBox friend access in RenderObject
        https://bugs.webkit.org/show_bug.cgi?id=103159

        Reviewed by Eric Seidel.

        RenderObject has several classes marked as friend, between them,
        there is RenderBox which is derived from it indirectly and is not accessing
        its forefather private data making unnecessary the 'friend' access level.

        No new tests, no changes in functionality.

        * rendering/RenderObject.h:
        (RenderObject):

2012-11-23  Alexis Menard  <alexis@webkit.org>

        [CSS3 Backgrounds and Borders] Implement new CSS3 background-position parsing.
        https://bugs.webkit.org/show_bug.cgi?id=102104

        Reviewed by Julien Chaffraix.

        Implement the parsing of the CSS3 background-position property which
        allows to specify up to four values to position the background. It is
        documented here :
        http://www.w3.org/TR/css3-background/#the-background-position . I
        decided to split up the patch is two pieces, the parsing and later I
        will do the rendering. I kept the old code as much as possible (i.e.
        the two values parsing) as it is used not only by background-position
        but by few other properties. The new four values support is only valid
        on the property itself but does not work on the shorthand.

        Opera has already implemented this feature.

        I extended backgrounds/background-position-parsing-2.html to cover the
        new possible values as well as buggy values.

        * Configurations/FeatureDefines.xcconfig:
        * GNUmakefile.am:
        * GNUmakefile.features.am:
        * css/CSSParser.cpp:
        (WebCore::CSSParser::parseFillPositionComponent): Modify this function
        to allow creation of CSS primitive values with not only percentage or
        length but with keywords also as the new <position> type allows to
        specify keywords, for example top 30px right 20px.
        (WebCore):
        (WebCore::isValueConflictingWithCurrentEdge):
        (WebCore::isBackgroundPositionKeyword):
        (WebCore::CSSParser::parse3ValuesBackgroundPosition):
        (WebCore::CSSParser::parse4ValuesBackgroundPosition):
        (WebCore::CSSParser::parseFillBackgroundPosition): This function counts
        the number of words for the property value and call dedicated parsing
        functions for each case. Note that in case of two values we just call the old CSS 2.1
        method.
        (WebCore::CSSParser::parseFillPosition):
        (WebCore::CSSParser::parseFillProperty): Only call the new parsing
        function if the feature is activated otherwise fallback to the old code
        path.
        * css/CSSParser.h:

2012-11-23  Justin Novosad  <junov@google.com>

        Adding occlusion detection to reduce overdraw in RenderBox background rendering
        https://bugs.webkit.org/show_bug.cgi?id=102557

        Reviewed by Stephen White.

        Adding hasAlpha method to all classes dervived from CSSImageValue and
        StyleImage, in order to support occlusion testing. 
        This allows the FillLayer recursion to stop early when an opaque layer
        is encountered while applying a CSS background style. This also allows
        the elimination of background color application when the background is
        completely covered by an image.  The optimization also skips the
        clearing of the page's root element when the page background is
        entirely covered by an image (e.g a tiled bitmap or a gradient)

        Test: fast/backgrounds/background-opaque-images-over-color.html

        * css/CSSCrossfadeValue.cpp:
        (WebCore::subimageHasAlpha):
        (WebCore):
        (WebCore::CSSCrossfadeValue::isPending):
        (WebCore::CSSCrossfadeValue::hasAlpha):
        * css/CSSCrossfadeValue.h:
        (CSSCrossfadeValue):
        * css/CSSGradientValue.cpp:
        (WebCore::CSSGradientValue::hasAlpha):
        (WebCore):
        * css/CSSGradientValue.h:
        (CSSGradientValue):
        * css/CSSImageGeneratorValue.cpp:
        (WebCore::CSSImageGeneratorValue::hasAlpha):
        (WebCore):
        * css/CSSImageGeneratorValue.h:
        (CSSImageGeneratorValue):
        * css/CSSImageValue.cpp:
        (WebCore::CSSImageValue::hasAlpha):
        (WebCore):
        * css/CSSImageValue.h:
        (WebCore):
        (CSSImageValue):
        * loader/cache/CachedImage.cpp:
        (WebCore::CachedImage::currentFrameHasAlpha):
        Test whether a cached image has alpha, with side effect of ensuring
        the image is in cache. (new method)
        (WebCore):
        * loader/cache/CachedImage.h:
        (CachedImage):
        * rendering/RenderBox.cpp:
        (WebCore::RenderBox::paintFillLayers):
        Added layer recursion early exit when an opaque layer is encountered.
        * rendering/RenderBoxModelObject.cpp:
        (WebCore::RenderBoxModelObject::paintFillLayerExtended):
        Eliminated background color fill when the layer contains an opaque
        image that covers the entire RenderBox.
        * rendering/style/FillLayer.cpp:
        (WebCore::FillLayer::hasOpaqueImage):
        Returns true if the layer's image is known to be fully opaque.
        (WebCore):
        (WebCore::FillLayer::hasRepeatXY):
        * rendering/style/FillLayer.h:
        (FillLayer):
        * rendering/style/StyleCachedImage.cpp:
        (WebCore::StyleCachedImage::hasAlpha):
        (WebCore):
        * rendering/style/StyleCachedImage.h:
        (StyleCachedImage):
        * rendering/style/StyleCachedImageSet.cpp:
        (WebCore::StyleCachedImageSet::hasAlpha):
        (WebCore):
        * rendering/style/StyleCachedImageSet.h:
        (StyleCachedImageSet):
        * rendering/style/StyleGeneratedImage.cpp:
        (WebCore::StyleGeneratedImage::hasAlpha):
        (WebCore):
        * rendering/style/StyleGeneratedImage.h:
        (StyleGeneratedImage):
        * rendering/style/StyleImage.h:
        (StyleImage):
        * rendering/style/StylePendingImage.h:
        (WebCore::StylePendingImage::hasAlpha):

2012-11-23  Justin Novosad  <junov@google.com>

        Page background color bleeds through inner edge of div border with rounded edges
        https://bugs.webkit.org/show_bug.cgi?id=103089

        Reviewed by Stephen White.

        Test that verifies whether a RenderBoxEdge is more than 2 pixels wide
        was applying the content scale factor backwards, so the
        obscuresBackgroundEdge was falsely passing for downsized boxes.

        Test: fast/backgrounds/gradient-background-leakage-2.html

        * rendering/RenderBoxModelObject.cpp:
        (WebCore::BorderEdge::obscuresBackgroundEdge):

2012-11-23  Huang Dongsung  <luxtella@company100.net>

        [TexMap] Remove dependency of TextureMapperLayer on GraphicsLayerTextureMapper.
        https://bugs.webkit.org/show_bug.cgi?id=103046

        Reviewed by Noam Rosenthal.

        It is a preparation patch for Threaded Coordinated Graphics on WK1.

        We want to make TextureMapperLayer into an actor model. After making an actor
        model, GraphicsLayerTextureMapper and LayerTreeRenderer will communicate with
        TextureMapperLayer using message passing. In the first step, we want to hide
        GraphicsLayerTextureMapper from TextureMapperLayer.

        There are 2 kinds of dependencies of TextureMapperLayer in GraphicsLayerTextureMapper.
        1. To query layer states
        2. To paint layer contents

        In this patch, we removed the second dependency. Currently, TextureMapperLayer
        requests painting contents to GraphicsLayerTextureMapper in WK1 while
        Coordinated Graphics prepares the contents in LayerTreeRenderer. This patch
        makes WK1 prepare the contents in GraphicsLayerTextureMapper like
        LayerTreeRenderer.

        We will remove the first dependency in a follow-up patch.

        Covered by existing layout tests.

        * platform/graphics/texmap/GraphicsLayerTextureMapper.cpp:
        (WebCore::GraphicsLayerTextureMapper::GraphicsLayerTextureMapper):
        (WebCore::GraphicsLayerTextureMapper::flushCompositingStateForThisLayerOnly):
        (WebCore::GraphicsLayerTextureMapper::flushCompositingState):
        (WebCore):
        (WebCore::GraphicsLayerTextureMapper::didFlushCompositingState):
        (WebCore::GraphicsLayerTextureMapper::didFlushCompositingStateRecursive):
        (WebCore::GraphicsLayerTextureMapper::updateBackingStore):
        (WebCore::GraphicsLayerTextureMapper::prepareBackingStore):
        (WebCore::GraphicsLayerTextureMapper::shouldHaveBackingStore):
        (WebCore::GraphicsLayerTextureMapper::drawRepaintCounter):
        (WebCore::GraphicsLayerTextureMapper::setDebugBorder):
        * platform/graphics/texmap/GraphicsLayerTextureMapper.h:
        (GraphicsLayerTextureMapper):
        (WebCore::GraphicsLayerTextureMapper::setHasOwnBackingStore):
        * platform/graphics/texmap/TextureMapperLayer.cpp:
        (WebCore::TextureMapperLayer::rootLayer):
        (WebCore::TextureMapperLayer::paintSelf):
        (WebCore::TextureMapperLayer::textureMapper):
        (WebCore):
        (WebCore::TextureMapperLayer::flushCompositingState):
        (WebCore::TextureMapperLayer::flushCompositingStateSelf):
        * platform/graphics/texmap/TextureMapperLayer.h:
        (WebCore):
        (WebCore::TextureMapperLayer::TextureMapperLayer):
        (TextureMapperLayer):
        (WebCore::TextureMapperLayer::setBackingStore):
        (State):
        (WebCore::TextureMapperLayer::State::State):

2012-11-23  Carlos Garcia Campos  <cgarcia@igalia.com>

        [ENCHANT] Infinite loop when end word position is not found
        https://bugs.webkit.org/show_bug.cgi?id=103139

        Reviewed by Martin Robinson.

        Covered by existing tests in editing/spelling.

        * editing/visible_units.cpp:
        (WebCore::isLogicalStartOfWord): Make it private again.
        (WebCore::islogicalEndOfWord): Ditto.
        * editing/visible_units.h:
        * platform/text/enchant/TextCheckerEnchant.cpp:
        (WebCore::TextCheckerEnchant::checkSpellingOfWord): Helper funtion
        to check a word inside a string using the loaded dictionaries.
        (WebCore::TextCheckerEnchant::checkSpellingOfString): Optimize and
        simply the code by using the word iterator to iterate the
        words.
        * platform/text/enchant/TextCheckerEnchant.h:
        (TextCheckerEnchant):

2012-11-23  Zeno Albisser  <zeno@webkit.org>

        [Qt] GraphicsContext3DQt makes wrong surface current.
        https://bugs.webkit.org/show_bug.cgi?id=103136

        blitMultisampleFramebufferAndRestoreContext restores
        the wrong surface in case the currentContext is the same
        as m_platformContext.
        In this case we would reset the bound surface to NULL.
        Instead we should just leave the context unchanged.

        Reviewed by Kenneth Rohde Christiansen.

        * platform/graphics/qt/GraphicsContext3DQt.cpp:
        (WebCore::GraphicsContext3DPrivate::blitMultisampleFramebufferAndRestoreContext):

2012-11-23  Alexei Filippov  <alph@chromium.org>

        Web Inspector: remove total item from NMI snapshot grid
        https://bugs.webkit.org/show_bug.cgi?id=101926

        Reviewed by Yury Semikhatsky.

        * inspector/front-end/NativeMemorySnapshotView.js:
        (WebInspector.NativeSnapshotDataGrid):

2012-11-23  Zeno Albisser  <zeno@webkit.org>

        [Qt] GraphicsContext3DQt should not overwrite glClearColor of sharing context.
        https://bugs.webkit.org/show_bug.cgi?id=103135

        In case we use GraphicsContext3DQt to render into or
        read from an existing context, we should not reset
        the glClearColor on construction.
        Otherwise we might overwrite an existing definition from
        the sharing context.

        Reviewed by Kenneth Rohde Christiansen.

        * platform/graphics/qt/GraphicsContext3DQt.cpp:
        (WebCore::GraphicsContext3D::GraphicsContext3D):

2012-11-23  Pavel Feldman  <pfeldman@chromium.org>

        Web Inspector: damaging last chunk does not remove its garbage from DOM
        https://bugs.webkit.org/show_bug.cgi?id=103132

        Reviewed by Vsevolod Vlasov.

        Removing everything between undamaged chunks, not registered chunk rows.

        * inspector/front-end/DefaultTextEditor.js:
        (WebInspector.TextEditorMainPanel.prototype._insertSpanBefore):
        (WebInspector.TextEditorMainPanel.prototype._updateChunksForRanges):
        (WebInspector.TextEditorMainChunk.prototype.updateCollapsedLineRow):
        (WebInspector.TextEditorMainChunk.prototype.firstElement):
        (WebInspector.TextEditorMainChunk.prototype.lastElement):

2012-11-23  Ilya Tikhonovsky  <loislo@chromium.org>

        RenderLayer minor clean-up: replace raw pointers with OwnPtrs.
        https://bugs.webkit.org/show_bug.cgi?id=103134

        Reviewed by Eric Seidel.

        I found that RenderLayer still uses raw pointers to the objects which it owns.
        Looks like these pointers could be replaced with OwnPtrs.

        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::RenderLayer):
        (WebCore::RenderLayer::~RenderLayer):
        (WebCore::RenderLayer::paintLayerContents):
        (WebCore::RenderLayer::hitTestLayer):
        (WebCore::RenderLayer::updateNormalFlowList):
        (WebCore::RenderLayer::collectLayers):
        (WebCore::RenderLayer::styleChanged):
        * rendering/RenderLayer.h:
        (WebCore::RenderLayer::marquee):
        (WebCore::RenderLayer::posZOrderList):
        (WebCore::RenderLayer::negZOrderList):
        (WebCore::RenderLayer::normalFlowList):
        (RenderLayer):
        (WebCore::RenderLayer::clearZOrderLists):

2012-11-23  Christophe Dumez  <christophe.dumez@intel.com>

        [EFL][AC] Mouse cursor is not updated when accelerated compositing is enabled
        https://bugs.webkit.org/show_bug.cgi?id=103131

        Reviewed by Kenneth Rohde Christiansen.

        Make sure we try to get the Ecore_X_Window using ecore_evas_gl_x11_window_get()
        in applyFallbackCursor() if accelerated compositing is enabled instead of
        using ecore_evas_software_x11_window_get(). This fixes mouse cursor update
        when accelerated compositing is enabled.

        No new tests, no behavior change for layout tests.

        * platform/efl/EflScreenUtilities.cpp:
        (WebCore::applyFallbackCursor):

2012-11-16  Yury Semikhatsky  <yurys@chromium.org>

        Memory instrumentation: extract MemoryObjectInfo declaration into a separate file
        https://bugs.webkit.org/show_bug.cgi?id=102510

        Reviewed by Pavel Feldman.

        Added necessary includes where MemoryObjectInfo declaration is required.

        * platform/audio/FFTFrame.cpp:
        * rendering/style/RenderStyle.cpp:
        * rendering/style/StyleRareInheritedData.cpp:
        * rendering/style/StyleRareNonInheritedData.cpp:

2012-11-23  Dan Carney  <dcarney@google.com>

        Remove V8DOMWindowShell::getEntered
        https://bugs.webkit.org/show_bug.cgi?id=96637

        Reviewed by Adam Barth.

        V8DOMWindowShell::getEntered was refactored so that the window shell
        no longer has to be kept alive by a v8 context. Instead, only
        the DOMWrapperWorld will be kept alive.

        No new tests. No change in functionality.

        * bindings/v8/DOMDataStore.cpp:
        (WebCore::DOMDataStore::current):
        * bindings/v8/DOMWrapperWorld.cpp:
        (WebCore::isolatedWorldWeakCallback):
        (WebCore):
        (WebCore::DOMWrapperWorld::makeContextWeak):
        (WebCore::DOMWrapperWorld::setIsolatedWorldField):
        * bindings/v8/DOMWrapperWorld.h:
        (DOMWrapperWorld):
        (WebCore::DOMWrapperWorld::isolated):
        * bindings/v8/ScriptController.cpp:
        (WebCore::ScriptController::existingWindowShell):
        (WebCore::ScriptController::windowShell):
        (WebCore::ScriptController::evaluateInIsolatedWorld):
        (WebCore::ScriptController::currentWorldContext):
        (WebCore::ScriptController::collectIsolatedContexts):
        * bindings/v8/ScriptController.h:
        (ScriptController):
        * bindings/v8/V8Binding.h:
        (WebCore::worldForEnteredContextIfIsolated):
        * bindings/v8/V8DOMWindowShell.cpp:
        (WebCore::V8DOMWindowShell::destroyIsolatedShell):
        (WebCore::V8DOMWindowShell::disposeContext):
        (WebCore::V8DOMWindowShell::initializeIfNeeded):
        * bindings/v8/V8DOMWindowShell.h:
        (V8DOMWindowShell):
        * bindings/v8/V8PerContextData.h:
        * bindings/v8/WorldContextHandle.cpp:
        (WebCore::WorldContextHandle::WorldContextHandle):

2012-11-23  Eugene Klyuchnikov  <eustas.bug@gmail.com>

        Web Inspector: Refine JsDoc in ProfilesPanel.js
        https://bugs.webkit.org/show_bug.cgi?id=103042

        Reviewed by Yury Semikhatsky.

        I'm going to make profiler output typed.

        This will require some amount of refactoring.

        Before refactoring I would like to make things
        unambiguous by adding JsDoc where they are missing.

        * inspector/front-end/ProfilesPanel.js:
        (WebInspector.ProfilesPanel.prototype._onToggleProfiling):
        Added to eliminate parameter type ambiguity.

2012-11-23  Kent Tamura  <tkent@chromium.org>

        Correct input[type=number] value sanitization for user-input
        https://bugs.webkit.org/show_bug.cgi?id=103018

        Reviewed by Kentaro Hara.

        If a number field has non-number string, HTMLInputElement::value is not
        updated and returns the past valid value. It doesn't match to the value
        sanitization algorithm defined by the HTML standard [1], and Opera's
        behavior. We should sanitize non-number strings to "".

        [1] http://www.whatwg.org/specs/web-apps/current-work/multipage/states-of-the-type-attribute.html#number-state-(type=number)
        > The value sanitization algorithm is as follows: If the value of the
        > element is not a valid floating-point number, then set it to the empty
        > string instead.

        No new tests. Update existing tests;
        fast/forms/number/number-commit-valid-only.html and
        fast/forms/number/number-unacceptable-style.html

        * html/HTMLInputElement.cpp:
        (WebCore::HTMLInputElement::subtreeHasChanged):
        Remove isAcceptableValue check.

        * html/HTMLInputElement.h:
        (HTMLInputElement): isAcceptableValue is no longer needed.
        * html/InputType.cpp: Remove isAcceptableValue.
        * html/InputType.h: Ditto.
        * html/NumberInputType.cpp: Ditto.
        (WebCore::NumberInputType::hasUnacceptableValue):
        Fold the isAcceptableValue content into this.
        * html/NumberInputType.h:
        (NumberInputType): Remove isAcceptableValue.

2012-11-23  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r135592.
        http://trac.webkit.org/changeset/135592
        https://bugs.webkit.org/show_bug.cgi?id=103126

        broke Chromium Mac compilation (Requested by yurys on
        #webkit).

        * WebCore.gypi:

2012-11-23  Yury Semikhatsky  <yurys@chromium.org>

        Remove references to non-chromium entries from WebCore.gypi (part 2)
        https://bugs.webkit.org/show_bug.cgi?id=103124

        Reviewed by Pavel Feldman.

        * WebCore.gypi: removed references to gtk, cocoa, posix, ios, cf, win and mac

2012-11-23  Andrey Adaikin  <aandrey@chromium.org>

        Web Inspector: [Canvas] add startCapturing and stopCapturing methods to protocol
        https://bugs.webkit.org/show_bug.cgi?id=103053

        Reviewed by Pavel Feldman.

        Add startCapturing and stopCapturing methods to the protocol to instrument several canvas frames in a row.
        Drive-by: support start offset index in retrieving trace logs in the backend as well as "alive" flag.

        * inspector/InjectedScriptCanvasModule.cpp:
        (WebCore::InjectedScriptCanvasModule::captureFrame):
        (WebCore):
        (WebCore::InjectedScriptCanvasModule::startCapturing):
        (WebCore::InjectedScriptCanvasModule::callStartCapturingFunction):
        (WebCore::InjectedScriptCanvasModule::stopCapturing):
        (WebCore::InjectedScriptCanvasModule::dropTraceLog):
        (WebCore::InjectedScriptCanvasModule::callVoidFunctionWithTraceLogIdArgument):
        (WebCore::InjectedScriptCanvasModule::traceLog):
        * inspector/InjectedScriptCanvasModule.h:
        (InjectedScriptCanvasModule):
        * inspector/InjectedScriptCanvasModuleSource.js:
        (.):
        * inspector/Inspector.json:
        * inspector/InspectorCanvasAgent.cpp:
        (WebCore::InspectorCanvasAgent::startCapturing):
        (WebCore):
        (WebCore::InspectorCanvasAgent::stopCapturing):
        (WebCore::InspectorCanvasAgent::getTraceLog):
        * inspector/InspectorCanvasAgent.h:
        (InspectorCanvasAgent):
        * inspector/front-end/CanvasProfileView.js:
        (WebInspector.CanvasProfileView):

2012-11-23  Andrey Kosyakov  <caseq@chromium.org>

        Web Inspector: dispatch events upon certain user actions on inspector's notification services
        https://bugs.webkit.org/show_bug.cgi?id=103114

        Reviewed by Pavel Feldman.

        Add a bunch of WebInspector.UserMetrics.UserAction, so platform-specific code can wire to user actions
        without breaking too often.

        * inspector/front-end/ElementsPanel.js:
        (WebInspector.ElementsPanel.prototype._setPseudoClassForNodeId):
        * inspector/front-end/JavaScriptSourceFrame.js:
        (WebInspector.JavaScriptSourceFrame.prototype._setBreakpoint):
        * inspector/front-end/NetworkItemView.js:
        (WebInspector.NetworkItemView.prototype._tabSelected.set WebInspector):
        (WebInspector.NetworkItemView.prototype._tabSelected):
        * inspector/front-end/NetworkPanel.js:
        (WebInspector.NetworkLogView.prototype._sortItems):
        (WebInspector.NetworkDataGridNode.prototype.select):
        * inspector/front-end/ProfilesPanel.js:
        (WebInspector.ProfilesPanel.prototype.addProfileHeader):
        * inspector/front-end/ScriptsPanel.js:
        (WebInspector.ScriptsPanel.prototype._showSourceLine):
        (WebInspector.ScriptsPanel.prototype._toggleFormatSource):
        * inspector/front-end/UISourceCode.js:
        (WebInspector.UISourceCode.prototype.revertToOriginal):
        (WebInspector.UISourceCode.prototype.revertAndClearHistory):
        (WebInspector.UISourceCode.prototype.commitWorkingCopy):
        * inspector/front-end/UserMetrics.js:
        * inspector/front-end/externs.js:
        * inspector/front-end/inspector.js:
        (WebInspector._requestZoom.set var):
        (WebInspector._requestZoom):

2012-11-23  Christophe Dumez  <christophe.dumez@intel.com>

        WebSocket's MessageEvent.origin attribute is an empty string
        https://bugs.webkit.org/show_bug.cgi?id=102889

        Reviewed by Kentaro Hara.

        Fix WebSocket implementation so that the message event's origin
        attribute is properly set to the Unicode serialization of the
        origin of the URL that was passed to the WebSocket object's
        constructor, instead of an empty string.

        The new behavior is according to the specification:
        http://www.whatwg.org/specs/web-apps/current-work/multipage/network.html#feedback-from-the-protocol

        It also matches the behavior of Firefox.

        Tests: http/tests/websocket/tests/hybi/send-blob-onmessage-origin.html
               http/tests/websocket/tests/hybi/send-onmessage-origin.html

        * Modules/websockets/WebSocket.cpp:
        (WebCore::WebSocket::didReceiveMessage):
        (WebCore::WebSocket::didReceiveBinaryData):
        * dom/MessageEvent.cpp:
        (WebCore::MessageEvent::MessageEvent):
        * dom/MessageEvent.h:
        (WebCore::MessageEvent::create):
        (MessageEvent):

2012-11-22  Eugene Klyuchnikov  <eustas.bug@gmail.com>

        Web Inspector: No "Save Heap Snapshot" option after canceling save to file dialog.
        https://bugs.webkit.org/show_bug.cgi?id=100916

        Reviewed by Yury Semikhatsky.

        Fixed order of operations - now receiver is assigned only when save
        dialog responds.

        * inspector/front-end/HeapSnapshotView.js: Fixed order of operations.

2012-11-23  Allan Sandfeld Jensen  <allan.jensen@digia.com>

        [Qt] REGRESSION(r135507): It made 13 tests fail
        https://bugs.webkit.org/show_bug.cgi?id=103069

        Reviewed by Simon Hausmann.

        The subframe loading logic depends on that script extensions are not recognized,
        so avoid recognizing them in getMIMETypeForExtension which is used for pre-load
        mimetype detection.

        * platform/qt/MIMETypeRegistryQt.cpp:
        (WebCore::MIMETypeRegistry::getMIMETypeForExtension):

2012-11-23  Jochen Eisinger  <jochen@chromium.org>

        REGRESSION (r135455): Compilation without SVG enabled broken
        https://bugs.webkit.org/show_bug.cgi?id=103108

        Reviewed by Yury Semikhatsky.

        Move SVG-only code behind #if ENABLE(SVG) that was accidentially moved
        outside of the #if block during the refactoring.

        * platform/graphics/filters/FilterOperation.h:
        (ReferenceFilterOperation):

2012-11-23  Julian Pastarmov  <pastarmovj@chromium.org>

        REGRESSION (r128633): td changes size during re-layout of table although it shouldn't
        https://bugs.webkit.org/show_bug.cgi?id=102802

        Reviewed by Ojan Vafai.

        The bug was caused by incorrectly rewriting a nested condition which caused the else
        clause to trigger in wrong cases.

        Test: fast/table/nested-tables-with-div-offset.html

        * rendering/RenderBox.cpp:
        (WebCore::RenderBox::computePercentageLogicalHeight):
        Reverted wrong combination of nested if statements.

2012-11-23  Allan Sandfeld Jensen  <allan.jensen@digia.com>

        [Qt] REGRESSION(r135507): It made 13 tests fail
        https://bugs.webkit.org/show_bug.cgi?id=103069

        Reviewed by Simon Hausmann.

        Fix regression in recognizing MHTML on some platforms.

        * platform/qt/MIMETypeRegistryQt.cpp:
        (ExtensionMap):
        (WebCore::MIMETypeRegistry::getMIMETypeForExtension):
        (WebCore::MIMETypeRegistry::getMIMETypeForPath):

2012-11-22  Pavel Feldman  <pfeldman@chromium.org>

        Web Inspector: ctrl+end in editor does not select the last symbol.
        https://bugs.webkit.org/show_bug.cgi?id=103078

        Reviewed by Vsevolod Vlasov.

        Test: inspector/editor/text-editor-selection.html

        * inspector/front-end/DefaultTextEditor.js:
        (WebInspector.DefaultTextEditor.prototype._handleScrollChanged):
        (WebInspector.DefaultTextEditor.prototype.overrideViewportForTest):
        (WebInspector.TextEditorChunkedPanel.prototype._repaintAll):
        (WebInspector.TextEditorChunkedPanel.prototype._scrollTop):
        (WebInspector.TextEditorChunkedPanel.prototype._clientHeight):
        (WebInspector.TextEditorMainPanel.prototype._paintLineChunks):
        (WebInspector.TextEditorMainPanel.prototype._selectionToPosition):
        (WebInspector.TextEditorMainPanel.prototype._updateHighlightsForRange):

2012-11-23  Yury Semikhatsky  <yurys@chromium.org>

        Remove references to non-chromium entries from WebCore.gypi
        https://bugs.webkit.org/show_bug.cgi?id=103103

        Reviewed by Pavel Feldman.

        * WebCore.gypi: Removed references to files specific for wince, cairo, qt, wx and efl.

2012-11-23  Alexander Pavlov  <apavlov@chromium.org>

        Web Inspector: inspector overlay is always updated when inspector is open
        https://bugs.webkit.org/show_bug.cgi?id=103106

        Reviewed by Pavel Feldman.

        Provide empty size into the InspectorOverlay if the metrics emulation is disabled,
        so that it will not get painted in all cases.

        * inspector/InspectorController.cpp:
        (WebCore::InspectorController::webViewResized): Call InspectorPageAgent::webViewResized() rather than InspectorOverlay::resize().
        * inspector/InspectorPageAgent.cpp:
        (WebCore::InspectorPageAgent::webViewResized): Provide empty size into InspectorOverlay::resize() if device metrics are not emulated.
        * inspector/InspectorPageAgent.h:

2012-11-23  Krzysztof Czech  <k.czech@samsung.com>

        [EFL] Platform support for Accessibility feature.
        https://bugs.webkit.org/show_bug.cgi?id=100848

        Reviewed by Gyuyoung Kim.

        Add EFL platform's definitions to enable proper accessibility routines.

        No new tests. Covered by existing layout tests.

        * PlatformEfl.cmake: Add accessibility/atk content to compilation.
        * accessibility/AccessibilityObject.cpp:
        (WebCore::AccessibilityObject::AccessibilityObject):
        * accessibility/AccessibilityObject.h:
        (AccessibilityObject):
        * accessibility/efl/AccessibilityObjectEfl.cpp: Removed. No needed platform specific implementation. ATK shared implementation will be used.

2012-11-23  Thiago Marcos P. Santos  <thiago.santos@intel.com>

        Expose DOM interface for CSS Device Adaptation
        https://bugs.webkit.org/show_bug.cgi?id=95966

        Reviewed by Kenneth Rohde Christiansen.

        Added V8 and JSC bindings for CSS Device Adapation.

        Test: css3/device-adapt/opera/cssom-001.xhtml

        * CMakeLists.txt:
        * DerivedSources.make:
        * DerivedSources.pri:
        * GNUmakefile.list.am:
        * WebCore.gypi:
        * WebCore.xcodeproj/project.pbxproj:
        * bindings/js/JSCSSRuleCustom.cpp:
        (WebCore::toJS):
        * bindings/objc/DOMCSS.mm:
        (kitClass):
        * bindings/v8/custom/V8CSSRuleCustom.cpp:
        (WebCore::wrap):
        * css/CSSRule.idl:
        * css/WebKitCSSViewportRule.idl: Added.
        * page/DOMWindow.idl:

2012-11-22  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r135549.
        http://trac.webkit.org/changeset/135549
        https://bugs.webkit.org/show_bug.cgi?id=103102

        Multiple layout test crashes (Requested by yurys on #webkit).

        * rendering/RenderTable.cpp:
        (WebCore::RenderTable::layout):
        * rendering/RenderTable.h:
        (RenderTable):

2012-11-22  Rick Byers  <rbyers@chromium.org>

        window is missing Touch and TouchList - touch event conformance test failure
        https://bugs.webkit.org/show_bug.cgi?id=96295

        Reviewed by Adam Barth.

        Add Touch and TouchList constructors to window for ENABLE(TOUCH_EVENTS).

        Tests: fast/js/global-constructors.html
               fast/events/touch/document-create-touch-list.html

        * page/DOMWindow.idl:

2012-11-22  Dan Carney  <dcarney@google.com>

        [V8] Make worker context prototype chain match other browsers
        https://bugs.webkit.org/show_bug.cgi?id=103057

        Reviewed by Adam Barth.

        The following should be defined in a worker:
        Object.getOwnPropertyDescriptor(this.__proto__, "postMessage")
        It is currently undefined in chrome only. This patch fixes that.

        No new tests. No change in functionality.

        * bindings/scripts/CodeGeneratorV8.pm:
        (GenerateImplementation):

2012-11-22  Rafael Brandao  <rafael.lobo@openbossa.org>

        Remove PLATFORM(HAIKU) leftovers code
        https://bugs.webkit.org/show_bug.cgi?id=103086

        Reviewed by Antti Koivisto.

        * platform/PlatformWheelEvent.h:
        (PlatformWheelEvent):

2012-11-22  Dirk Schulze  <krit@webkit.org>

        -webkit-mask shorthand switches -webkit-mask-clip and -webkit-mask-origin values
        https://bugs.webkit.org/show_bug.cgi?id=103083

        Reviewed by Antti Koivisto.

        The order of CSSPropertyWebkitMaskOrigin and CSSPropertyWebkitMaskClip was not correct
        for property value. Just changed the order in the property array to match behavior of
        background and CSS Masking spec.

        Test: fast/masking/parsing-mask.html

        * css/StylePropertyShorthand.cpp:
        (WebCore::webkitMaskShorthand):

2012-11-22  John Mellor  <johnme@chromium.org>

        Text Autosizing: Improve handling of nested comments on reddit.com
        https://bugs.webkit.org/show_bug.cgi?id=102409

        Reviewed by Kenneth Rohde Christiansen.

        No longer consider overflow != visible as requiring an independent
        cluster. Some sites (e.g. reddit.com) wrap ordinary blocks (such as
        comments) in overflow:hidden or overflow:auto, for various reasons
        (like allowing it to be scrollable, or clipping an element that sticks
        out). These reasons are not sufficient justification for a new cluster.

        On reddit.com this means that comments will all get the same multiplier,
        rather than being independently assigned a variety of multipliers based
        on how much text each comment contains (etc), which significantly
        improves the look.

        Test: fast/text-autosizing/cluster-narrow-in-wide-ohidden.html

        * rendering/TextAutosizer.cpp:
        (WebCore::TextAutosizer::isAutosizingCluster):

2012-11-22  Pravin D  <pravind.2k4@gmail.com>

        max-height property not respected in case of tables
        https://bugs.webkit.org/show_bug.cgi?id=98633

        Reviewed by Julien Chaffraix.

        The max-height property determines the maximum computed height an element can have. In case of tables
        the computed height was not being limited by the max-height property. The current patch fixes the same.

        Test: fast/table/css-table-max-height.html

        * rendering/RenderTable.cpp:
        (WebCore::RenderTable::convertStyleLogicalHeightToComputedHeight):
          Helper function to compute height from the given style height.
          This function handles style height of type fixed, percent and viewport percent.
          As height of type 'calculated' gets internally resolved to either fixed or percent
          there is no special handling required for the same.

        (WebCore):
        (WebCore::RenderTable::layout):
          Logic to compute the logical height of an element such that it does not exceed the max-height value given that
          min-width < Content height < max-height, when min-height < max-height.
          However max-height value is not respected if either min-height > max-height or Content height > max-height.

        * rendering/RenderTable.h:
        (RenderTable):
          Function definition for the newly add function convertStyleLogicalHeightToComputedHeight().

2012-11-22  Kentaro Hara  <haraken@chromium.org>

        Remove 'module' from IDL parser
        https://bugs.webkit.org/show_bug.cgi?id=102670

        Reviewed by Adam Barth.

        The Web IDL spec no longer supports 'module'. We already removed
        'module's from WebKit IDL files. So this patch removes 'module'
        from the IDL parser.

        No tests. No change in behavior.

        * bindings/scripts/IDLParser.pm:
        (Parse):
        (parseDefinitionOld):

2012-11-22  Dan Carney  <dcarney@google.com>

        [V8] fix DOMWrapperWorld destructor
        https://bugs.webkit.org/show_bug.cgi?id=103066

        Reviewed by Jochen Eisinger.

        DOMWrapperWorld had a workaround in place during deletion.
        This patch brings it in line with WebKit standards.

        No new tests: refactor.

        * bindings/v8/DOMWrapperWorld.cpp:
        (WebCore::DOMWrapperWorld::~DOMWrapperWorld):
        (WebCore::DOMWrapperWorld::ensureIsolatedWorld):
        * bindings/v8/DOMWrapperWorld.h:
        (DOMWrapperWorld):
        (WebCore::DOMWrapperWorld::isolatedWorldDOMDataStore):

2012-11-22  Antti Koivisto  <antti@apple.com>

        Remove SVGShadowText class
        https://bugs.webkit.org/show_bug.cgi?id=103088

        Reviewed by Ryosuke Niwa.

        Remove SVGShadowText class and merge the little functionality it has to Text.

        * dom/Text.cpp:
        (WebCore):
        (WebCore::isSVGShadowText):
        
            Figure out if we are a SVGShadowText from the context.

        (WebCore::isSVGText):
        (WebCore::Text::createRenderer):
        (WebCore::Text::recalcTextStyle):
        
            Factor SVG special case testing to functions.

        * dom/Text.h:
        (Text):

            Get rid of the now unnecessary willRecalcTextStyle mechanism.

        * svg/SVGTRefElement.cpp:
        (WebCore):
        (WebCore::SVGTRefElement::updateReferencedText):

2012-11-22  Andreas Kling  <akling@apple.com>

        Style sharing: Remove O(n^2) presentation attribute checks that never found anything anyway.
        <http://webkit.org/b/103019>

        Reviewed by Ojan Vafai.

        Rely on the global presentation attribute cache and remove the slow-path code that compares
        the full StylePropertySets for attribute-derived style.
        There are virtually no cases of logically equivalent presentation attribute styles that don't
        already share the same memory address. (Zero hits on Apple and Chromium PLT content.)

        * css/StyleResolver.cpp:
        (WebCore::haveIdenticalStyleAffectingAttributes):
        (WebCore::StyleResolver::canShareStyleWithElement):

2012-11-22  Pavel Feldman  <pfeldman@chromium.org>

        Web Inspector: evaluate on hover regressed with the editor change
        https://bugs.webkit.org/show_bug.cgi?id=103063

        Reviewed by Vsevolod Vlasov.

        We are no longer mutating the editor's dom from outside.

        * inspector/front-end/DOMExtension.js:
        (Element.prototype.remove):
        * inspector/front-end/DefaultTextEditor.js:
        (WebInspector.DefaultTextEditor.prototype.highlightRangesWithStyleClass):
        (WebInspector.DefaultTextEditor.prototype.highlightExpression):
        (WebInspector.DefaultTextEditor.prototype.hideHighlightedExpression):
        * inspector/front-end/JavaScriptSourceFrame.js:
        (WebInspector.JavaScriptSourceFrame.prototype._getPopoverAnchor):
        (WebInspector.JavaScriptSourceFrame.prototype._onHidePopover):
        (WebInspector.JavaScriptSourceFrame.prototype._highlightExpression):

2012-09-26  Gustavo Noronha Silva  <gns@gnome.org>

        [GTK] Split SVG from WebCore to work-around make limitation
        https://bugs.webkit.org/show_bug.cgi?id=97735

        Reviewed by Carlos Garcia Campos.

        Add a new libtool convenience library, libWebCoreSVG.la, to work-around
        make limitation when linking libWebCore.

        * GNUmakefile.am: new libWebCoreSVG.la library.
        * GNUmakefile.list.am: move SVG-related files to be part of the new library.

2012-11-22  Pan Deng  <pan.deng@intel.com>

        [Web Inspector]Code Style changes in TimelinePresentationModel.js.
        https://bugs.webkit.org/show_bug.cgi?id=102885.

        Reviewed by Pavel Feldman.

        This patch changes "switch" code style for TimelinePresentationModel.js, no functionality update.

        No new tests.

        * inspector/front-end/TimelinePresentationModel.js:
        (WebInspector.TimelinePresentationModel.Record.prototype._getRecordDetails):

2012-11-22  Ryosuke Niwa  <rniwa@webkit.org>

        Build fix attempt.

        * html/HTMLCollection.h:
        (HTMLCollection):

2012-11-22  Ryosuke Niwa  <rniwa@webkit.org>

        Get rid of HTMLCollectionCacheBase
        https://bugs.webkit.org/show_bug.cgi?id=103085

        Reviewed by Sam Weinig.

        Merged HTMLCollectionCacheBase into HTMLCollection now that DynamicNodeList and HTMLCollection
        share one implementation.

        * dom/DynamicNodeList.cpp:
        (WebCore::DynamicNodeListCacheBase::rootNode): Merged ownerNodeHasItemRefAttribute since this was
        the only caller of this function, and the function name didn't match what it was checking.
        (WebCore::DynamicNodeListCacheBase::invalidateCache):
        (WebCore::DynamicNodeListCacheBase::invalidateIdNameCacheMaps):
        * dom/DynamicNodeList.h:
        (WebCore):
        (WebCore::DynamicNodeListCacheBase::cachedItemOffset):
        (DynamicNodeListCacheBase):
        * html/HTMLCollection.cpp:
        (WebCore::HTMLCollection::HTMLCollection):
        (WebCore::DynamicNodeListCacheBase::setItemCache):
        (WebCore::DynamicNodeListCacheBase::itemBeforeOrAfterCachedItem): Merged cachedElementsArrayOffset()
        now that this is the only caller.
        (WebCore::HTMLCollection::append):
        * html/HTMLCollection.h:
        (HTMLCollection):
        (WebCore::HTMLCollection::idCache): Moved from HTMLCollectionCacheBase.
        (WebCore::HTMLCollection::nameCache): Ditto.
        (WebCore::HTMLCollection::appendIdCache): Ditto.
        (WebCore::HTMLCollection::appendNameCache): Ditto.

2012-11-22  Antti Koivisto  <antti@apple.com>

        Merge EditingText into Text
        https://bugs.webkit.org/show_bug.cgi?id=103060

        Reviewed by Ryosuke Niwa.

        Remove the EditingText class. Its only function beyond the regular Text is that it always creates a renderer.
        It can be replaced with a bit.

        * CMakeLists.txt:
        * GNUmakefile.list.am:
        * Target.pri:
        * WebCore.gypi:
        * WebCore.vcproj/WebCore.vcproj:
        * WebCore.xcodeproj/project.pbxproj:
        * dom/CDATASection.cpp:
        (WebCore::CDATASection::CDATASection):
        * dom/Document.cpp:
        (WebCore::Document::createEditingTextNode):
        * dom/Document.h:
        (WebCore):
        (Document):
        * dom/EditingText.cpp: Removed.
        * dom/EditingText.h: Removed.
        * dom/Node.h:
        (WebCore::Node::hasName):
        (WebCore::Node::isEditingText):
        (WebCore::Node::setHasName):
        
            Use the same bit as hasName() which is Element specific.

        * dom/Text.cpp:
        (WebCore::Text::create):
        (WebCore):
        (WebCore::Text::createEditingText):
        (WebCore::Text::rendererIsNeeded):
        * dom/Text.h:
        (Text):
        (WebCore::Text::Text):
        * editing/Editor.cpp:
        * editing/InsertTextCommand.cpp:
        * editing/ReplaceSelectionCommand.cpp:
        * editing/htmlediting.cpp:
        * editing/mac/EditorMac.mm:
        * page/Frame.cpp:

2012-11-22  Eugene Klyuchnikov  <eustas.bug@gmail.com>

        Web Inspector: Timeline: Disclosure arrows rendered underneath frame boundaries
        https://bugs.webkit.org/show_bug.cgi?id=101053

        Reviewed by Yury Semikhatsky.

        In Timeline, when in "frames" mode, event disclosure arrows are rendered
        below the dividing lines for the frame (div.timeline-frame-divider).
        When this happens, the frame divider can capture mouse clicks and make
        it difficult to open the disclosure arrow.

        * inspector/front-end/timelinePanel.css:
        (#timeline-grid-header): Render dividers under timeline bars.

2012-11-22  Huang Dongsung  <luxtella@company100.net>

        [TexMap] Reduce public methods of TextureMapperTiledBackingStore.
        https://bugs.webkit.org/show_bug.cgi?id=103032

        Reviewed by Noam Rosenthal.

        This patch makes two methods private and removes one method.

        No new tests, refactoring only.

        * platform/graphics/texmap/TextureMapperBackingStore.cpp:
        (WebCore::TextureMapperTiledBackingStore::updateContentsFromImageIfNeeded):
        * platform/graphics/texmap/TextureMapperBackingStore.h:
        (WebCore::TextureMapperTiledBackingStore::create):
        (TextureMapperTiledBackingStore):
        (WebCore::TextureMapperTiledBackingStore::setContentsToImage):
        (WebCore::TextureMapperTiledBackingStore::rect):

2012-11-22  Simon Hausmann  <simon.hausmann@digia.com>, Pierre Rossi <pierre.rossi@digia.com>

        [Qt] Separate QWidget dependant code into separate WebKitWidgets static library
        https://bugs.webkit.org/show_bug.cgi?id=102800

        Reviewed by Tor Arne Vestbø.

        This patch separates code that needs to use QWidget related APIs in
        WebKit/qt/WebCoreSupport and Api from code that doesn't. This means for
        example FrameLoaderClientQt.cpp remains in the WebKit1 static library,
        while qwebpage.cpp and qwebframe.cpp become part of the WebKitWidgets
        static library. WebKit1 is compiled without QT += widgets and therefore
        any widget related dependency has been moved "up" and out of WebKit1 into
        the WebKitWidgets library.

        Between the code in WebKit.a and WebKitWidgets.a new adapters and
        interfaces have been introduced, such as QWebPageAdapter and
        QWebFrameAdapter. QWebPageAdapter, when used from WebKit1, is a way to
        call out into the API layer, implemented by QWebPage (QWebPagePrivate).
        The other way around if QWebPage wants to access WebCore or
        WebCoreSupport related functionality, it will go through
        QWebPageAdapater (as base class). The separation in the direction up
        into the API layer is complete with this patch, no code in WebKit1
        depends on QtWidgets. The separation the other way around, code in the
        API layer not using any WebCore types, is not complete yet.

        Some classes such as QWebSettings, QWebElement or
        DumpRenderTreeSupportQt remain in WebKit1. While they are API layer,
        they do not depend on widget related Qt APIs and they make much more
        use of WebCore internal APIs and therefore are easier to keep in
        WebKit1.

        In the future we plan to place a real shared library boundary between
        WebKit1 and WebKitWidgets, by keeping the WebKit1 static library as
        part of the QtWebKit shared library and by turning the WebKitWidgets
        static library into a shared one.

        * platform/qt/QWebPageClient.h:
        (QWebPageClient):

2012-11-22  Dan Carney  <dcarney@google.com>

        [V8] Add context checks to WorldContextHandle and V8DOMWindowShell
        https://bugs.webkit.org/show_bug.cgi?id=101573

        Reviewed by Adam Barth.

        Added a bunch of assertions to ensure the problems with IndexedDB
        contexts cannot reemerge.

        No new tests. No change in functionality.

        * bindings/v8/V8DOMWindowShell.cpp:
        (WebCore):
        (WebCore::V8DOMWindowShell::assertContextHasCorrectPrototype):
        * bindings/v8/V8DOMWindowShell.h:
        (V8DOMWindowShell):
        (WebCore::V8DOMWindowShell::isolated):
        * bindings/v8/WorldContextHandle.cpp:
        (WebCore::WorldContextHandle::WorldContextHandle):

2012-11-22  Allan Sandfeld Jensen  <allan.jensen@digia.com>

        [Qt] Correct extensions on preferredFilename
        https://bugs.webkit.org/show_bug.cgi?id=103054

        Reviewed by Simon Hausmann.

        When guessing a filename we will now ensure it has an extension that is valid for its mimetype.
        To do this the two missing methods getExtensionsForMIMEType and getPreferredExtensionForMIMEType
        have been added to the Qt implementation of MIMETypeRegistry.

        * platform/network/qt/QNetworkReplyHandler.cpp:
        (WebCore::QNetworkReplyHandler::sendResponseIfNeeded):
        * platform/qt/MIMETypeRegistryQt.cpp:
        (WebCore::MIMETypeRegistry::getExtensionsForMIMEType):
        (WebCore::MIMETypeRegistry::getPreferredExtensionForMIMEType):

2012-11-22  Kent Tamura  <tkent@chromium.org>

        INPUT_MULTIPLE_FIELDS_UI: Refactoring: Do not call updateInnerTextValue if only read-only sub-fields have values
        https://bugs.webkit.org/show_bug.cgi?id=103033

        Reviewed by Kentaro Hara.

        input[type=time] can have read-only sub fields. If only read-only fields
        have values, we don't need to call updateInnerTextValue when
        HTMLInputElement::value is set to "".

        Tests: this patch doesn't change any visible behavior, but we add test cases to
        fast/forms/time-multiple-fields/time-multiple-fields-value-set-empty.html
        just in case.

        * html/shadow/DateTimeEditElement.h:
        (DateTimeEditElement): Declare anyEditableFieldsHaveValues.
        * html/shadow/DateTimeEditElement.cpp:
        (WebCore::DateTimeEditElement::anyEditableFieldsHaveValues):
        Added. This function checks value existence against only editable sub-fields.
        * html/BaseMultipleFieldsDateAndTimeInputType.cpp:
        (WebCore::BaseMultipleFieldsDateAndTimeInputType::setValue):
        Call DateTimeEditElement::anyEditableFieldsHaveValues() instead of
        DateTimeFieldsState::hasAnyValue().
        * html/DateTimeFieldsState.h: Remove hasAnyValue.

2012-11-22  Allan Sandfeld Jensen  <allan.jensen@digia.com>

        [Qt] Lookup mimetypes using QMimeDatabase
        https://bugs.webkit.org/show_bug.cgi?id=102667

        Reviewed by Simon Hausmann.

        The Qt backend of MIMETypeRegistry now looks up using QMimeDatabase.

        * loader/archive/ArchiveFactory.cpp:
        (WebCore::archiveMIMETypes):
            Also map the preferred freedesktop mimetype for MIME archives to MIME archive constructor.
        * platform/MIMETypeRegistry.cpp:
        (WebCore::MIMETypeRegistry::getNormalizedMIMEType):
        * platform/qt/MIMETypeRegistryQt.cpp:
        (WebCore::MIMETypeRegistry::getMIMETypeForExtension):
        (WebCore::MIMETypeRegistry::getMIMETypeForPath):
        (WebCore::MIMETypeRegistry::getNormalizedMIMEType):

2012-11-22  Cosmin Truta  <ctruta@rim.com>

        Move URL-checking code into Frame
        https://bugs.webkit.org/show_bug.cgi?id=103014

        Reviewed by Ojan Vafai.

        Move the common URL checking logic from HTMLFrameElementBase::isURLAllowed
        and HTMLPlugInImageElement::allowedToLoadFrameURL into Frame::isURLAllowed.

        No new tests. Refactoring.

        * html/HTMLFrameElementBase.cpp:
        (WebCore::HTMLFrameElementBase::isURLAllowed): Call Frame::isURLAllowed.
        * html/HTMLPlugInImageElement.cpp:
        (WebCore::HTMLPlugInImageElement::allowedToLoadFrameURL): Call Frame::isURLAllowed.
        * page/Frame.cpp:
        (WebCore::Frame::isURLAllowed): Added.
        * page/Frame.h:
        (Frame): Added isURLAllowed.

2012-11-22  Kentaro Hara  <haraken@chromium.org>

        [V8] Rename toWebCoreStringWithNullOrUndefinedCheck() with toWebCoreStringWithUndefinedOrNullCheck()
        https://bugs.webkit.org/show_bug.cgi?id=103013

        Reviewed by Adam Barth.

        IDL attributes and other V8 and JSC files use "UndefinedOrNull" instead of "NullOrUndefined".

        No tests. No change in behavior.

        * bindings/v8/JavaScriptCallFrame.cpp:
        (WebCore::JavaScriptCallFrame::functionName):
        * bindings/v8/ScriptDebugServer.cpp:
        (WebCore::ScriptDebugServer::setScriptSource):
        (WebCore::ScriptDebugServer::dispatchDidParseSource):
        (WebCore::ScriptDebugServer::compileScript):
        (WebCore::ScriptDebugServer::runScript):
        * bindings/v8/ScriptEventListener.cpp:
        (WebCore::eventListenerHandlerLocation):
        * bindings/v8/V8Binding.h:
        (WebCore::toWebCoreStringWithUndefinedOrNullCheck):
        * bindings/v8/custom/V8DOMWindowCustom.cpp:
        (WebCore::V8DOMWindow::showModalDialogCallback):
        (WebCore::V8DOMWindow::openCallback):
        * bindings/v8/custom/V8JavaScriptCallFrameCustom.cpp:
        (WebCore::V8JavaScriptCallFrame::evaluateCallback):

2012-11-22  Harald Alvestrand  <hta@google.com>

        Name enumerator function for GetStats RTCStatsElement
        https://bugs.webkit.org/show_bug.cgi?id=102933

        Reviewed by Adam Barth.

        Tested by extensions to the RTCPeerConnection-stats test.

        * Modules/mediastream/RTCStatsElement.cpp:
        (WebCore::RTCStatsElement::names):
        (WebCore):
        * Modules/mediastream/RTCStatsElement.h:
        (RTCStatsElement):
        * Modules/mediastream/RTCStatsElement.idl:

2012-11-22  Kentaro Hara  <haraken@chromium.org>

        Rename the "eden" bit to something more descriptive
        https://bugs.webkit.org/show_bug.cgi?id=102985

        Reviewed by Adam Barth.

        InEdenFlag is not descriptive. Per the discussion in IRC,
        we rename InEdenFlag to V8CollectableDuringMinorGCFlag.

        No tests. No change in behavior.

        * bindings/v8/V8GCController.cpp:
        (WebCore::gcTree):
        (WebCore::V8GCController::didCreateWrapperForNode):
        (WebCore::V8GCController::minorGCPrologue):
        * dom/Node.h:
        (WebCore::Node::isV8CollectableDuringMinorGC):
        (WebCore::Node::setV8CollectableDuringMinorGC):

2012-11-22  Kentaro Hara  <haraken@chromium.org>

        [V8] Move AddMessageListener() from WorkerContextExecutionProxy::initializeIfNeeded() to WorkerContextExecutionProxy::initIsolate()
        https://bugs.webkit.org/show_bug.cgi?id=102998

        Reviewed by Adam Barth.

        This is an incremental step for moving initializeIfNeeded()
        to V8Initializer.h. Given that AddMessageListener() needs to
        be called once per Isolate, we can move AddMessageListener()
        from initializeIfNeeded() to initIsolate().

        No tests. No change in behavior.

        * bindings/v8/WorkerContextExecutionProxy.cpp:
        (WebCore::WorkerContextExecutionProxy::initIsolate):
        (WebCore::WorkerContextExecutionProxy::initializeIfNeeded):

2012-11-22  Michael Saboff  <msaboff@apple.com>

        HTML integer parsing functions don't natively handle 8 bit strings
        https://bugs.webkit.org/show_bug.cgi?id=102997

        Reviewed by Filip Pizlo.

        In order to avoid unnecessary up convering of 8 bit strings to 16 bits, added 8 bit paths to
        parseHTMLInteger() and parseHTMLNonNegativeInteger() by breaking out the core logic into
        templated helper functions.  These methods are primarily used to process attribute values.

        No new tests needed, functionnality covered by existing tests.

        * html/parser/HTMLParserIdioms.cpp:
        (WebCore::parseHTMLIntegerInternal):
        (WebCore::parseHTMLInteger):
        (WebCore::parseHTMLNonNegativeIntegerInternal):
        (WebCore::parseHTMLNonNegativeInteger):

2012-11-22  Kentaro Hara  <haraken@chromium.org>

        [V8] WebCoreStringResourceBase should be located in V8StringResource.h
        https://bugs.webkit.org/show_bug.cgi?id=103002

        Reviewed by Adam Barth.

        Currently WebCoreStringResourceBase is mis-located in V8ValueCache.h.
        It should be in V8StringResource.h.

        No tests. No change in behavior.

        * bindings/v8/V8StringResource.cpp:
        (WebCore::WebCoreStringResourceBase::toWebCoreStringResourceBase):
        (WebCore):
        (WebCore::WebCoreStringResourceBase::visitStrings):
        * bindings/v8/V8StringResource.h:
        (WebCore):
        (WebCoreStringResourceBase):
        (WebCore::WebCoreStringResourceBase::WebCoreStringResourceBase):
        (WebCore::WebCoreStringResourceBase::~WebCoreStringResourceBase):
        (WebCore::WebCoreStringResourceBase::webcoreString):
        (WebCore::WebCoreStringResourceBase::atomicString):
        (WebCore::WebCoreStringResourceBase::memoryConsumption):
        (WebCoreStringResource16):
        (WebCore::WebCoreStringResource16::WebCoreStringResource16):
        (WebCoreStringResource8):
        (WebCore::WebCoreStringResource8::WebCoreStringResource8):
        * bindings/v8/V8ValueCache.cpp:
        * bindings/v8/V8ValueCache.h:
        (WebCore):

2012-11-21  Ilya Tikhonovsky  <loislo@chromium.org>

        Web Inspector: NMI add instrumentation to DynamicNodeList classes hierarchy.
        https://bugs.webkit.org/show_bug.cgi?id=103025

        Reviewed by Yury Semikhatsky.

        RNiwa changed pointer type in NodeRareData::NodeListAtomicNameCacheMap from the topmost
        DynamicSubtreeNodeList to the base DynamicNodeListCacheBase at r135429.
        As a result we got non zero count of pointers that don't match with tcmalloc data,
        because DynamicNodeList uses multiple inheritance.
        It could be fixed with help of explicit native memory instrumentation for DynamicNodeList class hierarchy.

        No change in behavior, so no new tests.

        * dom/Document.cpp: drive by fix.
        (WebCore::Document::reportMemoryUsage):
        * dom/DynamicNodeList.cpp:
        (WebCore::DynamicNodeListCacheBase::reportMemoryUsage):
        (WebCore):
        (WebCore::DynamicNodeList::reportMemoryUsage):
        (WebCore::DynamicSubtreeNodeList::reportMemoryUsage):
        * dom/DynamicNodeList.h:
        (WebCore::DynamicNodeListCacheBase::~DynamicNodeListCacheBase):
        (DynamicNodeListCacheBase):
        (DynamicNodeList):
        (DynamicSubtreeNodeList):

2012-11-22  Kentaro Hara  <haraken@chromium.org>

        Unreviewed, rolling out r135482.
        http://trac.webkit.org/changeset/135482
        https://bugs.webkit.org/show_bug.cgi?id=103002

        It broke Chrome/Linux Debug build

        * bindings/v8/V8StringResource.cpp:
        * bindings/v8/V8StringResource.h:
        * bindings/v8/V8ValueCache.cpp:
        (WebCore::WebCoreStringResourceBase::toWebCoreStringResourceBase):
        (WebCore):
        (WebCore::WebCoreStringResourceBase::visitStrings):
        * bindings/v8/V8ValueCache.h:
        (WebCore):
        (WebCoreStringResourceBase):
        (WebCore::WebCoreStringResourceBase::WebCoreStringResourceBase):
        (WebCore::WebCoreStringResourceBase::~WebCoreStringResourceBase):
        (WebCore::WebCoreStringResourceBase::webcoreString):
        (WebCore::WebCoreStringResourceBase::atomicString):
        (WebCore::WebCoreStringResourceBase::memoryConsumption):
        (WebCoreStringResource16):
        (WebCore::WebCoreStringResource16::WebCoreStringResource16):
        (WebCoreStringResource8):
        (WebCore::WebCoreStringResource8::WebCoreStringResource8):

2012-11-22  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r134927 and r134944.
        http://trac.webkit.org/changeset/134927
        http://trac.webkit.org/changeset/134944
        https://bugs.webkit.org/show_bug.cgi?id=103028

        Reverting the reverts after merging. (Requested by vsevik on
        #webkit).

        * English.lproj/localizedStrings.js:
        * WebCore.gypi:
        * WebCore.vcproj/WebCore.vcproj:
        * inspector/compile-front-end.py:
        * inspector/front-end/AdvancedSearchController.js:
        * inspector/front-end/CallStackSidebarPane.js:
        (WebInspector.CallStackSidebarPane.prototype.registerShortcuts):
        * inspector/front-end/ConsoleView.js:
        (WebInspector.ConsoleView.prototype._registerShortcuts):
        * inspector/front-end/ElementsPanel.js:
        (WebInspector.ElementsPanel):
        * inspector/front-end/ElementsPanelDescriptor.js:
        (WebInspector.ElementsPanelDescriptor.prototype.registerShortcuts):
        * inspector/front-end/GoToLineDialog.js:
        (WebInspector.GoToLineDialog.install):
        * inspector/front-end/KeyboardShortcut.js:
        (WebInspector.KeyboardShortcut._keyName):
        * inspector/front-end/Panel.js:
        (WebInspector.Panel.prototype.registerShortcuts):
        (WebInspector.PanelDescriptor.prototype.panel):
        (WebInspector.PanelDescriptor.prototype.registerShortcuts):
        * inspector/front-end/ScriptsPanel.js:
        (WebInspector.ScriptsPanel):
        (WebInspector.ScriptsPanel.prototype._createDebugToolbar):
        (WebInspector.ScriptsPanel.prototype._createButtonAndRegisterShortcuts):
        * inspector/front-end/ScriptsPanelDescriptor.js:
        (WebInspector.ScriptsPanelDescriptor.prototype.registerShortcuts):
        * inspector/front-end/ShortcutsScreen.js:
        (WebInspector.ShortcutsScreen):
        (WebInspector.ShortcutsSection):
        (WebInspector.ShortcutsSection.prototype._renderKey):
        * inspector/front-end/StylesSidebarPane.js:
        * inspector/front-end/TimelinePanel.js:
        (WebInspector.TimelinePanel.prototype._registerShortcuts):
        * inspector/front-end/TimelinePanelDescriptor.js: Copied from Source/WebCore/inspector/front-end/ScriptsPanelDescriptor.js.
        (WebInspector.TimelinePanelDescriptor):
        (WebInspector.TimelinePanelDescriptor.prototype.registerShortcuts):
        * inspector/front-end/WebKit.qrc:
        * inspector/front-end/inspector.html:
        * inspector/front-end/inspector.js:
        (WebInspector._panelDescriptors):
        (WebInspector._registerShortcuts):

2012-11-21  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r135433 and r135479.
        http://trac.webkit.org/changeset/135433
        http://trac.webkit.org/changeset/135479
        https://bugs.webkit.org/show_bug.cgi?id=103029

        "IDBRequestTest.EventsAfterStopping crashes" (Requested by
        yurys on #webkit).

        * bindings/v8/DOMDataStore.cpp:
        (WebCore::DOMDataStore::current):
        * bindings/v8/DOMWrapperWorld.cpp:
        * bindings/v8/DOMWrapperWorld.h:
        * bindings/v8/ScriptController.cpp:
        (WebCore::ScriptController::existingWindowShell):
        (WebCore::ScriptController::windowShell):
        (WebCore::ScriptController::evaluateInIsolatedWorld):
        (WebCore::ScriptController::currentWorldContext):
        (WebCore::ScriptController::collectIsolatedContexts):
        * bindings/v8/ScriptController.h:
        (ScriptController):
        * bindings/v8/V8Binding.h:
        (WebCore::worldForEnteredContextIfIsolated):
        * bindings/v8/V8DOMWindowShell.cpp:
        (WebCore::V8DOMWindowShell::destroyIsolatedShell):
        (WebCore::isolatedContextWeakCallback):
        (WebCore):
        (WebCore::V8DOMWindowShell::disposeContext):
        (WebCore::V8DOMWindowShell::initializeIfNeeded):
        (WebCore::V8DOMWindowShell::installDOMWindow):
        * bindings/v8/V8DOMWindowShell.h:
        (WebCore::V8DOMWindowShell::isolated):
        (V8DOMWindowShell):
        * bindings/v8/V8PerContextData.h:
        * bindings/v8/WorldContextHandle.cpp:
        (WebCore::WorldContextHandle::WorldContextHandle):

2012-11-21  Pavel Feldman  <pfeldman@chromium.org>

        Web Inspector: simplify the _updateChunksForRanges routine
        https://bugs.webkit.org/show_bug.cgi?id=102927

        Reviewed by Vsevolod Vlasov.

        * inspector/front-end/DefaultTextEditor.js:
        (WebInspector.TextEditorMainPanel.prototype._updateChunksForRanges):
        (WebInspector.TextEditorMainChunk.prototype.updateCollapsedLineRow):
        (WebInspector.TextEditorMainChunk.prototype.detachFromDOM):
        (WebInspector.TextEditorMainChunk.prototype.anchorElement):

2012-11-21  Kentaro Hara  <haraken@chromium.org>

        [V8] WebCoreStringResourceBase should be located in V8StringResource.h
        https://bugs.webkit.org/show_bug.cgi?id=103002

        Reviewed by Adam Barth.

        Currently WebCoreStringResourceBase is mis-located in V8ValueCache.h.
        It should be in V8StringResource.h.

        No tests. No change in behavior.

        * bindings/v8/V8StringResource.cpp:
        (WebCore::WebCoreStringResourceBase::toWebCoreStringResourceBase):
        (WebCore):
        (WebCore::WebCoreStringResourceBase::visitStrings):
        * bindings/v8/V8StringResource.h:
        (WebCore):
        (WebCoreStringResourceBase):
        (WebCore::WebCoreStringResourceBase::WebCoreStringResourceBase):
        (WebCore::WebCoreStringResourceBase::~WebCoreStringResourceBase):
        (WebCore::WebCoreStringResourceBase::webcoreString):
        (WebCore::WebCoreStringResourceBase::atomicString):
        (WebCore::WebCoreStringResourceBase::memoryConsumption):
        (WebCoreStringResource16):
        (WebCore::WebCoreStringResource16::WebCoreStringResource16):
        (WebCoreStringResource8):
        (WebCore::WebCoreStringResource8::WebCoreStringResource8):
        * bindings/v8/V8ValueCache.cpp:
        * bindings/v8/V8ValueCache.h:
        (WebCore):

2012-11-21  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r135464.
        http://trac.webkit.org/changeset/135464
        https://bugs.webkit.org/show_bug.cgi?id=103026

        breaks gtk bot (Requested by morrita on #webkit).

        * dom/Element.cpp:
        * dom/Element.h:
        (Element):
        * dom/Element.idl:

2012-11-21  Dan Carney  <dcarney@google.com>

        Remove V8DOMWindowShell::getEntered
        https://bugs.webkit.org/show_bug.cgi?id=96637

        Reviewed by Adam Barth.

        V8DOMWindowShell::getEntered was refactored so that the window shell
        no longer has to be kept alive by a v8 context. Instead, only
        the DOMWrapperWorld will be kept alive.

        No new tests. No change in functionality.

        * bindings/v8/DOMDataStore.cpp:
        (WebCore::DOMDataStore::current):
        * bindings/v8/DOMWrapperWorld.cpp:
        (WebCore::isolatedWorldWeakCallback):
        (WebCore):
        (WebCore::DOMWrapperWorld::makeContextWeak):
        (WebCore::DOMWrapperWorld::setIsolatedWorldField):
        * bindings/v8/DOMWrapperWorld.h:
        (DOMWrapperWorld):
        (WebCore::DOMWrapperWorld::isolated):
        * bindings/v8/ScriptController.cpp:
        (WebCore::ScriptController::existingWindowShell):
        (WebCore::ScriptController::windowShell):
        (WebCore::ScriptController::evaluateInIsolatedWorld):
        (WebCore::ScriptController::currentWorldContext):
        (WebCore::ScriptController::collectIsolatedContexts):
        * bindings/v8/ScriptController.h:
        (ScriptController):
        * bindings/v8/V8Binding.h:
        (WebCore::worldForEnteredContextIfIsolated):
        * bindings/v8/V8DOMWindowShell.cpp:
        (WebCore::V8DOMWindowShell::destroyIsolatedShell):
        (WebCore::V8DOMWindowShell::disposeContext):
        (WebCore::V8DOMWindowShell::initializeIfNeeded):
        * bindings/v8/V8DOMWindowShell.h:
        (V8DOMWindowShell):
        * bindings/v8/V8PerContextData.h:
        * bindings/v8/WorldContextHandle.cpp:
        (WebCore::WorldContextHandle::WorldContextHandle):

2012-11-21  Cosmin Truta  <ctruta@rim.com>

        Numeric identifiers of events should not be globally sequential
        https://bugs.webkit.org/show_bug.cgi?id=102244

        Reviewed by Alexey Proskuryakov.

        The functions setTimeout, setInterval and navigator.geolocation.watchPosition
        are currently returning values that are unique across all JavaScript execution
        contexts, due to their dependency on global variables.
        Such a guarantee is unnecessarily strong. In this patch, we constrain uniqueness
        to these functions' own script execution context only.

        Tests: fast/dom/Geolocation/watchPosition-unique.html
               fast/dom/Window/setTimeout-setInterval-unique.html

        * Modules/geolocation/Geolocation.cpp:
        (WebCore): Remove firstAvailableWatchId.
        (WebCore::Geolocation::watchPosition): Get new watchID from script execution context.
        (WebCore::Geolocation::clearWatch): Invalid watchID means less than or equal to 0.
        * Modules/geolocation/Geolocation.h:
        (Geolocation): Renamed the argument of Geolocation::clearWatch to WatchID.
        * dom/ScriptExecutionContext.cpp:
        (WebCore::ScriptExecutionContext::ScriptExecutionContext): Update initialization.
        (WebCore::ScriptExecutionContext::newUniqueID): Add.
        * dom/ScriptExecutionContext.h:
        (ScriptExecutionContext): Add m_sequentialID.
        (WebCore::ScriptExecutionContext::addTimeout): Inline.
        (WebCore::ScriptExecutionContext::removeTimeout): Inline.
        (WebCore::ScriptExecutionContext::findTimeout): Inline.
        * page/DOMTimer.cpp:
        (WebCore): Remove timeoutId.
        (WebCore::DOMTimer::DOMTimer): Get new timeoutId from script execution context.

2012-11-21  Ryosuke Niwa  <rniwa@webkit.org>

        CollectionType and DynamicNodeList::NodeListType should be merged
        https://bugs.webkit.org/show_bug.cgi?id=102983

        Reviewed by Antti Koivisto.

        Merged DynamicNodeList::NodeListType (for live NodeList) into CollectionType.

        * dom/ClassNodeList.cpp:
        (WebCore::ClassNodeList::~ClassNodeList):
        * dom/Document.cpp:
        (WebCore::Document::registerNodeListCache):
        (WebCore::Document::unregisterNodeListCache):
        (WebCore::Document::getItems):
        * dom/DynamicNodeList.cpp:
        (WebCore::DynamicNodeListCacheBase::invalidateCache):
        (WebCore::DynamicNodeListCacheBase::invalidateIdNameCacheMaps):
        * dom/DynamicNodeList.h:
        (WebCore::DynamicNodeListCacheBase::DynamicNodeListCacheBase):
        (WebCore::DynamicNodeListCacheBase::hasIdNameCache): Added. Returns iff this is a HTMLCollection.
        (WebCore::DynamicNodeListCacheBase::invalidateCache):
        (WebCore::DynamicNodeList::DynamicNodeList):
        (WebCore::DynamicSubtreeNodeList::DynamicSubtreeNodeList):
        * dom/MicroDataItemList.cpp:
        (WebCore::MicroDataItemList::~MicroDataItemList):
        * dom/NameNodeList.cpp:
        (WebCore::NameNodeList::~NameNodeList):
        * dom/Node.cpp:
        (WebCore::Node::getElementsByTagName):
        (WebCore::Node::getElementsByName):
        (WebCore::Node::getElementsByClassName):
        (WebCore::Node::radioNodeList):
        (WebCore::Node::propertyNodeList):
        * dom/NodeRareData.h:
        (WebCore::NodeListsNodeData::addCacheWithAtomicName): No longer converts CollectionType to
        a NodeListType equivalent since two enums have been merged.
        (WebCore::NodeListsNodeData::cacheWithAtomicName): Ditto.
        (WebCore::NodeListsNodeData::addCacheWithName): Ditto.
        (WebCore::NodeListsNodeData::removeCacheWithAtomicName): Ditto.
        (WebCore::NodeListsNodeData::removeCacheWithName): Ditto.
        (WebCore::NodeListsNodeData::namedNodeListKey): Ignore types before FirstNodeCollectionType
        to minimize the hash conflicts.
        * dom/PropertyNodeList.cpp:
        (WebCore::PropertyNodeList::~PropertyNodeList):
        * dom/TagNodeList.cpp:
        (WebCore::TagNodeList::~TagNodeList):
        * html/CollectionType.h:
        (WebCore::isNodeList): Added.
        * html/HTMLCollection.cpp:
        (WebCore::shouldOnlyIncludeDirectChildren):
        (WebCore::rootTypeFromCollectionType):
        (WebCore::invalidationTypeExcludingIdAndNameAttributes):
        (WebCore::isAcceptableElement):
        (WebCore::DynamicNodeListCacheBase::iterateForNextNode):
        (WebCore::DynamicNodeListCacheBase::itemBeforeOrAfter):
        * html/LabelableElement.cpp:
        (WebCore::LabelableElement::labels):
        * html/LabelsNodeList.cpp:
        (WebCore::LabelsNodeList::~LabelsNodeList):
        * html/RadioNodeList.cpp:
        (WebCore::RadioNodeList::~RadioNodeList):

2012-11-21  Michael Pruett  <michael@68k.org>

        IndexedDB: Obtain ScriptState from IDL binding generator
        https://bugs.webkit.org/show_bug.cgi?id=102552

        Reviewed by Kentaro Hara.

        Obtain ScriptState from IDL binding generator rather than directly
        calling ScriptState::current() since that method does not exist
        in JSC.

        Tests: storage/indexeddb/*

        * Modules/indexeddb/IDBCursor.cpp:
        (WebCore::IDBCursor::update):
        * Modules/indexeddb/IDBCursor.h:
        (IDBCursor):
        * Modules/indexeddb/IDBCursor.idl:
        * Modules/indexeddb/IDBObjectStore.cpp:
        (WebCore::IDBObjectStore::add):
        (WebCore::IDBObjectStore::put):
        * Modules/indexeddb/IDBObjectStore.h:
        (WebCore::IDBObjectStore::add):
        (WebCore::IDBObjectStore::put):
        (IDBObjectStore):
        * Modules/indexeddb/IDBObjectStore.idl:

2012-11-21  Filip Pizlo  <fpizlo@apple.com>

        Rename dataLog() and dataLogV() to dataLogF() and dataLogFV()
        https://bugs.webkit.org/show_bug.cgi?id=103001

        Rubber stamped by Dan Bernstein.

        No change in behavior, so no new tests.

        * platform/KURLWTFURL.cpp:
        (WebCore::KURL::print):

2012-11-21  Kondapally Kalyan  <kalyan.kondapally@intel.com>

        [EFL] Refactor GraphicsContext3DEFL.
        https://bugs.webkit.org/show_bug.cgi?id=101291.

        Reviewed by Kenneth Rohde Christiansen.

        GraphicsContext3DEfl creates GraphicsContext3DPrivate, which acts as its platform Layer.
        GraphicsContext3DPrivate needs to handle the following cases:
        1) To provide an off-screen buffer for accelerated composition.
        2) Render to a current context.
        3) To render directly to host window. (currently not supported.)

        Before this patch Evas was used to provide us an off-screen context and buffer. GLX was used in
        the other supported case. Evas acts as a glue layer to provide us with appropriate
        GL bindings (OpenGL functions), GL context and drawable (surface/offscreenbuffer).
        However, primitive rendering is handled by TextureMapper and OpenGLShims is used to load the needed GL functions.

        It would be for our advantage to be able to take in to use any optimisations/extensions
        provided by underlying drivers, specific to a platform (e.g. GLX_MESA_copy_sub_buffer etc.).
        This patch introduces an abstraction layer to make it easy to add support for any GL backend (GLX, EGL etc.)
        and do any platform specific optimizations as needed without complicating GraphicsContext3DPrivate class.
        Two new classes are added with this implementation, GLPlatformContext and GLPlatformSurface.
        GraphicsContext3DPrivate would create and own a GLPlatformContext and GLPlatformSurface.

        GLPlatformContext encapsulates an OpenGL context hiding any platform specific management.
        It uses GL extension ARB_robustness (when available) to detect driver resets.
        It defines a simple interface for things that need to be handled by the context. Support
        for multi-threaded usage and shared context-group would be added later.

        GLPlatformSurface encapsulates an OpenGL drawable hiding any platform specific management.
        It defines a simple interface for things that need to be handled by the surface.
        It creates an off-screen rendering area. Any GLPlatformContext (compatible with the surface)
        can be used to render into this off-screen area.

        This patch also adds GLX implementation. To keep the patch to minimum EGL support would be added in another changeset.

        * PlatformEfl.cmake:
        * platform/graphics/efl/GraphicsContext3DEfl.cpp:
        (WebCore::GraphicsContext3D::create):
        (WebCore::GraphicsContext3D::GraphicsContext3D):
        (WebCore::GraphicsContext3D::~GraphicsContext3D):
        (WebCore::GraphicsContext3D::makeContextCurrent):
        (WebCore::GraphicsContext3D::setContextLostCallback):
        * platform/graphics/efl/GraphicsContext3DPrivate.cpp:
        (WebCore::GraphicsContext3DPrivate::GraphicsContext3DPrivate):
        (GraphicsContext3DPrivate::~GraphicsContext3DPrivate):
        (GraphicsContext3DPrivate::releaseResources):
        (GraphicsContext3DPrivate::setContextLostCallback):
        (GraphicsContext3DPrivate::platformGraphicsContext3D):
        (GraphicsContext3DPrivate::makeContextCurrent):
        (GraphicsContext3DPrivate::createGraphicsSurfaces):
        (GraphicsContext3DPrivate::copyToGraphicsSurface):
        (GraphicsContext3DPrivate::graphicsSurfaceToken):
        * platform/graphics/efl/GraphicsContext3DPrivate.h:
        (GraphicsContext3DPrivate):
        * platform/graphics/opengl/GLDefs.h: Added.
        (WebCore):
        * platform/graphics/opengl/GLPlatformContext.cpp: Added.
        (WebCore):
        (WebCore::GLPlatformContext::createContext):
        (WebCore::GLPlatformContext::createOffScreenContext):
        (WebCore::GLPlatformContext::createCurrentContextWrapper):
        (WebCore::GLPlatformContext::GLPlatformContext):
        (WebCore::GLPlatformContext::~GLPlatformContext):
        (WebCore::GLPlatformContext::makeCurrent):
        (WebCore::GLPlatformContext::isValid):
        (WebCore::GLPlatformContext::releaseCurrent):
        (WebCore::GLPlatformContext::handle):
        (WebCore::GLPlatformContext::isCurrentContext):
        (WebCore::GLPlatformContext::initialize):
        (WebCore::GLPlatformContext::getCurrent):
        (WebCore::GLPlatformContext::platformMakeCurrent):
        (WebCore::GLPlatformContext::platformReleaseCurrent):
        (WebCore::GLPlatformContext::destroy):
        * platform/graphics/opengl/GLPlatformContext.h: Added.
        (WebCore):
        (GLPlatformContext):
        * platform/graphics/opengl/GLPlatformSurface.cpp: Added.
        (WebCore):
        (WebCore::GLPlatformSurface::createOffscreenSurface):
        (WebCore::GLPlatformSurface::createTransportSurface):
        (WebCore::GLPlatformSurface::GLPlatformSurface):
        (WebCore::GLPlatformSurface::~GLPlatformSurface):
        (WebCore::GLPlatformSurface::handle):
        (WebCore::GLPlatformSurface::geometry):
        (WebCore::GLPlatformSurface::sharedDisplay):
        (WebCore::GLPlatformSurface::configuration):
        (WebCore::GLPlatformSurface::swapBuffers):
        (WebCore::GLPlatformSurface::copyTexture):
        (WebCore::GLPlatformSurface::updateContents):
        (WebCore::GLPlatformSurface::setGeometry):
        (WebCore::GLPlatformSurface::destroy):
        * platform/graphics/opengl/GLPlatformSurface.h: Added.
        (WebCore):
        (GLPlatformSurface):
            GLXOffScreenContext creates an off-screen context. This is used when
            renderstyle is RenderOffscreen.
            It uses GL extension GLX_ARB_create_context (when available)
            to create a context else falls back to use glXCreateNewContext.
        * platform/graphics/surfaces/glx/GLXContext.cpp: Added.
        (WebCore):
        (WebCore::initializeARBExtensions):
        (WebCore::GLXOffScreenContext::GLXOffScreenContext):
        (WebCore::GLXOffScreenContext::initialize):
        (WebCore::GLXOffScreenContext::~GLXOffScreenContext):
        (WebCore::GLXOffScreenContext::isCurrentContext):
        (WebCore::GLXOffScreenContext::platformMakeCurrent):
        (WebCore::GLXOffScreenContext::platformReleaseCurrent):
        (WebCore::GLXOffScreenContext::freeResources):
        (WebCore::GLXOffScreenContext::destroy):
            GLXCurrentContextWrapper acts as a wrapper for current context.
            This is used when renderstyle is RenderToCurrentGLContext.
        * platform/graphics/surfaces/glx/GLXContext.h: Added.
        (WebCore):
        (GLXCurrentContextWrapper):
        (WebCore::GLXCurrentContextWrapper::GLXCurrentContextWrapper):
        (WebCore::GLXCurrentContextWrapper::~GLXCurrentContextWrapper):
        (GLXOffScreenContext):
        * platform/graphics/surfaces/glx/GLXSurface.cpp: Added.
        (WebCore):
        (WebCore::GLXSurface::GLXSurface):
        (WebCore::GLXSurface::~GLXSurface):
        (WebCore::GLXSurface::visualInfo):
        (WebCore::GLXSurface::xWindow):
        (WebCore::GLXSurface::pBufferConfiguration):
        (WebCore::GLXSurface::transportSurfaceConfiguration):
        (WebCore::GLXSurface::isXRenderExtensionSupported):
            GLXTransportSurface creates Window and uses it as an off-screen surface.
            Any GLContext that was created with respect to configuration can be used
            to render into this.
            This is used when contents of the buffer are to be provided to UI Process
            for display.
        (WebCore::GLXTransportSurface::GLXTransportSurface):
        (WebCore::GLXTransportSurface::~GLXTransportSurface):
        (WebCore::GLXTransportSurface::configuration):
        (WebCore::GLXTransportSurface::swapBuffers):
        (WebCore::GLXTransportSurface::setGeometry):
        (WebCore::GLXTransportSurface::initialize):
        (WebCore::GLXTransportSurface::destroy):
        (WebCore::GLXTransportSurface::freeResources):
           GLXPBuffer, Creates a GL surface (PBuffer) used for offscreen rendering.
           Any GLContext that was created with respect to configuration can be used
           to render into this.
        (WebCore::GLXPBuffer::GLXPBuffer):
        (WebCore::GLXPBuffer::~GLXPBuffer):
        (WebCore::GLXPBuffer::initialize):
        (WebCore::GLXPBuffer::configuration):
        (WebCore::GLXPBuffer::destroy):
        (WebCore::GLXPBuffer::freeResources):
        * platform/graphics/surfaces/glx/GLXSurface.h: Added.
        (WebCore):
            Creates X resources which are shared between surface and context.
        (SharedX11Resources):
        (WebCore::SharedX11Resources::create):
        (WebCore::SharedX11Resources::deref):
        (WebCore::SharedX11Resources::getXWindow):
        (WebCore::SharedX11Resources::display):
        (WebCore::SharedX11Resources::visualInfo):
        (WebCore::SharedX11Resources::createConfig):
        (WebCore::SharedX11Resources::pBufferContextConfig):
        (WebCore::SharedX11Resources::surfaceContextConfig):
        (WebCore::SharedX11Resources::isXRenderExtensionSupported):
        (WebCore::SharedX11Resources::SharedX11Resources):
        (WebCore::SharedX11Resources::~SharedX11Resources):
        (GLXSurface):
        (GLXTransportSurface):
        (GLXPBuffer):

2012-11-21  Andreas Kling  <akling@apple.com>

        Re-virtualize CSSRule.
        <http://webkit.org/b/103003>

        Reviewed by Anders Carlsson.

        Make CSSRule virtual once again, since it's no longer important to keep it as small as possible.
        StyleRuleBase and its various subclasses are the relevant ones now.

        * css/CSSCharsetRule.cpp:
        (WebCore::CSSCharsetRule::CSSCharsetRule):
        (WebCore::CSSCharsetRule::reportMemoryUsage):
        * css/CSSCharsetRule.h:
        (WebCore::CSSCharsetRule::~CSSCharsetRule):
        (WebCore::CSSCharsetRule::encoding):
        (WebCore::CSSCharsetRule::setEncoding):
        * css/CSSFontFaceRule.cpp:
        (WebCore::CSSFontFaceRule::CSSFontFaceRule):
        (WebCore::CSSFontFaceRule::reattach):
        (WebCore::CSSFontFaceRule::reportMemoryUsage):
        * css/CSSFontFaceRule.h:
        (CSSFontFaceRule):
        * css/CSSImportRule.cpp:
        (WebCore::CSSImportRule::CSSImportRule):
        (WebCore::CSSImportRule::reportMemoryUsage):
        (WebCore::CSSImportRule::reattach):
        (WebCore):
        * css/CSSImportRule.h:
        (CSSImportRule):
        * css/CSSMediaRule.cpp:
        (WebCore::CSSMediaRule::CSSMediaRule):
        (WebCore::CSSMediaRule::reattach):
        (WebCore::CSSMediaRule::reportMemoryUsage):
        * css/CSSMediaRule.h:
        (CSSMediaRule):
        * css/CSSPageRule.cpp:
        (WebCore::CSSPageRule::CSSPageRule):
        (WebCore::CSSPageRule::reattach):
        (WebCore::CSSPageRule::reportMemoryUsage):
        * css/CSSPageRule.h:
        (CSSPageRule):
        * css/CSSRule.cpp:
        (SameSizeAsCSSRule):
        (WebCore::CSSRule::reportMemoryUsage):
        * css/CSSRule.h:
        (WebCore::CSSRule::~CSSRule):
        (CSSRule):
        (WebCore::CSSRule::CSSRule):
        * css/CSSStyleRule.cpp:
        (WebCore::CSSStyleRule::CSSStyleRule):
        (WebCore::CSSStyleRule::reattach):
        (WebCore::CSSStyleRule::reportMemoryUsage):
        * css/CSSStyleRule.h:
        (CSSStyleRule):
        (WebCore::CSSStyleRule::type):
        * css/CSSStyleSheet.cpp:
        (WebCore::CSSStyleSheet::rules):
        * css/CSSUnknownRule.h:
        (WebCore::CSSUnknownRule::CSSUnknownRule):
        (WebCore::CSSUnknownRule::~CSSUnknownRule):
        * css/StyleResolver.cpp:
        (WebCore::collectCSSOMWrappers):
        * css/WebKitCSSKeyframeRule.cpp:
        (WebCore::WebKitCSSKeyframeRule::WebKitCSSKeyframeRule):
        (WebCore::WebKitCSSKeyframeRule::reportMemoryUsage):
        (WebCore::WebKitCSSKeyframeRule::reattach):
        (WebCore):
        * css/WebKitCSSKeyframeRule.h:
        (WebKitCSSKeyframeRule):
        * css/WebKitCSSKeyframesRule.cpp:
        (WebCore::WebKitCSSKeyframesRule::WebKitCSSKeyframesRule):
        (WebCore::WebKitCSSKeyframesRule::reattach):
        (WebCore::WebKitCSSKeyframesRule::reportMemoryUsage):
        * css/WebKitCSSKeyframesRule.h:
        (WebKitCSSKeyframesRule):
        * css/WebKitCSSRegionRule.cpp:
        (WebCore::WebKitCSSRegionRule::WebKitCSSRegionRule):
        (WebCore::WebKitCSSRegionRule::reattach):
        (WebCore::WebKitCSSRegionRule::reportMemoryUsage):
        * css/WebKitCSSRegionRule.h:
        (WebKitCSSRegionRule):
        * css/WebKitCSSViewportRule.cpp:
        (WebCore::WebKitCSSViewportRule::WebKitCSSViewportRule):
        (WebCore::WebKitCSSViewportRule::reattach):
        (WebCore::WebKitCSSViewportRule::reportMemoryUsage):
        * css/WebKitCSSViewportRule.h:
        * inspector/InspectorCSSAgent.cpp:
        (WebCore::InspectorCSSAgent::asCSSStyleRule):
        (WebCore::InspectorCSSAgent::collectStyleSheets):
        * inspector/InspectorStyleSheet.cpp:
        (WebCore::asCSSRuleList):
        (WebCore::fillMediaListChain):
        * page/PageSerializer.cpp:
        (WebCore::PageSerializer::serializeCSSStyleSheet):

2012-11-21  Hajime Morrita  <morrita@google.com>

        [Shadow DOM] Implement Element::createShadowRoot()
        https://bugs.webkit.org/show_bug.cgi?id=102911

        Reviewed by Kentaro Hara.

        Added an API implementation and exposed it.

        This is basically an alias of the ShadowRoot constructor, which
        will be removed as bug 102913.

        Test: fast/dom/shadow/shadow-aware-create-shdow-root.html

        * dom/Element.cpp:
        (WebCore::Element::createShadowRoot):
        (WebCore):
        * dom/Element.h:
        (Element):
        * dom/Element.idl:

2012-11-20  James Simonsen  <simonjam@chromium.org>

        [Resource Timing] Populate PerformanceResourceTiming structs with timing data
        https://bugs.webkit.org/show_bug.cgi?id=102862

        Reviewed by Tony Gentilcore.

        This allows CachedResourceLoader to pass in all of the necessary values and populates
        them in the PerformanceResourceTiming struct. A follow up patch will actually call
        addResourceTiming() as necessary.

        Tests: http/tests/w3c/webperf/submission/resource-timing

        * page/Performance.cpp:
        (WebCore::Performance::addResourceTiming): Accept all necessary timing data.
        * page/Performance.h:
        (WebCore):
        (Performance):
        * page/PerformanceEntry.cpp:
        (WebCore::PerformanceEntry::PerformanceEntry):
        * page/PerformanceEntry.h:
        (PerformanceEntry):
        * page/PerformanceResourceTiming.cpp:
        (WebCore::monotonicTimeToDocumentMilliseconds):
        (WebCore):
        (WebCore::PerformanceResourceTiming::PerformanceResourceTiming):
        (WebCore::PerformanceResourceTiming::initiatorType): Return the spec'd values.
        (WebCore::PerformanceResourceTiming::fetchStart):
        (WebCore::PerformanceResourceTiming::domainLookupStart):
        (WebCore::PerformanceResourceTiming::domainLookupEnd):
        (WebCore::PerformanceResourceTiming::connectStart):
        (WebCore::PerformanceResourceTiming::connectEnd):
        (WebCore::PerformanceResourceTiming::secureConnectionStart):
        (WebCore::PerformanceResourceTiming::requestStart):
        (WebCore::PerformanceResourceTiming::responseStart):
        (WebCore::PerformanceResourceTiming::responseEnd):
        (WebCore::PerformanceResourceTiming::resourceTimeToDocumentMilliseconds):
        * page/PerformanceResourceTiming.h:
        (WebCore::PerformanceResourceTiming::create):
        (PerformanceResourceTiming):

2012-11-21  Hajime Morrita  <morrita@google.com>

        [Shadow DOM][V8] Assertion failure when shadow host is reclaimed before ShadowRoot
        https://bugs.webkit.org/show_bug.cgi?id=102893

        Reviewed by Kentaro Hara.

        Due to bug 88834, shadow hosts can be reclaimed before
        corresponding ShadowRoots are.  This breaks an invariant, that is,
        the host is always available for any ShadowRoot.  This change adds
        guards for the possibly broken invariant.

        Since bug 88834 is planned to be fixed shortly, this change
        doesn't aim to fix this problem by make it work correctly, but
        just lays a safety net which is needed until the root cause is
        gone.

        Test: fast/dom/shadow/host-wrapper-reclaimed.html

        * dom/ShadowRoot.cpp:
        (WebCore::ShadowRoot::setInnerHTML):
        (WebCore::ShadowRoot::setApplyAuthorStyles):
        (WebCore::ShadowRoot::setResetStyleInheritance):
        (WebCore::ShadowRoot::childrenChanged):

2012-11-21  Dirk Schulze  <krit@webkit.org>

        Make CachedSVGDocumentReference independent of FilterOperation
        https://bugs.webkit.org/show_bug.cgi?id=102967

        Reviewed by Antti Koivisto.

        Make CachedSVGDocumentReference independent of FilterOperation to reuse the code for clip-path and masking.

        No new tests, refactoring.

        * GNUmakefile.list.am: Move CachedSVGDocumentReference to it's proper location and it to the projects. 
        * WebCore.gypi:
        * WebCore.vcproj/WebCore.vcproj:
        * WebCore.xcodeproj/project.pbxproj:
        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::loadPendingSVGDocuments):
        (WebCore::StyleResolver::createFilterOperations):
        * loader/cache/CachedSVGDocumentReference.h: Renamed from Source/WebCore/css/CachedSVGDocumentReference.h.
        (WebCore):
        (CachedSVGDocumentReference):
        (WebCore::CachedSVGDocumentReference::CachedSVGDocumentReference):
        (WebCore::CachedSVGDocumentReference::~CachedSVGDocumentReference):
        (WebCore::CachedSVGDocumentReference::document):
        * platform/graphics/filters/FilterOperation.h: Rename data() and setData() to
            cachedSVGDocumentReference() and its setter. Adapt other classes.
        (WebCore::FilterOperation::ReferenceFilterOperation::cachedSVGDocumentReference):
        (WebCore::FilterOperation::ReferenceFilterOperation::setCachedSVGDocumentReference):
        (ReferenceFilterOperation):
        * rendering/FilterEffectRenderer.cpp:
        (WebCore::FilterEffectRenderer::buildReferenceFilter):
        * rendering/RenderLayerFilterInfo.cpp:
        (WebCore::RenderLayerFilterInfo::updateReferenceFilterClients):

2012-11-21  James Simonsen  <simonjam@chromium.org>

        Remove the concept of initiatorDocument from CachedResourceRequest
        https://bugs.webkit.org/show_bug.cgi?id=102855

        Reviewed by Sam Weinig.

        It turns out this isn't necessary for the new implementation of Resource Timing. Instead,
        we can get at it from the CachedResourceLoader. I don't think anyone else needed it either.

        No new tests. This was never used.

        * css/CSSFontFaceSrcValue.cpp:
        (WebCore::CSSFontFaceSrcValue::cachedFont):
        * css/CSSImageSetValue.cpp:
        (WebCore::CSSImageSetValue::cachedImageSet):
        * css/CSSImageValue.cpp:
        (WebCore::CSSImageValue::cachedImage):
        * css/StyleRuleImport.cpp:
        (WebCore::StyleRuleImport::requestStyleSheet):
        * css/WebKitCSSSVGDocumentValue.cpp:
        (WebCore::WebKitCSSSVGDocumentValue::load):
        * css/WebKitCSSShaderValue.cpp:
        (WebCore::WebKitCSSShaderValue::cachedShader):
        * html/parser/CSSPreloadScanner.cpp:
        (WebCore::CSSPreloadScanner::emitRule):
        * html/parser/HTMLPreloadScanner.cpp:
        (WebCore::PreloadTask::preload):
        * loader/cache/CachedResourceRequest.cpp:
        (WebCore::CachedResourceRequest::setInitiator):
        * loader/cache/CachedResourceRequest.h:
        (CachedResourceRequest):
        * loader/icon/IconLoader.cpp:
        (WebCore::IconLoader::startLoading):

2012-11-21  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r135437.
        http://trac.webkit.org/changeset/135437
        https://bugs.webkit.org/show_bug.cgi?id=102986

        This patch causes crash to some layout tests (Requested by
        jianli on #webkit).

        * dom/NodeRenderingContext.cpp:
        (WebCore::NodeRenderingContext::createRendererIfNeeded):
        * rendering/RenderObject.cpp:
        (WebCore::RenderObject::createObject):

2012-11-21  Andreas Kling  <akling@apple.com>

        Style sharing: Compare class lists via SpaceSplitString instead of string comparison.
        <http://webkit.org/b/102982>

        Reviewed by Antti Koivisto.

        Add an operator!= to SpaceSplitString and use that check if two elements are eligible
        for style sharing instead of comparing the fastGetAttribute(classAttr) return values.
        This works because SpaceSplitString maps equal strings to the same data internally.

        * css/StyleResolver.cpp:
        (WebCore::haveIdenticalStyleAffectingAttributes):
        * dom/SpaceSplitString.h:
        (WebCore::SpaceSplitString::operator!=):
        (SpaceSplitString):

2012-11-21  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r135338, r135359, and r135378.
        http://trac.webkit.org/changeset/135338
        http://trac.webkit.org/changeset/135359
        http://trac.webkit.org/changeset/135378
        https://bugs.webkit.org/show_bug.cgi?id=102981

        Likely caused a 10% regression in
        dromaeo_domcoreattr/dom_attr_getAttribute (Requested by abarth
        on #webkit).

        * bindings/scripts/CodeGeneratorV8.pm:
        (GenerateEventConstructorCallback):
        (ConvertToV8Parameter):
        * bindings/scripts/test/V8/V8TestActiveDOMObject.cpp:
        (WebCore::TestActiveDOMObjectV8Internal::postMessageCallback):
        * bindings/scripts/test/V8/V8TestCustomNamedGetter.cpp:
        (WebCore::TestCustomNamedGetterV8Internal::anotherFunctionCallback):
        * bindings/scripts/test/V8/V8TestEventConstructor.cpp:
        (WebCore::V8TestEventConstructor::constructorCallback):
        * bindings/scripts/test/V8/V8TestInterface.cpp:
        (WebCore::TestInterfaceV8Internal::supplementalStaticAttrAttrSetter):
        (WebCore::TestInterfaceV8Internal::supplementalStr2AttrSetter):
        (WebCore::TestInterfaceV8Internal::supplementalMethod2Callback):
        (WebCore::V8TestInterface::constructorCallback):
        * bindings/scripts/test/V8/V8TestNamedConstructor.cpp:
        (WebCore::V8TestNamedConstructorConstructorCallback):
        * bindings/scripts/test/V8/V8TestObj.cpp:
        (WebCore::TestObjV8Internal::staticStringAttrAttrSetter):
        (WebCore::TestObjV8Internal::stringAttrAttrSetter):
        (WebCore::TestObjV8Internal::reflectedStringAttrAttrSetter):
        (WebCore::TestObjV8Internal::reflectedURLAttrAttrSetter):
        (WebCore::TestObjV8Internal::reflectedCustomURLAttrAttrSetter):
        (WebCore::TestObjV8Internal::stringAttrWithGetterExceptionAttrSetter):
        (WebCore::TestObjV8Internal::stringAttrWithSetterExceptionAttrSetter):
        (WebCore::TestObjV8Internal::voidMethodWithArgsCallback):
        (WebCore::TestObjV8Internal::longMethodWithArgsCallback):
        (WebCore::TestObjV8Internal::objMethodWithArgsCallback):
        (WebCore::TestObjV8Internal::methodThatRequiresAllArgsAndThrowsCallback):
        (WebCore::TestObjV8Internal::methodWithOptionalStringCallback):
        (WebCore::TestObjV8Internal::methodWithOptionalStringIsUndefinedCallback):
        (WebCore::TestObjV8Internal::methodWithOptionalStringIsNullStringCallback):
        (WebCore::TestObjV8Internal::overloadedMethod1Callback):
        (WebCore::TestObjV8Internal::overloadedMethod3Callback):
        (WebCore::TestObjV8Internal::overloadedMethod11Callback):
        (WebCore::TestObjV8Internal::overloadedMethod12Callback):
        (WebCore::TestObjV8Internal::strictFunctionCallback):
        (WebCore::TestObjV8Internal::variadicStringMethodCallback):
        * bindings/scripts/test/V8/V8TestOverloadedConstructors.cpp:
        (WebCore::V8TestOverloadedConstructors::constructor4Callback):
        * bindings/scripts/test/V8/V8TestSerializedScriptValueInterface.cpp:
        (WebCore::V8TestSerializedScriptValueInterface::constructorCallback):
        * bindings/v8/V8BindingMacros.h:
        * bindings/v8/V8StringResource.h:
        (WebCore::V8Parameter::V8Parameter):
        (V8Parameter):
        (WebCore::V8Parameter::prepareBase):
        (WebCore::V8Parameter::object):
        (WebCore::::prepare):
        * bindings/v8/custom/V8ConsoleCustom.cpp:
        (WebCore::V8Console::profileCallback):
        (WebCore::V8Console::profileEndCallback):
        * bindings/v8/custom/V8DOMWindowCustom.cpp:
        (WebCore::handlePostMessageCallback):
        * bindings/v8/custom/V8DeviceMotionEventCustom.cpp:
        (WebCore::V8DeviceMotionEvent::initDeviceMotionEventCallback):
        * bindings/v8/custom/V8DeviceOrientationEventCustom.cpp:
        (WebCore::V8DeviceOrientationEvent::initDeviceOrientationEventCallback):
        * bindings/v8/custom/V8HistoryCustom.cpp:
        (WebCore::V8History::pushStateCallback):
        (WebCore::V8History::replaceStateCallback):
        * bindings/v8/custom/V8IntentCustom.cpp:
        (WebCore::V8Intent::constructorCallbackCustom):
        * bindings/v8/custom/V8SQLTransactionCustom.cpp:
        (WebCore::V8SQLTransaction::executeSqlCallback):
        * bindings/v8/custom/V8SQLTransactionSyncCustom.cpp:
        (WebCore::V8SQLTransactionSync::executeSqlCallback):
        * bindings/v8/custom/V8WebGLRenderingContextCustom.cpp:
        (WebCore::V8WebGLRenderingContext::getExtensionCallback):

2012-11-21  Tien-Ren Chen  <trchen@chromium.org>

        Invalidate non-composited content host when page scale factor changes
        https://bugs.webkit.org/show_bug.cgi?id=100718

        Reviewed by Adam Barth.

        During a scale change, non-composited content layer doesn't get invalidated
        automatically by the transformation change on RenderView. Need to force
        update non-composited contents ourself.

        Test: compositing/repaint/page-scale-repaint.html

        * page/Page.cpp:
        (WebCore::Page::setPageScaleFactor):

2012-11-21  Ryosuke Niwa  <rniwa@webkit.org>

        Yet another EFL & GTK+ build fix after r135429.

        * html/HTMLPropertiesCollection.cpp:
        (WebCore::HTMLPropertiesCollection::create):

2012-11-21  Elliott Sprehn  <esprehn@chromium.org>

        Node::createRenderer should never return null
        https://bugs.webkit.org/show_bug.cgi?id=102975

        Reviewed by Ojan Vafai.

        Node::createRenderer should never return null, instead Node::rendererIsNeeded
        should return false if a node doesn't wish to have a renderer. This method
        never actually returns null right now, but the code makes it look like it
        could.

        No new tests, just refactoring.

        * dom/NodeRenderingContext.cpp:
        (WebCore::NodeRenderingContext::createRendererIfNeeded):
        * rendering/RenderObject.cpp:
        (WebCore::RenderObject::createObject):

2012-11-21  Fady Samuel  <fsamuel@chromium.org>

        Clear MousePressed state on context menu to avoid initiating a drag
        https://bugs.webkit.org/show_bug.cgi?id=101786

        Reviewed by Ojan Vafai.

        If a user initiates a drag via left mouse down, brings up the context menu,
        and then cancels the context menu while keeping the left mouse button down,
        then the drag operation will continue. This does not match the platform
        conventions on Windows, Linux or Mac .

        This change cancels the drag if the context menu is about to be displayed.

        Test: fast/events/context-nodrag.html

        * page/EventHandler.cpp:
        (WebCore::EventHandler::sendContextMenuEvent):

2012-11-21  Patrick Gansterer  <paroga@webkit.org>

        Use MIMETypeRegistryWin for WinCE port too
        https://bugs.webkit.org/show_bug.cgi?id=102977

        Reviewed by Laszlo Gombos.

        r135217 made MIMETypeRegistryWin compile on WinCE too,
        which allows us to get rid of MIMETypeRegistryWinCE.

        * PlatformWinCE.cmake:
        * WebCore.gypi:
        * platform/wince/MIMETypeRegistryWinCE.cpp: Removed.

2012-11-21  Dan Carney  <dcarney@google.com>

        [V8] Add context checks to WorldContextHandle and V8DOMWindowShell
        https://bugs.webkit.org/show_bug.cgi?id=101573

        Reviewed by Adam Barth.

        Added a bunch of assertions to ensure the problems with IndexedDB
        contexts cannot reemerge.

        No new tests. No change in functionality.

        * bindings/v8/V8DOMWindowShell.cpp:
        (WebCore):
        (WebCore::V8DOMWindowShell::assertContextHasCorrectPrototype):
        * bindings/v8/V8DOMWindowShell.h:
        (V8DOMWindowShell):
        (WebCore::V8DOMWindowShell::isolated):
        * bindings/v8/WorldContextHandle.cpp:
        (WebCore::WorldContextHandle::WorldContextHandle):

2012-11-21  Elliott Sprehn  <esprehn@chromium.org>

        Remove unnecessary ternaries in createRendererIfNeeded
        https://bugs.webkit.org/show_bug.cgi?id=102974

        Reviewed by Ojan Vafai.

        parentRenderer, nextRenderer and previousRenderer all handle flow
        threads automatically so there's no reason to duplicate the check in 
        createRendererIfNeeded.

        Note that while these methods first check the node for a renderer and
        then delegate to the flow thread the node never has a renderer when
        calling createRendererIfNeeded per the assertion at the top so this
        change is equivalent.

        No new tests, just refactoring.

        * dom/NodeRenderingContext.cpp:
        (WebCore::NodeRenderingContext::createRendererIfNeeded):

2012-11-21  Ryosuke Niwa  <rniwa@webkit.org>

        EFL and GTK+ build fix after r135429.

        * dom/Element.cpp:
        (WebCore::ElementRareData::ensureCachedHTMLCollection):

2012-11-20  Ryosuke Niwa  <rniwa@webkit.org>

        HTMLCollection should use the same storage as DynamicNodeList
        https://bugs.webkit.org/show_bug.cgi?id=102886

        Reviewed by Antti Koivisto.

        This patch removes ElementRareData::m_collection. HTMLCollections are now held by
        NodeListNodeData in NodeRareData like DynamicNodeLists. This simplifies several
        Element and Node functions where we used to call into both ElementRareData and
        NodeRareData to invalidate caches.

        This is a refactoring and there should be no behavioral change.

        * dom/DynamicNodeList.h:
        * dom/Element.cpp:
        (WebCore::ElementRareData::ensureCachedHTMLCollection):
        * dom/ElementRareData.cpp:
        (WebCore::ElementRareData::reportMemoryUsage):
        * dom/ElementRareData.h:
        (ElementRareData):
        (WebCore::ElementRareData::cachedHTMLCollection):
        (WebCore::ElementRareData::removeCachedHTMLCollection):
        * dom/Node.cpp:
        (WebCore::Node::invalidateNodeListCachesInAncestors):
        * dom/NodeRareData.h:
        (NodeListsNodeData):
        (WebCore::NodeListsNodeData::addCacheWithAtomicName):
        (WebCore::NodeListsNodeData::cacheWithAtomicName):
        (WebCore::NodeListsNodeData::removeCacheWithAtomicName):
        (WebCore::NodeListsNodeData::adoptTreeScope):
        (WebCore::NodeListsNodeData::namedNodeListKey):
        * dom/TreeScopeAdopter.cpp:
        (WebCore::TreeScopeAdopter::moveTreeToNewScope):
        * html/HTMLFormControlsCollection.cpp:
        (WebCore::HTMLFormControlsCollection::create):
        * html/HTMLFormControlsCollection.h:
        (HTMLFormControlsCollection):
        * html/HTMLOptionsCollection.cpp:
        (WebCore::HTMLOptionsCollection::create):
        * html/HTMLOptionsCollection.h:
        (HTMLOptionsCollection::create):
        * html/HTMLPropertiesCollection.h:
        (HTMLPropertiesCollection::create):
        * html/HTMLTableRowsCollection.cpp:
        (WebCore::HTMLTableRowsCollection::create):
        * html/HTMLTableRowsCollection.h:
        (HTMLTableRowsCollection):

2012-11-21  Andreas Kling  <akling@apple.com>

        Update incorrect assertion in ImmutableElementAttributeData(MutableElementAttributeData).
        <http://webkit.org/b/102972>

        Reviewed by Antti Koivisto.

        Manipulation by editing code may cause an element to have mutable inline style, and this is fine.

        Change the assertion to confirm that the inline style doesn't have a CSSOM wrapper attached,
        which is where real problems would happen. 

        Fixes an assertion on editing/undo/replace-by-span-then-remove.html

        * dom/ElementAttributeData.cpp:
        (WebCore::ImmutableElementAttributeData::ImmutableElementAttributeData):

2012-11-21  Kentaro Hara  <haraken@chromium.org>

        Remove $outputDir and $outputHeadersDir from global variables of code generators
        https://bugs.webkit.org/show_bug.cgi?id=102492

        Reviewed by Adam Barth.

        $outputDir and $outputHeadersDir are used in WriteData() only.
        We don't need to use global variables for them.

        No tests. No change in behavior.

        * bindings/scripts/CodeGenerator.pm:
        (ProcessDocument):
        (FileNamePrefix):
        * bindings/scripts/CodeGeneratorCPP.pm:
        (new):
        (GenerateInterface):
        (WriteData):
        * bindings/scripts/CodeGeneratorGObject.pm:
        (new):
        (WriteData):
        (GenerateInterface):
        * bindings/scripts/CodeGeneratorJS.pm:
        (new):
        (GenerateInterface):
        (WriteData):
        * bindings/scripts/CodeGeneratorObjC.pm:
        (new):
        (GenerateInterface):
        (WriteData):
        * bindings/scripts/CodeGeneratorV8.pm:
        (new):
        (GenerateInterface):
        (WriteData):

2012-11-21  Joshua Bell  <jsbell@chromium.org>

        Remove IDBDatabaseException
        https://bugs.webkit.org/show_bug.cgi?id=102514

        Reviewed by Adam Barth.

        After the WebKit implementation landed, the IndexedDB spec changed from defining new
        exception codes with constants hanging off an interface to using DOM4-styled named
        DOMExceptions. Remove the IDBDatabaseException interface and set codes for IDB-specific
        exceptions to 0. (The .idl file is retained pending general ExceptionCode cleanup.)

        Also remove IDBRequest.errorCode which was used for reporting asynchronous errors;
        IDBRequest.error - a DOMError - should be used instead.

        No new tests - covered by plenty of existing tests which have been updated.

        * Modules/indexeddb/DOMWindowIndexedDatabase.idl: Don't expose the interface.
        * Modules/indexeddb/IDBCursor.idl: Remove reference to IDBDatabaseException.
        * Modules/indexeddb/IDBDatabase.idl: Ditto.
        * Modules/indexeddb/IDBDatabaseException.cpp:
        (IDBDatabaseExceptionNameDescription): Use either a DOMException code or 0.
        (WebCore::IDBDatabaseException::initializeDescription):
        (WebCore::IDBDatabaseException::getLegacyErrorCode):
        * Modules/indexeddb/IDBFactory.idl: Remove reference to IDBDatabaseException.
        * Modules/indexeddb/IDBIndex.idl: Ditto.
        * Modules/indexeddb/IDBKeyRange.idl: Ditto.
        * Modules/indexeddb/IDBObjectStore.idl: Ditto.
        * Modules/indexeddb/IDBRequest.idl: Ditto.
        * Modules/indexeddb/IDBTransaction.idl: Ditto.
        * Modules/indexeddb/WorkerContextIndexedDatabase.idl: Don't expose the interface.
        * bindings/v8/IDBBindingUtilities.cpp: Remove unneeded #include.

2012-11-21  W. James MacLean  <wjmaclean@chromium.org>

        [chromium] Fix indenting in RenderThemeChromiumSkia.h.
        https://bugs.webkit.org/show_bug.cgi?id=102965

        Reviewed by Adam Barth.

        Much of RenderThemeChromiumSkia.h was indented too far, making the
        file confusing to read. This CL removes the extra indents.

        * rendering/RenderThemeChromiumSkia.h:
        (RenderThemeChromiumSkia):

2012-11-21  Andreas Kling  <akling@apple.com>

        Make it possible for elements with different tag names to share attribute data.
        <http://webkit.org/b/102845>

        Reviewed by Antti Koivisto.

        Allow all elements to share ElementAttributeData with one another. This means that the elements
        in this hypothetical markup will all point to the same attribute data:

            <div class="foo">
                <span class="foo">
                    <hr class="foo"/>
                </span>
            </div>

        This optimization happens at the expense of an old one. We no longer share attribute data
        between elements that have presentation attributes, since they map to different CSS properties
        depending on what tag they're attached to. These are mostly used in ye olde web 1.0 content
        though, and we should prefer optimizing in favor of modern markup. The global cache for
        presentation attribute style in StyledElement.cpp still prevents redundant parsing.

        On the upside, excluding elements with presentation attributes from the data cache means that
        we can move one pointer (m_presentationAttributeStyle) from ImmutableElementAttributeData
        to MutableElementAttributeData.

        800kB progression on Membuster3.

        * dom/Document.h:
        * dom/Document.cpp:
        (WebCore::ImmutableAttributeDataCacheKey::ImmutableAttributeDataCacheKey):
        (WebCore::ImmutableAttributeDataCacheKey::operator!=):
        (WebCore::ImmutableAttributeDataCacheKey::hash):
        (ImmutableAttributeDataCacheKey):
        (WebCore::Document::cachedImmutableAttributeData):
        * dom/Element.cpp:
        (WebCore::Element::parserSetAttributes):

            Don't use the element's tag name in the key for the immutable attribute data cache.

        (WebCore::Element::cloneAttributesFromElement):

            Prevent cloneNode() from converting mutable attribute data to immutable if it has
            presentation attributes.

        * dom/ElementAttributeData.cpp:
        (WebCore::ImmutableElementAttributeData::ImmutableElementAttributeData):

            Add an assertion that mutable-to-immutable conversion never happens with presentation
            attribute style present.

        (WebCore::ElementAttributeData::ElementAttributeData):
        (WebCore::MutableElementAttributeData::MutableElementAttributeData):
        (WebCore::ElementAttributeData::reportMemoryUsage):
        * dom/ElementAttributeData.h:
        (ElementAttributeData):
        (MutableElementAttributeData):
        (WebCore::ElementAttributeData::presentationAttributeStyle):
        (WebCore):
        (WebCore::ElementAttributeData::setPresentationAttributeStyle):

            Move the RefPtr<StylePropertySet> that holds presentation attribute-derived style
            from the common ElementAttributeData base class to MutableElementAttributeData.

        * dom/StyledElement.cpp:
        (WebCore::StyledElement::attributeChanged):

            Always dirty the presentation attribute style when a presentation attribute changes.

        (WebCore::StyledElement::rebuildPresentationAttributeStyle):

            Force promotion to mutable attribute data when it turns out that we need to hang a
            StylePropertySet with the presentation attribute style off of it.

2012-11-21  Antti Koivisto  <antti@apple.com>

        Replace NodeRendererFactory class with a function
        https://bugs.webkit.org/show_bug.cgi?id=102950

        Reviewed by Andreas Kling.

        Simplify the code by turning NodeRendererFactory single-use class into function of NodeRenderingContext.

        * dom/Node.cpp:
        (WebCore::Node::createRendererIfNeeded):
        * dom/NodeRenderingContext.cpp:
        (WebCore::NodeRenderingContext::NodeRenderingContext):
        (WebCore):
        (WebCore::NodeRenderingContext::moveToFlowThreadIfNeeded):
        (WebCore::NodeRenderingContext::createRendererIfNeeded):
        * dom/NodeRenderingContext.h:
        (NodeRenderingContext):
        (WebCore::NodeRenderingContext::style):
        (WebCore):

2012-11-21  W. James MacLean  <wjmaclean@chromium.org>

        [chromium] Change default tap highlight color for Chromium Windows & Linux.
        https://bugs.webkit.org/show_bug.cgi?id=102939

        Reviewed by Adam Barth.

        Change default tap highlight colour on Chromium Win/Linux to be 18% black.

        * rendering/RenderThemeChromiumSkia.h:
        (RenderThemeChromiumSkia): Override platformTapHighlightColor() to change default highlight colour.

2012-11-21  Tony Chang  <tony@chromium.org>

        Relayout the slider track when a data list is set
        https://bugs.webkit.org/show_bug.cgi?id=102851

        Reviewed by Ojan Vafai.

        Previously, we would relayout the <input>.  Once we fix bug 102352, this
        causes the slider track to not relayout.  It should relayout because it
        draws the data list tick marks and needs to provide space for them.

        No new tests, not testable until bug 102352 is fixed. Specifically,
        fast/forms/datalist/update-range-with-datalist.html reveals the bug.

        * html/RangeInputType.cpp:
        (WebCore::RangeInputType::listAttributeTargetChanged):

2012-11-21  Kevin Ellis  <kevers@chromium.org>

        [chromium] Add flag to enable/disable touch adjustment at runtime.
        https://bugs.webkit.org/show_bug.cgi?id=102534

        Reviewed by Antonio Gomes.

        Add setting for enabling or disabling touch adjustment.  Note that for
        touch adjustment to apply, the compile flag must also be enabled.  A
        compile only option is insufficient as it does not allow developers to
        quickly test the impact of touch adjustemnt without recompiling.  Nor
        does it allow end users to disable touch adjustemnt if they find that
        touch adjustment is not working well for a particular site.

        No new tests required.

        * page/EventHandler.cpp:
        (WebCore::EventHandler::handleGestureEvent): Move enable check to adjustGesturePosition.
        (WebCore::EventHandler::handleGestureTap): Move enable check to adjustGesturePosition.
        (WebCore::EventHandler::shouldApplyTouchAdjustment): Checks if touch adjustment is enabled.
        (WebCore):
        (WebCore::EventHandler::adjustGesturePosition): Add check for enabling of touch adjustment.
        (WebCore::EventHandler::sendContextMenuEventForGesture): Move enable check to adjustGesturePosition.
        * page/EventHandler.h:
        (EventHandler):
        * page/Settings.in:

2012-11-21  Philippe Normand  <pnormand@igalia.com>

        Unreviewed, build fix after r135410.

        * html/track/InbandTextTrack.cpp:
        (WebCore::InbandTextTrack::addCue): Prevent unused parameter error.

2012-11-21  Andrey Lushnikov  <lushnikov@chromium.com>

        Web Inspector: Ctrl+A closes breakpoint condition editor
        https://bugs.webkit.org/show_bug.cgi?id=102906

        Reviewed by Pavel Feldman.

        Check if e.target has no ancestors with className
        "webkit-line-decorations" in DefaultTextEditor._handleKeyDown

        * inspector/front-end/DefaultTextEditor.js:
        (WebInspector.DefaultTextEditor.prototype._handleKeyDown): Add check

2012-11-21  Tom Hudson  <tomhudson@chromium.org>

        Avoid creating degenerate cubics at corners of rounded rects.
        https://bugs.webkit.org/show_bug.cgi?id=102945

        Reviewed by Stephen White.

        Covered by existing layout tests.

        * platform/graphics/Path.cpp:
        (Path::addBeziersForRoundedRect):

2012-11-21  Eric Carlson  <eric.carlson@apple.com>

        In-band text tracks infrastructure
        https://bugs.webkit.org/show_bug.cgi?id=102830

        Reviewed by Philippe Normand.

        Add the infrastructure necessary to allow a port-specific media engine to expose in-band text
        tracks.

        No new tests, this patch only adds plumbing. Existing tests verify that these changes don't
        break existing functionality.

        * CMakeLists.txt: Add new project files.
        * GNUmakefile.list.am: Ditto.
        * Target.pri: Ditto.
        * WebCore.gypi: Ditto.
        * WebCore.xcodeproj/project.pbxproj: Ditto.

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::setReadyState): Call processInbandTextTracks when readyState reaches
            HAVE_METADATA
        (WebCore::HTMLMediaElement::processInbandTextTracks): Fetch the in-band text tracks from the 
            media player and processes them.
        * html/HTMLMediaElement.h:

        * html/track/InbandTextTrack.cpp: Added.
        * html/track/InbandTextTrack.h: Added.
        * html/track/InbandTextTrackPrivate.h: Added.

        * html/track/TextTrack.h:
        (TextTrack):
        (WebCore::TextTrack::clearClient): Remove virtual, it is unnecessary
        (WebCore::TextTrack::mode): Make virtual so derived classes can override.
        (WebCore::TextTrack::setMode): Ditto.

        * html/track/TextTrackList.cpp:
        (TextTrackList::length): Update to deal with in-band tracks.
        (TextTrackList::getTrackIndex): Ditto.
        (TextTrackList::getTrackIndexRelativeToRenderedTracks): Ditto.
        (TextTrackList::item): Ditto.
        (TextTrackList::invalidateTrackIndexesAfterTrack): New, invalidate the cached track indexes of
            all tracks after another.
        (TextTrackList::append): Update to deal with in-band tracks.
        (TextTrackList::remove): Update to deal with in-band tracks.
        (TextTrackList::scheduleAddTrackEvent): Remove typo.
        * html/track/TextTrackList.h:

        * platform/graphics/MediaPlayer.cpp:
        (WebCore::MediaPlayer::getTextTracks): New, pass through to the media engine.
        (WebCore::MediaPlayer::setTextTrackClient):
        * platform/graphics/MediaPlayer.h:

        * platform/graphics/MediaPlayerPrivate.h:
        (WebCore::MediaPlayerPrivateInterface::setPreload): Cleanup.
        (WebCore::MediaPlayerPrivateInterface::sourceEndOfStream): Ditto.
        (WebCore::MediaPlayerPrivateInterface::getTextTracks): New client method.
        (WebCore::MediaPlayerPrivateInterface::setTextTrackClient): Ditto.

2012-11-21  Kai Koehne  <kai.koehne@digia.com>

        [Qt] MinGW: Explicitly add OpenGL library dependencies
        https://bugs.webkit.org/show_bug.cgi?id=102924

        Reviewed by Simon Hausmann.

        Adding the dependencies to WebKit1 is too late, because linking will have already failed. Also make sure that 
        the we link against OpenGLES1 e.g. for Angle.

        * WebCore.pri:

2012-11-21  Allan Sandfeld Jensen  <allan.jensen@digia.com>

        Disambiguate innerNodeFramePoint and mainFramePoint
        https://bugs.webkit.org/show_bug.cgi?id=98139

        Reviewed by Julien Chaffraix.

        Splits the point() method in HitTestResult into two, innerNodeFramePoint and mainFramePoint().
        To do this HitTestResult no longer inherits publically from HitTestLocation, which should also
        help to later separate the two classes completely.

        Many of the call-sites of hitTestResultAtPoint confuses which coordinates the point is in.
        These have not have been fixed in this patch, and they should be audited by the individual ports.

        * WebCore.exp.in:
        * dom/Document.cpp:
        (WebCore::Document::nodesFromRect):
        * page/EventHandler.cpp:
        (WebCore::EventHandler::eventMayStartDrag):
        (WebCore::EventHandler::hitTestResultAtPoint):
            Set and maintain pointInMainFrame on the HitTestResult.
        * rendering/HitTestResult.cpp:
        (WebCore::HitTestResult::HitTestResult):
            Construct pointInMainFrame as a copy of pointInInnerNodeFrame. This is correct
            for all hit-tests outside of the recursion in EventHandler::hitTestResultAtPoint.
        (WebCore::HitTestResult::operator=):
        (WebCore::HitTestResult::innerNodeFrame):
        (WebCore::HitTestResult::append):
        * rendering/HitTestResult.h:
        (WebCore::HitTestLocation::point):
        (HitTestResult):
            Inherits protected now from HitTestLocation to avoid exposing the ambiguous
            point() and roundedPoint() methods. 
            HitTestResult will be split completely from HitTestLocation in a later patch.
        (WebCore::HitTestResult::isRectBasedTest):
        (WebCore::HitTestResult::pointInMainFrame):
        (WebCore::HitTestResult::roundedPointInMainFrame):
        (WebCore::HitTestResult::setPointInMainFrame):
        (WebCore::HitTestResult::pointInInnerNodeFrame):
        (WebCore::HitTestResult::roundedPointInInnerNodeFrame):
        (WebCore::HitTestResult::localPoint):
        (WebCore::HitTestResult::setLocalPoint):
        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::hitTest):

2012-11-21  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r135383.
        http://trac.webkit.org/changeset/135383
        https://bugs.webkit.org/show_bug.cgi?id=102935

        IDBRequestTest.* unit tests are failing (Requested by yurys on
        #webkit).

        * bindings/v8/V8DOMWindowShell.cpp:
        (WebCore::V8DOMWindowShell::installDOMWindow):
        * bindings/v8/V8DOMWindowShell.h:
        (V8DOMWindowShell):
        (WebCore::V8DOMWindowShell::isolated):
        * bindings/v8/WorldContextHandle.cpp:
        (WebCore::WorldContextHandle::WorldContextHandle):

2012-11-21  Gyuyoung Kim  <gyuyoung.kim@samsung.com>

        [EFL][WK2] Support Context Menu
        https://bugs.webkit.org/show_bug.cgi?id=96200

        Reviewed by Laszlo Gombos.

        * page/ContextMenuController.cpp:
        (WebCore::ContextMenuController::populate):
        EFL port also doesn't hide unavailable menus as gtk port.

2012-11-21  Florin Malita  <fmalita@chromium.org>

        [Chromium] Unreviewed Mac build fix after http://trac.webkit.org/changeset/135390.

        * platform/graphics/skia/GraphicsContextSkia.cpp:
        (WebCore::drawInnerPath):

2012-11-21  Florin Malita  <fmalita@chromium.org>

        [Skia] Encapsulate access to PlatformContextSkia's SkCanvas
        https://bugs.webkit.org/show_bug.cgi?id=102694

        Reviewed by Stephen White.

        Add SkCanvas-equivalent methods to PlatformContextSkia, and refactor direct canvas call
        sites to use these wrappers instead. This reduces the number of canvas() users from 90+
        to 22 (mostly theme/ui code).

        No new tests: refactoring only.

        * platform/chromium/PlatformThemeChromiumLinux.cpp:
        (WebCore::PlatformThemeChromiumLinux::paintArrowButton):
        * platform/graphics/chromium/FontChromiumWin.cpp:
        * platform/graphics/chromium/TransparencyWin.cpp:
        (WebCore::TransparencyWin::computeLayerSize):
        (WebCore::TransparencyWin::compositeOpaqueComposite):
        (WebCore::TransparencyWin::compositeTextComposite):
        (WebCore::TransparencyWin::makeLayerOpaque):
        * platform/graphics/filters/skia/FEBlendSkia.cpp:
        (WebCore::FEBlend::platformApplySkia):
        * platform/graphics/filters/skia/FEColorMatrixSkia.cpp:
        (WebCore::FEColorMatrix::platformApplySkia):
        * platform/graphics/filters/skia/FEComponentTransferSkia.cpp:
        (WebCore::FEComponentTransfer::platformApplySkia):
        * platform/graphics/filters/skia/FELightingSkia.cpp:
        (WebCore::FELighting::platformApplySkia):
        * platform/graphics/harfbuzz/FontHarfBuzz.cpp:
        (WebCore::Font::drawGlyphs):
        (WebCore::Font::drawComplexText):
        * platform/graphics/skia/FontSkia.cpp:
        (WebCore::Font::drawGlyphs):
        * platform/graphics/skia/GraphicsContextSkia.cpp:
        (WebCore::GraphicsContext::addInnerRoundedRectClip):
        (WebCore::GraphicsContext::clearRect):
        (WebCore::GraphicsContext::clip):
        (WebCore::GraphicsContext::clipOut):
        (WebCore::GraphicsContext::clipPath):
        (WebCore::GraphicsContext::concatCTM):
        (WebCore::GraphicsContext::setCTM):
        (WebCore::GraphicsContext::drawConvexPolygon):
        (WebCore::GraphicsContext::clipConvexPolygon):
        (WebCore::GraphicsContext::drawEllipse):
        (WebCore::drawOuterPath):
        (WebCore::GraphicsContext::drawLine):
        (WebCore::GraphicsContext::drawLineForDocumentMarker):
        (WebCore::GraphicsContext::drawLineForText):
        (WebCore::GraphicsContext::fillPath):
        (WebCore::GraphicsContext::fillRect):
        (WebCore::GraphicsContext::fillRoundedRect):
        (WebCore::GraphicsContext::getCTM):
        (WebCore::GraphicsContext::scale):
        (WebCore::GraphicsContext::strokeArc):
        (WebCore::GraphicsContext::strokePath):
        (WebCore::GraphicsContext::strokeRect):
        (WebCore::GraphicsContext::rotate):
        (WebCore::GraphicsContext::translate):
        (WebCore::GraphicsContext::platformFillEllipse):
        (WebCore::GraphicsContext::platformStrokeEllipse):
        * platform/graphics/skia/ImageBufferSkia.cpp:
        (WebCore::getImageData):
        (WebCore::ImageBuffer::getUnmultipliedImageData):
        (WebCore::ImageBuffer::getPremultipliedImageData):
        (WebCore::ImageBuffer::putByteArray):
        (WebCore::ImageBuffer::toDataURL):
        * platform/graphics/skia/ImageSkia.cpp:
        (WebCore::drawResampledBitmap):
        (WebCore::hasNon90rotation):
        (WebCore::paintSkBitmap):
        (WebCore::Image::drawPattern):
        * platform/graphics/skia/PlatformContextSkia.cpp:
        (WebCore::PlatformContextSkia::save):
        (WebCore::PlatformContextSkia::beginLayerClippedToImage):
        (WebCore::PlatformContextSkia::restore):
        (WebCore::PlatformContextSkia::drawRect):
        (WebCore::PlatformContextSkia::couldUseLCDRenderedText):
        * platform/graphics/skia/PlatformContextSkia.h:
        (PlatformContextSkia):
        (WebCore::PlatformContextSkia::layerBitmap):
        (WebCore):
        (WebCore::PlatformContextSkia::readPixels):
        (WebCore::PlatformContextSkia::writePixels):
        (WebCore::PlatformContextSkia::isDrawingToLayer):
        (WebCore::PlatformContextSkia::isVector):
        (WebCore::PlatformContextSkia::clipPath):
        (WebCore::PlatformContextSkia::clipRect):
        (WebCore::PlatformContextSkia::getClipBounds):
        (WebCore::PlatformContextSkia::setMatrix):
        (WebCore::PlatformContextSkia::getTotalMatrix):
        (WebCore::PlatformContextSkia::concat):
        (WebCore::PlatformContextSkia::rotate):
        (WebCore::PlatformContextSkia::scale):
        (WebCore::PlatformContextSkia::translate):
        (WebCore::PlatformContextSkia::drawBitmap):
        (WebCore::PlatformContextSkia::drawBitmapRect):
        (WebCore::PlatformContextSkia::drawOval):
        (WebCore::PlatformContextSkia::drawPath):
        (WebCore::PlatformContextSkia::drawPoints):
        (WebCore::PlatformContextSkia::drawRect):
        (WebCore::PlatformContextSkia::drawIRect):
        (WebCore::PlatformContextSkia::drawPosText):
        (WebCore::PlatformContextSkia::drawPosTextH):
        (WebCore::PlatformContextSkia::drawTextOnPath):
        * platform/graphics/skia/SkiaFontWin.cpp:
        (WebCore::skiaDrawText):
        (WebCore::paintSkiaText):
        * platform/graphics/skia/SkiaUtils.cpp:
        (WebCore::ClipRectToCanvas):
        * platform/graphics/skia/SkiaUtils.h:
        (WebCore):

2012-11-21  Carlos Garcia Campos  <cgarcia@igalia.com>

        Reset the slider thumb location before every layout of the slider container
        https://bugs.webkit.org/show_bug.cgi?id=102817

        Reviewed by Tony Chang.

        The location of the slider thumb is set by the slider container
        assuming the slider thumb has been laid out. When this happens,
        the location of the slider thumb is reset during the layout
        ignoring any previous location set. If the slider thumb is not
        laid out, the previous value is added to the new one by the slider
        container.

        * html/shadow/SliderThumbElement.cpp:
        (WebCore::RenderSliderContainer::layout): Reset the location of
        the slider thumb before calling RenderFlexibleBox::layout().

2012-11-21  Kentaro Hara  <haraken@chromium.org>

        Unreviewed, rolling out r135340.
        http://trac.webkit.org/changeset/135340
        https://bugs.webkit.org/show_bug.cgi?id=102492

        It broke Safari's internal build

        * bindings/scripts/CodeGenerator.pm:
        (ProcessDocument):
        (FileNamePrefix):
        * bindings/scripts/CodeGeneratorCPP.pm:
        (new):
        (GenerateInterface):
        (WriteData):
        * bindings/scripts/CodeGeneratorGObject.pm:
        (new):
        (WriteData):
        (GenerateInterface):
        * bindings/scripts/CodeGeneratorJS.pm:
        (new):
        (GenerateInterface):
        (WriteData):
        * bindings/scripts/CodeGeneratorObjC.pm:
        (new):
        (GenerateInterface):
        (WriteData):
        * bindings/scripts/CodeGeneratorV8.pm:
        (new):
        (GenerateInterface):
        (WriteData):

2012-11-21  Pavel Feldman  <pfeldman@chromium.org>

        Web Inspector: reparenting view does not detach from the previous parent.
        https://bugs.webkit.org/show_bug.cgi?id=102902

        Reviewed by Vsevolod Vlasov.

        * inspector/front-end/View.js:
        (WebInspector.View.prototype.show):

2012-11-21  Ilya Tikhonovsky  <loislo@chromium.org>

        Web Inspector: NMI add instrumentation to widely used ActiveDOMObjects. XMLHttpRequest, Prerenderer, HTMLMediaElement and DOMTimer.
        https://bugs.webkit.org/show_bug.cgi?id=102818

        Reviewed by Vsevolod Vlasov.

        Our test bot counts pointers which don't match with objects allocated by tcmalloc.
        This counter becomes nonzero after instrumenting ActiveDOMObject class.
        It happens because it is the base class for many other classes (~30).
        And almost all these classes use multiple inheritance.

        * dom/Document.cpp:
        (WebCore::Document::reportMemoryUsage):
        * dom/DocumentEventQueue.cpp:
        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::reportMemoryUsage):
        (WebCore):
        * html/HTMLMediaElement.h:
        * loader/Prerenderer.cpp:
        (WebCore::Prerenderer::reportMemoryUsage):
        (WebCore):
        * loader/Prerenderer.h:
        (Prerenderer):
        * page/DOMTimer.cpp:
        (WebCore::DOMTimer::reportMemoryUsage):
        (WebCore):
        * page/DOMTimer.h:
        (DOMTimer):
        * xml/XMLHttpRequest.cpp:
        (WebCore::XMLHttpRequest::reportMemoryUsage):
        (WebCore):
        * xml/XMLHttpRequest.h:
        (XMLHttpRequest):

2012-11-21  Dan Carney  <dcarney@google.com>

        [V8] Add context checks to WorldContextHandle and V8DOMWindowShell
        https://bugs.webkit.org/show_bug.cgi?id=101573

        Reviewed by Adam Barth.

        Added a bunch of assertions to ensure the problems with IndexedDB
        contexts cannot reemerge.

        No new tests. No change in functionality.

        * bindings/v8/V8DOMWindowShell.cpp:
        (WebCore):
        (WebCore::V8DOMWindowShell::assertContextHasCorrectPrototype):
        * bindings/v8/V8DOMWindowShell.h:
        (V8DOMWindowShell):
        (WebCore::V8DOMWindowShell::isolated):
        * bindings/v8/WorldContextHandle.cpp:
        (WebCore::WorldContextHandle::WorldContextHandle):

2012-11-21  Harald Alvestrand  <hta@google.com>

        WebMediaStreamComponent: Add assignment and copy operators
        https://bugs.webkit.org/show_bug.cgi?id=102915

        Reviewed by Adam Barth.

        Tests that use this functionality are being submitted to Chrome.

        * platform/chromium/support/WebMediaStreamComponent.cpp:
        (WebKit::WebMediaStreamComponent::assign):
        (WebKit):
        * platform/chromium/support/WebMediaStreamDescriptor.cpp:

2012-11-21  Kentaro Hara  <haraken@chromium.org>

        [V8] Remove STRING_TO_V8PARAMETER_EXCEPTION_BLOCK()
        https://bugs.webkit.org/show_bug.cgi?id=102917

        Reviewed by Adam Barth.

        Now EXCEPTION_BLOCK() and STRING_TO_V8PARAMETER_EXCEPTION_BLOCK()
        are equivalent. We can remove STRING_TO_V8PARAMETER_EXCEPTION_BLOCK().
        To make a code generate change smaller, this patch also renames
        STRING_TO_V8PARAMETER_EXCEPTION_BLOCK_VOID() to EXCEPTION_BLOCK_VOID().
        I will rename these macros in a follow-up patch.

        No tests. No change in behavior.

        * bindings/scripts/CodeGeneratorV8.pm:
        (GenerateEventConstructorCallback):
        (ConvertToV8Parameter):
        * bindings/scripts/test/V8/V8TestActiveDOMObject.cpp:
        (WebCore::TestActiveDOMObjectV8Internal::postMessageCallback):
        * bindings/scripts/test/V8/V8TestCustomNamedGetter.cpp:
        (WebCore::TestCustomNamedGetterV8Internal::anotherFunctionCallback):
        * bindings/scripts/test/V8/V8TestEventConstructor.cpp:
        (WebCore::V8TestEventConstructor::constructorCallback):
        * bindings/scripts/test/V8/V8TestInterface.cpp:
        (WebCore::TestInterfaceV8Internal::supplementalStaticAttrAttrSetter):
        (WebCore::TestInterfaceV8Internal::supplementalStr2AttrSetter):
        (WebCore::TestInterfaceV8Internal::supplementalMethod2Callback):
        (WebCore::V8TestInterface::constructorCallback):
        * bindings/scripts/test/V8/V8TestNamedConstructor.cpp:
        (WebCore::V8TestNamedConstructorConstructorCallback):
        * bindings/scripts/test/V8/V8TestObj.cpp:
        (WebCore::TestObjV8Internal::staticStringAttrAttrSetter):
        (WebCore::TestObjV8Internal::stringAttrAttrSetter):
        (WebCore::TestObjV8Internal::reflectedStringAttrAttrSetter):
        (WebCore::TestObjV8Internal::reflectedURLAttrAttrSetter):
        (WebCore::TestObjV8Internal::reflectedCustomURLAttrAttrSetter):
        (WebCore::TestObjV8Internal::stringAttrWithGetterExceptionAttrSetter):
        (WebCore::TestObjV8Internal::stringAttrWithSetterExceptionAttrSetter):
        (WebCore::TestObjV8Internal::voidMethodWithArgsCallback):
        (WebCore::TestObjV8Internal::longMethodWithArgsCallback):
        (WebCore::TestObjV8Internal::objMethodWithArgsCallback):
        (WebCore::TestObjV8Internal::methodThatRequiresAllArgsAndThrowsCallback):
        (WebCore::TestObjV8Internal::methodWithOptionalStringCallback):
        (WebCore::TestObjV8Internal::methodWithOptionalStringIsUndefinedCallback):
        (WebCore::TestObjV8Internal::methodWithOptionalStringIsNullStringCallback):
        (WebCore::TestObjV8Internal::overloadedMethod1Callback):
        (WebCore::TestObjV8Internal::overloadedMethod3Callback):
        (WebCore::TestObjV8Internal::overloadedMethod11Callback):
        (WebCore::TestObjV8Internal::overloadedMethod12Callback):
        (WebCore::TestObjV8Internal::strictFunctionCallback):
        (WebCore::TestObjV8Internal::variadicStringMethodCallback):
        * bindings/scripts/test/V8/V8TestOverloadedConstructors.cpp:
        (WebCore::V8TestOverloadedConstructors::constructor4Callback):
        * bindings/scripts/test/V8/V8TestSerializedScriptValueInterface.cpp:
        (WebCore::V8TestSerializedScriptValueInterface::constructorCallback):
        * bindings/v8/V8BindingMacros.h:
        * bindings/v8/V8StringResource.h:
        (V8Parameter):
        * bindings/v8/custom/V8ConsoleCustom.cpp:
        (WebCore::V8Console::profileCallback):
        (WebCore::V8Console::profileEndCallback):
        * bindings/v8/custom/V8DOMWindowCustom.cpp:
        (WebCore::handlePostMessageCallback):
        * bindings/v8/custom/V8DeviceMotionEventCustom.cpp:
        (WebCore::V8DeviceMotionEvent::initDeviceMotionEventCallback):
        * bindings/v8/custom/V8DeviceOrientationEventCustom.cpp:
        (WebCore::V8DeviceOrientationEvent::initDeviceOrientationEventCallback):
        * bindings/v8/custom/V8HistoryCustom.cpp:
        (WebCore::V8History::pushStateCallback):
        (WebCore::V8History::replaceStateCallback):
        * bindings/v8/custom/V8IntentCustom.cpp:
        (WebCore::V8Intent::constructorCallbackCustom):
        * bindings/v8/custom/V8SQLTransactionCustom.cpp:
        (WebCore::V8SQLTransaction::executeSqlCallback):
        * bindings/v8/custom/V8SQLTransactionSyncCustom.cpp:
        (WebCore::V8SQLTransactionSync::executeSqlCallback):
        * bindings/v8/custom/V8WebGLRenderingContextCustom.cpp:
        (WebCore::V8WebGLRenderingContext::getExtensionCallback):

2012-11-21  Kentaro Hara  <haraken@chromium.org>

        [V8] Move V8DOMWindowShell::initializeV8IfNeeded() to V8Initializer
        https://bugs.webkit.org/show_bug.cgi?id=102899

        Reviewed by Adam Barth.

        This is an incremental step to kill WorkerContextExecutionProxy.
        As commented by abarth in bug 97066, we move
        V8DOMWindowShell::initializeV8IfNeeded() to V8Initializer.
        This patch renames initializeV8IfNeeded() to initializeMainThreadIfNeeded()
        because we will add initializeWorkerIfNeeded() in a follow-up patch.

        No tests. No change in behavior.

        * UseV8.cmake:
        * WebCore.gypi:
        * bindings/v8/V8DOMWindowShell.cpp:
        (WebCore::V8DOMWindowShell::initializeIfNeeded):
        * bindings/v8/V8Initializer.cpp: Added.
        (WebCore):
        (WebCore::findFrame):
        (WebCore::reportFatalError):
        (WebCore::reportUncaughtException):
        (WebCore::reportUnsafeJavaScriptAccess):
        (WebCore::V8Initializer::initializeMainThreadIfNeeded):
        * bindings/v8/V8Initializer.h: Added.
        (WebCore):
        (V8Initializer):

2012-11-21  Alexander Pavlov  <apavlov@chromium.org>

        Turn -webkit-text-emphasis into a shorthand property
        https://bugs.webkit.org/show_bug.cgi?id=102879

        Reviewed by Antti Koivisto.

        -webkit-text-emphasis value is no longer empty.

        * css/StylePropertySet.cpp:
        (WebCore::StylePropertySet::getPropertyValue): Reconstruct the -webkit-text-emphasis value based on the longhands.

2012-11-21  Kentaro Hara  <haraken@chromium.org>

        Unreviewed. Build fix.

        * bindings/v8/custom/V8BlobCustom.cpp:
        (WebCore::V8Blob::constructorCallbackCustom):

2012-11-21  Kentaro Hara  <haraken@chromium.org>

        [V8] Rename v8/custom/*Constructor.cpp to v8/custom/*Custom.cpp
        https://bugs.webkit.org/show_bug.cgi?id=102881

        Reviewed by Adam Barth.

        Writing constructorCallback()s in *Custom.cpp is a convention of
        custom bindings of JSC and V8. We can rename v8/custom/*Constructor.cpp
        to v8/custom/*Custom.cpp.

        No tests. No change in behavior.

        * UseV8.cmake: This file is already out of sync.
        * WebCore.gypi:
        * bindings/v8/custom/V8IntentCustom.cpp: Renamed from Source/WebCore/bindings/v8/custom/V8IntentConstructor.cpp.
        (WebCore):
        (WebCore::V8Intent::constructorCallbackCustom):
        * bindings/v8/custom/V8MessageChannelCustom.cpp: Renamed from Source/WebCore/bindings/v8/custom/V8MessageChannelConstructor.cpp.
        (WebCore):
        (WebCore::V8MessageChannel::constructorCallbackCustom):
        * bindings/v8/custom/V8WebKitPointCustom.cpp: Renamed from Source/WebCore/bindings/v8/custom/V8WebKitPointConstructor.cpp.
        (WebCore):
        (WebCore::V8WebKitPoint::constructorCallbackCustom):

2012-11-21  Dan Carney  <dcarney@google.com>

        [V8] Inspector does not callback IDB methods in context
        https://bugs.webkit.org/show_bug.cgi?id=101725

        Reviewed by Adam Barth.

        Inserted v8 context before calling out to IDB.

        No new tests.

        * inspector/InspectorIndexedDBAgent.cpp:
        (WebCore::InspectorIndexedDBAgent::requestDatabaseNamesForFrame):
        (WebCore::InspectorIndexedDBAgent::requestDatabase):
        (WebCore::InspectorIndexedDBAgent::requestData):

2012-11-21  Huang Dongsung  <luxtella@company100.net>

        REGRESSION(134048): TiledBackingStore must create tiles when the contents rect is changed.
        https://bugs.webkit.org/show_bug.cgi?id=102035

        Reviewed by Kenneth Rohde Christiansen.

        Before r134048, the visibleRect contained information of both the viewport and
        the contents rect. Now the visible rect is related to only the viewport. So
        TiledBackingStore::coverWithTilesIfNeeded() early returns even if the contents
        rect is changed, because changing the contents rect is independent on changing
        both a trajectory vector and the visible rect.

        * platform/graphics/TiledBackingStore.cpp:
        (WebCore::TiledBackingStore::coverWithTilesIfNeeded):

2012-11-21  Vsevolod Vlasov  <vsevik@chromium.org>

        Web Inspector: Request preview tuning: enable json preview for text/html XHRs
        https://bugs.webkit.org/show_bug.cgi?id=102892

        Reviewed by Alexander Pavlov.

        * inspector/front-end/RequestPreviewView.js:
        (WebInspector.RequestPreviewView.prototype._jsonView):
        (WebInspector.RequestPreviewView.prototype._htmlView):
        (WebInspector.RequestPreviewView.prototype._createPreviewView):

2012-11-21  Kentaro Hara  <haraken@chromium.org>

        [V8] Remove manually written v8::TryCatches in custom bindings
        https://bugs.webkit.org/show_bug.cgi?id=102883

        Reviewed by Adam Barth.

        We can replace them with the EXCEPTION_BLOCK() macro or its friends.

        No new tests. This patch shouldn't change any behavior.

        * bindings/v8/custom/V8DOMWindowCustom.cpp:
        (WebCore::handlePostMessageCallback):
        * bindings/v8/custom/V8DocumentCustom.cpp:
        (WebCore::V8Document::evaluateCallback):
        * bindings/v8/custom/V8HTMLOptionsCollectionCustom.cpp:
        (WebCore::V8HTMLOptionsCollection::addCallback):
        * bindings/v8/custom/V8HistoryCustom.cpp:
        (WebCore::V8History::pushStateCallback):
        (WebCore::V8History::replaceStateCallback):

2012-11-21  Kentaro Hara  <haraken@chromium.org>

        Unreviewed, rolling out r135358.
        http://trac.webkit.org/changeset/135358
        https://bugs.webkit.org/show_bug.cgi?id=102881

        It broke Chromium/Linux build

        * UseV8.cmake:
        * WebCore.gypi:
        * bindings/v8/custom/V8HTMLImageElementConstructor.cpp: Renamed from Source/WebCore/bindings/v8/custom/V8HTMLImageElementCustom.cpp.
        (WebCore):
        (WebCore::v8HTMLImageElementConstructorCallback):
        (WebCore::V8HTMLImageElementConstructor::GetTemplate):
        * bindings/v8/custom/V8HTMLImageElementConstructor.h: Renamed from Source/WebCore/bindings/v8/custom/V8HTMLImageElementCustom.h.
        (WebCore):
        (V8HTMLImageElementConstructor):
        * bindings/v8/custom/V8IntentConstructor.cpp: Renamed from Source/WebCore/bindings/v8/custom/V8IntentCustom.cpp.
        (WebCore):
        (WebCore::V8Intent::constructorCallbackCustom):
        * bindings/v8/custom/V8MessageChannelConstructor.cpp: Renamed from Source/WebCore/bindings/v8/custom/V8MessageChannelCustom.cpp.
        (WebCore):
        (WebCore::V8MessageChannel::constructorCallbackCustom):
        * bindings/v8/custom/V8WebKitPointConstructor.cpp: Renamed from Source/WebCore/bindings/v8/custom/V8WebKitPointCustom.cpp.
        (WebCore):
        (WebCore::V8WebKitPoint::constructorCallbackCustom):

2012-11-21  KyungTae Kim  <ktf.kim@samsung.com>

        Unused parameters on ScrollingCoordinator.cpp
        https://bugs.webkit.org/show_bug.cgi?id=102884

        Reviewed by Kentaro Hara.

        Because the 'scrollingLayerPositionAction' parameter is not used when !USE(ACCELERATED_COMPOSITING),
        use UNUSED_PARAM macro to fix build warning -Wunused-parameter

        * page/scrolling/ScrollingCoordinator.cpp:
        (WebCore::ScrollingCoordinator::updateMainFrameScrollPosition):

2012-11-21  Kentaro Hara  <haraken@chromium.org>

        [V8] Replace V8Parameter::prepare() with V8Parameter::operator=()
        https://bugs.webkit.org/show_bug.cgi?id=102870

        Reviewed by Adam Barth.

        This is an incremental step for V8Parameter refactoring.
        By replacing V8Parameter::prepare() with V8Parameter::operator=(),
        we can make EXCEPTION_BLOCK() and STRING_TO_V8PARAMETER_EXCEPTION_BLOCK()
        equivalent (except for a return value).

        Tests: fast/workers/worker-constructor.html
               storage/websql/sql-error-codes.html
               inspector/console/alert-toString-exception.html
               http/tests/websocket/tests/hybi/send-throw.html

        * bindings/v8/V8BindingMacros.h:
        * bindings/v8/V8StringResource.h:
        (WebCore::V8Parameter::V8Parameter):
        (V8Parameter):
        (WebCore::=):

2012-11-21  Kentaro Hara  <haraken@chromium.org>

        [V8] Rename v8/custom/*Constructor.cpp to v8/custom/*Custom.cpp
        https://bugs.webkit.org/show_bug.cgi?id=102881

        Reviewed by Adam Barth.

        Writing constructorCallback()s in *Custom.cpp is a convention of
        custom bindings of JSC and V8. We can rename v8/custom/*Constructor.cpp
        to v8/custom/*Custom.cpp.

        No tests. No change in behavior.

        * UseV8.cmake: This file is already out of sync.
        * WebCore.gypi:
        * bindings/v8/custom/V8HTMLImageElementCustom.cpp: Renamed from Source/WebCore/bindings/v8/custom/V8HTMLImageElementConstructor.cpp.
        (WebCore):
        (WebCore::v8HTMLImageElementConstructorCallback):
        (WebCore::V8HTMLImageElementConstructor::GetTemplate):
        * bindings/v8/custom/V8HTMLImageElementCustom.h: Renamed from Source/WebCore/bindings/v8/custom/V8HTMLImageElementConstructor.h.
        (WebCore):
        (V8HTMLImageElementConstructor):
        * bindings/v8/custom/V8IntentCustom.cpp: Renamed from Source/WebCore/bindings/v8/custom/V8IntentConstructor.cpp.
        (WebCore):
        (WebCore::V8Intent::constructorCallbackCustom):
        * bindings/v8/custom/V8MessageChannelCustom.cpp: Renamed from Source/WebCore/bindings/v8/custom/V8MessageChannelConstructor.cpp.
        (WebCore):
        (WebCore::V8MessageChannel::constructorCallbackCustom):
        * bindings/v8/custom/V8WebKitPointCustom.cpp: Renamed from Source/WebCore/bindings/v8/custom/V8WebKitPointConstructor.cpp.
        (WebCore):
        (WebCore::V8WebKitPoint::constructorCallbackCustom):

2012-11-21  Andrey Adaikin  <aandrey@chromium.org>

        Web Inspector: [Canvas] throttle wait icon in the ui
        https://bugs.webkit.org/show_bug.cgi?id=102685

        Reviewed by Vsevolod Vlasov.

        Do not show the wait icon for small operations during the replay to reduce flickering.

        * inspector/front-end/CanvasProfileView.js:
        (WebInspector.CanvasProfileView.prototype._enableWaitIcon):

2012-11-21  Kunihiko Sakamoto  <ksakamoto@chromium.org>

        Enable datalist UI for input types datetime and datetime-local
        https://bugs.webkit.org/show_bug.cgi?id=102882

        Reviewed by Kent Tamura.

        Enabling datalist UI for input types datetime and datetime-local.

        No new tests yet. Tests will be added later in Bug 102888.

        * platform/text/PlatformLocale.cpp:
        (WebCore::Locale::formatDateTime): Support datetime and datetime-local types.
        * rendering/RenderThemeChromiumCommon.cpp:
        (WebCore::RenderThemeChromiumCommon::supportsDataListUI): Add datetime and datetimelocal to the list.

2012-11-20  Kentaro Hara  <haraken@chromium.org>

        [V8] Remove v8/custom/V8XMLHttpRequestConstructor.cpp
        https://bugs.webkit.org/show_bug.cgi?id=102876

        Reviewed by Sam Weinig.

        It doesn't make sense to have one custom cpp file for
        XXX::constructorCallback() only. We can move XXX::constructorCallback()
        in v8/custom/V8XXXConstructor.cpp to v8/custom/V8XXXCustom.cpp
        and thus remove v8/custom/V8XXXConstructor.cpp.

        Note: Some XXX::constructorCallback()s are already written in
        v8/custom/V8XXXCustom.cpp. JSC already has almost all
        XXX::constructorCallback()s in js/JSXXXCustom.cpp.

        No tests. No change in behavior.

        * UseV8.cmake:
        * WebCore.gypi:
        * bindings/v8/custom/V8XMLHttpRequestConstructor.cpp: Removed.
        * bindings/v8/custom/V8XMLHttpRequestCustom.cpp:
        (WebCore::V8XMLHttpRequest::constructorCallbackCustom):
        (WebCore):

2012-11-20  Kentaro Hara  <haraken@chromium.org>

        Unreviewed. Rebaselined run-bindings-tests.

        * bindings/scripts/test/CPP/WebDOMFloat64Array.cpp:
        * bindings/scripts/test/CPP/WebDOMTestActiveDOMObject.cpp:
        * bindings/scripts/test/CPP/WebDOMTestCallback.cpp:
        * bindings/scripts/test/CPP/WebDOMTestCustomNamedGetter.cpp:
        * bindings/scripts/test/CPP/WebDOMTestEventConstructor.cpp:
        * bindings/scripts/test/CPP/WebDOMTestEventTarget.cpp:
        * bindings/scripts/test/CPP/WebDOMTestException.cpp:
        * bindings/scripts/test/CPP/WebDOMTestInterface.cpp:
        * bindings/scripts/test/CPP/WebDOMTestMediaQueryListListener.cpp:
        * bindings/scripts/test/CPP/WebDOMTestNamedConstructor.cpp:
        * bindings/scripts/test/CPP/WebDOMTestNode.cpp:
        * bindings/scripts/test/CPP/WebDOMTestObj.cpp:
        * bindings/scripts/test/CPP/WebDOMTestOverloadedConstructors.cpp:
        * bindings/scripts/test/CPP/WebDOMTestSerializedScriptValueInterface.cpp:
        * bindings/scripts/test/V8/V8TestObj.cpp:
        (WebCore::TestObjV8Internal::withScriptStateAttributeAttrGetter):
        (WebCore::TestObjV8Internal::withScriptStateAttributeAttrSetter):
        (WebCore::TestObjV8Internal::withScriptStateAttributeRaisesAttrGetter):
        (WebCore::TestObjV8Internal::withScriptStateAttributeRaisesAttrSetter):
        (WebCore::TestObjV8Internal::withScriptExecutionContextAndScriptStateAttributeAttrGetter):
        (WebCore::TestObjV8Internal::withScriptExecutionContextAndScriptStateAttributeAttrSetter):
        (WebCore::TestObjV8Internal::withScriptExecutionContextAndScriptStateAttributeRaisesAttrGetter):
        (WebCore::TestObjV8Internal::withScriptExecutionContextAndScriptStateAttributeRaisesAttrSetter):
        (WebCore::TestObjV8Internal::withScriptExecutionContextAndScriptStateWithSpacesAttributeAttrGetter):
        (WebCore::TestObjV8Internal::withScriptExecutionContextAndScriptStateWithSpacesAttributeAttrSetter):
        (WebCore::TestObjV8Internal::withScriptStateVoidCallback):
        (WebCore::TestObjV8Internal::withScriptStateObjCallback):
        (WebCore::TestObjV8Internal::withScriptStateVoidExceptionCallback):
        (WebCore::TestObjV8Internal::withScriptStateObjExceptionCallback):
        (WebCore::TestObjV8Internal::withScriptExecutionContextAndScriptStateCallback):
        (WebCore::TestObjV8Internal::withScriptExecutionContextAndScriptStateObjExceptionCallback):
        (WebCore::TestObjV8Internal::withScriptExecutionContextAndScriptStateWithSpacesCallback):

2012-11-20  Kentaro Hara  <haraken@chromium.org>

        [V8] Introduce constructorCallbackCustom()
        https://bugs.webkit.org/show_bug.cgi?id=102763

        Reviewed by Adam Barth.

        Currently custom constructors have the following code:

          v8::Handle<v8::Value> V8XXX::constructorCallback(const v8::Arguments& args) {
            INC_STATS("DOM.XXX.Constructor");
            if (!args.IsConstructCall())
              return throwTypeError("DOM object constructor cannot be called as a function.", args.GetIsolate());
            if (ConstructorMode::current() == ConstructorMode::WrapExistingObject)
              return args.Holder();

            /* body of the constructor */;
          }

        To avoid duplicating the same logic in all custom constructors,
        this patch changes the generated code as follows:

          // Generated automatically
          v8::Handle<v8::Value> V8XXX::constructorCallback(const v8::Arguments& args) {
            INC_STATS("DOM.XXX.Constructor");
            ${maybeObserveFeature}  // Newly supported for custom constructors.
            if (!args.IsConstructCall())
              return throwTypeError("DOM object constructor cannot be called as a function.", args.GetIsolate());
            if (ConstructorMode::current() == ConstructorMode::WrapExistingObject)
              return args.Holder();

            V8XXX::constructorCallbackCustom(args);
          }

          // Written manually
          v8::Handle<v8::Value> V8XXX::constructorCallback(const v8::Arguments& args) {
            /* body of the constructor */;
          }

        No tests. No change in behavior.

        * bindings/scripts/CodeGeneratorV8.pm:
        (GenerateHeader):
        (HasCustomConstructor):
        (GenerateCustomConstructorCallback):
        (GenerateImplementation):
        * bindings/scripts/test/V8/V8TestEventConstructor.cpp:
        (WebCore::V8TestEventConstructor::constructorCallback):
        * bindings/scripts/test/V8/V8TestNamedConstructor.cpp:
        (WebCore::V8TestNamedConstructorConstructorCallback):
        * bindings/scripts/test/V8/V8TestOverloadedConstructors.cpp:
        (WebCore::V8TestOverloadedConstructors::constructorCallback):
        * bindings/v8/custom/V8ArrayBufferCustom.cpp:
        (WebCore::V8ArrayBuffer::constructorCallbackCustom):
        * bindings/v8/custom/V8AudioContextCustom.cpp:
        (WebCore::V8AudioContext::constructorCallbackCustom):
        * bindings/v8/custom/V8BlobCustom.cpp:
        (WebCore::V8Blob::constructorCallbackCustom):
        * bindings/v8/custom/V8DOMFormDataCustom.cpp:
        (WebCore::V8DOMFormData::constructorCallbackCustom):
        * bindings/v8/custom/V8DataViewCustom.cpp:
        (WebCore::V8DataView::constructorCallbackCustom):
        * bindings/v8/custom/V8IntentConstructor.cpp:
        (WebCore::V8Intent::constructorCallbackCustom):
        * bindings/v8/custom/V8MessageChannelConstructor.cpp:
        (WebCore::V8MessageChannel::constructorCallbackCustom):
        * bindings/v8/custom/V8MutationObserverCustom.cpp:
        (WebCore::V8MutationObserver::constructorCallbackCustom):
        * bindings/v8/custom/V8WebKitPointConstructor.cpp:
        (WebCore::V8WebKitPoint::constructorCallbackCustom):
        * bindings/v8/custom/V8XMLHttpRequestConstructor.cpp:
        (WebCore::V8XMLHttpRequest::constructorCallbackCustom):

2012-11-20  Kunihiko Sakamoto  <ksakamoto@chromium.org>

        REGRESSION(r135263): Fix a wrong argument for udat_close
        https://bugs.webkit.org/show_bug.cgi?id=102856

        Reviewed by Kent Tamura.

        Fixed a bug that passed wrong pointer to udat_close.

        No new tests. No changes in behavior.

        * platform/text/LocaleICU.cpp:
        (WebCore::LocaleICU::initializeDateTimeFormat): Close correct object.

2012-11-20  Kentaro Hara  <haraken@chromium.org>

        Remove $outputDir and $outputHeadersDir from global variables of code generators
        https://bugs.webkit.org/show_bug.cgi?id=102492

        Reviewed by Adam Barth.

        $outputDir and $outputHeadersDir are used in WriteData() only.
        We don't need to use global variables for them.

        No tests. No change in behavior.

        * bindings/scripts/CodeGenerator.pm:
        (ProcessDocument):
        (FileNamePrefix):
        * bindings/scripts/CodeGeneratorCPP.pm:
        (new):
        (GenerateInterface):
        (WriteData):
        * bindings/scripts/CodeGeneratorGObject.pm:
        (new):
        (WriteData):
        (GenerateInterface):
        * bindings/scripts/CodeGeneratorJS.pm:
        (new):
        (GenerateInterface):
        (WriteData):
        * bindings/scripts/CodeGeneratorObjC.pm:
        (new):
        (GenerateInterface):
        (WriteData):
        * bindings/scripts/CodeGeneratorV8.pm:
        (new):
        (GenerateInterface):
        (WriteData):

2012-11-20  Adam Barth  <abarth@webkit.org>

        7% regression in dromaeo_domcorequery/dom_query_getElementsByTagName__not_in_document
        https://bugs.webkit.org/show_bug.cgi?id=102852

        Reviewed by Kentaro Hara.

        In http://trac.webkit.org/changeset/135208/, we lost the early-exit
        check for whether isolatedWorldsExist() in this code path. This
        regression points to benchmarks that we can further improve by
        continuing to merge the general ScriptWrappable code path with the Node
        code path.

        * bindings/v8/DOMDataStore.cpp:
        (WebCore::DOMDataStore::current):

2012-11-20  Kentaro Hara  <haraken@chromium.org>

        [V8] Change a return type of V8Parameter::prepare() from bool to void
        https://bugs.webkit.org/show_bug.cgi?id=102805

        Reviewed by Adam Barth.

        This is an incremental step for V8Parameter refactoring.

        V8Parameter::prepare() is always called just after V8Parameter's
        constructor. So I want to move the logic of V8Parameter::prepare()
        to V8Parameter's constructor. In preparation for that (i.e. because
        a constructor cannot return any value), this patch changes the return
        type of V8Parameter::prepare() from bool to void.

        Tests: fast/workers/worker-constructor.html
               storage/websql/sql-error-codes.html
               inspector/console/alert-toString-exception.html
               http/tests/websocket/tests/hybi/send-throw.html
               etc

        * bindings/v8/V8BindingMacros.h:
        * bindings/v8/V8StringResource.h:
        (V8Parameter):
        (WebCore::V8Parameter::prepareBase): This patch removes a TryCatch block.
        This change is safe because (1) all V8Parameter::prepareBase() in the code base
        is called inside STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(), and because
        (2) STRING_TO_V8PARAMETER_EXCEPTION_BLOCK() has a TryCatch block.
        (Note: In a follow-up patch I'm planning to refactor the macros.)
        (WebCore::::prepare): I will remove this method shortly.

2012-11-20  Adam Klein  <adamk@chromium.org>

        [JSC] MutationObserver wrapper should not be collected while still observing
        https://bugs.webkit.org/show_bug.cgi?id=102744

        Reviewed by Adam Barth.

        This is the JSC side of the change landed for V8 in r135228.
        It ensures MutationObserver wrapper objects are kept alive as long as
        any observed nodes.

        * bindings/js/JSMutationObserverCustom.cpp:
        (WebCore::JSMutationObserverOwner::isReachableFromOpaqueRoots): Keep MutationObserver wrappers alive
        if any of their observed nodes' roots is an opaque root.
        * dom/MutationObserver.idl: Add JSCustomIsReachable

2012-11-20  Joshua Bell  <jsbell@chromium.org>

        IndexedDB: Move control of transaction completion to front end
        https://bugs.webkit.org/show_bug.cgi?id=100903

        Reviewed by Tony Chang.

        "When a transaction can no longer become active, the implementation must attempt to
        commit it" - that is, all requests have dispatched success/error events and no further
        requests have been made. Previously, this was done by the back end waiting for events
        from the front end, but the front end can more efficiently make the decision.

        There should be no detectable behavior change.

        Tests: storage/indexeddb/transaction-*.html

        * Modules/indexeddb/IDBTransaction.cpp:
        (WebCore::IDBTransaction::IDBTransaction):
        (WebCore::IDBTransaction::setActive):
        (WebCore::IDBTransaction::registerRequest):
        * Modules/indexeddb/IDBTransaction.h:
        * Modules/indexeddb/IDBTransactionBackendImpl.cpp:
        (WebCore::IDBTransactionBackendImpl::hasPendingTasks): Added.
        (WebCore::IDBTransactionBackendImpl::didCompleteTaskEvents):
        (WebCore::IDBTransactionBackendImpl::run):
        (WebCore::IDBTransactionBackendImpl::taskEventTimerFired):

2012-11-20  Kentaro Hara  <haraken@chromium.org>

        Unreviewed. Rebaselined run-bindings-tests results.

        * bindings/scripts/test/V8/V8TestEventConstructor.cpp:
        (WebCore::V8TestEventConstructor::constructorCallback):
        * bindings/scripts/test/V8/V8TestNamedConstructor.cpp:
        (WebCore::V8TestNamedConstructorConstructorCallback):
        * bindings/scripts/test/V8/V8TestOverloadedConstructors.cpp:
        (WebCore::V8TestOverloadedConstructors::constructorCallback):

2012-11-20  Alpha Lam  <hclam@chromium.org>

        Unreviewed. Chromium build fix.

        Removed unnecessary mutex unlock that triggered crash on Linux debug build.

        Chromium Linux Debug layout tests should be green:
        platform/chromium/virtual/deferred/fast/images/image-in-map.html

        * platform/graphics/chromium/LazyDecodingPixelRef.cpp:
        (WebCore::LazyDecodingPixelRef::onLockPixels):

2012-11-20  Ryosuke Niwa  <rniwa@webkit.org>

        Fix another typo. I need to checking that type() != NodeListCollectionType,
        not that type() >= FirstNodeCollectionType.

        * dom/DynamicNodeList.cpp:
        (WebCore::DynamicNodeListCacheBase::invalidateIdNameCacheMaps):
        * dom/DynamicNodeList.h:
        (WebCore::DynamicNodeListCacheBase::invalidateCache):

2012-11-20  Michael Pruett  <michael@68k.org>

        [V8] Pass ScriptState::current() to functions marked with CallWith=ScriptState
        https://bugs.webkit.org/show_bug.cgi?id=102739

        Reviewed by Kentaro Hara.

        Previously EmptyScriptState rather than ScriptState::current()
        was passed to functions marked with [CallWith=ScriptState].
        Since the EmptyScriptState has a null v8::Context, any functions
        which depended upon a valid v8::Context would fail.

        No new tests. Covered by existing tests.

        * bindings/scripts/CodeGeneratorV8.pm:
        (GenerateNormalAttrGetter):
        (GenerateNormalAttrSetter):
        (GenerateCallWith):
        (GenerateFunctionCallString):
        * bindings/v8/ScriptState.h:
        (WebCore::ScriptState::clearException): Added.

2012-11-20  Brent Fulgham  <bfulgham@webkit.org>

        [Qt] Build fix after r135217.
        https://bugs.webkit.org/show_bug.cgi?id=102787

        * platform/win/WindowsExtras.h: Switch to direct include of
          <ObjBase.h>, as is done in other <shlwapi.h> includes.

2012-11-20  Ryosuke Niwa  <rniwa@webkit.org>

        Fix typos. Apparently XCode failed to text-replace earlier when it was busy making a snapshot :(

        * dom/DynamicNodeList.cpp:
        (WebCore::DynamicNodeListCacheBase::invalidateIdNameCacheMaps):
        * dom/DynamicNodeList.h:
        (WebCore::DynamicNodeListCacheBase::invalidateCache):
        (DynamicNodeListCacheBase):

2012-11-20  Kentaro Hara  <haraken@chromium.org>

        [V8] Introduce GenerateConstructorHeader() to CodeGeneratorV8.pm
        https://bugs.webkit.org/show_bug.cgi?id=102806

        Reviewed by Adam Barth.

        This is an incremental step for introducing constructorCallbackCustom().
        (See bug 102763.) This patch adds GenerateConstructorHeader()
        that generates a common code for constructors.

        No tests. No change in behavior.

        * bindings/scripts/CodeGeneratorV8.pm:
        (GenerateOverloadedConstructorCallback):
        (GenerateSingleConstructorCallback):
        (GenerateEventConstructorCallback):
        (GenerateNamedConstructorCallback):
        (GenerateConstructorHeader):

2012-11-20  Ryosuke Niwa  <rniwa@webkit.org>

        HTMLCollection's cache should not be invalidated when id or name attributes are changed
        https://bugs.webkit.org/show_bug.cgi?id=102843

        Reviewed by Eric Seidel.

        When an id or name attribute changes, only invaliate id and name cache maps when the collection
        doesn't depend on id and name attributes (e.g. document.images).

        Unfortunately, I could not create a reliable test for this performance problem.

        * dom/DynamicNodeList.cpp:
        (WebCore::DynamicNodeListCacheBase::invalidateIdNameCacheMaps):
        * dom/DynamicNodeList.h:
        (WebCore::DynamicNodeListCacheBase::invalidateCache):
        (DynamicNodeListCacheBase):
        * dom/ElementRareData.h:
        (WebCore::ElementRareData::clearHTMLCollectionCaches):
        * html/HTMLCollection.cpp:
        (WebCore::invalidationTypeExcludingIdAndNameAttributes):

2012-11-20  Adam Klein  <adamk@chromium.org>

        [v8] Avoid unnecessary call to ToObject() in Callback constructors
        https://bugs.webkit.org/show_bug.cgi?id=102831

        Reviewed by Adam Barth.

        The code already asserted that the argument was an object, so calling
        ToObject() is unnecessary: a simple Cast() suffices.

        * bindings/scripts/CodeGeneratorV8.pm:
        (GenerateCallbackHeader):
        * bindings/scripts/test/V8/V8TestCallback.h:
        (WebCore::V8TestCallback::create):

2012-11-20  Brent Fulgham  <bfulgham@webkit.org>

        [WinCairo] Build fix after r135316

        * platform/network/curl/AuthenticationChallenge.h: Update stub
          implementations to match Apple Windows port.
        (WebCore::AuthenticationChallenge::AuthenticationChallenge): Add
          missing identifier argument.
        (WebCore::AuthenticationChallenge::setAuthenticationClient): Supply
          missing set method.

2012-11-20  Tony Chang  <tony@chromium.org>

        When calling DocumentStyleSheetCollection::addUserSheet, pass in a user sheet
        https://bugs.webkit.org/show_bug.cgi?id=102835

        Reviewed by Ojan Vafai.

        After r135082, Chromium browser_tests were triggering the ASSERT in
        StyleResolver::collectRulesFromUserStyleSheets. Add an ASSERT that will
        trigger earlier and make it clear in the Chromium code that we're always
        inserting user level styles.

        No new tests, no behavior change except no longer triggering the StyleResolver ASSERT
        in Chromium browser_tests.

        * dom/DocumentStyleSheetCollection.cpp:
        (WebCore::DocumentStyleSheetCollection::addUserSheet):

2012-11-20  Bear Travis  <betravis@adobe.com>

        [CSS Exclusions] Support outside-shape value on shape-inside
        https://bugs.webkit.org/show_bug.cgi?id=101108

        Reviewed by Dirk Schulze.

        Shape-inside can potentially be: 'auto' | 'outside-shape' | <shape> | <url>.
        Webkit currently supports the value 'auto' (null) and <shape> (a BasicShape*).
        This patch adds support for the value 'outside-shape.' It adds the ExclusionShapeValue
        class, which may be any of the three values: 'auto', 'outside-shape', or <shape>.
        Bug 102738 tracks adding <url> support.

        Modifying existing tests:
        LayoutTests/fast/exclusions/parsing-wrap-shape-inside.html
        LayoutTests/fast/exclusions/parsing-wrap-shape-outside.html

        * GNUmakefile.list.am: Adding ExclusionShapeValue.h to the build files.
        * Target.pri: Ditto.
        * WebCore.gypi: Ditto.
        * WebCore.vcproj/WebCore.vcproj: Ditto.
        * WebCore.xcodeproj/project.pbxproj: Ditto.
        (WebCore):
        * css/CSSComputedStyleDeclaration.cpp:
        (WebCore::CSSComputedStyleDeclaration::getPropertyCSSValue): Modifying code to use
        ExclusionShapeValue* rather than the previous BasicShape* values.
        * css/CSSParser.cpp:
        (WebCore::CSSParser::parseValue): Handle the outside-shape value.
        * css/CSSValueKeywords.in: Adding outside-shape value.
        * css/StyleBuilder.cpp:
        (WebCore):
        (WebCore::ApplyPropertyExclusionShape::setValue): Modify code to use
        ExclusionShapeValue* rather than BasicShape*.
        (WebCore::ApplyPropertyExclusionShape::applyValue): Ditto.
        (WebCore::ApplyPropertyExclusionShape::createHandler): Ditto.
        * page/animation/CSSPropertyAnimation.cpp: Ditto.
        (WebCore::blendFunc): Ditto.
        (WebCore::PropertyWrapperExclusionShape::PropertyWrapperExclusionShape): Ditto.
        (WebCore::CSSPropertyAnimation::ensurePropertyMap): Ditto.
        * rendering/ExclusionShapeInsideInfo.cpp:
        (WebCore::ExclusionShapeInsideInfo::isExclusionShapeInsideInfoEnabledForRenderBlock):
        Ditto.
        (WebCore::ExclusionShapeInsideInfo::computeShapeSize): Ditto.
        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::updateExclusionShapeInsideInfoAfterStyleChange): Ditto.
        * rendering/RenderBlock.h:
        (RenderBlock):
        * rendering/style/ExclusionShapeValue.h: Added.
        (WebCore):
        (ExclusionShapeValue): New type to represent the possible values of shape-inside
        and shape-outside. Only shape-inside can have a value of 'outside-shape.'
        (WebCore::ExclusionShapeValue::~ExclusionShapeValue):
        (WebCore::ExclusionShapeValue::type): Returns the value type.
        (WebCore::ExclusionShapeValue::shape): Returns <shape> value's BasicShape*.
        (WebCore::ExclusionShapeValue::operator==):
        (WebCore::ExclusionShapeInfo::createShapeValue):
        (WebCore::ExclusionShapeInfo::createOutsideValue):
        (WebCore::ExclusionShapeValue::ExclusionShapeValue):
        * rendering/style/RenderStyle.h:
        * rendering/style/StyleRareNonInheritedData.h:
        (StyleRareNonInheritedData):

2012-11-20  Alpha Lam  <hclam@chromium.org>

        [chromium] Make lazy image decoding thread-safe
        https://bugs.webkit.org/show_bug.cgi?id=102721

        Reviewed by Stephen White.

        Added mutex to LazyDecodingPixelRef such that there is no parallel
        onLockPixels() running on multiple threads.

        Added mutex to ImageFrameGenerator to protect the use of raw image
        data.

        The result is that we can decode on threads other than the main
        thread while data is being supplied on the main thread.

        New unit test:
        DeferredImageDecoderTest.decodeOnOtherThread

        * platform/graphics/chromium/ImageFrameGenerator.cpp:
        (WebCore::ImageFrameGenerator::setData):
        (WebCore::ImageFrameGenerator::decodeAndScale):
        * platform/graphics/chromium/ImageFrameGenerator.h:
        (ImageFrameGenerator):
        * platform/graphics/chromium/LazyDecodingPixelRef.cpp:
        (WebCore::LazyDecodingPixelRef::onLockPixels):
        (WebCore::LazyDecodingPixelRef::onUnlockPixels):
        * platform/graphics/chromium/LazyDecodingPixelRef.h:
        (LazyDecodingPixelRef):

2012-11-20  Brent Fulgham  <bfulgham@webkit.org>

        [Qt] Build fix after r135217.
        https://bugs.webkit.org/show_bug.cgi?id=102787

        * platform/win/WindowsExtras.h: Add #undef of NOSHLWAPI to
        allow include of <ObjBase.h> needed by Qt build.

2012-11-20  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r135295.
        http://trac.webkit.org/changeset/135295
        https://bugs.webkit.org/show_bug.cgi?id=102834

        This patch causes assertion to some layout tests on chromium
        (Requested by jianli on #webkit).

        * CMakeLists.txt:
        * GNUmakefile.list.am:
        * Target.pri:
        * WebCore.exp.in:
        * WebCore.gypi:
        * WebCore.vcproj/WebCore.vcproj:
        * WebCore.xcodeproj/project.pbxproj:
        * loader/FrameLoadRequest.cpp: Removed.
        * loader/FrameLoadRequest.h:
        (WebCore::FrameLoadRequest::FrameLoadRequest):
        (FrameLoadRequest):
        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::load):
        * loader/FrameLoader.h:
        (FrameLoader):
        * page/DragController.cpp:
        (WebCore::DragController::performDrag):
        * plugins/PluginView.cpp:
        (WebCore::PluginView::performRequest):

2012-11-20  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r135293.
        http://trac.webkit.org/changeset/135293
        https://bugs.webkit.org/show_bug.cgi?id=102832

        This patch causes crash to some layout tests on chromium
        (Requested by jianli on #webkit).

        * bindings/v8/DOMDataStore.cpp:
        (WebCore::DOMDataStore::current):
        * bindings/v8/DOMWrapperWorld.cpp:
        * bindings/v8/DOMWrapperWorld.h:
        * bindings/v8/ScriptController.cpp:
        (WebCore::ScriptController::existingWindowShell):
        (WebCore::ScriptController::windowShell):
        (WebCore::ScriptController::evaluateInIsolatedWorld):
        (WebCore::ScriptController::currentWorldContext):
        (WebCore::ScriptController::collectIsolatedContexts):
        * bindings/v8/ScriptController.h:
        (ScriptController):
        * bindings/v8/V8Binding.h:
        (WebCore::worldForEnteredContextIfIsolated):
        * bindings/v8/V8DOMWindowShell.cpp:
        (WebCore::V8DOMWindowShell::destroyIsolatedShell):
        (WebCore):
        (WebCore::isolatedContextWeakCallback):
        (WebCore::V8DOMWindowShell::disposeContext):
        (WebCore::V8DOMWindowShell::initializeIfNeeded):
        * bindings/v8/V8DOMWindowShell.h:
        (WebCore::V8DOMWindowShell::isolated):
        (V8DOMWindowShell):
        * bindings/v8/V8PerContextData.h:
        * bindings/v8/WorldContextHandle.cpp:
        (WebCore::WorldContextHandle::WorldContextHandle):

2012-11-20  David Grogan  <dgrogan@chromium.org>

        IndexedDB: Remove legacy enum-based constants from IDL
        https://bugs.webkit.org/show_bug.cgi?id=85315

        Reviewed by Adam Barth.

        These were only present in an earlier working draft of the spec and have
        been removed for 8 months. See
        http://lists.w3.org/Archives/Public/public-webapps/2012JanMar/0957.html

        Tests - legacy-constants.html

        * Modules/indexeddb/IDBCursor.cpp:
        (WebCore::IDBCursor::stringToDirection):
        * Modules/indexeddb/IDBCursor.idl:
        * Modules/indexeddb/IDBTransaction.cpp:
        (WebCore::IDBTransaction::stringToMode):
        * Modules/indexeddb/IDBTransaction.idl:

2012-11-20  Elliott Sprehn  <esprehn@chromium.org>

        Store MutationObserver callback in a hidden property for V8
        https://bugs.webkit.org/show_bug.cgi?id=102555

        Reviewed by Adam Barth.

        To prevent circular reference leaks we should store the MutationObserver
        callback in a hidden property on the wrapper of the observer.

        This is done by extending the code generator to support a new owner
        argument to ::create() that lets you set the owner of the callback where
        the hidden property should be stored.

        Test: ManualTests/leak-cycle-observer-wrapper.html

        * bindings/scripts/CodeGeneratorV8.pm:
        (GenerateCallbackHeader):
        (GenerateCallbackImplementation):
        * bindings/scripts/test/V8/V8TestCallback.cpp: rebaselined.
        * bindings/scripts/test/V8/V8TestCallback.h: rebaselined.
        * bindings/v8/V8HiddenPropertyName.h:
        * bindings/v8/custom/V8MutationObserverCustom.cpp:
        (WebCore::V8MutationObserver::constructorCallback):

2012-11-20  Abhishek Arya  <inferno@chromium.org>

        Crash in FrameLoader::stopLoading.
        https://bugs.webkit.org/show_bug.cgi?id=99504

        Reviewed by Nate Chapin.

        Frame can be blown away in unload event handler. Need
        to protect it with a RefPtr.

        Test: fast/frames/frame-unload-crash2.html

        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::commitProvisionalLoad):

2012-11-20  Dirk Schulze  <krit@webkit.org>

        Remove unnecessary FilterOperations header from RenderBoxModelObject
        https://bugs.webkit.org/show_bug.cgi?id=102821

        Reviewed by Ojan Vafai.

        No new tests, simple refactoring.

        * rendering/RenderBoxModelObject.cpp:

2012-11-20  Tom Sepez  <tsepez@chromium.org>

        XSSAuditor::decodedSnippetForJavaScript stopping when comma encountered.
        https://bugs.webkit.org/show_bug.cgi?id=102587

        Reviewed by Adam Barth.

        Rather than returning an empty fragment, continue processing the body
        of a script tag when the decoded fragment reduces to nothing.

        Test: http/tests/security/xssAuditor/script-tag-with-actual-comma.html

        * html/parser/XSSAuditor.cpp:
        (WebCore::XSSAuditor::decodedSnippetForJavaScript):

2012-11-20  James Simonsen  <simonjam@chromium.org>

        Consolidate FrameLoader::load() into one function taking a FrameLoadRequest
        https://bugs.webkit.org/show_bug.cgi?id=102151

        Reviewed by Adam Barth.

        There's a FIXME that we have too many FrameLoader::load*() functions. This patch consolidates 3 into 1.
        There are still a few more load functions that will be consolidated later. Using FrameLoadRequest as
        the interface into FrameLoader will also provide a place to pass in the initiator. Finally, this matches
        the refactoring done with CachedResourceRequest and CachedResourceLoader.

        No new tests. No change in functionality.

        * WebCore.exp.in:
        * loader/FrameLoadRequest.h:
        (WebCore::FrameLoadRequest::FrameLoadRequest):
        (WebCore::FrameLoadRequest::setLockHistory): These are former arguments to load().
        (WebCore::FrameLoadRequest::lockHistory): Ditto.
        (FrameLoadRequest):
        (WebCore::FrameLoadRequest::setShouldCheckNewWindowPolicy): Ditto.
        (WebCore::FrameLoadRequest::shouldCheckNewWindowPolicy): Ditto.
        (WebCore::FrameLoadRequest::substituteData): Ditto.
        (WebCore::FrameLoadRequest::setSubstituteData): Ditto.
        (WebCore::FrameLoadRequest::hasSubstituteData): Ditto.
        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::load): No change in behavior, just merged it all into one function.
        * loader/FrameLoader.h:
        (FrameLoader):
        * page/DragController.cpp:
        (WebCore::DragController::performDrag):

2012-11-20  Dan Carney  <dcarney@google.com>

        Remove V8DOMWindowShell::getEntered
        https://bugs.webkit.org/show_bug.cgi?id=96637

        Reviewed by Adam Barth.

        V8DOMWindowShell::getEntered was refactored so that the window shell
        no longer has to be kept alive by a v8 context. Instead, only
        the DOMWrapperWorld will be kept alive.

        No new tests. No change in functionality.

        * bindings/v8/DOMDataStore.cpp:
        (WebCore::DOMDataStore::current):
        * bindings/v8/DOMWrapperWorld.cpp:
        (WebCore::isolatedWorldWeakCallback):
        (WebCore):
        (WebCore::DOMWrapperWorld::makeContextWeak):
        (WebCore::DOMWrapperWorld::setIsolatedWorldField):
        * bindings/v8/DOMWrapperWorld.h:
        (DOMWrapperWorld):
        (WebCore::DOMWrapperWorld::isolated):
        * bindings/v8/ScriptController.cpp:
        (WebCore::ScriptController::existingWindowShell):
        (WebCore::ScriptController::windowShell):
        (WebCore::ScriptController::evaluateInIsolatedWorld):
        (WebCore::ScriptController::currentWorldContext):
        (WebCore::ScriptController::collectIsolatedContexts):
        * bindings/v8/ScriptController.h:
        (ScriptController):
        * bindings/v8/V8Binding.h:
        (WebCore::worldForEnteredContextIfIsolated):
        * bindings/v8/V8DOMWindowShell.cpp:
        (WebCore::V8DOMWindowShell::destroyIsolatedShell):
        (WebCore::V8DOMWindowShell::disposeContext):
        (WebCore::V8DOMWindowShell::initializeIfNeeded):
        * bindings/v8/V8DOMWindowShell.h:
        (V8DOMWindowShell):
        * bindings/v8/V8PerContextData.h:
        * bindings/v8/WorldContextHandle.cpp:
        (WebCore::WorldContextHandle::WorldContextHandle):

2012-11-20  Mike West  <mkwst@chromium.org>

        Remove '#include "ScriptCallStackFactory.h"' include when unnecessary.
        https://bugs.webkit.org/show_bug.cgi?id=102812

        Reviewed by Jochen Eisinger.

        "ScriptCallStackFactory.h" is included in a few files where it doesn't
        seem to be required. Since I'm in the process of centralizing stack
        trace generation anyway, I'll just clean this up as a drive-by.

        * bindings/js/JSConsoleCustom.cpp:
        * bindings/v8/custom/V8DOMWindowCustom.cpp:
        * bindings/v8/custom/V8WorkerContextCustom.cpp:
        * loader/FrameLoader.cpp:
            Removed "ScriptCallStackFactory.h".
        * bindings/js/ScheduledAction.cpp:
            This also included (but didn't use) "ScriptCallStack.h". I've
            removed it as well.

2012-11-20  Elliott Sprehn  <esprehn@chromium.org>

        Merge checks for creating renderers into shouldCreateRenderer
        https://bugs.webkit.org/show_bug.cgi?id=102768

        Reviewed by Ojan Vafai.

        Merge the checks for if renderers should be created into shouldCreateRenderer
        so simplify the code and ensure correctness if doing
        NodeRenderingContext(node).shouldCreateRenderer() in other places in webkit.

        No new tests, just refactoring.

        * dom/NodeRenderingContext.cpp:
        (WebCore::NodeRenderingContext::shouldCreateRenderer):
        (WebCore::NodeRendererFactory::createRendererIfNeeded):

2012-11-19  Pavel Feldman  <pfeldman@chromium.org>

        Web Inspector: simplify? damaged region computation in the editor
        https://bugs.webkit.org/show_bug.cgi?id=102688

        Reviewed by Vsevolod Vlasov.

        This change simplifies the damaged region computation. Drive-by make _getSelection work properly.

        * inspector/front-end/DefaultTextEditor.js:
        (WebInspector.DefaultTextEditor):
        (WebInspector.DefaultTextEditor.prototype._handleCut):
        (WebInspector.TextEditorChunkedPanel.prototype._findFirstVisibleLineNumber.compareLineRowOffsetTops):
        (WebInspector.TextEditorChunkedPanel.prototype._findFirstVisibleLineNumber):
        (WebInspector.TextEditorMainPanel.prototype.handleEnterKey.get var):
        (WebInspector.TextEditorMainPanel.prototype.handleEnterKey):
        (WebInspector.TextEditorMainPanel.prototype._paintLineChunks):
        (WebInspector.TextEditorMainPanel.prototype._getSelection):
        (WebInspector.TextEditorMainPanel.prototype._restoreSelection):
        (WebInspector.TextEditorMainPanel.prototype._selectionToPosition):
        (WebInspector.TextEditorMainPanel.prototype._positionToSelection):
        (WebInspector.TextEditorMainPanel.prototype._handleMutations):
        (WebInspector.TextEditorMainPanel.prototype._collectDirtyLines):
        (WebInspector.TextEditorMainPanel.prototype._applyDomUpdates):
        (WebInspector.TextEditorMainPanel.prototype._guessEditRangeBasedOnSelection):
        (WebInspector.TextEditorMainPanel.prototype._assertDOMMatchesTextModel):
        (WebInspector.TextEditorMainPanel.prototype._updateChunksForRanges):
        (WebInspector.TextEditorMainPanel.prototype._collectLinesFromDOM):
        (WebInspector.TextEditorMainChunk):
        (WebInspector.TextEditorMainChunk.prototype.addDecoration):
        (WebInspector.TextEditorMainChunk.prototype.get endLine):
        (WebInspector.TextEditorMainChunk.prototype.lineRowContainingLine):
        (WebInspector.TextEditorMainChunk.prototype.expandedLineRow):

2012-11-19  Erik Arvidsson  <arv@chromium.org>

        Remove historical enums from ExceptionCode.h
        https://bugs.webkit.org/show_bug.cgi?id=102095

        Reviewed by Ojan Vafai.

        Remove unused enums from ExceptionCode.

        No new tests. No tests affected.

        * Modules/intents/NavigatorIntents.cpp:
        (WebCore::NavigatorIntents::webkitStartActivity): The error type for this is unspecified.
        * dom/DOMCoreException.cpp:
        * dom/ExceptionCode.h:

2012-11-20  Keishi Hattori  <keishi@webkit.org>

        Week picker width is too small
        https://bugs.webkit.org/show_bug.cgi?id=102766

        Reviewed by Kent Tamura.

        The width of week picker was too small because we were forgetting about
        the week number column when calculating the desired width.

        No new tests. Covered by week-picker-appearance*.html.

        * Resources/pagepopups/calendarPicker.css:
        (.week-mode .week-column): Needs to be table-cell.
        * Resources/pagepopups/calendarPicker.js:
        (CalendarPicker.prototype.fixWindowSize):

2012-11-20  Xabier Rodriguez Calvar  <calvaris@igalia.com>

        [GTK] no volume slider in HTML5 media element controls
        https://bugs.webkit.org/show_bug.cgi?id=97192

        Reviewed by Philippe Normand.

        r115829 was causing this regression so it was partially
        reverted. The revert causes some small regressions, in the tests
        but it is better to have the volume slider shown.

        * css/mediaControlsGtk.css:
        (audio::-webkit-media-controls-panel)
        (video::-webkit-media-controls-panel): Partially reverted
        r115829.

2012-11-19  Antti Koivisto  <antti@apple.com>

        Collect user style sheets in DocumentStyleSheetCollection
        https://bugs.webkit.org/show_bug.cgi?id=102683

        Reviewed by Andreas Kling.

        Move the user stylesheet collection logic from StyleResolver to DocumentStyleSheetCollection.
        
        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::StyleResolver):
        (WebCore::StyleResolver::collectRulesFromUserStyleSheets):
        (WebCore::collectCSSOMWrappers):
        * css/StyleResolver.h:
        (StyleResolver):
        * dom/DocumentStyleSheetCollection.cpp:
        (WebCore::DocumentStyleSheetCollection::~DocumentStyleSheetCollection):
        (WebCore::DocumentStyleSheetCollection::pageUserStyleSheet):
        (WebCore::DocumentStyleSheetCollection::clearPageUserStyleSheet):
        (WebCore::DocumentStyleSheetCollection::updatePageUserStyleSheet):
        (WebCore::DocumentStyleSheetCollection::analyzeStyleSheetChange):
        (WebCore::collectActiveStyleSheetsFromSeamlessParents):
        (WebCore::DocumentStyleSheetCollection::updateStyleResolver):
        
            Factor the StyleResolver updating code to function.

        (WebCore):
        (WebCore::DocumentStyleSheetCollection::updateActiveStyleSheets):
        
            Collect the user style sheets. Some renaming and other minor refactoring.

        (WebCore::DocumentStyleSheetCollection::reportMemoryUsage):
        * dom/DocumentStyleSheetCollection.h:
        (WebCore::DocumentStyleSheetCollection::activeUserStyleSheets):
        
            Add activeUserStyleSheets vector that contains all user stylesheets from different sources,
            similar to activeAuthorStyleSheets.

        (DocumentStyleSheetCollection):
        (WebCore::DocumentStyleSheetCollection::documentUserStyleSheets):

2012-11-20  Elliott Sprehn  <esprehn@chromium.org>

        Remove unneeded optimization in Element::isInTopLayer
        https://bugs.webkit.org/show_bug.cgi?id=102772

        Reviewed by Andreas Kling.

        There's no reason to worry about calling elementRareData() multiple
        times in this non performance sensitive code path as it's only used
        in HTMLDialogElement's showModal and close methods.

        No new tests, just simplification.

        * dom/Element.cpp:
        (WebCore::Element::setIsInTopLayer):

2012-11-20  Elliott Sprehn  <esprehn@chromium.org>

        Simplify Element::isSpellCheckingEnabled
        https://bugs.webkit.org/show_bug.cgi?id=102779

        Reviewed by Andreas Kling.

        isSpellCheckingEnabled contains logic that duplicates parentOrHostElement
        and can be simplified by just calling that.

        No new tests, just simplification.

        * dom/Element.cpp:
        (WebCore::Element::isSpellCheckingEnabled):

2012-11-20  Kihong Kwon  <kihong.kwon@samsung.com>

        Apply DeviceController as parent class of DeviceMotionController.
        https://bugs.webkit.org/show_bug.cgi?id=102578

        Reviewed by Hajime Morita.

        DeviceController needs to be applied as parent class of DeviceMotionController
        because DeviceController which is extracted as parent class of
        DeviceMotionController and DeviceOrientationController is already added.
        Therefore duplicated implementation can be removed.

        Covered by existing tests.

        * dom/DeviceMotionClient.h:
        * dom/DeviceMotionController.cpp:
        (WebCore::DeviceMotionController::DeviceMotionController):
        (WebCore::DeviceMotionController::didChangeDeviceMotion):
        (WebCore::DeviceMotionController::deviceMotionClient):
        (WebCore::DeviceMotionController::hasLastData):
        (WebCore::DeviceMotionController::getLastEvent):
        (WebCore::DeviceMotionController::from):
        (WebCore):
        * dom/DeviceMotionController.h:
        (WebCore):
        (WebCore::DeviceMotionController::~DeviceMotionController):
        (DeviceMotionController):
        * dom/Document.cpp:
        Remove all implementations which are related DeviceOrientationEvnet and DeviceMotionEvent.
        Because DeviceController checks suspend and stop status of active dom object before dispatchEvent.
        (WebCore::Document::suspendActiveDOMObjects):
        (WebCore::Document::resumeActiveDOMObjects):
        * loader/EmptyClients.h:
        * page/DOMWindow.cpp:
        (WebCore::DOMWindow::addEventListener):
        (WebCore::DOMWindow::removeEventListener):
        (WebCore::DOMWindow::removeAllEventListeners):

2012-11-20  Kentaro Hara  <haraken@chromium.org>

        [V8] Remove V8ParameterBase
        https://bugs.webkit.org/show_bug.cgi?id=102774

        Reviewed by Adam Barth.

        V8ParameterBase is a redundant indirection.
        We can flatten methods of V8ParameterBase to V8Parameter.

        No tests. No change in behavior.

        * bindings/v8/V8StringResource.h:
        (WebCore::V8Parameter::V8Parameter):
        (V8Parameter):
        (WebCore::V8Parameter::toString):
        (WebCore::::prepare):

2012-11-20  Kunihiko Sakamoto  <ksakamoto@chromium.org>

        Use localized date-time format in datetime input
        https://bugs.webkit.org/show_bug.cgi?id=102769

        Reviewed by Kent Tamura.

        Move the implementation of Locale::dateTimeFormatWithSeconds and Locale::dateTimeFormatWithoutSeconds
        to its subclasses and use platform-specific methods to get date-time pattern.
        Because Windows does not provide an API to get date-time pattern. We use fixed "{date} {time}"
        pattern for Windows.

        Test: fast/forms/datetime/datetime-appearance-l10n.html

        * platform/text/LocaleICU.cpp:
        (WebCore::LocaleICU::initializeDateTimeFormat): Retrieve datetime formats too.
        (WebCore::LocaleICU::dateTimeFormatWithSeconds): Added.
        (WebCore):
        (WebCore::LocaleICU::dateTimeFormatWithoutSeconds): Added.
        * platform/text/LocaleICU.h:
        (LocaleICU): Add m_dateTimeFormatWithSeconds and m_dateTimeFormatWithoutSeconds.
        * platform/text/LocaleNone.cpp:
        (LocaleNone):
        (WebCore::LocaleNone::dateTimeFormatWithSeconds): Added. Always returns "dd/MM/yyyyy HH:mm:ss".
        (WebCore):
        (WebCore::LocaleNone::dateTimeFormatWithoutSeconds): Added. Always returns "dd/MM/yyyyy HH:mm".
        * platform/text/PlatformLocale.cpp:
        (WebCore): Remove dateTimeFormatWithSeconds() and dateTimeFormatWithoutSeconds() as these are now pure virtual.
        * platform/text/PlatformLocale.h:
        (Locale): Make dateTimeFormatWithSeconds() and dateTimeFormatWithoutSeconds() pure virtual.
        * platform/text/mac/LocaleMac.h:
        (LocaleMac): Add m_dateTimeFormatWithSeconds and m_dateTimeFormatWithoutSeconds.
        * platform/text/mac/LocaleMac.mm:
        (WebCore::LocaleMac::dateTimeFormatterWithSeconds): Added.
        (WebCore):
        (WebCore::LocaleMac::dateTimeFormatterWithoutSeconds): Added.
        (WebCore::LocaleMac::dateTimeFormatWithSeconds): Added.
        (WebCore::LocaleMac::dateTimeFormatWithoutSeconds): Added.
        * platform/text/win/LocaleWin.cpp:
        (WebCore::LocaleWin::dateTimeFormatWithSeconds): Copied from original Locale::dateTimeFormatWithSeconds().
        (WebCore):
        (WebCore::LocaleWin::dateTimeFormatWithoutSeconds): Copied from original Locale::dateTimeFormatWithoutSeconds().
        * platform/text/win/LocaleWin.h:
        (LocaleWin): Add m_dateTimeFormatWithSeconds and m_dateTimeFormatWithoutSeconds.

2012-11-20  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r135257.
        http://trac.webkit.org/changeset/135257
        https://bugs.webkit.org/show_bug.cgi?id=102777

        Broke Chromium Debug compilation (Requested by yurys on
        #webkit).

        * bindings/v8/DOMDataStore.h:
        (WebCore::DOMDataStore::getNode):

2012-11-20  Vsevolod Vlasov  <vsevik@chromium.org>

        Web Inspector: Revert r133149: breaks revision reverting
        https://bugs.webkit.org/show_bug.cgi?id=102672

        Reviewed by Yury Semikhatsky.

        * inspector/front-end/JavaScriptSourceFrame.js:
        (WebInspector.JavaScriptSourceFrame):
        (WebInspector.JavaScriptSourceFrame.prototype._onFormattedChanged):
        (WebInspector.JavaScriptSourceFrame.prototype._onWorkingCopyCommitted):
        (WebInspector.JavaScriptSourceFrame.prototype._innerSetContent):

2012-11-19  Csaba Osztrogonác  <ossy@webkit.org>

        [Qt][Win] Unreviewed speculative buildfix after r135217.

        * platform/win/WindowsExtras.h:

2012-11-19  Yury Semikhatsky  <yurys@chromium.org>

        Unreviewed. Fix Chromium Win compilation after r135255.
        https://bugs.webkit.org/show_bug.cgi?id=97803

        * WebCore.gypi: removed reference to platform/wince/DragDataWince.cpp which
        was deleted in the aforementioned change.

2012-11-19  Kentaro Hara  <haraken@chromium.org>

        [V8] Merge getCachedWrapper(Node*) into DOMDataStore
        https://bugs.webkit.org/show_bug.cgi?id=102158

         Reviewed by Adam Barth.

        A follow-up patch for r135230. This patch adds a correct ASSERTION.

        No tests. No change in behavior.

        * bindings/v8/DOMDataStore.h:
        (WebCore::DOMDataStore::getNode):

2012-11-19  Kentaro Hara  <haraken@chromium.org>

        [JSC] Replace $implClassName with $interfaceName in CodeGeneratorJS.pm
        https://bugs.webkit.org/show_bug.cgi?id=102757

        Reviewed by Adam Barth.

        In CodeGeneratorJS.pm $implClassName and $interfaceName are
        equivalent. We're using them interchangeably. We should replace
        $implClassName with $interfaceName.

        No tests. No change in behavior.

        * bindings/scripts/CodeGeneratorJS.pm:
        (AddClassForwardIfNeeded):
        (GenerateGetOwnPropertySlotBody):
        (GenerateGetOwnPropertyDescriptorBody):
        (GenerateHeader):
        (GenerateOverloadedFunction):
        (GenerateImplementation):
        (GenerateParametersCheck):
        (GenerateImplementationFunctionCall):
        (NativeToJSValue):

2012-11-19  Patrick Gansterer  <paroga@webkit.org>

        Port DragDataWin.cpp to WinCE
        https://bugs.webkit.org/show_bug.cgi?id=97803

        Reviewed by Brent Fulgham.

        Add two simple #if OS(WINCE) to DragDataWin.cpp, so it can be used by the WinCE port too.

        * PlatformWinCE.cmake:
        * platform/win/DragDataWin.cpp:
        (WebCore::DragData::containsFiles):
        (WebCore::DragData::numberOfFiles):
        (WebCore::DragData::asFilenames):
        * platform/wince/DragDataWinCE.cpp: Removed.

2012-11-19  Pan Deng  <pan.deng@intel.com>

        [Web Inspector] This patch makes script line number search-able in Timeline panel.
        https://bugs.webkit.org/show_bug.cgi?id=101910.

        Reviewed by Pavel Feldman.

        Script line number is visible in Timeline panel, however, not search-able. This patch makes it search-able.

        No new tests. 

        * inspector/front-end/TimelinePanel.js:
        (WebInspector.TimelineRecordListRow.prototype.update):
        (WebInspector.TimelineRecordListRow.testContentMatching):
        * inspector/front-end/TimelinePresentationModel.js:
        (WebInspector.TimelinePresentationModel.Record.prototype._generatePopupContentWithImagePreview):
        (WebInspector.TimelinePresentationModel.Record.prototype._refreshDetails):
        (WebInspector.TimelinePresentationModel.Record.prototype.detailsNode):
        (WebInspector.TimelinePresentationModel.Record.prototype._createSpanWithText):
        (WebInspector.TimelinePresentationModel.Record.prototype._getRecordDetails):

2012-11-19  Elliott Sprehn  <esprehn@chromium.org>

        Remove unneeded null check in NodeRendererFactory::createRendererIfNeeded
        https://bugs.webkit.org/show_bug.cgi?id=102765

        Reviewed by Ojan Vafai.

        If parentRenderer() was null then we return early from
        createRendererIfNeeded() because shouldCreateRenderer() will return false
        so there's no reason to check for it again.

        Additionally if either parentRenderer() or style() is null then
        implementations of rendererIsNeeded() will crash, so add asserts to
        make this assumption more clear.

        No new tests, just simplification.

        * dom/NodeRenderingContext.cpp:
        (WebCore::NodeRendererFactory::createRendererIfNeeded):

2012-11-19  Shinya Kawanaka  <shinyak@chromium.org>

        [Refactoring] Remove WebCore::isInsertionPoint(Node*)
        https://bugs.webkit.org/show_bug.cgi?id=102756

        Reviewed by Hajime Morita.

        Now that WebCore::isInsertionPoint(Node* node) does nothing special. We can remove this.

        No new tests, simple refactoring.

        * dom/ComposedShadowTreeWalker.cpp:
        (WebCore::ComposedShadowTreeWalker::traverseNodeEscapingFallbackContents):
        * dom/ContainerNode.cpp:
        (WebCore::childAttachedAllowedWhenAttachingChildren):
        * html/shadow/ContentDistributor.cpp:
        (WebCore::ContentDistributor::invalidate):
        * html/shadow/InsertionPoint.cpp:
        (WebCore::InsertionPoint::isActive):
        * html/shadow/InsertionPoint.h:
        (WebCore::toInsertionPoint):
        (WebCore::isActiveInsertionPoint):
        (WebCore::isLowerEncapsulationBoundary):
        (WebCore::parentNodeForDistribution):
        * testing/Internals.cpp:
        (WebCore::Internals::isValidContentSelect):

2012-11-19  Shinya Kawanaka  <shinyak@chromium.org>

        [Refactoring] Remove shadowPseudoId() and use setPseudo() in <progress> ElementShadow.
        https://bugs.webkit.org/show_bug.cgi?id=101703

        Reviewed by Hajime Morita.

        We're migrating shadowPseudoId() to pseudo(). We remove shadowPseudoId() from HTMLKeygenElement and use
        setPseudo()/pseudo() instead.

        No new tests, simple refactoring.

        * html/shadow/ProgressShadowElement.cpp:
        (WebCore::ProgressInnerElement::ProgressInnerElement):
        * html/shadow/ProgressShadowElement.h:
        (ProgressInnerElement):
        (WebCore::ProgressBarElement::ProgressBarElement):
        (ProgressBarElement):
        (WebCore::ProgressValueElement::ProgressValueElement):

2012-11-19  Yury Semikhatsky  <yurys@chromium.org>

        Unreviewed. Fix Chromium Debug compilation after r135230.
        https://bugs.webkit.org/show_bug.cgi?id=102158

        Removed ASSERT that used instance field in a static method.

        * bindings/v8/DOMDataStore.h:
        (WebCore::DOMDataStore::getWrapperFromObject):

2012-11-19  Chris Guan  <chris.guan@torchmobile.com.cn>

        [Blackberry] When a frame is being detached, cancel all its network jobs.
        https://bugs.webkit.org/show_bug.cgi?id=102758

        Reviewed by George Staikos.

        I use FrameDestructionObserver to refactor Networkjob code.
        NetworkJob is inheriting from FrameDestructionObserver to be
        aware of frame's destroyed. When a frame is being detached,
        the willDetachPage() can be called in which we can cancel 
        the job. This patch reverted the fix for RIM PR134207 as well.

        Manually test is on 
        "http://www.reuters.com/article/2012/01/27/us-greece-idUSTRE80P0DE20120127"
        which triggers a ping loader.

        No behavior changed, no new layout tests.

        * platform/network/blackberry/NetworkJob.cpp:
        (WebCore::NetworkJob::NetworkJob):
        (WebCore::NetworkJob::initialize):
        (WebCore::NetworkJob::handleNotifyHeaderReceived):
        (WebCore::NetworkJob::startNewJobWithRequest):
        (WebCore::NetworkJob::frameDestroyed):
        (WebCore):
        (WebCore::NetworkJob::willDetachPage):
        * platform/network/blackberry/NetworkJob.h:
        (NetworkJob):
        * platform/network/blackberry/NetworkManager.cpp:
        (WebCore::NetworkManager::startJob):
        * platform/network/blackberry/NetworkManager.h:
        (NetworkManager):
        * platform/network/blackberry/ResourceHandleBlackBerry.cpp:
        (WebCore::ResourceHandle::start):
        (WebCore::ResourceHandle::loadResourceSynchronously):

2012-11-19  Matt Falkenhagen  <falken@chromium.org>

        Implement the new stacking layer needed by the Fullscreen API and the new <dialog> element
        https://bugs.webkit.org/show_bug.cgi?id=84796

        Reviewed by Julien Chaffraix.

        This adds the top layer element stack to Document. The Fullscreen
        specification mandates that we track the ordering of the DOM nodes in
        the top layer, not the renderers. That makes it hard to implement on
        the rendering side only.

        Elements in the top layer get a layer. Layers in the top layer are
        added to the root layer's child list after normal layers and in the
        order of the top layer stack. This way, the top layer appears above
        all other stacking contexts and in the desired order.

        In addition, top layer renderers are added as children of RenderView
        in top layer order. This is to satisfy requirements such as the
        containing block of an element in the top layer is the initial
        containing block. It also allows RenderLayer to know the proper
        stacking order of the layers without going directly from the top layer
        elements to their layers.

        So far, only modal dialog elements can be added to the top layer.
        The plan is to make the Fullscreen API also use the top layer.

        Tests: fast/dom/HTMLDialogElement/top-layer-containing-block.html
               fast/dom/HTMLDialogElement/top-layer-display-none.html
               fast/dom/HTMLDialogElement/top-layer-nesting.html
               fast/dom/HTMLDialogElement/top-layer-stacking-dynamic.html
               fast/dom/HTMLDialogElement/top-layer-stacking.html

        * WebCore.exp.in:
        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::adjustRenderStyle): Elements in the top layer have a stacking context.
        * dom/Document.cpp:
        (WebCore):
        (WebCore::Document::addToTopLayer):
        (WebCore::Document::removeFromTopLayer):
        * dom/Document.h:
        (Document):
        (WebCore::Document::topLayerElements): Add the top layer element stack to Document.
        * dom/Element.cpp:
        (WebCore::Element::removedFrom):
        (WebCore):
        (WebCore::Element::isInTopLayer):
        (WebCore::Element::setIsInTopLayer):
        * dom/Element.h:
        * dom/ElementRareData.h:
        (ElementRareData):
        * dom/Node.cpp:
        (WebCore::Node::detach): Add an exception to the assert since top layer elements and their descendants are moved from their
        regular position in the render tree.
        * dom/NodeRareData.h:
        (WebCore::NodeRareData::NodeRareData):
        (NodeRareData):
        (WebCore::NodeRareData::isInTopLayer):
        (WebCore::NodeRareData::setIsInTopLayer):
        * dom/NodeRenderingContext.cpp:
        (WebCore):
        (WebCore::adjustInsertionPointForTopLayerElement):
        (WebCore::NodeRendererFactory::createRendererIfNeeded): Add renderers for top layer elements as children of RenderView, and
        in top layer stacking order.
        * html/HTMLDialogElement.cpp:
        (WebCore::HTMLDialogElement::close):
        (WebCore::HTMLDialogElement::showModal):
        * rendering/RenderLayer.cpp:
        (WebCore):
        (WebCore::RenderLayer::isInTopLayer):
        (WebCore::RenderLayer::isInTopLayerSubtree):
        (WebCore::RenderLayer::rebuildZOrderLists): Add the top layer stack after normal layer collection.
        (WebCore::RenderLayer::collectLayers): Avoid adding layers for top layer elements during normal layer collection.
        * rendering/RenderLayer.h:
        (RenderLayer):

2012-11-19  Kentaro Hara  <haraken@chromium.org>

        In CodeGeneratorObj.pm we should rename $dataNode to $interface.
        https://bugs.webkit.org/show_bug.cgi?id=102749

        Reviewed by Adam Barth.

        $dataNode is misnamed. It should be renamed to $interface.

        No tests. No change in behavior.

        * bindings/scripts/CodeGeneratorObjC.pm:
        (GenerateInterface):
        (GetParentImplClassName):
        (GetParentAndProtocols):
        (GenerateHeader):
        (GenerateImplementation):

2012-11-19  Kentaro Hara  <haraken@chromium.org>

        In CodeGeneratorV8.pm, we should rename $dataNode to $interface
        https://bugs.webkit.org/show_bug.cgi?id=102747

        Reviewed by Adam Barth.

        $dataNode is misnamed. It should be $interface.

        No tests. No change in behavior.

        * bindings/scripts/CodeGeneratorV8.pm:
        (GenerateInterface):
        (NeedsCustomOpaqueRootForGC):
        (GetGenerateIsReachable):
        (GetCustomIsReachable):
        (GenerateOpaqueRootForGC):
        (GenerateHeader):
        (GetInternalFields):
        (GenerateHeaderCustomInternalFieldIndices):
        (GenerateHeaderNamedAndIndexedPropertyAccessors):
        (GenerateHeaderCustomCall):
        (IsConstructable):
        (GenerateConstructorGetter):
        (GenerateNormalAttrGetter):
        (GenerateReplaceableAttrSetter):
        (GenerateNormalAttrSetter):
        (GenerateOverloadedFunctionCallback):
        (GenerateFunctionCallback):
        (GenerateArgumentsCountCheck):
        (GenerateOverloadedConstructorCallback):
        (GenerateSingleConstructorCallback):
        (GenerateConstructorCallback):
        (GenerateEventConstructorCallback):
        (GenerateTypedArrayConstructorCallback):
        (GenerateNamedConstructorCallback):
        (GenerateBatchedAttributeData):
        (IsStandardFunction):
        (GenerateNonStandardFunction):
        (GenerateImplementationIndexer):
        (GenerateImplementationNamedPropertyGetter):
        (GenerateImplementationCustomCall):
        (GenerateImplementationMasqueradesAsUndefined):
        (GenerateImplementation):
        (GenerateHeaderContentHeader):
        (GenerateImplementationContentHeader):
        (GenerateCallbackHeader):
        (GenerateCallbackImplementation):
        (BaseInterfaceName):
        (GenerateToV8Converters):
        (GetNativeTypeForConversions):
        (GetTypeNameOfExternalTypedArray):
        (WriteData):

2012-11-19  Keishi Hattori  <keishi@webkit.org>

        Move in animation should be disabled until the calendar picker is loaded.
        https://bugs.webkit.org/show_bug.cgi?id=102661

        Reviewed by Kent Tamura.

        On weeks where the first day is in the previous month (e.x. 2013-W01)
        the move in animation happens when you open the calendar picker. This
        patch disables the move in animation until the calendar picker is fully
        loaded.

        No new tests.

        * Resources/pagepopups/calendarPicker.js:
        (CalendarPicker):
        (CalendarPicker.prototype._handleWindowResize):
        (DaysTable.prototype._startMoveInAnimation):

2012-11-19  Elliott Sprehn  <esprehn@chromium.org>

        Clean up loop in NodeRenderingContext::nextRenderer and previousRenderer
        https://bugs.webkit.org/show_bug.cgi?id=102743

        Reviewed by Hajime Morita.

        Clean up while (true) loops in NodeRenderingContext reducing the
        amount of code and the need for ASSERT_NOT_REACHED.

        No new tests, just simplifcation.

        * dom/NodeRenderingContext.cpp:
        (WebCore::NodeRenderingContext::nextRenderer):
        (WebCore::NodeRenderingContext::previousRenderer):

2012-11-19  Shinya Kawanaka  <shinyak@chromium.org>

        [Shadow] attribute pseudo should return empty string instead of null when nothing is specified.
        https://bugs.webkit.org/show_bug.cgi?id=102753

        Reviewed by Hajime Morita.

        The ShadowDOM spec is changed so that attribute 'pseudo' returns empty string instead of null when
        no value is set.

        Test: fast/dom/shadow/pseudo-attribute.html

        * dom/Element.idl:

2012-11-19  Kentaro Hara  <haraken@chromium.org>

        In CodeGeneratorGObject.pm we should rename $dataNode to $interface
        https://bugs.webkit.org/show_bug.cgi?id=102751

        Reviewed by Adam Barth.

        $dataNode is misnamed. It should be $interface.

        No tests. No change in behavior.

        * bindings/scripts/CodeGeneratorGObject.pm:
        (GetParentClassName):
        (GetParentGObjType):
        (GenerateProperties):
        (GenerateFunctions):
        (GenerateCFile):
        (GenerateEventTargetIface):
        (Generate):
        (WriteData):
        (GenerateInterface):

2012-11-19  Kentaro Hara  <haraken@chromium.org>

        In CodeGenerator.pm we should rename $dataNode to $interface
        https://bugs.webkit.org/show_bug.cgi?id=102754

        Reviewed by Adam Barth.

        $dataNode is misnamed. It should be $interface.

        No tests. No change in behavior.

        * bindings/scripts/CodeGenerator.pm:
        (ForAllParents):
        (AddMethodsConstantsAndAttributesFromParentInterfaces):
        (FindSuperMethod):
        (IsConstructorTemplate):
        (LinkOverloadedFunctions):
        (GenerateCompileTimeCheckForEnumsIfNeeded):
        (GetVisibleInterfaceName):
        (IsSubType):

2012-11-19  Kentaro Hara  <haraken@chromium.org>

        In CodeGeneratorCPP.pm we should rename $dataNode to $interface
        https://bugs.webkit.org/show_bug.cgi?id=102752

        Reviewed by Adam Barth.

        $dataNode is misnamed. It should be $interface.

        No tests. No change in behavior.

        * bindings/scripts/CodeGeneratorCPP.pm:
        (GenerateInterface):
        (GetParentImplClassName):
        (GetParent):
        (GenerateHeader):
        (GenerateImplementation):

2012-11-19  Kentaro Hara  <haraken@chromium.org>

        In CodeGeneratorJS.pm we should rename $dataNode to $interface
        https://bugs.webkit.org/show_bug.cgi?id=102748

        Reviewed by Adam Barth.

        $dataNode is misnamed. It should be $interface.

        No tests. No change in behavior.

        * bindings/scripts/CodeGeneratorJS.pm:
        (GenerateInterface):
        (GetParentClassName):
        (GetGenerateIsReachable):
        (GetCustomIsReachable):
        (GenerateGetOwnPropertySlotBody):
        (GenerateGetOwnPropertyDescriptorBody):
        (GenerateHeaderContentHeader):
        (GenerateImplementationContentHeader):
        (ShouldGenerateToJSDeclaration):
        (ShouldGenerateToJSImplementation):
        (GenerateHeader):
        (GenerateAttributesHashTable):
        (GenerateOverloadedFunction):
        (GenerateImplementation):
        (GenerateArgumentsCountCheck):
        (GenerateParametersCheck):
        (GenerateCallbackHeader):
        (GenerateCallbackImplementation):
        (WriteData):
        (GenerateConstructorDeclaration):
        (GenerateConstructorDefinition):
        (IsConstructable):

2012-11-19  Adam Barth  <abarth@webkit.org>

        [V8] Merge getCachedWrapper(Node*) into DOMDataStore
        https://bugs.webkit.org/show_bug.cgi?id=102158

        Reviewed by Eric Seidel.

        This patch is an incremental step towards fully merging the Node code
        path with the general code path. After this patch, at least Nodes flow
        through the same class.

        * Modules/indexeddb/IDBTransactionCoordinator.h:
        * bindings/scripts/CodeGeneratorV8.pm:
        (GenerateHeader):
        (GenerateToV8Converters):
        * bindings/v8/DOMDataStore.h:
        (WebCore::DOMDataStore::getNode):
        (DOMDataStore):
        (WebCore::DOMDataStore::getWrapperFromObject):
        * bindings/v8/DOMWrapperWorld.cpp:
        (WebCore::DOMWrapperWorld::DOMWrapperWorld):
        (WebCore):
        * bindings/v8/DOMWrapperWorld.h:
        (WebCore):
        (DOMWrapperWorld):
        * bindings/v8/V8DOMWrapper.h:
        (V8DOMWrapper):

2012-11-19  Kentaro Hara  <haraken@chromium.org>

        In the IDL parser, we should rename $dataNode to $interface
        https://bugs.webkit.org/show_bug.cgi?id=102746

        Reviewed by Adam Barth.

        $dataNode is misnamed. It should be $interface.

        No tests. No change in behavior.

        * bindings/scripts/IDLParser.pm:
        (parseInterface):
        (parseException):
        (parseAttributeOrOperationRest):
        (parseOperationOrIterator):
        (parseSpecialOperation):
        (parseInterfaceOld):
        (parseExceptionOld):
        (parseAttributeOrOperationOrIteratorOld):
        (parseAttributeOrOperationRestOld):
        (applyMemberList):
        (applyExtendedAttributeList):
        * bindings/scripts/generate-bindings.pl:
        * bindings/scripts/preprocess-idls.pl:
        (checkIDLAttributes):

2012-11-19  Adam Klein  <adamk@chromium.org>

        MutationObserver wrapper should not be collected while still observing
        https://bugs.webkit.org/show_bug.cgi?id=102328

        Reviewed by Adam Barth.

        Use the new opaqueRootForGC helper in V8GCController to put each
        MutationObserver wrapper in the same object group as the nodes it's
        observing.

        Only includes V8 impl for now, JSC impl coming soon.

        Tests: fast/mutation/observer-wrapper-dropoff-transient.html
               fast/mutation/observer-wrapper-dropoff.html

        * bindings/v8/V8GCController.cpp: Add custom code for MutationObserver
        with a FIXME to move this out once we update the opaque roots API.
        * dom/MutationObserver.cpp:
        (WebCore::MutationObserver::getObservedNodes): Plumbing to expose the observed nodes
        to the GC controller.
        (WebCore):
        * dom/MutationObserver.h:
        * dom/MutationObserverRegistration.cpp:
        (WebCore::MutationObserverRegistration::addRegistrationNodesToSet): More plumbing.
        (WebCore):
        * dom/MutationObserverRegistration.h:
        (MutationObserverRegistration):

2012-11-19  Tony Chang  <tony@chromium.org>

        Move more non-settings out of InternalSettings
        https://bugs.webkit.org/show_bug.cgi?id=102711

        Reviewed by Adam Barth.

        Remove userPreferredLanguages, setUserPreferredLanguages and allowRoundingHacks
        from internal.settings since they are already exposed by window.internals (in
        fact, no one calls the internal.settings version).

        Move setUsesOverlayScrollbars from internals.settings to internals because it is
        a global (static) setting and not tied to the lifetime of the Settings object.

        No new tests, there should be no behavior change since this is a refactor.

        * testing/InternalSettings.cpp:
        (WebCore::InternalSettings::reset): Remove custom reset code.
        (WebCore::InternalSettings::setUsesOverlayScrollbars): Add exception code handling to make it more consistent with other settings setters.
        * testing/InternalSettings.h:
        * testing/InternalSettings.idl: Remove unnecessary methods.
        * testing/Internals.cpp:
        (WebCore::Internals::resetToConsistentState): Reset userPreferredLanguages, allowRoundingHacks and overlay scrollbars.
        (WebCore::Internals::userPreferredLanguages): Don't go through InternalSettings.
        (WebCore::Internals::setUserPreferredLanguages): Don't go through InternalSettings.
        (WebCore::Internals::setUsesOverlayScrollbars): Moved from InternalsSettings.
        (WebCore::Internals::allowRoundingHacks): Don't go through InternalSettings.

2012-11-19  David Grogan  <dgrogan@chromium.org>

        IndexedDB: Complex series of opens/deleteDatabase fails an ASSERT
        https://bugs.webkit.org/show_bug.cgi?id=101810

        Reviewed by Tony Chang.

        Tests - storage/indexeddb/deletedatabase-delayed-by-versionchange.html

        * Modules/indexeddb/IDBDatabaseBackendImpl.cpp:
        (WebCore::IDBDatabaseBackendImpl::processPendingCalls):
        The condition tested by this assert is a valid state.

2012-11-19  Peter Wang  <peter.wang@torchmobile.com.cn>

        Web Inspector: [JSC] worker debugger shouldn't stop for "willExecuteProgram" instruction
        https://bugs.webkit.org/show_bug.cgi?id=102637

        Reviewed by Timothy Hatcher.

        Override the interface "willExecuteProgram" to let WorkerScriptDebugServer to avoid to stop for it.

        No new DRT test case. Sorry, so far it seems impossible to write a case to controle the popupped
        worker inspector window.

        * bindings/js/ScriptDebugServer.cpp:
        (WebCore::ScriptDebugServer::createCallFrame):
        (WebCore::ScriptDebugServer::callEvent):
        (WebCore::ScriptDebugServer::willExecuteProgram):
        * bindings/js/ScriptDebugServer.h:
        (ScriptDebugServer):
        * bindings/js/WorkerScriptDebugServer.cpp:
        (WebCore::WorkerScriptDebugServer::willExecuteProgram):
        (WebCore):
        * bindings/js/WorkerScriptDebugServer.h:
        (WorkerScriptDebugServer):

2012-11-19  Pratik Solanki  <psolanki@apple.com>

        For single element arrays use the pointer into the CFDataRef instead of copying data
        https://bugs.webkit.org/show_bug.cgi?id=102306

        Reviewed by Brent Fulgham.

        Address review comments for slightly nicer code.

        * platform/SharedBuffer.cpp:
        (WebCore::SharedBuffer::data):
        * platform/cf/SharedBufferCF.cpp:
        (WebCore::SharedBuffer::singleDataArrayBuffer):

2012-11-19  Chris Rogers  <crogers@google.com>

        Remove empirical bass-boost for HRTF spatialization
        https://bugs.webkit.org/show_bug.cgi?id=102745

        Reviewed by Kenneth Russell.

        Some empirically-based post-processing is being removed so that we'll
        now process with the exact HRTF impulse response measurements.
        Listening tests have determined that this post-processing is not necessary.

        * platform/audio/HRTFElevation.cpp:
        (WebCore::HRTFElevation::calculateKernelsForAzimuthElevation):
        * platform/audio/HRTFKernel.cpp:
        (WebCore::HRTFKernel::HRTFKernel):
        * platform/audio/HRTFKernel.h:
        (WebCore::HRTFKernel::create):
        (HRTFKernel):

2012-11-19  Adam Barth  <abarth@webkit.org>

        DISALLOW_COPY_AND_ASSIGN is not a WebKit macro
        https://bugs.webkit.org/show_bug.cgi?id=102755

        Reviewed by Sam Weinig.

        WTF_MAKE_NONCOPYABLE is the idiom we use in WebKit.  I don't understand
        how this compiles.

        * Modules/indexeddb/IDBBackingStore.h:
        (RecordIdentifier):

2012-11-19  Chris Rogers  <crogers@google.com>

        Implement .detune attribute for BiquadFilterNode
        https://bugs.webkit.org/show_bug.cgi?id=102737

        Reviewed by Kenneth Russell.

        Similar to OscillatorNode, BiquadFilterNode must have a .detune attribute

        Tests changed: webaudio/biquad-lowpass.html

        * Modules/webaudio/BiquadDSPKernel.cpp:
        (WebCore::BiquadDSPKernel::updateCoefficientsIfNecessary):
        * Modules/webaudio/BiquadFilterNode.h:
        (WebCore::BiquadFilterNode::detune):
        * Modules/webaudio/BiquadFilterNode.idl:
        * Modules/webaudio/BiquadProcessor.cpp:
        (WebCore::BiquadProcessor::BiquadProcessor):
        (WebCore::BiquadProcessor::checkForDirtyCoefficients):
        * Modules/webaudio/BiquadProcessor.h:
        (WebCore::BiquadProcessor::parameter4):
        (BiquadProcessor):

2012-11-19  Patrick Gansterer  <paroga@webkit.org>

        [WIN] Add WebCore::getRegistryValue()
        https://bugs.webkit.org/show_bug.cgi?id=97828

        Reviewed by Brent Fulgham.

        The new function adds an abstraction to SHGetValue(), which isn't available on WinCE.
        Changing the existing files allows us to share more code between WinCE and WinNT in a next step.

        * platform/win/MIMETypeRegistryWin.cpp:
        (WebCore::mimeTypeForExtension):
        (WebCore):
        (WebCore::MIMETypeRegistry::getPreferredExtensionForMIMEType):
        * platform/win/WindowsExtras.h:
        (WebCore::getRegistryValue):
        (WebCore):
        * plugins/win/PluginDatabaseWin.cpp:
        (WebCore::addPluginPathsFromRegistry):
        (WebCore::addWindowsMediaPlayerPluginDirectory):
        (WebCore::addQuickTimePluginDirectory):
        (WebCore::addAdobeAcrobatPluginDirectory):
        (WebCore::addJavaPluginDirectory):

2012-11-19  Alpha Lam  <hclam@chromium.org>

        Not reviewed. Build fix for Chromium.

        Added SkTypes.h includes for Windows.

        * platform/graphics/chromium/ImageDecodingStore.h:
        * platform/graphics/chromium/ImageFrameGenerator.h:
        * platform/graphics/chromium/LazyDecodingPixelRef.h:

2012-11-19  Adam Barth  <abarth@webkit.org>

        [V8] Simplify V8DOMWindowShell::getEntered
        https://bugs.webkit.org/show_bug.cgi?id=102156

        Reviewed by Eric Seidel.

        This patch is an incremental step towards merging
        V8DOMWrapper::getCachedWrapper(Node*) with the general case for looking
        up DOM wrappers. In order to merge with the general case, we need to
        get down to calling v8::Context::GetCurrent once, which means we need
        to factor the call to v8::Context::GetEntered out of V8DOMWindowShell.

        As a side-benefit to this change, we can remove some redundant checks
        for isolatedWorldsExist and v8::Context::InContext from callers of
        V8DOMWindowShell::getEntered, including in getCachedWrapper.

        * bindings/v8/DOMDataStore.cpp:
        (WebCore::DOMDataStore::current):
        * bindings/v8/ScriptController.cpp:
        (WebCore::ScriptController::shouldBypassMainWorldContentSecurityPolicy):
        (WebCore::ScriptController::currentWorldContext):
        * bindings/v8/V8DOMWindowShell.h:
        (WebCore::V8DOMWindowShell::isolated):
        (WebCore::V8DOMWindowShell::perContextData):
        (WebCore::V8DOMWindowShell::world):
        (V8DOMWindowShell):
        * bindings/v8/V8DOMWrapper.h:
        (WebCore::V8DOMWrapper::getCachedWrapper):
        * bindings/v8/WorldContextHandle.cpp:
        (WebCore::WorldContextHandle::WorldContextHandle):
        * bindings/v8/custom/V8DocumentCustom.cpp:
        (WebCore::V8Document::dispatchWrapCustom):
        * bindings/v8/custom/V8HTMLDocumentCustom.cpp:
        (WebCore::V8HTMLDocument::dispatchWrapCustom):
        * bindings/v8/custom/V8SVGDocumentCustom.cpp:
        (WebCore::V8SVGDocument::dispatchWrapCustom):
        * bindings/v8/custom/V8XMLHttpRequestConstructor.cpp:
        (WebCore::V8XMLHttpRequest::constructorCallback):

2012-11-19  Kentaro Hara  <haraken@chromium.org>

        Rename idlDocument::classes to idlDocument::interfaces in the IDL parser
        https://bugs.webkit.org/show_bug.cgi?id=102671

        Reviewed by Adam Barth.

        Most part of code generators use 'interface'. The spec uses 'interface'.
        Thus, the IDL parser should use 'interface' instead of 'class'.

        No tests. No change in behavior.

        * bindings/scripts/CodeGenerator.pm:
        (ProcessDocument):
        (AddMethodsConstantsAndAttributesFromParentInterfaces):
        (ParseInterface):
        * bindings/scripts/CodeGeneratorCPP.pm:
        (GenerateImplementation):
        * bindings/scripts/CodeGeneratorJS.pm:
        (GenerateHeader):
        * bindings/scripts/CodeGeneratorObjC.pm:
        (GenerateImplementation):
        * bindings/scripts/CodeGeneratorV8.pm:
        (GenerateHeader):
        (GenerateFunctionCallback):
        * bindings/scripts/IDLParser.pm:
        (Parse):
        (parseModule):
        * bindings/scripts/generate-bindings.pl:

2012-11-19  Eric Carlson  <eric.carlson@apple.com>

        HTMLMediaElement::configureTextTracks should configure all text tracks
        https://bugs.webkit.org/show_bug.cgi?id=102561

        Reviewed by Philippe Normand.

        No new tests, track-mode-not-changed-by-new-track.html was updated to test the changes.

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::textTrackModeChanged): HTMLTrackElement -> TextTrack.
        (WebCore::HTMLMediaElement::willRemoveTrack): Ditto.
        (WebCore::HTMLMediaElement::configureTextTrackGroup): Ditto.
        (WebCore::HTMLMediaElement::configureTextTracks): Ditto.
        (WebCore::HTMLMediaElement::markCaptionAndSubtitleTracksAsUnconfigured): Ditto.
        * html/HTMLMediaElement.h:

        * html/HTMLTrackElement.cpp:
        (WebCore::HTMLTrackElement::HTMLTrackElement): Move hasBeenConfigured down to TextTrack.
        (WebCore::HTMLTrackElement::parseAttribute): isDefault is stored on TextTrack.
        (WebCore::HTMLTrackElement::ensureTrack): LoadableTextTrack constructor doesn't take 
            "default" argument.
        * html/HTMLTrackElement.h:

        * html/track/LoadableTextTrack.cpp:
        (WebCore::LoadableTextTrack::LoadableTextTrack): Initialize m_isDefault to false.
        * html/track/LoadableTextTrack.h: 
        (WebCore::TextTrack::isDefault): Override base class implementation, because a track element
            can be flagged as default.
        (WebCore::TextTrack::setIsDefault): Ditto.

        * html/track/TextTrack.cpp:
        (WebCore::TextTrack::TextTrack): Initialize m_hasBeenConfigured.
        * html/track/TextTrack.h:
        (WebCore::TextTrack::hasBeenConfigured): New, moved from HTMLTrackElement so other code doesn't
            need know what type of track it is calling.
        (WebCore::TextTrack::setHasBeenConfigured): Ditto.
        (WebCore::TextTrack::isDefault): Base, do nothing, implementation because only LoadableTextTrack
            can be "default".
        (WebCore::TextTrack::setIsDefault): Ditto.

2012-11-19  Huang Dongsung  <luxtella@company100.net>

        Coordinated Graphics: refactor syncCanvas to handle the lifecycle clearly.
        https://bugs.webkit.org/show_bug.cgi?id=102664

        Reviewed by Noam Rosenthal.

        As refactoring Coordinated Graphics in WebKit2, code related to
        TextureMapper is changed.

        No new tests. Refactoring only.

        * platform/graphics/qt/GraphicsContext3DQt.cpp:
        (GraphicsContext3DPrivate):
        (WebCore::GraphicsContext3DPrivate::platformLayerSize):
            We need to know the size of a texture mapper platform layer.
        (WebCore):
        * platform/graphics/texmap/TextureMapperBackingStore.cpp:
          Because CoordinatedGraphicsLayer handles the canvas GraphicsSurface
          lifecycle, TextureMapperSurfaceBackingStore does not need to know
          GraphicsSurfaceToken.
        (WebCore::TextureMapperSurfaceBackingStore::setGraphicsSurface):
        (WebCore::TextureMapperSurfaceBackingStore::swapBuffersIfNeeded):
        (WebCore::TextureMapperSurfaceBackingStore::paintToTextureMapper):
        * platform/graphics/texmap/TextureMapperBackingStore.h:
        (TextureMapperSurfaceBackingStore):
        * platform/graphics/texmap/TextureMapperPlatformLayer.h:
        (WebCore::TextureMapperPlatformLayer::platformLayerSize):

2012-11-19  Alpha Lam  <hclam@chromium.org>

        [chromium] Lazy image decoding without cache
        https://bugs.webkit.org/show_bug.cgi?id=102021

        Reviewed by Stephen White.

        Goal of this change is to make image decoding in ImageFrameGenerator
        completely lazy without caching. Image decoding logic is then removed
        from ImageDecodingStore.

        These methods are removed.
        - ImageDecodingStore::lockPixels
        - ImageDecodingStore::unlockPixels

        Instead image decoding and scaling is done in
        ImageFrameGenerator::decodeAndScale().

        Unit tests are updated:
        DeferredImageDecoderTest::drawIntoSkPicture
        DeferredImageDecoderTest::drawScaledIntoSkPicture

        Also covered by layout tests:
        platform/chromium/virtual/deferred

        * platform/graphics/chromium/DeferredImageDecoder.cpp:
        (WebCore::DeferredImageDecoder::createLazyDecodingBitmap):
        * platform/graphics/chromium/ImageDecodingStore.h:
        (ImageDecodingStore):
        * platform/graphics/chromium/ImageFrameGenerator.cpp:
        (WebCore::ImageFrameGenerator::ImageFrameGenerator):
        (WebCore::ImageFrameGenerator::~ImageFrameGenerator):
        (WebCore::ImageFrameGenerator::setData):
        (WebCore::ImageFrameGenerator::decodeAndScale):
        * platform/graphics/chromium/ImageFrameGenerator.h:
        (WebCore::ImageFrameGenerator::create):
        (ImageFrameGenerator):
        * platform/graphics/chromium/LazyDecodingPixelRef.cpp:
        (WebCore::LazyDecodingPixelRef::onLockPixels):
        (WebCore::LazyDecodingPixelRef::onUnlockPixels):
        * platform/graphics/chromium/LazyDecodingPixelRef.h:
        (LazyDecodingPixelRef):

2012-11-19  Abhishek Arya  <inferno@chromium.org>

        Crash in ApplyStyleCommand::cleanupUnstyledAppleStyleSpans.
        https://bugs.webkit.org/show_bug.cgi?id=100150

        Reviewed by Ryosuke Niwa.

        RefPtr startDummySpanAncestor and endDummySpanAncestor since
        they can go away inside fixRangeAndApplyInlineStyle call.

        Test: editing/style/apply-style-crash.html

        * editing/ApplyStyleCommand.cpp:
        (WebCore::ApplyStyleCommand::applyInlineStyle):

2012-11-19  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r135172.
        http://trac.webkit.org/changeset/135172
        https://bugs.webkit.org/show_bug.cgi?id=102710

        Broke some WebKit2 api tests :( (Requested by japhet on
        #webkit).

        * loader/DocumentLoader.cpp:
        (WebCore::DocumentLoader::DocumentLoader):
        (WebCore::DocumentLoader::~DocumentLoader):
        (WebCore::DocumentLoader::finishedLoading):
        (WebCore::DocumentLoader::clearMainResourceLoader):
        (WebCore::DocumentLoader::isLoadingInAPISense):
        (WebCore::DocumentLoader::documentURL):
        (WebCore::DocumentLoader::isLoadingMainResource):
        (WebCore::DocumentLoader::startLoadingMainResource):
        * loader/DocumentLoader.h:
        (DocumentLoader):
        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::FrameLoader):
        (WebCore::FrameLoader::init):
        * loader/FrameLoaderStateMachine.cpp:
        (WebCore::FrameLoaderStateMachine::FrameLoaderStateMachine):
        * loader/FrameLoaderStateMachine.h:
        * loader/MainResourceLoader.cpp:
        (WebCore::shouldLoadAsEmptyDocument):
        (WebCore):
        (WebCore::MainResourceLoader::continueAfterContentPolicy):
        (WebCore::MainResourceLoader::didReceiveResponse):
        (WebCore::MainResourceLoader::didFinishLoading):
        (WebCore::MainResourceLoader::handleEmptyLoad):
        (WebCore::MainResourceLoader::loadNow):
        (WebCore::MainResourceLoader::load):
        * loader/MainResourceLoader.h:
        (MainResourceLoader):

2012-11-19  Tony Chang  <tony@chromium.org>

        Remove 'is' prefix from WebSettings::isWebSecurityEnabled and WebSettings::isSpatialNavigationEnabled
        https://bugs.webkit.org/show_bug.cgi?id=102548

        Reviewed by Adam Barth.

        This allows us to use Settings.in to generate the code for this.

        I didn't rename any of the WebKit API methods with similar names because that would
        probably break consumers.  It turns out that the getter is only called from
        Source/WebKit/efl (most of the time, WebPreferences just sets values on Settings).

        No new tests, just a refactor.

        * WebCore.exp.in: Remove symbols that are now inlined.
        * WebCore.order: Remove symbols that are now inlined.
        * dom/Document.cpp:
        (WebCore::Document::initSecurityContext): Rename.
        * page/Settings.cpp:
        (WebCore::Settings::Settings): Remove code since it will be generated.
        * page/Settings.h:
        (Settings): Remove code since it will be generated.
        * page/Settings.in: Add entries to be generated.
        * page/SpatialNavigation.cpp:
        (WebCore::isSpatialNavigationEnabled): Fix caller.

2012-11-19  Yael Aharon  <yael.aharon@intel.com>

        [EFL][TexMap] Complie error when considering warnings as errors
        https://bugs.webkit.org/show_bug.cgi?id=102705

        Reviewed by Kenneth Rohde Christiansen.

        Change GaussianKernelHalfWidth to unsigned.

        No new tests.

        * platform/graphics/texmap/TextureMapperGL.cpp:
        (WebCore):

2012-11-19  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r134830.
        http://trac.webkit.org/changeset/134830
        https://bugs.webkit.org/show_bug.cgi?id=102701

        ActiveDOMObject is not applicable to MutationObservers due to
        being tied to a Document (Requested by aklein on #webkit).

        * bindings/js/JSMutationObserverCustom.cpp:
        (WebCore::JSMutationObserverConstructor::constructJSMutationObserver):
        * bindings/v8/custom/V8MutationObserverCustom.cpp:
        (WebCore::V8MutationObserver::constructorCallback):
        * dom/MutationObserver.cpp:
        (WebCore::MutationObserver::create):
        (WebCore::MutationObserver::MutationObserver):
        (WebCore::MutationObserver::observationStarted):
        (WebCore::MutationObserver::observationEnded):
        * dom/MutationObserver.h:
        (WebCore):
        * dom/MutationObserver.idl:

2012-11-19  Brady Eidson  <beidson@apple.com>

        NetworkProcess Authentication.
        https://bugs.webkit.org/show_bug.cgi?id=102592

        Reviewed by Alexey Proskuryakov.

        Change an ASSERT that assumes there should be a resource handle which is not true with the NetworkProcess.

        Also export some more stuff.

        No new tests (Platform support, no effect in tested configs).

        * WebCore.exp.in:

        * loader/ResourceLoader.cpp:
        (WebCore::ResourceLoader::didReceiveAuthenticationChallenge): Only ASSERT that the handle has a challenge if
          there is a handle.

2012-11-19  Alec Flett  <alecflett@chromium.org>

        IndexedDB: simplify RecordIdentifier
        https://bugs.webkit.org/show_bug.cgi?id=102018

        Reviewed by Tony Chang.

        Make IDBBackingStore's RecordIdentifier be a simple
        class, existing only as an inline or stack-based instance.
        This makes much of the copy semantics more explicit, and
        removes refcounting from an object that only ever had a refcount
        of 1 or 2.

        No new tests, just a refactor.

        * Modules/indexeddb/IDBBackingStore.cpp:
        (WebCore::IDBBackingStore::putRecord):
        (WebCore::IDBBackingStore::deleteRecord):
        (WebCore::IDBBackingStore::maybeUpdateKeyGeneratorCurrentNumber):
        (WebCore::IDBBackingStore::keyExistsInObjectStore):
        (WebCore::IDBBackingStore::putIndexDataForRecord):
        (WebCore::IDBBackingStore::deleteIndexDataForRecord):
        (WebCore::ObjectStoreKeyCursorImpl::loadCurrentRow):
        (ObjectStoreCursorImpl):
        (WebCore::ObjectStoreCursorImpl::loadCurrentRow):
        (WebCore::IndexKeyCursorImpl::recordIdentifier):
        (WebCore::IndexCursorImpl::recordIdentifier):
        * Modules/indexeddb/IDBBackingStore.h:
        (WebCore::IDBBackingStore::RecordIdentifier::RecordIdentifier):
        (WebCore::IDBBackingStore::RecordIdentifier::isValid):
        (WebCore::IDBBackingStore::RecordIdentifier::reset):
        (RecordIdentifier):
        (IDBBackingStore):
        (WebCore::IDBBackingStore::Cursor::recordIdentifier):
        (WebCore::IDBBackingStore::Cursor::Cursor):
        (Cursor):
        * Modules/indexeddb/IDBObjectStoreBackendImpl.cpp:
        (WebCore):
        (WebCore::IDBObjectStoreBackendImpl::setIndexKeys):
        (WebCore::IDBObjectStoreBackendImpl::putInternal):
        (WebCore::IDBObjectStoreBackendImpl::deleteInternal):

2012-11-19  Alexander Shalamov  <alexander.shalamov@intel.com>

        Improve ContentTypeParser, so that it could be used to validate mime type according to RFC
        https://bugs.webkit.org/show_bug.cgi?id=100927

        Reviewed by Alexey Proskuryakov.

        This patch adds ParsedContentType class that represents contents of parsed
        content type string. isValidContentType function could be used to check if
        format of the content type string is acorrding to RFC 2616 section 4.2.

        * CMakeLists.txt:
        * GNUmakefile.list.am:
        * Target.pri:
        * WebCore.gypi:
        * WebCore.xcodeproj/project.pbxproj:
        * platform/network/MIMEHeader.cpp:
        (WebCore::MIMEHeader::parseHeader):
        * platform/network/ParsedContentType.cpp: Renamed from Source/WebCore/platform/network/ContentTypeParser.cpp.
        (WebCore):
        (EmptyParsedContentType):
        (WebCore::EmptyParsedContentType::setContentType):
        (WebCore::EmptyParsedContentType::setContentTypeParameter):
        (WebCore::skipSpaces):
        (WebCore::isTokenCharacter):
        (WebCore::parseToken):
        (WebCore::parseQuotedString):
        (WebCore::substringForRange):
        (WebCore::parseContentType):
        (WebCore::isValidContentType):
        (WebCore::ParsedContentType::ParsedContentType):
        (WebCore::ParsedContentType::charset):
        (WebCore::ParsedContentType::parameterValueForName):
        (WebCore::ParsedContentType::parameterCount):
        (WebCore::ParsedContentType::setContentType):
        (WebCore::ParsedContentType::setContentTypeParameter):
        * platform/network/ParsedContentType.h: Renamed from Source/WebCore/platform/network/ContentTypeParser.h.
        (WebCore):
        (ParsedContentType):
        (WebCore::ParsedContentType::mimeType):

2012-11-19  Erik Arvidsson  <arv@chromium.org>

        Update DOMException name: InvalidNodeTypeError
        https://bugs.webkit.org/show_bug.cgi?id=102519

        Reviewed by Kentaro Hara.

        Patch 24 of 25 to update DOMException name to match the spec and Firefox.

        No code uses DOMException InvalidNodeTypeError. We do use INVALID_NODE_TYPE_ERR for RangeException. See bug 102515.

        * dom/DOMCoreException.cpp:

2012-11-19  Shinya Kawanaka  <shinyak@chromium.org>

        Changing id, className, or attribute should invalidate distribution
        https://bugs.webkit.org/show_bug.cgi?id=100738

        Reviewed by Dimitri Glazkov.

        When id, className, or attribute is changed, we might have to invalidate distribution.
        However, we don't want to do useless invalidation. So we consult with the RuleFeatureSet of ElementShadow
        to invalidate distribution only if necessary.

        For the code that className is changed, we can share a lot of code between invalidating distribution and
        invalidating style. So we made checkNeedsStyleInvalidationForClassChange a template method, and share it.

        Since attributeChanged() is a hot method, we don't want to make it slow. So we made one function to determine
        whether we have to invalidate distribution, and make it called only if necessary. Also, we've optimized
        shadowOfParentForDistribution() by making isInsertionPoint() de-virtualed. We consuded NodeFlags (IsInsertionPointFlag)
        for this purpose.

        We've measured how this patch makes changing attribute slow. I've measured each code 3 times.
        DOM/ModifyAttribute.html is a micro benchmark which changes attribute a lot of times. The result of this benchmark
        will be the most affected by this patch. However, it's only 2% performance regression.

        DOM/ModifyAttribute.html
        Before this patch:
                median  stdev    min    max    [ms]
          1st    494.0   3.36  490.0  502.0
          2nd    503.5   3.44  497.0  512.0
          3rd    494.0   3.48  488.0  499.0

        After this patch:
                median  stdev  min      max    [ms]
          1st    504.0   2.00  501.0  509.0
          2nd    505.5   3.08  500.0  513.0
          3rd    507.0   2.32  502.0  510.0

        Tests: fast/dom/shadow/distribution-attribute-modified.html
               fast/dom/shadow/distribution-className-modified.html
               fast/dom/shadow/distribution-id-modified.html
               fast/dom/shadow/reprojection-attribute-modified.html
               fast/dom/shadow/reprojection-className-modified.html
               fast/dom/shadow/reprojection-id-modified.html

        * dom/Element.cpp:
        (WebCore::Element::attributeChanged):
        (WebCore::HasSelectorForClassStyleFunctor::HasSelectorForClassStyleFunctor):
        (HasSelectorForClassStyleFunctor):
        (WebCore::HasSelectorForClassStyleFunctor::operator()): Returns true if StyleResolver::hasSelectorForClass returns true.
        (WebCore):
        (WebCore::HasSelectorForClassDistributionFunctor::HasSelectorForClassDistributionFunctor):
        (HasSelectorForClassDistributionFunctor):
        (WebCore::HasSelectorForClassDistributionFunctor::operator()): Returns true if ElementShadow::hasSelectForClass returns true.
        (WebCore::checkFunctorForClassChange):
        (WebCore::checkNeedsStyleInvalidationForClassChange):
        (WebCore::checkNeedsDistributionInvalidationForClassChange): Extracted the implementation to checkFunctorForClassChange.
        (WebCore::Element::shouldInvalidateDistributionWhenAttributeChanged):
        * dom/Element.h:
        (Element):
        * dom/Node.h:
        (WebCore::Node::isInsertionPoint):
        * html/HTMLElement.h:
        (HTMLElement):
        * html/shadow/InsertionPoint.cpp:
        (WebCore::InsertionPoint::InsertionPoint):
        * html/shadow/InsertionPoint.h:
        (InsertionPoint):
        (WebCore::isInsertionPoint):
        (WebCore::shadowOfParentForDistribution):
        (WebCore::resolveReprojection):

2012-11-19  Nate Chapin  <japhet@chromium.org>

        Move empty loading to DocumentLoader, simplify FrameLoader::init()
        https://bugs.webkit.org/show_bug.cgi?id=101512

        Reviewed by Adam Barth.

        No new tests, though several outputs changed because we no longer send resource
            load callbacks for empty loads.

        * loader/DocumentLoader.cpp:
        (WebCore::DocumentLoader::DocumentLoader):
        (WebCore::DocumentLoader::~DocumentLoader):
        (WebCore::DocumentLoader::finishedLoading):
        (WebCore::DocumentLoader::clearMainResourceLoader):
        (WebCore::DocumentLoader::isLoadingInAPISense):
        (WebCore::DocumentLoader::isLoadingMainResource):
        (WebCore::DocumentLoader::maybeLoadEmpty):
        (WebCore):
        (WebCore::DocumentLoader::startLoadingMainResource): Handle empty main resource
             loads directly here.
        * loader/DocumentLoader.h:
        (DocumentLoader):
        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::FrameLoader): Initialize some variables whose values
            were previously being reset in init(). Given that the FrameLoader is in
            an inconsistent state before init() is called anyway, there doesn't seem
            to be a disadvantage to just initializing them to their post-init() values.
        (WebCore::FrameLoader::init): Just call startLoadingMainResource(), instead of
            doing a bunch of direct calls to functions FrameLoader shouldn't know about.
        * loader/FrameLoaderStateMachine.cpp:
        (WebCore::FrameLoaderStateMachine::FrameLoaderStateMachine):
        * loader/FrameLoaderStateMachine.h:
        * loader/MainResourceLoader.cpp: Throughout, remove the concept of an empty load.
        (WebCore::MainResourceLoader::loadNow): This only returned true when an empty
            load got deferred, which won't happen now. Return void and always treat
            as returning false.
        * loader/MainResourceLoader.h:
        (MainResourceLoader):

2012-11-19  Erik Arvidsson  <arv@chromium.org>

        Update DOMException name: TimeoutError
        https://bugs.webkit.org/show_bug.cgi?id=102513

        Reviewed by Kentaro Hara.

        Patch 23 of 25 to update DOMException name to match the spec and Firefox.

        No code uses DOMException TimeoutError. We do use TIMEOUT_ERR for XMLHttpRequestException. See bug 102506.

        * dom/DOMCoreException.cpp:

2012-11-19  Erik Arvidsson  <arv@chromium.org>

        Update DOMException name: DataCloneError
        https://bugs.webkit.org/show_bug.cgi?id=102521

        Reviewed by Kentaro Hara.

        Patch 25 of 25 to update DOMException name to match the spec and Firefox.

        Updated existing tests.

        * dom/DOMCoreException.cpp:

2012-11-19  Tom Hudson  <tomhudson@chromium.org>

        Improve performance of RenderBoxModelObject::paintTranslucentBorderSides()
        https://bugs.webkit.org/show_bug.cgi?id=98660

        Reviewed by Simon Fraser.

        Accumulate edges[i].shouldRender() in a flag field and pass that to paintBorderSides()
        and paintTranslucentBorderSides() so that we don't do unnecessary work.

        If we can avoid setting up and tearing down an unnecessary transparent layer we save
        30ms on some mobile platforms.

        * rendering/RenderBoxModelObject.h:
        * rendering/RenderBoxModelObject.cpp:
        (WebCore::RenderBoxModelObject::paintBorder):
        (WebCore::RenderBoxModelObject::paintTranslucentBorderSides):

2012-11-19  Hans Muller  <hmuller@adobe.com>

        [CSS Exclusions] remove null exclusion shape check from ExclusionShape::createExclusionShape
        https://bugs.webkit.org/show_bug.cgi?id=100765

        Reviewed by Dirk Schulze.

        ExclusionShape::createExclusionShape now ASSERTs that its basicShape argument
        isn't null, since the caller is expected to ensure as much.  No new tests were
        needed since this is a near-trivial cleanup.

        * rendering/ExclusionShape.cpp:
        (WebCore::ExclusionShape::createExclusionShape): This method no longer defends against a null basicShape argument by returning null.

2012-11-19  Sami Kyostila  <skyostil@chromium.org>

        Use device scale factor instead of physical screen DPI for screen DPI
        https://bugs.webkit.org/show_bug.cgi?id=101769

        Reviewed by Adam Barth.

        Media queries call WebCore::Screen::{horizontal,vertical}DPI() to determine
        the dots per CSS inch[1] value for the "screen" media type. On Chromium these
        functions currently return the physical screen DPI, which is wrong. To fix
        this, we remove both of these functions entirely and make media queries use
        the device scale factor multiplied by 96 on all ports.

        [1] http://www.w3.org/TR/css3-mediaqueries/#resolution0

        * page/Screen.cpp:
        (WebCore::Screen::horizontalDPI):
        (WebCore::Screen::verticalDPI):
        * platform/PlatformScreen.h:
        (WebCore):
        * platform/blackberry/PlatformScreenBlackBerry.cpp:
        * platform/chromium/PlatformScreenChromium.cpp:
        * platform/efl/PlatformScreenEfl.cpp:
        * platform/gtk/PlatformScreenGtk.cpp:
        * platform/mac/PlatformScreenMac.mm:
        * platform/qt/PlatformScreenQt.cpp:
        * platform/win/PlatformScreenWin.cpp:
        * platform/wx/ScreenWx.cpp:

2012-11-19  Julien Chaffraix  <jchaffraix@webkit.org>

        Computed grid items' positions shouldn't be using Length
        https://bugs.webkit.org/show_bug.cgi?id=102537

        Reviewed by Tony Chang.

        This change refactors how we store the grid items' position to use
        a new type GridPosition. Length was a temporary type as it supported
        'auto' | <integer> but it was starting to get more and more confusing
        as we were implementing the layout routines.

        No change in behavior.

        * GNUmakefile.list.am:
        * WebCore.gypi:
        * WebCore.vcproj/WebCore.vcproj:
        * WebCore.xcodeproj/project.pbxproj:
        Added the new file to the build systems.

        * rendering/style/RenderStyle.h:
        Updated after the type change. Also made some getters
        return a const reference instead of forcing a copy.

        * rendering/style/StyleGridItemData.h:
        (StyleGridItemData):
        Ditto, also removed a comment about adding a new type.

        * css/CSSComputedStyleDeclaration.cpp:
        (WebCore::valueForGridPosition):
        * css/StyleResolver.cpp:
        (WebCore::createGridPosition):
        (WebCore::StyleResolver::applyProperty):
        * rendering/RenderGrid.cpp:
        (WebCore::RenderGrid::resolveGridPosition):
        Updated these sites after switching to GridPosition.

        * rendering/RenderGrid.h:
        Changed resolveGridPosition signature: it now takes a GridPosition.

        * rendering/style/GridPosition.h: Added.
        (WebCore::GridPosition::GridPosition):
        Default constructor, creates an 'auto' position.

        (WebCore::GridPosition::isPositive):
        (WebCore::GridPosition::type):
        (WebCore::GridPosition::isAuto):
        (WebCore::GridPosition::setIntegerPosition):
        (WebCore::GridPosition::integerPosition):
        Helper functions.

        (WebCore::GridPosition::operator==):
        Required comparison operator for StyleGridItemData.

2012-11-19  Thiago Marcos P. Santos  <thiago.santos@intel.com>

        Apply the resolved viewport rules
        https://bugs.webkit.org/show_bug.cgi?id=95964

        Reviewed by Kenneth Rohde Christiansen.

        This patch implements the CSS Device Adaptation specification. The
        WebKit implementation relies on the already implemented Viewport Meta
        infrastructure to notify the browser of viewport changes.

        The implementation was tests with success on the Qt and EFL ports, but
        basically every port supporting Viewport Meta should be fine.

        The usage of @-webkit-viewport inside media queries (more tests coming
        to map all the corner cases) is currently limited when the media query
        depends on the viewport dimensions itself. Defining the width and height
        based on screen size will fail on ports reporting the screen
        size as the size of the browser window instead of the device screen.

        Tests: css3/device-adapt/opera/cascading-001.xhtml
               css3/device-adapt/opera/cascading-002.xhtml
               css3/device-adapt/opera/cascading-003.xhtml
               css3/device-adapt/opera/cascading-004.xhtml
               css3/device-adapt/opera/constrain-001.xhtml
               css3/device-adapt/opera/constrain-002.xhtml
               css3/device-adapt/opera/constrain-003.xhtml
               css3/device-adapt/opera/constrain-004.xhtml
               css3/device-adapt/opera/constrain-005.xhtml
               css3/device-adapt/opera/constrain-006.xhtml
               css3/device-adapt/opera/constrain-007.xhtml
               css3/device-adapt/opera/constrain-008.xhtml
               css3/device-adapt/opera/constrain-009.xhtml
               css3/device-adapt/opera/constrain-010.xhtml
               css3/device-adapt/opera/constrain-011.xhtml
               css3/device-adapt/opera/constrain-012.xhtml
               css3/device-adapt/opera/constrain-013.xhtml
               css3/device-adapt/opera/constrain-014.xhtml
               css3/device-adapt/opera/constrain-015.xhtml
               css3/device-adapt/opera/constrain-016.xhtml
               css3/device-adapt/opera/constrain-017.xhtml
               css3/device-adapt/opera/constrain-020.xhtml
               css3/device-adapt/opera/syntax-001.xhtml
               css3/device-adapt/opera/syntax-002.xhtml
               css3/device-adapt/opera/syntax-003.xhtml

        * CMakeLists.txt:
        * GNUmakefile.list.am:
        * Target.pri:
        * WebCore.gypi:
        * WebCore.vcproj/WebCore.vcproj:
        * WebCore.xcodeproj/project.pbxproj:
        * css/CSSAllInOne.cpp:
        * css/RuleSet.cpp:
        (WebCore::RuleSet::addRulesFromSheet):
        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::StyleResolver):
        (WebCore::StyleResolver::appendAuthorStyleSheets):
        (WebCore::StyleResolver::~StyleResolver):
        * css/StyleResolver.h:
        (StyleResolver):
        (WebCore::StyleResolver::viewportStyleResolver):
        * css/ViewportStyleResolver.cpp: Added.
        (WebCore):
        (WebCore::ViewportStyleResolver::ViewportStyleResolver):
        (WebCore::ViewportStyleResolver::addViewportRule):
        (WebCore::ViewportStyleResolver::clearDocument):
        (WebCore::ViewportStyleResolver::resolve):
        (WebCore::ViewportStyleResolver::getViewportArgumentValue):
        * css/ViewportStyleResolver.h: Added.
        (WebCore):
        (ViewportStyleResolver):
        (WebCore::ViewportStyleResolver::create):
        * dom/Document.h:
        (WebCore::Document::setViewportArguments):
        * dom/ViewportArguments.cpp:
        (WebCore::compareIgnoringAuto):
        (WebCore):
        (WebCore::ViewportArguments::resolve):
        * dom/ViewportArguments.h:
        (ViewportAttributes):
        (WebCore::ViewportArguments::ViewportArguments):
        (ViewportArguments):
        (WebCore::ViewportArguments::operator==):

2012-11-19  Erik Arvidsson  <arv@chromium.org>

        Update DOMException name: SecurityError
        https://bugs.webkit.org/show_bug.cgi?id=102437

        Reviewed by Kentaro Hara.

        Patch 18 of 25 to update DOMException name to match the spec and Firefox.

        Updated existing tests.

        * dom/DOMCoreException.cpp:

2012-11-19  Erik Arvidsson  <arv@chromium.org>

        Update DOMException name: URLMismatchError
        https://bugs.webkit.org/show_bug.cgi?id=102511

        Reviewed by Kentaro Hara.

        Patch 21 of 25 to update DOMException name to match the spec and Firefox.

        Updated existing tests.

        * dom/DOMCoreException.cpp:
        (WebCore):

2012-11-19  Kihong Kwon  <kihong.kwon@samsung.com>

        Add PROXIMITY_EVENTS feature
        https://bugs.webkit.org/show_bug.cgi?id=102658

        Reviewed by Kentaro Hara.

        Add PROXIMITY_EVENTS feature to xcode project for WebCorei and GNU make.

        No new tests. Just add a new feature.

        * Configurations/FeatureDefines.xcconfig:
        * GNUmakefile.features.am:

2012-11-19  Alexei Filippov  <alph@chromium.org>

        Web Inspector: Dim a component's subitems' color in NMI snapshot
        https://bugs.webkit.org/show_bug.cgi?id=102224

        Reviewed by Yury Semikhatsky.

        * inspector/front-end/NativeMemorySnapshotView.js:
        (WebInspector.NativeSnapshotNode.prototype._createSizeCell):
        * inspector/front-end/nativeMemoryProfiler.css:
        (.native-snapshot-view .data-grid .dimmed div.size-bar):

2012-11-19  Erik Arvidsson  <arv@chromium.org>

        Update DOMException name: NetworkError
        https://bugs.webkit.org/show_bug.cgi?id=102503

        Reviewed by Kentaro Hara.

        Patch 19 of 25 to update DOMException name to match the spec and Firefox.

        No code uses DOMException NetworkError. We do use NETWORK_ERR for XMLHttpRequestException. See bug 102506.

        * dom/DOMCoreException.cpp:

2012-11-19  Ilya Tikhonovsky  <loislo@chromium.org>

        webaudio: clean-up. Replace AudioContext::m_document member with ContextDestructionObserver::scriptExecutionContext().
        https://bugs.webkit.org/show_bug.cgi?id=102649

        Reviewed by Adam Barth.

        AudioContext uses m_document only as a pointer to ScriptExecutionContext.
        It could be safely replaced with ContextDestructionObserver::m_scriptExecutionContext.
        The lifetime of m_scriptExecutionContext is slightly different but it could be adjusted by m_isStopScheduled flag.

        No new tests as there is no new functionality.

        * Modules/webaudio/AudioBufferSourceNode.cpp:
        (WebCore::AudioBufferSourceNode::looping):
        (WebCore::AudioBufferSourceNode::setLooping):
        * Modules/webaudio/AudioContext.cpp:
        (WebCore::AudioContext::AudioContext):
        (WebCore::AudioContext::stop):
        (WebCore::AudioContext::scriptExecutionContext):
        (WebCore::AudioContext::fireCompletionEvent):
        (WebCore::AudioContext::reportMemoryUsage):
        * Modules/webaudio/AudioContext.h:
        (AudioContext):
        * Modules/webaudio/ScriptProcessorNode.cpp:
        (WebCore::ScriptProcessorNode::fireProcessEvent):
        (WebCore::ScriptProcessorNode::scriptExecutionContext):

2012-11-19  Ilya Tikhonovsky  <loislo@chromium.org>

        webaudio: leak: AudioContext objects are leaking. They retain 36mb of shared data.
        https://bugs.webkit.org/show_bug.cgi?id=102356

        Reviewed by Adam Barth.

        A clean-up code was moved from uninitialize to clear method.
        AudioContext marks itself as hasPendingActivity in method constructCommon and unmarks itself in method clear.
        m_isStopScheduled filters out second ActiveDOMObject::stop call.
        markForDeletion appends AudioNode pointer to m_nodesToDelete array if there is no active audio thread.
        adoptRef was added in createOfflineContext method.
        A guard was added into deleteMarkedNodes.

        Test: inspector-protocol/nmi-webaudio-leak-test.html

        * Modules/webaudio/AudioContext.cpp:
        (WebCore::AudioContext::createOfflineContext):
        (WebCore::AudioContext::AudioContext):
        (WebCore::AudioContext::constructCommon):
        (WebCore::AudioContext::~AudioContext):
        (WebCore::AudioContext::clear):
        (WebCore::AudioContext::uninitialize):
        (WebCore::AudioContext::stopDispatch):
        (WebCore::AudioContext::stop):
        (WebCore::AudioContext::markForDeletion):
        (WebCore::AudioContext::scheduleNodeDeletion):
        (WebCore::AudioContext::deleteMarkedNodes):
        * Modules/webaudio/AudioContext.h:
        (AudioContext):
        * bindings/v8/custom/V8AudioContextCustom.cpp:
        (WebCore::V8AudioContext::constructorCallback):
        * inspector/InspectorMemoryAgent.cpp:
        (WebCore::InspectorMemoryAgent::getProcessMemoryDistribution):
        * platform/PlatformMemoryInstrumentation.cpp:
        (WebCore::PlatformMemoryInstrumentation::reportMemoryUsage):
        (WebCore):
        * platform/PlatformMemoryInstrumentation.h:
        (PlatformMemoryInstrumentation):
        (WebCore):

2012-11-19  Erik Arvidsson  <arv@chromium.org>

        Update DOMException name: QuotaExceededError
        https://bugs.webkit.org/show_bug.cgi?id=102512

        Reviewed by Kentaro Hara.

        Patch 22 of 25 to update DOMException name to match the spec and Firefox.

        Updated existing tests.

        * dom/DOMCoreException.cpp:

2012-11-19  Erik Arvidsson  <arv@chromium.org>

        Update DOMException name: AbortError
        https://bugs.webkit.org/show_bug.cgi?id=102508

        Reviewed by Kentaro Hara.

        Patch 20 of 25 to update DOMException name to match the spec and Firefox.

        No code uses DOMException AbortError. We do use ABORT_ERR for XMLHttpRequestException. See bug 102506.

        * dom/DOMCoreException.cpp:

2012-11-19  Kentaro Hara  <haraken@chromium.org>

        Unreviewed, rolling out r135111.
        http://trac.webkit.org/changeset/135111
        https://bugs.webkit.org/show_bug.cgi?id=102356

        The patch caused crashes in several layout tests

        * Modules/webaudio/AudioContext.cpp:
        (WebCore::AudioContext::createOfflineContext):
        (WebCore::AudioContext::AudioContext):
        (WebCore::AudioContext::constructCommon):
        (WebCore::AudioContext::~AudioContext):
        (WebCore::AudioContext::uninitialize):
        (WebCore::AudioContext::uninitializeDispatch):
        (WebCore::AudioContext::stop):
        (WebCore::AudioContext::markForDeletion):
        (WebCore::AudioContext::scheduleNodeDeletion):
        (WebCore::AudioContext::deleteMarkedNodes):
        * Modules/webaudio/AudioContext.h:
        (AudioContext):
        * bindings/v8/custom/V8AudioContextCustom.cpp:
        (WebCore::V8AudioContext::constructorCallback):
        * inspector/InspectorMemoryAgent.cpp:
        (WebCore::InspectorMemoryAgent::getProcessMemoryDistribution):
        * platform/PlatformMemoryInstrumentation.cpp:
        (WebCore):
        * platform/PlatformMemoryInstrumentation.h:

2012-11-19  Kentaro Hara  <haraken@chromium.org>

        Unreviewed, rolling out r135116.
        http://trac.webkit.org/changeset/135116
        https://bugs.webkit.org/show_bug.cgi?id=102649

        Revert this patch to revert r135111, which caused crashes in
        several layout tests

        * Modules/webaudio/AudioBufferSourceNode.cpp:
        (WebCore::AudioBufferSourceNode::looping):
        (WebCore::AudioBufferSourceNode::setLooping):
        * Modules/webaudio/AudioContext.cpp:
        (WebCore::AudioContext::AudioContext):
        (WebCore::AudioContext::stop):
        (WebCore::AudioContext::document):
        (WebCore):
        (WebCore::AudioContext::hasDocument):
        (WebCore::AudioContext::scriptExecutionContext):
        (WebCore::AudioContext::fireCompletionEvent):
        (WebCore::AudioContext::reportMemoryUsage):
        * Modules/webaudio/AudioContext.h:
        (AudioContext):
        * Modules/webaudio/ScriptProcessorNode.cpp:
        (WebCore::ScriptProcessorNode::fireProcessEvent):
        (WebCore::ScriptProcessorNode::scriptExecutionContext):

2012-11-19  Eugene Klyuchnikov  <eustas.bug@gmail.com>

        Web Inspector: Refine JsDoc in DebuggerScriptMapping.js
        https://bugs.webkit.org/show_bug.cgi?id=102673

        Reviewed by Vsevolod Vlasov.

        DebuggerScriptMapping calls public method "addScript" not defined
        in SourceMapping interface.

        To make things clear I've added ScriptSourceMapping interface that
        extends SourceMapping interface by adding "addScript" method.

        * inspector/front-end/SourceMapping.js: Added "ScriptSourceMapping".
        * inspector/front-end/CompilerScriptMapping.js:
        Updated "@implements" to ScriptSourceMapping.
        * inspector/front-end/ResourceScriptMapping.js: Ditto.
        * inspector/front-end/ScriptSnippetModel.js: Ditto.
        * inspector/front-end/DebuggerScriptMapping.js: Updated signatures.
        Removed useless code.

2012-11-19  Tim Horton  <timothy_horton@apple.com>

        Unreviewed, untested build fix.

        * bindings/scripts/IDLParser.pm:
        (parseModule):

2012-11-19  Dongwoo Joshua Im  <dw.im@samsung.com>

        [CSS3] Move CSSPropertyWebkitTextAlignLast into isValidKeywordPropertyAndValue function
        https://bugs.webkit.org/show_bug.cgi?id=102303

        Reviewed by Alexis Menard.

        Move the part which check whether CSSPropertyWebkitTextAlignLast has available value
        into the isValidKeywordPropertyAndValue function, like the same kind of properties.
        This will help speed wise in JS.

        No new functionality, no new tests.

        * css/CSSParser.cpp:
        (WebCore::isValidKeywordPropertyAndValue):
        (WebCore::isKeywordPropertyID):
        (WebCore::CSSParser::parseValue):

2012-11-19  Keishi Hattori  <keishi@webkit.org>

        REGRESSION (r133565): Calendar picker isn't animating when changing month by pressing 't'
        https://bugs.webkit.org/show_bug.cgi?id=102660

        Reviewed by Kent Tamura.

        The calendar picker used to animate when you press 't'.

        No new tests.

        * Resources/pagepopups/calendarPicker.js:
        (DaysTable.prototype.selectRange):

2012-11-19  Kent Tamura  <tkent@chromium.org>

        input.value="" should clear date/time input elements with partial values
        https://bugs.webkit.org/show_bug.cgi?id=102645

        Reviewed by Kentaro Hara.

        Tests: fast/forms/date-multiple-fields/date-multiple-fields-value-set-empty.html
               fast/forms/datetime-multiple-fields/datetime-multiple-fields-value-set-empty.html
               fast/forms/datetimelocal-multiple-fields/datetimelocal-multiple-fields-value-set-empty.html
               fast/forms/month-multiple-fields/month-multiple-fields-value-set-empty.html
               fast/forms/time-multiple-fields/time-multiple-fields-value-set-empty.html
               fast/forms/week-multiple-fields/week-multiple-fields-value-set-empty.html

        * html/BaseMultipleFieldsDateAndTimeInputType.cpp:
        (WebCore::BaseMultipleFieldsDateAndTimeInputType::setValue):
        If the new value is an empty string and sub-fields has values, we should
        update the UI value to the empty state.
        * html/DateTimeFieldsState.h:
        (WebCore::DateTimeFieldsState::hasAnyValue):
        Added. It returns true if one or more sub-fields are not empty.

2012-11-19  Andrey Adaikin  <aandrey@chromium.org>

        Web Inspector: [Canvas] if many canvases are being instrumented show the screenshot of the first one
        https://bugs.webkit.org/show_bug.cgi?id=102522

        Reviewed by Yury Semikhatsky.

        When many canvases are being instrumented we'll want to show replay screenshots for each canvas.
        Meanwhile, show the screenshot of the first one (instead of the last one), as it's likely to be the "main" canvas.
        Drive-by: add more typification for the JS compiler.
        Drive-by: create a new canvas for WebGL replay every time (similar to 2D replay) to avoid problems with resetting the context state.

        * inspector/InjectedScriptCanvasModuleSource.js:
        (.):

2012-11-19  Kentaro Hara  <haraken@chromium.org>

        Remove IDLStructure.pm
        https://bugs.webkit.org/show_bug.cgi?id=102642

        Reviewed by Adam Barth.

        Previously IDLStructure.pm was full of regular expressions to
        parse IDL files. Now a new IDL parser is implemented, IDLStructure.pm
        just contains several data structures for the IDL parser. We can
        move them to IDLParser.pm and thus remove IDLStructure.pm.

        No tests. No change in generated code.

        * CMakeLists.txt:
        * DerivedSources.make:
        * DerivedSources.pri:
        * GNUmakefile.am:
        * WebCore.gyp/WebCore.gyp:
        * WebCore.vcproj/MigrateScripts:
        * WebCore.vcproj/WebCore.vcproj:
        * WebCore.xcodeproj/project.pbxproj:
        * bindings/scripts/IDLParser.pm:
        (Parse):
        (parseInterface):
        (parseException):
        (parseConst):
        (parseAttributeRest):
        (parseOperationRest):
        (parseOptionalOrRequiredArgument):
        (parseExceptionField):
        (parseInterfaceOld):
        (parseExceptionOld):
        (parseAttributeRestOld):
        (applyExtendedAttributeList):
        * bindings/scripts/IDLStructure.pm: Removed.

2012-11-19  Alexei Filippov  <alph@chromium.org>

        Web Inspector: refine time and bytes output formatting
        https://bugs.webkit.org/show_bug.cgi?id=102265

        Reviewed by Yury Semikhatsky.

        Add a space between number and unit, otherwise it's hard to read things like 88B.
        Reduce a number of decimal digits in KB and MB formats. 1023.45KB seems to be too detailed.

        * English.lproj/localizedStrings.js:
        * inspector/front-end/CookiesTable.js:
        (WebInspector.CookiesTable.prototype._createGridNode):
        * inspector/front-end/UIUtils.js:
        (Number.secondsToString):
        (Number.bytesToString):

2012-11-19  Eugene Klyuchnikov  <eustas.bug@gmail.com>

        Web Inspector: Timeline: DomContentLoaded event labeled incorrectly
        https://bugs.webkit.org/show_bug.cgi?id=102383

        Reviewed by Yury Semikhatsky.

        Fixed string presentation of event.

        * inspector/front-end/TimelinePresentationModel.js: Fixed string.

2012-11-19  Kentaro Hara  <haraken@chromium.org>

        Remove IDLStructure.pm
        https://bugs.webkit.org/show_bug.cgi?id=102642

        Reviewed by Adam Barth.

        Previously IDLStructure.pm was full of regular expressions to
        parse IDL files. Now a new IDL parser is implemented, IDLStructure.pm
        just contains several data structures for the IDL parser. We can
        move them to IDLParser.pm and thus remove IDLStructure.pm.

        No tests. No change in generated code.

        * CMakeLists.txt:
        * DerivedSources.make:
        * DerivedSources.pri:
        * GNUmakefile.am:
        * WebCore.gyp/WebCore.gyp:
        * WebCore.vcproj/MigrateScripts:
        * WebCore.vcproj/WebCore.vcproj:
        * WebCore.xcodeproj/project.pbxproj:
        * bindings/scripts/IDLParser.pm:
        (Parse):
        (parseInterface):
        (parseException):
        (parseConst):
        (parseAttributeRest):
        (parseOperationRest):
        (parseOptionalOrRequiredArgument):
        (parseExceptionField):
        (parseInterfaceOld):
        (parseExceptionOld):
        (parseAttributeRestOld):
        (applyExtendedAttributeList):
        * bindings/scripts/IDLStructure.pm: Removed.

2012-11-19  Alexei Filippov  <alph@chromium.org>

        Web Inspector: refine time and bytes output formatting
        https://bugs.webkit.org/show_bug.cgi?id=102265

        Reviewed by Yury Semikhatsky.

        Add a space between number and unit, otherwise it's hard to read things like 88B.
        Reduce a number of decimal digits in KB and MB formats. 1023.45KB seems to be too detailed.

        * English.lproj/localizedStrings.js:
        * inspector/front-end/CookiesTable.js:
        (WebInspector.CookiesTable.prototype._createGridNode):
        * inspector/front-end/UIUtils.js:
        (Number.secondsToString):
        (Number.bytesToString):

2012-11-19  Eugene Klyuchnikov  <eustas.bug@gmail.com>

        Web Inspector: Timeline: DomContentLoaded event labeled incorrectly
        https://bugs.webkit.org/show_bug.cgi?id=102383

        Reviewed by Yury Semikhatsky.

        Fixed string presentation of event.

        * inspector/front-end/TimelinePresentationModel.js: Fixed string.

2012-11-19  Kentaro Hara  <haraken@chromium.org>

        Unreviewed, rolling out r135114.
        http://trac.webkit.org/changeset/135114
        https://bugs.webkit.org/show_bug.cgi?id=102642

        it broke Qt build

        * CMakeLists.txt:
        * DerivedSources.make:
        * DerivedSources.pri:
        * GNUmakefile.am:
        * WebCore.gyp/WebCore.gyp:
        * WebCore.vcproj/MigrateScripts:
        * WebCore.vcproj/WebCore.vcproj:
        * WebCore.xcodeproj/project.pbxproj:
        * bindings/scripts/IDLParser.pm:
        (Parse):
        (parseInterface):
        (parseException):
        (parseConst):
        (parseAttributeRest):
        (parseOperationRest):
        (parseOptionalOrRequiredArgument):
        (parseExceptionField):
        (parseInterfaceOld):
        (parseExceptionOld):
        (parseAttributeRestOld):
        (applyExtendedAttributeList):
        * bindings/scripts/IDLStructure.pm: Added.

2012-11-19  Vsevolod Vlasov  <vsevik@chromium.org>

        Unreviewed inspector closure compilation fix.

        * inspector/front-end/ObjectPropertiesSection.js:
        * inspector/front-end/externs.js:

2012-11-18  Ilya Tikhonovsky  <loislo@chromium.org>

        webaudio: clean-up. Replace AudioContext::m_document member with ContextDestructionObserver::scriptExecutionContext().
        https://bugs.webkit.org/show_bug.cgi?id=102649

        Reviewed by Adam Barth.

        AudioContext uses m_document only as a pointer to ScriptExecutionContext.
        It could be safely replaced with ContextDestructionObserver::m_scriptExecutionContext.
        The lifetime of m_scriptExecutionContext is slightly different but it could be adjusted by m_isStopScheduled flag.

        No new tests as there is no new functionality.

        * Modules/webaudio/AudioBufferSourceNode.cpp:
        (WebCore::AudioBufferSourceNode::looping):
        (WebCore::AudioBufferSourceNode::setLooping):
        * Modules/webaudio/AudioContext.cpp:
        (WebCore::AudioContext::AudioContext):
        (WebCore::AudioContext::stop):
        (WebCore::AudioContext::fireCompletionEvent):
        (WebCore::AudioContext::reportMemoryUsage):
        * Modules/webaudio/AudioContext.h:
        (WebCore::AudioContext::scriptExecutionContext):
        (AudioContext):
        * Modules/webaudio/ScriptProcessorNode.cpp:
        (WebCore::ScriptProcessorNode::fireProcessEvent):
        (WebCore::ScriptProcessorNode::scriptExecutionContext):

2012-11-18  Kentaro Hara  <haraken@chromium.org>

        [V8] Remove unused variables from CodeGeneratorV8.pm
        https://bugs.webkit.org/show_bug.cgi?id=102648

        Reviewed by Adam Barth.

        No tests. No change in generated code.

        * bindings/scripts/CodeGeneratorV8.pm:
        (GenerateInterface):
        (GenerateHeader):
        (GetInternalFields):
        (GenerateNormalAttrGetter):
        (GenerateSingleBatchedAttribute):
        (GenerateImplementationCustomCall):
        (GenerateFunctionCallString):
        (CreateCustomSignature):
        (GetContextEnableFunction):

2012-11-18  Kentaro Hara  <haraken@chromium.org>

        Remove IDLStructure.pm
        https://bugs.webkit.org/show_bug.cgi?id=102642

        Reviewed by Adam Barth.

        Previously IDLStructure.pm was full of regular expressions to
        parse IDL files. Now a new IDL parser is implemented, IDLStructure.pm
        just contains several data structures for the IDL parser. We can
        move them to IDLParser.pm and thus remove IDLStructure.pm.

        No tests. No change in generated code.

        * CMakeLists.txt:
        * DerivedSources.make:
        * DerivedSources.pri:
        * GNUmakefile.am:
        * WebCore.gyp/WebCore.gyp:
        * WebCore.vcproj/MigrateScripts:
        * WebCore.vcproj/WebCore.vcproj:
        * WebCore.xcodeproj/project.pbxproj:
        * bindings/scripts/IDLParser.pm:
        (Parse):
        (parseInterface):
        (parseException):
        (parseConst):
        (parseAttributeRest):
        (parseOperationRest):
        (parseOptionalOrRequiredArgument):
        (parseExceptionField):
        (parseInterfaceOld):
        (parseExceptionOld):
        (parseAttributeRestOld):
        (applyExtendedAttributeList):
        * bindings/scripts/IDLStructure.pm: Removed.

2012-11-18  Kentaro Hara  <haraken@chromium.org>

        [V8] Make more use of $v8Interface in CodeGeneratorV8.pm
        https://bugs.webkit.org/show_bug.cgi?id=102639

        Reviewed by Adam Barth.

        We can replace hard-coded "V8${interfaceName}" with $v8Interface.

        No tests. No change in generated code.

        * bindings/scripts/CodeGeneratorV8.pm:
        (GenerateNormalAttrGetter):
        (GenerateNormalAttrSetter):
        (GenerateFunctionCallback):
        (GenerateNamedConstructorCallback):
        (GenerateImplementationIndexer):
        (GenerateImplementationNamedPropertyGetter):
        (GenerateImplementation):

2012-11-16  Ilya Tikhonovsky  <loislo@chromium.org>

        webaudio: leak: AudioContext objects are leaking. They retain 36mb of shared data.
        https://bugs.webkit.org/show_bug.cgi?id=102356

        Reviewed by Adam Barth.

        A clean-up code was moved from uninitialize to clear method.
        AudioContext marks itself as hasPendingActivity in method constructCommon and unmarks itself in method clear.
        m_isStopScheduled filters out second ActiveDOMObject::stop call.
        markForDeletion appends AudioNode pointer to m_nodesToDelete array if there is no active audio thread.
        adoptRef was added in createOfflineContext method.

        Test: inspector-protocol/nmi-webaudio-leak-test.html

        * Modules/webaudio/AudioContext.cpp:
        (WebCore::AudioContext::createOfflineContext):
        (WebCore::AudioContext::AudioContext):
        (WebCore::AudioContext::constructCommon):
        (WebCore::AudioContext::~AudioContext):
        (WebCore::AudioContext::clear):
        (WebCore::AudioContext::uninitialize):
        (WebCore::AudioContext::stopDispatch):
        (WebCore::AudioContext::stop):
        (WebCore::AudioContext::markForDeletion):
        (WebCore::AudioContext::scheduleNodeDeletion):
        (WebCore::AudioContext::deleteMarkedNodes):
        * Modules/webaudio/AudioContext.h:
        (AudioContext):
        * bindings/v8/custom/V8AudioContextCustom.cpp:
        (WebCore::V8AudioContext::constructorCallback):
        * inspector/InspectorMemoryAgent.cpp:
        (WebCore::InspectorMemoryAgent::getProcessMemoryDistribution):
        * platform/PlatformMemoryInstrumentation.cpp:
        (WebCore::PlatformMemoryInstrumentation::reportMemoryUsage):
        (WebCore):
        * platform/PlatformMemoryInstrumentation.h:
        (PlatformMemoryInstrumentation):
        (WebCore):

2012-11-18  Kunihiko Sakamoto  <ksakamoto@chromium.org>

        min/max/step support for calendar picker on datetime/datetime-local
        https://bugs.webkit.org/show_bug.cgi?id=102628

        Reviewed by Kent Tamura.

        Gray out dates with no allowed values on calendar picker for datetime/datetime-local
        when values are limited by min/max/step attributes.

        Test: platform/chromium/fast/forms/calendar-picker/calendar-picker-datetime-with-step.html

        * Resources/pagepopups/calendarPicker.js:
        (CalendarPicker.prototype._stepMismatch):
        Returns true iff there are any allowed values in the given day.

2012-11-18  Laszlo Gombos  <l.gombos@samsung.com>

        Remove non-existent directories from the make system
        https://bugs.webkit.org/show_bug.cgi?id=102632

        Reviewed by Adam Barth.

        Remove (non-existent) symbian references from the exclude list in gyp project files.

        No new tests as there is no new functionality.

        * WebCore.gyp/WebCore.gyp:

2012-11-18  Patrick Gansterer  <paroga@webkit.org>

        [WIN] Add a IMLangFontLinkType typedef
        https://bugs.webkit.org/show_bug.cgi?id=102584

        Reviewed by Brent Fulgham.

        Add a central typedef for IMLangFontLink(2) to get rid of a bunch of ifdefs.

        * platform/graphics/FontCache.h:
        (WebCore):
        * platform/graphics/win/FontCacheWin.cpp:
        (WebCore::FontCache::getFontLinkInterface):
        (WebCore::getCJKCodePageMasks):
        (WebCore::createMLangFont):
        (WebCore::FontCache::getFontDataForCharacters):
        * platform/graphics/win/SimpleFontDataWin.cpp:
        (WebCore::SimpleFontData::containsCharacters):
        * platform/graphics/wince/FontCacheWinCE.cpp:
        (WebCore):
        (WebCore::FontCache::getFontLinkInterface):
        (WebCore::getCJKCodePageMasks):
        (WebCore::FontCache::getFontDataForCharacters):
        * platform/graphics/wince/FontPlatformData.cpp:
        (WebCore::FontFamilyCodePageInfo::codePages):
        (WebCore::FixedSizeFontData::create):
        * platform/graphics/wince/GlyphPageTreeNodeWinCE.cpp:
        (WebCore::GlyphPage::fill):

2012-11-18  Mike West  <mkwst@chromium.org>

        Web Inspector: Remove unused ConsoleMessage constructor.
        https://bugs.webkit.org/show_bug.cgi?id=102590

        Reviewed by Brent Fulgham.

        We currently have a ConsoleMessage constructor that's unused. Let's
        kill it.

        * inspector/ConsoleMessage.cpp:
        * inspector/ConsoleMessage.h:
        (ConsoleMessage):
            Removing an unused constructor variant.

2012-11-18  Andreas Kling  <akling@apple.com>

        StyledElement: Make handling the "style" attribute a litte faster.
        <http://webkit.org/b/102623>

        Reviewed by Ojan Vafai.

        We know that "style" is never a presentation attribute, so avoid the virtual call to isPresentationAttribute()
        by hoisting the parseAttribute() logic up into attributeChanged().
        Did the same thing with Element::parseAttribute() for consistency.

        Knocks ~0.6% of samples off of the DOM/CreateNodes performance test.

        * dom/Element.cpp:
        (WebCore::Element::attributeChanged):
        * dom/Element.h:
        (WebCore::Element::parseAttribute):
        * dom/StyledElement.cpp:
        (WebCore::StyledElement::attributeChanged):
        * dom/StyledElement.h:
        (StyledElement):

2012-11-18  Laszlo Gombos  <l.gombos@samsung.com>

        [CMake] Consolidate common input files
        https://bugs.webkit.org/show_bug.cgi?id=101632

        Reviewed by Rob Buis.

        Consolidate and sort the list of files, move common source files
        into CMakeLists.txt from the port specific files.

        No new tests as there is no new functionality.

        * CMakeLists.txt:
        * PlatformBlackBerry.cmake:
        * PlatformEfl.cmake:
        * PlatformWinCE.cmake:

2012-11-18  Andreas Kling  <akling@apple.com>

        Tighten small SharedBuffers by reserving the exact amount of space needed.
        <http://webkit.org/b/102625>

        Reviewed by Anders Carlsson.

        When adding the first chunk to a small (<4096 bytes) SharedBuffer, reserve the exact
        amount of space needed instead of leaving it to Vector<char>::append().

        1.86MB progression on Membuster3.

        * platform/SharedBuffer.cpp:
        (WebCore::SharedBuffer::append):

2012-11-18  Ryosuke Niwa  <rniwa@webkit.org>

        Make namedItem return a node list only in HTMLFormControlsCollection and HTMLOptionsCollection
        https://bugs.webkit.org/show_bug.cgi?id=101311

        Reviewed by Darin Adler.

        Introduce two new interfaces HTMLFormControlsCollection and HTMLOptionsCollection to be used by form.elements
        and select.options. These two interfaces have the named getter and namedItem that returns a live NodeList when
        there are multiple matches. Introducing these two interfaces allow us to make "regular" HTMLCollection's named
        getter and namedItem return exactly one node or null as specified in HTML5:
        http://www.whatwg.org/specs/web-apps/current-work/multipage/common-dom-interfaces.html#collections-0

        Unfortunately, HTMLOptionsCollection still has a bug that its named getter and namedItem returns
        a static NodeList instead of a live NodeList (DynamicNodeList) at the moment.

        Also got rid of Document::objects since it's not exposed in IDL or called anywhere.

        Test: fast/dom/html-collections-namedItem.html

        * CMakeLists.txt:
        * DerivedSources.cpp:
        * DerivedSources.make:
        * DerivedSources.pri:
        * GNUmakefile.list.am:
        * Target.pri:
        * UseJSC.cmake:
        * UseV8.cmake:
        * WebCore.gypi:
        * WebCore.vcproj/WebCore.vcproj:
        * WebCore.xcodeproj/project.pbxproj:
        * bindings/js/JSBindingsAllInOne.cpp:
        * bindings/js/JSHTMLAllCollectionCustom.cpp:
        (WebCore::getNamedItems):
        * bindings/js/JSHTMLCollectionCustom.cpp:
        (WebCore::JSHTMLCollection::nameGetter): Now returns exactly one node or null.
        (WebCore::toJS):
        * bindings/js/JSHTMLFormControlsCollectionCustom.cpp: Added.
        (WebCore::getNamedItems): Returns RadioNodeList when there are multiple matches.
        (WebCore::JSHTMLFormControlsCollection::canGetItemsForName):
        (WebCore::JSHTMLFormControlsCollection::nameGetter):
        (WebCore::JSHTMLFormControlsCollection::namedItem):
        * bindings/js/JSHTMLOptionsCollectionCustom.cpp:
        (WebCore::getNamedItems): Returns a static NodeList when there are multiple matches.
        This is a bug. It should be a live NodeList instead.
        (WebCore::JSHTMLOptionsCollection::canGetItemsForName):
        (WebCore::JSHTMLOptionsCollection::nameGetter):
        (WebCore::JSHTMLOptionsCollection::namedItem):
        * bindings/js/CodeGeneratorJS.pm: Include JSNode.js for all HTML*Collection interfaces for simplicity.
        * bindings/js/CodeGeneratorV8.pm: HTMLOptionsCollection now inherits from HTMLCollection. See
        http://www.whatwg.org/specs/web-apps/current-work/multipage/common-dom-interfaces.html#htmloptionscollection
        * bindings/v8/custom/V8HTMLAllCollectionCustom.cpp: Pass in isolate when we can.
        (WebCore::getNamedItems): Added a comment about how we should be returning
        a HTMLCollection when there are multiple matches.
        (WebCore::getItem):
        (WebCore::V8HTMLAllCollection::namedPropertyGetter):
        (WebCore::V8HTMLAllCollection::namedItemCallback):
        * bindings/v8/custom/V8HTMLCollectionCustom.cpp: Now returns exactly one node or null.
        (WebCore::V8HTMLCollection::namedPropertyGetter):
        (WebCore::toV8):
        * bindings/v8/custom/V8HTMLFormControlsCollectionCustom.cpp: Added.
        (WebCore::getNamedItems): Returns RadioNodeList when there are multiple matches.
        (WebCore::V8HTMLFormControlsCollection::namedPropertyGetter):
        (WebCore::V8HTMLFormControlsCollection::namedItemCallback):
        * bindings/v8/custom/V8HTMLOptionsCollectionCustom.cpp:
        (WebCore::getNamedItems): Returns a static NodeList when there are multiple matches.
        This is a bug. It should be a live NodeList instead.
        (WebCore::V8HTMLOptionsCollection::namedPropertyGetter):
        (WebCore::V8HTMLOptionsCollection::namedItemCallback):
        * dom/Document.cpp: Removed Document::objects since it was not used anywhere.
        * dom/Document.h:
        (Document):
        * dom/Element.cpp:
        (WebCore::ElementRareData::ensureCachedHTMLCollection): form.elements should instantiate
        a HTMLFormControlsCollection instead of a HTMLCollection.
        * html/CollectionType.h:
        * html/HTMLCollection.idl: Removed [Custom] since namedItem is a regular function call now.
        * html/HTMLFieldSetElement.cpp:
        * html/HTMLFieldSetElement.h:
        * html/HTMLFormCollection.cpp: Removed.
        * html/HTMLFormCollection.h: Removed.
        * html/HTMLFormControlsCollection.cpp: Copied from Source/WebCore/html/HTMLFormCollection.cpp.
        (WebCore::HTMLFormControlsCollection::HTMLFormControlsCollection):
        (WebCore::HTMLFormControlsCollection::create):
        (WebCore::HTMLFormControlsCollection::~HTMLFormControlsCollection):
        (WebCore::HTMLFormControlsCollection::formControlElements):
        (WebCore::HTMLFormControlsCollection::formImageElements):
        (WebCore::HTMLFormControlsCollection::virtualItemAfter):
        (WebCore::HTMLFormControlsCollection::namedItem):
        (WebCore::HTMLFormControlsCollection::updateNameCache):
        * html/HTMLFormControlsCollection.h: Copied from Source/WebCore/html/HTMLFormCollection.h.
        (HTMLFormControlsCollection):
        * html/HTMLFormControlsCollection.idl: Added.
        * html/HTMLFormElement.cpp:
        * html/HTMLFormElement.h:
        * html/HTMLOptionsCollection.idl:

2012-11-18  Kentaro Hara  <haraken@chromium.org>

        [V8] Rename $className to $v8InterfaceName
        https://bugs.webkit.org/show_bug.cgi?id=102487

        Reviewed by Adam Barth.

        In CodeGeneratorV8.pm, $className is always "V8$interfaceName".
        We should rename $className to $v8InterfaceName. Also we can
        remove GetCallbackClassName().

        No tests. No change in behavior.

        * bindings/scripts/CodeGeneratorV8.pm:
        (GenerateHeader):
        (GetHeaderClassInclude):
        (GenerateDomainSafeFunctionGetter):
        (GenerateDomainSafeFunctionSetter):
        (GenerateParametersCheck):
        (GenerateImplementation):
        (GenerateHeaderContentHeader):
        (GenerateImplementationContentHeader):
        (GenerateCallbackHeader):
        (GenerateCallbackImplementation):
        (GenerateToV8Converters):
        (GetPassRefPtrType):

2012-11-18  Kentaro Hara  <haraken@chromium.org>

        [V8] Remove GetTypeFromSignature() from CodeGeneratorV8.pm
        https://bugs.webkit.org/show_bug.cgi?id=102499

        Reviewed by Adam Barth.

        No tests. No change in behavior.

        * bindings/scripts/CodeGeneratorV8.pm:
        (GenerateNormalAttrGetter):
        (GenerateNormalAttrSetter):
        (GenerateParametersCheckExpression):
        (GenerateParametersCheck):
        (GenerateFunctionCallString):
        (GetNativeTypeFromSignature):
        (TranslateParameter):
        (TypeCanFailConversion):
        (JSValueToNative):
        (NativeToJSValue):

2012-11-18  Kentaro Hara  <haraken@chromium.org>

        Remove GenerateModule() from all code generators
        https://bugs.webkit.org/show_bug.cgi?id=102490

        Reviewed by Adam Barth.

        WebKit IDL files no longer support modules. The Web IDL spec
        no longer supports modules. We can remove it from code generators.

        No tests. No change in behavior.

        * bindings/scripts/CodeGenerator.pm:
        (ProcessDocument):
        * bindings/scripts/CodeGeneratorCPP.pm:
        * bindings/scripts/CodeGeneratorGObject.pm:
        * bindings/scripts/CodeGeneratorJS.pm:
        * bindings/scripts/CodeGeneratorObjC.pm:
        * bindings/scripts/CodeGeneratorV8.pm:

2012-11-18  Kentaro Hara  <haraken@chromium.org>

        [V8] Get rid of unused functions and inline redundant functions in CodeGeneratorV8.pm
        https://bugs.webkit.org/show_bug.cgi?id=102497

        Reviewed by Adam Barth.

        No tests. No change in behavior.

        * bindings/scripts/CodeGeneratorV8.pm:
        (GenerateDomainSafeFunctionGetter):
        (GenerateNormalAttrGetter):
        (GenerateFunctionCallString):

2012-11-18  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r135074.
        http://trac.webkit.org/changeset/135074
        https://bugs.webkit.org/show_bug.cgi?id=102619

        Made most layout tests crash. (Requested by rakuco on
        #webkit).

        * PlatformEfl.cmake:
        * platform/graphics/efl/GraphicsContext3DEfl.cpp:
        (WebCore::GraphicsContext3D::create):
        (WebCore::GraphicsContext3D::GraphicsContext3D):
        (WebCore::GraphicsContext3D::~GraphicsContext3D):
        (WebCore::GraphicsContext3D::makeContextCurrent):
        (WebCore::GraphicsContext3D::setContextLostCallback):
        * platform/graphics/efl/GraphicsContext3DPrivate.cpp:
        (WebCore::GraphicsContext3DPrivate::GraphicsContext3DPrivate):
        (WebCore::GraphicsContext3DPrivate::~GraphicsContext3DPrivate):
        (WebCore::GraphicsContext3DPrivate::createSurface):
        (WebCore::GraphicsContext3DPrivate::setCurrentGLContext):
        (WebCore::GraphicsContext3DPrivate::platformGraphicsContext3D):
        (WebCore::GraphicsContext3DPrivate::makeContextCurrent):
        (WebCore::GraphicsContext3DPrivate::createGraphicsSurfaces):
        (WebCore::GraphicsContext3DPrivate::copyToGraphicsSurface):
        (WebCore::GraphicsContext3DPrivate::graphicsSurfaceToken):
        * platform/graphics/efl/GraphicsContext3DPrivate.h:
        (GraphicsContext3DPrivate):
        * platform/graphics/opengl/GLDefs.h: Removed.
        * platform/graphics/opengl/GLPlatformContext.cpp: Removed.
        * platform/graphics/opengl/GLPlatformContext.h: Removed.
        * platform/graphics/opengl/GLPlatformSurface.cpp: Removed.
        * platform/graphics/opengl/GLPlatformSurface.h: Removed.
        * platform/graphics/surfaces/glx/GLXContext.cpp: Removed.
        * platform/graphics/surfaces/glx/GLXContext.h: Removed.
        * platform/graphics/surfaces/glx/GLXSurface.cpp: Removed.
        * platform/graphics/surfaces/glx/GLXSurface.h: Removed.

2012-11-18  Antti Koivisto  <antti@apple.com>

        REGRESSION(r129644): User StyleSheet not applying
        https://bugs.webkit.org/show_bug.cgi?id=102110

        Reviewed by Andreas Kling.

        Injected stylesheets added as UserStyleAuthorLevel fail to apply. r129644 implicitly assumed that
        such things don't exists but on Chromium addUserStyleSheet() confusingly uses them.
        
        The patch adds injected author stylesheets to DocumentStyleSheetCollection::activeStyleSheets().
        It also generally cleans up the code around injected and user stylesheets.

        Tests: userscripts/user-script-and-stylesheet.html
               userscripts/user-stylesheet-invalidate.html

        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::StyleResolver):
        (WebCore::StyleResolver::collectRulesFromUserStyleSheets):
        (WebCore::collectCSSOMWrappers):
        * css/StyleResolver.h:
        (StyleResolver):
        * dom/Document.cpp:
        (WebCore::Document::setCompatibilityMode):
        * dom/DocumentStyleSheetCollection.cpp:
        (WebCore::DocumentStyleSheetCollection::DocumentStyleSheetCollection):
        (WebCore::DocumentStyleSheetCollection::~DocumentStyleSheetCollection):
        (WebCore::DocumentStyleSheetCollection::injectedUserStyleSheets):
        (WebCore):
        (WebCore::DocumentStyleSheetCollection::injectedAuthorStyleSheets):
        (WebCore::DocumentStyleSheetCollection::updateInjectedStyleSheetCache):
        (WebCore::DocumentStyleSheetCollection::invalidateInjectedStyleSheetCache):
        (WebCore::DocumentStyleSheetCollection::addUserSheet):
        (WebCore::DocumentStyleSheetCollection::updateActiveStyleSheets):
        (WebCore::DocumentStyleSheetCollection::reportMemoryUsage):
        * dom/DocumentStyleSheetCollection.h:
        (WebCore::DocumentStyleSheetCollection::documentUserStyleSheets):
        (DocumentStyleSheetCollection):
        * page/PageGroup.cpp:
        (WebCore::PageGroup::addUserStyleSheetToWorld):
        (WebCore::PageGroup::removeUserStyleSheetFromWorld):
        (WebCore::PageGroup::removeUserStyleSheetsFromWorld):
        (WebCore::PageGroup::removeAllUserContent):
        (WebCore::PageGroup::invalidatedInjectedStyleSheetCacheInAllFrames):
        * page/PageGroup.h:
        (PageGroup):

2012-11-18  Adam Barth  <abarth@webkit.org>

        Unreviewed.

        Update run-bindings-tests baselines after
        http://trac.webkit.org/changeset/135063

        * bindings/scripts/test/JS/JSTestActiveDOMObject.h:
        (JSTestActiveDOMObjectOwner):
        * bindings/scripts/test/JS/JSTestCustomNamedGetter.h:
        (JSTestCustomNamedGetterOwner):
        * bindings/scripts/test/JS/JSTestEventConstructor.h:
        (JSTestEventConstructorOwner):
        * bindings/scripts/test/JS/JSTestEventTarget.h:
        (JSTestEventTargetOwner):
        * bindings/scripts/test/JS/JSTestException.h:
        (JSTestExceptionOwner):
        * bindings/scripts/test/JS/JSTestInterface.h:
        (JSTestInterfaceOwner):
        * bindings/scripts/test/JS/JSTestMediaQueryListListener.h:
        (JSTestMediaQueryListListenerOwner):
        * bindings/scripts/test/JS/JSTestNamedConstructor.h:
        (JSTestNamedConstructorOwner):
        * bindings/scripts/test/JS/JSTestObj.h:
        (JSTestObjOwner):
        * bindings/scripts/test/JS/JSTestOverloadedConstructors.h:
        (JSTestOverloadedConstructorsOwner):
        * bindings/scripts/test/JS/JSTestSerializedScriptValueInterface.h:
        (JSTestSerializedScriptValueInterfaceOwner):

2012-11-18  Simon Fraser  <simon.fraser@apple.com>

        Make convertToLayerCoords iterative, rather than recursive
        https://bugs.webkit.org/show_bug.cgi?id=102618

        Reviewed by Antti Koivisto.

        RenderLayer::convertToLayerCoords() is a hot function on profiles.
        Change it to be iterative, rather than recursive, so that the
        bulk of the function can be inlined.
        
        Was tested with assertions against the old code during development.

        * rendering/RenderLayer.cpp:
        (WebCore::accumulateOffsetTowardsAncestor):
        (WebCore::RenderLayer::convertToLayerCoords):

2012-11-18  Andreas Kling  <akling@apple.com>

        Inline the StyledElement constructor.
        <http://webkit.org/b/102615>

        Reviewed by Antti Koivisto.

        StyledElement sits between Element and HTMLElement in the inheritance chain, and both of those are inline. 
        Knocks ~0.4% of samples off of the DOM/CreateNodes performance test.

        * dom/StyledElement.cpp:
        * dom/StyledElement.h:
        (WebCore::StyledElement::StyledElement):

2012-11-18  Andreas Kling  <akling@apple.com>

        HTMLMediaElement: Skip unnecessary attribute lookup in parsing of "src" attribute.
        <http://webkit.org/b/102614>

        Reviewed by Anders Carlsson.

        When parsing the "src" attribute, we don't need to look it up with fastHasAttribute()
        to know if it's present. If it's not present, 'value' argument will be null.

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::parseAttribute):

2012-11-18  Kondapally Kalyan  <kalyan.kondapally@intel.com>

        [EFL] Refactor GraphicsContext3DEFL.
        https://bugs.webkit.org/show_bug.cgi?id=101291.

        Reviewed by Kenneth Rohde Christiansen.

        GraphicsContext3DEfl creates GraphicsContext3DPrivate, which acts as its platform Layer.
        GraphicsContext3DPrivate needs to handle the following cases:
        1) To provide an off-screen buffer for accelerated composition.
        2) Render to a current context.
        3) To render directly to host window. (currently not supported.)

        Before this patch Evas was used to provide us an off-screen context and buffer. GLX was used in
        the other supported case. Evas acts as a glue layer to provide us with appropriate
        GL bindings (OpenGL functions), GL context and drawable (surface/offscreenbuffer).
        However, primitive rendering is handled by TextureMapper and OpenGLShims is used to load the needed GL functions.

        It would be for our advantage to be able to take in to use any optimisations/extensions
        provided by underlying drivers, specific to a platform (e.g. GLX_MESA_copy_sub_buffer etc.).
        This patch introduces an abstraction layer to make it easy to add support for any GL backend (GLX, EGL etc.)
        and do any platform specific optimizations as needed without complicating GraphicsContext3DPrivate class.
        Two new classes are added with this implementation, GLPlatformContext and GLPlatformSurface.
        GraphicsContext3DPrivate would create and own a GLPlatformContext and GLPlatformSurface.

        GLPlatformContext encapsulates an OpenGL context hiding any platform specific management.
        It uses GL extension ARB_robustness (when available) to detect driver resets.
        It defines a simple interface for things that need to be handled by the context. Support
        for multi-threaded usage and shared context-group would be added later.

        GLPlatformSurface encapsulates an OpenGL drawable hiding any platform specific management.
        It defines a simple interface for things that need to be handled by the surface.
        It creates an off-screen rendering area. Any GLPlatformContext (compatible with the surface)
        can be used to render into this off-screen area.

        This patch also adds GLX implementation. To keep the patch to minimum EGL support would be added in another changeset.

        * PlatformEfl.cmake:
        * platform/graphics/efl/GraphicsContext3DEfl.cpp:
        (WebCore::GraphicsContext3D::create):
        (WebCore::GraphicsContext3D::GraphicsContext3D):
        (WebCore::GraphicsContext3D::~GraphicsContext3D):
        (WebCore::GraphicsContext3D::makeContextCurrent):
        (WebCore::GraphicsContext3D::setContextLostCallback):
        * platform/graphics/efl/GraphicsContext3DPrivate.cpp:
        (WebCore::GraphicsContext3DPrivate::GraphicsContext3DPrivate):
        (GraphicsContext3DPrivate::~GraphicsContext3DPrivate):
        (GraphicsContext3DPrivate::releaseResources):
        (GraphicsContext3DPrivate::setContextLostCallback):
        (GraphicsContext3DPrivate::platformGraphicsContext3D):
        (GraphicsContext3DPrivate::makeContextCurrent):
        (GraphicsContext3DPrivate::createGraphicsSurfaces):
        (GraphicsContext3DPrivate::copyToGraphicsSurface):
        (GraphicsContext3DPrivate::graphicsSurfaceToken):
        * platform/graphics/efl/GraphicsContext3DPrivate.h:
        (GraphicsContext3DPrivate):
        * platform/graphics/opengl/GLDefs.h: Added.
        (WebCore):
        * platform/graphics/opengl/GLPlatformContext.cpp: Added.
        (WebCore):
        (WebCore::GLPlatformContext::createContext):
        (WebCore::GLPlatformContext::createOffScreenContext):
        (WebCore::GLPlatformContext::createCurrentContextWrapper):
        (WebCore::GLPlatformContext::GLPlatformContext):
        (WebCore::GLPlatformContext::~GLPlatformContext):
        (WebCore::GLPlatformContext::makeCurrent):
        (WebCore::GLPlatformContext::isValid):
        (WebCore::GLPlatformContext::releaseCurrent):
        (WebCore::GLPlatformContext::handle):
        (WebCore::GLPlatformContext::isCurrentContext):
        (WebCore::GLPlatformContext::initialize):
        (WebCore::GLPlatformContext::getCurrent):
        (WebCore::GLPlatformContext::platformMakeCurrent):
        (WebCore::GLPlatformContext::platformReleaseCurrent):
        (WebCore::GLPlatformContext::destroy):
        * platform/graphics/opengl/GLPlatformContext.h: Added.
        (WebCore):
        (GLPlatformContext):
        * platform/graphics/opengl/GLPlatformSurface.cpp: Added.
        (WebCore):
        (WebCore::GLPlatformSurface::createOffscreenSurface):
        (WebCore::GLPlatformSurface::createTransportSurface):
        (WebCore::GLPlatformSurface::GLPlatformSurface):
        (WebCore::GLPlatformSurface::~GLPlatformSurface):
        (WebCore::GLPlatformSurface::handle):
        (WebCore::GLPlatformSurface::geometry):
        (WebCore::GLPlatformSurface::sharedDisplay):
        (WebCore::GLPlatformSurface::configuration):
        (WebCore::GLPlatformSurface::swapBuffers):
        (WebCore::GLPlatformSurface::copyTexture):
        (WebCore::GLPlatformSurface::updateContents):
        (WebCore::GLPlatformSurface::setGeometry):
        (WebCore::GLPlatformSurface::destroy):
        * platform/graphics/opengl/GLPlatformSurface.h: Added.
        (WebCore):
        (GLPlatformSurface):
            GLXOffScreenContext creates an off-screen context. This is used when
            renderstyle is RenderOffscreen.
            It uses GL extension GLX_ARB_create_context (when available)
            to create a context else falls back to use glXCreateNewContext.
        * platform/graphics/surfaces/glx/GLXContext.cpp: Added.
        (WebCore):
        (WebCore::initializeARBExtensions):
        (WebCore::GLXOffScreenContext::GLXOffScreenContext):
        (WebCore::GLXOffScreenContext::initialize):
        (WebCore::GLXOffScreenContext::~GLXOffScreenContext):
        (WebCore::GLXOffScreenContext::isCurrentContext):
        (WebCore::GLXOffScreenContext::platformMakeCurrent):
        (WebCore::GLXOffScreenContext::platformReleaseCurrent):
        (WebCore::GLXOffScreenContext::freeResources):
        (WebCore::GLXOffScreenContext::destroy):
            GLXCurrentContextWrapper acts as a wrapper for current context.
            This is used when renderstyle is RenderToCurrentGLContext.
        * platform/graphics/surfaces/glx/GLXContext.h: Added.
        (WebCore):
        (GLXCurrentContextWrapper):
        (WebCore::GLXCurrentContextWrapper::GLXCurrentContextWrapper):
        (WebCore::GLXCurrentContextWrapper::~GLXCurrentContextWrapper):
        (GLXOffScreenContext):
        * platform/graphics/surfaces/glx/GLXSurface.cpp: Added.
        (WebCore):
        (WebCore::GLXSurface::GLXSurface):
        (WebCore::GLXSurface::~GLXSurface):
        (WebCore::GLXSurface::visualInfo):
        (WebCore::GLXSurface::xWindow):
        (WebCore::GLXSurface::pBufferConfiguration):
        (WebCore::GLXSurface::transportSurfaceConfiguration):
        (WebCore::GLXSurface::isXRenderExtensionSupported):
            GLXTransportSurface creates Window and uses it as an off-screen surface.
            Any GLContext that was created with respect to configuration can be used
            to render into this.
            This is used when contents of the buffer are to be provided to UI Process
            for display.
        (WebCore::GLXTransportSurface::GLXTransportSurface):
        (WebCore::GLXTransportSurface::~GLXTransportSurface):
        (WebCore::GLXTransportSurface::configuration):
        (WebCore::GLXTransportSurface::swapBuffers):
        (WebCore::GLXTransportSurface::setGeometry):
        (WebCore::GLXTransportSurface::initialize):
        (WebCore::GLXTransportSurface::destroy):
        (WebCore::GLXTransportSurface::freeResources):
           GLXPBuffer, Creates a GL surface (PBuffer) used for offscreen rendering.
           Any GLContext that was created with respect to configuration can be used
           to render into this.
        (WebCore::GLXPBuffer::GLXPBuffer):
        (WebCore::GLXPBuffer::~GLXPBuffer):
        (WebCore::GLXPBuffer::initialize):
        (WebCore::GLXPBuffer::configuration):
        (WebCore::GLXPBuffer::destroy):
        (WebCore::GLXPBuffer::freeResources):
        * platform/graphics/surfaces/glx/GLXSurface.h: Added.
        (WebCore):
            Creates X resources which are shared between surface and context.
        (SharedX11Resources):
        (WebCore::SharedX11Resources::create):
        (WebCore::SharedX11Resources::deref):
        (WebCore::SharedX11Resources::getXWindow):
        (WebCore::SharedX11Resources::display):
        (WebCore::SharedX11Resources::visualInfo):
        (WebCore::SharedX11Resources::createConfig):
        (WebCore::SharedX11Resources::pBufferContextConfig):
        (WebCore::SharedX11Resources::surfaceContextConfig):
        (WebCore::SharedX11Resources::isXRenderExtensionSupported):
        (WebCore::SharedX11Resources::SharedX11Resources):
        (WebCore::SharedX11Resources::~SharedX11Resources):
        (GLXSurface):
        (GLXTransportSurface):
        (GLXPBuffer):

2012-11-18  Andreas Kling  <akling@apple.com>

        Element::parseAttribute() should take name & value as separate arguments.
        <http://webkit.org/b/102608>

        Reviewed by Antti Koivisto.

        Update the signature of parseAttribute() to take a QualifiedName/AtomicString combo instead
        of an Attribute. This lets us pass avoid refcount churn in Element::attributeChanged() since
        creating a temporary Attribute is no longer necessary.

        This was surprisingly hot (~1%) on the DOM/CreateNodes performance test.

        * bindings/js/ScriptEventListener.cpp:
        (WebCore::createAttributeEventListener):
        * bindings/js/ScriptEventListener.h:
        (WebCore):
        * bindings/v8/ScriptEventListener.cpp:
        (WebCore::createAttributeEventListener):
        * bindings/v8/ScriptEventListener.h:
        (WebCore):
        * dom/Element.cpp:
        (WebCore::Element::attributeChanged):
        (WebCore::Element::parseAttribute):
        * dom/Element.h:
        (Element):
        * dom/StyledElement.cpp:
        (WebCore::StyledElement::parseAttribute):
        * dom/StyledElement.h:
        (StyledElement):
        * html/HTMLAnchorElement.cpp:
        (WebCore::HTMLAnchorElement::parseAttribute):
        * html/HTMLAnchorElement.h:
        (HTMLAnchorElement):
        * html/HTMLAppletElement.cpp:
        (WebCore::HTMLAppletElement::parseAttribute):
        * html/HTMLAppletElement.h:
        (HTMLAppletElement):
        * html/HTMLAreaElement.cpp:
        (WebCore::HTMLAreaElement::parseAttribute):
        * html/HTMLAreaElement.h:
        (HTMLAreaElement):
        * html/HTMLBaseElement.cpp:
        (WebCore::HTMLBaseElement::parseAttribute):
        * html/HTMLBaseElement.h:
        (HTMLBaseElement):
        * html/HTMLBodyElement.cpp:
        (WebCore::HTMLBodyElement::parseAttribute):
        * html/HTMLBodyElement.h:
        (HTMLBodyElement):
        * html/HTMLButtonElement.cpp:
        (WebCore::HTMLButtonElement::parseAttribute):
        * html/HTMLButtonElement.h:
        * html/HTMLCanvasElement.cpp:
        (WebCore::HTMLCanvasElement::parseAttribute):
        * html/HTMLCanvasElement.h:
        (HTMLCanvasElement):
        * html/HTMLDetailsElement.cpp:
        (WebCore::HTMLDetailsElement::parseAttribute):
        * html/HTMLDetailsElement.h:
        (HTMLDetailsElement):
        * html/HTMLElement.cpp:
        (WebCore::HTMLElement::parseAttribute):
        (WebCore::HTMLElement::dirAttributeChanged):
        * html/HTMLElement.h:
        (HTMLElement):
        * html/HTMLEmbedElement.cpp:
        (WebCore::HTMLEmbedElement::parseAttribute):
        * html/HTMLEmbedElement.h:
        (HTMLEmbedElement):
        * html/HTMLFormControlElement.cpp:
        (WebCore::HTMLFormControlElement::parseAttribute):
        * html/HTMLFormControlElement.h:
        (HTMLFormControlElement):
        * html/HTMLFormElement.cpp:
        (WebCore::HTMLFormElement::parseAttribute):
        * html/HTMLFormElement.h:
        (HTMLFormElement):
        * html/HTMLFrameElement.cpp:
        (WebCore::HTMLFrameElement::parseAttribute):
        * html/HTMLFrameElement.h:
        (HTMLFrameElement):
        * html/HTMLFrameElementBase.cpp:
        (WebCore::HTMLFrameElementBase::parseAttribute):
        * html/HTMLFrameElementBase.h:
        (HTMLFrameElementBase):
        * html/HTMLFrameSetElement.cpp:
        (WebCore::HTMLFrameSetElement::parseAttribute):
        * html/HTMLFrameSetElement.h:
        (HTMLFrameSetElement):
        * html/HTMLIFrameElement.cpp:
        (WebCore::HTMLIFrameElement::parseAttribute):
        * html/HTMLIFrameElement.h:
        (HTMLIFrameElement):
        * html/HTMLImageElement.cpp:
        (WebCore::HTMLImageElement::parseAttribute):
        * html/HTMLImageElement.h:
        (HTMLImageElement):
        * html/HTMLInputElement.cpp:
        (WebCore::HTMLInputElement::parseAttribute):
        (WebCore::HTMLInputElement::parseMaxLengthAttribute):
        * html/HTMLInputElement.h:
        (HTMLInputElement):
        * html/HTMLKeygenElement.cpp:
        (WebCore::HTMLKeygenElement::parseAttribute):
        * html/HTMLKeygenElement.h:
        (HTMLKeygenElement):
        * html/HTMLLIElement.cpp:
        (WebCore::HTMLLIElement::parseAttribute):
        * html/HTMLLIElement.h:
        (HTMLLIElement):
        * html/HTMLLinkElement.cpp:
        (WebCore::HTMLLinkElement::parseAttribute):
        * html/HTMLLinkElement.h:
        (HTMLLinkElement):
        * html/HTMLMapElement.cpp:
        (WebCore::HTMLMapElement::parseAttribute):
        * html/HTMLMapElement.h:
        (HTMLMapElement):
        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::parseAttribute):
        * html/HTMLMediaElement.h:
        * html/HTMLMetaElement.cpp:
        (WebCore::HTMLMetaElement::parseAttribute):
        * html/HTMLMetaElement.h:
        (HTMLMetaElement):
        * html/HTMLMeterElement.cpp:
        (WebCore::HTMLMeterElement::parseAttribute):
        * html/HTMLMeterElement.h:
        (HTMLMeterElement):
        * html/HTMLOListElement.cpp:
        (WebCore::HTMLOListElement::parseAttribute):
        * html/HTMLOListElement.h:
        (HTMLOListElement):
        * html/HTMLObjectElement.cpp:
        (WebCore::HTMLObjectElement::parseAttribute):
        * html/HTMLObjectElement.h:
        (HTMLObjectElement):
        * html/HTMLOptGroupElement.cpp:
        (WebCore::HTMLOptGroupElement::parseAttribute):
        * html/HTMLOptGroupElement.h:
        * html/HTMLOptionElement.cpp:
        (WebCore::HTMLOptionElement::parseAttribute):
        * html/HTMLOptionElement.h:
        (HTMLOptionElement):
        * html/HTMLOutputElement.cpp:
        (WebCore::HTMLOutputElement::parseAttribute):
        * html/HTMLOutputElement.h:
        (HTMLOutputElement):
        * html/HTMLProgressElement.cpp:
        (WebCore::HTMLProgressElement::parseAttribute):
        * html/HTMLProgressElement.h:
        * html/HTMLScriptElement.cpp:
        (WebCore::HTMLScriptElement::parseAttribute):
        * html/HTMLScriptElement.h:
        (HTMLScriptElement):
        * html/HTMLSelectElement.cpp:
        (WebCore::HTMLSelectElement::parseAttribute):
        (WebCore::HTMLSelectElement::parseMultipleAttribute):
        * html/HTMLSelectElement.h:
        * html/HTMLStyleElement.cpp:
        (WebCore::HTMLStyleElement::parseAttribute):
        * html/HTMLStyleElement.h:
        (HTMLStyleElement):
        * html/HTMLTableCellElement.cpp:
        (WebCore::HTMLTableCellElement::parseAttribute):
        * html/HTMLTableCellElement.h:
        (HTMLTableCellElement):
        * html/HTMLTableColElement.cpp:
        (WebCore::HTMLTableColElement::parseAttribute):
        * html/HTMLTableColElement.h:
        (HTMLTableColElement):
        * html/HTMLTableElement.cpp:
        (WebCore::HTMLTableElement::parseAttribute):
        * html/HTMLTableElement.h:
        (HTMLTableElement):
        * html/HTMLTextAreaElement.cpp:
        (WebCore::HTMLTextAreaElement::parseAttribute):
        * html/HTMLTextAreaElement.h:
        (HTMLTextAreaElement):
        * html/HTMLTextFormControlElement.cpp:
        (WebCore::HTMLTextFormControlElement::parseAttribute):
        * html/HTMLTextFormControlElement.h:
        (HTMLTextFormControlElement):
        * html/HTMLTrackElement.cpp:
        (WebCore::HTMLTrackElement::parseAttribute):
        * html/HTMLTrackElement.h:
        (HTMLTrackElement):
        * html/HTMLVideoElement.cpp:
        (WebCore::HTMLVideoElement::parseAttribute):
        * html/HTMLVideoElement.h:
        (HTMLVideoElement):
        * html/shadow/HTMLContentElement.cpp:
        (WebCore::HTMLContentElement::parseAttribute):
        * html/shadow/HTMLContentElement.h:
        (HTMLContentElement):
        * mathml/MathMLElement.cpp:
        (WebCore::MathMLElement::parseAttribute):
        * mathml/MathMLElement.h:
        (MathMLElement):
        * svg/SVGAElement.cpp:
        (WebCore::SVGAElement::parseAttribute):
        * svg/SVGAElement.h:
        (SVGAElement):
        * svg/SVGAnimateMotionElement.cpp:
        (WebCore::SVGAnimateMotionElement::parseAttribute):
        * svg/SVGAnimateMotionElement.h:
        (SVGAnimateMotionElement):
        * svg/SVGAnimateTransformElement.cpp:
        (WebCore::SVGAnimateTransformElement::parseAttribute):
        * svg/SVGAnimateTransformElement.h:
        (SVGAnimateTransformElement):
        * svg/SVGAnimationElement.cpp:
        (WebCore::SVGAnimationElement::parseAttribute):
        * svg/SVGAnimationElement.h:
        (SVGAnimationElement):
        * svg/SVGCircleElement.cpp:
        (WebCore::SVGCircleElement::parseAttribute):
        * svg/SVGCircleElement.h:
        (SVGCircleElement):
        * svg/SVGClipPathElement.cpp:
        (WebCore::SVGClipPathElement::parseAttribute):
        * svg/SVGClipPathElement.h:
        (SVGClipPathElement):
        * svg/SVGComponentTransferFunctionElement.cpp:
        (WebCore::SVGComponentTransferFunctionElement::parseAttribute):
        * svg/SVGComponentTransferFunctionElement.h:
        (SVGComponentTransferFunctionElement):
        * svg/SVGCursorElement.cpp:
        (WebCore::SVGCursorElement::parseAttribute):
        * svg/SVGCursorElement.h:
        (SVGCursorElement):
        * svg/SVGElement.cpp:
        (WebCore::SVGElement::reportAttributeParsingError):
        (WebCore::SVGElement::parseAttribute):
        * svg/SVGElement.h:
        (SVGElement):
        * svg/SVGEllipseElement.cpp:
        (WebCore::SVGEllipseElement::parseAttribute):
        * svg/SVGEllipseElement.h:
        (SVGEllipseElement):
        * svg/SVGExternalResourcesRequired.cpp:
        (WebCore::SVGExternalResourcesRequired::parseAttribute):
        * svg/SVGExternalResourcesRequired.h:
        (SVGExternalResourcesRequired):
        * svg/SVGFEBlendElement.cpp:
        (WebCore::SVGFEBlendElement::parseAttribute):
        * svg/SVGFEBlendElement.h:
        (SVGFEBlendElement):
        * svg/SVGFEColorMatrixElement.cpp:
        (WebCore::SVGFEColorMatrixElement::parseAttribute):
        * svg/SVGFEColorMatrixElement.h:
        (SVGFEColorMatrixElement):
        * svg/SVGFEComponentTransferElement.cpp:
        (WebCore::SVGFEComponentTransferElement::parseAttribute):
        * svg/SVGFEComponentTransferElement.h:
        (SVGFEComponentTransferElement):
        * svg/SVGFECompositeElement.cpp:
        (WebCore::SVGFECompositeElement::parseAttribute):
        * svg/SVGFECompositeElement.h:
        (SVGFECompositeElement):
        * svg/SVGFEConvolveMatrixElement.cpp:
        (WebCore::SVGFEConvolveMatrixElement::parseAttribute):
        * svg/SVGFEConvolveMatrixElement.h:
        (SVGFEConvolveMatrixElement):
        * svg/SVGFEDiffuseLightingElement.cpp:
        (WebCore::SVGFEDiffuseLightingElement::parseAttribute):
        * svg/SVGFEDiffuseLightingElement.h:
        (SVGFEDiffuseLightingElement):
        * svg/SVGFEDisplacementMapElement.cpp:
        (WebCore::SVGFEDisplacementMapElement::parseAttribute):
        * svg/SVGFEDisplacementMapElement.h:
        (SVGFEDisplacementMapElement):
        * svg/SVGFEDropShadowElement.cpp:
        (WebCore::SVGFEDropShadowElement::parseAttribute):
        * svg/SVGFEDropShadowElement.h:
        (SVGFEDropShadowElement):
        * svg/SVGFEGaussianBlurElement.cpp:
        (WebCore::SVGFEGaussianBlurElement::parseAttribute):
        * svg/SVGFEGaussianBlurElement.h:
        (SVGFEGaussianBlurElement):
        * svg/SVGFEImageElement.cpp:
        (WebCore::SVGFEImageElement::parseAttribute):
        * svg/SVGFEImageElement.h:
        (SVGFEImageElement):
        * svg/SVGFELightElement.cpp:
        (WebCore::SVGFELightElement::parseAttribute):
        * svg/SVGFELightElement.h:
        (SVGFELightElement):
        * svg/SVGFEMergeNodeElement.cpp:
        (WebCore::SVGFEMergeNodeElement::parseAttribute):
        * svg/SVGFEMergeNodeElement.h:
        (SVGFEMergeNodeElement):
        * svg/SVGFEMorphologyElement.cpp:
        (WebCore::SVGFEMorphologyElement::parseAttribute):
        * svg/SVGFEMorphologyElement.h:
        (SVGFEMorphologyElement):
        * svg/SVGFEOffsetElement.cpp:
        (WebCore::SVGFEOffsetElement::parseAttribute):
        * svg/SVGFEOffsetElement.h:
        (SVGFEOffsetElement):
        * svg/SVGFESpecularLightingElement.cpp:
        (WebCore::SVGFESpecularLightingElement::parseAttribute):
        * svg/SVGFESpecularLightingElement.h:
        (SVGFESpecularLightingElement):
        * svg/SVGFETileElement.cpp:
        (WebCore::SVGFETileElement::parseAttribute):
        * svg/SVGFETileElement.h:
        (SVGFETileElement):
        * svg/SVGFETurbulenceElement.cpp:
        (WebCore::SVGFETurbulenceElement::parseAttribute):
        * svg/SVGFETurbulenceElement.h:
        (SVGFETurbulenceElement):
        * svg/SVGFilterElement.cpp:
        (WebCore::SVGFilterElement::parseAttribute):
        * svg/SVGFilterElement.h:
        (SVGFilterElement):
        * svg/SVGFilterPrimitiveStandardAttributes.cpp:
        (WebCore::SVGFilterPrimitiveStandardAttributes::parseAttribute):
        * svg/SVGFilterPrimitiveStandardAttributes.h:
        (SVGFilterPrimitiveStandardAttributes):
        * svg/SVGFitToViewBox.h:
        (WebCore::SVGFitToViewBox::parseAttribute):
        * svg/SVGFontFaceElement.cpp:
        (WebCore::SVGFontFaceElement::parseAttribute):
        * svg/SVGFontFaceElement.h:
        (SVGFontFaceElement):
        * svg/SVGFontFaceUriElement.cpp:
        (WebCore::SVGFontFaceUriElement::parseAttribute):
        * svg/SVGFontFaceUriElement.h:
        (SVGFontFaceUriElement):
        * svg/SVGForeignObjectElement.cpp:
        (WebCore::SVGForeignObjectElement::parseAttribute):
        * svg/SVGForeignObjectElement.h:
        (SVGForeignObjectElement):
        * svg/SVGGElement.cpp:
        (WebCore::SVGGElement::parseAttribute):
        * svg/SVGGElement.h:
        (SVGGElement):
        * svg/SVGGlyphElement.cpp:
        (WebCore::SVGGlyphElement::parseAttribute):
        * svg/SVGGlyphElement.h:
        (SVGGlyphElement):
        * svg/SVGGlyphRefElement.cpp:
        (WebCore::SVGGlyphRefElement::parseAttribute):
        * svg/SVGGlyphRefElement.h:
        * svg/SVGGradientElement.cpp:
        (WebCore::SVGGradientElement::parseAttribute):
        * svg/SVGGradientElement.h:
        * svg/SVGImageElement.cpp:
        (WebCore::SVGImageElement::parseAttribute):
        * svg/SVGImageElement.h:
        (SVGImageElement):
        * svg/SVGLangSpace.cpp:
        (WebCore::SVGLangSpace::parseAttribute):
        * svg/SVGLangSpace.h:
        (SVGLangSpace):
        * svg/SVGLineElement.cpp:
        (WebCore::SVGLineElement::parseAttribute):
        * svg/SVGLineElement.h:
        (SVGLineElement):
        * svg/SVGLinearGradientElement.cpp:
        (WebCore::SVGLinearGradientElement::parseAttribute):
        * svg/SVGLinearGradientElement.h:
        (SVGLinearGradientElement):
        * svg/SVGMPathElement.cpp:
        (WebCore::SVGMPathElement::parseAttribute):
        * svg/SVGMPathElement.h:
        (SVGMPathElement):
        * svg/SVGMarkerElement.cpp:
        (WebCore::SVGMarkerElement::parseAttribute):
        * svg/SVGMarkerElement.h:
        (SVGMarkerElement):
        * svg/SVGMaskElement.cpp:
        (WebCore::SVGMaskElement::parseAttribute):
        * svg/SVGMaskElement.h:
        (SVGMaskElement):
        * svg/SVGPathElement.cpp:
        (WebCore::SVGPathElement::parseAttribute):
        * svg/SVGPathElement.h:
        (SVGPathElement):
        * svg/SVGPatternElement.cpp:
        (WebCore::SVGPatternElement::parseAttribute):
        * svg/SVGPatternElement.h:
        (SVGPatternElement):
        * svg/SVGPolyElement.cpp:
        (WebCore::SVGPolyElement::parseAttribute):
        * svg/SVGPolyElement.h:
        (SVGPolyElement):
        * svg/SVGRadialGradientElement.cpp:
        (WebCore::SVGRadialGradientElement::parseAttribute):
        * svg/SVGRadialGradientElement.h:
        (SVGRadialGradientElement):
        * svg/SVGRectElement.cpp:
        (WebCore::SVGRectElement::parseAttribute):
        * svg/SVGRectElement.h:
        (SVGRectElement):
        * svg/SVGSVGElement.cpp:
        (WebCore::SVGSVGElement::parseAttribute):
        * svg/SVGSVGElement.h:
        (SVGSVGElement):
        * svg/SVGScriptElement.cpp:
        (WebCore::SVGScriptElement::parseAttribute):
        * svg/SVGScriptElement.h:
        (SVGScriptElement):
        * svg/SVGStopElement.cpp:
        (WebCore::SVGStopElement::parseAttribute):
        * svg/SVGStopElement.h:
        (SVGStopElement):
        * svg/SVGStyleElement.cpp:
        (WebCore::SVGStyleElement::parseAttribute):
        * svg/SVGStyleElement.h:
        (SVGStyleElement):
        * svg/SVGStyledElement.cpp:
        (WebCore::SVGStyledElement::parseAttribute):
        * svg/SVGStyledElement.h:
        (SVGStyledElement):
        * svg/SVGStyledTransformableElement.cpp:
        (WebCore::SVGStyledTransformableElement::parseAttribute):
        * svg/SVGStyledTransformableElement.h:
        (SVGStyledTransformableElement):
        * svg/SVGSymbolElement.cpp:
        (WebCore::SVGSymbolElement::parseAttribute):
        * svg/SVGSymbolElement.h:
        (SVGSymbolElement):
        * svg/SVGTRefElement.cpp:
        (WebCore::SVGTRefElement::parseAttribute):
        * svg/SVGTRefElement.h:
        (SVGTRefElement):
        * svg/SVGTests.cpp:
        (WebCore::SVGTests::parseAttribute):
        * svg/SVGTests.h:
        (SVGTests):
        * svg/SVGTextContentElement.cpp:
        (WebCore::SVGTextContentElement::parseAttribute):
        * svg/SVGTextContentElement.h:
        (SVGTextContentElement):
        * svg/SVGTextElement.cpp:
        (WebCore::SVGTextElement::parseAttribute):
        * svg/SVGTextElement.h:
        (SVGTextElement):
        * svg/SVGTextPathElement.cpp:
        (WebCore::SVGTextPathElement::parseAttribute):
        * svg/SVGTextPathElement.h:
        * svg/SVGTextPositioningElement.cpp:
        (WebCore::SVGTextPositioningElement::parseAttribute):
        * svg/SVGTextPositioningElement.h:
        (SVGTextPositioningElement):
        * svg/SVGURIReference.cpp:
        (WebCore::SVGURIReference::parseAttribute):
        * svg/SVGURIReference.h:
        (SVGURIReference):
        * svg/SVGUseElement.cpp:
        (WebCore::SVGUseElement::parseAttribute):
        * svg/SVGUseElement.h:
        (SVGUseElement):
        * svg/SVGViewElement.cpp:
        (WebCore::SVGViewElement::parseAttribute):
        * svg/SVGViewElement.h:
        (SVGViewElement):
        * svg/SVGZoomAndPan.h:
        (WebCore::SVGZoomAndPan::parseAttribute):
        * svg/animation/SVGSMILElement.cpp:
        (WebCore::SVGSMILElement::parseAttribute):
        * svg/animation/SVGSMILElement.h:
        (SVGSMILElement):

2012-11-18  Andreas Kling  <akling@apple.com>

        StyleResolver: No need to compare "cellpadding" attributes when evaluating style sharing candidates.
        <http://webkit.org/b/102596>

        Reviewed by Antti Koivisto.

        Differences in the cellpadding attribute is caught by comparing additionalPresentationAttributeStyle()
        later on in canShareStyleWithElement() and we shouldn't waste time on comparing them.

        * css/StyleResolver.cpp:
        (WebCore::haveIdenticalStyleAffectingAttributes):

2012-11-17  Jon Lee  <jonlee@apple.com>

        Simulated mouse events should return an accurate offset
        https://bugs.webkit.org/show_bug.cgi?id=102606
        <rdar://problem/12725627>

        Reviewed by Brady Eidson.

        A check to see if the event is simulated prior to calculating the offset has existed for a
        long time (since at least r14916). Back then the check was needed because the offset was
        incrementally adjusted when the target was assigned (through
        MouseRelatedEvent::receivedTarget()).

        Since r82225, we started calculating the offset only when needed, and calculating the offset
        from scratch rather than incrementally adjusting it. Since we recalculate from scratch,
        the isSimulated check is irrelevant, and we should remove it.

        Tests are not possible because all uses of simulated mouse events provide no underlying
        event, so the offset is never recalculated.

        * dom/MouseRelatedEvent.cpp:
        (WebCore::MouseRelatedEvent::computeRelativePosition): Remove the m_isSimulated check.

2012-11-17  Simon Fraser  <simon.fraser@apple.com>

        Don't say there are dirty overlay scrollbars when they are clipped out
        https://bugs.webkit.org/show_bug.cgi?id=102609

        Reviewed by Brady Eidson.

        Painting overlay scrollbars involves a second painting pass over the entire
        RenderLayer subtree for a compositing layer, which can be very expensive.
        
        Avoid this when possible by detecting when overflow controls are not in
        the damage rect.

        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::rectForHorizontalScrollbar): Compute a local rect
        for the horizontal scrollbar.
        (WebCore::RenderLayer::rectForVerticalScrollbar): Compute a local rect
        for the vertical scrollbar.
        (WebCore::RenderLayer::positionOverflowControls): Use rectForHorizontalScrollbar()
        and rectForVerticalScrollbar().
        (WebCore::RenderLayer::overflowControlsIntersectRect): Return true if any
        of the present overflow controls intersect the given local rect.
        (WebCore::RenderLayer::paintOverflowControls): Bail if the damage rect
        doesn't intersect any of the overflow controls.
        * rendering/RenderLayer.h:
        (RenderLayer):

2012-11-17  Adam Barth  <abarth@webkit.org>

        REGRESSION (r133633): ASSERTION FAILED: m_wrapper || !m_jsFunction
        https://bugs.webkit.org/show_bug.cgi?id=101428

        Reviewed by Geoffrey Garen.

        JSNodeOwner has some smarts that wrappers of subclasses of Node need to
        call during garbage collection. This patch teaches subclasses of Node
        to have their JSMumbleOwner objects inherit from JSNodeOwner.

        The immediate benefit of this patch is that we correctly avoid
        collecting wrappers for HTMLAudioElements when they are reachable from
        the DOM.

        * bindings/scripts/CodeGeneratorJS.pm:
        (GenerateHeader):
        (GenerateImplementation):

2012-11-17  Elliott Sprehn  <esprehn@chromium.org>

        Expose JSObject::removeDirect and PrivateName to WebCore
        https://bugs.webkit.org/show_bug.cgi?id=102546

        Reviewed by Geoffrey Garen.

        Add forwarding header for PrivateName, so JSDependentRetained works.

        No new tests, just adding headers.

        * ForwardingHeaders/runtime/PrivateName.h: Added.

2012-11-17  Simon Fraser  <simon.fraser@apple.com>

        Reduce the crazy number of parameters to RenderLayer clip-rect functions
        https://bugs.webkit.org/show_bug.cgi?id=102604

        Reviewed by Dan Bernstein.

        Many of the RenderLayer member functions related to clip rect computation
        took a long list of similar parameters. Gather these into a struct, ClipRectsContext,
        that we pass to these functions
        
        No functional changes.

        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::paintLayer):
        (WebCore::RenderLayer::paintLayerContents):
        (WebCore::RenderLayer::hitTestLayer):
        (WebCore::RenderLayer::updateClipRects):
        (WebCore::RenderLayer::calculateClipRects):
        (WebCore::RenderLayer::parentClipRects):
        (WebCore::RenderLayer::backgroundClipRect):
        (WebCore::RenderLayer::calculateRects):
        (WebCore::RenderLayer::childrenClipRect):
        (WebCore::RenderLayer::selfClipRect):
        (WebCore::RenderLayer::localClipRect):
        * rendering/RenderLayer.h:
        (WebCore::RenderLayer::ClipRectsContext::ClipRectsContext):
        (ClipRectsContext):
        (RenderLayer):
        (WebCore::RenderLayer::clipRects):
        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::updateCompositedBounds):
        (WebCore::RenderLayerBacking::updateGraphicsLayerGeometry):
        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::addToOverlapMap):
        (WebCore::RenderLayerCompositor::clippedByAncestor):
        * rendering/RenderTreeAsText.cpp:
        (WebCore::writeLayers):

2012-11-17  Simon Fraser  <simon.fraser@apple.com>

        Simplify bounds computation for the RenderView's layer
        https://bugs.webkit.org/show_bug.cgi?id=102597

        Reviewed by Anders Carlsson.

        Computing the bounds of the main layer (that of the RenderView) used to do
        a full RenderLayer walk, taking the union of the bounds of all the sublayers,
        which is very expensive on large pages.
        
        For the RenderView we can avoid that entirely and just use the RenderView's
        document rect. Since page scaling happens as a transform on this layer,
        we want the unscaled document rect.

        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::calculateLayerBounds):

2012-11-17  Eric Seidel  <eric@webkit.org>

        Add ScriptWrappable to more WebCore classes which are commonly JS-wrapped
        https://bugs.webkit.org/show_bug.cgi?id=102601

        Reviewed by Adam Barth.

        From my investigations all of these classes exist only to be exposed
        to the web (via JavaScript) and are not used internally by WebCore.
        I beleive all of them always have wrappers.
        These were found using this code:
        https://bugs.webkit.org/show_bug.cgi?id=102539#c2

        Geolocation -- navigator.geolocation
        WebKitCSSMatrix -- represent matrixes in JS through various APIs
        DOMStringMap, NamedNodeMap, NodeIterator, TreeWalker -- exclusively for the DOM API
        Blob, FileList - used by the File, Clipboard and XHR, also exclusively as API
        ValidityState -- formControl.validity
        CanvasRenderingContext -- canvas.getContext()
        DOMApplicationCache -- window.appcache
        Screen -- window.screen
        DOMMimeTypeArray -- navigator.mimetypes
        DOMPlugin -- navigator.plugins[0]
        DOMPluginArray -- navigator.plugins

        * Modules/geolocation/Geolocation.h:
        * css/WebKitCSSMatrix.h:
        * dom/DOMStringMap.h:
        * dom/NamedNodeMap.h:
        * dom/NodeIterator.h:
        * dom/TreeWalker.h:
        * fileapi/Blob.h:
        * fileapi/FileList.h: (had to un-indent to make check-webkit-style happy)
        (FileList):
        (WebCore::FileList::create):
        (WebCore::FileList::length):
        (WebCore::FileList::isEmpty):
        (WebCore::FileList::clear):
        (WebCore::FileList::append):
        * html/ValidityState.h:
        * html/canvas/CanvasRenderingContext.h:
        * loader/appcache/DOMApplicationCache.h:
        * page/Screen.h:
        * platform/graphics/wince/MediaPlayerProxy.cpp:
        (WebCore::WebMediaPlayerProxy::initEngine): This code was wrong, fixed to use internal APIs.
        * plugins/DOMMimeTypeArray.h:
        * plugins/DOMPlugin.h:
        * plugins/DOMPluginArray.h:

2012-11-17  Alexandru Chiculita  <achicu@adobe.com>

        [Texmap][CSS Shaders] Reuse the precompiled shader for custom filters in TextureMapperGL
        https://bugs.webkit.org/show_bug.cgi?id=101801

        Reviewed by Noam Rosenthal.

        Added a HashMap in TextureMapperGL to store the precompiled versions of the shaders.
        Also added a new API on TextureMapper that receives a notification when the shader
        is no longer needed.

        No new tests, the code is tested by existing tests.

        * platform/graphics/filters/CustomFilterOperation.h:
        (WebCore::CustomFilterOperation::setProgram):
        (CustomFilterOperation): Made the constructor protected, so that we can overwrite the class in WK2.
        * platform/graphics/filters/CustomFilterValidatedProgram.cpp:
        (WebCore::CustomFilterValidatedProgram::validatedProgramInfo):
        (WebCore):
        * platform/graphics/filters/CustomFilterValidatedProgram.h:
        (CustomFilterValidatedProgram):
        * platform/graphics/texmap/TextureMapper.h:
        (WebCore):
        (TextureMapper):
        (WebCore::TextureMapper::removeCachedCustomFilterProgram):
        Function to be called by the platform code, when the shader is no longer
        needed. This implementation is empty and overridden in TextureMapperGL.
        * platform/graphics/texmap/TextureMapperGL.cpp:
        (WebCore::TextureMapperGL::removeCachedCustomFilterProgram):
        Removes the compiled shader from the cache. This is called from WK2 when the compiled shader
        is no longer needed.
        (WebCore):
        (WebCore::TextureMapperGL::drawUsingCustomFilter): The first time it uses a new
        shader it will cache the compiled version until removeCachedCustomFilterProgram is called.
        * platform/graphics/texmap/TextureMapperGL.h:
        (WebCore):
        (TextureMapperGL):

2012-11-17  Brady Eidson  <beidson@apple.com>

        Add an integer identifier field to AuthenticationChallengeBase.
        https://bugs.webkit.org/show_bug.cgi?id=102593

        Reviewed by Darin Adler.

        This is to support linking two different challenges that might not compare as equal but that 
        represent the same logical authentication challenge.

        One example is in an IPC environment where the platform challenge can only exist in one process.

        No new tests (Platform support, no effect in tested configs).

        * WebCore.exp.in:

        * platform/network/AuthenticationChallengeBase.cpp:
        (WebCore::AuthenticationChallengeBase::AuthenticationChallengeBase):
        * platform/network/AuthenticationChallengeBase.h:
        (WebCore::AuthenticationChallengeBase::identifier):

        * platform/network/cf/AuthenticationChallenge.h:
        * platform/network/mac/AuthenticationMac.mm:
        (WebCore::generateUniqueIdentifier):
        (WebCore::AuthenticationChallenge::AuthenticationChallenge): Generate a new unique identifier whenever
          constructing a challenge from an NSURLAuthenticationChallenge.

        * platform/network/cf/AuthenticationCF.cpp:
        (WebCore::generateUniqueIdentifier):
        (WebCore::AuthenticationChallenge::AuthenticationChallenge): Generate a new unique identifier whenever
          constructing a challenge from a CFURLAuthChallengeRef.

        Implement the new constructor form for ports relevant to WebKit2:
        * platform/network/qt/AuthenticationChallenge.h:
        (WebCore::AuthenticationChallenge::AuthenticationChallenge):
        * platform/network/soup/AuthenticationChallenge.h:
        (WebCore::AuthenticationChallenge::AuthenticationChallenge):
        * platform/network/win/AuthenticationChallenge.h:
        (WebCore::AuthenticationChallenge::AuthenticationChallenge):

2012-11-17  Simon Fraser  <simon.fraser@apple.com>

        Dump the tile cache extent in layout tests
        https://bugs.webkit.org/show_bug.cgi?id=102600

        Reviewed by Anders Carlsson.

        When dumping tiled layer stats in layout tests, also dump the extent
        of the tile grid. This will allow us to detect issues related
        to zooming, which is not possible with the existing tile coverage rect,
        which is dumped in layer (not tile) coordinates.

        * platform/graphics/TiledBacking.h: Added tileGridExtent().
        * platform/graphics/ca/GraphicsLayerCA.cpp:
        (WebCore::GraphicsLayerCA::dumpAdditionalProperties): Dump the tile grid extent.
        * platform/graphics/ca/mac/TileCache.h: tileCoverageRect() should be OVERRIDE.
        * platform/graphics/ca/mac/TileCache.mm:
        (WebCore::TileCache::getTileIndexRangeForRect):
        (WebCore::TileCache::tileGridExtent): Return a rect with the size of
        the grid as top,left width,height.

2012-11-17  Andreas Kling  <akling@apple.com>

        Avoid full style recalc when 'style' attribute changes.
        <http://webkit.org/b/78718>

        Reviewed by Anders Carlsson.

        Use setNeedsStyleRecalc(InlineStyleChange) when the 'style' attribute changes
        to reduce the amount of work done in recalcStyle().

        * dom/StyledElement.cpp:
        (WebCore::StyledElement::styleAttributeChanged):

2012-11-17  Li Yin  <li.yin@intel.com>

        Remove coneGain and distanceGain attributes from PannerNode.idl
        https://bugs.webkit.org/show_bug.cgi?id=102343

        Reviewed by Chris Rogers.

        Removing .coneGain and .distanceGain as publicly accessible values,
        since normally they only need to be calculated internally.

        No changes to tests, since these attributes were not tested and are being removed.

        * Modules/webaudio/PannerNode.idl:

2012-11-17  Balazs Kelemen  <kbalazs@webkit.org>

        [Coordinated Graphics] Resumed animations leave an obsolate GraphicsLayerAnimation behind
        https://bugs.webkit.org/show_bug.cgi?id=102530

        Reviewed by Noam Rosenthal.

        GraphicsLayer::addAnimation is called no only when a new animation is created
        but also when resuming a paused animation. If this is a resumed animation we
        should remove the obsolate GraphicsLayerAnimation object.

        Tested by animations tests.

        * platform/graphics/GraphicsLayerAnimation.cpp:
        (WebCore::GraphicsLayerAnimations::add):

2012-11-17  Martin Robinson  <mrobinson@igalia.com>

        [Soup] CredentialStorage should only be used for HTTP-family requests
        https://bugs.webkit.org/show_bug.cgi?id=102582

        Reviewed by Gustavo Noronha Silva.

        Do not use CredentialStorage when handling non-HTTP family requests. CredentialStorage
        only expects to handle requests in the HTTP family.

        No new tests. This is covered by existing tests.

        * platform/network/ResourceHandle.h:
        (ResourceHandle): Add a shouldUseCredentialStorage helper to ResourceHandle. This
        helper returns false when firstRequest() is a non-HTTP family request.
        * platform/network/soup/ResourceHandleSoup.cpp:
        (WebCore::applyAuthenticationToRequest): Use the new helper.
        (WebCore::createSoupRequestAndMessageForHandle): Ditto.
        (WebCore::ResourceHandle::start): Ditto.
        (WebCore::ResourceHandle::shouldUseCredentialStorage): Ditto.
        (WebCore::ResourceHandle::didReceiveAuthenticationChallenge): Ditto.
        (WebCore::ResourceHandle::receivedCredential): Ditto.

2012-11-16  Patrick Gansterer  <paroga@webkit.org>

        Build fix for !USE(ACCELERATED_COMPOSITING) after r135029.

        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::paintOverflowControls):

2012-11-16  Benjamin Poulain  <bpoulain@apple.com>

        Improve the performance of rect transform
        https://bugs.webkit.org/show_bug.cgi?id=101828

        Reviewed by Simon Fraser.

        Mapping a rect and a quad by a transform is a common operation because
        we use it to recompute the repaint rect, overflow rect, etc.

        The way it was done, is by transforming through mapRect()->mapQuad()->4 times mapPoint().
        Each of those functions tests isIdentityOrTranslation() which has to read the whole matrix
        and perform many comparison.
        Because of that, the simple mapping of a rect was loading and checking the matrix 5 times
        too many.

        This patch just cut the intermediary calls.

        On ARM, putting the operation together also has the advantage of loading the matrix
        only once in registers and reusing it for every point.

        * platform/graphics/transforms/TransformationMatrix.cpp:
        (WebCore::TransformationMatrix::mapPoint):
        (WebCore::TransformationMatrix::mapRect):
        * platform/graphics/transforms/TransformationMatrix.h:
        (WebCore):
        (WebCore::TransformationMatrix::mapPointImpl): New convenience function to perform the
        point project without doing isIdentityOrTranslation().

2012-11-16  Simon Fraser  <simon.fraser@apple.com>

        Avoid calling the virtual isBlockFlow() in RenderBox::computeRectForRepaint()
        https://bugs.webkit.org/show_bug.cgi?id=102581

        Reviewed by Dan Bernstein.

        isBlockFlow() is a virtual function call, and shows up in profiles of
        Facebook pages as called from RenderBox::computeRectForRepaint().
        
        It's faster to do the hasColumns() bit-check first. Also replace
        a call to layer() with the hasLayer() bit-check.        

        * rendering/RenderBox.cpp:
        (WebCore::RenderBox::computeRectForRepaint):

2012-11-16  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r134817.
        http://trac.webkit.org/changeset/134817
        https://bugs.webkit.org/show_bug.cgi?id=102576

        Broke iframes and causing tons of crashes on ClusterFuzz
        (Requested by inferno-sec on #webkit).

        * dom/ContainerNode.cpp:
        (WebCore::willRemoveChildren):
        * dom/ContainerNodeAlgorithms.cpp:
        (WebCore::ChildFrameDisconnector::collectDescendant):
        * dom/ContainerNodeAlgorithms.h:
        (WebCore::ChildFrameDisconnector::ChildFrameDisconnector):
        (WebCore::ChildFrameDisconnector::~ChildFrameDisconnector):
        (ChildFrameDisconnector):
        (WebCore::ChildFrameDisconnector::collectDescendant):
        (WebCore::ChildFrameDisconnector::disconnect):
        * dom/Node.cpp:
        * dom/Node.h:
        (Node):
        * dom/NodeRareData.h:
        (WebCore::NodeRareData::NodeRareData):
        (NodeRareData):
        * html/HTMLFrameOwnerElement.cpp:
        (WebCore::HTMLFrameOwnerElement::setContentFrame):
        (WebCore::HTMLFrameOwnerElement::disconnectContentFrame):

2012-11-16  Simon Fraser  <simon.fraser@apple.com>

        Fix overlay scrollbar painting in compositing layers
        https://bugs.webkit.org/show_bug.cgi?id=102442

        Reviewed by Beth Dakin.

        There were two issues with overlay scrollbar painting in
        compositing layers.
        
        First, we'd only ever call setContainsDirtyOverlayScrollbars()
        on the RenderView's layer, even when encountering an overlay scrollbar
        in some descendant compositing layer. This meant that we'd never
        run the paintOverlayScrollbars() code for those child compositing
        layers, so sometimes scrollbars were missing there.
        
        Even after fixing that, we would fail to render scrollbars that
        were not in the composited RenderLayer itself. This happened because
        we called into RenderLayer::paintOverlayScrollbars(), which called
        paintLayer() with flags that only said to paint the overlay scrollbars
        but not any descendants, so this paint path would not walk child
        RenderLayers.
        
        Also remove the containsScrollableAreaWithOverlayScrollbars() flag on
        ScrollView which is no longer used.

        * platform/ScrollView.cpp:
        (WebCore::ScrollView::ScrollView): Remove containsScrollableAreaWithOverlayScrollbars().
        (WebCore::ScrollView::paint): Remove setting of m_containsScrollableAreaWithOverlayScrollbars.
        * platform/ScrollView.h:
        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::paintOverflowControls): Call setContainsDirtyOverlayScrollbars()
        on the compositing ancestor or the root.
        Remove call to setContainsScrollableAreaWithOverlayScrollbars().
        (WebCore::RenderLayer::paintOverlayScrollbars): When painting overlay
        scrollbars, no need to say we have transparency, and no need to use 
        temporary clip rects.
        (WebCore::RenderLayer::paintLayer): The PaintLayerPaintingOverlayScrollbars
        check here was only needed because the compositing entrypoint to painting
        overlay scrollbars went via paintLayer(), which isn't normally used as
        a composited painting entry point. Now that we no longer call that, we
        don't need this special check.
        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::paintIntoLayer): Jump into overlay scrollbar
        painting via paintLayerContents(), not paintOverlayScrollbars(), since
        the latter does not traverse sublayers.

2012-11-16  Joshua Bell  <jsbell@chromium.org>

        IndexedDB: Assert hit when getting non-existent object store in version change transaction
        https://bugs.webkit.org/show_bug.cgi?id=102547

        Reviewed by Tony Chang.

        Code did not account for the not-found case in "versionchange" transactions, where all
        object stores are implicitly in scope.

        Test: storage/indexeddb/object-lookups-in-versionchange.html

        * Modules/indexeddb/IDBTransaction.cpp:
        (WebCore::IDBTransaction::objectStore):

2012-11-12  Simon Fraser  <simon.fraser@apple.com>

        Eliminate ancestor tree walk computing outlineBoundsForRepaint() when updating layer positions
        https://bugs.webkit.org/show_bug.cgi?id=101874

        Reviewed by Dave Hyatt.

        RenderLayer::updateLayerPositions() and updateLayerPositionsAfterScroll() spend a
        lot of time in computeRepaintRects(), which does two ancestor tree walks, once
        for clippedOverflowRectForRepaint(), and one for outlineBoundsForRepaint().

        Eliminate the ancestor tree walk in outlineBoundsForRepaint() by maintaining
        a RenderGeometryMap as we traverse the layer tree, and then using it to map
        the outline bounds to the repaint container. Replace the hokey cached offsetFromRoot
        now that the RenderGeometryMap can do a better job.
        
        The clipped overflow rect cannot be mapped simply, so cannot yet make use of
        the geometry map.
        
        Modify the RenderGeometryMap to support mapping to some repaintContainer ancestor.
        Add a RenderObject walk that is necessary to detect flipped writing mode blocks.
        
        Pass the RenderGeometryMap as an optional parameter to outlineBoundsForRepaint.
        
        * page/FrameView.cpp:
        (WebCore::FrameView::layout): Make a RenderGeometryMap and pass it down
        to updateLayerPositions(). For partial layouts, we have to push layers
        between the root and the enclosing layer of the layout subtree.
        The geometry map used for repainting does not use SnapOffsetForTransforms,
        so initialize it explicitly with just the UseTransforms flag.
        (WebCore::FrameView::repaintFixedElementsAfterScrolling): Make a RenderGeometryMap
        to pass along to updateLayerPositionsAfterScroll().
        * rendering/RenderBox.cpp:
        (WebCore::RenderBox::outlineBoundsForRepaint): Replace the optional cachedOffsetToRepaintContainer
        parameter with an optional RenderGeometryMap, and it use to map the compute rect to
        repaintContainer coordinates.
        * rendering/RenderBox.h:
        * rendering/RenderGeometryMap.cpp:
        (WebCore::RenderGeometryMap::RenderGeometryMap): This now has to store the mapping
        flags to use, so that its behavior can match that of mapLocalToContainer(). The
        pertinent flag is the confusingly named SnapOffsetForTransforms.
        (WebCore::RenderGeometryMap::absolutePoint): Call the new mapToContainer() with
        a null container.
        (WebCore::RenderGeometryMap::absoluteRect): Ditto.
        (WebCore::RenderGeometryMap::mapToContainer): Map to the supplied container,
        asserting that we found it. Add point- and rect-based mapping methods
        akin to the old absoluteRect/absolutePoint.
        (WebCore::canMapViaLayer): We need to test for isRenderFlowThread() here too.
        (WebCore::RenderGeometryMap::pushMappingsToAncestor): When mapping via
        layers, ensure that the RenderView is pushed as the first step.
        * rendering/RenderGeometryMap.h:
        (RenderGeometryMap):
        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::updateLayerPositionsAfterLayout): New wrapper for updateLayerPositions()
        that makes the geometry map.
        (WebCore::RenderLayer::updateLayerPositionsAfterScroll): New wrapper for updateLayerPositionsAfterScroll
        that makes the geometry map.
        (WebCore::RenderLayer::updateLayerPositions): Now takes an optional RenderGeometryMap.
        Remove the old offsetFromRoot code. Push and pop layers to/from the geometry map. Use
        the geometry map to get the offsetFromRoot as needed by overflow controls. Pass
        it to computeRepaintRects().
        (WebCore::RenderLayer::computeRepaintRects): Pass the geometry map to outlineBoundsForRepaint().
        (WebCore::RenderLayer::updateLayerPositionsAfterScroll): Push and pop to/from the
        geometry map, and pass it to computeRepaintRects().
        (WebCore::RenderLayer::removeOnlyThisLayer): Remove the offsetFromRootBeforeMove
        computation; this could use a geometry map in future if it is shown to be a bottleneck.
        * rendering/RenderLayer.h:
        (WebCore::RenderLayer::canUseConvertToLayerCoords): It was thought that the isComposited()
        was there because the older cached offsetFromRoot logic was sensitive to compositing,
        but convertToLayerCoords() is not affected by compositing so this check is not needed,
        and actually harmful.
        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::OverlapMap::OverlapMap): The geometry map
        used for overlap testing should not use SnapOffsetForTransforms, so initialize
        it explicitly with just the UseTransforms flag.
        * rendering/RenderObject.h:
        (WebCore::RenderObject::outlineBoundsForRepaint):
        * rendering/svg/RenderSVGModelObject.cpp:
        (WebCore::RenderSVGModelObject::outlineBoundsForRepaint):
        * rendering/svg/RenderSVGModelObject.h:
        (RenderSVGModelObject):

2012-11-16  Alec Flett  <alecflett@chromium.org>

        Add tests for explicit serialization values
        https://bugs.webkit.org/show_bug.cgi?id=96818

        Reviewed by Adam Barth.

        Expose direct access to the serialization/deserialization mechanisms
        of SerializedScriptValue to DumpRenderTree.

        * testing/Internals.cpp:
        (WebCore::Internals::serializeObject):
        (WebCore):
        (WebCore::Internals::deserializeBuffer):
        * testing/Internals.h:
        (WebCore):
        * testing/Internals.idl:

2012-11-16  Andreas Kling  <akling@apple.com>

        Exploit shared attribute data to avoid parsing identical "style" attributes.
        <http://webkit.org/b/101163>

        Reviewed by Antti Koivisto.

        Track the "inline style dirty" state on ElementAttributeData instead of in a Node flag.
        This allows us to avoid duplicate work for ElementAttributeData that are shared between multiple elements,
        since the state is no longer per-Element.

        * css/StyleResolver.cpp:
        (WebCore::isCacheableInMatchedPropertiesCache):

            Disable the matched properties cache for styles with non-standard writing-mode.
            This is necessary because some CSS properties have different meaning depending on context -
            properties handled by CSSProperty::resolveDirectionAwareProperty().

            Now that multiple elements may have identical inlineStyle() pointers, this is necessary to
            avoid mapping StylePropertySets with direction-aware properties to RenderStyles with differing
            writing-modes in the matched properties cache.

        * dom/Node.h:
        * dom/ElementAttributeData.cpp:
        (WebCore::ElementAttributeData::ElementAttributeData):
        * dom/ElementAttributeData.h:
        (WebCore::ElementAttributeData::ElementAttributeData):
        (ElementAttributeData):
        * dom/Element.h:
        (WebCore::Element::updateInvalidAttributes):
        * dom/Element.cpp:
        (WebCore::Element::getAttribute):
        (WebCore::Element::removeAttribute):
        * dom/StyledElement.h:
        (WebCore::StyledElement::invalidateStyleAttribute):
        * dom/StyledElement.cpp:
        (WebCore::StyledElement::updateStyleAttribute):

            Move "style attribute dirty" flag to ElementAttributeData.

        (WebCore::Element::cloneAttributesFromElement):

            Remove ugly optimization to avoid reparsing inline style when cloning elements. This now happens
            automagically since cloning nodes just refs the original attribute data.

        * dom/StyledElement.cpp:
        (WebCore::StyledElement::updateStyleAttribute):
        (WebCore::StyledElement::setInlineStyleFromString):
        (WebCore::StyledElement::styleAttributeChanged):
        (WebCore::StyledElement::inlineStyleChanged):

            Avoid reparsing the inline style if the element's attribute data is immutable and already has
            a parsed inlineStyle(). Split the set-inline-style-from-string code out of styleAttributeChanged()
            to make the code more understandable.

2012-11-16  Simon Fraser  <simon.fraser@apple.com>

        Don't update layer positions on scrolling if we're in the middle of layout
        https://bugs.webkit.org/show_bug.cgi?id=102556

        Reviewed by Dan Bernstein.

        RenderLayer::scrollTo() can be called in the middle of layout. When
        that happens we should not waste time updating layer positions,
        compositing layers, or widget positions, because we'll do those at the
        end of layout anyway.
        
        This prevents us from having inconsistent RenderLayer state, which
        hinders future optimizations in this area.

        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::scrollTo):

2012-11-16  Tony Chang  <tony@chromium.org>

        Remove ENABLE_CSS_HIERARCHIES since it's no longer in use
        https://bugs.webkit.org/show_bug.cgi?id=102554

        Reviewed by Andreas Kling.

        As mentioned in https://bugs.webkit.org/show_bug.cgi?id=79939#c41 ,
        we're going to revist this feature once additional vendor support is
        achieved.

        No new tests, just removing an unused define.

        * Configurations/FeatureDefines.xcconfig:
        * GNUmakefile.features.am:

2012-11-16  Mark Pilgrim  <pilgrim@chromium.org>

        [Chromium] Remove cookie-related functions from PlatformSupport
        https://bugs.webkit.org/show_bug.cgi?id=99340

        Reviewed by Adam Barth.

        Move cookie-related functions out of PlatformSupport and implement
        new PlatformCookieJar interface via NetworkContext.

        * WebCore.gyp/WebCore.gyp:
        * WebCore.gypi:
        * loader/CookieJar.cpp:
        * loader/chromium/CookieJarChromium.cpp: Removed.
        * platform/chromium/PlatformSupport.h:
        (WebCore):
        (PlatformSupport):
        * platform/network/NetworkingContext.h:
        (WebKit):
        (NetworkingContext):
        * platform/network/chromium/CookieJarChromium.cpp: Copied from Source/WebCore/loader/chromium/CookieJarChromium.cpp.
        (WebCore::setCookiesFromDOM):
        (WebCore::cookiesForDOM):
        (WebCore::cookieRequestHeaderFieldValue):
        (WebCore::cookiesEnabled):
        (WebCore::getRawCookies):
        (WebCore::deleteCookie):
        (WebCore::getHostnamesWithCookies):
        (WebCore::deleteCookiesForHostname):
        (WebCore::deleteAllCookies):

2012-11-16  Pablo Flouret  <pablof@motorola.com>

        [JSC] Don't sanitize window.onerror information on crossorigin-enabled scripts
        https://bugs.webkit.org/show_bug.cgi?id=70574

        Reviewed by Geoffrey Garen.

        For scripts that use CORS (via the crossorigin attribute in this case),
        don't sanitize the information passed to the window's onerror handler (i.e.
        message, url, and line number). Useful for scripts hosted on CDNs.

        Tests: http/tests/security/script-crossorigin-onerror-information.html
               http/tests/security/script-no-crossorigin-onerror-should-be-sanitized.html

        * WebCore.exp.in:
        * WebCore.order:

        * bindings/js/JSDOMBinding.cpp:
        (WebCore::reportException):
        * bindings/js/JSDOMBinding.h:
        (WebCore):
        * bindings/js/ScriptController.cpp:
        (WebCore::ScriptController::evaluateInWorld):
        * bindings/js/ScriptSourceCode.h:
        (WebCore::ScriptSourceCode::ScriptSourceCode):
        (WebCore::ScriptSourceCode::cachedScript):
        (ScriptSourceCode):
        * bindings/js/WorkerScriptController.cpp:
        (WebCore::WorkerScriptController::evaluate):
            Keep a reference to the cached script in the ScriptSourceCode, so
            that it can be passed around and be available when reporting the
            exception.

        * dom/ScriptExecutionContext.cpp:
        (WebCore::ScriptExecutionContext::sanitizeScriptError):
        (WebCore::ScriptExecutionContext::reportException):
        (WebCore::ScriptExecutionContext::dispatchErrorEvent):
        * dom/ScriptExecutionContext.h:
        (WebCore):
        (ScriptExecutionContext):
            Check if the script passes the access control checks, and if so,
            don't sanitize the error information.

        * html/parser/HTMLPreloadScanner.cpp:
        (WebCore::PreloadTask::processAttributes):
        (WebCore::PreloadTask::preload):
        (PreloadTask):
        (WebCore::PreloadTask::crossOriginModeAllowsCookies):
            When preloading script elements, check for the crossorigin attribute
            and adjust the request's allowCookies value accordingly. Otherwise
            when the script is loaded from the cache later on, the cross origin mode
            (anonymous/use-credentials) will be effectively ignored.

2012-11-16  Jon Lee  <jonlee@apple.com>

        Change visual look of placeholder
        https://bugs.webkit.org/show_bug.cgi?id=102149
        <rdar://problem/12695566>

        Reviewed by Darin Adler.

        Move the button to the lower-right corner. Move the theming into
        RenderSnapshottedPlugin for now. Eventually we will want to migrate to using the
        shadow DOM instead, and the metrics of the button are needed for click passthrough.

        * Resources/startButton.png: Added.
        * Resources/startButton@2x.png: Added.
        * Resources/startButtonPressed.png: Added.
        * Resources/startButtonPressed@2x.png: Added.
        * WebCore.xcodeproj/project.pbxproj: Add button images.

        Maintain variables to track whether the mouse is over the button, and the rect
        for the button. If the user clicks in the rect, we render a pressed button.
        * rendering/RenderSnapshottedPlugIn.cpp:
        (WebCore): Add named constant for bottom and right padding of the button.
        (WebCore::RenderSnapshottedPlugIn::RenderSnapshottedPlugIn):
        (WebCore::RenderSnapshottedPlugIn::paintReplaced):
        (WebCore::startButtonImage): Returns button image.
        (WebCore::startButtonPressedImage): Returns pressed button image.
        (WebCore::RenderSnapshottedPlugIn::paintButton): Draw the button image in the
        lower right hand corner, but only if we are active or hovered.
        (WebCore::RenderSnapshottedPlugIn::repaintButton): Stubbed to call repaint().
        (WebCore::RenderSnapshottedPlugIn::handleEvent): Repaint the button if we are
        hovering over the plugin rect. With a mouse down event, calculate whether the
        mouse position is within the button rect.
        (WebCore::RenderSnapshottedPlugIn::layout): Cache the rect representing the button
        contents.
        * rendering/RenderSnapshottedPlugIn.h:

        Remove theming function for now.
        * rendering/RenderTheme.h:
        (RenderTheme):
        * rendering/RenderThemeMacShared.h:
        * rendering/RenderThemeMacShared.mm:

2012-11-16  Eric Seidel  <eric@webkit.org>

        Deploy ScriptWrappable to more always-wrapped objects
        https://bugs.webkit.org/show_bug.cgi?id=102539

        Reviewed by Adam Barth.

        Add the ScriptWrappable baseclass to:
        CSSStyleDeclaration (anttik tells me these should only be used from JS, even though some old Editing code used to use them)
        ClientRect (element.getBoundingClientRects)
        Event (Not all events end up wrapped, but any which live past dispatch do)
        NodeList (this covers Static and Dynamic node list types, like document.all)
        HTMLCollection (separate from NodeList, for things like table.rows)
        Storage (for window.storage, always wrapped)
        XMLHttpRequest (always wrapped, created from JS)

        This should be a small memory savings as the inline pointer is only 4-8 bytes
        instead of the hashmap entry which would be 8-16.  This may also show up
        on benchmarks which repeatedly access these objects (like window.storage).

        These were found by adding a couple lines of logging-code to
        WebCore::createWrapper when we were in the main world, but took the
        HashMap (instead of inline) storage path. I used sort and uniq -c
        to find the most-frequently wrapped objects (while surfing
        a few common sites) and came up with this list.  There are still a few
        more complicated objects (like CSSStyleDeclaration) which may benifit
        from inline-wrapper-access and will be covered in a later patch.

        * css/CSSStyleDeclaration.h:
        * dom/ClientRect.h:
        * dom/Event.h:
        * dom/NodeList.h:
        * html/HTMLCollection.h:
        * storage/Storage.h:
        * xml/XMLHttpRequest.h:

2012-11-16  Jon Lee  <jonlee@apple.com>

        Simulated events instances do not all have the same underlying event
        https://bugs.webkit.org/show_bug.cgi?id=102468
        <rdar://problem/12716331>

        Reviewed by Alexey Proskuryakov.

        The PassRefPtr with the underlying event is included as an argument for the mouse
        down, up, and click events. But the PassRefPtr loses its underlying pointer after
        the first simulated mouse down event because it gets assigned to that event's
        private m_underlyingEvent variable. We therefore send NULL to the other events.

        The fix is for this and related functions to pass the raw pointer.

        A layout test is not possible to put together because the call sites that use simulated
        events with an underlying event do not send mouse events, and those that send mouse
        events have a NULL underlying event.

        * dom/EventDispatcher.cpp:
        (WebCore::EventDispatcher::dispatchSimulatedClick): Require passing in the raw pointer.
        * dom/EventDispatcher.h:
        * dom/Node.cpp:
        (WebCore::Node::dispatchSimulatedClick): Ditto.
        * dom/Node.h:

2012-11-16  Patrick Gansterer  <paroga@webkit.org>

        Build fix for WinCE after r134936.

        * platform/network/win/CookieJarWin.cpp:
        (WebCore::cookieRequestHeaderFieldValue):

2012-11-16  Dimitri Glazkov  <dglazkov@chromium.org>

        Unreviewed, rolling out r134986.
        http://trac.webkit.org/changeset/134986
        https://bugs.webkit.org/show_bug.cgi?id=102110

        Triggered ASSERT in fast/frames/seamless/seamless-inherited-
        origin.html.

        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::StyleResolver):
        (WebCore::StyleResolver::addAuthorRulesAndCollectUserRulesFromSheets):
        (WebCore::collectCSSOMWrappers):
        * css/StyleResolver.h:
        (StyleResolver):
        * dom/Document.cpp:
        (WebCore::Document::setCompatibilityMode):
        * dom/DocumentStyleSheetCollection.cpp:
        (WebCore::DocumentStyleSheetCollection::DocumentStyleSheetCollection):
        (WebCore::DocumentStyleSheetCollection::~DocumentStyleSheetCollection):
        (WebCore::DocumentStyleSheetCollection::pageGroupUserSheets):
        (WebCore):
        (WebCore::DocumentStyleSheetCollection::clearPageGroupUserSheets):
        (WebCore::DocumentStyleSheetCollection::updatePageGroupUserSheets):
        (WebCore::DocumentStyleSheetCollection::addUserSheet):
        (WebCore::DocumentStyleSheetCollection::updateActiveStyleSheets):
        (WebCore::DocumentStyleSheetCollection::reportMemoryUsage):
        * dom/DocumentStyleSheetCollection.h:
        (DocumentStyleSheetCollection):
        (WebCore::DocumentStyleSheetCollection::documentUserSheets):
        * page/PageGroup.cpp:
        (WebCore::PageGroup::addUserStyleSheetToWorld):
        (WebCore::PageGroup::removeUserStyleSheetFromWorld):
        (WebCore::PageGroup::removeUserStyleSheetsFromWorld):
        (WebCore::PageGroup::removeAllUserContent):
        (WebCore::PageGroup::resetUserStyleCacheInAllFrames):
        * page/PageGroup.h:
        (PageGroup):

2012-11-16  Michael Pruett  <michael@68k.org>

        IndexedDB: Propagate DOMRequestState to IndexedDB binding utility functions
        https://bugs.webkit.org/show_bug.cgi?id=102430

        Reviewed by Adam Barth.

        DOMRequestState is currently propagated to some but not all of
        the IndexedDB binding utility functions. In order to implement
        these functions for JSC, this state must be propagated to all
        of the utility functions.

        Tests: storage/indexeddb/*

        * Modules/indexeddb/IDBCursor.cpp:
        (WebCore::IDBCursor::update):
        (WebCore::IDBCursor::setValueReady):
        * Modules/indexeddb/IDBObjectStore.cpp:
        (WebCore::generateIndexKeysForValue):
        (WebCore::IDBObjectStore::put):
        (WebCore):
        * Modules/indexeddb/IDBRequest.cpp:
        (WebCore::IDBRequest::onSuccess):
        (WebCore::IDBRequest::dispatchEvent):
        * Modules/indexeddb/IDBRequest.h:
        (WebCore::IDBRequest::requestState):
        (IDBRequest):
        * bindings/v8/IDBBindingUtilities.cpp:
        (WebCore::createIDBKeyFromScriptValueAndKeyPath):
        (WebCore::serializeIDBValue):
        (WebCore::injectIDBKeyIntoScriptValue):
        * bindings/v8/IDBBindingUtilities.h:
        (WebCore):

2012-11-16  Byungwoo Lee  <bw80.lee@samsung.com>

        Rebaselined run-bindings-tests.
        https://bugs.webkit.org/show_bug.cgi?id=102523

        Reviewed by Dimitri Glazkov.

        Expected results need to be updated after r134931

        * bindings/scripts/test/JS/JSTestObj.cpp:
        (WebCore::jsTestObjWithScriptArgumentsAndCallStackAttribute):
        (WebCore::setJSTestObjWithScriptArgumentsAndCallStackAttribute):
        (WebCore::jsTestObjPrototypeFunctionWithScriptArgumentsAndCallStack):
        * bindings/scripts/test/V8/V8TestObj.cpp:
        (WebCore::TestObjV8Internal::withScriptArgumentsAndCallStackAttributeAttrGetter):
        (WebCore::TestObjV8Internal::withScriptArgumentsAndCallStackAttributeAttrSetter):
        (WebCore::TestObjV8Internal::withScriptArgumentsAndCallStackCallback):

2012-11-16  Pratik Solanki  <psolanki@apple.com>

        For single element arrays use the pointer into the CFDataRef instead of copying data
        https://bugs.webkit.org/show_bug.cgi?id=102306
        <rdar://problem/12267471>

        Reviewed by Alexey Proskuryakov.

        We generally copy the data received from CFNetwork into our own buffers. But if the
        CFArrayRef has exactly one CFDataRef inside it, then we can just hold on to the CFDataRef
        and access its memory directly and avoid making a copy.

        This also moves the creation of PurgeableBuffer from CachedResource to SharedBuffer.
        SharedBuffer::createPurgeableBuffer() will avoid creating PurgeableBuffer when the
        SharedBuffer is backed by a NSData/CFDataRef and when we want to optimize and directly use
        the memory in the data array.

        No new tests because no change in functionality.

        * loader/ResourceBuffer.cpp:
        (WebCore::ResourceBuffer::createPurgeableBuffer): Added.
        * loader/ResourceBuffer.h:
        * loader/cache/CachedResource.cpp:
        (WebCore::CachedResource::makePurgeable):
        * platform/SharedBuffer.cpp:
        (WebCore::SharedBuffer::createPurgeableBuffer): Added.
        (WebCore::SharedBuffer::data):
        * platform/SharedBuffer.h:
        * platform/cf/SharedBufferCF.cpp:
        (WebCore::SharedBuffer::platformData): Use reinterpret_cast instead of C-style cast.
        (WebCore::SharedBuffer::maybeTransferPlatformData): Use reinterpret_cast instead of C-style cast.
        (WebCore::SharedBuffer::singleDataArrayBuffer): Added.

2012-11-16  Antti Koivisto  <antti@apple.com>

        REGRESSION(r129644): User StyleSheet not applying
        https://bugs.webkit.org/show_bug.cgi?id=102110

        Reviewed by Andreas Kling.

        Injected stylesheets added as UserStyleAuthorLevel fail to apply. r129644 implicitly assumed that
        such things don't exists but on Chromium addUserStyleSheet() confusingly uses them.
        
        The patch adds injected author stylesheets to DocumentStyleSheetCollection::activeStyleSheets().
        It also generally cleans up the code around injected and user stylesheets.

        Tests: userscripts/user-script-and-stylesheet.html
               userscripts/user-stylesheet-invalidate.html

        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::StyleResolver):
        (WebCore::StyleResolver::collectRulesFromUserStyleSheets):
        (WebCore::collectCSSOMWrappers):
        * css/StyleResolver.h:
        (StyleResolver):
        * dom/Document.cpp:
        (WebCore::Document::setCompatibilityMode):
        * dom/DocumentStyleSheetCollection.cpp:
        (WebCore::DocumentStyleSheetCollection::DocumentStyleSheetCollection):
        (WebCore::DocumentStyleSheetCollection::~DocumentStyleSheetCollection):
        (WebCore::DocumentStyleSheetCollection::injectedUserStyleSheets):
        (WebCore):
        (WebCore::DocumentStyleSheetCollection::injectedAuthorStyleSheets):
        (WebCore::DocumentStyleSheetCollection::updateInjectedStyleSheetCache):
        (WebCore::DocumentStyleSheetCollection::invalidateInjectedStyleSheetCache):
        (WebCore::DocumentStyleSheetCollection::addUserSheet):
        (WebCore::DocumentStyleSheetCollection::updateActiveStyleSheets):
        (WebCore::DocumentStyleSheetCollection::reportMemoryUsage):
        * dom/DocumentStyleSheetCollection.h:
        (WebCore::DocumentStyleSheetCollection::documentUserStyleSheets):
        (DocumentStyleSheetCollection):
        * page/PageGroup.cpp:
        (WebCore::PageGroup::addUserStyleSheetToWorld):
        (WebCore::PageGroup::removeUserStyleSheetFromWorld):
        (WebCore::PageGroup::removeUserStyleSheetsFromWorld):
        (WebCore::PageGroup::removeAllUserContent):
        (WebCore::PageGroup::invalidatedInjectedStyleSheetCacheInAllFrames):
        * page/PageGroup.h:
        (PageGroup):

2012-11-16  Andreas Kling  <akling@apple.com>

        StyleResolver: Only input elements need equal "readonly" attribute for style sharing.
        <http://webkit.org/b/102536>

        Reviewed by Antti Koivisto.

        Move the comparison of the "readonly" attribute into canShareStyleWithControl() since it's only
        relevant for sharing style between <input> elements.

        Also skip attribute comparisons for form control elements that share the same ElementAttributeData.

        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::canShareStyleWithControl):
        (WebCore::haveIdenticalStyleAffectingAttributes):

2012-11-16  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r134867.
        http://trac.webkit.org/changeset/134867
        https://bugs.webkit.org/show_bug.cgi?id=102544

        Broke security fuzzier test (heap-buffer-overflow) (Requested
        by bfulgham on #webkit).

        * platform/audio/Biquad.cpp:
        (WebCore::Biquad::process):

2012-11-16  Tommy Widenflycht  <tommyw@google.com>

        MediaStream API: Update RTCPeerConnection states to match the latest editors draft
        https://bugs.webkit.org/show_bug.cgi?id=102382

        Reviewed by Adam Barth.

        Updating readyState & iceState, and adding iceGatheringState.
        Also safeguarding the event timer callback.

        Patch covered by existing tests.

        * Modules/mediastream/RTCPeerConnection.cpp:
        (WebCore::RTCPeerConnection::RTCPeerConnection):
        (WebCore::RTCPeerConnection::createOffer):
        (WebCore::RTCPeerConnection::createAnswer):
        (WebCore::RTCPeerConnection::setLocalDescription):
        (WebCore::RTCPeerConnection::localDescription):
        (WebCore::RTCPeerConnection::setRemoteDescription):
        (WebCore::RTCPeerConnection::remoteDescription):
        (WebCore::RTCPeerConnection::updateIce):
        (WebCore::RTCPeerConnection::addIceCandidate):
        (WebCore::RTCPeerConnection::readyState):
        (WebCore::RTCPeerConnection::iceGatheringState):
        (WebCore):
        (WebCore::RTCPeerConnection::iceState):
        (WebCore::RTCPeerConnection::addStream):
        (WebCore::RTCPeerConnection::close):
        (WebCore::RTCPeerConnection::didChangeIceGatheringState):
        (WebCore::RTCPeerConnection::stop):
        (WebCore::RTCPeerConnection::changeReadyState):
        (WebCore::RTCPeerConnection::scheduledEventTimerFired):
        * Modules/mediastream/RTCPeerConnection.h:
        (RTCPeerConnection):
        * Modules/mediastream/RTCPeerConnection.idl:
        * dom/EventNames.h:
        (WebCore):
        * platform/mediastream/RTCPeerConnectionHandlerClient.h:
        (RTCPeerConnectionHandlerClient):
        * platform/mediastream/chromium/RTCPeerConnectionHandlerChromium.cpp:
        (WebCore::RTCPeerConnectionHandlerChromium::didChangeICEGatheringState):
        (WebCore):
        * platform/mediastream/chromium/RTCPeerConnectionHandlerChromium.h:
        (RTCPeerConnectionHandlerChromium):

2012-11-16  Dimitri Glazkov  <dglazkov@chromium.org>

        Unreviewed, rolling out r134973.
        http://trac.webkit.org/changeset/134973
        https://bugs.webkit.org/show_bug.cgi?id=99340

        Broke compile on at least Mac and Linux.

        * WebCore.gyp/WebCore.gyp:
        * WebCore.gypi:
        * loader/CookieJar.cpp:
        * loader/chromium/CookieJarChromium.cpp: Renamed from Source/WebKit/chromium/src/FrameNetworkingContextImpl.cpp.
        (WebCore):
        (WebCore::setCookies):
        (WebCore::cookies):
        (WebCore::cookieRequestHeaderFieldValue):
        (WebCore::cookiesEnabled):
        (WebCore::getRawCookies):
        (WebCore::deleteCookie):
        (WebCore::getHostnamesWithCookies):
        (WebCore::deleteCookiesForHostname):
        (WebCore::deleteAllCookies):
        * platform/chromium/PlatformSupport.h:
        (WebCore):
        (PlatformSupport):
        * platform/network/NetworkingContext.h:
        * platform/network/chromium/CookieJarChromium.cpp: Removed.

2012-11-16  Martin Robinson  <mrobinson@igalia.com>

        [GTK] [WebKit2] Move GtkAuthenticationDialog to the UIProcess
        https://bugs.webkit.org/show_bug.cgi?id=101843

        Reviewed by Gustavo Noronha Silva.

        Make GtkAuthenticationDialog more general, so that it can be subclassed in 
        WebKit2. We cannot use the WebCore authentication-related classes directly there.

        No new tests. This patch does not change behavior.

        * platform/gtk/GtkAuthenticationDialog.cpp:
        (WebCore::GtkAuthenticationDialog::GtkAuthenticationDialog): Remove an unused include and reorder
        some field initializers.
        (WebCore::GtkAuthenticationDialog::authenticate): Now handle both the okay and cancel case here. This
        makes it simpler to subclass.
        (WebCore::GtkAuthenticationDialog::authenticationDialogResponseCallback): Handle fetching the username
        and password here, so that it can be shared with subclasses.
        * platform/gtk/GtkAuthenticationDialog.h: Make some methods virtual and protected so they can be
        subclasses.

2012-11-16  Mark Pilgrim  <pilgrim@chromium.org>

        [Chromium] Remove cookie-related functions from PlatformSupport
        https://bugs.webkit.org/show_bug.cgi?id=99340

        Reviewed by Adam Barth.

        Move cookie-related functions out of PlatformSupport and implement
        new PlatformCookieJar interface via NetworkContext.

        * WebCore.gyp/WebCore.gyp:
        * WebCore.gypi:
        * loader/CookieJar.cpp:
        * loader/chromium/CookieJarChromium.cpp: Removed.
        * platform/chromium/PlatformSupport.h:
        (WebCore):
        (PlatformSupport):
        * platform/network/NetworkingContext.h:
        (WebKit):
        (NetworkingContext):
        * platform/network/chromium/CookieJarChromium.cpp: Copied from Source/WebCore/loader/chromium/CookieJarChromium.cpp.
        (WebCore::setCookiesFromDOM):
        (WebCore::cookiesForDOM):
        (WebCore::cookieRequestHeaderFieldValue):
        (WebCore::cookiesEnabled):
        (WebCore::getRawCookies):
        (WebCore::deleteCookie):
        (WebCore::getHostnamesWithCookies):
        (WebCore::deleteCookiesForHostname):
        (WebCore::deleteAllCookies):

2012-11-16  Byungwoo Lee  <bw80.lee@samsung.com>

        Fix assertion bug of build fix r134961
        https://bugs.webkit.org/show_bug.cgi?id=102533

        Reviewed by Martin Robinson.

        Assertion condition should be '!d->m_currentWebChallenge.isNull()'

        * platform/network/soup/ResourceHandleSoup.cpp:
        (WebCore::ResourceHandle::continueDidReceiveAuthenticationChallenge):

2012-11-16  Tommy Widenflycht  <tommyw@google.com>

        [chromium] MediaStream API: Add missing WebRTCPeerConnectionHandlerClient::didAddRemoteDataChannel
        https://bugs.webkit.org/show_bug.cgi?id=102386

        Reviewed by Adam Barth.

        Existing tests expanded to cover patch.

        * platform/mediastream/RTCDataChannelDescriptor.cpp:
        (WebCore::RTCDataChannelDescriptor::RTCDataChannelDescriptor):
        (WebCore::RTCDataChannelDescriptor::readyStateChanged):
        * platform/mediastream/chromium/RTCPeerConnectionHandlerChromium.cpp:
        (WebCore::RTCPeerConnectionHandlerChromium::didAddRemoteDataChannel):
        (WebCore):
        * platform/mediastream/chromium/RTCPeerConnectionHandlerChromium.h:
        (WebKit):
        (RTCPeerConnectionHandlerChromium):

2012-11-16  Scott Violet  <sky@chromium.org>

        [chromium] Copy linux theme related files to default
        https://bugs.webkit.org/show_bug.cgi?id=102403

        Reviewed by Tony Chang

        Transitional patch that copies linux WebThemeEngine to default directory.

        No new tests, refactoring only.

        * WebCore.gyp/WebCore.gyp: Update compile rules when use_default_render_theme is set.
        * WebCore.gypi: Adds new files.
        * platform/chromium/PlatformSupport.h:
        * platform/chromium/PlatformThemeChromiumDefault.cpp: Copied from Source/WebCore/platform/chromium/PlatformThemeChromiumLinux.cpp.
        * platform/chromium/PlatformThemeChromiumDefault.h: Copied from Source/WebCore/platform/chromium/PlatformThemeChromiumLinux.h.
        * platform/chromium/ScrollbarThemeChromiumDefault.cpp: Copied from Source/WebCore/platform/chromium/ScrollbarThemeChromiumLinux.cpp.
        * platform/chromium/ScrollbarThemeChromiumDefault.h: Copied from Source/WebCore/platform/chromium/ScrollbarThemeChromiumLinux.h.
        * rendering/RenderThemeChromiumDefault.cpp: Copied from Source/WebCore/rendering/RenderThemeChromiumLinux.cpp.
        * rendering/RenderThemeChromiumDefault.h: Copied from Source/WebCore/rendering/RenderThemeChromiumLinux.h.

2012-11-16  Alec Flett  <alecflett@chromium.org>

        IndexedDB: add missing 'explicit' and fix backing store release
        https://bugs.webkit.org/show_bug.cgi?id=102450

        Reviewed by Tony Chang.

        A inconsequential regression was introduced in http://trac.webkit.org/changeset/134129
        which resulted in objects sticking around a bit longer than
        expected. This makes sure the LevelDBTransaction is released
        at the moment of commit/rollback rather than when IDBTransactionBackendImpl
        is destroyed.

        No new tests, this is just internal state that will affect
        some future refactoring.

        * Modules/indexeddb/IDBBackingStore.h:
        (Cursor):
        (Transaction):
        (WebCore::IDBBackingStore::Transaction::reset):
        * Modules/indexeddb/IDBTransactionBackendImpl.cpp:
        (WebCore::IDBTransactionBackendImpl::abort):
        (WebCore::IDBTransactionBackendImpl::commit):

2012-11-16  Dimitri Glazkov  <dglazkov@chromium.org>

        [Chromium] One last tweak to WebCore.gypi to make Win build not sad.

        * WebCore.gypi: Removed one last mention of accessibility/gtk file.

2012-11-16  Robert Flack  <flackr@chromium.org>

        Handle gesture events on scrollbars.
        https://bugs.webkit.org/show_bug.cgi?id=101516

        Reviewed by Antonio Gomes.

        Adds a gesture event handler to scrollbars and sends gestures beginning
        over a scrollbar to this handler to allow touch scrolling scrollbars.

        Test: fast/events/touch/gesture/gesture-scrollbar.html

        * page/EventHandler.cpp:
        (WebCore::EventHandler::clear):
        (WebCore::EventHandler::handleGestureEvent):
        (WebCore::EventHandler::isScrollbarHandlingGestures):
        (WebCore):
        * page/EventHandler.h:
        (EventHandler):
        * platform/Scrollbar.cpp:
        (WebCore::Scrollbar::Scrollbar):
        (WebCore):
        (WebCore::Scrollbar::gestureEvent):
        (WebCore::Scrollbar::mouseMoved):
        (WebCore::Scrollbar::mouseUp):
        (WebCore::Scrollbar::mouseDown):
        * platform/Scrollbar.h:
        (WebCore):
        (Scrollbar):
        * platform/ScrollbarTheme.h:
        (WebCore::ScrollbarTheme::hitTest):
        * platform/ScrollbarThemeComposite.cpp:
        (WebCore::ScrollbarThemeComposite::hitTest):
        * platform/ScrollbarThemeComposite.h:
        (ScrollbarThemeComposite):
        * platform/qt/ScrollbarThemeQStyle.cpp:
        (WebCore::ScrollbarThemeQStyle::hitTest):
        * platform/qt/ScrollbarThemeQStyle.h:
        (ScrollbarThemeQStyle):

2012-11-16  Xianzhu Wang  <wangxianzhu@chromium.org>

        [Chromium-Android] Stack overflow in MediaControlsChromiumAndroid.cpp
        https://bugs.webkit.org/show_bug.cgi?id=102444

        Reviewed by Adam Barth.

        No new tests. Have been covered by many existing layout tests.

        * html/shadow/MediaControlsChromiumAndroid.cpp:
        (WebCore::MediaControls::create): Calls createControls instead of itself.

2012-11-16  Andreas Kling  <akling@apple.com>

        StyleResolver: Optimize sharing candidate evaluation for elements with shared attribute data.
        <http://webkit.org/b/102507>

        Reviewed by Antti Koivisto.

        When evaluating two elements as potential style sharing candidate, we have a whole bunch of code
        comparing the various attributes that would prevent sharing.

        If the two elements both share the same ElementAttributeData, we can skip all those checks
        since they are guaranteed to have equal attributes.

        Cuts the time spent in canShareStyleWithElement() by 25% on the HTML5 spec at <http://whatwg.org/c>.

        * css/StyleResolver.cpp:
        (WebCore::haveIdenticalStyleAffectingAttributes):
        (WebCore::StyleResolver::canShareStyleWithElement):

2012-11-16  Byungwoo Lee  <bw80.lee@samsung.com>

        [EFL][GTK] Build fix after r134955
        https://bugs.webkit.org/show_bug.cgi?id=102527

        Reviewed by Martin Robinson.

        Fix the EFL,GTK debug bulid fails after r134955.

        * platform/network/soup/ResourceHandleSoup.cpp:
        (WebCore::ResourceHandle::continueDidReceiveAuthenticationChallenge):

2012-11-15  Alexey Proskuryakov  <ap@apple.com>

        Private Browsing is a per-page setting that sets a global value
        https://bugs.webkit.org/show_bug.cgi?id=67870

        Reviewed by Sam Weinig.

        Make ResourceHandle{Mac,CFNet} use context to access storage session.

        * WebCore.exp.in: We track less session state in WebCore now, so we need fewer
        exports.

        * loader/FrameNetworkingContext.h: Added an OVERRIDE.

        * page/Settings.cpp: (WebCore::Settings::setPrivateBrowsingEnabled): WebCore
        no longer keeps track of a globally enabled private CFNetwork storage session.

        * platform/CookiesStrategy.h: Added defaultCookieStorage(). Some cookie jar methods
        don't have a NetworkingContext pointer, and have to use whatever a client expects
        them to do. Perhaps we should move those methods away from WebCore eventually.

        * platform/network/NetworkingContext.h: Added storageSession().

        * platform/network/ResourceHandle.h: Removed sttaic methods for dealing with global
        sessions.

        * platform/network/ResourceHandleInternal.h: Added m_storageSession. We need to
        remember it post-creation to do things in willSendRequest. Alternatively, we could
        keep a reference to NetworkingContext itself.

        * platform/network/cf/CookieJarCFNet.cpp:
        (WebCore::setCookiesFromDOM): currentCFHTTPCookieStorage now needs a context,
        there is no globally current one any more. Also, we don't really expect cookie
        stirage to be 0 when not using NSURLConnection.
        (WebCore::cookiesForDOM): Ditto.
        (WebCore::cookieRequestHeaderFieldValue): Ditto.
        (WebCore::cookiesEnabled): Ditto.
        (WebCore::getRawCookies): Ditto.
        (WebCore::deleteCookie): Ditto.
        (WebCore::getHostnamesWithCookies): Ditto.
        (WebCore::deleteCookiesForHostname): Ditto.
        (WebCore::deleteAllCookies): Ditto.
        * platform/network/cf/CookieStorageCFNet.cpp:
        (WebCore::currentCFHTTPCookieStorage): Use a context.
        (WebCore::defaultCFHTTPCookieStorage): Except for Windows-only override session,
        this is implemented in a strategy.
        (WebCore::overridenCookieStorage): Exposed the override for WebKit use on Windows.

        * platform/network/cf/CookieStorageCFNet.h: Ditto.

        * platform/network/cf/ResourceHandleCFNet.cpp:
        (WebCore::willSendRequest): Use storage session from the context, not global one.
        (WebCore::makeFinalRequest): Merged this into the only remaining caller. This
        function didn't really make any sense on its own.
        (WebCore::shouldRelaxThirdPartyCookiePolicy): Factored out of createCFURLConnection
        to match Mac.
        (WebCore::ResourceHandle::createCFURLConnection): While merging makeFinalRequest()
        in, removed some seemingly nonsensical code that was getting and immediately re-applying
        cookie storage accept policy.
        (WebCore::ResourceHandle::start): Store context->storageSession() for use in willSendRequest.
        (WebCore::ResourceHandle::willSendRequest): Apply the stored session, not global one.
        (WebCore::ResourceHandle::storageSession): An accessor for static methods that cannot
        access "d".
        (WebCore::ResourceHandle::loadResourceSynchronously): Store context->storageSession() for use in willSendRequest.
        (WebCore::ResourceHandle::willLoadFromCache): Don't call makeFinalRequest here.
        It didn't match Mac, and nothing in makeFinalRequest should have affected the result.

        * platform/network/cf/ResourceRequestCFNet.cpp: (WebCore::ResourceRequest::doUpdatePlatformRequest):
        This function used to apply current storage session to every request for no apparent
        reason.

        * platform/network/mac/CookieJarMac.mm:
        (WebCore::cookiesForDOM): Changed to pass context to currentCFHTTPCookieStorage.
        (WebCore::cookieRequestHeaderFieldValue): Ditto.
        (WebCore::setCookiesFromDOM): Ditto.
        (WebCore::cookiesEnabled): Ditto.
        (WebCore::getRawCookies): Ditto.
        (WebCore::deleteCookie): Ditto.
        (WebCore::getHostnamesWithCookies): Ditto.
        (WebCore::deleteCookiesForHostname): Ditto.
        (WebCore::deleteAllCookies): Ditto.
        * platform/network/mac/ResourceHandleMac.mm:
        (WebCore::shouldRelaxThirdPartyCookiePolicy): There was no need to special case
        null currentCFHTTPCookieStorage, WKSI handles that internally. Added a context
        argument, so that the function can access current session.
        (WebCore::ResourceHandle::createNSURLConnection): Updated for other code changes.
        (WebCore::ResourceHandle::start): Store context->storageSession() for use in willSendRequest.
        (WebCore::ResourceHandle::willLoadFromCache): Style fix.
        (WebCore::ResourceHandle::loadResourceSynchronously): Store context->storageSession()
        for use in willSendRequest. 
        (WebCore::ResourceHandle::willSendRequest): Use stored session, not global one.

2012-11-16  Dimitri Glazkov  <dglazkov@chromium.org>

        [Chromium] Land a proper fix for r134939.

        * WebCore.gyp/WebCore.gyp: Added exclusion for "atk".
        * WebCore.gypi: Put the accessibility/atk directory back into WebCore.gypi.

2012-11-16  Dimitri Glazkov  <dglazkov@chromium.org>

        [Chromium] Just yank the whole accessibility/atk dir out of WebCore.gypi.

2012-11-16  Dimitri Glazkov  <dglazkov@chromium.org>

        [Chromium] Updated WebCore.gypi after r134939.

        * WebCore.gypi: Renamed acessibility/gtk to accessibility/atk.

2012-11-16  Martin Robinson  <mrobinson@igalia.com>

        [GTK] Move CredentialBackingStore usage from GtkAuthenticationDialog to ResourceHandleSoup
        https://bugs.webkit.org/show_bug.cgi?id=101840

        Reviewed by Gustavo Noronha Silva.

        Make ResourceHandleSoup aware of per-session CredentialStorage and persistent CredentialStorage.
        Persistent credential storage interaction is moved from GtkAuthenticationDialog, so that it can
        be used whether or not GtkAuthenticationDialog is used or not. We try to properly handle redirects
        in the manner that the CFNet backend does.

        No new tests. There are tests for this behavior, but they cannot be activated until we finish
        plumbing this through to the API layer. Once that patch lands, the tests will be turned on.

        * platform/gtk/GtkAuthenticationDialog.cpp: No longer store credentials into the persistent
        storage manually, instead rely on ResourceHandleSoup. Also, we no longer get proposed credentials
        from the persistent storage here as well. They are pre-loaded by the ResourceHanndle.
        * platform/gtk/GtkAuthenticationDialog.h: Remove callbacks and members associated with saving
        credentials to the persistent credential store.
        * platform/network/ResourceHandle.h:
        (ResourceHandle): Add a method which is used to continue asynchronously after looking for
        proposed credentials in the persistent credential store.
        * platform/network/ResourceHandleInternal.h: Add a member which tracks persistent credentials to be added once we know
        an authentication succeeded.
        * platform/network/gtk/CredentialBackingStore.cpp:
        (CredentialForChallengeAsyncReadyCallbackData): Added this data structure used for asynchronous access
        of stored credentials.
        (WebCore::credentialForChallengeAsyncReadyCallback): Ditto for this callback.
        (WebCore::CredentialBackingStore::credentialForChallenge): Make this method asynchronous.
        * platform/network/gtk/CredentialBackingStore.h:
        (CredentialBackingStore): Update method signatures for for making credentialForChallenge asynchronous.
        * platform/network/soup/AuthenticationChallenge.h:
        (WebCore::AuthenticationChallenge::setProposedCredential): Added a setter so that ResourceHandleSoup
        can set proposed credentials from the persistent credential store.
        * platform/network/soup/ResourceHandleSoup.cpp:
        (WebCore::gotHeadersCallback): For GTK+ save any pending credential in the persistent credential storage
        if the authentication succeeded.
        (WebCore::applyAuthenticationToRequest): Added this method which generically embeds stored credentials
        in the request URI. This is the method that Soup uses to override any soup-stored session credential.
        (WebCore::restartedCallback): Strip credentials for requests that span a security origin. Handle
        authenticating requests from the session store.
        (WebCore::createSoupRequestAndMessageForHandle): Make the local request reference mutable.
        (WebCore::ResourceHandle::start): Remove some code which is now part of applyAuthenticationToRequest.
        Call applyAuthenticationToRequest and clear the user and password members like the CFNet backend does.
        (WebCore::getCredentialFromPersistentStoreCallback): Added this callback for getting persistently stored credentials.
        (WebCore::ResourceHandle::continueDidReceiveAuthenticationChallenge): Split out didReceiveAuthenticationChallenge
        into this asynchronous bit.
        (WebCore::ResourceHandle::didReceiveAuthenticationChallenge): For GTK+ continue handling this situation after
        first looking in the persistent credential store.
        (WebCore::ResourceHandle::receivedCredential): Store session credentials in the session storage, which is
        at the moment a redundant version of the Soup session storage and also prepare any persistent credentials
        for storage later (see gotHeadersCallback).

2012-11-16  Erik Arvidsson  <arv@chromium.org>

        Update DOMException name: TypeMismatchError
        https://bugs.webkit.org/show_bug.cgi?id=102418

        Reviewed by Kentaro Hara.

        Patch 17 of 25 to update DOMException name to match the spec and Firefox.

        Updated existing tests.

        * dom/DOMCoreException.cpp:
        (WebCore):
        * dom/ExceptionCode.h:

2012-11-16  Balazs Kelemen  <kbalazs@webkit.org>

        Coordinated Graphics: support the "freeze animations" API
        https://bugs.webkit.org/show_bug.cgi?id=100703

        Reviewed by Noam Rosenthal.

        Typo fix after previous patch.

        No new tests, it's just a typo that only takes effect in the browser.

        * platform/graphics/GraphicsLayerAnimation.cpp:
        (WebCore::GraphicsLayerAnimation::GraphicsLayerAnimation):
        Initialize members.

2012-11-16  Dan Carney  <dcarney@google.com>

        add 7 bit strings capabilities to the v8 binding layer
        https://bugs.webkit.org/show_bug.cgi?id=91850

        Reviewed by Adam Barth.

        This change enables the v8 binding layer to make use of webkit's
        8 bit string capabilities. Using 8 bit strings leads to certain
        benchmark performance improvemnts as can be seen in
        https://bug-91850-attachments.webkit.org/attachment.cgi?id=163334.

        No new tests.  Test coverage already extensive.

        * bindings/v8/V8PerIsolateData.cpp:
        (WebCore::V8PerIsolateData::visitExternalStrings):
        * bindings/v8/V8StringResource.cpp:
        (StringTraits):
        (WebCore::false):
        (WebCore):
        (WebCore::true):
        (WebCore::v8StringToWebCoreString):
        * bindings/v8/V8ValueCache.cpp:
        (WebCore::makeExternalString):
        (WebCore::WebCoreStringResourceBase::toWebCoreStringResourceBase):
        (WebCore):
        (WebCore::WebCoreStringResourceBase::visitStrings):
        * bindings/v8/V8ValueCache.h:
        (WebCoreStringResourceBase):
        (WebCore::WebCoreStringResourceBase::WebCoreStringResourceBase):
        (WebCore::WebCoreStringResourceBase::~WebCoreStringResourceBase):
        (WebCore::WebCoreStringResourceBase::atomicString):
        (WebCore::WebCoreStringResourceBase::memoryConsumption):
        (WebCoreStringResource16):
        (WebCore::WebCoreStringResource16::WebCoreStringResource16):
        (WebCore):
        (WebCoreStringResource8):
        (WebCore::WebCoreStringResource8::WebCoreStringResource8):

2012-11-16  Erik Arvidsson  <arv@chromium.org>

        Update DOMException name: InvalidAccessError
        https://bugs.webkit.org/show_bug.cgi?id=102400

        Reviewed by Kentaro Hara.

        Patch 15 of 25 to update DOMException name to match the spec and Firefox.

        Updated existing tests.

        * dom/DOMCoreException.cpp:

2012-11-16  Alexandru Chiculita  <achicu@adobe.com>

        [Texmap][CSS Shaders] Make the CustomFilterValidatedProgram maintain the platform compiled program
        https://bugs.webkit.org/show_bug.cgi?id=102414

        Reviewed by Noam Rosenthal.

        Added WebCore classes needed for the WebKit2 implementation of Texture Mapper to keep a reference to the 
        platform compiled custom filter. It is just used to maintain the life-time of the objects. WebKit2 injects a
        client in TextureMapperPlatformCompiledProgram and receives a callback when the custom filter program is not
        used to render any layer on the page. 

        Note that CustomFilterValidatedProgram are reused across multiple elements of the same page. Also, the instances
        are reused across frames, so animations should reuse the same pre-validated program. In this case, the mechanism is
        extended and reused in the platform compositor.
        
        No new tests, existing tests for CSS Custom Filters already cover this path.

        * CMakeLists.txt:
        * GNUmakefile.am:
        * GNUmakefile.list.am:
        * Target.pri:
        * WebCore.pri:
        * platform/graphics/filters/CustomFilterValidatedProgram.cpp:
        (WebCore):
        * platform/graphics/filters/CustomFilterValidatedProgram.h:
        (WebCore):
        (CustomFilterValidatedProgram):
        * platform/graphics/filters/texmap/CustomFilterValidatedProgramTextureMapper.cpp: Added.
        (WebCore):
        (WebCore::CustomFilterValidatedProgram::platformCompiledProgram): Platform implementation for creating and deleting the reference.
        (WebCore::CustomFilterValidatedProgram::platformInit):
        (WebCore::CustomFilterValidatedProgram::platformDestroy):
        * platform/graphics/filters/texmap/TextureMapperPlatformCompiledProgram.h: Added.
        (WebCore):
        (TextureMapperPlatformCompiledProgramClient):
        (WebCore::TextureMapperPlatformCompiledProgramClient::ref):
        (WebCore::TextureMapperPlatformCompiledProgramClient::deref):
        (TextureMapperPlatformCompiledProgram):
        Stores a link to a TextureMapperPlatformCompiledProgramClient. It's main purpose is to call unref on the client when
        the shader is not needed anymore. WebKit2 can use that to delete the corresponding shader from the compositor side.
        (WebCore::TextureMapperPlatformCompiledProgram::create):
        (WebCore::TextureMapperPlatformCompiledProgram::setClient): Used by WebKit2 to inject the platform client.
        (WebCore::TextureMapperPlatformCompiledProgram::client):
        (WebCore::TextureMapperPlatformCompiledProgram::TextureMapperPlatformCompiledProgram):

2012-11-16  Andreas Kling  <akling@apple.com>

        Short-circuit Element::hasEquivalentAttributes() if elements share attribute data.
        <http://webkit.org/b/102498>

        Reviewed by Antti Koivisto.

        Add a fast path to hasEquivalentAttributes() that checks if both elements are using
        the same ElementAttributeData.

        * dom/Element.cpp:
        (WebCore::Element::hasEquivalentAttributes):

2012-11-16  Zeno Albisser  <zeno@webkit.org>

        [Qt] Adding a null pointer check for currentContext to GraphicsContext3DQt.
        https://bugs.webkit.org/show_bug.cgi?id=102360

        QOpenGLContext::currentContext() will return null, in case there is
        no current context. Therefore currentContext must be null-checked
        before it can be reused.
        Making a context current on a null-surface on the other hand is
        perfectly possible.

        Reviewed by Kenneth Rohde Christiansen.

        * platform/graphics/qt/GraphicsContext3DQt.cpp:
        (WebCore::GraphicsContext3DPrivate::blitMultisampleFramebufferAndRestoreContext):

2012-11-16  Eugene Klyuchnikov  <eustas.bug@gmail.com>

        Web Inspector: Workaround to show shortcuts for panels that hasn't been loaded.
        https://bugs.webkit.org/show_bug.cgi?id=102488

        Reviewed by Vsevolod Vlasov.

        Panels are lazily loaded / instantiated.
        Panel constructors register keyboard shortcuts.

        When user open shortcuts screen all panel should be loaded.
        Otherwise some shortcuts will be missing.

        * inspector/front-end/ShortcutsScreen.js: Added callback invokation.
        * inspector/front-end/inspector.js:
        Provided callback that loads all panels.

2012-11-16  Kentaro Hara  <haraken@chromium.org>

        [V8] Remove IsSubType() from CodeGeneratorV8.pm
        https://bugs.webkit.org/show_bug.cgi?id=102348

        Reviewed by Adam Barth.

        CodeGenerator.pm has IsStrictSubType(). CodeGeneratorV8.pm should use it.

        No tests. No change in behavior.

        * bindings/scripts/CodeGenerator.pm:
        (IsSubType):
        * bindings/scripts/CodeGeneratorJS.pm:
        (GenerateImplementation):
        * bindings/scripts/CodeGeneratorV8.pm:
        (GenerateHeader):
        (GetInternalFields):
        (GenerateNormalAttrGetter):
        (GenerateNormalAttrSetter):
        (GenerateFunctionCallback):
        (GenerateImplementationIndexer):
        (GenerateToV8Converters):

2012-11-16  Mario Sanchez Prada  <mario@webkit.org>

        [EFL] Share WebKit-Gtk's Accessibility implementation with others WebKit ports.
        https://bugs.webkit.org/show_bug.cgi?id=99578

        Reviewed by Martin Robinson.

        Renamed WebCore/accessibility/gtk to WebCore/accessibility/atk.

        * GNUmakefile.am:
        * GNUmakefile.list.am:
        * accessibility/atk/AXObjectCacheAtk.cpp: Renamed from
        Source/WebCore/accessibility/gtk/AXObjectCacheAtk.cpp.
        * accessibility/atk/AccessibilityObjectAtk.cpp: Renamed from
        Source/WebCore/accessibility/gtk/AccessibilityObjectAtk.cpp.
        * accessibility/atk/WebKitAccessibleHyperlink.cpp: Renamed from
        Source/WebCore/accessibility/gtk/WebKitAccessibleHyperlink.cpp.
        * accessibility/atk/WebKitAccessibleHyperlink.h: Renamed from
        Source/WebCore/accessibility/gtk/WebKitAccessibleHyperlink.h.
        * accessibility/atk/WebKitAccessibleInterfaceAction.cpp: Renamed
        from Source/WebCore/accessibility/gtk/WebKitAccessibleInterfaceAction.cpp.
        * accessibility/atk/WebKitAccessibleInterfaceAction.h: Renamed
        from Source/WebCore/accessibility/gtk/WebKitAccessibleInterfaceAction.h.
        * accessibility/atk/WebKitAccessibleInterfaceComponent.cpp:
        Renamed from Source/WebCore/accessibility/gtk/WebKitAccessibleInterfaceComponent.cpp.
        * accessibility/atk/WebKitAccessibleInterfaceComponent.h: Renamed
        from Source/WebCore/accessibility/gtk/WebKitAccessibleInterfaceComponent.h.
        * accessibility/atk/WebKitAccessibleInterfaceDocument.cpp: Renamed
        from Source/WebCore/accessibility/gtk/WebKitAccessibleInterfaceDocument.cpp.
        * accessibility/atk/WebKitAccessibleInterfaceDocument.h: Renamed
        from Source/WebCore/accessibility/gtk/WebKitAccessibleInterfaceDocument.h.
        * accessibility/atk/WebKitAccessibleInterfaceEditableText.cpp:
        Renamed from Source/WebCore/accessibility/gtk/WebKitAccessibleInterfaceEditableText.cpp.
        * accessibility/atk/WebKitAccessibleInterfaceEditableText.h:
        Renamed from Source/WebCore/accessibility/gtk/WebKitAccessibleInterfaceEditableText.h.
        * accessibility/atk/WebKitAccessibleInterfaceHyperlinkImpl.cpp:
        Renamed from Source/WebCore/accessibility/gtk/WebKitAccessibleInterfaceHyperlinkImpl.cpp.
        * accessibility/atk/WebKitAccessibleInterfaceHyperlinkImpl.h:
        Renamed from Source/WebCore/accessibility/gtk/WebKitAccessibleInterfaceHyperlinkImpl.h.
        * accessibility/atk/WebKitAccessibleInterfaceHypertext.cpp:
        Renamed from Source/WebCore/accessibility/gtk/WebKitAccessibleInterfaceHypertext.cpp.
        * accessibility/atk/WebKitAccessibleInterfaceHypertext.h: Renamed
        from Source/WebCore/accessibility/gtk/WebKitAccessibleInterfaceHypertext.h.
        * accessibility/atk/WebKitAccessibleInterfaceImage.cpp: Renamed
        from Source/WebCore/accessibility/gtk/WebKitAccessibleInterfaceImage.cpp.
        * accessibility/atk/WebKitAccessibleInterfaceImage.h: Renamed from
        Source/WebCore/accessibility/gtk/WebKitAccessibleInterfaceImage.h.
        * accessibility/atk/WebKitAccessibleInterfaceSelection.cpp:
        Renamed from Source/WebCore/accessibility/gtk/WebKitAccessibleInterfaceSelection.cpp.
        * accessibility/atk/WebKitAccessibleInterfaceSelection.h: Renamed
        from Source/WebCore/accessibility/gtk/WebKitAccessibleInterfaceSelection.h.
        * accessibility/atk/WebKitAccessibleInterfaceTable.cpp: Renamed
        from Source/WebCore/accessibility/gtk/WebKitAccessibleInterfaceTable.cpp.
        * accessibility/atk/WebKitAccessibleInterfaceTable.h: Renamed from
        Source/WebCore/accessibility/gtk/WebKitAccessibleInterfaceTable.h.
        * accessibility/atk/WebKitAccessibleInterfaceText.cpp: Renamed
        from Source/WebCore/accessibility/gtk/WebKitAccessibleInterfaceText.cpp.
        * accessibility/atk/WebKitAccessibleInterfaceText.h: Renamed from
        Source/WebCore/accessibility/gtk/WebKitAccessibleInterfaceText.h.
        * accessibility/atk/WebKitAccessibleInterfaceValue.cpp: Renamed
        from Source/WebCore/accessibility/gtk/WebKitAccessibleInterfaceValue.cpp.
        * accessibility/atk/WebKitAccessibleInterfaceValue.h: Renamed from
        Source/WebCore/accessibility/gtk/WebKitAccessibleInterfaceValue.h.
        * accessibility/atk/WebKitAccessibleUtil.cpp: Renamed from
        Source/WebCore/accessibility/gtk/WebKitAccessibleUtil.cpp.
        * accessibility/atk/WebKitAccessibleUtil.h: Renamed from
        Source/WebCore/accessibility/gtk/WebKitAccessibleUtil.h.
        * accessibility/atk/WebKitAccessibleWrapperAtk.cpp: Renamed from
        Source/WebCore/accessibility/gtk/WebKitAccessibleWrapperAtk.cpp.
        * accessibility/atk/WebKitAccessibleWrapperAtk.h: Renamed from
        Source/WebCore/accessibility/gtk/WebKitAccessibleWrapperAtk.h.

2012-11-16  Shinya Kawanaka  <shinyak@chromium.org>

        Changing pseudoClass (:indeterminate) should cause distribution
        https://bugs.webkit.org/show_bug.cgi?id=101903

        Reviewed by Dimitri Glazkov.

        <progress> and <input type="checkbox"> have 'indeterminate' state. When their state is changed, we have to
        invalidate distribution if necessary. To check it, we collect a feature that :invalidate is used in select attributes.

        For <input>, we also have to see 'type' is changed. According to the spec, :indeterminate should match only
        progress element or <input type="checkbox">. So changing 'type' might also change :indeterminate state.

        Tests: fast/dom/shadow/pseudoclass-update-indeterminate-input.html
               fast/dom/shadow/pseudoclass-update-indeterminate-progress.html

        * html/HTMLInputElement.cpp:
        (WebCore::HTMLInputElement::updateType):
        (WebCore::HTMLInputElement::setIndeterminate):
        * html/HTMLProgressElement.cpp:
        (WebCore::HTMLProgressElement::didElementStateChange):

2012-11-16  Alexis Menard  <alexis@webkit.org>

        Factorize the creation of primitive values with a pair into a function.
        https://bugs.webkit.org/show_bug.cgi?id=102485

        Reviewed by Antti Koivisto.

        The pattern is already existing in various call sites inside CSSParser
        and more will be added in the future (see bug 102104).

        No new tests : It's a refactoring only, the tests should cover it.

        * css/CSSParser.cpp:
        (WebCore):
        (WebCore::createPrimitiveValuePair):
        (WebCore::CSSParser::parseValue):
        (WebCore::CSSParser::parseFillSize):
        (WebCore::CSSParser::parseBorderImageRepeat):
        (WebCore::CSSParser::parseBorderRadius):
        (WebCore::CSSParser::parseCounter):

2012-11-16  Mark Pilgrim  <pilgrim@chromium.org>

        Expand PlatformCookieJar interface to allow for other ports
        https://bugs.webkit.org/show_bug.cgi?id=102456

        Reviewed by Adam Barth.

        Add firstParty and cookieURL arguments to several functions to
        prepare for integrating Chromium port into new PlatformCookieJar
        interface.

        * loader/CookieJar.cpp:
        (WebCore::cookiesEnabled):
        (WebCore::cookieRequestHeaderFieldValue):
        (WebCore::getRawCookies):
        * platform/network/PlatformCookieJar.h:
        (WebCore):
        * platform/network/cf/CookieJarCFNet.cpp:
        (WebCore::cookieRequestHeaderFieldValue):
        (WebCore::cookiesEnabled):
        (WebCore::getRawCookies):
        * platform/network/curl/CookieJarCurl.cpp:
        (WebCore::cookieRequestHeaderFieldValue):
        (WebCore::cookiesEnabled):
        (WebCore::getRawCookies):
        * platform/network/mac/CookieJarMac.mm:
        (WebCore::cookieRequestHeaderFieldValue):
        (WebCore::cookiesEnabled):
        (WebCore::getRawCookies):
        * platform/network/qt/CookieJarQt.cpp:
        (WebCore::cookieRequestHeaderFieldValue):
        (WebCore::cookiesEnabled):
        (WebCore::getRawCookies):
        * platform/network/soup/CookieJarSoup.cpp:
        (WebCore::cookieRequestHeaderFieldValue):
        (WebCore::cookiesEnabled):
        (WebCore::getRawCookies):
        * platform/network/win/CookieJarWin.cpp:
        (WebCore::cookieRequestHeaderFieldValue):
        (WebCore::cookiesEnabled):
        (WebCore::getRawCookies):

2012-11-16  Julien Chaffraix  <jchaffraix@webkit.org>

        RenderGrid should have a function to resolve grid position
        https://bugs.webkit.org/show_bug.cgi?id=102441

        Reviewed by Ojan Vafai.

        The code was doing this conversion implicitly inside RenderGrid::findChildLogicalPosition.
        Also note that we also provided a fallback by returning LayoutPoint() (ie the (0, 0) position
        on the grid) if we couldn't handle the value. The explicit conversion is needed in order to
        support render areas and add a proper grid model to RenderGrid.

        No expected change in behavior.

        * rendering/RenderGrid.h:
        * rendering/RenderGrid.cpp:
        (WebCore::RenderGrid::resolveGridPosition):
        Added this new function to handle the conversion. We re-use Length but should never see
        a lot of the <length> values so I added some ASSERTs to enforce and catch that.

        (WebCore::RenderGrid::findChildLogicalPosition):
        Simplified the function now that it just use resolveGridPosition.

2012-11-16  Ulan Degenbaev  <ulan@chromium.org>

        [V8] Increment the amount of externally allocated memory for the receiving V8 isolate when transferring ArrayBuffer
        https://bugs.webkit.org/show_bug.cgi?id=94463

        Reviewed by Kentaro Hara.

        Call AdjustAmountOfExternalAllocatedMemory when V8ArrayBuffer is deserialized and transferred.

        Test: ManualTests/typed-array-memory.html

        * bindings/v8/SerializedScriptValue.cpp:

2012-11-16  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r134694.
        http://trac.webkit.org/changeset/134694
        https://bugs.webkit.org/show_bug.cgi?id=102481

        it made API test crash on EFL port (Requested by gyuyoung on
        #webkit).

        * platform/efl/RenderThemeEfl.cpp:
        (WebCore::fillColorsFromEdjeClass):
        (WebCore::RenderThemeEfl::setColorFromThemeClass):
        (WebCore::RenderThemeEfl::loadTheme):
        (WebCore::RenderThemeEfl::RenderThemeEfl):
        * platform/efl/RenderThemeEfl.h:
        (RenderThemeEfl):

2012-11-16  Mike West  <mkwst@chromium.org>

        Web Inspector: Move call stack generation out of bindings.
        https://bugs.webkit.org/show_bug.cgi?id=101331

        Reviewed by Yury Semikhatsky.

        Currently, we generate stack traces for console messages at each call
        site. Bug 100650 has the end goal of moving all stack trace generation
        inside of the Inspector in order to ensure that we never send a console
        message without a stack trace if it's possible to generate one. This
        also ensures that we never generate unused call stacks.

        This patch is the first step in that direction, moving stack trace
        generation out of the Console bindings, and into either Console or
        InspectorConsoleAgent.

        No visible change in behavior should result; this refactoring should
        continue to pass all existing inspector tests.

        * bindings/js/JSConsoleCustom.cpp:
        (WebCore::JSConsole::profile):
        (WebCore::JSConsole::profileEnd):
            Adjust custom JSC Console bindings to drop call stack generation.
        * bindings/scripts/CodeGeneratorJS.pm:
        (GenerateCallWith):
        * bindings/scripts/CodeGeneratorV8.pm:
        (GenerateCallWith):
            Drop call stack generation from JSC and V8 bindings.
        * bindings/scripts/CodeGeneratorGObject.pm:
            Skip timeEnd explicitly in these bindings; it used to include
            ScriptArguments, which autoskipped it. Now it doesn't, so it needs
            to be called out on its own.
        * bindings/v8/ScriptCallStackFactory.cpp:
        (WebCore::createScriptCallStackForConsole):
        (WebCore::createScriptCallStack):
        (WebCore):
        * bindings/v8/ScriptCallStackFactory.h:
        (WebCore):
            Add 'createScriptCallStack(ScriptState*, size_t)' to V8's
            ScriptCallStackFactory in order to match JCS' implementation.
            It simply delegates to 'createScriptCallStackForConsole', which
            now also accepts a 'maxStackSize' parameter.
        * bindings/v8/custom/V8ConsoleCustom.cpp:
        (WebCore::V8Console::traceCallback):
        (WebCore::V8Console::assertCallback):
        (WebCore::V8Console::profileCallback):
        (WebCore::V8Console::profileEndCallback):
            Adjust custom V8 bindings to drop call stack generation.
        * inspector/InspectorConsoleAgent.cpp:
        (WebCore::InspectorConsoleAgent::addMessageToConsole):
            With the eventual goal of getting rid of the call stack parameter
            entirely, this patch drops it from one version of
            'addMessageToConsole' (replacing it with ScriptState*), and creates
            a new version that only accepts a call stack. We should be able to
            migrate most (all?) external call sites over to the arguments
            version in future patches.
        (WebCore):
        (WebCore::InspectorConsoleAgent::count):
            Count takes 'ScriptState*' instead of a call stack, and generates
            the stack as needed.
        * inspector/InspectorConsoleAgent.h:
        (InspectorConsoleAgent):
        * inspector/InspectorConsoleInstrumentation.h:
        (WebCore::InspectorInstrumentation::addMessageToConsole):
        (WebCore):
        (WebCore::InspectorInstrumentation::consoleCount):
        * inspector/InspectorInstrumentation.cpp:
        (WebCore):
        (WebCore::InspectorInstrumentation::addMessageToConsoleImpl):
        (WebCore::InspectorInstrumentation::consoleCountImpl):
        * inspector/InspectorInstrumentation.h:
        (InspectorInstrumentation):
            Changes the InspectorInstrumentation pipeline to match the
            InspectorConsoleAgent changes.
        * page/Console.cpp:
        (WebCore::Console::addMessage):
            We now (always) generate one frame of a stack trace in order to
            populate line numbers and caller URLs. If we need to print the whole
            trace here, we generate a full stack.
        (WebCore::Console::debug):
        (WebCore::Console::error):
        (WebCore::Console::info):
        (WebCore::Console::log):
        (WebCore::Console::warn):
        (WebCore::Console::dir):
        (WebCore::Console::dirxml):
        (WebCore::Console::clear):
        (WebCore::Console::trace):
        (WebCore::Console::assertCondition):
        (WebCore::Console::count):
        (WebCore::Console::markTimeline):
        (WebCore::Console::timeEnd):
        (WebCore::Console::timeStamp):
        (WebCore::Console::group):
        (WebCore::Console::groupCollapsed):
        (WebCore::Console::profile):
        (WebCore::Console::profileEnd):
            s/ScriptCallStack/ScriptState*/g. Also, printing the stack trace
            has been moved out of 'trace' and into 'addMessage'.
        * page/Console.h:
        (Console):
        * page/Console.idl:
            Drop the call stack, add the script state.
        * workers/WorkerContext.cpp:
        (WebCore::WorkerContext::addMessageToWorkerConsole):
            Use the new, explicitly call stacked addMessageToConsole. We'll kill
            this in a future patch.

2012-11-16  Marja Hölttä  <marja@chromium.org>

        Add initiator to CachedResourceRequest.
        https://bugs.webkit.org/show_bug.cgi?id=101935

        Reviewed by Adam Barth.

        Motivation: Chromium needs to know which elements request a
        resource (such as an image or a script) (bug 92761). In addition,
        for exposing resource timing information (bug 84883) we need to
        store the initiator, and this is the first step towards it.

        No new tests: No visible change in behavior.

        * CMakeLists.txt:
        * GNUmakefile.list.am:
        * Target.pri:
        * WebCore.gypi:
        * WebCore.vcproj/WebCore.vcproj:
        * WebCore.xcodeproj/project.pbxproj:
        * css/CSSCursorImageValue.cpp:
        (WebCore::CSSCursorImageValue::cachedImage):
        * css/CSSFontFaceSrcValue.cpp:
        (WebCore::CSSFontFaceSrcValue::cachedFont):
        * css/CSSImageSetValue.cpp:
        (WebCore::CSSImageSetValue::cachedImageSet):
        * css/CSSImageValue.cpp:
        (WebCore::CSSImageValue::cachedImage):
        * css/CSSImageValue.h:
        (WebCore):
        (CSSImageValue):
        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::loadPendingImage):
        * css/StyleRuleImport.cpp:
        (WebCore::StyleRuleImport::requestStyleSheet):
        * css/WebKitCSSSVGDocumentValue.cpp:
        (WebCore::WebKitCSSSVGDocumentValue::load):
        * css/WebKitCSSShaderValue.cpp:
        (WebCore::WebKitCSSShaderValue::cachedShader):
        * dom/ScriptElement.cpp:
        (WebCore::ScriptElement::requestScript):
        * html/HTMLLinkElement.cpp:
        (WebCore::HTMLLinkElement::process):
        * html/parser/CSSPreloadScanner.cpp:
        (WebCore::CSSPreloadScanner::emitRule):
        * html/parser/CSSPreloadScanner.h:
        (CSSPreloadScanner):
        * html/parser/HTMLPreloadScanner.cpp:
        (WebCore::PreloadTask::preload):
        * loader/ImageLoader.cpp:
        (WebCore::ImageLoader::updateFromElement):
        * loader/cache/CachedResourceLoader.cpp:
        (WebCore::CachedResourceLoader::requestImage):
        (WebCore::CachedResourceLoader::requestResource):
        (WebCore::CachedResourceLoader::determineRevalidationPolicy):
        (WebCore):
        (WebCore::CachedResourceLoader::preload):
        * loader/cache/CachedResourceLoader.h:
        (WebCore):
        (CachedResourceLoader):
        * loader/cache/CachedResourceRequest.cpp:
        (WebCore::CachedResourceRequest::CachedResourceRequest):
        (WebCore):
        (WebCore::CachedResourceRequest::~CachedResourceRequest):
        (WebCore::CachedResourceRequest::setInitiator):
        (WebCore::CachedResourceRequest::initiatorName):
        (WebCore::CachedResourceRequest::initiatorDocument):
        (WebCore::CachedResourceRequest::initiatorElement):
        * loader/cache/CachedResourceRequest.h:
        (WebCore):
        (WebCore::CachedResourceRequest::setOptions):
        (WebCore::CachedResourceRequest::defer):
        (WebCore::CachedResourceRequest::setDefer):
        (CachedResourceRequest):
        * loader/cache/CachedResourceRequestInitiators.cpp: Copied from Source/WebCore/loader/cache/CachedResourceRequest.cpp.
        (WebCore):
        (WebCore::CachedResourceRequestInitiators::CachedResourceRequestInitiators):
        * loader/cache/CachedResourceRequestInitiators.h: Copied from Source/WebCore/loader/cache/CachedResourceRequest.cpp.
        (WebCore):
        (CachedResourceRequestInitiators):
        (WebCore::cachedResourceRequestInitiators):
        * loader/icon/IconLoader.cpp:
        (WebCore::IconLoader::startLoading):
        * platform/ThreadGlobalData.cpp:
        (WebCore::ThreadGlobalData::ThreadGlobalData):
        * platform/ThreadGlobalData.h:
        (WebCore):
        (WebCore::ThreadGlobalData::cachedResourceRequestInitiators):
        (ThreadGlobalData):
        * svg/SVGFEImageElement.cpp:
        (WebCore::SVGFEImageElement::requestImageResource):
        * svg/SVGFontFaceUriElement.cpp:
        (WebCore::SVGFontFaceUriElement::loadFont):
        * svg/SVGUseElement.cpp:
        (WebCore::SVGUseElement::svgAttributeChanged):

2012-11-16  Yury Semikhatsky  <yurys@chromium.org>

        Web Inspector: don't show an Error when evaluating a watch expression results in an exception
        https://bugs.webkit.org/show_bug.cgi?id=102470

        Reviewed by Vsevolod Vlasov.

        Dim watch expression and show "<not available>" as its value in cases when it evaluates
        into an exception.

        * English.lproj/localizedStrings.js:
        * inspector/front-end/WatchExpressionsSidebarPane.js:
        (WebInspector.WatchExpressionTreeElement.prototype.update):
        * inspector/front-end/inspector.css:

2012-11-16  Vsevolod Vlasov  <vsevik@chromium.org>

        Web Inspector: Rollout 134404 134548 134552 Temporarily rolling out to ease merging.
        https://bugs.webkit.org/show_bug.cgi?id=102476

        Unreviewed rolling out.

        * English.lproj/localizedStrings.js:
        * WebCore.gypi:
        * WebCore.vcproj/WebCore.vcproj:
        * inspector/compile-front-end.py:
        * inspector/front-end/AdvancedSearchController.js:
        * inspector/front-end/CallStackSidebarPane.js:
        (WebInspector.CallStackSidebarPane.prototype.registerShortcuts):
        * inspector/front-end/ConsoleView.js:
        (WebInspector.ConsoleView.prototype._registerShortcuts):
        * inspector/front-end/ElementsPanel.js:
        (WebInspector.ElementsPanel):
        (WebInspector.ElementsPanel.prototype._registerShortcuts):
        * inspector/front-end/ElementsPanelDescriptor.js:
        * inspector/front-end/GoToLineDialog.js:
        (WebInspector.GoToLineDialog.install):
        * inspector/front-end/KeyboardShortcut.js:
        (WebInspector.KeyboardShortcut._keyName):
        * inspector/front-end/Panel.js:
        (WebInspector.Panel.prototype.registerShortcut):
        (WebInspector.Panel.prototype.unregisterShortcut):
        (WebInspector.PanelDescriptor.prototype.panel):
        * inspector/front-end/ScriptsPanel.js:
        (WebInspector.ScriptsPanel):
        (WebInspector.ScriptsPanel.prototype._createDebugToolbar):
        (WebInspector.ScriptsPanel.prototype._createButtonAndRegisterShortcuts):
        * inspector/front-end/ScriptsPanelDescriptor.js:
        * inspector/front-end/ShortcutsScreen.js:
        (WebInspector.ShortcutsScreen):
        (WebInspector.ShortcutsSection):
        (WebInspector.ShortcutsSection.prototype._renderKey):
        * inspector/front-end/StylesSidebarPane.js:
        (WebInspector.StylesSidebarPane.prototype.registerShortcuts):
        * inspector/front-end/TimelinePanel.js:
        (WebInspector.TimelinePanel.prototype._registerShortcuts):
        * inspector/front-end/TimelinePanelDescriptor.js: Removed.
        * inspector/front-end/WebKit.qrc:
        * inspector/front-end/inspector.html:
        * inspector/front-end/inspector.js:
        (WebInspector._panelDescriptors):
        (WebInspector._registerShortcuts):

2012-11-16  Eugene Klyuchnikov  <eustas.bug@gmail.com>

        Web Inspector: Memory Timeline Crash
        https://bugs.webkit.org/show_bug.cgi?id=102390

        Reviewed by Vsevolod Vlasov.

        Crash seems to be caused by IPC overflow.
        Messages "ParsedScriptSource" are routed to
        ResourceScriptMapping.prototype.addScript that process them in time
        linear to number of already registered non-anonymous non-inline scripts.

        Fixed this with replacing repreated filtering with "on-line" bucketing.

        * inspector/front-end/ResourceScriptMapping.js:
        (WebInspector.ResourceScriptMapping):
        Removed duplicating initialization code.
        (WebInspector.ResourceScriptMapping.prototype.addScript):
        Added script bucketing by sourceURL/isInline parameters.
        (WebInspector.ResourceScriptMapping.prototype._scriptsForSourceURL):
        Avoid filterfig.
        (WebInspector.ResourceScriptMapping.prototype._createUISourceCode):
        Added outgoing muatable array safeguard.
        (WebInspector.ResourceScriptMapping.prototype._reset):
        Added type information and added two new maps.

2012-11-16  Helder Correia  <helder.correia@nokia.com>

        [CoordGfx] Follow coding style on explicit constructors
        https://bugs.webkit.org/show_bug.cgi?id=102451

        Reviewed by Noam Rosenthal.

        Use the explicit keyword on single argument constructors.

        No new tests needed.

        * platform/graphics/texmap/GraphicsLayerTextureMapper.h:
        (GraphicsLayerTextureMapper):
        * platform/graphics/texmap/TextureMapper.h:
        (TextureMapper):
        * platform/graphics/texmap/TextureMapperBackingStore.h:
        (WebCore::TextureMapperTile::TextureMapperTile):
        * platform/graphics/texmap/TextureMapperGL.cpp:
        (WebCore::TextureMapperGLData::SharedGLData::SharedGLData):
        (WebCore::TextureMapperGLData::TextureMapperGLData):
        * platform/graphics/texmap/TextureMapperGL.h:
        (BitmapTextureGL):
        * platform/graphics/texmap/TextureMapperShaderManager.h:
        (TextureMapperShaderManager):

2012-11-16  Kihong Kwon  <kihong.kwon@samsung.com>

        Add DeviceController base-class to remove duplication of DeviceXXXControler
        https://bugs.webkit.org/show_bug.cgi?id=96894

        Reviewed by Hajime Morita.

        Add DeviceController which is extracted from DeviceOrientationController to remove duplication.
        And soon-to-be-added DeviceMotionController and ProximityController.

        Covered by existing tests.

        * CMakeLists.txt:
        * GNUmakefile.list.am:
        * Target.pri:
        * WebCore.gypi:
        * WebCore.vcproj/WebCore.vcproj:
        * WebCore.xcodeproj/project.pbxproj:
        * dom/DeviceOrientationClient.h:
        * dom/DeviceOrientationController.cpp:
        Remove member functions to move to DeviceController.
        - addListener(), removeListener(), removeAllListeners(), isActive()
        (WebCore::DeviceOrientationController::DeviceOrientationController):
        (WebCore::DeviceOrientationController::didChangeDeviceOrientation):
        (WebCore::DeviceOrientationController::client):
        (WebCore::DeviceOrientationController::hasLastData):
        (WebCore::DeviceOrientationController::getLastEvent):
        (WebCore::DeviceOrientationController::from):
        (WebCore):
        * dom/DeviceOrientationController.h:
        (WebCore):
        (WebCore::DeviceOrientationController::~DeviceOrientationController):
        (DeviceOrientationController):
        * dom/Document.cpp:
        Remove suspendEventsForAllListeners() and resumeEventsForAllListeners() function calls.
        These calls can be made by checking activeDOMObjectsAreSuspended() and activeDOMObjectsAreStopped() before dispatchEvent.
        (WebCore::Document::suspendActiveDOMObjects):
        (WebCore::Document::resumeActiveDOMObjects):
        * loader/EmptyClients.h:
        (EmptyDeviceClient):
        (WebCore::EmptyDeviceClient::startUpdating):
        (WebCore::EmptyDeviceClient::stopUpdating):
        (WebCore):
        * page/DOMWindow.cpp:
        (WebCore::DOMWindow::addEventListener):
        (WebCore::DOMWindow::removeEventListener):
        (WebCore::DOMWindow::removeAllEventListeners):
        * page/DeviceClient.h: Added.
        (WebCore):
        (DeviceClient):
        (WebCore::DeviceClient::~DeviceClient):
        * page/DeviceController.cpp: Added.
        DeviceController has extracted functions from DeviceOrientationController and DeviceMotionController.
        - addDeviceEventListener(), removeDeviceEventlistener(), removeAllDeviceEventListeners(), dispatchDeviceEvent()
        All kind of device event controller which has DeviceClient can be inherited from DeviceController.
        (WebCore):
        (WebCore::DeviceController::DeviceController):
        (WebCore::DeviceController::addDeviceEventListener):
        (WebCore::DeviceController::removeDeviceEventListener):
        (WebCore::DeviceController::removeAllDeviceEventListeners):
        (WebCore::DeviceController::dispatchDeviceEvent):
        (WebCore::DeviceController::fireDeviceEvent):
        * page/DeviceController.h: Added.
        (WebCore):
        (DeviceController):
        (WebCore::DeviceController::~DeviceController):
        (WebCore::DeviceController::isActive):
        (WebCore::DeviceController::client):
        (WebCore::DeviceController::hasLastData):
        (WebCore::DeviceController::getLastEvent):

2012-11-16  Alexander Pavlov  <apavlov@chromium.org>

        Web Inspector: [Overrides] Device metrics get reset on navigation, yet remain in the Overrides view
        https://bugs.webkit.org/show_bug.cgi?id=102467

        Reviewed by Pavel Feldman.

        Restore the device metrics overrides from the inspector cookie in InspectorPageAgent::restore().
        Drive-by: move the script execution and FPS counter display state restoration from enable() into restore(),
        so that they will get restored only upon page navigation, not upon any agent enablement.

        * inspector/InspectorPageAgent.cpp:
        (WebCore::InspectorPageAgent::restore): Restore device metrics overrides, script execution and FPS counter display state.
        (WebCore::InspectorPageAgent::enable): Don't restore script execution and FPS counter display state on any enablement.

2012-11-16  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r134908.
        http://trac.webkit.org/changeset/134908
        https://bugs.webkit.org/show_bug.cgi?id=102473

        Broke the Apple Windows Debug build. (Requested by dydx on
        #webkit).

        * WebCore.exp.in:
        * dom/ViewportArguments.cpp:
        (WebCore::computeViewportAttributes):
        * dom/ViewportArguments.h:
        (WebCore):

2012-11-16  Peter Rybin  <prybin@chromium.org>

        Web Inspector: show internal properties in inspector frontend
        https://bugs.webkit.org/show_bug.cgi?id=100021

        Reviewed by Yury Semikhatsky.

        New field 'internalProperties' is parsed and passed via all callbacks to Object Properties section.

        Test: inspector/debugger/properties-special.html

        * inspector/front-end/ObjectPropertiesSection.js:
        (WebInspector.ObjectPropertiesSection.prototype.update.callback):
        (WebInspector.ObjectPropertiesSection.prototype.update):
        (.callback):
        (WebInspector.ObjectPropertyTreeElement.populate):
        (.processProperties):
        (WebInspector.ArrayGroupingTreeElement._populateAsFragment):
        (WebInspector.ArrayGroupingTreeElement._populateNonIndexProperties):
        * inspector/front-end/RemoteObject.js:
        (WebInspector.RemoteObject.prototype.set else):

2012-11-06  Alexander Pavlov  <apavlov@chromium.org>

        Web Inspector: metrics, geolocation, orientation overrides do not belong to the settings panel
        https://bugs.webkit.org/show_bug.cgi?id=93691

        Reviewed by Vsevolod Vlasov.

        - The Overrides tab contents have been moved from the Settings dialog into a brand new Overrides drawer view,
        both receiving a new, more light-weight design.
        - The Cog button now brings up a popup menu with the "Overrides" and "Settings" items.

        * WebCore.gypi:
        * WebCore.vcproj/WebCore.vcproj:
        * inspector/compile-front-end.py:
        * inspector/front-end/ContextMenu.js:
        (WebInspector.ContextMenu.prototype.showSoftMenu): Display the ContextMenu as a soft menu.
        * inspector/front-end/OverridesView.js: Copied from Source/WebCore/inspector/front-end/SettingsScreen.js.
        (WebInspector.OverridesView.appendBlockTo):
        (WebInspector.OverridesView):
        (WebInspector.OverridesView.showInDrawer):
        (WebInspector.OverridesView.prototype.get listener):
        (WebInspector.OverridesView.prototype._createUserAgentSelectRowElement.get const):
        (WebInspector.OverridesView.prototype._createUserAgentSelectRowElement.textDoubleClicked):
        (WebInspector.OverridesView.prototype._createUserAgentSelectRowElement.textChanged):
        (WebInspector.OverridesView.prototype._createUserAgentSelectRowElement.set checkboxClicked):
        (WebInspector.OverridesView.prototype._createUserAgentSelectRowElement):
        (WebInspector.OverridesView.prototype._createInput):
        (WebInspector.OverridesView.prototype._onMetricsCheckboxClicked):
        (WebInspector.OverridesView.prototype._applyDeviceMetricsUserInput):
        (WebInspector.OverridesView.prototype.):
        (WebInspector.OverridesView.prototype.set if):
        (WebInspector.OverridesView.prototype._createDeviceMetricsElement.swapDimensionsClicked):
        (WebInspector.OverridesView.prototype._createDeviceMetricsElement):
        (WebInspector.OverridesView.prototype._onGeolocationOverrideCheckboxClicked):
        (WebInspector.OverridesView.prototype._applyGeolocationUserInput):
        (WebInspector.OverridesView.prototype._setGeolocationPosition):
        (WebInspector.OverridesView.prototype._createGeolocationOverrideElement):
        (WebInspector.OverridesView.prototype._onDeviceOrientationOverrideCheckboxClicked):
        (WebInspector.OverridesView.prototype._applyDeviceOrientationUserInput):
        (WebInspector.OverridesView.prototype._setDeviceOrientation):
        (WebInspector.OverridesView.prototype._createDeviceOrientationOverrideElement):
        * inspector/front-end/ScriptsPanel.js:
        (WebInspector.ScriptsPanel): Fix the "DOM Breakpoints" pane move upon the panel creation.
        * inspector/front-end/SettingsScreen.js:
        (WebInspector.SettingsTab):
        (WebInspector.SettingsTab.prototype._appendSection):
        (WebInspector.GenericSettingsTab):
        (WebInspector.ExperimentsSettingsTab):
        (WebInspector.SettingsController): Implement the popup menu upon the button click.
        (WebInspector.SettingsController.prototype.showOverrides):
        (WebInspector.SettingsController.prototype.showSettings):
        (WebInspector.SettingsController.prototype.appendApplicableItems):
        (WebInspector.SettingsController.prototype._buttonPressed):
        (WebInspector.SettingsController.prototype._onHideSettingsScreen):
        (WebInspector.SettingsController.prototype.showSettingsScreen):
        * inspector/front-end/ShortcutsScreen.js: Add "Shortcuts" header.
        (WebInspector.ShortcutsScreen.prototype.createShortcutsTabView):
        * inspector/front-end/SoftContextMenu.js: Enable in all cases, implement the alignToCurrentTarget mode in show().
        (WebInspector.SoftContextMenu.prototype.show):
        * inspector/front-end/TabbedPane.js: Implement vertical tab layout (skipping the tab width computations).
        (WebInspector.TabbedPane.prototype.set verticalTabLayout):
        (WebInspector.TabbedPane.prototype._updateWidths):
        (WebInspector.TabbedPaneTab.prototype.setWidth):
        (WebInspector.TabbedPaneTab.prototype._createTabElement):
        * inspector/front-end/WebKit.qrc:
        * inspector/front-end/helpScreen.css: Update styles for the new Settings and Overrides look-and-feel.
        * inspector/front-end/inspector.css: Drive-by fix small artifacts in the soft menu and drawer view statusbar item label.
        (.soft-context-menu-item):
        (.drawer-header):
        * inspector/front-end/inspector.html:

2012-11-16  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r134865.
        http://trac.webkit.org/changeset/134865
        https://bugs.webkit.org/show_bug.cgi?id=102466

        Broke the Apple Windows Debug build. (Requested by dydx on
        #webkit).

        * WebCore.exp.in:
        * bindings/js/SerializedScriptValue.h:
        * testing/Internals.cpp:
        * testing/Internals.h:
        (WebCore):
        * testing/Internals.idl:

2012-11-16  Takashi Sakamoto  <tasak@google.com>

        ASSERT_NOT_REACHED() when building a CSSOM wrapper for StyleRuleHost
        https://bugs.webkit.org/show_bug.cgi?id=102116

        Reviewed by Alexander Pavlov.

        Provide a CSSUnknownRule instance as a CSSOM wrapper for StyleRuleHost
        rules. Since there is no CSSOM wrapper for @host @-rules and
        ASSERT_NOT_REACHED is used when a CSSOM wrapper is requested,
        this crash occurs.

        Tests: fast/css/at-host-cssom-crash.html
               inspector/styles/styles-include-host-rules-crash.html

        * css/StyleRule.cpp:
        (WebCore::StyleRuleBase::createCSSOMWrapper):
        Return a CSSUnknownRule instance for StyleRuleHost rules instead of
        calling ASSERT_NOT_REACHED().

2012-11-16  Mikhail Pozdnyakov  <mikhail.pozdnyakov@intel.com>

        Avoid copying of ViewportArguments in computeViewportAttributes function
        https://bugs.webkit.org/show_bug.cgi?id=102354

        Reviewed by Kenneth Rohde Christiansen.

        Since r134749 we do not need copying of ViewportArguments parameter in
        computeViewportAttributes() as it is not modified any more.

        Tested by existing tests fast/viewport.

        * WebCore.exp.in: Updated exported symbols for MAC.
        * dom/ViewportArguments.cpp:
        (WebCore::computeViewportAttributes):
        * dom/ViewportArguments.h:
        (WebCore):

2012-11-15  Yury Semikhatsky  <yurys@chromium.org>

        Memory instrumentation: add code for reporting stack traces of unknown instrumented objects
        https://bugs.webkit.org/show_bug.cgi?id=102384

        Reviewed by Pavel Feldman.

        * inspector/InspectorMemoryAgent.cpp:
        (WebCore::MemoryInstrumentationClientImpl::checkCountedObject): return false
        if the check fails.
        * inspector/MemoryInstrumentationImpl.h:
        (MemoryInstrumentationClientImpl):

2012-11-15  Jer Noble  <jer.noble@apple.com>

        Crash at WebCore::PluginData::pluginFileForMimeType const + 38
        https://bugs.webkit.org/show_bug.cgi?id=102454

        Reviewed by Dan Bernstein.

        NULL-check the return value of Page::pluginData().

        * loader/SubframeLoader.cpp:
        (WebCore::logPluginRequest):

2012-11-15  Kenichi Ishibashi  <bashi@chromium.org>

        [Chromium] Unreviewed build fix attempt on win

        Include OpenTypeVerticalData.h

        * platform/graphics/chromium/FontPlatformDataChromiumWin.h:
        (WebCore):

2012-11-15  Kentaro Hara  <haraken@chromium.org>

        Unreviewed, rolling out r134881.
        http://trac.webkit.org/changeset/134881
        https://bugs.webkit.org/show_bug.cgi?id=102348

        http/tests/appcache tests on JSC platforms are broken

        * bindings/scripts/CodeGenerator.pm:
        (IsStrictSubtype):
        * bindings/scripts/CodeGeneratorJS.pm:
        (GenerateImplementation):
        * bindings/scripts/CodeGeneratorV8.pm:
        (GenerateHeader):
        (GetInternalFields):
        (IsSubType):
        (IsNodeSubType):
        (GenerateNormalAttrGetter):
        (GenerateNormalAttrSetter):
        (GenerateFunctionCallback):
        (GenerateImplementationIndexer):
        (GenerateToV8Converters):

2012-11-15  Viatcheslav Ostapenko  <v.ostapenko@samsung.com>

        [TexMap][Cairo][Qt] Refactor BitmapTextureGL::updateContents().
        https://bugs.webkit.org/show_bug.cgi?id=102420

        Reviewed by Gyuyoung Kim.

        Moved out texture upload without swizzle to the separate method and changed
        drawRepaintCounter to use no-swizzle method. This also fixes blue background
        of repaint counters in Qt Minibrowser.
        Added condition for sub-image buffer creation to not create it if full image is
        uploaded. This should give noticeable improvement for platforms that do not
        support sub-image upload to texture.

        Covered by existing tests.

        * platform/graphics/texmap/TextureMapperGL.cpp:
        (WebCore::TextureMapperGL::drawRepaintCounter):
        (WebCore::BitmapTextureGL::updateContentsNoSwizzle):
        (WebCore):
        (WebCore::BitmapTextureGL::updateContents):
        * platform/graphics/texmap/TextureMapperGL.h:
        (BitmapTextureGL):

2012-11-15  Kent Tamura  <tkent@chromium.org>

        A Spin button should release mouse event capturing when a modal dialog opens
        https://bugs.webkit.org/show_bug.cgi?id=98007

        Reviewed by Hajime Morita.

        Description of bug:
        If the mouse left button is pressed on a spin button in
        input[type=number] and a 'change' event handler opens a modal dialog
        such as alert(), a repeating timer doesn't stop and mouse event
        capturing isn't released even though the mouse pointer isn't on the spin
        button.
        A user will see repeating alert dialogs for a document like <input
        type=number value=1 onchange="if (this.value==1) {alert(...);
        this.value=1;}"> by clicking the up button.

        How to solve:
        We should notify modal dialog or popup open to a spin button.
        This patch introduce PopupOpeningObserver. Chrome notifies it when
        any dialogs / popups is opening. SpinButtonElement implements
        PopupOpeningObserver and registers/unregisters itself to/from
        Chrome.

        No new tests. This is a behavior change, but it's very hard to make an
        automated test for timer-related behavior.

        * page/PopupOpeningObserver.h: Added.
        * GNUmakefile.list.am: Add PopupOpeningObserver.h
        * Target.pri: Ditto.
        * WebCore.gypi: Ditto.
        * WebCore.vcproj/WebCore.vcproj: Ditto.
        * WebCore.xcodeproj/project.pbxproj: Ditto.

        * page/Chrome.cpp:
        (WebCore::Chrome::runJavaScriptAlert): Calls notifyPopupOpeningObservers.
        (WebCore::Chrome::runJavaScriptConfirm): Ditto.
        (WebCore::Chrome::runJavaScriptPrompt): Ditto.
        (WebCore::Chrome::createColorChooser): Ditto.
        (WebCore::Chrome::openDateTimeChooser):
        Added. Calls notifyPopupOpeningObservers before calling
        ChromeClient::openDateTimeChooser.
        (WebCore::Chrome::runOpenPanel): Calls notifyPopupOpeningObservers.
        (WebCore::Chrome::createPopupMenu): Ditto.
        (WebCore::Chrome::createSearchPopupMenu): Ditto.
        (WebCore::Chrome::registerPopupOpeningObserver): Added.
        (WebCore::Chrome::unregisterPopupOpeningObserver): Added.
        (WebCore::Chrome::notifyPopupOpeningObservers): Added.
        * page/Chrome.h: Added new members and required class/struct declarations.

        * html/BaseChooserOnlyDateAndTimeInputType.cpp:
        (WebCore::BaseChooserOnlyDateAndTimeInputType::handleDOMActivateEvent):
        Use Chrome::openDateTimeChooser instead of ChromeClient::openDateTimeChooser.
        * html/shadow/PickerIndicatorElement.cpp:
        (WebCore::PickerIndicatorElement::openPopup): Ditto.

        * html/shadow/SpinButtonElement.h:
        (SpinButtonElement): Declare willOpenPopup.
        * html/shadow/SpinButtonElement.cpp:
        (WebCore::SpinButtonElement::defaultEventHandler):
        Change the order of timer start and changing the value so that we
        can cancel the timer correctly.
        Calls Chrome::registerPopupOpeningObserver on starting mouse capturing.
        (WebCore::SpinButtonElement::willOpenPopup):
        Release mouse event capturing before opening a modal dialog.
        (WebCore::SpinButtonElement::releaseCapture):
        Calls Chrome::unregisterPopupOpeningObserver.


2012-11-15  Shinya Kawanaka  <shinyak@chromium.org>

        Chaging pseudoClass (:enabled) should cause distribution
        https://bugs.webkit.org/show_bug.cgi?id=101900

        Reviewed by Dimitri Glazkov.

        When element's 'enabled' state is changed, we have to invalidate distribution.

        According to the spec, :enabled matches anchor/area/link element having href attribute,
        and several form control elements which is not disabled. However, currently :enalbed does not match
        anchor/area/link yet. See https://bugs.webkit.org/show_bug.cgi?id=102349

        Tests: fast/dom/shadow/pseudoclass-update-enabled-anchor.html
               fast/dom/shadow/pseudoclass-update-enabled-area.html
               fast/dom/shadow/pseudoclass-update-enabled-button.html
               fast/dom/shadow/pseudoclass-update-enabled-fieldset.html
               fast/dom/shadow/pseudoclass-update-enabled-input.html
               fast/dom/shadow/pseudoclass-update-enabled-optgroup.html
               fast/dom/shadow/pseudoclass-update-enabled-option.html
               fast/dom/shadow/pseudoclass-update-enabled-select.html
               fast/dom/shadow/pseudoclass-update-enabled-textarea.html

        * html/HTMLAnchorElement.cpp:
        (WebCore::HTMLAnchorElement::parseAttribute):
        * html/HTMLFormControlElement.cpp:
        (WebCore::HTMLFormControlElement::disabledAttributeChanged):
        * html/HTMLOptGroupElement.cpp:
        (WebCore::HTMLOptGroupElement::parseAttribute):
        * html/HTMLOptionElement.cpp:
        (WebCore::HTMLOptionElement::parseAttribute):

2012-11-15  Erik Arvidsson  <arv@chromium.org>

        Update DOMException name: ValidationError
        https://bugs.webkit.org/show_bug.cgi?id=102416

        Reviewed by Kentaro Hara.

        Patch 16 of 25 to update DOMException name to match the spec and Firefox.

        VALIDATION_ERR is historical and not used in any spec or our code.

        * dom/DOMCoreException.cpp:
        * dom/ExceptionCode.h:

2012-11-15  Kentaro Hara  <haraken@chromium.org>

        [V8] Remove IsSubType() from CodeGeneratorV8.pm
        https://bugs.webkit.org/show_bug.cgi?id=102348

        Reviewed by Adam Barth.

        CodeGenerator.pm has IsStrictSubType(). CodeGeneratorV8.pm should use it.

        No tests. No change in behavior.

        * bindings/scripts/CodeGenerator.pm:
        (IsSubType):
        * bindings/scripts/CodeGeneratorJS.pm:
        (GenerateImplementation):
        * bindings/scripts/CodeGeneratorV8.pm:
        (GenerateHeader):
        (GetInternalFields):
        (GenerateNormalAttrGetter):
        (GenerateNormalAttrSetter):
        (GenerateFunctionCallback):
        (GenerateImplementationIndexer):
        (GenerateToV8Converters):

2012-11-15  Erik Arvidsson  <arv@chromium.org>

        Update DOMException name: NamespaceError
        https://bugs.webkit.org/show_bug.cgi?id=102395

        Reviewed by Kentaro Hara.

        Patch 14 of 25 to update DOMException name to match the spec and Firefox.

        Updated existing tests.

        * dom/DOMCoreException.cpp:

2012-11-15  Tien-Ren Chen  <trchen@chromium.org>

        Add Settings to disable custom scrollbars on main frame
        https://bugs.webkit.org/show_bug.cgi?id=102323

        Reviewed by Adam Barth.

        Custom scrollbars on main frame don't really work well on touch devices.
        Add a setting to inhibit their creation.

        No new tests. No change in default layout behavior.

        * page/FrameView.cpp:
        (WebCore::FrameView::createScrollbar):
        * page/Settings.in:

2012-11-15  Rick Byers  <rbyers@chromium.org>

        custom CSS cursors ignore hotspot values embedded in CUR files
        https://bugs.webkit.org/show_bug.cgi?id=100059

        Reviewed by Kenneth Russell.

        Add reading the hotspot values to the ICOImageDecoder (for CUR files only),
        and plumb it through so that the existing calls to ImageSource::getHotSpot
        actually return the hot spot value when there is one.

        Tests: fast/events/mouse-cursor.html, fast/events/mouse-cursor-multiframecur.html

        * platform/graphics/ImageSource.cpp:
        (WebCore::ImageSource::getHotSpot):
        * platform/graphics/chromium/DeferredImageDecoder.cpp:
        (WebCore::DeferredImageDecoder::hotSpot):
        (WebCore::DeferredImageDecoder::hotSpotAtIndex):
        * platform/graphics/chromium/DeferredImageDecoder.h:
        (DeferredImageDecoder):
        * platform/image-decoders/ImageDecoder.h:
        (WebCore::ImageDecoder::hotSpot):
        (WebCore::ImageDecoder::hotSpotAtIndex):
        (ImageDecoder):
        * platform/image-decoders/ico/ICOImageDecoder.cpp:
        (WebCore::ICOImageDecoder::hotSpot):
        (WebCore::ICOImageDecoder::hotSpotAtIndex):
        (WebCore::ICOImageDecoder::processDirectory):
        (WebCore::ICOImageDecoder::readDirectoryEntry):
        * platform/image-decoders/ico/ICOImageDecoder.h:
        (ICOImageDecoder):
        (IconDirectoryEntry):

2012-11-15  Kenichi Ishibashi  <bashi@chromium.org>

        Make OpenTypeVerticalData be ref-counted
        https://bugs.webkit.org/show_bug.cgi?id=101971

        Reviewed by Tony Chang.

        FontCache::purgeInactiveFontData() uses mark & sweep algorithm to remove unused
        OpenTypeVerticalData objects. It marks only OpenTypeVerticalData which can be reached
        via SimpleFontData in gFontDataCache. However, OpenTypeVerticalData can be referred by
        SimpleFontData which resides in CSSFontFaceSource::m_fontDataTable so the algorithm can
        delete active OpenTypeVerticalData. To avoid deleting active OpenTypeVerticalData, make
        it be ref-counted.

        No new tests. No changes in behavior. Checked manually that the use-after-free was fixed.

        * platform/graphics/FontCache.cpp:
        (WebCore): Use RefPtr instead of OwnPtr for FontVerticalDataCache.
        (WebCore::FontCache::getVerticalData): Return PassRefPtr<OpenTypeVerticalData>.
        (WebCore::FontCache::purgeInactiveFontData): Follow the change of OwnPtr -> RefPtr.
        * platform/graphics/FontCache.h:
        * platform/graphics/SimpleFontData.cpp:
        (WebCore::SimpleFontData::SimpleFontData):
        * platform/graphics/SimpleFontData.h:
        Use RefPtr instead of raw const pointer for OpenTypeVerticalData.
        (WebCore::SimpleFontData::verticalData):
        * platform/graphics/chromium/FontPlatformDataChromiumWin.cpp:
        (WebCore::FontPlatformData::verticalData): Return PassRefPtr<OpenTypeVerticalData>.
        * platform/graphics/chromium/FontPlatformDataChromiumWin.h:
        (FontPlatformData):
        * platform/graphics/harfbuzz/FontPlatformDataHarfBuzz.cpp:
        (WebCore::FontPlatformData::verticalData): Ditto.
        * platform/graphics/harfbuzz/FontPlatformDataHarfBuzz.h:
        (WebCore):
        (FontPlatformData):
        * platform/graphics/opentype/OpenTypeVerticalData.h:
        (WebCore::OpenTypeVerticalData::create): Added.
        (OpenTypeVerticalData):

2012-11-15  Xingnan Wang  <xingnan.wang@intel.com>

        Optimize the multiply-add in Biquad.cpp::process
        https://bugs.webkit.org/show_bug.cgi?id=75528

        Reviewed by Brent Fulgham.

        Pipeline the multiply-add with SSE2 intrinsics.
        Get ~45% performance improvement for the function.

        * platform/audio/Biquad.cpp:
        (WebCore::Biquad::process):

2012-11-15  Alec Flett  <alecflett@chromium.org>

        Add tests for explicit serialization values
        https://bugs.webkit.org/show_bug.cgi?id=96818

        Reviewed by Adam Barth.

        Expose direct access to the serialization/deserialization mechanisms
        of SerializedScriptValue to DumpRenderTree.

        * testing/Internals.cpp:
        (WebCore::Internals::serializeObject):
        (WebCore):
        (WebCore::Internals::deserializeBuffer):
        * testing/Internals.h:
        (WebCore):
        * testing/Internals.idl:

2012-11-15  Gustavo Noronha Silva  <gns@gnome.org>

        [GTK] Split WebCore/platform into a separate library
        https://bugs.webkit.org/show_bug.cgi?id=94435

        Reviewed by Martin Robinson.

        More people have been reporting problems when linking WebCore because
        the command line limit is being exceeded. Splitting WebCore a bit more
        is in order.

        * GNUmakefile.am: add new libWebCorePlatform convenience library.
        * GNUmakefile.list.am: move list of platform/* files to its own variable.

2012-11-15  Luke Macpherson   <macpherson@chromium.org>

        Remove unused macro HANDLE_INHERIT_AND_INITIAL_WITH_VALUE in StyleResolver.cpp
        https://bugs.webkit.org/show_bug.cgi?id=102036

        Reviewed by Darin Adler.

        Remove HANDLE_INHERIT_AND_INITIAL_WITH_VALUE macro, as it is not used anywhere.

        No tests added because code is unused, and compile is enough to verify that conculsively.

        * css/StyleResolver.cpp:

2012-11-15  Erik Arvidsson  <arv@chromium.org>

        Update DOMException name: SyntaxError
        https://bugs.webkit.org/show_bug.cgi?id=102279

        Reviewed by Kentaro Hara.

        Patch 12 of 25 to update DOMException name to match the spec and Firefox.

        Updated existing tests.

        * dom/DOMCoreException.cpp:

2012-11-15  Takashi Sakamoto  <tasak@google.com>

        [Win] key event's location does not work on Windows platform.
        https://bugs.webkit.org/show_bug.cgi?id=89742

        Reviewed by Brent Fulgham.

        As WM_KEYDOWN, WM_KEYUP, WM_SYSKEYDOWN, and WM_SYSKEYUP doesn't
        directly provide a virtual keycode which distinguish between left-hand
        and right-hand keys. To obtain a virtual keycode, we have to look at
        lparam, i.e. scancode and extended key bit. So if the given virtual
        keycode is control, shift, or menu, use MapVirtualKey with scancode and
        extended key bit and recreate a virtual keycode which distinguishes
        between left-hand and right-hand.

        No new tests, because left-hand keys, right-hand keys layout tests
        have been already added.

        * platform/win/KeyEventWin.cpp:
        (WebCore::windowsKeycodeWithLocation):
        Use wparam and lparam to recreate a virtual keycode which distinguishes
        between left-hand and right-hand if the given wparam (=virtual keycode)
        is control, shift, or menu.
        (WebCore):
        (WebCore::PlatformKeyboardEvent::PlatformKeyboardEvent):
        Use the newly added function to obtain windows virtual keycode.

2012-11-15  Joe Mason  <jmason@rim.com>

        [BlackBerry] Don't assert when notifyAuthReceived is called with a different auth type
        https://bugs.webkit.org/show_bug.cgi?id=102436

        Reviewed by Rob Buis.

        The server type could change if we contact a site taking HTTP auth, through an HTTP proxy
        taking auth of its own. First we get a 407 from the proxy, and then when get past the
        proxy, we get a 401 from the end site - so notifyAuthReceived gets called again with auth
        type Proxy instead of HTTP.

        The correct thing to do when that happens is skip the "update the auth type in the
        credentials" step, since these are actually new credentials and not just credentials being
        reused for a different auth type on the same server.

        PR 241637

        * platform/network/blackberry/NetworkJob.cpp:
        (WebCore::NetworkJob::notifyAuthReceived):

2012-11-15  Stephen Chenney  <schenney@chromium.org>

        mpath elements do not clear resource lists before destruction
        https://bugs.webkit.org/show_bug.cgi?id=101505

        Reviewed by Abhishek Arya.

        The destructor for SVGMPathElement should clear its resources before
        deletion, so as not to leave hanging pointers in resource lists.

        Test: svg/animations/mpath-remove-from-dependents-on-delete-crash.html

        * svg/SVGMPathElement.cpp:
        (WebCore::SVGMPathElement::~SVGMPathElement): Add destructor that calls clearResourceReferences.
        (WebCore):
        * svg/SVGMPathElement.h:
        (SVGMPathElement): Add destructor.

2012-11-15  Kentaro Hara  <haraken@chromium.org>

        Remove CodeGenerator::StripModule
        https://bugs.webkit.org/show_bug.cgi?id=102338

        Reviewed by Adam Barth.

        Now WebKit IDL files have no modules. (The Web IDL spec has no modules.)
        We can remove CodeGenerator::StripModule.
        This might break some internal builds if the internal builds are still
        using modules. Ping haraken@ you observe it.

        No tests. No change in behavior.

        * bindings/scripts/CodeGenerator.pm:
        (ForAllParents):
        (AttributeNameForGetterAndSetter):
        (IsStrictSubtype):
        * bindings/scripts/CodeGeneratorCPP.pm:
        (GetClassName):
        (GetImplClassName):
        (GetParentImplClassName):
        (GetParent):
        (ConversionNeeded):
        (GetCPPTypeGetter):
        (AddForwardDeclarationsForType):
        (AddIncludesForType):
        (GenerateImplementation):
        * bindings/scripts/CodeGeneratorGObject.pm:
        (GetParentClassName):
        (GetParentGObjType):
        (GetClassName):
        * bindings/scripts/CodeGeneratorJS.pm:
        (GetParentClassName):
        (AddIncludesForTypeInImpl):
        (AddIncludesForTypeInHeader):
        (GenerateParametersCheckExpression):
        (GenerateImplementation):
        (GenerateParametersCheck):
        (GetNativeTypeFromSignature):
        (JSValueToNative):
        (NativeToJSValue):
        * bindings/scripts/CodeGeneratorObjC.pm:
        (GetClassName):
        (GetImplClassName):
        (GetParentImplClassName):
        (GetParentAndProtocols):
        (GetPropertyAttributes):
        (ConversionNeeded):
        (GetObjCTypeGetter):
        (AddForwardDeclarationsForType):
        (AddIncludesForType):
        (GenerateImplementation):
        * bindings/scripts/CodeGeneratorV8.pm:
        (AddIncludesForType):
        (GenerateHeader):
        (IsSubType):
        (GenerateSingleBatchedAttribute):
        (GenerateImplementation):
        (BaseInterfaceName):
        (GetTypeFromSignature):
        (IsWrapperType):

2012-11-15  Luke Macpherson   <macpherson@chromium.org>

        Make assumptions about m_parentStyle consistent within StyleResolver::applyProperty()
        https://bugs.webkit.org/show_bug.cgi?id=101696

        Reviewed by Tony Chang.

        Most of the code in StyleResolver::applyProperty assumes that isInherit implies that m_parentStyle is available.
        This patch ASSERTs that this assumption is correct, and removes the few existing checks to maintain consistency.

        No new tests / covered by all existing CSS tests.

        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::applyProperty):

2012-11-15  Kentaro Hara  <haraken@chromium.org>

        [V8] Remove redundant $interfaceName from function parameters
        https://bugs.webkit.org/show_bug.cgi?id=102334

        Reviewed by Adam Barth.

        'sub func { my $dataNode = shift; my $interfaceName = shift; }'
        is redundant. We can get $interfaceName by $dataNode->name.

        No tests. No change in behavior.

        * bindings/scripts/CodeGeneratorV8.pm:
        (GenerateOpaqueRootForGC):
        (GenerateHeader):
        (GenerateConstructorGetter):
        (GenerateNormalAttrGetter):
        (GenerateReplaceableAttrSetter):
        (GenerateNormalAttrSetter):
        (GenerateOverloadedFunctionCallback):
        (GenerateFunctionCallback):
        (GenerateOverloadedConstructorCallback):
        (GenerateSingleConstructorCallback):
        (GenerateConstructorCallback):
        (GenerateEventConstructorCallback):
        (GenerateTypedArrayConstructorCallback):
        (GenerateNamedConstructorCallback):
        (GenerateBatchedAttributeData):
        (GenerateImplementation):
        (GenerateToV8Converters):
        (GetNativeTypeForConversions):

2012-11-15  Simon Fraser  <simon.fraser@apple.com>

        Ensure that scrollbar layers show debug borders
        https://bugs.webkit.org/show_bug.cgi?id=102429

        Reviewed by Anders Carlsson.

        After r133517, scrollbar layers no longer showed debug borders, which
        was very confusing. Fix this by explicitly calling setShowDebugBorder()
        on the scrollbar-related layers owned by RenderLayerCompositor
        and RenderLayerBacking.
        
        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::updateDebugIndicators):
        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::cacheAcceleratedCompositingFlags):
        (WebCore::RenderLayerCompositor::updateOverflowControlsLayers):

2012-11-15  Andreas Kling  <akling@apple.com>

        ASSERTION FAILED: fastAttributeLookupAllowed(name) for 7 layout tests
        <http://webkit.org/b/102423>

        Reviewed by Anders Carlsson.

        Use Element::getAttributeItem() to find out if the element has a given attribute
        instead of fastHasAttribute() since that causes assertions for the "style" attribute.

        * html/parser/HTMLConstructionSite.cpp:
        (WebCore::HTMLConstructionSite::mergeAttributesFromTokenIntoElement):

2012-11-15  Erik Arvidsson  <arv@chromium.org>

        Update DOMException name: DOMStringSizeError
        https://bugs.webkit.org/show_bug.cgi?id=102089

        Reviewed by Ojan Vafai.

        Patch 2 of 25 to update DOMException name to match the spec and Firefox.

        DOMSTRING_SIZE_ERR is historical and not used in any spec or in our code.

        * dom/DOMCoreException.cpp:
        * dom/ExceptionCode.h:

2012-11-15  Joshua Bell  <jsbell@chromium.org>

        IndexedDB: Indexing tests are flaky-crashing
        https://bugs.webkit.org/show_bug.cgi?id=102283

        Reviewed by Tony Chang.

        Processing the final task can cause IDBTransactionBackendImpl references to be released
        by all holders. Prior to looping over the tasks (or, in an even earlier implementation,
        swapping queues) control would fall off the end of the function. The loop termination
        check introduced in http://wkrev.com/134529 requires that |this| be kept alive until
        the method completes.

        Test: storage/indexeddb/transaction-crash-in-tasks.html

        * Modules/indexeddb/IDBTransactionBackendImpl.cpp:
        (WebCore::IDBTransactionBackendImpl::abort): Rename self => protect.
        (WebCore::IDBTransactionBackendImpl::commit): Rename self => protect.
        (WebCore::IDBTransactionBackendImpl::taskTimerFired): New self-ref.

2012-11-15  Elliott Sprehn  <esprehn@chromium.org>

        MutationObserver wrapper should not be collected while still observing
        https://bugs.webkit.org/show_bug.cgi?id=102328

        Reviewed by Adam Barth.

        Make MutationObserver an ActiveDOMObject so that the wrapper is not
        collected while it is still observing the DOM. This is needed because
        the wrapper is passed into the callback and expandos on the wrapper
        should be preserved.

        Test: fast/mutation/observer-wrapper-dropoff.html

        * bindings/js/JSMutationObserverCustom.cpp:
        (WebCore::JSMutationObserverConstructor::constructJSMutationObserver):
        * bindings/v8/custom/V8MutationObserverCustom.cpp:
        (WebCore::V8MutationObserver::constructorCallback):
        * dom/MutationObserver.cpp:
        (WebCore::MutationObserver::create):
        (WebCore::MutationObserver::MutationObserver):
        (WebCore::MutationObserver::observationStarted):
        (WebCore::MutationObserver::observationEnded):
        * dom/MutationObserver.h:
        (WebCore):
        * dom/MutationObserver.idl:

2012-11-15  Tony Chang  <tony@chromium.org>

        Generate Settings from a .in file
        https://bugs.webkit.org/show_bug.cgi?id=100393

        Reviewed by Adam Barth.

        Generate most settings from an .in file to reduce human mistakes and
        to make it easier to add/remove new settings.

        I only moved settings that are easy to move at this point.  There are many more that
        have some minor naming inconsistencies that we can also move to Settings.in, but I'll
        do that in a follow up patch.

        This doesn't generate SettingInternals.* yet-- we can do that in a follow up patch.

        No new tests, this is a refactor.

        * CMakeLists.txt:
        * DerivedSources.make: Run make_settings.pl.
        * DerivedSources.pri: Run make_settings.pl.
        * GNUmakefile.am: Run make_settings.pl.
        * GNUmakefile.list.am:
        * WebCore.exp.in: Remove functions that are now inline in the header.
        * WebCore.gyp/WebCore.gyp: Run action_makenames.py, which will run make_settings.pl.
        * WebCore.gyp/scripts/action_makenames.py:
        (main): Allow make_settings.pl.
        * WebCore.order: Remove functions that are now inline in the header.
        * html/ValidationMessage.cpp:
        (WebCore::ValidationMessage::setMessageDOMAndStartTimer): Fix a typo in "magnification".
        * page/Settings.cpp:
        (WebCore::Settings::Settings): Replace generated settings with SETTINGS_INITIALIZER_LIST.
        * page/Settings.h:
        (Settings): Replace generated settings with SETTINGS_GETTERS_AND_SETTERS and SETTINGS_MEMBER_VARIABLES.
        * page/Settings.in: Added.
        * page/make_settings.pl: Added.
        (defaultItemFactory):
        (generateCode):
        (generateHeader): Use a similar model as make_names.pl.
        (printConditionalMacros):
        (printGettersAndSetters):
        (printMemberVariables):
        (printGetterAndSetter):
        (printInitializerList):
        (printInitializer):

2012-11-15  Alpha Lam  <hclam@chromium.org>

        [chromium] Refactoring to move logic of creating lazy decoded SkBitmap into DeferredImageDecoder
        https://bugs.webkit.org/show_bug.cgi?id=102019

        Reviewed by Stephen White.

        Goal of this change is to keep ImageDecodingStore clean and only do
        image caching. Logic of creating lazily decoded SkBitmaps is moved into
        DeferredImageDecoder.

        In particular these two methods are moved:
        - ImageDecodingStore::createLazyDecodedSkBitmap
        - ImageDecodingStore::resizeLazyDecodedSkBitmap

        No new tests. There is no new code (really). It is just moved from
        ImageDecodingStore to DeferredImageDecoder.

        No change in behavior. Code is tested with:
        Unit tests: webkit_unit_tests
        Layout test: platform/chromium/virtual/deferred

        * platform/graphics/chromium/DeferredImageDecoder.cpp:
        (WebCore::DeferredImageDecoder::isLazyDecoded):
        (WebCore):
        (WebCore::DeferredImageDecoder::resizeLazyDecodedSkBitmap):
        (WebCore::DeferredImageDecoder::frameBufferAtIndex):
        (WebCore::DeferredImageDecoder::setData):
        (WebCore::DeferredImageDecoder::createLazyDecodedSkBitmap):
        * platform/graphics/chromium/DeferredImageDecoder.h:
        (WebCore):
        (DeferredImageDecoder):
        * platform/graphics/chromium/ImageDecodingStore.cpp:
        * platform/graphics/chromium/ImageDecodingStore.h:
        (ImageDecodingStore):
        * platform/graphics/chromium/ImageFrameGenerator.cpp:
        (WebCore::ImageFrameGenerator::ImageFrameGenerator):
        * platform/graphics/chromium/ImageFrameGenerator.h:
        (WebCore::ImageFrameGenerator::create):
        (ImageFrameGenerator):
        * platform/graphics/skia/NativeImageSkia.cpp:
        (WebCore::NativeImageSkia::resizedBitmap):

2012-11-15  Roger Fong  <roger_fong@apple.com>

        Unreviewed. Build fix for Windows after r134767.

        Update vsprops and vcproj files to reflect changes to file locations in r134767.

        * WebCore.vcproj/WebCore.vcproj:
        * WebCore.vcproj/WebCoreCommon.vsprops:

2012-11-15  Elliott Sprehn  <esprehn@chromium.org>

        Track subframe count to avoid traversing the tree when there's no subframes
        https://bugs.webkit.org/show_bug.cgi?id=101821

        Reviewed by Ojan Vafai.

        Bug 101619 showed a 9-14% improvement from not walking the children during
        removeChild looking for frames when there's known to be no frames. The fix
        in that bug only avoids this walk when the whole document has no frames, this
        patch extends it to skip traversing subtrees that have no iframes by hooking
        the frame assignment to walk up the tree and keep track of the count of frames
        in the subtree on contentFrame assignment and then decrement it on disconnect.

        No new tests, this is just a perf refactor.

        * dom/ContainerNode.cpp:
        (WebCore::willRemoveChildren):
        * dom/ContainerNodeAlgorithms.cpp:
        (WebCore::ChildFrameDisconnector::collectFrameOwners):
        * dom/ContainerNodeAlgorithms.h:
        (WebCore::ChildFrameDisconnector::ChildFrameDisconnector):
        (ChildFrameDisconnector):
        (WebCore::ChildFrameDisconnector::collectFrameOwners):
          Renamed from collectDescendant() to better reflect what it really does.
        (WebCore::ChildFrameDisconnector::disconnectCollectedFrameOwners):
          Renamed from disconnect() to better reflect what it really does.
        (WebCore::ChildFrameDisconnector::disconnect):
          New method that does the collection of frame owners on either the root
          or only it's descendants.
        * dom/Node.cpp:
        (WebCore::Node::connectedSubframeCount):
        (WebCore::Node::incrementConnectedSubframeCount):
        (WebCore::Node::decrementConnectedSubframeCount):
        * dom/Node.h:
        * dom/NodeRareData.h:
        (WebCore::NodeRareData::NodeRareData):
        (WebCore::NodeRareData::connectedSubframeCount):
        (WebCore::NodeRareData::incrementConnectedSubframeCount):
        (WebCore::NodeRareData::decrementConnectedSubframeCount):
        * html/HTMLFrameOwnerElement.cpp:
        (WebCore::HTMLFrameOwnerElement::setContentFrame):
        (WebCore::HTMLFrameOwnerElement::disconnectContentFrame):

2012-11-15  Alpha Lam  <hclam@chromium.org>

        [chromium] WebGL texImage2D fails with deferred image decoding
        https://bugs.webkit.org/show_bug.cgi?id=102310

        Reviewed by Kenneth Russell.

        Skia's implementation of GraphicsContext3D::getImageData() uses ImageSource
        to decode an image. When deferred image decoding is enabled this class
        generates an ImageFrame marked as incomplete, which WebGL rejects. This results
        in failing of texImage2D.

        This change uses ImageDecoder directly instead of ImageSource. This skips
        the code path of deferred image decoding. This behavior is correct because
        GraphicsContext3D wants to decode the image differently with alpha not
        premultiplied and color profile applied optionally.

        Added a test to prove this change fixed the bug.

        Test: fast/images/webgl-teximage2d.html

        * platform/graphics/skia/GraphicsContext3DSkia.cpp:
        (WebCore::GraphicsContext3D::getImageData):

2012-11-15  Jer Noble  <jer.noble@apple.com>

        Further unreviewed build fix. Add explicit static_casts to avoid implicit precision warnings.

        * platform/graphics/avfoundation/objc/WebCoreAVFResourceLoader.mm:
        (WebCore::WebCoreAVFResourceLoader::fulfillRequestWithResource):

2012-11-15  Jer Noble  <jer.noble@apple.com>

        Unreviewed build fix. Avoid implicit precision and unused parameter warnings.

        * platform/graphics/avfoundation/objc/WebCoreAVFResourceLoader.mm:
        (WebCore::WebCoreAVFResourceLoader::responseReceived):
        (WebCore::WebCoreAVFResourceLoader::fulfillRequestWithResource):

2012-11-15  Adam Barth  <abarth@webkit.org>

        [V8] We shouldn't call deprecated V8 APIs
        https://bugs.webkit.org/show_bug.cgi?id=102407

        Reviewed by Eric Seidel.

        This patch was written by Sven Panne on the V8 team. He would prefer
        that we not call deprecated V8 APIs. This patch updates these call
        sites to more modern idioms.

        * bindings/scripts/CodeGeneratorV8.pm:
        (GenerateConstructorGetter):
        (GenerateImplementation):
        * bindings/scripts/test/V8/V8TestObj.cpp:
        (WebCore::TestObjV8Internal::TestObjConstructorGetter):
        * bindings/v8/PageScriptDebugServer.cpp:
        (WebCore::PageScriptDebugServer::addListener):
        * bindings/v8/ScriptController.cpp:
        (WebCore::ScriptController::setContextDebugId):
        (WebCore::ScriptController::contextDebugId):
        * bindings/v8/ScriptProfiler.cpp:
        (WebCore::ScriptProfiler::objectByHeapObjectId):
            - This code doesn't seem to do anything anymore.
        * bindings/v8/V8DOMConfiguration.h:
        (WebCore::V8DOMConfiguration::configureAttribute):
        * bindings/v8/V8DOMWindowShell.cpp:
        (WebCore::setInjectedScriptContextDebugId):
        * bindings/v8/V8DOMWrapper.cpp:
        (WebCore::V8DOMWrapper::maybeDOMWrapper):
        (WebCore::V8DOMWrapper::isWrapperOfType):
        * bindings/v8/V8EventListenerList.h:
        (WebCore::V8EventListenerList::doFindWrapper):
        (WebCore::V8EventListenerList::findOrCreateWrapper):
        * bindings/v8/WorkerContextExecutionProxy.cpp:
        (WebCore::WorkerContextExecutionProxy::initializeIfNeeded):
        * bindings/v8/WrapperTypeInfo.h:
        (WebCore::WrapperTypeInfo::unwrap):

2012-11-15  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r134800 and r134805.
        http://trac.webkit.org/changeset/134800
        http://trac.webkit.org/changeset/134805
        https://bugs.webkit.org/show_bug.cgi?id=102417

        This patch broke chromium port (Requested by jianli on
        #webkit).

        * Modules/mediastream/RTCPeerConnection.cpp:
        (WebCore::RTCPeerConnection::RTCPeerConnection):
        (WebCore::RTCPeerConnection::createOffer):
        (WebCore::RTCPeerConnection::createAnswer):
        (WebCore::RTCPeerConnection::setLocalDescription):
        (WebCore::RTCPeerConnection::localDescription):
        (WebCore::RTCPeerConnection::setRemoteDescription):
        (WebCore::RTCPeerConnection::remoteDescription):
        (WebCore::RTCPeerConnection::updateIce):
        (WebCore::RTCPeerConnection::addIceCandidate):
        (WebCore::RTCPeerConnection::readyState):
        (WebCore::RTCPeerConnection::iceState):
        (WebCore::RTCPeerConnection::addStream):
        (WebCore::RTCPeerConnection::close):
        (WebCore::RTCPeerConnection::stop):
        (WebCore::RTCPeerConnection::changeReadyState):
        (WebCore::RTCPeerConnection::scheduledEventTimerFired):
        * Modules/mediastream/RTCPeerConnection.h:
        (RTCPeerConnection):
        * Modules/mediastream/RTCPeerConnection.idl:
        * dom/EventNames.h:
        (WebCore):
        * platform/mediastream/RTCDataChannelDescriptor.cpp:
        (WebCore::RTCDataChannelDescriptor::RTCDataChannelDescriptor):
        (WebCore::RTCDataChannelDescriptor::readyStateChanged):
        * platform/mediastream/RTCPeerConnectionHandlerClient.h:
        (RTCPeerConnectionHandlerClient):
        * platform/mediastream/chromium/RTCPeerConnectionHandlerChromium.cpp:
        * platform/mediastream/chromium/RTCPeerConnectionHandlerChromium.h:
        (RTCPeerConnectionHandlerChromium):

2012-11-15  Elliott Sprehn  <esprehn@chromium.org>

        Remove Node::aboutToUnload and be more explicit about what it was for
        https://bugs.webkit.org/show_bug.cgi?id=102357

        Reviewed by Ryosuke Niwa.

        Node::aboutToUnload was confusingly named because it was only called on
        the focused node, and it really only existed to support notifying the
        embedder that inputs should stop being editable on unload. Instead add
        a new method to HTMLInputElement that ends editing and call that
        explicitly in the FrameLoader so it's clear what this is about.

        No new tests, this is just a refactoring.

        * dom/Node.h:
        * html/HTMLInputElement.cpp:
        (WebCore::HTMLInputElement::endEditing):
            New method that handles finishing editing.
        * html/HTMLInputElement.h:
        (HTMLInputElement):
        * html/TextFieldInputType.cpp:
        (WebCore::TextFieldInputType::handleBlurEvent):
            Use the new method to reduce code duplication.
        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::stopLoading):
            Be explicit about what this check was for.

2012-11-15  Tommy Widenflycht  <tommyw@google.com>

        [chromium] MediaStream API: Add missing WebRTCPeerConnectionHandlerClient::didAddRemoteDataChannel
        https://bugs.webkit.org/show_bug.cgi?id=102386

        Reviewed by Adam Barth.

        Existing tests expanded to cover patch.

        * platform/mediastream/RTCDataChannelDescriptor.cpp:
        (WebCore::RTCDataChannelDescriptor::RTCDataChannelDescriptor):
        (WebCore::RTCDataChannelDescriptor::readyStateChanged):
        * platform/mediastream/chromium/RTCPeerConnectionHandlerChromium.cpp:
        (WebCore::RTCPeerConnectionHandlerChromium::didAddRemoteDataChannel):
        (WebCore):
        * platform/mediastream/chromium/RTCPeerConnectionHandlerChromium.h:
        (WebKit):
        (RTCPeerConnectionHandlerChromium):

2012-11-15  Rick Byers  <rbyers@chromium.org>

        No tests for changing mouse cursors
        https://bugs.webkit.org/show_bug.cgi?id=100550

        Reviewed by Brent Fulgham.

        Add infrastructure to keep track of the last set mouse cursor,
        and then to query it from DumpRenderTree.  Also adds ASSERTs to help ensure
        we can reliably detect when an uninitialized Cursor object is used (such as
        the one that can be returned from OptionalCursor in the NoCursorChange scenario).

        Test: fast/events/mouse-cursor.html

        * WebCore.exp.in: Add Cursor copy ctor export
        * page/EventHandler.cpp:
        (WebCore::OptionalCursor::cursor):
        (WebCore::EventHandler::handleMouseMoveEvent): Keep track of last set mouse cursor
        * page/EventHandler.h:
        (WebCore::EventHandler::currentMouseCursor): New getter for last set mouse cursor
        * platform/Cursor.h:
        (WebCore::Cursor::Cursor): Mark uninitialized cursor types as invalid.
        (WebCore::Cursor::type): Assert cursor type is valid.
        * testing/Internals.cpp:
        (WebCore::cursorTypeToString): Helper to convert cursor type to enum
        (WebCore):
        (WebCore::Internals::getCurrentCursorInfo): New function to return a string describing the last set mouse cursor
        * testing/Internals.h: Declare getCurrentCursorInfo
        * testing/Internals.idl: Declare getCurrentCursorInfo

2012-11-13  Jer Noble  <jer.noble@apple.com>

        Support loading of blob URLs in AVFoundation.
        https://bugs.webkit.org/show_bug.cgi?id=102182

        Reviewed by Eric Carlson.

        Add support for BLOB (and other non-natively supported schemed) URLs through the AVAssetResourceLoader API.

        Test: media/video-src-blob.html

        * platform/graphics/avfoundation/objc/MediaPlayerPrivateAVFoundationObjC.h:
        * platform/graphics/avfoundation/objc/MediaPlayerPrivateAVFoundationObjC.mm:
        (WebCore::MediaPlayerPrivateAVFoundationObjC::shouldWaitForLoadingOfResource): Only go down the encrypted
            media path if the key scheme is skp://.
        (WebCore::MediaPlayerPrivateAVFoundationObjC::didCancelLoadingRequest): Added.  Cancel resource loading if
            the media engine requests it.
        (WebCore::MediaPlayerPrivateAVFoundationObjC::addKey): Use the new, non-deprecated API.
        
        Use the dispatch_main_queue() as the AVAssetResourceLoadDelegate queue now that <rdar://problem/12362461> is fixed.
        * platform/graphics/avfoundation/objc/MediaPlayerPrivateAVFoundationObjC.mm:
        (WebCore::MediaPlayerPrivateAVFoundationObjC::createAVAssetForURL):
        (-[WebCoreAVFLoaderDelegate resourceLoader:shouldWaitForLoadingOfRequestedResource:]):
        (-[WebCoreAVFLoaderDelegate resourceLoader:didCancelLoadingRequest:]):

        Add a new helper class to manage loading the CachedRawResource and feed the incoming
        data to the AVAssetResourceLoader.
        * platform/graphics/avfoundation/objc/WebCoreAVFResourceLoader.h: Added.
        * platform/graphics/avfoundation/objc/WebCoreAVFResourceLoader.mm: Added.
        (WebCore::WebCoreAVFResourceLoader::create): Simple factory.
        (WebCore::WebCoreAVFResourceLoader::WebCoreAVFResourceLoader): Simple constructor.
        (WebCore::WebCoreAVFResourceLoader::~WebCoreAVFResourceLoader): Simple destructor.
        (WebCore::WebCoreAVFResourceLoader::startLoading): Tell the cachedResourceLoader to schedule loading.
        (WebCore::WebCoreAVFResourceLoader::stopLoading): Remove this as a client of the resource.
        (WebCore::WebCoreAVFResourceLoader::responseReceived): Fill in the contentInformation field of the 
            AVAssetResourceLoadingRequest.
        (WebCore::WebCoreAVFResourceLoader::dataReceived): Call fulfillRequestWithResource.
        (WebCore::WebCoreAVFResourceLoader::notifyFinished): Tell the AVAssetResourceLoadingRequest that loading
            has completed.
        (WebCore::WebCoreAVFResourceLoader::fulfillRequestWithResource): Fill in (if possible) the dataRequest
            field of the AVAssetResourceLoadingRequest.

        Add a MediaPlayerClient method allowing MediaPlayerPrivate subclasses to access the HTMLMediaElement's
        document's cachedResourceLoader.
        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::mediaPlayerCachedResourceLoader):
        * html/HTMLMediaElement.h:
        * platform/graphics/MediaPlayer.cpp:
        (WebCore::MediaPlayer::cachedResourceLoader):
        * platform/graphics/MediaPlayer.h:
        (WebCore::MediaPlayerClient::mediaPlayerCachedResourceLoader):

        Add a convenience method to convert from MIME type -> UTI.
        * platform/network/mac/UTIUtilities.h:
        * platform/network/mac/UTIUtilities.mm:
        (WebCore::UTIFromMIMEType):

        Add new files to project.
        * WebCore.xcodeproj/project.pbxproj:

2012-11-15  Kenneth Rohde Christiansen  <kenneth@webkit.org>

        Remove initiallyFitToViewport attribute
        https://bugs.webkit.org/show_bug.cgi?id=102392

        Reviewed by Noam Rosenthal.

        Remove the initiallyFitToViewport which shouldn't have been
        added in the first place. We now reset userScalable to auto (-1)
        in case it was not explicitly set by the web author.

        Same behavior, covered by existing tests.

        * dom/ViewportArguments.cpp:
        (WebCore::ViewportArguments::resolve):
        * dom/ViewportArguments.h:
        (ViewportAttributes):

2012-11-15  Tommy Widenflycht  <tommyw@google.com>

        MediaStream API: Update RTCPeerConnection states to match the latest editors draft
        https://bugs.webkit.org/show_bug.cgi?id=102382

        Reviewed by Adam Barth.

        Updating readyState & iceState, and adding iceGatheringState.
        Also safeguarding the event timer callback.

        Patch covered by existing tests.

        * Modules/mediastream/RTCPeerConnection.cpp:
        (WebCore::RTCPeerConnection::RTCPeerConnection):
        (WebCore::RTCPeerConnection::createOffer):
        (WebCore::RTCPeerConnection::createAnswer):
        (WebCore::RTCPeerConnection::setLocalDescription):
        (WebCore::RTCPeerConnection::localDescription):
        (WebCore::RTCPeerConnection::setRemoteDescription):
        (WebCore::RTCPeerConnection::remoteDescription):
        (WebCore::RTCPeerConnection::updateIce):
        (WebCore::RTCPeerConnection::addIceCandidate):
        (WebCore::RTCPeerConnection::readyState):
        (WebCore::RTCPeerConnection::iceGatheringState):
        (WebCore):
        (WebCore::RTCPeerConnection::iceState):
        (WebCore::RTCPeerConnection::addStream):
        (WebCore::RTCPeerConnection::close):
        (WebCore::RTCPeerConnection::didChangeIceGatheringState):
        (WebCore::RTCPeerConnection::stop):
        (WebCore::RTCPeerConnection::changeReadyState):
        (WebCore::RTCPeerConnection::scheduledEventTimerFired):
        * Modules/mediastream/RTCPeerConnection.h:
        (RTCPeerConnection):
        * Modules/mediastream/RTCPeerConnection.idl:
        * dom/EventNames.h:
        (WebCore):
        * platform/mediastream/RTCPeerConnectionHandlerClient.h:
        (RTCPeerConnectionHandlerClient):
        * platform/mediastream/chromium/RTCPeerConnectionHandlerChromium.cpp:
        (WebCore::RTCPeerConnectionHandlerChromium::didChangeICEGatheringState):
        (WebCore):
        * platform/mediastream/chromium/RTCPeerConnectionHandlerChromium.h:
        (RTCPeerConnectionHandlerChromium):

2012-11-15  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r134649 and r134665.
        http://trac.webkit.org/changeset/134649
        http://trac.webkit.org/changeset/134665
        https://bugs.webkit.org/show_bug.cgi?id=102413

        Broke a ton of downstream chromium tests (Requested by japhet
        on #webkit).

        * loader/DocumentLoader.cpp:
        (WebCore::DocumentLoader::DocumentLoader):
        (WebCore::DocumentLoader::~DocumentLoader):
        (WebCore::DocumentLoader::finishedLoading):
        (WebCore::DocumentLoader::clearMainResourceLoader):
        (WebCore::DocumentLoader::isLoadingInAPISense):
        (WebCore::DocumentLoader::documentURL):
        (WebCore::DocumentLoader::isLoadingMainResource):
        (WebCore::DocumentLoader::startLoadingMainResource):
        * loader/DocumentLoader.h:
        (DocumentLoader):
        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::FrameLoader):
        (WebCore::FrameLoader::init):
        * loader/FrameLoaderStateMachine.cpp:
        (WebCore::FrameLoaderStateMachine::FrameLoaderStateMachine):
        * loader/FrameLoaderStateMachine.h:
        * loader/MainResourceLoader.cpp:
        (WebCore::shouldLoadAsEmptyDocument):
        (WebCore):
        (WebCore::MainResourceLoader::continueAfterContentPolicy):
        (WebCore::MainResourceLoader::didReceiveResponse):
        (WebCore::MainResourceLoader::didFinishLoading):
        (WebCore::MainResourceLoader::handleEmptyLoad):
        (WebCore::MainResourceLoader::loadNow):
        (WebCore::MainResourceLoader::load):
        * loader/MainResourceLoader.h:
        (MainResourceLoader):

2012-11-15  Kentaro Hara  <haraken@chromium.org>

        Correct syntax of old-style IDL files
        https://bugs.webkit.org/show_bug.cgi?id=102335

        Reviewed by Adam Barth.

        Recently tasak@ corrected an IDL syntax of almost all IDL files.
        We should correct the rest of them.

        No tests. No change in behavior.

        * html/canvas/OESElementIndexUint.idl:
        * page/PerformanceMark.idl:
        * page/PerformanceMeasure.idl:

2012-11-15  Elliott Sprehn  <esprehn@chromium.org>

        Remove isHTMLInputElement since it's unused and toInputElement exists 
        https://bugs.webkit.org/show_bug.cgi?id=102358

        Reviewed by Ojan Vafai.

        Remove isHTMLInputElement as no one uses it. Everyone just uses
        Node::toInputElement and checks for a 0 return value instead.

        toInputElement is also more reliable as there's no requirement that
        subclasses of HTMLInputElement have the tag name of inputTag so using
        this method in a check could potentially miss future subclasses with
        different tag names, though none exist right now.

        No new tests, this just deletes dead code.

        * html/HTMLInputElement.h:

2012-11-15  Erik Arvidsson  <arv@chromium.org>

        Update DOMException name: NotSupportedError
        https://bugs.webkit.org/show_bug.cgi?id=102139

        Reviewed by Ojan Vafai.

        Patch 9 of 25 to update DOMException name to match the spec and Firefox.

        Updated existing tests.

        * dom/DOMCoreException.cpp:

2012-11-15  Elliott Sprehn  <esprehn@chromium.org>

        Remove isHTMLInputElement since it's unused and toInputElement exists 
        https://bugs.webkit.org/show_bug.cgi?id=102358

        Reviewed by Ojan Vafai.

        Remove isHTMLInputElement as no one uses it. Everyone just uses
        Node::toInputElement and checks for a 0 return value instead.

        toInputElement is also more reliable as there's no requirement that
        subclasses of HTMLInputElement have the tag name of inputTag so using
        this method in a check could potentially miss future subclasses with
        different tag names, though none exist right now.

        No new tests, this just deletes dead code.

        * html/HTMLInputElement.h:

2012-11-15  Erik Arvidsson  <arv@chromium.org>

        Update DOMException name: NoModificationAllowedError
        https://bugs.webkit.org/show_bug.cgi?id=102134

        Reviewed by Ojan Vafai.

        Patch 7 of 25 to update DOMException name to match the spec and Firefox.

        Updated existing tests.

        * dom/DOMCoreException.cpp:

2012-11-15  Miguel Garcia  <miguelg@chromium.org>

        Remove unnecesary dependencies INPUT_TYPE_COLOR
        https://bugs.webkit.org/show_bug.cgi?id=102379

        Reviewed by Darin Adler.

        Platforms should be able to enable INPUT_TYPE_COLOR without enabling
        CALENDAR_PICKER and DATALIST_ELEMENT. Before this patch however there would be
        compile errors in such configuration.

        No new tests since this is not adding any extra functionality.

        * WebCore.gyp/WebCore.gyp:
        * html/ColorInputType.cpp:
        (WebCore::ColorInputType::shouldShowSuggestions):
        * make-file-arrays.py:
        (main):

2012-11-15  Eric Carlson  <eric.carlson@apple.com>

        Update computed line position algorithm
        https://bugs.webkit.org/show_bug.cgi?id=93779

        Reviewed by Philippe Normand.

        Compute the position of a text track relative to rendered tracks. This is needed to position
        cues correctly when there is more than one text track.

        Test: media/track/track-cue-container-rendering-position.html

        * html/track/TextTrack.cpp:
        (WebCore::TextTrack::invalidateTrackIndex): Invalidate both cached track indices.
        (WebCore::TextTrack::trackIndexRelativeToRenderedTracks): Return the index of the track relative
            to other rendered tracks.
        * html/track/TextTrack.h:

        * html/track/TextTrackCue.cpp:
        (WebCore::TextTrackCue::calculateComputedLinePosition): Use trackIndexRelativeToRenderedTracks()
            instead of trackIndex() so cues are positioned correctly.

        * html/track/TextTrackList.cpp:
        (TextTrackList::getTrackIndex): Change return type from unsigned to int.
        (TextTrackList::getTrackIndexRelativeToRenderedTracks): New.
        * html/track/TextTrackList.h:

2012-11-15  Dominik Röttsches  <dominik.rottsches@intel.com>

        [EFL] Bump Harfbuzz to allow fixing bug 101009 on EFL
        https://bugs.webkit.org/show_bug.cgi?id=101323

        Reviewed by Martin Robinson.

        Removing ifdef since we bumped Harfbuzz dependency. This is the
        real fix replacing the previous workaround of having a Chromium
        specific ifdef here, since Chromium uses a newer HarfBuzz version
        already.

        No new tests, covered by css3/flexbox/inline-flex-crash.html
        which will not crash anymore even with the ifdef removed.

        * platform/graphics/harfbuzz/ng/HarfBuzzShaper.cpp:
        (WebCore::HarfBuzzShaper::shapeHarfBuzzRuns):

2012-11-15  Andreas Kling  <kling@webkit.org>

        REGRESSION(r134408): Heap-use-after-free in WebCore::HTMLConstructionSite::mergeAttributesFromTokenIntoElement().
        <http://webkit.org/b/102304>

        Reviewed by Anders Carlsson.

        Test: fast/dom/cloneNode-below-body-attribute-merging.html

        * html/parser/HTMLConstructionSite.cpp:
        (WebCore::HTMLConstructionSite::mergeAttributesFromTokenIntoElement):

            Use Element::fastHasAttribute() to determine if a given attribute is already present on the element
            we're merging attributes into.

        * dom/ElementAttributeData.h:
        (ElementAttributeData):

            Remove a now-unnecessary friend declaration.

2012-11-15  Elliott Sprehn  <esprehn@chromium.org>

        Prevent creation of detached frames in ShadowRoot
        https://bugs.webkit.org/show_bug.cgi?id=102333

        Reviewed by Dimitri Glazkov.

        Similar to Bug 94717 you can create a loaded iframe in a detached
        subtree using ShadowRoot. To fix this we just need to make
        SubframeLoadingDisabler traverse through shadow boundaries.

        Test: fast/frames/detached-shadow-frame.html

        * html/HTMLFrameOwnerElement.h:
        (WebCore::SubframeLoadingDisabler::canLoadFrame):

2012-11-15  Shinya Kawanaka  <shinyak@chromium.org>

        Changing pseudoClass (:visited) should cause distribution.
        https://bugs.webkit.org/show_bug.cgi?id=101700

        Reviewed by Dimitri Glazkov.

        When href attribute of an anchor or area element is changed, we have to invalidate distribution.

        Since we would like to check a few pseudoClasses at once, we make the argument of
        SelectRuleFeatureSet::hasSelectorFor int.

        Tests: fast/dom/shadow/pseudoclass-update-visited-anchor.html
               fast/dom/shadow/pseudoclass-update-visited-area.html

        * dom/ElementShadow.cpp:
        (WebCore::invalidateParentDistributionIfNecessary):
        * dom/ElementShadow.h:
        (WebCore):
        * html/HTMLAnchorElement.cpp:
        (WebCore::HTMLAnchorElement::parseAttribute):
        * html/shadow/SelectRuleFeatureSet.h:
        (WebCore::SelectRuleFeatureSet::hasSelectorFor):

2012-11-15  Balazs Kelemen  <kbalazs@webkit.org>

        Coordinated Graphics: support the "freeze animations" API
        https://bugs.webkit.org/show_bug.cgi?id=100703

        Reviewed by Noam Rosenthal.

        Make animations resumable in Coordinated Graphics.
        Pausing was already implemented.

        Tested with animations and transitions tests. No tests to be
        unskipped because these tests has been working without this API
        as well (although this is the preferred way).

        * platform/graphics/GraphicsLayerAnimation.cpp:
        (WebCore::GraphicsLayerAnimation::apply):
        (WebCore::GraphicsLayerAnimation::computeTotalRunningTime):
        Do not consider the time while we was suspended as part of
        the total running time.
        (WebCore):
        (WebCore::GraphicsLayerAnimation::resume):
        (WebCore::GraphicsLayerAnimations::suspend):
        (WebCore::GraphicsLayerAnimations::resume):
        * platform/graphics/GraphicsLayerAnimation.h:
        (GraphicsLayerAnimation):
        (GraphicsLayerAnimations):

2012-11-15  Gabor Rapcsanyi  <rgabor@webkit.org>

        Relocate the ARM NEON SVG filter optimizations
        https://bugs.webkit.org/show_bug.cgi?id=102214

        Reviewed by Zoltan Herczeg.

        Relocate the ARM filter optimizations into platform/graphics/cpu/arm
        to keep them together with the others.
        From now all graphics optimization for ARM NEON should go here.

        * CMakeLists.txt:
        * GNUmakefile.am:
        * GNUmakefile.list.am:
        * Target.pri:
        * WebCore.gyp/WebCore.gyp:
        * WebCore.gypi:
        * WebCore.pri:
        * WebCore.xcodeproj/project.pbxproj:
        * platform/graphics/cpu/arm/filters/FEBlendNEON.h: Renamed from Source/WebCore/platform/graphics/filters/arm/FEBlendNEON.h.
        (WebCore):
        (FEBlendUtilitiesNEON):
        (WebCore::FEBlendUtilitiesNEON::div255):
        (WebCore::FEBlendUtilitiesNEON::normal):
        (WebCore::FEBlendUtilitiesNEON::multiply):
        (WebCore::FEBlendUtilitiesNEON::screen):
        (WebCore::FEBlendUtilitiesNEON::darken):
        (WebCore::FEBlendUtilitiesNEON::lighten):
        (WebCore::FEBlend::platformApplyNEON):
        * platform/graphics/cpu/arm/filters/FECompositeArithmeticNEON.h: Renamed from Source/WebCore/platform/graphics/filters/arm/FECompositeArithmeticNEON.h.
        (WebCore):
        (WebCore::FEComposite::computeArithmeticPixelsNeon):
        (WebCore::FEComposite::platformArithmeticNeon):
        * platform/graphics/cpu/arm/filters/FEGaussianBlurNEON.h: Renamed from Source/WebCore/platform/graphics/filters/arm/FEGaussianBlurNEON.h.
        (WebCore):
        (WebCore::boxBlurNEON):
        * platform/graphics/cpu/arm/filters/FELightingNEON.cpp: Renamed from Source/WebCore/platform/graphics/filters/arm/FELightingNEON.cpp.
        (WebCore):
        (WebCore::feLightingConstantsForNeon):
        (WebCore::FELighting::platformApplyNeonWorker):
        (WebCore::FELighting::getPowerCoefficients):
        * platform/graphics/cpu/arm/filters/FELightingNEON.h: Renamed from Source/WebCore/platform/graphics/filters/arm/FELightingNEON.h.
        (WebCore):
        (FELightingFloatArgumentsForNeon):
        (FELightingPaintingDataForNeon):
        (WebCore::FELighting::platformApplyNeon):
        * platform/graphics/cpu/arm/filters/NEONHelpers.h: Renamed from Source/WebCore/platform/graphics/filters/arm/NEONHelpers.h.
        (WebCore):
        (WebCore::loadRGBA8AsFloat):
        (WebCore::storeFloatAsRGBA8):

2012-11-15  Mike West  <mkwst@chromium.org>

        We should trigger a console warning when we encounter invalid sandbox flags.
        https://bugs.webkit.org/show_bug.cgi?id=101956

        Reviewed by Adam Barth.

        A developer who writes '<iframe sandbox="allowScripts">' probably has
        something in mind other than what the browser interprets. In these
        situations, we should log a console warning that notes 'allowScripts'
        is an invalid sandbox flag ('allow-scripts' is probably what she
        meant).

        This patch does the simplest thing possible: it throws a warning that
        lists the invalid flags encountered for sandbox attributes on iframes,
        and for sandbox Content Security Policy directives.

        Tests: http/tests/security/contentSecurityPolicy/sandbox-invalid-header.html
               http/tests/security/sandboxed-iframe-invalid.html

        * dom/SecurityContext.cpp:
        (WebCore::SecurityContext::parseSandboxPolicy):
        * dom/SecurityContext.h:
        (SecurityContext):
            Accept a new out parameter, invalidTokensErrorMessage. If invalid
            tokens are encountered, build an error message string, and pass it
            back to the caller through this parameter.
        * html/HTMLIFrameElement.cpp:
        (WebCore::HTMLIFrameElement::parseAttribute):
        * page/ContentSecurityPolicy.cpp:
        (WebCore::CSPDirectiveList::applySandboxPolicy):
            When applying a sandbox policy, pass a string into
            SecurityContext::parseSandboxPolicy to grab any errors that might
            be encountered, and log a warning in that event.
        (WebCore::ContentSecurityPolicy::reportInvalidSandboxFlags):
        (WebCore):
        * page/ContentSecurityPolicy.h:
            Adding a new method to report invalid sandbox flags.

2012-11-15  Kenneth Rohde Christiansen  <kenneth@webkit.org>

        Rename member vars in ViewportArgument to match css-device-adapt
        https://bugs.webkit.org/show_bug.cgi?id=102355

        Reviewed by Gyuyoung Kim.

        No behavior change, thus no new tests.

        * dom/ViewportArguments.cpp:
        (WebCore::ViewportArguments::resolve):
        (WebCore::setViewportFeature):
        * dom/ViewportArguments.h:
        (WebCore::ViewportArguments::ViewportArguments):
        (ViewportArguments):
        (WebCore::ViewportArguments::operator==):

2012-11-15  Andrey Adaikin  <aandrey@chromium.org>

        Web Inspector: [WebGL] cloneNode for images with revoked Blob URIs fails
        https://bugs.webkit.org/show_bug.cgi?id=102366

        Reviewed by Vsevolod Vlasov.

        * inspector/InjectedScriptCanvasModuleSource.js:
        (.):

2012-11-15  Mark Rowe  <mrowe@apple.com>

        Build fix.

        Disable deprecation warnings in a few places that need it.

        * platform/graphics/ca/mac/TileCache.mm:
        (WebCore::TileCache::drawRepaintCounter):
        * platform/graphics/mac/FontMac.mm:
        (WebCore::showGlyphsWithAdvances):
        * platform/graphics/mac/WebLayer.mm:
        (drawLayerContents):

2012-11-15  Kent Tamura  <tkent@chromium.org>

        Support stand-alone month names in calendar picker
        https://bugs.webkit.org/show_bug.cgi?id=102196

        Reviewed by Kentaro Hara.

        We have showed non stand-alone month names in any locales. However
        we should show stand-alone month names in some locales such as
        Russian.

        This patch introduce PagePopupController::formatMonth. It is
        exposed to page-popups, and format year-month pairs in the same
        way as input[type=month].

        No new tests. Affects platform/chromium/fast/forms/calendar-picker/calendar-picker-appearance-ru.html.

        * Resources/pagepopups/calendarPicker.js:
        (Month.prototype.toLocaleString):
        Calls pagePopupController.formatMonth except Japanese locale.
        (handleArgumentsTimeout):
        Remove unnecessary default monthLabels.
        * page/PagePopupController.cpp:
        (WebCore::PagePopupController::formatMonth): Added.
        * page/PagePopupController.h:
        (PagePopupController): Declare formatMonth.
        * page/PagePopupController.idl: Add formatMonth.

2012-11-15  Eugene Klyuchnikov  <eustas.bug@gmail.com>

        Web Inspector: Fix new JS compiler warnings.
        https://bugs.webkit.org/show_bug.cgi?id=102341

        Reviewed by Yury Semikhatsky.

        New version of compiler finds new inconsistencies.

        * inspector/front-end/DOMAgent.js: Replaced 2 simiar cases with loop.
        * inspector/front-end/DOMBreakpointsSidebarPane.js:
        Declared instance property on WebInspector.
        * inspector/front-end/Script.js: Normalized parameter notation.

2012-11-15  Kenneth Rohde Christiansen  <kenneth@webkit.org>

        Unreviewed build fix.

        * dom/ViewportArguments.cpp:
        (WebCore::convertToUserSpace): Add static

2012-11-14  Kenneth Rohde Christiansen  <kenneth@webkit.org>

        Refactor ViewportArguments to only use CSS units
        https://bugs.webkit.org/show_bug.cgi?id=102287

        Reviewed by Noam Rosenthal.

        Refactor the ViewportArgument code to use a member method for
        resolving the viewport. This new method only uses arguments in
        CSS units.

        This is preparation for adding the CSS Device Adaptation support.

        Tested by existing tests fast/viewport.

        * dom/ViewportArguments.cpp:
        (WebCore::clampLengthValue):
        (WebCore::clampScaleValue): New utility functions.
        (WebCore::ViewportArguments::resolve):
        (WebCore::convertToUserSpace): Added until everyone provides arguments
        only in CSS units and not device ones.
        (WebCore::computeViewportAttributes):
        (WebCore::computeMinimumScaleFactorForContentContained):
        (WebCore):
        (WebCore::restrictMinimumScaleFactorToViewportSize):
        * dom/ViewportArguments.h:
        (ViewportArguments):

2012-11-14  Shinya Kawanaka  <shinyak@chromium.org> 

        Changing pseudoClass (:disabled) should cause distribution.
        https://bugs.webkit.org/show_bug.cgi?id=101901

        Reviewed by Hajime Morita.

        We have to invalidate distribution when pseudo-class (:disabled) is changed.

        According to the HTML5 spec, :disabled will match button, input, select, textarea, optgroup,
        option, command, li, and fieldset. However, command is not implemented yet, we skip li and command. li might
        have 'disabled' state, but we need a command element to make it 'disabled' state.

        Tests: fast/dom/shadow/pseudoclass-update-disabled-button.html
               fast/dom/shadow/pseudoclass-update-disabled-fieldset.html
               fast/dom/shadow/pseudoclass-update-disabled-input.html
               fast/dom/shadow/pseudoclass-update-disabled-optgroup.html
               fast/dom/shadow/pseudoclass-update-disabled-option.html
               fast/dom/shadow/pseudoclass-update-disabled-select.html
               fast/dom/shadow/pseudoclass-update-disabled-textarea.html

        * html/HTMLFormControlElement.cpp:
        (WebCore::HTMLFormControlElement::disabledAttributeChanged):
        * html/HTMLOptGroupElement.cpp:
        (WebCore::HTMLOptGroupElement::parseAttribute):
        * html/HTMLOptionElement.cpp:
        (WebCore::HTMLOptionElement::parseAttribute):

2012-11-14  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r134691, r134703, r134715, r134716,
        and r134733.
        http://trac.webkit.org/changeset/134691
        http://trac.webkit.org/changeset/134703
        http://trac.webkit.org/changeset/134715
        http://trac.webkit.org/changeset/134716
        http://trac.webkit.org/changeset/134733
        https://bugs.webkit.org/show_bug.cgi?id=102342

        "Broke the Apple Windows Debug and GTK builds." (Requested by
        dydx on #webkit).

        * WebCore.exp.in:
        * bindings/js/SerializedScriptValue.h:
        * testing/Internals.cpp:
        * testing/Internals.h:
        (WebCore):
        * testing/Internals.idl:

2012-11-14  Pavel Feldman  <pfeldman@chromium.org>

        Not reviewed: fixing inspector tests under Qt.

        * inspector/front-end/TestController.js:
        * inspector/front-end/utilities.js:
        (.):

2012-11-14  Kentaro Hara  <haraken@chromium.org>

        Unreviewed. Rebaselined run-bindings-tests.

        * bindings/scripts/test/V8/V8TestNode.h:
        (WebCore::toV8Fast):

2012-11-14  Simon Fraser  <simon.fraser@apple.com>

        Don't use temporary clip rects when hit testing
        https://bugs.webkit.org/show_bug.cgi?id=102329

        Reviewed by Beth Dakin.

        We now cache clip rects separately for painting, hit testing etc. Hit testing
        clip rects are always shrunk to exclude scrollbars (so that hit testing on
        the scrollbars works), so we no longer every need to use temporary clip rects
        during hit testing.

        Added an assertion that the scrollbar relevancy when we computed the clip rects
        is the same as that when using them.
        
        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::hitTestLayer):
        (WebCore::RenderLayer::updateClipRects):
        * rendering/RenderLayer.h:
        (WebCore::ClipRectsCache::ClipRectsCache):
        (ClipRectsCache):

2012-11-14  Dirk Schulze  <krit@webkit.org>

        Support animation of basic shape 'polygon'
        https://bugs.webkit.org/show_bug.cgi?id=102080

        Reviewed by Daniel Bates.

        The basic shapes 'circle', 'rectangle' and 'ellipse' are animatable with the committed
        patch http://trac.webkit.org/changeset/134352.
        This is a follow-up patch to make 'polygon' animatable as well, as long as the number
        of vertices between start and end polygon is the same.

        Added polygon animation test to existing test:
            fast/exclusions/shape-inside/shape-inside-animation.html
            css3/masking/clip-path-animation.html

        * page/animation/CSSPropertyAnimation.cpp: Forgot to add copyright with last commits.
        * rendering/style/BasicShapes.cpp:
        (WebCore::BasicShape::canBlend): Polygons are allowed now.
        (WebCore::BasicShapePolygon::blend): Interpolate polygon shapes.

2012-11-14  Kentaro Hara  <haraken@chromium.org>

        Unreviewed. Fix code generator warnings.

        * bindings/scripts/CodeGeneratorV8.pm:
        (GenerateFunctionCallback):
        (GenerateImplementation):

2012-11-14  Shinya Kawanaka  <shinyak@chromium.org>

        Changing pseudoClass (:checked) should cause distribution.
        https://bugs.webkit.org/show_bug.cgi?id=101902

        Reviewed by Dimitri Glazkov.

        When the 'checked' state is changed, we have to invalidate distribution.

        According to the HTML5 spec, :checked should match a checked input[type="checkbox"],
        a checked input[type="radio"], a selected option, and commands. However, we don't have a command element yet.

        Tests: fast/dom/shadow/pseudoclass-update-checked-input.html
               fast/dom/shadow/pseudoclass-update-checked-option.html

        * html/HTMLInputElement.cpp:
        (WebCore::HTMLInputElement::setChecked):
        * html/HTMLOptionElement.cpp:
        (WebCore::HTMLOptionElement::setSelectedState):

2012-11-14  Kentaro Hara  <haraken@chromium.org>

        [V8] Kill $implClassName from CodeGeneratorV8.pm
        https://bugs.webkit.org/show_bug.cgi?id=102312

        Reviewed by Adam Barth.

        $implClassName and $interfaceName are the same.
        Sometimes we are passing both $implClassName and $interfaceName to
        subroutines. We can kill $implClassName.

        No tests. No change in behavior.

        * bindings/scripts/CodeGeneratorV8.pm:
        (GenerateOpaqueRootForGC):
        (GenerateHeader):
        (GenerateDomainSafeFunctionGetter):
        (GenerateDomainSafeFunctionSetter):
        (GenerateConstructorGetter):
        (GenerateNormalAttrGetter):
        (GenerateReplaceableAttrSetter):
        (GenerateNormalAttrSetter):
        (GenerateEventListenerCallback):
        (GenerateOverloadedFunctionCallback):
        (GenerateFunctionCallback):
        (GenerateParametersCheck):
        (GenerateOverloadedConstructorCallback):
        (GenerateSingleConstructorCallback):
        (GenerateConstructorCallback):
        (GenerateEventConstructorCallback):
        (GenerateTypedArrayConstructorCallback):
        (GenerateNamedConstructorCallback):
        (GenerateImplementation):
        (GenerateFunctionCallString):

2012-11-14  Adam Barth  <abarth@webkit.org>

        [V8] We can shave one instruction off toV8Fast
        https://bugs.webkit.org/show_bug.cgi?id=102297

        Reviewed by Kentaro Hara.

        There's no reason to store info.Holder in a local variable. Calling
        Holder() is essentially free because it's inlined to an offset read.

        I doubt this patch moves the performance needle in any measurable way,
        but it makes the code slightly prettier.

        * bindings/scripts/CodeGeneratorV8.pm:
        (GenerateHeader):
        * bindings/scripts/test/V8/V8TestNode.h:
        (WebCore::toV8Fast):

2012-11-14  Kentaro Hara  <haraken@chromium.org>

        [V8] Get rid of a redundant branch in JSValueToNative()
        https://bugs.webkit.org/show_bug.cgi?id=102311

        Reviewed by Adam Barth.

        No tests. No change in behavior.

        * bindings/scripts/CodeGeneratorV8.pm:
        (JSValueToNative):
        (NativeToJSValue):

2012-11-14  Shinya Kawanaka  <shinyak@chromium.org>

        Changing pseudoClass (:link) should cause distribution
        https://bugs.webkit.org/show_bug.cgi?id=101698

        Reviewed by Hajime Morita.

        CSSSelector :link matches anchor element with href attribute. When href attribute of an anchor element is changed,
        we have to invalidate distribution.

        According to the HTML spec, :link matches a link element having href attribute, currently we have not implemented it yet.

        Tests: fast/dom/shadow/pseudoclass-update-link-anchor.html
               fast/dom/shadow/pseudoclass-update-link-area.html

        * html/HTMLAnchorElement.cpp:
        (WebCore::HTMLAnchorElement::parseAttribute):

2012-11-14  Kentaro Hara  <haraken@chromium.org>

        Remove unused functions from CodeGenerator.pm
        https://bugs.webkit.org/show_bug.cgi?id=102316

        Reviewed by Adam Barth.

        No tests. No change in behavior.

        * bindings/scripts/CodeGenerator.pm:
        (GenerateCompileTimeCheckForEnumsIfNeeded):

2012-11-14  Tiancheng Jiang  <tijiang@rim.com>

        [BlackBerry] Update BB10 form theme.
        https://bugs.webkit.org/show_bug.cgi?id=100760

        Reviewed by Rob Buis.

        RIM PR 225755
        Internally Reviewed by Eli Fidler.
        Update checkbox, radio and menulist button style. Adjust border width
        and line height.

        * platform/blackberry/RenderThemeBlackBerry.cpp:
        (WebCore::RenderThemeBlackBerry::adjustMenuListButtonStyle):
        * platform/blackberry/RenderThemeBlackBerry.h:
        (RenderThemeBlackBerry):

2012-11-14  Erik Arvidsson  <arv@chromium.org>

        Update DOMException name: InvalidModificationError
        https://bugs.webkit.org/show_bug.cgi?id=102281

        Reviewed by Kentaro Hara.

        Patch 13 of 25 to update DOMException name to match the spec and Firefox.

        DOMExcecption INVALID_MODIFICATION_ERR is not used in our code.

        * dom/DOMCoreException.cpp:

2012-11-14  Adam Barth  <abarth@webkit.org>

        document variable in Document::axObjectCache is actually the topDocument
        https://bugs.webkit.org/show_bug.cgi?id=101966

        Reviewed by Chris Fleizach.

        Name change requested by Darin Adler.

        * dom/Document.cpp:
        (WebCore::Document::axObjectCache):

2012-11-14  Joseph Pecoraro  <pecoraro@apple.com>

        [CF]: XMLHttpRequest "timeout" events firing as "error" events
        https://bugs.webkit.org/show_bug.cgi?id=102271

        Reviewed by David Kilzer.

        Initialize the tiemout flag if the error results from a timeout
        in the USE(CFNETWORK) cases.

        No new tests. This is covered by http/tests/xmlhttprequest/timeout
        tests on ports that USE(CFNETWORK).

        * platform/network/cf/ResourceErrorCF.cpp:
        (WebCore::ResourceError::ResourceError):
        * platform/network/mac/ResourceErrorMac.mm:
        (WebCore::ResourceError::ResourceError):

2012-11-14  Nico Weber  <thakis@chromium.org>

        [chromium/mac] Fix drawing of buttons, checkboxes, radio boxes, and steppers when the page is scaled
        https://bugs.webkit.org/show_bug.cgi?id=102282

        Reviewed by James Robinson.

        Chromium uses skia, and skia state is synced with CG context state at
        LocalCurrentGraphicsContext construction time. So delay that
        construction after context transforms have happened.
        (This regressed in http://trac.webkit.org/changeset/125830)

        Covered by the new pixel test fast/forms/zoomed-controls.html. I
        couldn't find an existing test for this.

        * platform/mac/ThemeMac.mm:
        (WebCore::paintCheckbox):
        (WebCore::paintRadio):
        (WebCore::paintButton):

2012-11-14  Mark Lam  <mark.lam@apple.com>

        Change JSEventListener::m_jsFunction to be a weak ref.
        https://bugs.webkit.org/show_bug.cgi?id=101989.

        Reviewed by Geoffrey Garen.

        No new tests.

        * ForwardingHeaders/heap/SlotVisitor.h: Added.
        * bindings/js/JSDOMBinding.h: Added #include <heap/SlotVisitor.h>
        * bindings/js/JSEventListener.cpp:
        (WebCore::JSEventListener::JSEventListener):
        (WebCore::JSEventListener::visitJSFunction):
        (WebCore::JSEventListener::operator==):
         - Removed the m_wrapper checks in operator==() because they are not
           needed. There is no longer any threat of m_jsFunction pointing to
           recycled memory. The use of weak refs will ensure that m_jsFunction
           is either still holding on to its old memory exclusively, or is 0'ed
           out when the GC collects it.
        * bindings/js/JSEventListener.h:
        (JSEventListener):
        (WebCore::JSEventListener::jsFunction):

2012-11-14  Dan Carney  <dcarney@google.com>

        [V8] Rename dispatchWrap
        https://bugs.webkit.org/show_bug.cgi?id=102240

        Reviewed by Adam Barth.

        Mostly a rename:
        dispatchWrap->wrap
        wrapSlow->createWrapper
        dispatchWrapCustom->wrap

        No new tests. No change in functionality.

        * bindings/scripts/CodeGeneratorV8.pm:
        (GenerateHeader):
        (GenerateNormalAttrGetter):
        (GenerateImplementation):
        (GenerateToV8Converters):
        * bindings/scripts/IDLAttributes.txt:
        * bindings/scripts/test/V8/V8Float64Array.cpp:
        (WebCore::wrap):
        (WebCore::V8Float64Array::createWrapper):
        * bindings/scripts/test/V8/V8Float64Array.h:
        (V8Float64Array):
        (WebCore):
        (WebCore::toV8Object):
        (WebCore::toV8):
        * bindings/scripts/test/V8/V8TestActiveDOMObject.cpp:
        (WebCore::V8TestActiveDOMObject::createWrapper):
        * bindings/scripts/test/V8/V8TestActiveDOMObject.h:
        (V8TestActiveDOMObject):
        (WebCore::wrap):
        (WebCore::toV8Object):
        (WebCore::toV8):
        * bindings/scripts/test/V8/V8TestCustomNamedGetter.cpp:
        (WebCore::V8TestCustomNamedGetter::createWrapper):
        * bindings/scripts/test/V8/V8TestCustomNamedGetter.h:
        (V8TestCustomNamedGetter):
        (WebCore::wrap):
        (WebCore::toV8Object):
        (WebCore::toV8):
        * bindings/scripts/test/V8/V8TestEventConstructor.cpp:
        (WebCore::V8TestEventConstructor::createWrapper):
        * bindings/scripts/test/V8/V8TestEventConstructor.h:
        (V8TestEventConstructor):
        (WebCore::wrap):
        (WebCore::toV8Object):
        (WebCore::toV8):
        * bindings/scripts/test/V8/V8TestEventTarget.cpp:
        (WebCore::V8TestEventTarget::createWrapper):
        * bindings/scripts/test/V8/V8TestEventTarget.h:
        (V8TestEventTarget):
        (WebCore::wrap):
        (WebCore::toV8Object):
        (WebCore::toV8):
        * bindings/scripts/test/V8/V8TestException.cpp:
        (WebCore::V8TestException::createWrapper):
        * bindings/scripts/test/V8/V8TestException.h:
        (V8TestException):
        (WebCore::wrap):
        (WebCore::toV8Object):
        (WebCore::toV8):
        * bindings/scripts/test/V8/V8TestInterface.cpp:
        (WebCore::V8TestInterface::createWrapper):
        * bindings/scripts/test/V8/V8TestInterface.h:
        (V8TestInterface):
        (WebCore::wrap):
        (WebCore::toV8Object):
        (WebCore::toV8):
        * bindings/scripts/test/V8/V8TestMediaQueryListListener.cpp:
        (WebCore::V8TestMediaQueryListListener::createWrapper):
        * bindings/scripts/test/V8/V8TestMediaQueryListListener.h:
        (V8TestMediaQueryListListener):
        (WebCore::wrap):
        (WebCore::toV8Object):
        (WebCore::toV8):
        * bindings/scripts/test/V8/V8TestNamedConstructor.cpp:
        (WebCore::V8TestNamedConstructor::createWrapper):
        * bindings/scripts/test/V8/V8TestNamedConstructor.h:
        (V8TestNamedConstructor):
        (WebCore::wrap):
        (WebCore::toV8Object):
        (WebCore::toV8):
        * bindings/scripts/test/V8/V8TestNode.cpp:
        (WebCore::V8TestNode::createWrapper):
        * bindings/scripts/test/V8/V8TestNode.h:
        (V8TestNode):
        (WebCore::wrap):
        (WebCore::toV8Object):
        (WebCore::toV8):
        (WebCore::toV8Fast):
        * bindings/scripts/test/V8/V8TestObj.cpp:
        (WebCore::V8TestObj::createWrapper):
        * bindings/scripts/test/V8/V8TestObj.h:
        (V8TestObj):
        (WebCore::wrap):
        (WebCore::toV8Object):
        (WebCore::toV8):
        * bindings/scripts/test/V8/V8TestOverloadedConstructors.cpp:
        (WebCore::V8TestOverloadedConstructors::createWrapper):
        * bindings/scripts/test/V8/V8TestOverloadedConstructors.h:
        (V8TestOverloadedConstructors):
        (WebCore::wrap):
        (WebCore::toV8Object):
        (WebCore::toV8):
        * bindings/scripts/test/V8/V8TestSerializedScriptValueInterface.cpp:
        (WebCore::V8TestSerializedScriptValueInterface::createWrapper):
        * bindings/scripts/test/V8/V8TestSerializedScriptValueInterface.h:
        (V8TestSerializedScriptValueInterface):
        (WebCore::wrap):
        (WebCore::toV8Object):
        (WebCore::toV8):
        * bindings/v8/custom/V8BlobCustom.cpp:
        (WebCore::wrap):
        * bindings/v8/custom/V8CSSRuleCustom.cpp:
        (WebCore::wrap):
        * bindings/v8/custom/V8CSSValueCustom.cpp:
        (WebCore::wrap):
        * bindings/v8/custom/V8CanvasRenderingContextCustom.cpp:
        (WebCore::wrap):
        * bindings/v8/custom/V8DataViewCustom.cpp:
        (WebCore::wrap):
        * bindings/v8/custom/V8DocumentCustom.cpp:
        (WebCore::wrap):
        * bindings/v8/custom/V8ElementCustom.cpp:
        (WebCore):
        (WebCore::wrap):
        * bindings/v8/custom/V8EntryCustom.cpp:
        (WebCore::wrap):
        * bindings/v8/custom/V8EntrySyncCustom.cpp:
        (WebCore::wrap):
        * bindings/v8/custom/V8EventCustom.cpp:
        (WebCore):
        (WebCore::wrap):
        * bindings/v8/custom/V8HTMLCollectionCustom.cpp:
        (WebCore::wrap):
        * bindings/v8/custom/V8HTMLDocumentCustom.cpp:
        (WebCore::wrap):
        * bindings/v8/custom/V8HTMLElementCustom.cpp:
        (WebCore::wrap):
        * bindings/v8/custom/V8ImageDataCustom.cpp:
        (WebCore::wrap):
        * bindings/v8/custom/V8NodeCustom.cpp:
        (WebCore::wrap):
        * bindings/v8/custom/V8PerformanceEntryCustom.cpp:
        (WebCore::wrap):
        * bindings/v8/custom/V8SVGDocumentCustom.cpp:
        (WebCore::wrap):
        * bindings/v8/custom/V8SVGElementCustom.cpp:
        (WebCore::wrap):
        * bindings/v8/custom/V8SVGPathSegCustom.cpp:
        (WebCore::wrap):
        * bindings/v8/custom/V8StyleSheetCustom.cpp:
        (WebCore::wrap):
        * dom/make_names.pl:
        (printWrapperFunctions):
        (printWrapperFactoryCppFile):

2012-11-14  Ryuan Choi  <ryuan.choi@gmail.com>

        [EFL] Refactor theme to choose whether to support foreground color of selection
        https://bugs.webkit.org/show_bug.cgi?id=102037

        Reviewed by Gyuyoung Kim.

        RenderThemeEfl can change foreground color of selection using theme file.
        But it can not disable supports of foreground color to keep the text color
        which is selected.

        This patch refactors color classes of theme file from active/inactive classes
        to foreground/background classes so that RenderThemeEfl checks whether
        theme file supports foreground color class.

        * platform/efl/RenderThemeEfl.cpp:
        (WebCore::fillColorsFromEdjeClass):
        (WebCore::RenderThemeEfl::setColorFromThemeClass):
        (WebCore::RenderThemeEfl::loadTheme):
        (WebCore::RenderThemeEfl::RenderThemeEfl):
        (WebCore::RenderThemeEfl::supportsSelectionForegroundColors):
        (WebCore):
        * platform/efl/RenderThemeEfl.h:
        (RenderThemeEfl):

2012-11-14  Tony Chang  <tony@chromium.org>

        Convert m_selectorVector back to a stack allocated m_reusableSelectorVector
        https://bugs.webkit.org/show_bug.cgi?id=102295

        Reviewed by Andreas Kling.

        Revert r125252 because we're not going to go forward with implementing CSS hierarchies at this time.

        No new tests because there should be no change in behavior.

        * css/CSSGrammar.y.in:
        * css/CSSParser.cpp:
        (WebCore::CSSParser::CSSParser):
        (WebCore::CSSParser::parseValue):
        (WebCore::CSSParser::parseColor):
        (WebCore::CSSParser::parseDeclaration):
        (WebCore):
        (WebCore::filterProperties):
        (WebCore::CSSParser::createStylePropertySet):
        (WebCore::CSSParser::addProperty):
        (WebCore::CSSParser::rollbackLastProperties):
        (WebCore::CSSParser::clearProperties):
        (WebCore::CSSParser::parse4Values):
        (WebCore::CSSParser::parseFlowThread):
        (WebCore::CSSParser::addTextDecorationProperty):
        (WebCore::CSSParser::createFloatingSelectorVector):
        (WebCore::CSSParser::sinkFloatingSelectorVector):
        (WebCore::CSSParser::createStyleRule):
        (WebCore::CSSParser::createFontFaceRule):
        (WebCore::CSSParser::createPageRule):
        (WebCore::CSSParser::setReusableRegionSelectorVector):
        (WebCore::CSSParser::startDeclarationsForMarginBox):
        (WebCore::CSSParser::endDeclarationsForMarginBox):
        (WebCore::CSSParser::deleteFontFaceOnlyValues):
        * css/CSSParser.h:
        (WebCore::CSSParser::hasProperties):
        (WebCore::CSSParser::reusableSelectorVector):
        (CSSParser):
        (WebCore::CSSParser::reusableRegionSelectorVector):
        * css/CSSParserValues.cpp:
        (WebCore::CSSParserSelector::adoptSelectorVector):
        * css/CSSParserValues.h:
        (CSSParserSelector):
        * css/CSSSelectorList.cpp:
        (WebCore::CSSSelectorList::adoptSelectorVector):
        * css/CSSSelectorList.h:
        (CSSSelectorList):
        * css/SVGCSSParser.cpp:
        (WebCore::CSSParser::parseSVGValue):
        * css/StyleRule.cpp:
        (WebCore::StyleRuleRegion::StyleRuleRegion):
        * css/StyleRule.h:
        (WebCore::StyleRule::parserAdoptSelectorVector):
        (WebCore::StyleRulePage::parserAdoptSelectorVector):
        (WebCore::StyleRuleRegion::create):
        (StyleRuleRegion):

2012-11-14  Alec Flett  <alecflett@chromium.org>

        Add tests for explicit serialization values
        https://bugs.webkit.org/show_bug.cgi?id=96818

        Reviewed by Adam Barth.

        Expose direct access to the serialization/deserialization mechanisms
        of SerializedScriptValue to DumpRenderTree.

        * testing/Internals.cpp:
        (WebCore::Internals::serializeObject):
        (WebCore):
        (WebCore::Internals::deserializeBuffer):
        * testing/Internals.h:
        (WebCore):
        * testing/Internals.idl:

2012-11-14  Michael Pruett  <michael@68k.org>

        IndexedDB: Add clear() method to JSC ScriptValue
        https://bugs.webkit.org/show_bug.cgi?id=102288

        Reviewed by Kentaro Hara.

        IndexedDB uses the ScriptValue::clear() method, which existed
        previously only in the V8 implementation of ScriptValue. This
        change is necessary to implement IndexedDB for JSC.

        Tests: storage/indexeddb/*

        * bindings/js/ScriptValue.h:
        (WebCore::ScriptValue::clear):
        (ScriptValue):

2012-11-14  Joshua Bell  <jsbell@chromium.org>

        IndexedDB: Indexing tests are flaky-crashing
        https://bugs.webkit.org/show_bug.cgi?id=102283

        Reviewed by Tony Chang.

        Don't commit the transaction if there are outstanding pre-emptive events
        from indexing operations.

        Speculative fix for the flakiness.

        * Modules/indexeddb/IDBTransactionBackendImpl.cpp:
        (WebCore::IDBTransactionBackendImpl::taskEventTimerFired):

2012-11-14  Tony Chang  <tony@chromium.org>

        Crash in flexbox when removing absolutely positioned children
        https://bugs.webkit.org/show_bug.cgi?id=100465

        Reviewed by Ojan Vafai.

        We use m_numberOfChildrenOnFirstLine when computing baseline alignment.
        This value gets set during flexbox layout. When we remove an absolutely
        positioned child, we don't relayout and this value would get stale.

        Change m_numberOfChildrenOnFirstLine to m_numberOfInFlowChildrenOnFirstLine
        so the value doesn't get stale when we remove absolutely positioned children.
        Also change the loop in firstLineBoxBaseline to bail if we run off the end of
        the iterator.

        Test: css3/flexbox/crash-removing-out-of-flow-child.html

        * rendering/RenderFlexibleBox.cpp:
        (WebCore::RenderFlexibleBox::RenderFlexibleBox):
        (WebCore::RenderFlexibleBox::firstLineBoxBaseline):
        (WebCore::RenderFlexibleBox::layoutBlock):
        (WebCore::RenderFlexibleBox::repositionLogicalHeightDependentFlexItems):
        (WebCore::RenderFlexibleBox::layoutAndPlaceChildren):
        * rendering/RenderFlexibleBox.h:

2012-11-14  Joshua Bell  <jsbell@chromium.org>

        IndexedDB: Remove magic numbers in record comparator, handle missing case
        https://bugs.webkit.org/show_bug.cgi?id=102255

        Reviewed by Tony Chang.

        For some ranges of metadata entries, a simple type byte comparison is sufficient
        for the backing store comparator. In two places those ranges used magic numbers,
        one of which was incorrect - which could lead to failed reads/writes.

        Test: webkit_unit_tests --gtest_filter='IDBLevelDBCodingTest.ComparisonTest'

        * Modules/indexeddb/IDBLevelDBCoding.cpp:
        (IDBLevelDBCoding):
        (WebCore::IDBLevelDBCoding::compare):
        * Modules/indexeddb/IDBLevelDBCoding.h:

2012-11-14  Dirk Schulze  <krit@webkit.org>

        Cleanup BasicShape blending check
        https://bugs.webkit.org/show_bug.cgi?id=102289

        Reviewed by Daniel Bates.

        CSSPropertyAnimation had the same code for varifying that two BasicShape objects can be blended 
        twice. Refactor the code and add a canBlend method in BasicShape that combines both checks. This
        is a preparation for follow-up patches.

        Pure refactoring without behavior change, no new tests.

        * page/animation/CSSPropertyAnimation.cpp:
        (WebCore::blendFunc): Call new canBlend method for blending verification.
        * rendering/style/BasicShapes.cpp:
        (WebCore::BasicShape::canBlend): Check if two BasicShape objects can be blended.
        (WebCore):
        * rendering/style/BasicShapes.h:

2012-11-14  Dirk Schulze  <krit@webkit.org>

        [CSS Exclusions] Basic shapes on 'shape-inside' should be animatable
        https://bugs.webkit.org/show_bug.cgi?id=102123

        Reviewed by Antti Koivisto.

        The '-webkit-shape-inside' propery takes a BasicShape as input like
        '-webkit-clip-path'. Follow up on http://trac.webkit.org/changeset/134352 and
        make '-webkit-shape-inside' animatable as well.

        Test: fast/exclusions/shape-inside/shape-inside-animation.html

        * page/animation/CSSPropertyAnimation.cpp:
        (WebCore::blendFunc): Blend fuction for exclusion shapes. The property takes another
            input then '-webkit-clip-path'.
        (WebCore):
        (PropertyWrapperBasicShape): Add wrapper for BasicShape object. Can be reused by
            '-webkit-shape-ourside' as well.
        (WebCore::PropertyWrapperBasicShape::PropertyWrapperBasicShape):
        (WebCore::CSSPropertyAnimation::ensurePropertyMap):

2012-11-14  Helder Correia  <helder.correia@nokia.com>

        [TexMap][Cairo] Accelerated compositing debug visuals
        https://bugs.webkit.org/show_bug.cgi?id=101883

        Reviewed by Kenneth Rohde Christiansen.

        No new tests, just introducing a debug feature.

        Add a Cairo implementation to complement the patch from bug 90116
        (http://trac.webkit.org/changeset/122275).

        For this feature to be enabled, the environment variable
        WEBKIT_SHOW_COMPOSITING_DEBUG_VISUALS must be set to 1. Once enabled,
        both repaint counters and tile borders will be painted.

        A Cairo-specific drawRepaintCounter() implementation was added to
        TextureMapperGL. A cairo_surface_t is used as scratch buffer to paint
        the counters. It is then uploaded to a BitmapTexture acquired
        from the pool and finally draw by TextureMapper. The actual compositing
        happens inside LayerBackingStore::paintToTextureMapper(). Each
        LayerBackingStoreTile has a repaint counter which gets incremented in
        LayerBackingStore::updateTile().

        * platform/graphics/texmap/TextureMapperGL.cpp:
        (WebCore::TextureMapperGL::drawRepaintCounter):

2012-11-14  Michael Pruett  <michael@68k.org>

        IndexedDB: Add JSNoStaticTables to IndexedDB interfaces
        https://bugs.webkit.org/show_bug.cgi?id=102268

        Reviewed by Geoffrey Garen.

        Add JSNoStaticTables attribute to IndexedDB interface
        definitions. This attribute must be specified in interfaces
        which can be accessed from workers.

        Tests: storage/indexeddb/*

        * Modules/indexeddb/IDBAny.idl:
        * Modules/indexeddb/IDBCursor.idl:
        * Modules/indexeddb/IDBCursorWithValue.idl:
        * Modules/indexeddb/IDBDatabase.idl:
        * Modules/indexeddb/IDBDatabaseException.idl:
        * Modules/indexeddb/IDBFactory.idl:
        * Modules/indexeddb/IDBIndex.idl:
        * Modules/indexeddb/IDBKey.idl:
        * Modules/indexeddb/IDBKeyRange.idl:
        * Modules/indexeddb/IDBObjectStore.idl:
        * Modules/indexeddb/IDBOpenDBRequest.idl:
        * Modules/indexeddb/IDBRequest.idl:
        * Modules/indexeddb/IDBTransaction.idl:
        * Modules/indexeddb/IDBUpgradeNeededEvent.idl:
        * Modules/indexeddb/IDBVersionChangeEvent.idl:
        * Modules/indexeddb/IDBVersionChangeRequest.idl:
        * dom/DOMStringList.idl:

2012-11-14  Michael Pruett  <michael@68k.org>

        IndexedDB: Replace int64 with int64_t
        https://bugs.webkit.org/show_bug.cgi?id=102270

        Reviewed by Tony Chang.

        Cleaning up coding inconsistencies, no change in behavior.

        Tests: storage/indexeddb/*

        * Modules/indexeddb/IDBDatabase.cpp:
        (WebCore::IDBDatabase::deleteObjectStore):
        * Modules/indexeddb/IDBObjectStoreBackendImpl.cpp:
        (WebCore::IDBObjectStoreBackendImpl::putInternal):

2012-11-14  Viatcheslav Ostapenko  <v.ostapenko@samsung.com>

        [EFL][WK2] White flicker when scrolling big pages with dark background on slower hardware.
        https://bugs.webkit.org/show_bug.cgi?id=102000

        Reviewed by Noam Rosenthal.

        Add helper functions to clear viewport before painting. Those functions
        used by EFL Webkit2 port to set view background to match page background
        in order to reduce visibility of flicker during scrolling/scaling/repainting
        where page tiles are not ready.

        * platform/graphics/texmap/TextureMapper.h:
        * platform/graphics/texmap/TextureMapperGL.cpp:
        (WebCore::TextureMapperGL::drawSolidColor):
        (WebCore):
        * platform/graphics/texmap/TextureMapperGL.h:
        * platform/graphics/texmap/TextureMapperImageBuffer.cpp:
        (WebCore::TextureMapperImageBuffer::drawSolidColor):
        (WebCore):
        * platform/graphics/texmap/TextureMapperImageBuffer.h:

2012-11-14  Mark Lam  <mark.lam@apple.com>

        Fixed regressions due to adding JSEventListener::m_wrapper null checks.
        https://bugs.webkit.org/show_bug.cgi?id=102183.

        Reviewed by Geoffrey Garen.

        Fixed JSEventListener::operator==() to work within the contract that
        when m_wrapper is 0, m_jsFunction is also expected to be 0. Also fixed
        some typos in comments.

        No new tests.

        * bindings/js/JSEventListener.cpp:
        (WebCore::JSEventListener::visitJSFunction):
        (WebCore::JSEventListener::operator==):
        * bindings/js/JSEventListener.h:
        (WebCore::JSEventListener::jsFunction):

2012-11-14  Nate Chapin  <japhet@chromium.org>

        Fix chromium asserts from r134649.

        Rubber-stamped by Adam Barth.

        MainResourceLoader was calling releaseResources() twice when cancelled
        within MainResourceLoader::load(), so check reachedTerminalState() before
        calling releaseResources() there.

        * loader/MainResourceLoader.cpp:
        (WebCore::MainResourceLoader::load):

2012-11-14  Andreas Kling  <kling@webkit.org>

        Only resolve presentation attribute style once per shared ElementAttributeData.
        <http://webkit.org/b/100990>

        Reviewed by Antti Koivisto.

        Track the "presentation attribute style dirty" state on ElementAttributeData instead of in a Node flag.
        This allows us to avoid duplicate work for ElementAttributeData that are shared between multiple elements,
        since the state is no longer per-Element.

        I've left the presentation attribute cache in there for now, since it still covers the case where
        two elements have the same presentation attributes but different non-presentation attributes.
        It's likely that we're not gaining much from it anymore, but that's a topic for another patch.

        (WebCore::StyledElement::rebuildPresentationAttributeStyle):
        * dom/StyledElement.h:
        (WebCore::StyledElement::presentationAttributeStyle):
        (WebCore::ElementAttributeData::ElementAttributeData):
        * dom/ElementAttributeData.h:
        (WebCore::ElementAttributeData::ElementAttributeData):
        (ElementAttributeData):
        * dom/Node.h:

            Move presentation attribute style dirty flag from Node to ElementAttributeData.

        * dom/ElementAttributeData.cpp:
        (SameSizeAsElementAttributeData):

            Add a compile-time object size assertion for ElementAttributeData.

        * dom/StyledElement.cpp:
        (WebCore::StyledElement::attributeChanged):

            Don't mark the presentation attribute style dirty if the element is using an immutable (implies
            shared) ElementAttributeData and another element has already generated the StylePropertySet.
            The element itself is still marked for style recalc like before, this just avoids the process
            of converting the attributes to CSS properties.

2012-11-14  Scott Violet  <sky@chromium.org>

        [Chromium] Refactor theme font lookup into a factory
        https://bugs.webkit.org/show_bug.cgi?id=101949

        Reviewed by Tony Chang.

        This will ultimately allow us to use what is currently in RenderThemeChromiumLinux on windows.

        No new tests. Refactoring only.

        * WebCore.gyp/WebCore.gyp:
        * WebCore.gypi:
        * rendering/RenderThemeChromiumFontProvider.cpp: Added.
        (WebCore):
        (WebCore::RenderThemeChromiumFontProvider::defaultGUIFont): Moved into RenderThemeFontProvider.
        * rendering/RenderThemeChromiumFontProvider.h: Added.
        (WTF):
        (WebCore):
        (RenderThemeChromiumFontProvider): This is the font related methods.
        * rendering/RenderThemeChromiumFontProviderLinux.cpp: Added.
        (WebCore):
        (WebCore::RenderThemeChromiumFontProvider::setDefaultFontSize): What was in RenderThemeChromiumSkia::setDefaultFontSize.
        (WebCore::RenderThemeChromiumFontProvider::systemFont): What was in RenderThemeChromiumSkia::systemFont.
        * rendering/RenderThemeChromiumFontProviderWin.cpp: Added.
        (WebCore):
        (WebCore::pointsToPixels): Moved from RenderThemeChromiumWin.
        (WebCore::getNonClientMetrics): Moved from RenderThemeChromiumWin.
        (WebCore::systemFontSize): Moved from RenderThemeChromiumWin.
        (WebCore::RenderThemeChromiumFontProvider::systemFont): Moved from RenderThemeChromiumWin.
        (WebCore::RenderThemeChromiumFontProvider::setDefaultFontSize): Moved from RenderThemeChromiumWin.
        * rendering/RenderThemeChromiumSkia.cpp:
        (WebCore::RenderThemeChromiumSkia::RenderThemeChromiumSkia): Moved into RenderThemeFontProvider.
        (WebCore::RenderThemeChromiumSkia::systemFont): Calls to RenderThemeChromiumFontProvider.
        (WebCore::RenderThemeChromiumSkia::setDefaultFontSize): Calls to RenderThemeChromiumFontProvider.
        * rendering/RenderThemeChromiumSkia.h:
        (RenderThemeChromiumSkia): Moves defaultFontSize into RenderThemeChromiumFontProvider.
        * rendering/RenderThemeChromiumWin.cpp: Moves font code into RenderThemeFontProviderWin.
        (WebCore):
        * rendering/RenderThemeChromiumWin.h: Removed overriden methods now handled by RenderThemeChromiumSkia.
        (RenderThemeChromiumWin):

2012-11-14  Erik Arvidsson  <arv@chromium.org>

        Update DOMException name: InUseAttributeError
        https://bugs.webkit.org/show_bug.cgi?id=102141

        Reviewed by Ojan Vafai.

        Patch 10 of 25 to update DOMException name to match the spec and Firefox.

        The name for this is not in the spec but the case was selected to match
        Firefox. http://mxr.mozilla.org/mozilla-central/source/dom/base/domerr.msg#18

        INUSE_ATTRIBUTE_ERR is historical and not used in any spec or any of our tests.

        * dom/DOMCoreException.cpp:
        * dom/ExceptionCode.h:

2012-11-14  Lynn Neir  <lynn.neir@skype.net>

        [WinCairo] Incorrect line-height for styled menulist (select tag)
        in windows theme.
        https://bugs.webkit.org/show_bug.cgi?id=79435

        Reviewed by Brent Fulgham

        Applied same fix as in RenderThemeSafari::adjustMenuListButtonStyle
        to Windows theme to fix issue.

        Tests: fast/forms/menulist-restrict-line-height.html
               fast/forms/control-restrict-line-height.html
               fast/forms/basic-selects.html

        * rendering/RenderThemeWin.cpp:
        (WebCore::RenderThemeWin::adjustMenuListButtonStyle): Set line
        height to the correct initial height.

2012-11-14  Erik Arvidsson  <arv@chromium.org>

        Update DOMException name: WrongDocumentError
        https://bugs.webkit.org/show_bug.cgi?id=102096

        Reviewed by Ojan Vafai.

        Patch 4 of 25 to update DOMException name to match the spec and Firefox.

        Updated existing tests.

        * dom/DOMCoreException.cpp:

2012-11-14  Nate Chapin  <japhet@chromium.org>

        Move empty loading to DocumentLoader, simplify FrameLoader::init()
        https://bugs.webkit.org/show_bug.cgi?id=101512

        Reviewed by Adam Barth.

        No new tests, though several outputs changed because we no longer send resource
            load callbacks for empty loads.

        * loader/DocumentLoader.cpp:
        (WebCore::DocumentLoader::startLoadingMainResource): Handle empty main resource
            loads directly here.
        * loader/DocumentLoader.h:
        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::FrameLoader): Initialize some variables whose values
            were previously being reset in init(). Given that the FrameLoader is in
            an inconsistent state before init() is called anyway, there doesn't seem
            to be a disadvantage to just initializing them to their post-init() values.
        (WebCore::FrameLoader::init): Just call startLoadingMainResource(), instead of
            doing a bunch of direct calls to functions FrameLoader shouldn't know about.
        * loader/FrameLoaderStateMachine.cpp:
        * loader/FrameLoaderStateMachine.h:
        * loader/MainResourceLoader.cpp: Throughout, remove the concept of an empty load.
        (WebCore::MainResourceLoader::loadNow): This only returned true when an empty
            load got deferred, which won't happen now. Return void and always treat
            as returning false.
        * loader/MainResourceLoader.h:

2012-11-14  Erik Arvidsson  <arv@chromium.org>

        Update DOMException name: InvalidStateError
        https://bugs.webkit.org/show_bug.cgi?id=102241

        Reviewed by Ojan Vafai.

        Patch 11 of 25 to update DOMException name to match the spec and Firefox.

        Updated existing tests.

        * dom/DOMCoreException.cpp:

2012-11-14  Joshua Bell  <jsbell@chromium.org>

        Rename NATIVE_TYPE_ERR to TypeError
        https://bugs.webkit.org/show_bug.cgi?id=102114

        Reviewed by Kentaro Hara.

        Defines names (mostly) matching WebIDL exception types for use by dom (etc) code.
        V8 binding code had colliding enum members, which required prefixing.

        No new tests - just internal renames.

        * Modules/indexeddb/IDBCursor.cpp: s/NATIVE_TYPE_ERR/TypeError/g
        (WebCore::IDBCursor::advance):
        (WebCore::IDBCursor::stringToDirection):
        (WebCore::IDBCursor::directionToString):
        * Modules/indexeddb/IDBDatabase.cpp: Ditto.
        (WebCore::IDBDatabase::setVersion):
        * Modules/indexeddb/IDBFactory.cpp: Ditto.
        (WebCore::IDBFactory::open):
        (WebCore::IDBFactory::openInternal):
        (WebCore::IDBFactory::deleteDatabase):
        * Modules/indexeddb/IDBObjectStore.cpp: Ditto.
        (WebCore::IDBObjectStore::createIndex):
        * Modules/indexeddb/IDBTransaction.cpp: Ditto.
        (WebCore::IDBTransaction::stringToMode):
        (WebCore::IDBTransaction::modeToString):
        * bindings/js/JSDOMBinding.cpp: Ditto.
        (WebCore::setDOMException):
        * bindings/v8/DateExtension.cpp: Prefix ErrorType enum/members w/ V8/v8.
        (WebCore::DateExtension::OnSleepDetected):
        * bindings/v8/NPV8Object.cpp: Ditto.
        (_NPN_SetException):
        * bindings/v8/V8Binding.cpp: Ditto.
        (WebCore::throwError):
        (WebCore::handleMaxRecursionDepthExceeded):
        * bindings/v8/V8Binding.h: Ditto.
        (WebCore):
        * bindings/v8/V8NPObject.cpp: Ditto.
        (WebCore::npObjectInvokeImpl):
        (WebCore::npObjectGetProperty):
        (WebCore::npObjectSetProperty):
        (WebCore::npObjectPropertyEnumerator):
        * bindings/v8/V8ThrowException.cpp: Rename ALL the errors!
        (WebCore::V8ThrowException::setDOMException):
        (WebCore::V8ThrowException::throwError):
        (WebCore::V8ThrowException::throwTypeError):
        (WebCore::V8ThrowException::throwNotEnoughArgumentsError):
        * bindings/v8/V8ThrowException.h:
        (V8ThrowException):
        * bindings/v8/WorkerContextExecutionProxy.cpp: Prefixing (continued)
        (WebCore::WorkerContextExecutionProxy::evaluate):
        * bindings/v8/custom/V8ArrayBufferCustom.cpp: Ditto.
        (WebCore::V8ArrayBuffer::constructorCallback):
        * bindings/v8/custom/V8ArrayBufferViewCustom.h: Ditto.
        (WebCore::constructWebGLArrayWithArrayBufferArgument):
        (WebCore::constructWebGLArray):
        (WebCore::setWebGLArrayHelper):
        * bindings/v8/custom/V8AudioContextCustom.cpp: Ditto.
        (WebCore::V8AudioContext::constructorCallback):
        * bindings/v8/custom/V8BlobCustom.cpp: Ditto.
        (WebCore::V8Blob::constructorCallback):
        * bindings/v8/custom/V8ClipboardCustom.cpp: Ditto.
        (WebCore::V8Clipboard::clearDataCallback):
        (WebCore::V8Clipboard::setDragImageCallback):
        * bindings/v8/custom/V8DOMFormDataCustom.cpp: Ditto.
        (WebCore::V8DOMFormData::appendCallback):
        * bindings/v8/custom/V8SQLResultSetRowListCustom.cpp: Ditto.
        (WebCore::V8SQLResultSetRowList::itemCallback):
        * dom/ExceptionCode.h: Add WebIDL exception types.

2012-11-14  Tiancheng Jiang  <tijiang@rim.com>

        [BlackBerry] Style BB10 time input field font.
        https://bugs.webkit.org/show_bug.cgi?id=102260.

        Reviewed by Rob Buis.

        RIM PR 243355
        Adjust time input field font using BB10 system default font.

        * css/themeBlackBerry.css:
        (input[type="date"], input[type="datetime"], input[type="datetime-local"], input[type="time"], input[type="month"]):

2012-11-14  Li Yin  <li.yin@intel.com>

        createDelay should raise exception when the maxDelayTime parameter is incorrect.
        https://bugs.webkit.org/show_bug.cgi?id=102173

        Reviewed by Chris Rogers.

        Spec: https://dvcs.w3.org/hg/audio/raw-file/tip/webaudio/specification.html
        The specified value must be greater than zero and less than three minutes or a
        NOT_SUPPORTED_ERR exception will be thrown.

        Tests: webaudio/delaynode-maxdelaylimit.html

        * Modules/webaudio/AudioContext.cpp:
        (WebCore::AudioContext::createDelay):
        * Modules/webaudio/AudioContext.h:
        (AudioContext):
        * Modules/webaudio/AudioContext.idl: Add raising exception for createDelay.
        * Modules/webaudio/DelayNode.cpp:
        (WebCore):
        (WebCore::DelayNode::DelayNode):
        * Modules/webaudio/DelayNode.h:
        (WebCore::DelayNode::create):
        (DelayNode):

2012-11-14  Simon Fraser  <simon.fraser@apple.com>

        Don't pass a paintingRoot when painting from RenderLayerBacking
        https://bugs.webkit.org/show_bug.cgi?id=102256

        Reviewed by David Hyatt.

        The 'paintingRoot' parameter to the RenderLayer paint functions
        is used when painting just a subtree (e.g. when painting dragged
        selections). There is no need to pass it when a RenderLayerBacking
        paints its contents or overlay scrollbars.
        
        Passing it requires an expensive isDescendant() check, so passing
        null is more efficient.
        
        * rendering/RenderLayer.h:
        (WebCore::RenderLayer::LayerPaintingInfo::LayerPaintingInfo):
        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::paintIntoLayer):
        (WebCore::RenderLayerBacking::paintContents):
        * rendering/RenderLayerBacking.h:
        (RenderLayerBacking):

2012-11-14  Alec Flett  <alecflett@chromium.org>

        Add DOMRequestState to maintain world/ScriptExecutionContext state
        https://bugs.webkit.org/show_bug.cgi?id=102102

        Reviewed by Adam Barth.

        Introduce DOMRequestState, and convert IndexedDB over.

        No new tests, this is an abstraction layer for existing code.

        * Modules/indexeddb/IDBRequest.cpp:
        (WebCore::IDBRequest::IDBRequest):
        (WebCore::IDBRequest::onSuccess):
        (WebCore::IDBRequest::dispatchEvent):
        * Modules/indexeddb/IDBRequest.h:
        (IDBRequest):
        * WebCore.gypi:
        * bindings/v8/DOMRequestState.h: Added.
        (WebCore):
        (DOMRequestState):
        (WebCore::DOMRequestState::DOMRequestState):
        (Scope):
        (WebCore::DOMRequestState::Scope::Scope):
        (WebCore::DOMRequestState::scope):

2012-11-14  Justin Novosad  <junov@google.com>

        Boxes with rounded corners and thin borders are too slow to draw
        https://bugs.webkit.org/show_bug.cgi?id=101974

        Reviewed by Simon Fraser.

        With the current implementation RenderBox::
        determineBackgroundBleedAvoidance() uses the slow path
        BackgroundBleedUseTransparencyLayer for some very common use cases,
        notably for drawing rectangles with rounded corners that have thin
        borders. This is because the BackgroundBleedShrinkBackground
        strategy requires a border at least two pixels wide on all sides. This
        patch introduce drawing strategy BackgroundBleedBackgroundOverBorder.
        This approach consists in drawing the border first, with an inset inner
        edge (for anti-aliased compositing to work well).  This approach only
        works with opaque solid edges and opaque single-layer backgrounds.
        By using this approach rather than BackgroundBleedUseTransparencyLayer,
        we save two clipPath, one save and one saveLayer on the
        GraphicsContext. This patch gets good coverage from existing layout
        tests. One additional test was added to exercise mitring, thick edges
        and anti-aliasing edge cases under the new painting algorithm.

        Test: fast/borders/border-radius-wide-border-05.html

        * rendering/RenderBox.cpp:
        (WebCore::RenderBox::determineBackgroundBleedAvoidance):
        Added selection criteria for BackgroundOverBorder
        (WebCore::RenderBox::paintBoxDecorations):
        Added a preliminary paintBorder pass for BackgroundOverBorder
        (WebCore::RenderBox::paintBackground):
        Insetting the background to to innerBorder when bleedAvoidance is
        BackgroundOverBorder.  This why BackgroundOverBorder only works for
        Opaque solid edges.
        (WebCore):
        (WebCore::RenderBox::backgroundIsSingleOpaqueLayer):
        Utility method use by determineBackgroundBleedAvoidance to test the
        background's eligibility for BackgroundOverBorder bleed avoidance
        strategy.  The reason the background must be a single layer is to avoid
        color bleeding from layer compositing along anti-aliased edges
        * rendering/RenderBox.h:
        (RenderBox):
        * rendering/RenderBoxModelObject.cpp:
        (WebCore::RenderBoxModelObject::getBackgroundRoundedRect):
        (WebCore::RenderBoxModelObject::borderInnerRectAdjustedForBleedAvoidance):
        Added support for BackgroundOverBorder by applying a one pixel inset.
        (WebCore::RenderBoxModelObject::backgroundRoundedRectAdjustedForBleedAvoidance):
        Set the background rect to the inner border for BackgroundOverBorder
        (WebCore):
        (WebCore::RenderBoxModelObject::paintFillLayerExtended):
        Added support for BackgroundOverBorder by using 
        backgroundRoundedRectAdjustedForBleedAvoidance
        (WebCore::RenderBoxModelObject::paintBorderSides):
        Added support for BackgroundOverBorder by applying per-side inset
        adjustments.
        (WebCore::RenderBoxModelObject::paintTranslucentBorderSides):
        (WebCore::RenderBoxModelObject::paintBorder):
        Added support for BackgroundOverBorder by using an adjusted inner
        border, but not if sides are painted individually.
        * rendering/RenderBoxModelObject.h:
        (RenderBoxModelObject):

2012-11-14  Hideki Yoshida  <yoshida-hxa@necst.nec.co.jp>

        [WinCairo] Fix cairo_t* memory leak in GraphicsContext::platformInit
        https://bugs.webkit.org/show_bug.cgi?id=76219

        Reviewed by Brent Fulgham.

        This patch is to fix a memory leak problem which occurs
        in every rendering process on Wincairo port.
        By applying this patch, the memory allocated in cairo 
        library will be released by calling cairo_destroy.

        * platform/graphics/win/GraphicsContextCairoWin.cpp:
        (WebCore::GraphicsContext::platformInit):

2012-11-14  Sami Kyostila  <skyostil@chromium.org>

        Optimize painting of composited scrolling layers
        https://bugs.webkit.org/show_bug.cgi?id=96087

        Reviewed by Simon Fraser.

        Don't completely repaint accelerated scrolling layers when the scroll offset
        changes.

        Test: compositing/overflow/scrolling-without-painting.html

        * platform/graphics/GraphicsLayer.cpp:
        (WebCore::GraphicsLayer::setOffsetFromRenderer):
        * platform/graphics/GraphicsLayer.h:
        (GraphicsLayer):
        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::updateGraphicsLayerGeometry):

2012-11-14  Pavel Feldman  <pfeldman@chromium.org>

        Web Inspector: keep track of mutation observers and disconnect them upon upload
        https://bugs.webkit.org/show_bug.cgi?id=102239

        Reviewed by Vsevolod Vlasov.

        Otherwise we hit memory leaks.

        * inspector/front-end/DefaultTextEditor.js:
        (WebInspector.DefaultTextEditor.prototype.wasShown):
        (WebInspector.DefaultTextEditor.prototype.willHide):
        (WebInspector.TextEditorMainPanel.prototype._wasShown):
        (WebInspector.TextEditorMainPanel.prototype._willHide):
        (WebInspector.TextEditorMainPanel.prototype._attachMutationObserver):
        (WebInspector.TextEditorMainPanel.prototype._detachMutationObserver):
        * inspector/front-end/utilities.js:

2012-11-14  Sergio Villar Senin  <svillar@igalia.com>

        [Qt] Use a node image if there is no drag image set for Drag&Drop
        https://bugs.webkit.org/show_bug.cgi?id=102124

        Reviewed by Simon Hausmann.

        Use the nodeImage provided by the frame if there is no dragImage in
        the clipboard for the current drag&drop operation.

        * platform/qt/ClipboardQt.cpp:
        (WebCore::ClipboardQt::createDragImage):

2012-11-14  Max Vujovic  <mvujovic@adobe.com>

        Call to enclosingFilterLayer() in RenderObject::containerForRepaint() is expensive
        https://bugs.webkit.org/show_bug.cgi?id=101846

        Reviewed by Simon Fraser.

        If software-rendered CSS Filters have not been used in the document, avoid doing the second
        tree walk in RenderObject::containerForRepaint, which determines the RenderObject's
        enclosing filter layer.

        No new tests. We now avoid a filters related code path for a performance improvement when
        we're not using filters.

        * page/FrameView.cpp:
        (WebCore::FrameView::FrameView):
        * page/FrameView.h:
        (FrameView):
        (WebCore::FrameView::setHasSoftwareFilters):
        (WebCore::FrameView::hasSoftwareFilters):
        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::updateOrRemoveFilterEffectRenderer):
        * rendering/RenderObject.cpp:
        (WebCore::RenderObject::containerForRepaint):

2012-11-14  Erik Arvidsson  <arv@chromium.org>

        Update DOMException name: NotFoundError
        https://bugs.webkit.org/show_bug.cgi?id=102137

        Reviewed by Ojan Vafai.

        Patch 8 of 25 to update DOMException name to match the spec and Firefox.

        Updated existing tests.

        * dom/DOMCoreException.cpp:

2012-11-14  Otto Derek Cheung  <otcheung@rim.com>

        [BlackBerry] Updating BB Cookie database to use WAL
        https://bugs.webkit.org/show_bug.cgi?id=102237

        Reviewed by Rob Buis.

        The cookie database is accessed by one process only and should be updated to
        use the WAL journal mode for better I/O performance.

        PR 236553

        cookieCollection.db-wal is created after the conversion to WAL.
        Tested cookie persistence by logging on to random sites and restarting the browser and
        check if it automatically logs in.
        Also tested using Opera's cookie persistence test.

        * platform/blackberry/CookieDatabaseBackingStore/CookieDatabaseBackingStore.cpp:
        (WebCore::CookieDatabaseBackingStore::invokeOpen):

2012-11-14  Erik Arvidsson  <arv@chromium.org>

        Update DOMException name: IndexSizeError
        https://bugs.webkit.org/show_bug.cgi?id=102087

        Reviewed by Ojan Vafai.

        This is the first in a series of updates to DOMException name to match
        the spec and Firefox.

        Patch 1 of 25

        Updated existing tests.

        * dom/DOMCoreException.cpp:
        (WebCore):

2012-11-14  Gabor Rapcsanyi  <rgabor@webkit.org>

        Fix [-Wmissing-braces] warnings in graphics/cpu/arm/GraphicsContext3DNEON.h
        https://bugs.webkit.org/show_bug.cgi?id=102205

        Reviewed by Csaba Osztrogonác.

        Fixing some warnings in GraphicsContext3DNEON.h which have been caused by missing braces.

        * platform/graphics/cpu/arm/GraphicsContext3DNEON.h:
        (WebCore::ARM::unpackOneRowOfRGBA4444ToRGBA8NEON):
        (WebCore::ARM::unpackOneRowOfRGBA5551ToRGBA8NEON):
        (WebCore::ARM::unpackOneRowOfRGB565ToRGBA8NEON):

2012-11-14  Erik Arvidsson  <arv@chromium.org>

        Update DOMException name: NoDataAllowedError
        https://bugs.webkit.org/show_bug.cgi?id=102132

        Reviewed by Darin Adler.

        Patch 6 of 25 to update DOMException name to match the spec and Firefox.

        NO_DATA_ALLOWED_ERR is historical and not used in any spec or in our code.

        * dom/DOMCoreException.cpp:
        (WebCore):
        * dom/ExceptionCode.h:

2012-11-14  Pavel Feldman  <pfeldman@chromium.org>

        Web Inspector: "Reveal in Element Panel" doesn't work if Elements panel hasn't been opened
        https://bugs.webkit.org/show_bug.cgi?id=102219

        Reviewed by Alexander Pavlov.

        Force elements module load upon context menu invocation.

        * inspector/front-end/ElementsTreeOutline.js:
        (WebInspector.ElementsTreeOutline.prototype._contextMenuEventFired.focusElement):
        (WebInspector.ElementsTreeOutline.prototype._contextMenuEventFired):

2012-11-14  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r134523.
        http://trac.webkit.org/changeset/134523
        https://bugs.webkit.org/show_bug.cgi?id=102218

        brake chrome windows build, as it references a non existing
        header js/DOMRequestState.h (Requested by jochen__ on
        #webkit).

        * Modules/indexeddb/IDBCursor.cpp:
        (WebCore::IDBCursor::setValueReady):
        * Modules/indexeddb/IDBCursor.h:
        (IDBCursor):
        * Modules/indexeddb/IDBRequest.cpp:
        (WebCore::IDBRequest::IDBRequest):
        (WebCore::IDBRequest::onSuccess):
        (WebCore::IDBRequest::stop):
        (WebCore::IDBRequest::dispatchEvent):
        * Modules/indexeddb/IDBRequest.h:
        (IDBRequest):
        * WebCore.gypi:
        * bindings/v8/DOMRequestState.h: Removed.
        * bindings/v8/IDBBindingUtilities.cpp:
        (WebCore::deserializeIDBValue):
        (WebCore::idbKeyToScriptValue):
        * bindings/v8/IDBBindingUtilities.h:
        (WebCore):

2012-11-14  Anton Obzhirov  <a.obzhirov@samsung.com>

        Add platform implementation of remote web inspector server for GTK port.
        https://bugs.webkit.org/show_bug.cgi?id=88094 

        Reviewed by Gustavo Noronha Silva.

        Extra SocketStreamHandle constructor is added to accept existing GSocketConnection.
        Needed to pass remote inspector server socket connection. The change is tested with 
        inspector server API tests.

        * platform/network/soup/SocketStreamHandle.h:
        (WebCore::SocketStreamHandle::create):
        (SocketStreamHandle):
        * platform/network/soup/SocketStreamHandleSoup.cpp:
        (WebCore::SocketStreamHandle::SocketStreamHandle):
        (WebCore):
        (WebCore::SocketStreamHandle::connected):
        (WebCore::SocketStreamHandle::platformSend):
        (WebCore::SocketStreamHandle::platformClose):

2012-11-14  Pavel Feldman  <pfeldman@chromium.org>

        Web Inspector: context menu on ObjectPropertyTreeElement's values is masked by the section.
        https://bugs.webkit.org/show_bug.cgi?id=102212

        Reviewed by Vsevolod Vlasov.

        * inspector/front-end/ObjectPropertiesSection.js:
        (WebInspector.ObjectPropertiesSection.prototype.enableContextMenu):

2012-11-09  Ilya Tikhonovsky  <loislo@chromium.org>

        Web Inspector: NMI add instrumentation for WebAudo related stuff.
        They use about 16Mb for shared data on pages with webaudio.
        As example Angry Birds app.
        https://bugs.webkit.org/show_bug.cgi?id=101729

        Reviewed by Yury Semikhatsky.

        Plain vanilla instrumentation for audio and webaudio classes.
        AudioContext is a kind of ActiveDOMObject. I found that these objects
        are accessible through ScriptExecutuionContext and ScriptExecutionContext
        is an ancestor of Document. Document class was instrumented earler.
        I instrumented ActiveDOMObject, ScriptExecutionContext and other ancestors
        and now AudioContext and other ActiveDOMObjects are reacheable from Document.

        Test: inspector-protocol/nmi-webaudio.html

        * Modules/webaudio/AudioContext.cpp:
        (WebCore::AudioContext::reportMemoryUsage):
        (WebCore):
        * Modules/webaudio/AudioContext.h:
        (AudioContext):
        * Modules/webaudio/AudioNode.cpp:
        (WebCore::AudioNode::reportMemoryUsage):
        (WebCore):
        * Modules/webaudio/AudioNode.h:
        (AudioNode):
        * dom/ActiveDOMObject.cpp:
        (WebCore::ActiveDOMObject::reportMemoryUsage):
        (WebCore):
        * dom/ActiveDOMObject.h:
        (ActiveDOMObject):
        * dom/Document.cpp:
        (WebCore::Document::reportMemoryUsage):
        * dom/ScriptExecutionContext.cpp:
        (WebCore::ScriptExecutionContext::reportMemoryUsage):
        (WebCore):
        * dom/ScriptExecutionContext.h:
        (ScriptExecutionContext):
        * dom/SecurityContext.cpp:
        (WebCore::SecurityContext::reportMemoryUsage):
        (WebCore):
        * dom/SecurityContext.h:
        (SecurityContext):
        * dom/WebCoreMemoryInstrumentation.cpp:
        (WebCore):
        * dom/WebCoreMemoryInstrumentation.h:
        (WebCoreMemoryTypes):
        * platform/audio/AudioArray.h:
        (AudioArray):
        (WebCore::AudioArray::reportMemoryUsage):
        * platform/audio/FFTFrame.cpp:
        (WebCore::FFTFrame::reportMemoryUsage):
        (WebCore):
        * platform/audio/FFTFrame.h:
        (FFTFrame):
        * platform/audio/HRTFDatabase.cpp:
        (WebCore::HRTFDatabase::reportMemoryUsage):
        (WebCore):
        * platform/audio/HRTFDatabase.h:
        (HRTFDatabase):
        * platform/audio/HRTFDatabaseLoader.cpp:
        (WebCore::HRTFDatabaseLoader::reportMemoryUsage):
        (WebCore):
        * platform/audio/HRTFDatabaseLoader.h:
        (HRTFDatabaseLoader):
        * platform/audio/HRTFElevation.cpp:
        (WebCore::HRTFElevation::reportMemoryUsage):
        (WebCore):
        * platform/audio/HRTFElevation.h:
        (HRTFElevation):
        * platform/audio/HRTFKernel.cpp:
        (WebCore::HRTFKernel::reportMemoryUsage):
        (WebCore):
        * platform/audio/HRTFKernel.h:
        (HRTFKernel):

2012-11-14  Eugene Klyuchnikov  <eustas.bug@gmail.com>

        Web Inspector: Settings screen: close button overlays view title on mac.
        https://bugs.webkit.org/show_bug.cgi?id=102198

        Reviewed by Pavel Feldman.

        Added margin-left for mac. Adjusted title height and vertical positioning.

        * inspector/front-end/helpScreen.css:
        (.help-window-caption): Adjusted title height.
        (.help-window-title): Adjusted title vertical positioning. 
        (body.platform-mac .help-window-main .help-window-title): Fixed margin.

2012-11-13  Pavel Feldman  <pfeldman@chromium.org>

        Web Inspector: use last selection as complementary signal when applying DOM changes to the text model.
        https://bugs.webkit.org/show_bug.cgi?id=101905

        Reviewed by Vsevolod Vlasov.

        Currently we use heuristics for detecting damaged model range upon DOM mutation.
        This change adds signals from the last selection and keyboard events in order to
        further improve the heuristics quality.

        * inspector/front-end/DefaultTextEditor.js:
        (WebInspector.DefaultTextEditor):
        (WebInspector.DefaultTextEditor.EditInfo):
        (WebInspector.DefaultTextEditor.prototype._handleTextInput):
        (WebInspector.DefaultTextEditor.prototype._handleKeyDown):
        (WebInspector.DefaultTextEditor.prototype.lastSelection):
        (WebInspector.DefaultTextEditor.prototype.wasShown):
        (WebInspector.TextEditorMainPanel.prototype._applyDomUpdates):
        (WebInspector.TextEditorMainPanel.prototype._guessEditRangeBasedOnSelection):
        (WebInspector.TextEditorMainPanel.prototype._guessEditRangeBasedOnDiff):
        (WebInspector.TextEditorMainPanel.prototype._closingBlockOffset):
        (WebInspector.TextEditorMainPanel.prototype._handleSelectionChange):
        * inspector/front-end/TextEditorModel.js:
        (WebInspector.TextRange.prototype.compareTo):
        (WebInspector.TextRange.prototype.shift):
        (WebInspector.TextEditorModel.endsWithBracketRegex.):

2012-11-14  Dan Carney  <dcarney@google.com>

        [V8] use toV8Fast in all relevant Node getters
        https://bugs.webkit.org/show_bug.cgi?id=100851

        Reviewed by Kentaro Hara.

        The toV8Fast function for Node objects is now called in all getters
        instead of toV8.

        No new tests. Test coverage extensive.

        * bindings/scripts/CodeGeneratorV8.pm:
        (GenerateHeader):
        (GenerateNormalAttrGetter):
        (IsDOMNodeType):
        * bindings/scripts/test/V8/V8TestNode.h:
        (WebCore::toV8Fast):

2012-11-14  Kenneth Rohde Christiansen  <kenneth@webkit.org>

        Clean up use of adjustWindowRect
        https://bugs.webkit.org/show_bug.cgi?id=102072

        Reviewed by Gyuyoung Kim.

        Tested by fast/dom/Window/open-window-min-size.html

        * loader/FrameLoader.cpp:
        (WebCore::createWindow):

            Validate the window size here so that it is not just done for
            .open, but also for .showModalDialog. This is compatible with
            other browsers such as IE and Firefox (though IE > 6, enforces
            a minimum width of 250 instead of 100 as Firefox and us.)

        * page/DOMWindow.cpp:
        (WebCore):
        (WebCore::DOMWindow::adjustWindowRect):

            Make it a static method which only takes page. It was never
            called from anywhere without a valid page, so the page check
            has been turned into an assert, and two of the arguments have
            been removed as they can be accessed via the page.

        (WebCore::DOMWindow::moveBy):
        (WebCore::DOMWindow::moveTo):
        (WebCore::DOMWindow::resizeBy):
        (WebCore::DOMWindow::resizeTo):

            Update use of adjustWindowRect.

        (WebCore::DOMWindow::open):

            Avoid modifying the WindowFeatures as the WebCore::createWindow
            validates and adjusts the arguments.

        * page/DOMWindow.h:
        (DOMWindow):

2012-11-14  Takashi Sakamoto  <tasak@google.com>

        Crash when replacing parts of text inputs with content: url(...)
        https://bugs.webkit.org/show_bug.cgi?id=101133

        Reviewed by Kent Tamura.

        Disable directly setting content of elements in an input element's
        shadow dom tree, because the setting breaks input element's behavior.

        Tests: fast/forms/number/number-content-url-crash.html
               fast/forms/search/search-content-url-crash.html

        * css/html.css:
        (input::-webkit-textfield-decoration-container):
        Use important to disable overriding an input element's content
        property.
        * html/TextFieldInputType.cpp:
        (WebCore::TextFieldInputType::attach):
        Added ASSERTION. No content should be applied to
        input::-webkit-textfield-decoration-container.

2012-11-14  Kentaro Hara  <haraken@chromium.org>

        Unreviewed. Rebaselined run-bindings-tests results.

        * bindings/scripts/test/V8/V8TestOverloadedConstructors.cpp:
        (WebCore::V8TestOverloadedConstructors::constructor1Callback):
        (WebCore::V8TestOverloadedConstructors::constructor2Callback):
        (WebCore::V8TestOverloadedConstructors::constructor3Callback):
        (WebCore::V8TestOverloadedConstructors::constructor4Callback):
        (WebCore::V8TestOverloadedConstructors::wrapSlow):

2012-11-14  Anton Muhin  <antonm@chromium.org>

        Provide return types for custom WebGLRenderingContext methods
        https://bugs.webkit.org/show_bug.cgi?id=100777

        Reviewed by Kenneth Russell.

        No new tests as doesn't change generated code.

        * html/canvas/WebGLRenderingContext.idl:

2012-11-14  Kent Tamura  <tkent@chromium.org>

        Support for localization tests of calendar picker
        https://bugs.webkit.org/show_bug.cgi?id=102181

        Reviewed by Kentaro Hara.

        Introduce DateTimeChooserParameters::locale to inform locale to
        DateTimeChooser implementations. However we pass defaultLanguage
        unless tests calls internals.settings.
        setLangAttributeAwareFormControlUIEnabled(true) explicitly.

        Test: platform/chromium/fast/forms/calendar-picker/calendar-picker-appearance-ru.html

        * html/HTMLInputElement.cpp:
        (WebCore::HTMLInputElement::setupDateTimeChooserParameters):
        Set DateTimeChooserParameters::locale up.
        * platform/DateTimeChooser.h:
        (DateTimeChooserParameters): Add 'locale' member.

2012-11-14  Pavel Feldman  <pfeldman@chromium.org>

        Web Inspector: highlight is not updating as one edits CSS properties
        https://bugs.webkit.org/show_bug.cgi?id=102191

        Reviewed by Alexander Pavlov.

        We should update highlight upon layout / style recalculation.

        * inspector/InspectorInstrumentation.cpp:
        (WebCore):
        (WebCore::InspectorInstrumentation::didRecalculateStyleImpl):
        * inspector/InspectorPageAgent.cpp:
        (WebCore::InspectorPageAgent::InspectorPageAgent):
        (WebCore::InspectorPageAgent::enable):
        (WebCore::InspectorPageAgent::disable):
        (WebCore::InspectorPageAgent::domContentEventFired):
        (WebCore::InspectorPageAgent::didPaint):
        (WebCore::InspectorPageAgent::didLayout):
        (WebCore::InspectorPageAgent::didScroll):
        (WebCore):
        (WebCore::InspectorPageAgent::didRecalculateStyle):
        * inspector/InspectorPageAgent.h:

2012-11-14  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r134566.
        http://trac.webkit.org/changeset/134566
        https://bugs.webkit.org/show_bug.cgi?id=102197

        "it broke Chromium Android Release build" (Requested by
        haraken on #webkit).

        * html/HTMLInputElement.cpp:
        (WebCore::HTMLInputElement::setupDateTimeChooserParameters):
        * platform/DateTimeChooser.h:
        (DateTimeChooserParameters):

2012-11-08  Vsevolod Vlasov  <vsevik@chromium.org>

        Web Inspector: No content available for requests made from flash
        https://bugs.webkit.org/show_bug.cgi?id=101560

        Reviewed by Pavel Feldman.

        Network request data is now saved to inspector cache in following cases:
         - Error status code;
         - No cached resource available;
         - Cached resource has ShouldNotBufferData option set.
        Drive-by: refactored didReceiveResponse logic to be clearer.

        * inspector/InspectorResourceAgent.cpp:
        (WebCore::InspectorResourceAgent::didReceiveResponse):
        (WebCore::InspectorResourceAgent::didReceiveData):
        * loader/cache/CachedResource.h:
        (WebCore::CachedResource::shouldBufferData):

2012-11-14  Shinya Kawanaka  <shinyak@chromium.org>

        Changing pseudoClass (:target) should cause distribution
        https://bugs.webkit.org/show_bug.cgi?id=101699

        Reviewed by Hajime Morita.

        When cssTarget element is changed, we might have to invalidate distribution. We check its necessity
        by consulting with SelectRuleFeatureSet.

        We also implement invalidateParentDistributionIfNecessary for all collected features in this patch.

        Test: fast/dom/shadow/pseudoclass-update-target.html

        * dom/Document.cpp:
        (WebCore::Document::setCSSTarget):
        * dom/ElementShadow.cpp:
        (WebCore::invalidateParentDistributionIfNecessary):
        (WebCore):
        * dom/ElementShadow.h:
        (WebCore):
        * html/shadow/SelectRuleFeatureSet.h:
        (WebCore::SelectRuleFeatureSet::hasSelectorFor):
        (SelectRuleFeatureSet):

2012-11-14  Kentaro Hara  <haraken@chromium.org>

        [V8] DOM wrapper objects should be collected in minor GC cycles
        https://bugs.webkit.org/show_bug.cgi?id=98725

        Reviewed by Adam Barth.

        Previously minor GC cycles cannot collect DOM Nodes. All DOM Nodes
        have to survive two minor GC cycles, be promoted to the old space
        and wait for a heavy major GC cycle.

        This patch enables V8 to collect DOM Nodes in minor GC cycles.
        For real world applications, I confirmed that minor GC cycles
        reclaims a substantial amount of memory (24 MB for Facebook,
        235 MB for Google Calendar) with acceptable overhead (~10 ms
        per minor GC cycle). No performance regression in Dromaeo
        DOM tests.

        A design document: https://docs.google.com/a/google.com/document/d/16DeHrzkm3cO9XCPT1aK3Y5qgUxXB3RFmueqQWYmN2rI/edit
        Performance results: https://docs.google.com/a/google.com/document/d/1h0-EsHu7T0sSMuZm5eE0r1e8sCAzY3weLvsDUpOSngE/edit
        A slide: https://docs.google.com/a/google.com/presentation/d/1uifwVYGNYTZDoGLyCb7sXa7g49mWNMW2gaWvMN5NLk8/edit#slide=id.p

        * bindings/v8/IntrusiveDOMWrapperMap.h:
        (WebCore::IntrusiveDOMWrapperMap::set):
        * bindings/v8/V8DOMWindowShell.cpp:
        (WebCore::initializeV8IfNeeded):
        * bindings/v8/V8GCController.cpp:
        (WebCore):
        (WebCore::gcTree):
        (WebCore::V8GCController::newWrapperBorn):
        (WebCore::V8GCController::gcPrologue):
        (WebCore::V8GCController::minorGCPrologue):
        (WebCore::V8GCController::majorGCPrologue):
        (WebCore::V8GCController::gcEpilogue):
        (WebCore::V8GCController::minorGCEpilogue):
        (WebCore::V8GCController::majorGCEpilogue):
        * bindings/v8/V8GCController.h:
        (WebCore):
        (V8GCController):
        * bindings/v8/WorkerContextExecutionProxy.cpp:
        (WebCore::WorkerContextExecutionProxy::initIsolate):
        * dom/Element.cpp:
        (WebCore::Element::focus):
        * dom/Node.h:
        (WebCore::Node::inEden):
        (WebCore::Node::setEden):
        (Node):

2012-11-14  Kentaro Hara  <haraken@chromium.org>

        [V8] Replace setDOMWrapper() + setJSWrapperForDOMObject() with createDOMWrapper()
        https://bugs.webkit.org/show_bug.cgi?id=101917

        Reviewed by Adam Barth.

        setJSWrapperForDOMObject() is always coupled with setDOMWrapper().
        We can replace setDOMWrapper() + setJSWrapperForDOMObject() with
        createDOMWrapper(). (c.f. CREATE_DOM_WRAPPER() in JSC)

        No tests. No change in behavior.

        * bindings/scripts/CodeGeneratorV8.pm:
        (GenerateConstructorCallback):
        (GenerateEventConstructorCallback):
        (GenerateNamedConstructorCallback):
        (GenerateToV8Converters):
        * bindings/v8/V8DOMWindowShell.cpp:
        (WebCore::V8DOMWindowShell::installDOMWindow):
        * bindings/v8/V8DOMWrapper.cpp:
        (WebCore::V8DOMWrapper::instantiateV8Object):
        * bindings/v8/V8DOMWrapper.h:
        (V8DOMWrapper):
        (WebCore::V8DOMWrapper::createDOMWrapper):
        * bindings/v8/WorkerContextExecutionProxy.cpp:
        (WebCore::WorkerContextExecutionProxy::initializeIfNeeded):
        * bindings/v8/custom/V8ArrayBufferCustom.cpp:
        (WebCore::V8ArrayBuffer::constructorCallback):
        * bindings/v8/custom/V8ArrayBufferViewCustom.h:
        (WebCore::wrapArrayBufferView):
        (WebCore::constructWebGLArray):
        * bindings/v8/custom/V8DOMFormDataCustom.cpp:
        (WebCore::V8DOMFormData::constructorCallback):
        * bindings/v8/custom/V8DataViewCustom.cpp:
        (WebCore::V8DataView::constructorCallback):
        * bindings/v8/custom/V8HTMLImageElementConstructor.cpp:
        (WebCore::v8HTMLImageElementConstructorCallback):
        * bindings/v8/custom/V8IntentConstructor.cpp:
        (WebCore::V8Intent::constructorCallback):
        * bindings/v8/custom/V8MessageChannelConstructor.cpp:
        (WebCore::V8MessageChannel::constructorCallback):
        * bindings/v8/custom/V8MutationObserverCustom.cpp:
        (WebCore::V8MutationObserver::constructorCallback):
        * bindings/v8/custom/V8WebKitPointConstructor.cpp:
        (WebCore::V8WebKitPoint::constructorCallback):
        * bindings/v8/custom/V8WebSocketCustom.cpp:
        (WebCore::V8WebSocket::constructorCallback):
        * bindings/v8/custom/V8XMLHttpRequestConstructor.cpp:
        (WebCore::V8XMLHttpRequest::constructorCallback):

2012-11-14  Kent Tamura  <tkent@chromium.org>

        Support for localization tests of calendar picker
        https://bugs.webkit.org/show_bug.cgi?id=102181

        Reviewed by Kentaro Hara.

        Introduce DateTimeChooserParameters::locale to inform locale to
        DateTimeChooser implementations. However we pass defaultLanguage
        unless tests calls internals.settings.
        setLangAttributeAwareFormControlUIEnabled(true) explicitly.

        Test: platform/chromium/fast/forms/calendar-picker/calendar-picker-appearance-ru.html

        * html/HTMLInputElement.cpp:
        (WebCore::HTMLInputElement::setupDateTimeChooserParameters):
        Set DateTimeChooserParameters::locale up.
        * platform/DateTimeChooser.h:
        (DateTimeChooserParameters): Add 'locale' member.

2012-11-14  Alexei Filippov  <alph@chromium.org>

        Web Inspector: Show total memory in the NMI snapshot header
        https://bugs.webkit.org/show_bug.cgi?id=101922

        Reviewed by Pavel Feldman.

        * inspector/front-end/NativeMemorySnapshotView.js:
        (WebInspector.NativeMemoryProfileType.prototype.buttonClicked.didReceiveMemorySnapshot):
        (WebInspector.NativeMemoryProfileType.prototype.buttonClicked):

2012-11-14  Jan Keromnes  <janx@linux.com>

        Web Inspector: CodeMirrorTextEditor fails to scroll breakpoint into view after the first time
        https://bugs.webkit.org/show_bug.cgi?id=102142

        Reviewed by Pavel Feldman.

        Calling revealLine in highlightLine like in DefaultTextEditor does the trick.

        * inspector/front-end/CodeMirrorTextEditor.js:
        (WebInspector.CodeMirrorTextEditor.prototype.highlightLine):

2012-11-13  Kent Tamura  <tkent@chromium.org>

        Use menulist-button instead of menulist for date/time input types
        https://bugs.webkit.org/show_bug.cgi?id=101886

        Reviewed by Hajime Morita.

        Both of Chromium-Android and iOS use -webkit-appearance:menulist-button,
        not menulist. We had better apply common one by default.

        No new tests. Covered by fast/forms/*/*-appearance-*.html.

        * css/html.css:
        (input[type="date"]): Switch menulist-button from menulist.
        (input[type="datetime"]): Ditto.
        (input[type="datetime-local"]): Ditto.
        (input[type="month"]): Ditto.
        (input[type="time"]): Ditto.
        (input[type="week"]): Ditto.
        (input::-webkit-date-and-time-value):
        Add top, right, bottom margins. The right margin is important when
        dir=rtl is specified.
        whitespace:pre is needed to align baseline in a case of empty values.
        * css/themeChromiumAndroid.css:
        Remove redundant style declaration.
        * css/themeWin.css:
        Remove padding adjustment for date/time input types. It is for
        textfields.

2012-11-13  Vincent Scheib  <scheib@chromium.org>

        Remove RuntimeEnabledFeatures::isPointerLockEnabled.
        https://bugs.webkit.org/show_bug.cgi?id=102107

        Reviewed by Adam Barth.

        The runtime flag is always true now that the feature is enabled by default in Chromium.

        * bindings/generic/RuntimeEnabledFeatures.cpp:
        (WebCore):
        * bindings/generic/RuntimeEnabledFeatures.h:
        (RuntimeEnabledFeatures):
        * dom/Document.idl:
        * dom/Element.idl:
        * dom/MouseEvent.idl:

2012-11-13  Eugene Klyuchnikov  <eustas.bug@gmail.com>

        Web Inspector: JsDoc-annotate KeyboardShortcuts
        https://bugs.webkit.org/show_bug.cgi?id=101301

        Reviewed by Pavel Feldman.

        JsDoc-annotate KeyboardShortcuts to improve readability.

        * inspector/front-end/AdvancedSearchController.js: Fix parameter type.
        * inspector/front-end/KeyboardShortcut.js: Add annotations.
        * inspector/front-end/Panel.js: Make event parameter typed.
        * inspector/front-end/inspector.js: Ditto.

2012-11-13  Eugene Klyuchnikov  <eustas.bug@gmail.com>

        Web Inspector: Extract common interface for StatusBarButton and StatusBarCombo
        https://bugs.webkit.org/show_bug.cgi?id=101907

        Reviewed by Pavel Feldman.

        Status bar control element should have common interface for
        easier management.
        In this patch getter/setter for StatusBarButton "disabled" are replaced
        with regular functions "enabled"/"setEnabled"; added "setEnabled"
        to StatusBarCombo; added new base class StatusBarItem with
        method "setEnabled" and member "element".

        * inspector/front-end/CPUProfileView.js: Adopted refactoring.
        * inspector/front-end/DockController.js: Ditto.
        * inspector/front-end/ScriptsPanel.js: Ditto.
        * inspector/front-end/TimelinePanel.js: Ditto.
        * inspector/front-end/inspector.js: Ditto.
        * inspector/front-end/StatusBarButton.js:
        (WebInspector.StatusBarItem): Added.
        (WebInspector.StatusBarButton): Replaced getter/setter with
        regular functions.
        (WebInspector.StatusBarComboBox.prototype.setEnabled): Added.

2012-11-13  Eugene Klyuchnikov  <eustas.bug@gmail.com>

        Web Inspector: Console: update tab/shift-tab shortcut description.
        https://bugs.webkit.org/show_bug.cgi?id=102175

        Reviewed by Pavel Feldman.

        For "Tab / Shift-Tab" it said "Next/previous suggestion".
        Actually, shift-tab to do nothing, and tab auto-completes common prefix.

        * English.lproj/localizedStrings.js: Replaced string.
        * inspector/front-end/ConsoleView.js: Updated shortcut registration.

2012-11-13  Dana Jansens  <danakj@chromium.org>

        [chromium] Pass showDebugBorders directly to WebLayerTreeSettings, don't use the GraphicsLayer border width setting.
        https://bugs.webkit.org/show_bug.cgi?id=102130

        Reviewed by James Robinson.

        The current method of setting debug borders on GraphicsLayers requires
        every GraphicsLayerClient to set the value on the layer(s) it
        represents. This skips the NonCompositedContentHost as well as any
        other clients other than RenderLayerBacking - including layers from the
        inspector.

        Instead, pass the debug border setting directly to the
        WebLayerTreeSettings where the compositor can use the flag to enable
        borders on all layers globally.

        * platform/graphics/chromium/GraphicsLayerChromium.cpp:
        (WebCore::GraphicsLayerChromium::GraphicsLayerChromium):
        (WebCore::GraphicsLayerChromium::updateMasksToBounds):
        (WebCore::GraphicsLayerChromium::updateLayerIsDrawable):
        (WebCore::GraphicsLayerChromium::setupContentsLayer):
        * platform/graphics/chromium/GraphicsLayerChromium.h:
        (GraphicsLayerChromium):

2012-11-13  Kunihiko Sakamoto  <ksakamoto@chromium.org>

        Enable calendar picker for input types datetime/datetime-local
        https://bugs.webkit.org/show_bug.cgi?id=101889

        Reviewed by Kent Tamura.

        This adds calendar picker to <input type=datetime> and <input type=datetime-local>.
        When a user choose a date from calendar picker, year/month/day fields of the input
        element are updated and hour/minute/second fields are unchanged.

        Tests: platform/chromium/fast/forms/calendar-picker/calendar-picker-datetime-local.html
               platform/chromium/fast/forms/calendar-picker/calendar-picker-datetime.html

        * Resources/pagepopups/calendarPicker.js: Day.parse accepts datetime string (just drops time part).
        * html/BaseMultipleFieldsDateAndTimeInputType.cpp:
        (WebCore::BaseMultipleFieldsDateAndTimeInputType::pickerIndicatorChooseValue):
        If the given value is not valid for the element, try to parse it as a date string.
        * html/DateTimeInputType.cpp:
        (WebCore::DateTimeInputType::formatDateTimeFieldsState): DateTimeFieldsState::month() returns 1-12, not 0-11.
        * html/DateTimeLocalInputType.cpp:
        (WebCore::DateTimeLocalInputType::formatDateTimeFieldsState): Ditto.
        * html/shadow/DateTimeEditElement.cpp:
        (WebCore::DateTimeEditElement::setOnlyYearMonthDay): Added.
        (WebCore):
        * html/shadow/DateTimeEditElement.h:
        (DateTimeEditElement):
        * rendering/RenderThemeChromiumCommon.cpp:
        (WebCore::RenderThemeChromiumCommon::supportsCalendarPicker): Return true for datetime and datetimelocal too.

2012-11-13  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r134524.
        http://trac.webkit.org/changeset/134524
        https://bugs.webkit.org/show_bug.cgi?id=102177

        "Chromiium build broken" (Requested by haraken on #webkit).

        * WebCore.gyp/WebCore.gyp:
        * WebCore.gypi:
        * rendering/RenderThemeChromiumFontProvider.cpp: Removed.
        * rendering/RenderThemeChromiumFontProvider.h: Removed.
        * rendering/RenderThemeChromiumFontProviderLinux.cpp: Removed.
        * rendering/RenderThemeChromiumFontProviderWin.cpp: Removed.
        * rendering/RenderThemeChromiumSkia.cpp:
        (WebCore::RenderThemeChromiumSkia::defaultGUIFont):
        (WebCore::RenderThemeChromiumSkia::systemFont):
        (WebCore::RenderThemeChromiumSkia::setDefaultFontSize):
        * rendering/RenderThemeChromiumSkia.h:
        (RenderThemeChromiumSkia):
        * rendering/RenderThemeChromiumWin.cpp:
        (WebCore):
        (WebCore::getNonClientMetrics):
        (WebCore::systemFontSize):
        (WebCore::pointsToPixels):
        (WebCore::RenderThemeChromiumWin::systemFont):
        (WebCore::RenderThemeChromiumWin::setDefaultFontSize):
        * rendering/RenderThemeChromiumWin.h:
        (RenderThemeChromiumWin):

2012-11-13  KyungTae Kim  <ktf.kim@samsung.com>

        Fix compile warning [-Wsign-compare]
        https://bugs.webkit.org/show_bug.cgi?id=101458

        Reviewed by Alexey Proskuryakov.

        Currently, lossy check has been done by comparing file size(posix signed integral value) with conversioned(standard c++ unsigned integral value).
        However, it leads -Wsign-compare compile warning.
        Therefore, this patch assigns the file size to the biggest possible unsigned variable, then does the lossy check.

        * platform/posix/SharedBufferPOSIX.cpp:
        (WebCore::SharedBuffer::createWithContentsOfFile):

2012-11-13  Keishi Hattori  <keishi@webkit.org>

        Enable datalist UI for input types week and month
        https://bugs.webkit.org/show_bug.cgi?id=102041

        Reviewed by Kent Tamura.

        Enabling datalist UI for input types week and month.

        No new tests. Tests will be added later in Bug 102039 and Bug 102040.

        * rendering/RenderThemeChromiumCommon.cpp:
        (WebCore::RenderThemeChromiumCommon::supportsDataListUI): Add month and week to the list.

2012-11-13  Eberhard Graether  <egraether@google.com>

        checkbox to toggle FPS counter in the inspector's settings
        https://bugs.webkit.org/show_bug.cgi?id=99660

        Reviewed by Pavel Feldman.

        Added a checkbox to the inspector's settings to toggle a FPS counter. The checkbox appears when InspectorClient::canShowFPSCounter() returns true.

        No new tests.

        * English.lproj/localizedStrings.js:
        * inspector/Inspector.json:
        * inspector/InspectorClient.h:
        (WebCore::InspectorClient::canShowFPSCounter):
        (WebCore::InspectorClient::setShowFPSCounter):
        (InspectorClient):
        * inspector/InspectorPageAgent.cpp:
        (PageAgentState):
        (WebCore::InspectorPageAgent::enable):
        (WebCore::InspectorPageAgent::disable):
        (WebCore::InspectorPageAgent::canShowFPSCounter):
        (WebCore):
        (WebCore::InspectorPageAgent::setShowFPSCounter):
        * inspector/InspectorPageAgent.h:
        * inspector/front-end/Settings.js:
        * inspector/front-end/SettingsScreen.js:
        (WebInspector.GenericSettingsTab):
        (WebInspector.GenericSettingsTab.prototype.get _showFPSCounterChanged):
        * inspector/front-end/inspector.js:
        (WebInspector.doLoadedDone):

2012-11-13  Shinya Kawanaka  <shinyak@chromium.org>

        Collect necessary features for SelectRuleFeatureSet
        https://bugs.webkit.org/show_bug.cgi?id=102160

        Reviewed by Dimitri Glazkov.

        When pseudo class is changed, we might have to invalidate distribution. To determine whether we should invalidate
        distribution, we would like to collect RuleFeature from select attributes.

        According to ShadowDOM spec, we have to collect the following pseudo classes: checked, enabled, disabled,
        indeterminate, link, target, and visited. We collect them in this patch.

        Test: fast/dom/shadow/shadow-select-attribute-featureset.html

        * html/shadow/SelectRuleFeatureSet.cpp:
        (WebCore::SelectRuleFeatureSet::SelectRuleFeatureSet): Uses int as bitset so that we can use bit operator.
        (WebCore::SelectRuleFeatureSet::add):
        (WebCore::SelectRuleFeatureSet::clear):
        (WebCore::SelectRuleFeatureSet::collectFeaturesFromSelector): Collects necessary features from CSSSelector.
        * html/shadow/SelectRuleFeatureSet.h:
        (WebCore::SelectRuleFeatureSet::hasSelectorForChecked):
        (WebCore::SelectRuleFeatureSet::hasSelectorForEnabled):
        (WebCore::SelectRuleFeatureSet::hasSelectorForDisabled):
        (WebCore::SelectRuleFeatureSet::hasSelectorForIndeterminate):
        (WebCore::SelectRuleFeatureSet::hasSelectorForLink):
        (WebCore::SelectRuleFeatureSet::hasSelectorForTarget):
        (WebCore::SelectRuleFeatureSet::hasSelectorForVisited):
        (SelectRuleFeatureSet):
        (WebCore::SelectRuleFeatureSet::setSelectRuleFeature):
        (WebCore::SelectRuleFeatureSet::hasSelectorFor):
        * testing/Internals.cpp:
        (WebCore::Internals::hasSelectorForPseudoClassInShadow):
        (WebCore):
        * testing/Internals.h:
        (Internals):
        * testing/Internals.idl:

2012-11-13  Andreas Kling  <kling@webkit.org>

        Move inline style logic from ElementAttributeData to StyledElement.
        <http://webkit.org/b/102120>

        Reviewed by Antti Koivisto.

        Move all the logic dealing with element inline style from ElementAttributeData to StyledElement.
        No difference in behavior, just making ElementAttributeData dumber.

        * css/StylePropertySet.cpp:
        * css/StylePropertySet.h:
        (WebCore::StylePropertySet::hasCSSOMWrapper):
        (WebCore::StylePropertySet::cssStyleDeclaration):

            Added as complements to ensureCSSStyleDeclaration() for the case where we don't want
            to instantiate a CSSOM wrapper unnecessarily.

        * dom/StyledElement.h:
        (WebCore::StyledElement::inlineStyle):
        * dom/ElementAttributeData.cpp:
        (WebCore::ImmutableElementAttributeData::ImmutableElementAttributeData):
        (WebCore::MutableElementAttributeData::MutableElementAttributeData):
        (WebCore::ElementAttributeData::reportMemoryUsage):
        * dom/ElementAttributeData.h:
        (WebCore::ElementAttributeData::inlineStyle):
        (ElementAttributeData):

            Renamed m_inlineStyleDecl to m_inlineStyle. Finally.

        * dom/StyledElement.cpp:
        (WebCore::StyledElement::~StyledElement):

            Detach the CSSOM wrapper from the inline style if there is one.

        (WebCore::StyledElement::ensureMutableInlineStyle):
        (WebCore::StyledElement::style):

            Renamed ensureInlineStyle() to ensureMutableInlineStyle() since that's what it
            actually does. Update call sites accordingly.

        (WebCore::StyledElement::inlineStyleCSSOMWrapper):

            Added helper to get the CSSOM wrapper for the element's inline style if there is one.

        (WebCore::StyledElement::styleAttributeChanged):

            Do the work to parse/update/replace the inline style attribute here instead of
            in an ElementAttributeData method.

        (WebCore::StyledElement::setInlineStyleProperty):
        (WebCore::StyledElement::removeInlineStyleProperty):
        (WebCore::StyledElement::removeAllInlineStyleProperties):
        * editing/ApplyStyleCommand.cpp:
        (WebCore::ApplyStyleCommand::applyRelativeFontStyleChange):
        (WebCore::ApplyStyleCommand::removeEmbeddingUpToEnclosingBlock):
        (WebCore::ApplyStyleCommand::applyInlineStyleToNodeRange):
        * editing/ReplaceSelectionCommand.cpp:
        (WebCore::ReplaceSelectionCommand::handleStyleSpans):
        * html/canvas/CanvasStyle.cpp:
        (WebCore::currentColor):

            s/ensureInlineStyle/ensureMutableInlineStyle/

2012-11-13  Li Yin  <li.yin@intel.com>

        fast/forms/file/input-file-write-files.html should cover correct setting value
        https://bugs.webkit.org/show_bug.cgi?id=100085

        Reviewed by Kentaro Hara.

        Fix the GObject and Objective C bindings comparibility issue. Preserving existing
        behavior for those may be important in idl.

        No new tests, because fast/forms/file/input-file-value.html has covered it.

        * html/HTMLInputElement.idl:

2012-11-13  KyungTae Kim  <ktf.kim@samsung.com>

        [EFL] Fix build warning in NetworkStateNotifierEfl.cpp
        https://bugs.webkit.org/show_bug.cgi?id=102061

        Reviewed by Gyuyoung Kim.

        The second argument for NLMSG_OK needs to be unsigned to avoid the -Wsign-compare warning.

        * platform/network/efl/NetworkStateNotifierEfl.cpp:
        (WebCore::readSocketCallback):

2012-11-13  Sami Kyostila  <skyostil@chromium.org>

        Don't mark scrolling contents as dirty if RenderLayerBacking is going away
        https://bugs.webkit.org/show_bug.cgi?id=101947

        Reviewed by Simon Fraser.

        When a scrolling contents graphics layer is created or destroyed, the
        associated graphics layer is marked as needing display because some of
        the painted content may have migrated between the primary graphics layer
        and the scrolling layer.

        This causes a problem when the RenderLayerBacking is being destroyed,
        because setNeedsDisplay() needs to check from the compositor whether to
        track repaints or not. If the RenderLayerBacking is being destroyed, the
        value returned by compositor() is garbage and this causes a crash.

        This patch fixes the problem by making RenderLayer::compositor() return a null
        pointer when the renderer no longer has a view.

        Covered by existing layout tests in compositing/overflow/.

        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::compositor):

2012-11-13  Erik Arvidsson  <arv@chromium.org>

        Update DOMException name: InvalidCharacterError
        https://bugs.webkit.org/show_bug.cgi?id=102128

        Reviewed by Darin Adler.

        Patch 5 of 25 to update DOMException name to match the spec and Firefox.

        Updated existing tests.

        * dom/DOMCoreException.cpp:

2012-11-13  Joshua Bell  <jsbell@chromium.org>

        IndexedDB: Run multiple tasks per transaction tick
        https://bugs.webkit.org/show_bug.cgi?id=97738

        Reviewed by Tony Chang.

        Process multiple tasks from the pending queue(s) when the timer fires. The
        task may initiate new tasks that change which queue is active (e.g. indexing
        operations) so the loop must re-check each tick which queue to use.

        In DumpRenderTree, time to make 20k puts/20k gets dropped from 3.2s to 2.0s (-37%);
        in Chromium's content_shell, the time dropped from 8.1s to 4.6s (-42%).

        No new tests - just perf improvements, covered by (nearly) all existing IDB tests.

        * Modules/indexeddb/IDBTransactionBackendImpl.cpp:
        (WebCore::IDBTransactionBackendImpl::abort): Use takeFirst() to clean up code.
        (WebCore::IDBTransactionBackendImpl::taskTimerFired): Process as many tasks as are available.

2012-11-13  Elliott Sprehn  <esprehn@chromium.org>

        Disable frame loading instead of throwing exceptions on subtree modifications in ChildFrameDisconnector
        https://bugs.webkit.org/show_bug.cgi?id=102012

        Reviewed by Ojan Vafai.

        Previously if you modified the subtree that was being removed from a
        removeChild from inside an unload handler on an <iframe> inside the
        subtree you'd get an exception which is wrong. Instead we just need to
        disable all frame loading there.

        This works because either the subtree will be removed and the frame never
        loading doesn't matter, or some section of the subtree that contains the
        frame will be moved to another part of the document which will cause the
        frame to load when it's inserted there.

        I also added a check for <object> elements. It doesn't seem this is actually
        reachable in the existing code, but I'm not entirely sure since the frame
        loading and object/plugin handling is very confusing.

        A better fix could be to repeatedly walk the subtree until all frames
        were disconnected or some iteration limit was hit and then force all leftover
        subframes to disconnect without firing unload handlers but this is such an
        edge case I don't think the complexity is necessary.

        Test: fast/frames/modifications-in-subtree-unload.html

        * dom/ContainerNodeAlgorithms.h:
        (WebCore::ChildFrameDisconnector::ChildFrameDisconnector):
        (WebCore::ChildFrameDisconnector::~ChildFrameDisconnector):
        (ChildFrameDisconnector):
        (WebCore::ChildFrameDisconnector::disconnect):
        * dom/Node.cpp:
        (WebCore::checkAcceptChild): Removed exception.
        * html/HTMLFrameElementBase.cpp:
        (WebCore::HTMLFrameElementBase::didNotifySubtreeInsertions): Check canLoadFrame().
        * html/HTMLFrameOwnerElement.h:
        (SubframeLoadingDisabler):
        (WebCore::SubframeLoadingDisabler::SubframeLoadingDisabler):
        (WebCore::SubframeLoadingDisabler::~SubframeLoadingDisabler):
        (WebCore::SubframeLoadingDisabler::canLoadFrame):
          Returns true if frames can be loaded in the subtree.
        (WebCore::SubframeLoadingDisabler::disabledSubtreeRoots):
        * html/HTMLObjectElement.cpp:
        (WebCore::HTMLObjectElement::updateWidget):
          Check canLoadFrame(). I think this case is impossible, but it's better
          to be safe than sorry later.

2012-11-13  Joshua Bell  <jsbell@chromium.org>

        [V8] Add missing ENABLE(SVG) test in header
        https://bugs.webkit.org/show_bug.cgi?id=102143

        Reviewed by Kentaro Hara.

        Need to wrap the #include of a header that's only conditionally generated.

        Fixes build error if compiling e.g. w/ GYP_DEFINES="enable_svg=0"

        * bindings/v8/custom/V8ElementCustom.cpp:

2012-11-13  Jon Lee  <jonlee@apple.com>

        Automatically run small plugins
        https://bugs.webkit.org/show_bug.cgi?id=102148
        <rdar://problem/12695560>

        Reviewed by Darin Adler.

        * rendering/RenderEmbeddedObject.h: Promote layout() to protected.
        * rendering/RenderSnapshottedPlugIn.cpp: Add constants for threshold size for plugins that will auto-start.
        (WebCore::RenderSnapshottedPlugIn::layout): After layout, obtain the width and height of the element.
        If either dimension is 0, or the overall size of the plugin is smaller that the threshold size, move the
        display state to Playing. Assuming we will always layout before first paint, changing the state here
        should be safe.
        * rendering/RenderSnapshottedPlugIn.h:

2012-11-13  Kenneth Russell  <kbr@google.com>

        Notify embedder of lost contexts and allow overriding of WebGL support
        https://bugs.webkit.org/show_bug.cgi?id=101826

        Reviewed by Adam Barth.

        Add hooks notifying the embedder when OpenGL contexts are lost and
        allowing overriding of WebGL support on a per-frame basis.

        No tests yet; don't know how to test this solely within WebKit.
        Currently developing tests in the Chromium port exercising the
        notifications end-to-end. Once those are in place, I'm prepared to
        investigate adding tests for all ports.

        * html/canvas/WebGLRenderingContext.cpp:
        (WebCore):
        (WebCore::WebGLRenderingContext::create):
          Check whether embedder vetoes creation of new WebGL contexts.
        (WebCore::WebGLRenderingContext::loseContextImpl):
          Notify embedder that context was lost.
        (WebCore::WebGLRenderingContext::maybeRestoreContext):
          Check whether embedder vetoes restoration of existing WebGL contexts.
        * loader/FrameLoaderClient.h:
        (FrameLoaderClient):
        (WebCore::FrameLoaderClient::allowWebGL):
        (WebCore::FrameLoaderClient::didLoseWebGLContext):
          Hooks notifying embedder of lost contexts and asking permission to run WebGL.

2012-11-13  Scott Violet  <sky@chromium.org>

        [Chromium] Refactor theme font lookup into a factory
        https://bugs.webkit.org/show_bug.cgi?id=101949

        Reviewed by Tony Chang.

        This will ultimately allow us to use what is currently in RenderThemeChromiumLinux on windows.

        No new tests. Refactoring only.

        * WebCore.gyp/WebCore.gyp:
        * WebCore.gypi:
        * rendering/RenderThemeChromiumFontProvider.cpp: Added.
        (WebCore):
        (WebCore::RenderThemeChromiumFontProvider::defaultGUIFont): Moved into RenderThemeFontProvider.
        * rendering/RenderThemeChromiumFontProvider.h: Added.
        (WTF):
        (WebCore):
        (RenderThemeChromiumFontProvider): This is the font related methods.
        * rendering/RenderThemeChromiumFontProviderLinux.cpp: Added.
        (WebCore):
        (WebCore::RenderThemeChromiumFontProvider::setDefaultFontSize): What was in RenderThemeChromiumSkia::setDefaultFontSize.
        (WebCore::RenderThemeChromiumFontProvider::systemFont): What was in RenderThemeChromiumSkia::systemFont.
        * rendering/RenderThemeChromiumFontProviderWin.cpp: Added.
        (WebCore):
        (WebCore::pointsToPixels): Moved from RenderThemeChromiumWin.
        (WebCore::getNonClientMetrics): Moved from RenderThemeChromiumWin.
        (WebCore::systemFontSize): Moved from RenderThemeChromiumWin.
        (WebCore::RenderThemeChromiumFontProvider::systemFont): Moved from RenderThemeChromiumWin.
        (WebCore::RenderThemeChromiumFontProvider::setDefaultFontSize): Moved from RenderThemeChromiumWin.
        * rendering/RenderThemeChromiumSkia.cpp:
        (WebCore::RenderThemeChromiumSkia::RenderThemeChromiumSkia): Moved into RenderThemeFontProvider.
        (WebCore::RenderThemeChromiumSkia::systemFont): Calls to RenderThemeChromiumFontProvider.
        (WebCore::RenderThemeChromiumSkia::setDefaultFontSize): Calls to RenderThemeChromiumFontProvider.
        * rendering/RenderThemeChromiumSkia.h:
        (RenderThemeChromiumSkia): Moves defaultFontSize into RenderThemeChromiumFontProvider.
        * rendering/RenderThemeChromiumWin.cpp: Moves font code into RenderThemeFontProviderWin.
        (WebCore):
        * rendering/RenderThemeChromiumWin.h: Removed overriden methods now handled by RenderThemeChromiumSkia.
        (RenderThemeChromiumWin):

2012-11-13  Alec Flett  <alecflett@chromium.org>

        Add DOMRequestState to maintain world/ScriptExecutionContext state
        https://bugs.webkit.org/show_bug.cgi?id=102102

        Reviewed by Adam Barth.

        Introduce DOMRequestState, and convert IndexedDB over.

        No new tests, this is an abstraction layer for existing code.

        * Modules/indexeddb/IDBRequest.cpp:
        (WebCore::IDBRequest::IDBRequest):
        (WebCore::IDBRequest::onSuccess):
        (WebCore::IDBRequest::dispatchEvent):
        * Modules/indexeddb/IDBRequest.h:
        (IDBRequest):
        * WebCore.gypi:
        * bindings/v8/DOMRequestState.h: Added.
        (WebCore):
        (DOMRequestState):
        (WebCore::DOMRequestState::DOMRequestState):
        (Scope):
        (WebCore::DOMRequestState::Scope::Scope):
        (WebCore::DOMRequestState::scope):

2012-11-13  Robert Sesek  <rsesek@chromium.org>

        Sever Chromium's dependence on WebKitSystemInterface media control drawing functions in RenderThemeMac
        https://bugs.webkit.org/show_bug.cgi?id=101634

        Reviewed by Adam Barth.

        This splits out the common methods between RenderThemeMac and RenderThemeChromiumMac
        into RenderThemeMacShared.

        No new tests, just refactoring.

        * WebCore.gyp/WebCore.gyp: Remove RenderThemeMac.mm from platform/ sources list, since it's part of rendering/
        * WebCore.gypi: Add RenderThemeMacShared.{h,mm}
        * WebCore.xcodeproj/project.pbxproj: Add RenderThemeMacShared.{h,mm}
        * rendering/RenderThemeChromiumMac.h:
        * rendering/RenderThemeChromiumMac.mm:
        (WebCore::RenderThemeChromiumMac::popupInternalPaddingLeft):
        (WebCore::RenderThemeChromiumMac::popupInternalPaddingRight):
        (WebCore::RenderThemeChromiumMac::extraDefaultStyleSheet):
        * rendering/RenderThemeMac.h:
        (RenderThemeMac):
        * rendering/RenderThemeMac.mm:
        (WebCore):
        (WebCore::RenderTheme::themeForPage):
        (WebCore::RenderThemeMac::create):
        (WebCore::RenderThemeMac::RenderThemeMac):
        (WebCore::RenderThemeMac::~RenderThemeMac):
        (WebCore::RenderThemeMac::documentViewFor):
        (WebCore::mediaControllerTheme):
        (WebCore::RenderThemeMac::paintMediaSliderTrack):
        (WebCore::RenderThemeMac::paintMediaRewindButton):
        (WebCore::RenderThemeMac::paintMediaReturnToRealtimeButton):
        (WebCore::RenderThemeMac::paintMediaFullScreenVolumeSliderTrack):
        (WebCore::RenderThemeMac::paintMediaFullScreenVolumeSliderThumb):
        (WebCore::RenderThemeMac::extraMediaControlsStyleSheet):
        (WebCore::RenderThemeMac::extraFullScreenStyleSheet):
        * rendering/RenderThemeMacShared.h: Copied from Source/WebCore/rendering/RenderThemeMac.h.
        (WebCore):
        (RenderThemeMacShared):
        (WebCore::RenderThemeMacShared::supportsControlTints):
        (WebCore::RenderThemeMacShared::scrollbarControlSizeForPart):
        (WebCore::RenderThemeMacShared::supportsSelectionForegroundColors):
        (WebCore::RenderThemeMacShared::supportsClosedCaptioning):
        (WebCore::RenderThemeMacShared::updateActiveState):
        * rendering/RenderThemeMacShared.mm: Copied from Source/WebCore/rendering/RenderThemeMac.mm.
        (-[WebCoreRenderThemeNotificationObserver initWithTheme:WebCore::]):
        (-[WebCoreRenderThemeNotificationObserver systemColorsDidChange:]):
        (-[WebCoreTextFieldCell _coreUIDrawOptionsWithFrame:inView:includeFocus:]):
        (WebCore):
        (WebCore::RenderThemeMacShared::RenderThemeMacShared):
        (WebCore::RenderThemeMacShared::~RenderThemeMacShared):
        (WebCore::RenderThemeMacShared::platformActiveSelectionBackgroundColor):
        (WebCore::RenderThemeMacShared::platformInactiveSelectionBackgroundColor):
        (WebCore::RenderThemeMacShared::platformActiveListBoxSelectionBackgroundColor):
        (WebCore::RenderThemeMacShared::platformActiveListBoxSelectionForegroundColor):
        (WebCore::RenderThemeMacShared::platformInactiveListBoxSelectionForegroundColor):
        (WebCore::RenderThemeMacShared::platformFocusRingColor):
        (WebCore::RenderThemeMacShared::platformInactiveListBoxSelectionBackgroundColor):
        (WebCore::toFontWeight):
        (WebCore::RenderThemeMacShared::systemFont):
        (WebCore::convertNSColorToColor):
        (WebCore::menuBackgroundColor):
        (WebCore::RenderThemeMacShared::platformColorsDidChange):
        (WebCore::RenderThemeMacShared::systemColor):
        (WebCore::RenderThemeMacShared::usesTestModeFocusRingColor):
        (WebCore::RenderThemeMacShared::isControlStyled):
        (WebCore::RenderThemeMacShared::adjustRepaintRect):
        (WebCore::RenderThemeMacShared::inflateRect):
        (WebCore::RenderThemeMacShared::convertToPaintingRect):
        (WebCore::RenderThemeMacShared::updateCheckedState):
        (WebCore::RenderThemeMacShared::updateEnabledState):
        (WebCore::RenderThemeMacShared::updateFocusedState):
        (WebCore::RenderThemeMacShared::updatePressedState):
        (WebCore::RenderThemeMacShared::controlSupportsTints):
        (WebCore::RenderThemeMacShared::controlSizeForFont):
        (WebCore::RenderThemeMacShared::setControlSize):
        (WebCore::RenderThemeMacShared::sizeForFont):
        (WebCore::RenderThemeMacShared::sizeForSystemFont):
        (WebCore::RenderThemeMacShared::setSizeFromFont):
        (WebCore::RenderThemeMacShared::setFontFromControlSize):
        (WebCore::RenderThemeMacShared::controlSizeForSystemFont):
        (WebCore::RenderThemeMacShared::paintTextField):
        (WebCore::RenderThemeMacShared::adjustTextFieldStyle):
        (WebCore::RenderThemeMacShared::paintCapsLockIndicator):
        (WebCore::RenderThemeMacShared::paintTextArea):
        (WebCore::RenderThemeMacShared::adjustTextAreaStyle):
        (WebCore::RenderThemeMacShared::popupButtonMargins):
        (WebCore::RenderThemeMacShared::popupButtonSizes):
        (WebCore::RenderThemeMacShared::popupButtonPadding):
        (WebCore::RenderThemeMacShared::paintMenuList):
        (WebCore::RenderThemeMacShared::meterSizeForBounds):
        (WebCore::RenderThemeMacShared::paintMeter):
        (WebCore::RenderThemeMacShared::supportsMeter):
        (WebCore::RenderThemeMacShared::levelIndicatorStyleFor):
        (WebCore::RenderThemeMacShared::levelIndicatorFor):
        (WebCore::RenderThemeMacShared::progressBarSizes):
        (WebCore::RenderThemeMacShared::progressBarMargins):
        (WebCore::RenderThemeMacShared::minimumProgressBarHeight):
        (WebCore::RenderThemeMacShared::animationRepeatIntervalForProgressBar):
        (WebCore::RenderThemeMacShared::animationDurationForProgressBar):
        (WebCore::RenderThemeMacShared::adjustProgressBarStyle):
        (WebCore::RenderThemeMacShared::paintProgressBar):
        (WebCore::TopGradientInterpolate):
        (WebCore::BottomGradientInterpolate):
        (WebCore::MainGradientInterpolate):
        (WebCore::TrackGradientInterpolate):
        (WebCore::RenderThemeMacShared::paintMenuListButtonGradients):
        (WebCore::RenderThemeMacShared::paintMenuListButton):
        (WebCore::menuListButtonSizes):
        (WebCore::RenderThemeMacShared::adjustMenuListStyle):
        (WebCore::RenderThemeMacShared::popupInternalPaddingLeft):
        (WebCore::RenderThemeMacShared::popupInternalPaddingRight):
        (WebCore::RenderThemeMacShared::popupInternalPaddingTop):
        (WebCore::RenderThemeMacShared::popupInternalPaddingBottom):
        (WebCore::RenderThemeMacShared::adjustMenuListButtonStyle):
        (WebCore::RenderThemeMacShared::setPopupButtonCellState):
        (WebCore::RenderThemeMacShared::menuListSizes):
        (WebCore::RenderThemeMacShared::minimumMenuListSize):
        (WebCore::RenderThemeMacShared::adjustSliderTrackStyle):
        (WebCore::RenderThemeMacShared::paintSliderTrack):
        (WebCore::RenderThemeMacShared::adjustSliderThumbStyle):
        (WebCore::RenderThemeMacShared::paintSliderThumb):
        (WebCore::RenderThemeMacShared::paintSearchField):
        (WebCore::RenderThemeMacShared::setSearchCellState):
        (WebCore::RenderThemeMacShared::searchFieldSizes):
        (WebCore::RenderThemeMacShared::setSearchFieldSize):
        (WebCore::RenderThemeMacShared::adjustSearchFieldStyle):
        (WebCore::RenderThemeMacShared::paintSearchFieldCancelButton):
        (WebCore::RenderThemeMacShared::cancelButtonSizes):
        (WebCore::RenderThemeMacShared::adjustSearchFieldCancelButtonStyle):
        (WebCore::RenderThemeMacShared::resultsButtonSizes):
        (WebCore::RenderThemeMacShared::adjustSearchFieldDecorationStyle):
        (WebCore::RenderThemeMacShared::paintSearchFieldDecoration):
        (WebCore::RenderThemeMacShared::adjustSearchFieldResultsDecorationStyle):
        (WebCore::RenderThemeMacShared::paintSearchFieldResultsDecoration):
        (WebCore::RenderThemeMacShared::adjustSearchFieldResultsButtonStyle):
        (WebCore::RenderThemeMacShared::paintSearchFieldResultsButton):
        (WebCore::RenderThemeMacShared::sliderTickSize):
        (WebCore::RenderThemeMacShared::sliderTickOffsetFromTrackCenter):
        (WebCore::RenderThemeMacShared::adjustSliderThumbSize):
        (WebCore::RenderThemeMacShared::shouldShowPlaceholderWhenFocused):
        (WebCore::RenderThemeMacShared::popupButton):
        (WebCore::RenderThemeMacShared::search):
        (WebCore::RenderThemeMacShared::searchMenuTemplate):
        (WebCore::RenderThemeMacShared::sliderThumbHorizontal):
        (WebCore::RenderThemeMacShared::sliderThumbVertical):
        (WebCore::RenderThemeMacShared::textField):
        (WebCore::RenderThemeMacShared::fileListNameForWidth):
        (WebCore::RenderThemeMacShared::paintPlugInSnapshotOverlay):

2012-11-13  Tab Atkins  <tabatkins@google.com>

        CSS @charset parsing is too loose, doesn't match other browsers
        https://bugs.webkit.org/show_bug.cgi?id=101527

        Reviewed by Alexey Proskuryakov.

        Per <https://www.w3.org/Bugs/Public/show_bug.cgi?id=19882#attach_1244>,
        IE and FF have changed to be strict about @charset parsing,
        as the CSS 2.1 spec requires.
        Since @charset use is very uncommon anyway,
        we should match the new behavior and the spec for platform consistency.

        Test: fast/encoding/css-charset-evil/css-charset-evil.html

        * loader/TextResourceDecoder.cpp:
        (WebCore::bytesEqual):
        (WebCore::TextResourceDecoder::checkForCSSCharset):

2012-11-13  Kenichi Ishibashi  <bashi@chromium.org>

        [WebSocket] send() and close() should not throw an exception for an unpaired surrogate but use the replacement character
        https://bugs.webkit.org/show_bug.cgi?id=101569

        Reviewed by Alexey Proskuryakov.

        Replace unpaired surrogates with replacing character (U+FFFD) when
        encoding text messages and close reasons. This change is aimed at
        following the changes on the WebSocket API specification.

        Test: http/tests/websocket/tests/hybi/close-reason-too-long.html

        * Modules/websockets/WebSocket.cpp:
        (WebCore::WebSocket::close):
        Use String::StrictConversionReplacingUnpairedSurrogatesWithFFFD mode to encode
        text message. Remove invalid utf-8 check.
        * Modules/websockets/WebSocketChannel.cpp:
        (WebCore::WebSocketChannel::send):
        Use String::StrictConversionReplacingUnpairedSurrogatesWithFFFD mode to encode
        close reason. Remove invalid utf-8 check.

2012-11-13  Christophe Dumez  <christophe.dumez@intel.com>

        Make HTMLLegendElement.form behave according to specification
        https://bugs.webkit.org/show_bug.cgi?id=101044

        Reviewed by Kent Tamura.

        According to the HTML5 specification (http://dev.w3.org/html5/spec/single-page.html#dom-legend-form),
        The form IDL attribute's behavior depends on whether the legend element is in a fieldset element or
        not. If the legend has a fieldset element as its parent, then the form IDL attribute must return the
        same value as the form IDL attribute on that fieldset element. Otherwise, it must return null.

        This patch makes WebKit behaves according to specification (and Firefox). Previously, legend.form was
        not returning null if the element was not inside a fieldset. Also, legend.form did not necessarily
        return the same value as the parent fieldset's form attribute.

        Test: fast/forms/legend/legend-form.html

        * html/HTMLLegendElement.cpp:
        (WebCore):
        (WebCore::HTMLLegendElement::virtualForm):
        * html/HTMLLegendElement.h:
        (HTMLLegendElement):

2012-11-13  Mark Lam  <mark.lam@apple.com>

        Make an assertion in JSEventListener::jsFunction() more useful.
        https://bugs.webkit.org/show_bug.cgi?id=101985.

        Reviewed by Geoffrey Garen.

        The assertion was weakened in r134495. This strengthens it again.

        No new tests.

        * bindings/js/JSEventListener.h:
        (WebCore::JSEventListener::jsFunction):

2012-11-13  Dean Jackson  <dino@apple.com>

        Support list of tracks in caption media controls
        https://bugs.webkit.org/show_bug.cgi?id=101669

        Reviewed by Eric Carlson.

        Attempt four of commit. The first two times caused build failures on Chromium. The third time
        crashed the Windows test bot. It's also been rebased since r134488.

        Add some new elements to the media control shadow DOM that display the list of available
        tracks on an audio/video element. The UI is hidden by default everywhere but on Mac,
        where it is given a very basic design. At the moment only the list of available tracks
        are displayed; The followup bug will make the UI active: https://bugs.webkit.org/show_bug.cgi?id=101670

        No new tests - this doesn't expose any testable surface.

        * css/mediaControls.css: Added default rules that hide the new elements.
        * css/mediaControlsQuickTime.css: Specific rules that give a basic rendering of the new track list.
        * html/shadow/MediaControlElements.cpp:
        (WebCore::MediaControlElement::isShowing): Tests for the visibility of a control.
        (WebCore::MediaControlClosedCaptionsContainerElement::MediaControlClosedCaptionsContainerElement):
        (WebCore::MediaControlClosedCaptionsContainerElement::create):
        (WebCore::MediaControlClosedCaptionsContainerElement::shadowPseudoId):
        (WebCore::MediaControlToggleClosedCaptionsButtonElement::MediaControlToggleClosedCaptionsButtonElement):
        (WebCore::MediaControlToggleClosedCaptionsButtonElement::create): Now takes a reference to the media controls as a parameter.
        (WebCore::MediaControlToggleClosedCaptionsButtonElement::updateDisplayType):
        (WebCore::MediaControlToggleClosedCaptionsButtonElement::defaultEventHandler):
        (WebCore::MediaControlToggleClosedCaptionsButtonElement::shadowPseudoId):
        (WebCore::MediaControlClosedCaptionsTrackListElement::MediaControlClosedCaptionsTrackListElement): New element for holding a list of tracks to display.
        * html/shadow/MediaControlElements.h:
        (MediaControlElement):
        (MediaControlToggleClosedCaptionsButtonElement):
        (MediaControlClosedCaptionsContainerElement):
        (MediaControlClosedCaptionsTrackListElement): Examines the media element to build a shadow DOM that lists all the tracks available.
        * html/shadow/MediaControlsApple.cpp:
        (WebCore::MediaControlsApple::MediaControlsApple):
        (WebCore::MediaControlsApple::create): New track container and list elements created.
        (WebCore::MediaControlsApple::setMediaController): Hook up the new elements to the controller..
        (WebCore::MediaControlsApple::hide):
        (WebCore::MediaControlsApple::makeTransparent):
        (WebCore::MediaControlsApple::reset):
        (WebCore::MediaControlsApple::reportedError):
        (WebCore::MediaControlsApple::toggleClosedCaptionTrackList): Shows or hides the popup with the list of tracks.
        (WebCore):
        * html/shadow/MediaControlsApple.h:
        (MediaControlsApple):
        * html/shadow/MediaControlsChromium.cpp:
        (WebCore::MediaControlsChromium::initializeControls): Pass in the controls as a parameter.
        * html/shadow/MediaControls.h:
        (MediaControls):
        * platform/Language.cpp:
        (WebCore::displayNameForLanguageLocale): New function to return a human-readable name for a locale, given the identifier input.
        * platform/Language.h:
        (WebCore):
        * rendering/RenderMediaControls.cpp:
        (WebCore::RenderMediaControls::paintMediaControlsPart): New enum values into switch.
        * rendering/RenderMediaControlsChromium.cpp:
        (WebCore::RenderMediaControlsChromium::paintMediaControlsPart): New enum values into switch.

2012-11-13  Dimitri Glazkov  <dglazkov@chromium.org>

        Unreviewed, rolling out r134377.
        http://trac.webkit.org/changeset/134377
        https://bugs.webkit.org/show_bug.cgi?id=101133

        Caused a mysterious Android Clang build failure, needs
        investigation before landing again.

        * css/html.css:
        (input::-webkit-textfield-decoration-container):
        * html/TextFieldInputType.cpp:
        (WebCore::TextFieldInputType::attach):

2012-11-13  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r134482.
        http://trac.webkit.org/changeset/134482
        https://bugs.webkit.org/show_bug.cgi?id=102140

        The patch causes fast/regions/moved-content-node-crash.html to
        crash in Debug mode due to ASSERTION. (Requested by abucur on
        #webkit).

        * rendering/InlineFlowBox.cpp:
        (SameSizeAsInlineFlowBox):
        * rendering/InlineFlowBox.h:
        (WebCore::InlineFlowBox::InlineFlowBox):
        (InlineFlowBox):
        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::lineWidthForPaginatedLineChanged):
        * rendering/RenderBlockLineLayout.cpp:
        (WebCore::RenderBlock::layoutRunsAndFloatsInRange):
        (WebCore::RenderBlock::linkToEndLineIfNeeded):
        (WebCore::RenderBlock::determineStartPosition):
        * rendering/RootInlineBox.cpp:
        (WebCore::RootInlineBox::RootInlineBox):
        * rendering/RootInlineBox.h:
        (WebCore):
        (WebCore::RootInlineBox::paginationStrut):
        (WebCore::RootInlineBox::setPaginationStrut):
        (WebCore::RootInlineBox::isFirstAfterPageBreak):
        (WebCore::RootInlineBox::setIsFirstAfterPageBreak):
        (WebCore::RootInlineBox::paginatedLineWidth):
        (WebCore::RootInlineBox::setPaginatedLineWidth):
        (RootInlineBox):

2012-11-13  Xianzhu Wang  <wangxianzhu@chromium.org>

        Missing NodeRenderStyle.h include in WebCore/html/TextFieldInputType.cpp
        https://bugs.webkit.org/show_bug.cgi?id=102108

        Reviewed by Adam Barth.

        No new tests. Fix clang build break.

        * html/TextFieldInputType.cpp: Added #include "NodeRenderStyle.h"

2012-11-13  Chris Fleizach  <cfleizach@apple.com>

        AX: MathML types need to be semantically identified in AX tree
        https://bugs.webkit.org/show_bug.cgi?id=101263

        Reviewed by Beth Dakin.

        Semantically identify various MathML elements within the AX tree. This will allow
        screen readers to identify math types so that equations can be output more accurately.

        Test: platform/mac/accessibility/mathml-elements.html

        * accessibility/AccessibilityObject.h:
        (AccessibilityObject):
        (WebCore::AccessibilityObject::isMathElement):
        (WebCore::AccessibilityObject::isMathFraction):
        (WebCore::AccessibilityObject::isMathFenced):
        (WebCore::AccessibilityObject::isMathSubscriptSuperscript):
        (WebCore::AccessibilityObject::isMathRow):
        (WebCore::AccessibilityObject::isMathUnderOver):
        (WebCore::AccessibilityObject::isMathRoot):
        (WebCore::AccessibilityObject::isMathSquareRoot):
        (WebCore::AccessibilityObject::isMathText):
        (WebCore::AccessibilityObject::isMathNumber):
        (WebCore::AccessibilityObject::isMathOperator):
        (WebCore::AccessibilityObject::isMathFenceOperator):
        (WebCore::AccessibilityObject::isMathSeparatorOperator):
        (WebCore::AccessibilityObject::isMathIdentifier):
        (WebCore::AccessibilityObject::isMathTable):
        (WebCore::AccessibilityObject::isMathTableRow):
        (WebCore::AccessibilityObject::isMathTableCell):
        (WebCore::AccessibilityObject::mathRadicandObject):
        (WebCore::AccessibilityObject::mathRootIndexObject):
        (WebCore::AccessibilityObject::mathUnderObject):
        (WebCore::AccessibilityObject::mathOverObject):
        (WebCore::AccessibilityObject::mathNumeratorObject):
        (WebCore::AccessibilityObject::mathDenominatorObject):
        (WebCore::AccessibilityObject::mathBaseObject):
        (WebCore::AccessibilityObject::mathSubscriptObject):
        (WebCore::AccessibilityObject::mathSuperscriptObject):
        (WebCore::AccessibilityObject::mathFencedOpenString):
        (WebCore::AccessibilityObject::mathFencedCloseString):
        * accessibility/AccessibilityRenderObject.cpp:
        (WebCore::startOfContinuations):
            Handle a case where a MathML render element is created with the node of their parent (which could lead to an assert).
        (WebCore::AccessibilityRenderObject::textUnderElement):
            Handle the cases for RenderMathMLOperators which use the node of their parent, which confuses the normal textUnderElement() routine.
        (WebCore::AccessibilityRenderObject::accessibilityIsIgnored):
            Handle ignored cases for math elements
        (WebCore::AccessibilityRenderObject::determineAccessibilityRole):
        (WebCore::AccessibilityRenderObject::isMathElement):
        (WebCore::AccessibilityRenderObject::isMathFraction):
        (WebCore::AccessibilityRenderObject::isMathFenced):
        (WebCore::AccessibilityRenderObject::isMathSubscriptSuperscript):
        (WebCore::AccessibilityRenderObject::isMathRow):
        (WebCore::AccessibilityRenderObject::isMathUnderOver):
        (WebCore::AccessibilityRenderObject::isMathSquareRoot):
        (WebCore::AccessibilityRenderObject::isMathRoot):
        (WebCore::AccessibilityRenderObject::isMathOperator):
        (WebCore::AccessibilityRenderObject::isMathFenceOperator):
        (WebCore::AccessibilityRenderObject::isMathSeparatorOperator):
        (WebCore::AccessibilityRenderObject::isMathText):
        (WebCore::AccessibilityRenderObject::isMathNumber):
        (WebCore::AccessibilityRenderObject::isMathIdentifier):
        (WebCore::AccessibilityRenderObject::isMathTable):
        (WebCore::AccessibilityRenderObject::isMathTableRow):
        (WebCore::AccessibilityRenderObject::isMathTableCell):
        (WebCore::AccessibilityRenderObject::isIgnoredElementWithinMathTree):
            Make sure anonymouse blocks are ignored within math tree; make sure non-element type objects are ignored (like <mstyle>).
        (WebCore::AccessibilityRenderObject::mathRadicandObject):
        (WebCore::AccessibilityRenderObject::mathRootIndexObject):
        (WebCore::AccessibilityRenderObject::mathNumeratorObject):
        (WebCore::AccessibilityRenderObject::mathDenominatorObject):
        (WebCore::AccessibilityRenderObject::mathUnderObject):
        (WebCore::AccessibilityRenderObject::mathOverObject):
        (WebCore::AccessibilityRenderObject::mathBaseObject):
        (WebCore::AccessibilityRenderObject::mathSubscriptObject):
        (WebCore::AccessibilityRenderObject::mathSuperscriptObject):
        (WebCore::AccessibilityRenderObject::mathFencedOpenString):
        (WebCore::AccessibilityRenderObject::mathFencedCloseString):
        * accessibility/AccessibilityRenderObject.h:
        (AccessibilityRenderObject):
        * accessibility/mac/WebAccessibilityObjectWrapper.mm:
        (-[WebAccessibilityObjectWrapper additionalAccessibilityAttributeNames]):
        (createAccessibilityRoleMap):
        (-[WebAccessibilityObjectWrapper subrole]):
        (-[WebAccessibilityObjectWrapper accessibilityAttributeValue:]):
        * rendering/mathml/RenderMathMLBlock.cpp:
        (WebCore::RenderMathMLBlock::RenderMathMLBlock):
        * rendering/mathml/RenderMathMLBlock.h:
        (WebCore::RenderMathMLBlock::isRenderMathMLFenced):
        (WebCore::RenderMathMLBlock::isRenderMathMLFraction):
        (WebCore::RenderMathMLBlock::isRenderMathMLRoot):
        (WebCore::RenderMathMLBlock::isRenderMathMLSquareRoot):
        (WebCore::RenderMathMLBlock::isRenderMathMLSubSup):
        (WebCore::RenderMathMLBlock::isRenderMathMLUnderOver):
        (WebCore::RenderMathMLBlock::setIgnoreInAccessibilityTree):
        (WebCore::RenderMathMLBlock::ignoreInAccessibilityTree):
            Add ability to identify anonymous render blocks as items that AX should ignore.
        (RenderMathMLBlock):
        * rendering/mathml/RenderMathMLFenced.cpp:
        (WebCore::RenderMathMLFenced::createMathMLOperator):
            Identify which kind of math operator is being created on the fly (Fence or Separator)
        (WebCore::RenderMathMLFenced::makeFences):
        (WebCore::RenderMathMLFenced::addChild):
        * rendering/mathml/RenderMathMLFenced.h:
        (WebCore::RenderMathMLFenced::isRenderMathMLFenced):
        (RenderMathMLFenced):
        * rendering/mathml/RenderMathMLFraction.h:
        (WebCore::RenderMathMLFraction::isRenderMathMLFraction):
        * rendering/mathml/RenderMathMLOperator.cpp:
        (WebCore::RenderMathMLOperator::RenderMathMLOperator):
        (WebCore::RenderMathMLOperator::updateFromElement):
        (WebCore::RenderMathMLOperator::createGlyph):
             Mark anonymous render blocks as AX ignored.
        * rendering/mathml/RenderMathMLOperator.h:
        (WebCore::RenderMathMLOperator::setOperatorType):
        (WebCore::RenderMathMLOperator::operatorType):
        (RenderMathMLOperator):
        * rendering/mathml/RenderMathMLRoot.h:
        (WebCore::RenderMathMLRoot::isRenderMathMLRoot):
        * rendering/mathml/RenderMathMLSquareRoot.h:
        (WebCore::RenderMathMLSquareRoot::isRenderMathMLSquareRoot):
        * rendering/mathml/RenderMathMLSubSup.h:
        (WebCore::RenderMathMLSubSup::isRenderMathMLSubSup):
        * rendering/mathml/RenderMathMLUnderOver.h:
        (WebCore::RenderMathMLUnderOver::isRenderMathMLUnderOver):
        
2012-11-13  Mark Lam  <mark.lam@apple.com>

        JSEventListener should not access m_jsFunction when its wrapper is gone.
        https://bugs.webkit.org/show_bug.cgi?id=101985.

        Reviewed by Geoffrey Garen.

        Added a few null checks for m_wrapper before we do anything with m_jsFunction.

        No new tests.

        * bindings/js/JSEventListener.cpp:
        (WebCore::JSEventListener::initializeJSFunction):
        - Removed a now invalid assertion. m_wrapper is expected to have a
          valid non-zero value when jsFunction is valid. However, in the case
          of JSLazyEventListener (which extends JSEventListener), m_wrapper is
          initially 0 when m_jsFunction has not been realized yet. When
          JSLazyEventListener::initializeJSFunction() realizes m_jsFunction,
          it will set m_wrapper to an appropriate wrapper object.

          For this reason, JSEventListener::jsFunction() cannot do the null
          check on m_wrapper until after the call to initializeJSFunction.

          This, in turns, means that in the case of the non-lazy
          JSEventListener, initializeJSFunction() will also be called, and
          if the GC has collected the m_wrapper but the JSEventListener has
          not been removed yet, it is possible to see a null m_wrapper while
          m_jsFunction contains a non-zero stale value.

          Hence, this assertion of (m_wrapper || !m_jsFunction) in
          JSEventListener::initializeJSFunction() is not always true and
          should be removed.

        (WebCore::JSEventListener::visitJSFunction):
        (WebCore::JSEventListener::operator==):
        * bindings/js/JSEventListener.h:
        (WebCore::JSEventListener::jsFunction):

2012-11-13  Adam Barth  <abarth@webkit.org>

        [V8] instantiateV8Object should encapulate the tricky creationContext logic
        https://bugs.webkit.org/show_bug.cgi?id=102117

        Reviewed by Eric Seidel.

        The logic around creationContext is tricky. Rather than putting the
        logic in the code generator, we can centralize the logic in
        instantiateV8Object.

        This patch shouldn't have any behavior change.

        * bindings/scripts/CodeGeneratorV8.pm:
        (GenerateToV8Converters):
        * bindings/v8/V8DOMWrapper.cpp:
        (V8WrapperInstantiationScope):
        (WebCore::V8WrapperInstantiationScope::V8WrapperInstantiationScope):
        (WebCore::V8WrapperInstantiationScope::~V8WrapperInstantiationScope):
        (WebCore::V8WrapperInstantiationScope::context):
        (WebCore):
        (WebCore::V8DOMWrapper::instantiateV8Object):
        * bindings/v8/V8DOMWrapper.h:
        (V8DOMWrapper):

2012-11-13  Silvia Pfeiffer  <silviapf@chromium.org>

        Clean up the inheritance tree under the MediaControls Class.
        https://bugs.webkit.org/show_bug.cgi?id=88871

        Reviewed by Eric Carlson.

        This patch removes code duplication between the Chromium and Safari
        media controls shadow DOMs.
        This is achieved by pulling common functions that are identical (or
        almost identical) between the different platforms into the base class.
        The derived classes are renamed based on their platform:
        - MediaControlRootElement                to MediaControlsApple.
        - MediaControlRootElementChromium        to MediaControlsChromium.
        - MediaControlRootElementChromiumAndroid to MediaControlsChromiumAndroid.
        MediaControls is now no longer an abstract base class, but its "create"
        function is only implemented in the port-specific header file, so it's
        on purpose incomplete in the MediaControls.cpp file.

        No new tests because this is refactoring work only.

        * CMakeLists.txt:
          Rename MediaControlRootElement.cpp to MediaControlsApple.cpp .
        * GNUmakefile.list.am:
          Rename MediaControlRootElement.[cpp,h] to MediaControlsApple.[cpp,h] .
        * Target.pri:
          Rename MediaControlRootElement.cpp to MediaControlsApple.cpp .
        * WebCore.gypi:
          Rename MediaControlRootElement[Chromium[Android]].[cpp,h] to MediaControls[Apple,Chromium[Android]].[cpp,h] .
        * WebCore.order:
          Rename MediaControlRootElement symbols to MediaControlsApple symbols.
        * WebCore.vcproj/WebCore.vcproj:
          Rename MediaControlRootElement.[cpp,h] to MediaControlsApple.[cpp,h] .
        * WebCore.xcodeproj/project.pbxproj:
          Rename MediaControlRootElement.[cpp,h] to MediaControlsApple.[cpp,h] .
        * html/shadow/MediaControlElements.cpp:
        (WebCore::MediaControlTimelineElement::defaultEventHandler):
          Remove dependency on MediaControlRootElement.h (base class MediaControls.h is still there).
          Rename updateTimeDisplay() to updateCurrentTimeDisplay().
        * html/shadow/MediaControls.cpp:
        (WebCore::MediaControls::MediaControls):
          Added initialization for media elements that all platform controls share.
        (WebCore):
          Removed include files that are already included in header file.
        (WebCore::MediaControls::setMediaController):
          Added controller assignment for media elements that all platform controls share.
        (WebCore::MediaControls::reset):
          Added resets for media elements that all platform controls share.
        (WebCore::MediaControls::reportedError):
          Added error handling for media elements that all platform controls share.
        (WebCore::MediaControls::loadedMetadata):
          Added default action for loadedMetadata event.
        (WebCore::MediaControls::show):
        (WebCore::MediaControls::hide):
        (WebCore::MediaControls::makeOpaque):
        (WebCore::MediaControls::makeTransparent):
        (WebCore::MediaControls::shouldHideControls):
        (WebCore::MediaControls::bufferingProgressed):
        (WebCore::MediaControls::playbackStarted):
        (WebCore::MediaControls::playbackProgressed):
        (WebCore::MediaControls::playbackStopped):
        (WebCore::MediaControls::updateCurrentTimeDisplay):
        (WebCore::MediaControls::showVolumeSlider):
        (WebCore::MediaControls::changedMute):
        (WebCore::MediaControls::changedVolume):
        (WebCore::MediaControls::changedClosedCaptionsVisibility):
        (WebCore::MediaControls::enteredFullscreen):
        (WebCore::MediaControls::exitedFullscreen):
        (WebCore::MediaControls::defaultEventHandler):
        (WebCore::MediaControls::hideFullscreenControlsTimerFired):
        (WebCore::MediaControls::startHideFullscreenControlsTimer):
        (WebCore::MediaControls::stopHideFullscreenControlsTimer):
        (WebCore::MediaControls::shadowPseudoId):
        (WebCore::MediaControls::containsRelatedTarget):
        (WebCore::MediaControls::createTextTrackDisplay):
        (WebCore::MediaControls::showTextTrackDisplay):
        (WebCore::MediaControls::hideTextTrackDisplay):
        (WebCore::MediaControls::updateTextTrackDisplay):
          Added default actions for all these media controls member functions.
        * html/shadow/MediaControls.h:
        (WebCore):
          Added include files and forward class declarations that all media controls share.
        (MediaControls):
          Make all pure virtual functions that have default implementations just virtual.
        (WebCore::MediaControls::updateStatusDisplay):
          Add an empty virtual updateStatusDisplay function which is used by media elements.
        * html/shadow/MediaControlsApple.cpp: Renamed from Source/WebCore/html/shadow/MediaControlRootElement.cpp.
          Reduced Apple-specific media control functions by relying on default implementations in the base class.
        * html/shadow/MediaControlsApple.h: Renamed from Source/WebCore/html/shadow/MediaControlRootElement.h.
          Reduced Apple-specific media control elements by relying on some elements in the base class.
        * html/shadow/MediaControlsChromium.cpp: Renamed from Source/WebCore/html/shadow/MediaControlRootElementChromium.cpp.
          Reduced Chromium-specific media control functions by relying on default implementations in the base class.
        * html/shadow/MediaControlsChromium.h: Renamed from Source/WebCore/html/shadow/MediaControlRootElementChromium.h.
          Reduced Chromium-specific media control functions by relying on default implementations in the base class.
        * html/shadow/MediaControlsChromiumAndroid.cpp: Renamed from Source/WebCore/html/shadow/MediaControlRootElementChromiumAndroid.cpp.
          Renamed class name and base class name.
        * html/shadow/MediaControlsChromiumAndroid.h: Renamed from Source/WebCore/html/shadow/MediaControlRootElementChromiumAndroid.h.
          Renamed class name and base class name.
        * rendering/RenderTheme.h:
        (WebCore::RenderTheme::timeWithoutMouseMovementBeforeHidingControls):
          Moved timeWithoutMouseMovementBeforeHidingControls variable from all classes to a theme-specific function.

2012-11-13  Benjamin Poulain  <benjamin@webkit.org>

        CSSParser::setStyleSheet() should be inline
        https://bugs.webkit.org/show_bug.cgi?id=101829

        Reviewed by Andreas Kling.

        * css/CSSParser.cpp:
        * css/CSSParser.h:
        (WebCore::CSSParser::setStyleSheet):
        CSSParser::setStyleSheet() just assign a pointer, it does not even
        change a ref-count. The function should probably be in the header.

2012-11-13  Andrei Bucur  <abucur@adobe.com>

        [CSS Regions] Add Region info for RootLineBoxes and pack the pagination data
        https://bugs.webkit.org/show_bug.cgi?id=101332

        Reviewed by David Hyatt.

        Currently the pagination information for lines is spread between the RootInlineBox and InlineFlowBox classes, consuming memory even though
        the boxes were not the result of an pagination layout. To overcome this, a new struct (LineFragmentationData) is created that wraps all the data,
        including a new member, the containing Region for the line.
        The containing Region is used to detect if a line changed the Region where it resides. This will be helpful especially when implementing region
        styling for layout properties (e.g. the font-size property https://bugs.webkit.org/show_bug.cgi?id=95559 ).
        A line can change the region when it is shifted inside the containing block or if the entire block moves. This means it's better to delegate
        the task of updating the containing Region to the block.

        Tests: No new tests because there is no functional change.

        * rendering/InlineFlowBox.cpp:
        (SameSizeAsInlineFlowBox):
        * rendering/InlineFlowBox.h:
        (WebCore::InlineFlowBox::InlineFlowBox):
        (InlineFlowBox):
        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::lineWidthForPaginatedLineChanged):
        * rendering/RenderBlockLineLayout.cpp:
        (WebCore::RenderBlock::layoutRunsAndFloatsInRange):
        (WebCore::RenderBlock::linkToEndLineIfNeeded):
        (WebCore::RenderBlock::determineStartPosition):
        * rendering/RootInlineBox.cpp:
        (WebCore::RootInlineBox::RootInlineBox):
        (WebCore::RootInlineBox::setContainingRegion):
        (WebCore):
        * rendering/RootInlineBox.h:
        (WebCore):
        (WebCore::RootInlineBox::paginationStrut):
        (WebCore::RootInlineBox::setPaginationStrut):
        (WebCore::RootInlineBox::isFirstAfterPageBreak):
        (WebCore::RootInlineBox::setIsFirstAfterPageBreak):
        (WebCore::RootInlineBox::paginatedLineWidth):
        (WebCore::RootInlineBox::setPaginatedLineWidth):
        (RootInlineBox):
        (WebCore::RootInlineBox::containingRegion):
        (WebCore::RootInlineBox::ensureLineFragmentationData):
        (LineFragmentationData):
        (WebCore::RootInlineBox::LineFragmentationData::LineFragmentationData):

2012-11-13  Milian Wolff  <milian.wolff@kdab.com>

        [Qt] QNX build fails due to signature change in gl2.h header (glShaderSource)
        https://bugs.webkit.org/show_bug.cgi?id=98038

        Reviewed by Simon Hausmann.

        Cast the function to the expected type, just like it is done on non-Qt/OpenGL2 ES platforms.

        * platform/graphics/OpenGLShims.cpp:
        (WebCore):

2012-11-13  Chris Fleizach  <cfleizach@apple.com>

        WebKit exposes ARIA rowheader role as AXUnknown when not contained in table/grid
        https://bugs.webkit.org/show_bug.cgi?id=101616

        Reviewed by Beth Dakin.

        If the rowheader role is exposed because the element is not within a table, the mac platform
        should map that to a generic group.

        Test: platform/mac/accessibility/rowheader-outside-table-role.html

        * accessibility/mac/WebAccessibilityObjectWrapper.mm:
        (createAccessibilityRoleMap):

2012-11-13  Stephen White  <senorblanco@chromium.org>

        [Chromium] Fix SkImageFilter DAG path to pass all css3/filters tests
        https://bugs.webkit.org/show_bug.cgi?id=101952

        Reviewed by James Robinson.

        With these changes, all of the css3/filters tests pass when the
        if-test in GraphicsLayerChromium::setFilters() is forced true (for
        now, it remains true only if there's a reference filter in the chain).

        Covered by the css3/filters tests (when the switch is thrown in
        GraphicsLayerChromium::setFilters()).

        * WebCore.gypi:
        * platform/graphics/chromium/GraphicsLayerChromium.cpp:
        Drop to software rendering if there's a custom filter in the chain.
        This is the same as the WebFilterOperations path is doing.
        * platform/graphics/filters/skia/DropShadowImageFilter.cpp: Added.
        * platform/graphics/filters/skia/DropShadowImageFilter.h: Added.
        New implementation of drop-shadow filter; equivalent to
        the path in cc/render_surface_filters.cc.
        * platform/graphics/filters/skia/SkiaImageFilterBuilder.cpp:
        Fix the sepia and grayscale filters (value was inverted).

2012-11-13  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r134442.
        http://trac.webkit.org/changeset/134442
        https://bugs.webkit.org/show_bug.cgi?id=102111

        Does not compile on apple-mac (Requested by abarth on
        #webkit).

        * CMakeLists.txt:
        * GNUmakefile.list.am:
        * Target.pri:
        * WebCore.gypi:
        * WebCore.vcproj/WebCore.vcproj:
        * WebCore.xcodeproj/project.pbxproj:
        * css/CSSCursorImageValue.cpp:
        (WebCore::CSSCursorImageValue::cachedImage):
        * css/CSSFontFaceSrcValue.cpp:
        (WebCore::CSSFontFaceSrcValue::cachedFont):
        * css/CSSImageSetValue.cpp:
        (WebCore::CSSImageSetValue::cachedImageSet):
        * css/CSSImageValue.cpp:
        (WebCore::CSSImageValue::cachedImage):
        * css/CSSImageValue.h:
        (WebCore):
        (CSSImageValue):
        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::loadPendingImage):
        * css/StyleRuleImport.cpp:
        (WebCore::StyleRuleImport::requestStyleSheet):
        * css/WebKitCSSSVGDocumentValue.cpp:
        (WebCore::WebKitCSSSVGDocumentValue::load):
        * css/WebKitCSSShaderValue.cpp:
        (WebCore::WebKitCSSShaderValue::cachedShader):
        * dom/ScriptElement.cpp:
        (WebCore::ScriptElement::requestScript):
        * html/HTMLLinkElement.cpp:
        (WebCore::HTMLLinkElement::process):
        * html/parser/CSSPreloadScanner.cpp:
        (WebCore::CSSPreloadScanner::emitRule):
        * html/parser/CSSPreloadScanner.h:
        (CSSPreloadScanner):
        * html/parser/HTMLPreloadScanner.cpp:
        (WebCore::PreloadTask::preload):
        * loader/ImageLoader.cpp:
        (WebCore::ImageLoader::updateFromElement):
        * loader/cache/CachedResourceLoader.cpp:
        (WebCore::CachedResourceLoader::requestImage):
        (WebCore::CachedResourceLoader::requestResource):
        (WebCore::CachedResourceLoader::determineRevalidationPolicy):
        (WebCore):
        (WebCore::CachedResourceLoader::preload):
        * loader/cache/CachedResourceLoader.h:
        (WebCore):
        (CachedResourceLoader):
        * loader/cache/CachedResourceRequest.cpp:
        (WebCore::CachedResourceRequest::CachedResourceRequest):
        * loader/cache/CachedResourceRequest.h:
        (CachedResourceRequest):
        (WebCore::CachedResourceRequest::defer):
        (WebCore::CachedResourceRequest::setDefer):
        * loader/cache/CachedResourceRequestInitiators.cpp: Removed.
        * loader/cache/CachedResourceRequestInitiators.h: Removed.
        * loader/icon/IconLoader.cpp:
        (WebCore::IconLoader::startLoading):
        * platform/ThreadGlobalData.cpp:
        (WebCore::ThreadGlobalData::ThreadGlobalData):
        * platform/ThreadGlobalData.h:
        (ThreadGlobalData):
        * svg/SVGFEImageElement.cpp:
        (WebCore::SVGFEImageElement::requestImageResource):
        * svg/SVGFontFaceUriElement.cpp:
        (WebCore::SVGFontFaceUriElement::loadFont):
        * svg/SVGUseElement.cpp:
        (WebCore::SVGUseElement::svgAttributeChanged):

2012-11-13  Chris Fleizach  <cfleizach@apple.com>

        AX: file upload input text value is not exposed through accessibility
        https://bugs.webkit.org/show_bug.cgi?id=100583

        Reviewed by Beth Dakin.

        This is a hard problem to solve on the Mac because there are three pieces of information
             1) The type of button 2) The text on the button 3) The text for the value.
        I think the best compromise is to label this as a file upload button type in the role description, 
        and then expose the file path text as the AXTitle. 
        This will give the more relevant information and should be clear what is happening.

        Test: platform/mac/accessibility/file-upload-button-subrole.html

        * English.lproj/Localizable.strings:
        * accessibility/mac/WebAccessibilityObjectWrapper.mm:
        (-[WebAccessibilityObjectWrapper subrole]):
        (-[WebAccessibilityObjectWrapper roleDescription]):
        (-[WebAccessibilityObjectWrapper accessibilityTitle]):
        * platform/LocalizedStrings.cpp:
        (WebCore::AXFileUploadButtonText):
        * platform/LocalizedStrings.h:

2012-11-13  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r133944.
        http://trac.webkit.org/changeset/133944
        https://bugs.webkit.org/show_bug.cgi?id=102118

        Only JS bindings support NATIVE_TYPE_ERR (Requested by arv on
        #webkit).

        * bindings/scripts/CodeGeneratorV8.pm:
        (GenerateFunctionCallback):
        (GenerateParametersCheck):
        (GenerateSingleConstructorCallback):
        (GenerateNamedConstructorCallback):
        (TypeCanFailConversion):
        * dom/Element.cpp:
        (WebCore::Element::setAttributeNode):
        (WebCore::Element::removeAttributeNode):
        * dom/Element.idl:

2012-11-13  Adam Barth  <abarth@webkit.org>

        Unreviewed.

        Update run-bindings-tests results.

        * bindings/scripts/test/V8/V8Float64Array.cpp:
        (WebCore::V8Float64Array::dispatchWrapCustom):
        (WebCore::V8Float64Array::wrapSlow):
        * bindings/scripts/test/V8/V8Float64Array.h:
        (WebCore::V8Float64Array::toNative):
        (V8Float64Array):
        (WebCore):
        (WebCore::dispatchWrap):
        (WebCore::toV8Object):
        (WebCore::toV8):
        * bindings/scripts/test/V8/V8TestActiveDOMObject.cpp:
        (WebCore::V8TestActiveDOMObject::wrapSlow):
        * bindings/scripts/test/V8/V8TestActiveDOMObject.h:
        (WebCore::V8TestActiveDOMObject::toNative):
        (V8TestActiveDOMObject):
        (WebCore):
        (WebCore::dispatchWrap):
        (WebCore::toV8Object):
        (WebCore::toV8):
        * bindings/scripts/test/V8/V8TestCustomNamedGetter.cpp:
        (WebCore::V8TestCustomNamedGetter::wrapSlow):
        * bindings/scripts/test/V8/V8TestCustomNamedGetter.h:
        (WebCore::V8TestCustomNamedGetter::toNative):
        (V8TestCustomNamedGetter):
        (WebCore):
        (WebCore::dispatchWrap):
        (WebCore::toV8Object):
        (WebCore::toV8):
        * bindings/scripts/test/V8/V8TestEventConstructor.cpp:
        (WebCore::V8TestEventConstructor::wrapSlow):
        * bindings/scripts/test/V8/V8TestEventConstructor.h:
        (WebCore::V8TestEventConstructor::toNative):
        (V8TestEventConstructor):
        (WebCore):
        (WebCore::dispatchWrap):
        (WebCore::toV8Object):
        (WebCore::toV8):
        * bindings/scripts/test/V8/V8TestEventTarget.cpp:
        (WebCore::V8TestEventTarget::wrapSlow):
        * bindings/scripts/test/V8/V8TestEventTarget.h:
        (WebCore::V8TestEventTarget::toNative):
        (V8TestEventTarget):
        (WebCore):
        (WebCore::dispatchWrap):
        (WebCore::toV8Object):
        (WebCore::toV8):
        * bindings/scripts/test/V8/V8TestException.cpp:
        (WebCore::V8TestException::wrapSlow):
        * bindings/scripts/test/V8/V8TestException.h:
        (WebCore::V8TestException::toNative):
        (V8TestException):
        (WebCore):
        (WebCore::dispatchWrap):
        (WebCore::toV8Object):
        (WebCore::toV8):
        * bindings/scripts/test/V8/V8TestInterface.cpp:
        (WebCore::V8TestInterface::wrapSlow):
        * bindings/scripts/test/V8/V8TestInterface.h:
        (WebCore::V8TestInterface::toNative):
        (V8TestInterface):
        (WebCore):
        (WebCore::dispatchWrap):
        (WebCore::toV8Object):
        (WebCore::toV8):
        * bindings/scripts/test/V8/V8TestMediaQueryListListener.cpp:
        (WebCore::V8TestMediaQueryListListener::wrapSlow):
        * bindings/scripts/test/V8/V8TestMediaQueryListListener.h:
        (WebCore::V8TestMediaQueryListListener::toNative):
        (V8TestMediaQueryListListener):
        (WebCore):
        (WebCore::dispatchWrap):
        (WebCore::toV8Object):
        (WebCore::toV8):
        * bindings/scripts/test/V8/V8TestNamedConstructor.cpp:
        (WebCore::V8TestNamedConstructor::wrapSlow):
        * bindings/scripts/test/V8/V8TestNamedConstructor.h:
        (WebCore::V8TestNamedConstructor::toNative):
        (V8TestNamedConstructor):
        (WebCore):
        (WebCore::dispatchWrap):
        (WebCore::toV8Object):
        (WebCore::toV8):
        * bindings/scripts/test/V8/V8TestNode.cpp:
        (WebCore::V8TestNode::wrapSlow):
        * bindings/scripts/test/V8/V8TestNode.h:
        (WebCore::V8TestNode::toNative):
        (V8TestNode):
        (WebCore):
        (WebCore::dispatchWrap):
        (WebCore::toV8Object):
        (WebCore::toV8):
        (WebCore::toV8Fast):
        * bindings/scripts/test/V8/V8TestObj.cpp:
        (WebCore::V8TestObj::wrapSlow):
        * bindings/scripts/test/V8/V8TestObj.h:
        (WebCore::V8TestObj::toNative):
        (V8TestObj):
        (WebCore):
        (WebCore::dispatchWrap):
        (WebCore::toV8Object):
        (WebCore::toV8):
        * bindings/scripts/test/V8/V8TestOverloadedConstructors.cpp:
        (WebCore::V8TestOverloadedConstructors::wrapSlow):
        * bindings/scripts/test/V8/V8TestOverloadedConstructors.h:
        (WebCore::V8TestOverloadedConstructors::toNative):
        (V8TestOverloadedConstructors):
        (WebCore):
        (WebCore::dispatchWrap):
        (WebCore::toV8Object):
        (WebCore::toV8):
        * bindings/scripts/test/V8/V8TestSerializedScriptValueInterface.cpp:
        (WebCore::V8TestSerializedScriptValueInterface::wrapSlow):
        * bindings/scripts/test/V8/V8TestSerializedScriptValueInterface.h:
        (WebCore::V8TestSerializedScriptValueInterface::toNative):
        (V8TestSerializedScriptValueInterface):
        (WebCore):
        (WebCore::dispatchWrap):
        (WebCore::toV8Object):
        (WebCore::toV8):

2012-11-13  Adam Barth  <abarth@webkit.org>

        Unreviewed.

        Speculative build fix for Qt.

        * dom/make_names.pl:
        (printWrapperFactoryCppFile):

2012-11-13  Sami Kyostila  <skyostil@chromium.org>

        Allow painting outside overflow clip in accelerated scrolling layers
        https://bugs.webkit.org/show_bug.cgi?id=100524

        Reviewed by Simon Fraser.

        In preparation for avoiding repaints when scrolling child layers, make it
        possible to paint outside the overflow clip.

        Test: compositing/overflow/updating-scrolling-content.html

        * rendering/LayoutState.h:
        (LayoutState):
        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::paint):
        * rendering/RenderBox.cpp:
        (WebCore::RenderBox::applyCachedClipAndScrollOffsetForRepaint):
        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::repaintBlockSelectionGaps):

2012-11-13  Patrick Gansterer  <paroga@webkit.org>

        Port SimpleFontDataWin.cpp to WinCE
        https://bugs.webkit.org/show_bug.cgi?id=97889

        Reviewed by Brent Fulgham.

        Add #if !OS(WINCE) around some parts of the code, so it can be used by the WinCE port too in a next step.
        Also cleaned up the include headers.

        * platform/graphics/win/SimpleFontDataWin.cpp:
        (WebCore::SimpleFontData::initGDIFont):
        (WebCore::SimpleFontData::platformDestroy):
        (WebCore::SimpleFontData::boundsForGDIGlyph):
        (WebCore):
        (WebCore::SimpleFontData::widthForGDIGlyph):

2012-11-13  Pavel Feldman  <pfeldman@chromium.org>

        Web Inspector: [Chromium] move spectrum.css into the standalone css files group.

        Not reviewed: moved css file in gypi.

        * WebCore.gypi:

2012-11-13  Dimitri Glazkov  <dglazkov@chromium.org>

        Unreviewed, rolling out r134434.
        http://trac.webkit.org/changeset/134434
        https://bugs.webkit.org/show_bug.cgi?id=102072

        The test that was added asserts in loader.

        * loader/FrameLoader.cpp:
        (WebCore::createWindow):
        * page/DOMWindow.cpp:
        (WebCore):
        (WebCore::DOMWindow::adjustWindowRect):
        (WebCore::DOMWindow::moveBy):
        (WebCore::DOMWindow::moveTo):
        (WebCore::DOMWindow::resizeBy):
        (WebCore::DOMWindow::resizeTo):
        (WebCore::DOMWindow::open):
        (WebCore::DOMWindow::showModalDialog):
        * page/DOMWindow.h:
        (DOMWindow):

2012-11-13  Dan Carney  <dcarney@google.com>

        [V8] More efficient wrapper dispatch
        https://bugs.webkit.org/show_bug.cgi?id=102082

        Reviewed by Adam Barth.

        Dispatching a call to V8Whatever::wrap involved a chain
        of calls, each of which checked its wrapper cache.
        This refactor gives calls only 2 choices of functions to call:
        toV8 and toV8Object instead of wrap. wrap has been renamed to
        dispatchWrap and no longer contains cache checks.
        Additionally, classes which require a custom toV8 function
        have had all wrapping and caching calls removed, as they could
        not have been accessed.

        No new tests. Sufficiently covered.

        * Modules/indexeddb/IDBAny.idl:
        * Modules/indexeddb/IDBKey.idl:
        * WebCore.gypi:
        * bindings/scripts/CodeGeneratorV8.pm:
        (GenerateHeader):
        (GenerateNormalAttrGetter):
        (GenerateImplementation):
        (GenerateToV8Converters):
        * bindings/scripts/IDLAttributes.txt:
        * bindings/v8/SerializedScriptValue.cpp:
        * bindings/v8/custom/V8BlobCustom.cpp:
        (WebCore::V8Blob::dispatchWrapCustom):
        * bindings/v8/custom/V8CSSRuleCustom.cpp:
        (WebCore::V8CSSRule::dispatchWrapCustom):
        * bindings/v8/custom/V8CSSValueCustom.cpp:
        (WebCore::V8CSSValue::dispatchWrapCustom):
        * bindings/v8/custom/V8CanvasRenderingContextCustom.cpp:
        (WebCore::V8CanvasRenderingContext::dispatchWrapCustom):
        * bindings/v8/custom/V8DataViewCustom.cpp:
        (WebCore):
        (WebCore::V8DataView::dispatchWrapCustom):
        * bindings/v8/custom/V8DocumentCustom.cpp:
        (WebCore::V8Document::dispatchWrapCustom):
        * bindings/v8/custom/V8ElementCustom.cpp: Copied from Source/WebCore/bindings/v8/custom/V8PerformanceEntryCustom.cpp.
        (WebCore):
        (WebCore::V8Element::dispatchWrapCustom):
        * bindings/v8/custom/V8EntryCustom.cpp:
        (WebCore::V8Entry::dispatchWrapCustom):
        * bindings/v8/custom/V8EntrySyncCustom.cpp:
        (WebCore::V8EntrySync::dispatchWrapCustom):
        * bindings/v8/custom/V8EventCustom.cpp:
        (WebCore):
        (WebCore::V8Event::dispatchWrapCustom):
        * bindings/v8/custom/V8HTMLCollectionCustom.cpp:
        (WebCore::V8HTMLCollection::dispatchWrapCustom):
        * bindings/v8/custom/V8HTMLDocumentCustom.cpp:
        (WebCore::V8HTMLDocument::dispatchWrapCustom):
        * bindings/v8/custom/V8HTMLElementCustom.cpp:
        (WebCore::V8HTMLElement::dispatchWrapCustom):
        * bindings/v8/custom/V8ImageDataCustom.cpp:
        (WebCore::V8ImageData::dispatchWrapCustom):
        * bindings/v8/custom/V8NodeCustom.cpp:
        (WebCore::V8Node::dispatchWrapCustom):
        * bindings/v8/custom/V8PerformanceEntryCustom.cpp:
        (WebCore::V8PerformanceEntry::dispatchWrapCustom):
        * bindings/v8/custom/V8SVGDocumentCustom.cpp:
        (WebCore::V8SVGDocument::dispatchWrapCustom):
        * bindings/v8/custom/V8SVGElementCustom.cpp:
        (WebCore::V8SVGElement::dispatchWrapCustom):
        * bindings/v8/custom/V8SVGPathSegCustom.cpp:
        (WebCore::V8SVGPathSeg::dispatchWrapCustom):
        * bindings/v8/custom/V8StyleSheetCustom.cpp:
        (WebCore::V8StyleSheet::dispatchWrapCustom):
        * dom/Element.idl:
        * dom/make_names.pl:
        (printWrapperFunctions):
        (printWrapperFactoryCppFile):
        (printWrapperFactoryHeaderFile):
        * html/MicroDataItemValue.idl:
        * inspector/ScriptProfile.idl:
        * inspector/ScriptProfileNode.idl:
        * page/DOMWindow.idl:
        * workers/WorkerContext.idl:

2012-11-13  Dimitri Glazkov  <dglazkov@chromium.org>

        Unreviewed, rolling out r134367.
        http://trac.webkit.org/changeset/134367
        https://bugs.webkit.org/show_bug.cgi?id=100738

        Speculative rollout, could have cause Dromaeo setAttribute
        perf regression.

        * dom/Element.cpp:
        (WebCore::Element::attributeChanged):
        (WebCore::checkNeedsStyleInvalidationForClassChange):
        (WebCore::Element::classAttributeChanged):

2012-11-13  Marja Hölttä  <marja@chromium.org>

        Add initiator to CachedResourceRequest.
        https://bugs.webkit.org/show_bug.cgi?id=101935

        Reviewed by Adam Barth.

        Motivation: Chromium needs to know which elements request a
        resource (such as an image or a script) (bug 92761). In addition,
        for exposing resource timing information (bug 84883) we need to
        store the initiator, and this is the first step towards it.

        No new tests: No visible change in behavior.

        * CMakeLists.txt:
        * GNUmakefile.list.am:
        * Target.pri:
        * WebCore.gypi:
        * WebCore.vcproj/WebCore.vcproj:
        * WebCore.xcodeproj/project.pbxproj:
        * css/CSSCrossfadeValue.cpp:
        (WebCore::cachedImageForCSSValue):
        * css/CSSCursorImageValue.cpp:
        (WebCore::CSSCursorImageValue::cachedImage):
        * css/CSSFontFaceSrcValue.cpp:
        (WebCore::CSSFontFaceSrcValue::cachedFont):
        * css/CSSImageSetValue.cpp:
        (WebCore::CSSImageSetValue::cachedImageSet):
        * css/CSSImageValue.cpp:
        (WebCore::CSSImageValue::cachedImage):
        * css/CSSImageValue.h:
        (WebCore):
        (CSSImageValue):
        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::loadPendingImage):
        * css/StyleRuleImport.cpp:
        (WebCore::StyleRuleImport::requestStyleSheet):
        * css/WebKitCSSSVGDocumentValue.cpp:
        (WebCore::WebKitCSSSVGDocumentValue::load):
        * css/WebKitCSSShaderValue.cpp:
        (WebCore::WebKitCSSShaderValue::cachedShader):
        * dom/ScriptElement.cpp:
        (WebCore::ScriptElement::requestScript):
        * html/HTMLLinkElement.cpp:
        (WebCore::HTMLLinkElement::process):
        * html/parser/CSSPreloadScanner.cpp:
        (WebCore::CSSPreloadScanner::emitRule):
        * html/parser/CSSPreloadScanner.h:
        (CSSPreloadScanner):
        * html/parser/HTMLPreloadScanner.cpp:
        (WebCore::PreloadTask::preload):
        * loader/ImageLoader.cpp:
        (WebCore::ImageLoader::updateFromElement):
        * loader/cache/CachedResourceLoader.cpp:
        (WebCore::CachedResourceLoader::requestImage):
        (WebCore::CachedResourceLoader::requestResource):
        (WebCore::CachedResourceLoader::determineRevalidationPolicy):
        (WebCore):
        (WebCore::CachedResourceLoader::preload):
        * loader/cache/CachedResourceLoader.h:
        (WebCore):
        (CachedResourceLoader):
        * loader/cache/CachedResourceRequest.cpp:
        (WebCore::CachedResourceRequest::CachedResourceRequest):
        (WebCore):
        (WebCore::CachedResourceRequest::~CachedResourceRequest):
        (WebCore::CachedResourceRequest::setInitiator):
        (WebCore::CachedResourceRequest::initiatorName):
        (WebCore::CachedResourceRequest::initiatorDocument):
        (WebCore::CachedResourceRequest::initiatorElement):
        * loader/cache/CachedResourceRequest.h:
        (WebCore):
        (WebCore::CachedResourceRequest::setOptions):
        (WebCore::CachedResourceRequest::defer):
        (WebCore::CachedResourceRequest::setDefer):
        (CachedResourceRequest):
        * loader/cache/CachedResourceRequestInitiators.cpp: Copied from Source/WebCore/loader/cache/CachedResourceRequest.cpp.
        (WebCore):
        (WebCore::CachedResourceRequestInitiators::CachedResourceRequestInitiators):
        * loader/cache/CachedResourceRequestInitiators.h: Copied from Source/WebCore/loader/cache/CachedResourceRequest.cpp.
        (WebCore):
        (CachedResourceRequestInitiators):
        (WebCore::cachedResourceRequestInitiators):
        * loader/icon/IconLoader.cpp:
        (WebCore::IconLoader::startLoading):
        * platform/ThreadGlobalData.cpp:
        (WebCore::ThreadGlobalData::ThreadGlobalData):
        * platform/ThreadGlobalData.h:
        (WebCore):
        (WebCore::ThreadGlobalData::cachedResourceRequestInitiators):
        (ThreadGlobalData):
        * svg/SVGFEImageElement.cpp:
        (WebCore::SVGFEImageElement::requestImageResource):
        * svg/SVGFontFaceUriElement.cpp:
        (WebCore::SVGFontFaceUriElement::loadFont):
        * svg/SVGUseElement.cpp:
        (WebCore::SVGUseElement::svgAttributeChanged):

2012-11-13  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r134345.
        http://trac.webkit.org/changeset/134345
        https://bugs.webkit.org/show_bug.cgi?id=102106

        Incomplete support for NATIVE_TYPE_ERR in objc and other
        bindings (Requested by jsbell on #webkit).

        * Modules/mediastream/MediaConstraintsImpl.cpp:
        (WebCore::MediaConstraintsImpl::create):
        * Modules/mediastream/MediaStreamTrackList.cpp:
        (WebCore::MediaStreamTrackList::add):
        (WebCore::MediaStreamTrackList::remove):
        * Modules/mediastream/RTCDataChannel.cpp:
        (WebCore::RTCDataChannel::setBinaryType):
        * Modules/mediastream/RTCIceCandidate.cpp:
        (WebCore::RTCIceCandidate::create):
        * Modules/mediastream/RTCPeerConnection.cpp:
        (WebCore::RTCPeerConnection::parseConfiguration):
        (WebCore::RTCPeerConnection::createOffer):
        (WebCore::RTCPeerConnection::createAnswer):
        (WebCore::RTCPeerConnection::setLocalDescription):
        (WebCore::RTCPeerConnection::setRemoteDescription):
        (WebCore::RTCPeerConnection::addIceCandidate):
        (WebCore::RTCPeerConnection::addStream):
        (WebCore::RTCPeerConnection::removeStream):
        * Modules/mediastream/RTCSessionDescription.cpp:
        (WebCore::RTCSessionDescription::create):
        (WebCore::RTCSessionDescription::setType):
        * bindings/js/CallbackFunction.cpp:
        (WebCore::checkFunctionOnlyCallback):
        * bindings/js/JSCustomXPathNSResolver.cpp:
        (WebCore::JSCustomXPathNSResolver::create):
        * bindings/js/JSHTMLOptionsCollectionCustom.cpp:
        (WebCore::JSHTMLOptionsCollection::add):
        * bindings/js/JSHTMLSelectElementCustom.cpp:
        (WebCore::selectIndexSetter):
        * bindings/js/JSMutationObserverCustom.cpp:
        (WebCore::JSMutationObserverConstructor::constructJSMutationObserver):
        * bindings/js/JSSQLResultSetRowListCustom.cpp:
        (WebCore::JSSQLResultSetRowList::item):
        * bindings/js/JSSQLTransactionCustom.cpp:
        (WebCore::JSSQLTransaction::executeSql):
        * bindings/js/JSSQLTransactionSyncCustom.cpp:
        (WebCore::JSSQLTransactionSync::executeSql):
        * bindings/scripts/CodeGeneratorJS.pm:
        (GenerateParametersCheck):
        * bindings/scripts/CodeGeneratorObjC.pm:
        (GenerateImplementation):
        * bindings/scripts/CodeGeneratorV8.pm:
        (GenerateFunctionCallString):
        * bindings/v8/V8Callback.h:
        (WebCore::createFunctionOnlyCallback):
        * bindings/v8/V8Collection.cpp:
        (WebCore::toOptionsCollectionSetter):
        * bindings/v8/custom/V8DocumentCustom.cpp:
        (WebCore::V8Document::evaluateCallback):
        * bindings/v8/custom/V8HTMLOptionsCollectionCustom.cpp:
        (WebCore::V8HTMLOptionsCollection::addCallback):
        * bindings/v8/custom/V8MutationObserverCustom.cpp:
        (WebCore::V8MutationObserver::constructorCallback):
        * bindings/v8/custom/V8SQLTransactionCustom.cpp:
        (WebCore::V8SQLTransaction::executeSqlCallback):
        * bindings/v8/custom/V8SQLTransactionSyncCustom.cpp:
        (WebCore::V8SQLTransactionSync::executeSqlCallback):
        * dom/DOMCoreException.idl:
        * html/HTMLElement.cpp:
        (WebCore::HTMLElement::insertAdjacentElement):
        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::webkitAddKey):
        * html/HTMLOptionsCollection.cpp:
        (WebCore::HTMLOptionsCollection::add):
        * html/canvas/CanvasRenderingContext2D.cpp:
        (WebCore::CanvasRenderingContext2D::drawImage):
        (WebCore::CanvasRenderingContext2D::createPattern):
        (WebCore::CanvasRenderingContext2D::putImageData):
        (WebCore::CanvasRenderingContext2D::webkitPutImageDataHD):
        * page/Crypto.cpp:
        (WebCore::Crypto::getRandomValues):
        * page/DOMSelection.cpp:
        (WebCore::DOMSelection::extend):
        * svg/properties/SVGTransformListPropertyTearOff.h:
        (WebCore::SVGTransformListPropertyTearOff::createSVGTransformFromMatrix):

2012-11-13  Erik Arvidsson  <arv@chromium.org>

        Update DOMException name: HierarchyRequestError
        https://bugs.webkit.org/show_bug.cgi?id=102092

        Reviewed by Ojan Vafai.

        Patch 3 of 25 to update DOMException name to match the spec and Firefox.

        Updated existing tests.

        * dom/DOMCoreException.cpp:

2012-11-13  Kenneth Rohde Christiansen  <kenneth@webkit.org>

        Clean up use of adjustWindowRect
        https://bugs.webkit.org/show_bug.cgi?id=102072

        Reviewed by Alexis Menard.

        Tested by fast/dom/Window/open-window-min-size.html

        * loader/FrameLoader.cpp:
        (WebCore::createWindow):

            Validate the window size here so that it is not just done for
            .open, but also for .showModalDialog. This is compatible with
            other browsers such as IE and Firefox (though IE > 6, enforces
            a minimum width of 250 instead of 100 as Firefox and us.)

        * page/DOMWindow.cpp:
        (WebCore):
        (WebCore::DOMWindow::adjustWindowRect):

            Make it a static method which only takes page. It was never
            called from anywhere without a valid page, so the page check
            has been turned into an assert, and two of the arguments have
            been removed as they can be accessed via the page.

        (WebCore::DOMWindow::moveBy):
        (WebCore::DOMWindow::moveTo):
        (WebCore::DOMWindow::resizeBy):
        (WebCore::DOMWindow::resizeTo):

            Update use of adjustWindowRect.

        (WebCore::DOMWindow::open):

            Avoid modifying the WindowFeatures as the WebCore::createWindow
            validates and adjusts the arguments.

        * page/DOMWindow.h:
        (DOMWindow):

2012-11-13  Bem Jones-Bey  <bjonesbe@adobe.com>

        [CSS Exclusions] Update wrap-margin/padding to shape-margin/padding
        https://bugs.webkit.org/show_bug.cgi?id=97736

        Reviewed by Andreas Kling.

        Rename properties to match updated spec.

        Tests: fast/exclusions/shape-margin-parsing.html
               fast/exclusions/shape-padding-parsing.html

        * css/CSSComputedStyleDeclaration.cpp:
        (WebCore):
        (WebCore::CSSComputedStyleDeclaration::getPropertyCSSValue):
        * css/CSSParser.cpp:
        (WebCore::isSimpleLengthPropertyID):
        (WebCore::CSSParser::parseValue):
        * css/CSSProperty.cpp:
        (WebCore::CSSProperty::isInheritedProperty):
        * css/CSSPropertyNames.in:
        * css/StyleBuilder.cpp:
        (WebCore::StyleBuilder::StyleBuilder):
        * css/StylePropertySet.cpp:
        (WebCore::StylePropertySet::asText):
        * css/StylePropertyShorthand.cpp:
        (WebCore::webkitWrapShorthand):
        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::applyProperty):
        * rendering/style/RenderStyle.cpp:
        (WebCore::RenderStyle::diff):
        * rendering/style/RenderStyle.h:
        * rendering/style/StyleRareNonInheritedData.cpp:
        (WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData):
        (WebCore::StyleRareNonInheritedData::operator==):
        * rendering/style/StyleRareNonInheritedData.h:
        (StyleRareNonInheritedData):

2012-11-13  Dimitri Glazkov  <dglazkov@chromium.org>

        Unreviewed, rolling out r134418.
        http://trac.webkit.org/changeset/134418
        https://bugs.webkit.org/show_bug.cgi?id=101903

        The newly added test is crashing on cr-win.

        * dom/ElementShadow.cpp:
        * dom/ElementShadow.h:
        * html/HTMLInputElement.cpp:
        (WebCore::HTMLInputElement::updateType):
        (WebCore::HTMLInputElement::setIndeterminate):
        * html/HTMLProgressElement.cpp:
        (WebCore::HTMLProgressElement::didElementStateChange):
        * html/shadow/SelectRuleFeatureSet.cpp:
        (WebCore::SelectRuleFeatureSet::add):
        (WebCore::SelectRuleFeatureSet::clear):
        (WebCore::SelectRuleFeatureSet::collectFeaturesFromSelector):
        * html/shadow/SelectRuleFeatureSet.h:
        (SelectRuleFeatureSet):

2012-11-13  Dimitri Glazkov  <dglazkov@chromium.org>

        Unreviewed, rolling out r134391.
        http://trac.webkit.org/changeset/134391
        https://bugs.webkit.org/show_bug.cgi?id=99660

        Speculative rollout, trying to fix browser_tests failure.

        * English.lproj/localizedStrings.js:
        * inspector/Inspector.json:
        * inspector/InspectorClient.h:
        * inspector/InspectorPageAgent.cpp:
        (PageAgentState):
        (WebCore::InspectorPageAgent::enable):
        (WebCore::InspectorPageAgent::disable):
        * inspector/InspectorPageAgent.h:
        * inspector/front-end/Settings.js:
        * inspector/front-end/SettingsScreen.js:
        (WebInspector.GenericSettingsTab):
        * inspector/front-end/inspector.js:
        (WebInspector.doLoadedDone):

2012-11-13  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r134205.
        http://trac.webkit.org/changeset/134205
        https://bugs.webkit.org/show_bug.cgi?id=102093

        Broke webkit-flow-inlines-dynamic.html on several ports
        (Requested by mihnea on #webkit).

        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::isValidRegionStyleProperty):
        * rendering/InlineBox.cpp:
        * rendering/InlineBox.h:
        (WebCore):
        (InlineBox):
        * rendering/InlineFlowBox.cpp:
        (WebCore::InlineFlowBox::addToLine):
        (WebCore::InlineFlowBox::addTextBoxVisualOverflow):
        * rendering/RenderRegion.cpp:
        (WebCore::RenderRegion::setRegionObjectsRegionStyle):
        (WebCore::RenderRegion::restoreRegionObjectsOriginalStyle):
        (WebCore::RenderRegion::computeStyleInRegion):
        (WebCore::RenderRegion::computeChildrenStyleInRegion):
        (WebCore::RenderRegion::setObjectStyleInRegion):
        (WebCore::RenderRegion::clearObjectStyleInRegion):
        * rendering/RenderRegion.h:
        (RenderRegion):
        (ObjectRegionStyleInfo):

2012-11-13  Andreas Kling  <kling@webkit.org>

        Remove the non-const overload of ElementAttributeData::inlineStyle().

        Rubber-stamped by Anders Koivisto.

        No call sites actually needed a mutable StylePropertySet* from inlineStyle() anyway.

        * dom/ElementAttributeData.h:

2012-11-13  Keishi Hattori  <keishi@webkit.org>

        [Chromium] Enable input type month/week
        https://bugs.webkit.org/show_bug.cgi?id=102042

        Reviewed by Kent Tamura.

        Enable input type month/week for Chromium.

        No new tests. Tests will be added later in Bug 102045 and Bug 102046.

        * bindings/generic/RuntimeEnabledFeatures.cpp:
        (WebCore):

2012-11-13  Shinya Kawanaka  <shinyak@chromium.org>

        [Refactoring] Remove shadowPseudoId() and use setPseudo() in <meter> ElementShadow.
        https://bugs.webkit.org/show_bug.cgi?id=101906

        Reviewed by Dimitri Glazkov.

        We're migrating shadowPseudoId() to pseudo(). We remove shadowPseudoId() from HTMLKeygenElement and use
        setPseudo()/pseudo() instead.

        No new tests, covered by existing tests.

        * html/HTMLMeterElement.cpp:
        (WebCore::HTMLMeterElement::didElementStateChange): Since shadowPseudoId() was returning pseudo id without setting
        it anywhere, we have to set it into pseudo attribute here.
        (WebCore::HTMLMeterElement::createShadowSubtree): ditto.
        * html/shadow/MeterShadowElement.cpp:
        (WebCore::MeterInnerElement::MeterInnerElement):
        (WebCore::MeterValueElement::valuePseudoId):
        * html/shadow/MeterShadowElement.h:
        (MeterInnerElement):
        (WebCore::MeterBarElement::MeterBarElement):
        (MeterBarElement):
        (WebCore::MeterValueElement::MeterValueElement):
        (WebCore::MeterValueElement::updatePseudo):
        (MeterValueElement):

2012-11-13  Shinya Kawanaka  <shinyak@chromium.org>

        Changing pseudoClass (:indeterminate) should cause distribution
        https://bugs.webkit.org/show_bug.cgi?id=101903

        Reviewed by Dimitri Glazkov.

        <progress> and <input type="checkbox"> have 'indeterminate' state. When their state is changed, we have to
        invalidate distribution if necessary. To check it, we collect a feature that :invalidate is used in select attributes.

        For <input>, we also have to see 'type' is changed. According to the spec, :indeterminate should match only
        progress element or <input type="checkbox">. So changing 'type' might also change :indeterminate state.

        Tests: fast/dom/shadow/pseudoclass-update-indeterminate-input.html
               fast/dom/shadow/pseudoclass-update-indeterminate-progress.html

        * dom/ElementShadow.cpp:
        (WebCore::invalidateParentDistributionIfNecessary): Since we will add a lot of pseudoClass check later, we would like to
        have this kind of helper method. We will add various pseudoClass check (see Bug 101697), we reuse CSSSelector::PseudoType
        here.
        (WebCore):
        * dom/ElementShadow.h:
        (WebCore):
        * html/HTMLInputElement.cpp:
        (WebCore::HTMLInputElement::updateType): Invalidate parent distribution anyway, since it changes various internal states.
        (WebCore::HTMLInputElement::setIndeterminate): Invalidate parent distribution if necessary.
        * html/HTMLProgressElement.cpp:
        (WebCore::HTMLProgressElement::didElementStateChange):
        * html/shadow/SelectRuleFeatureSet.cpp:
        (WebCore::SelectRuleFeatureSet::SelectRuleFeatureSet): Adds m_usesIndeterminate feature.
        (WebCore::SelectRuleFeatureSet::add):
        (WebCore::SelectRuleFeatureSet::clear):
        (WebCore::SelectRuleFeatureSet::collectFeaturesFromSelector):
        * html/shadow/SelectRuleFeatureSet.h:
        (WebCore::SelectRuleFeatureSet::hasSelectorForIndeterminate):
        (SelectRuleFeatureSet):

2012-11-13  Andreas Kling  <kling@webkit.org>

        Exploit ElementAttributeData sharing in Node.cloneNode.
        <http://webkit.org/b/101374>

        Reviewed by Anders Carlsson.

        Instead of blindly creating a new ElementAttributeData for Node.cloneNode, let's be clever!
        If the source data is immutable, simply ref it from the new node at virtually no cost.

        If the source data is mutable, convert it to immutable data so it can be shared between both nodes.
        Since the typical use-case for Node.cloneNode is to create-once/clone-many, this saves both time
        and memory in the long run.

        ~8% speed-up on PerformanceTests/DOM/CloneNodes on my MBP.

        * dom/Element.cpp:
        (WebCore::Element::cloneAttributesFromElement):

            Move attribute data cloning logic from ElementAttributeData to Element.

        * dom/ElementAttributeData.cpp:
        (WebCore::ImmutableElementAttributeData::~ImmutableElementAttributeData):
        (WebCore::ImmutableElementAttributeData::ImmutableElementAttributeData):
        (WebCore::ElementAttributeData::ElementAttributeData):
        (WebCore::MutableElementAttributeData::MutableElementAttributeData):
        (WebCore::ElementAttributeData::makeMutableCopy):
        (WebCore::ElementAttributeData::makeImmutableCopy):
        * dom/ElementAttributeData.h:
        (ElementAttributeData):
        (ImmutableElementAttributeData):
        (MutableElementAttributeData):

            Add facilities for converting a mutable ElementAttributeData to an immutable one.
            Share some code in the common base class constructor.

2012-11-13  Kentaro Hara  <haraken@chromium.org>

        Unreviewed. Build fix of V8 bindings.

        * bindings/v8/V8DOMWrapper.cpp:
        (WebCore::V8DOMWrapper::maybeDOMWrapper):

2012-11-13  Andrey Adaikin  <aandrey@chromium.org>

        Web Inspector: [Canvas] UI: make the Grid save scrolling position, show wait spinner icon
        https://bugs.webkit.org/show_bug.cgi?id=102071

        Reviewed by Pavel Feldman.

        * inspector/front-end/CanvasProfileView.js:
        (WebInspector.CanvasProfileView):
        (WebInspector.CanvasProfileView.prototype.dispose):
        (WebInspector.CanvasProfileView.prototype.elementsToRestoreScrollPositionsFor):
        (WebInspector.CanvasProfileView.prototype._enableWaitIcon):
        (WebInspector.CanvasProfileView.prototype._replayTraceLog.didReplayTraceLog):
        (WebInspector.CanvasProfileView.prototype._replayTraceLog):
        (WebInspector.CanvasProfileView.prototype._didReceiveTraceLog):
        (WebInspector.CanvasProfileView.prototype._createCallNode):
        * inspector/front-end/canvasProfiler.css:
        (#canvas-replay-image.wait):

2012-11-13  Eugene Klyuchnikov  <eustas.bug@gmail.com>

        Web Inspector: Settings screen: some panel shortcuts are missing
        https://bugs.webkit.org/show_bug.cgi?id=101026

        Reviewed by Pavel Feldman.

        Panels, that have not been loaded by the time shortcuts view was
        initialized, had no chance to register shortcuts.

        Solution: move shortcut registration (for shortcuts screen) to panel
        descriptors.

        More changes: add JsDoc annotations to ShortcutScreen and change "key"
        parameter type for raw string to key descriptor object.

        * WebCore.gypi: Added TimelinePanelDescriptor.js file.
        * WebCore.vcproj/WebCore.vcproj: Ditto.
        * inspector/compile-front-end.py: Ditto.
        * inspector/front-end/WebKit.qrc: Ditto.
        * inspector/front-end/inspector.html: Ditto.
        * inspector/front-end/AdvancedSearchController.js: Add JsDoc annotation.
        * inspector/front-end/GoToLineDialog.js: Ditto.
        * inspector/front-end/CallStackSidebarPane.js: Removed shortcut-screen
        shortcuts registration.
        * inspector/front-end/ElementsPanel.js: Ditto.
        * inspector/front-end/ScriptsPanel.js: Ditto.
        * inspector/front-end/StylesSidebarPane.js: Ditto.
        * inspector/front-end/TimelinePanel.js: Ditto.
        * inspector/front-end/ConsoleView.js: Changes order of lines to increase
        readability.
        * inspector/front-end/ElementsPanelDescriptor.js: Add shortcut-screen
        shortcuts registration and key descriptor constants.
        * inspector/front-end/ScriptsPanelDescriptor.js: Ditto.
        * inspector/front-end/TimelinePanelDescriptor.js: Ditto.
        * inspector/front-end/Panel.js: Removed unused "uregisterShortcut"; made
        "registerShortcuts" method accept array of key descriptors.
        (WebInspector.PanelDescriptor.prototype.registerShortcuts): Added.
        * inspector/front-end/ShortcutsScreen.js: Added JsDoc; changed parameter
        type from string to key descriptor.
        * inspector/front-end/inspector.js: Register shortcuts using
        panel descriptors.
        (WebInspector._panelDescriptors): Removed duplicate line.

2012-11-13  Gabor Rapcsanyi  <rgabor@webkit.org>

        Optimize RGB565 and RGBA5551 packing/unpacking functions with NEON intrinsics
        https://bugs.webkit.org/show_bug.cgi?id=102060

        Reviewed by Zoltan Herczeg.

        Adding more NEONized packing functions to GraphicsContext3DNEON.h.
        These functions are three times faster with this intrinsics optimizations.

        * platform/graphics/GraphicsContext3D.cpp:
        (WebCore):
        * platform/graphics/cpu/arm/GraphicsContext3DNEON.h:
        (WebCore::ARM::unpackOneRowOfRGBA5551ToRGBA8NEON):
        (ARM):
        (WebCore::ARM::packOneRowOfRGBA8ToUnsignedShort5551NEON):
        (WebCore::ARM::unpackOneRowOfRGB565ToRGBA8NEON):
        (WebCore::ARM::packOneRowOfRGBA8ToUnsignedShort565NEON):

2012-11-13  Csaba Osztrogonác  <ossy@webkit.org>

        [Qt] Enable Mutation observer
        https://bugs.webkit.org/show_bug.cgi?id=102066

        Reviewed by Pavel Feldman.

        * DerivedSources.pri: Add missing IDL files.

2012-11-13  Kentaro Hara  <haraken@chromium.org>

        [V8] Make isValidDOMObject() static
        https://bugs.webkit.org/show_bug.cgi?id=101914

        Reviewed by Adam Barth.

        isValidDOMObject() is used by DOMWrapper.cpp only.

        No tests. No change in behavior.

        * bindings/v8/V8DOMWrapper.cpp:
        (WebCore::isValidDOMObject):
        (WebCore):
        (WebCore::V8DOMWrapper::maybeDOMWrapper):
        * bindings/v8/V8DOMWrapper.h:
        (V8DOMWrapper):

2012-11-13  Mihnea Ovidenie  <mihnea@adobe.com>

        [CSSRegions] Incorrect computed height for content with region-break-before
        https://bugs.webkit.org/show_bug.cgi?id=101862

        Reviewed by Julien Chaffraix.

        When processing the region breaks for auto-height regions, we skipped the case
        when the region-break-before occurred in the first region in the chain which was
        an auto-height region. Because of that, the region computed height was not 0
        as it was supposed to be, but rather LayoutUnit::max() / 2.

        Test: fast/regions/autoheight-breakbefore-wrongheight.html

        * rendering/RenderFlowThread.cpp:
        (WebCore::RenderFlowThread::addForcedRegionBreak):
        Make sure we process also the case when the region-break occurs at offset 0 in the flow thread
        and the first region in chain is an auto-height region.
        * rendering/RenderRegion.cpp:
        (WebCore::RenderRegion::updateLogicalHeight):
        Add an assert to make sure that the computed height for auto-height regions is always less than LayoutUnit::max() / 2.

2012-11-13  Yury Semikhatsky  <yurys@chromium.org>

        Memory instrumentation: remove reportMemoryUsage method from ImageObserver
        https://bugs.webkit.org/show_bug.cgi?id=102058

        Reviewed by Pavel Feldman.

        * bindings/v8/V8PerIsolateData.cpp:
        (WebCore::V8PerIsolateData::reportMemoryUsage): drive-by fix, no need to report
        each element of the vector as generic vector instrumentation will take care of it.
        * platform/graphics/Image.cpp: the client is reported as weak pointer to make sure
        we don't count its by the pointer to the base class which may differ from the actual
        object address.
        (WebCore::Image::reportMemoryUsage):
        * platform/graphics/ImageObserver.h: removed reportMemoryUsage method from the interface.
        (ImageObserver):

2012-11-13  Eberhard Graether  <egraether@google.com>

        checkbox to toggle FPS counter in the inspector's settings
        https://bugs.webkit.org/show_bug.cgi?id=99660

        Reviewed by Pavel Feldman.

        Added a checkbox to the inspector's settings to toggle a FPS counter. The checkbox appears when InspectorClient::canShowFPSCounter() returns true.

        No new tests.

        * English.lproj/localizedStrings.js:
        * inspector/Inspector.json:
        * inspector/InspectorClient.h:
        (WebCore::InspectorClient::canShowFPSCounter):
        (WebCore::InspectorClient::setShowFPSCounter):
        (InspectorClient):
        * inspector/InspectorPageAgent.cpp:
        (PageAgentState):
        (WebCore::InspectorPageAgent::enable):
        (WebCore::InspectorPageAgent::disable):
        (WebCore::InspectorPageAgent::canShowFPSCounter):
        (WebCore):
        (WebCore::InspectorPageAgent::setShowFPSCounter):
        * inspector/InspectorPageAgent.h:
        * inspector/front-end/Settings.js:
        * inspector/front-end/SettingsScreen.js:
        (WebInspector.GenericSettingsTab):
        (WebInspector.GenericSettingsTab.prototype.get _showFPSCounterChanged):
        * inspector/front-end/inspector.js:
        (WebInspector.doLoadedDone):

2012-11-12  Kent Tamura  <tkent@chromium.org>

        Unable to set valid time value to input[type=time] with user interaction in some cases
        https://bugs.webkit.org/show_bug.cgi?id=102048

        Reviewed by Kentaro Hara.

        The implementations of shouldMillisecondFieldReadOnly,
        shouldMinuteFieldReadOnly, and shouldSecondFieldReadOnly were
        incorrect. We need to check if a part of the minimum value matches to
        the corresponding part of the current value.

        Also, we had better check hour field editability.

        Test: fast/forms/time-multiple-fields/time-multiple-fields-readonly-subfield.html

        * html/BaseMultipleFieldsDateAndTimeInputType.cpp:
        (WebCore::BaseMultipleFieldsDateAndTimeInputType::shouldHaveSecondField):
        Fix a problem that hh:mm:00.sss didn't create a seconds field.
        * html/shadow/DateTimeEditElement.cpp:
        (DateTimeEditBuilder): Add shouldHourFieldReadOnly declaration.
        (WebCore::DateTimeEditBuilder::visitField):
        Add shouldHourFieldReadOnly check to Hour11/Hour12/Hour23/Hour24/Period fields.
        (WebCore::DateTimeEditBuilder::shouldHourFieldReadOnly):
        Added. An hour field should be read-only if the step value is a multiple
        of a day and the hour part of the minimum value matches to the hour part
        of the value.
        (WebCore::DateTimeEditBuilder::shouldMillisecondFieldReadOnly):
        A millisecond field should be read-only if the step value is a multiple
        of one second and the millisecond part of the minimum value matches to
        the millisecond part of the value.
        (WebCore::DateTimeEditBuilder::shouldMinuteFieldReadOnly):
        A minute field should be read-only if the step value is a multiple of
        one hour and the minute part of the minimum value matches to the minute
        part of the value.
        (WebCore::DateTimeEditBuilder::shouldSecondFieldReadOnly):
        A second field should be read-only if the step value is a multiple of
        one minute and the second part of the minimum value matches to the second
        part of the value.
        * platform/Decimal.cpp:
        (WebCore::Decimal::remainder):
        Fix a bug in case that the fractional part of quotient is >= 0.5. Also
        make this matches to C99, C++11, ECMAScript behavior.

2012-11-13  Yury Semikhatsky  <yurys@chromium.org>

        Memory instrumentation: MemoryBlock name should not include full path to the block
        https://bugs.webkit.org/show_bug.cgi?id=102055

        Reviewed by Pavel Feldman.

        * inspector/InspectorMemoryAgent.cpp: pass only last path component as MemoryBlock name
        intead of fully qualified name.

2012-11-13  Pavel Feldman  <pfeldman@chromium.org>

        Web Inspector: get rid of enter/exitTextChangeMode in the editor
        https://bugs.webkit.org/show_bug.cgi?id=101845

        Reviewed by Vsevolod Vlasov.

        They seem to do nothing.

        * inspector/front-end/DefaultTextEditor.js:
        (WebInspector.DefaultTextEditor.prototype._textChanged):
        (WebInspector.DefaultTextEditor.prototype.editRange):
        (WebInspector.TextEditorMainPanel):
        (WebInspector.TextEditorMainPanel.prototype.handleUndoRedo):
        (WebInspector.TextEditorMainPanel.prototype.handleEnterKey.get var):
        (WebInspector.TextEditorMainPanel.prototype.handleEnterKey):
        (WebInspector.TextEditorMainPanel.prototype._applyDomUpdates):
        * inspector/front-end/TextEditorModel.js:
        (WebInspector.TextEditorModel.endsWithBracketRegex.):

2012-11-13  Tommy Widenflycht  <tommyw@google.com>

        Remove the custom WebSocket::send for both V8 and JSC
        https://bugs.webkit.org/show_bug.cgi?id=101936

        Reviewed by Kentaro Hara.

        This patch removes the custom WebSocket::send since it isn't needed anymore.

        Patch covered by existing tests.

        * Modules/websockets/WebSocket.idl:
        * UseV8.cmake:
        * WebCore.gypi:
        * bindings/js/JSWebSocketCustom.cpp:
        * bindings/v8/custom/V8WebSocketCustom.cpp: Removed.

2012-11-13  Pavel Feldman  <pfeldman@chromium.org>

        Web Inspector: move indentation logic into TextEditorModel
        https://bugs.webkit.org/show_bug.cgi?id=101842

        Reviewed by Vsevolod Vlasov.

        I'd like to move as much headless logic into the TextEditorModel as possible.
        Drive by: removed some dead code, converted getter into function and moved undo
        mark state into the model as well.

        * inspector/front-end/DefaultTextEditor.js:
        (WebInspector.DefaultTextEditor.prototype.editRange):
        (WebInspector.DefaultTextEditor.prototype._syncDecorationsForLine):
        (WebInspector.TextEditorChunkedPanel.prototype._splitChunkOnALine):
        (WebInspector.TextEditorMainPanel.prototype.handleEnterKey.get var):
        (WebInspector.TextEditorMainPanel.prototype.handleEnterKey):
        (WebInspector.TextEditorMainPanel.prototype._applyDomUpdates):
        (WebInspector.TextEditorMainPanel.prototype._updateChunksForRanges):
        (WebInspector.TextEditorMainChunk):
        (WebInspector.TextEditorMainChunk.prototype.isDecorated):
        (WebInspector.TextEditorMainChunk.prototype.set expanded):
        * inspector/front-end/TextEditorModel.js:
        (WebInspector.TextEditorModel.endsWithBracketRegex.):

2012-11-13  Hayato Ito  <hayato@chromium.org>

        Unreviewed attempt to fix the chromium mac-build after r134348.

        * platform/graphics/mac/FontMac.mm:
        (WebCore::Font::drawGlyphs):
        * platform/mac/WebCoreSystemInterface.h:
        * platform/mac/WebCoreSystemInterface.mm:

2012-11-13  Pavel Feldman  <pfeldman@chromium.org>

        Web Inspector: migrate text editor to mutation observers
        https://bugs.webkit.org/show_bug.cgi?id=101841

        Reviewed by Vsevolod Vlasov.

        Otherwise, we miss notifications on the removed lines.

        * inspector/front-end/DefaultTextEditor.js:
        (WebInspector.DefaultTextEditor.prototype.wasShown):
        (WebInspector.DefaultTextEditor.prototype.willHide):
        (WebInspector.TextEditorChunkedPanel.prototype._repaintAll):
        (WebInspector.TextEditorMainPanel):
        (WebInspector.TextEditorMainPanel.prototype._wasShown):
        (WebInspector.TextEditorMainPanel.prototype._willHide):
        (WebInspector.TextEditorMainPanel.prototype.markAndRevealRange):
        (WebInspector.TextEditorMainPanel.prototype.beginDomUpdates):
        (WebInspector.TextEditorMainPanel.prototype.endDomUpdates):
        (WebInspector.TextEditorMainPanel.prototype._paintScheduledLines):
        (WebInspector.TextEditorMainPanel.prototype._paintLineChunks):
        (WebInspector.TextEditorMainPanel.prototype._paintLine):
        (WebInspector.TextEditorMainPanel.prototype._insertSpanBefore):
        (WebInspector.TextEditorMainPanel.prototype._handleMutations.else.get if):
        (WebInspector.TextEditorMainPanel.prototype._handleMutations):
        (WebInspector.TextEditorMainPanel.prototype._collectDirtyLines):
        (WebInspector.TextEditorMainPanel.prototype._applyDomUpdates):
        * inspector/front-end/externs.js:
        (WebKitMutation):
        (WebKitMutationObserver.prototype.observe):
        (WebKitMutationObserver.prototype.disconnect):
        * inspector/front-end/textEditor.css:
        (.debug-fadeout):
        (@-webkit-keyframes debug-fadeout):
        (to):

2012-11-13  Gabor Rapcsanyi  <rgabor@webkit.org>

        Optimize RGBA4444ToRGBA8 packing/unpacking functions with NEON intrinsics in GraphicsContext3D
        https://bugs.webkit.org/show_bug.cgi?id=101473

        Reviewed by Zoltan Herczeg.

        With NEON intrinsics the packing/unpacking functions can be optimized well.
        This particular function is about 3 times faster with ARM NEON. On top level tests
        the speed up was 1.18x.

        * CMakeLists.txt:
        * GNUmakefile.am:
        * GNUmakefile.list.am:
        * Target.pri:
        * WebCore.gyp/WebCore.gyp:
        * WebCore.gypi:
        * WebCore.pri:
        * WebCore.xcodeproj/project.pbxproj:
        * platform/graphics/GraphicsContext3D.cpp:
        (WebCore):
        * platform/graphics/cpu/arm/GraphicsContext3DNEON.h: Added.
        (WebCore):
        (ARM):
        (WebCore::ARM::unpackOneRowOfRGBA4444ToRGBA8NEON):
        (WebCore::ARM::packOneRowOfRGBA8ToUnsignedShort4444NEON):

2012-11-13  Takashi Sakamoto  <tasak@google.com>

        Crash when replacing parts of text inputs with content: url(...)
        https://bugs.webkit.org/show_bug.cgi?id=101133

        Reviewed by Kent Tamura.

        Disable directly setting content of elements in an input element's
        shadow dom tree, because the setting breaks input element's behavior.

        Tests: fast/forms/number/number-content-url-crash.html
               fast/forms/search/search-content-url-crash.html

        * css/html.css:
        (input::-webkit-textfield-decoration-container):
        Use important to disable overriding an input element's content
        property.
        * html/TextFieldInputType.cpp:
        (WebCore::TextFieldInputType::attach):
        Added ASSERTION. No content should be applied to
        input::-webkit-textfield-decoration-container.

2012-11-12  Huang Dongsung  <luxtella@company100.net>

        [Qt] REGRESSION(134142): overscaled tiles in pixel test results and MiniBrowser
        https://bugs.webkit.org/show_bug.cgi?id=101918

        Reviewed by Noam Rosenthal.

        Remove TiledBackingStore::rect(), because it is not used anymore.

        * platform/graphics/TiledBackingStore.h:
        (TiledBackingStore):

2012-11-12  Adam Barth  <abarth@webkit.org>

        [V8] We should be able to recover the V8DOMWindowShell more quickly
        https://bugs.webkit.org/show_bug.cgi?id=102020

        Reviewed by Kentaro Hara.

        For isolated worlds, we used to store the V8DOMWindowShell as an
        internal field of the inner DOM window. This patch moves the pointer to
        an internal field of the v8::Context, which saves us the work of
        looking up the inner DOM window.

        Unfortunately, we cannot store the V8DOMWindowShell in V8PerContextData
        because the V8DOMWindowShell outlives the V8PerContextData. (We destroy
        the V8PerContextData when we detach the V8DOMWindowShell from the
        frame.)

        * bindings/scripts/CodeGeneratorV8.pm:
        (GetInternalFields):
        * bindings/v8/V8DOMWindowShell.cpp:
        (WebCore::V8DOMWindowShell::initializeIfNeeded):
        * bindings/v8/V8DOMWindowShell.h:
        (WebCore::V8DOMWindowShell::getEntered):
        * bindings/v8/V8PerContextData.h:

2012-11-12  Kentaro Hara  <haraken@chromium.org>

        [V8] Add ASSERT() to guarantee that we don't store NULL pointers to V8 internal fields
        https://bugs.webkit.org/show_bug.cgi?id=101054

        Reviewed by Adam Barth.

        I'm investigating a Chromium crash bug:
        http://code.google.com/p/chromium/issues/detail?id=155942

        I've not yet identified the root cause (because I can't reproduce
        the crash), but it looks like we are storing NULL pointers to
        V8 internal fields. Just in case, we can add an ASSERT() to
        guarantee that NULL pointers are never stored. (Also I'm hoping
        that this ASSERT() will give me more debug information.)

        No tests. No change in behavior.

        * bindings/v8/V8DOMWrapper.h:
        (WebCore::V8DOMWrapper::setDOMWrapper):

2012-11-12  Shinya Kawanaka  <shinyak@chromium.org>

        Changing id, className, or attribute should invalidate distribution
        https://bugs.webkit.org/show_bug.cgi?id=100738

        Reviewed by Dimitri Glazkov.

        When id, className, or attribute is changed, we might have to invalidate distribution.
        However, we don't want to do useless invalidation. So we consult with the RuleFeatureSet of ElementShadow,
        and invalidate distribution only if necessary.

        When className is changed, we can share a lot of code between invalidating distribution and invalidating style.
        So we made checkNeedsStyleInvalidationForClassChange a template method, and share it.

        Also we've measured how this patch makes changing attribute slow. By converting checkNeedsStyleInvalidationForClassChange
        to template, actually this improves the performance of changing attribute code. I've measured each code 3 times.

        DOM/ModifyAttribute.html
        Before this patch:
                median  stdev  min      max    [ms]
          1st   115.62   0.67  114.75   117.00
          2nd   115.08   1.13  113.25   117.58
          3rd   114.75   1.16  113.42   117.83

        After this patch:
                median  stdev  min      max    [ms]
          1st   102.55   0.95  101.25   104.50
          2nd   103.10   0.86  102.20   100.95
          3rd   103.30   1.05  102.10   106.65

        Tests: fast/dom/shadow/distribution-attribute-modified.html
               fast/dom/shadow/distribution-className-modified.html
               fast/dom/shadow/distribution-id-modified.html
               fast/dom/shadow/reprojection-attribute-modified.html
               fast/dom/shadow/reprojection-className-modified.html
               fast/dom/shadow/reprojection-id-modified.html

        * dom/Element.cpp:
        (WebCore::Element::attributeChanged):
        (WebCore::HasSelectorForClassStyleFunctor::HasSelectorForClassStyleFunctor):
        (HasSelectorForClassStyleFunctor):
        (WebCore::HasSelectorForClassStyleFunctor::operator()): Returns true if StyleResolver::hasSelectorForClass returns true.
        (WebCore):
        (WebCore::HasSelectorForClassDistributionFunctor::HasSelectorForClassDistributionFunctor):
        (HasSelectorForClassDistributionFunctor):
        (WebCore::HasSelectorForClassDistributionFunctor::operator()): Returns true if ElementShadow::hasSelectorForClass returns true.
        (WebCore::checkFunctorForClassChange):
        (WebCore::checkNeedsStyleInvalidationForClassChange): Extacted the implementation to checkFunctorForClassChange.
        (WebCore::checkNeedsDistributionInvalidationForClassChange):
        (WebCore::Element::classAttributeChanged):

2012-11-12  Joe Mason  <jmason@rim.com>

        [BlackBerry] NetworkJob should not check if data is received with HEAD
        https://bugs.webkit.org/show_bug.cgi?id=102034

        Reviewed by George Staikos.

        Internal PR: 241391

        Make HEAD requests call didFinish instead of didFail on a 404 response, even though they
        have no data.

        Tests: ManualTests/blackberry/head-xhr-nonexistant-file.html

        * platform/network/blackberry/NetworkJob.cpp:
        (WebCore::NetworkJob::NetworkJob):
        (WebCore::NetworkJob::initialize):
        (WebCore::NetworkJob::shouldNotifyClientFailed):
        * platform/network/blackberry/NetworkJob.h:
        (NetworkJob):

2012-11-12  Adam Barth  <abarth@webkit.org>

        [V8] V8DOMWrapper::instantiateV8Object shouldn't use deprecatedDocument
        https://bugs.webkit.org/show_bug.cgi?id=102015

        Reviewed by Kentaro Hara.

        Previously, Nodes had a special path through
        V8DOMWrapper::instantiateV8Object using deprecatedDocument so that we
        could find the V8PerContextData quickly. Now that we can get the
        V8PerContextData from the v8::Context quickly, we can move Nodes to the
        general case. The net consequence is that creation of all DOM objects
        should be as fast as Nodes are.

        * bindings/scripts/CodeGeneratorV8.pm:
        (GenerateToV8Converters):
        * bindings/scripts/test/V8/V8Float64Array.cpp:
        (WebCore::V8Float64Array::wrapSlow):
        * bindings/scripts/test/V8/V8TestActiveDOMObject.cpp:
        (WebCore::V8TestActiveDOMObject::wrapSlow):
        * bindings/scripts/test/V8/V8TestCustomNamedGetter.cpp:
        (WebCore::V8TestCustomNamedGetter::wrapSlow):
        * bindings/scripts/test/V8/V8TestEventConstructor.cpp:
        (WebCore::V8TestEventConstructor::wrapSlow):
        * bindings/scripts/test/V8/V8TestEventTarget.cpp:
        (WebCore::V8TestEventTarget::wrapSlow):
        * bindings/scripts/test/V8/V8TestException.cpp:
        (WebCore::V8TestException::wrapSlow):
        * bindings/scripts/test/V8/V8TestInterface.cpp:
        (WebCore::V8TestInterface::wrapSlow):
        * bindings/scripts/test/V8/V8TestMediaQueryListListener.cpp:
        (WebCore::V8TestMediaQueryListListener::wrapSlow):
        * bindings/scripts/test/V8/V8TestNamedConstructor.cpp:
        (WebCore::V8TestNamedConstructor::wrapSlow):
        * bindings/scripts/test/V8/V8TestNode.cpp:
        (WebCore::V8TestNode::wrapSlow):
        * bindings/scripts/test/V8/V8TestObj.cpp:
        (WebCore::V8TestObj::wrapSlow):
        * bindings/scripts/test/V8/V8TestOverloadedConstructors.cpp:
        (WebCore::V8TestOverloadedConstructors::wrapSlow):
        * bindings/scripts/test/V8/V8TestSerializedScriptValueInterface.cpp:
        (WebCore::V8TestSerializedScriptValueInterface::wrapSlow):
        * bindings/v8/V8Binding.cpp:
        * bindings/v8/V8Binding.h:
        (WebCore):
        * bindings/v8/V8DOMWrapper.cpp:
        (WebCore::V8DOMWrapper::instantiateV8Object):
        * bindings/v8/V8DOMWrapper.h:
        (V8DOMWrapper):

2012-11-12  KyungTae Kim  <ktf.kim@samsung.com>

        Some CSS properties are not handled on StyleResolver::applyProperty
        https://bugs.webkit.org/show_bug.cgi?id=102027

        Reviewed by Gyuyoung Kim.

        The CSSPropertyMaxZoom, CSSPropertyMinZoom, CSSPropertyOrientation and CSSPropertyUserZoom
        need to be handled on StyleResolver::applyProperty.

        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::applyProperty):

2012-11-12  Simon Fraser  <simon.fraser@apple.com>

        Avoid calling calculateLayerBounds() and convertToLayerCoords() more than once per layer paint
        https://bugs.webkit.org/show_bug.cgi?id=102031

        Reviewed by Beth Dakin.

        RenderLayer::paintLayerContents() and callees could end up calling convertToLayerCoords()
        and calculateLayerBounds() multiple times for painting a single layer.
        
        Keep track of whether we've computed the root-relative bounds and do it on demand.
        Compute the offset relative to rootLayer once, and pass it around as an optional parameter
        to functions that need it.

        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::paintLayerContents):
        (WebCore::RenderLayer::hitTestLayer):
        (WebCore::RenderLayer::calculateRects):
        (WebCore::RenderLayer::intersectsDamageRect):
        (WebCore::RenderLayer::boundingBox):
        (WebCore::RenderLayer::calculateLayerBounds):
        * rendering/RenderLayer.h:
        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::calculateCompositedBounds):

2012-11-12  Simon Fraser  <simon.fraser@apple.com>

        Change calculateLayerBounds() from a static function to a member function
        https://bugs.webkit.org/show_bug.cgi?id=102022

        Reviewed by Beth Dakin.

        calculateLayerBounds() has grown into a substantial function after
        starting live as a little utility function, so make it a member function
        of RenderLayer, and adjust callers accordingly.

        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::setFilterBackendNeedsRepaintingInRect):
        (WebCore::RenderLayer::paintLayerContents):
        (WebCore::RenderLayer::calculateLayerBounds):
        * rendering/RenderLayer.h:
        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::calculateCompositedBounds):

2012-11-12  Alexei Filippov  <alph@chromium.org>

        Web Inspector: Add an option to switch display of "Other" memory on/off in NMI
        https://bugs.webkit.org/show_bug.cgi?id=101601

        Reviewed by Yury Semikhatsky.

        * English.lproj/localizedStrings.js:
        * inspector/front-end/NativeMemorySnapshotView.js:
        * inspector/front-end/Settings.js:
        * inspector/front-end/SettingsScreen.js:
        (WebInspector.GenericSettingsTab):

2012-11-10  Dirk Schulze  <krit@webkit.org>

        BasicShapes 'circle', 'rectangle', 'ellipse' should be animatable with themselves
        https://bugs.webkit.org/show_bug.cgi?id=101854

        Reviewed by Andreas Kling.

        The basic shapes BasicShapeCircle, BasicShapeEllipse and BasicShapeRectangle should
        blend with themselves. This patch introduces simple interpolation of BasicShapes for
        the -webkit-clip-path property.

        Test: css3/masking/clip-path-animation.html

        * page/animation/CSSPropertyAnimation.cpp:
        (WebCore::blendFunc): Added a new function that blends between two BasicShape objects.
            It skips blending on <clipPath> references, polygons and if the shapes are not of
            the same type.
        (WebCore):
        (PropertyWrapperClipPath): Added new wrapper for ClipPathShapes.
        (WebCore::PropertyWrapperClipPath::PropertyWrapperClipPath): Ditto.
        (WebCore::CSSPropertyAnimation::ensurePropertyMap): Add -webkit-clip-path to animatable
            properties.
        * rendering/style/BasicShapes.cpp:
            The blending is done by each shape itself. This is similar to FilterOperations or
            TransformOperations.
        (WebCore::BasicShapeRectangle::blend):
        (WebCore):
        (WebCore::BasicShapeCircle::blend):
        (WebCore::BasicShapeEllipse::blend):
        (WebCore::BasicShapePolygon::blend):
        * rendering/style/BasicShapes.h:
            Added new blending functions to header.
        (BasicShape):
        (BasicShapeRectangle):
        (BasicShapeCircle):
        (BasicShapeEllipse):
        (BasicShapePolygon):

2012-11-12  Adam Barth  <abarth@webkit.org>

        [V8] We should be able to get V8PerContextData from a v8::Context more quickly
        https://bugs.webkit.org/show_bug.cgi?id=102008

        Reviewed by Ojan Vafai.

        This patch uses the new v8::Context::GetAlignedPointerFromEmbedderData
        API to get the V8PerContextData associated with a v8::Context much more
        quickly. We no longer need to use a hidden property on the inner global
        object. This patch will enable future optimizations.

        * bindings/v8/V8HiddenPropertyName.h:
        (WebCore):
        * bindings/v8/V8PerContextData.cpp:
        (WebCore::V8PerContextData::dispose):
        (WebCore::V8PerContextData::init):
        * bindings/v8/V8PerContextData.h:
        (WebCore::V8PerContextData::from):

2012-11-12  Elliott Sprehn  <esprehn@chromium.org>

        Make Frames and HTMLFrameOwnerElement less friendly
        https://bugs.webkit.org/show_bug.cgi?id=102003

        Reviewed by Ojan Vafai.

        Frame used to assign HTMLFrameOwnerElement's m_contentFrame directly
        this patch makes it go through a method to allow future hooks when frames
        are associated with owners.

        No new tests, this is just a refactor.

        * html/HTMLFrameOwnerElement.cpp:
        (WebCore::HTMLFrameOwnerElement::setContentFrame):
        * html/HTMLFrameOwnerElement.h:
        (HTMLFrameOwnerElement):
        (WebCore::HTMLFrameOwnerElement::clearContentFrame):
        * page/Frame.cpp:
        (WebCore::Frame::Frame): Use new methods.

2012-11-12  Beth Dakin  <bdakin@apple.com>

        Zoomed-in scrolling is very slow when deviceScaleFactor > 1
        https://bugs.webkit.org/show_bug.cgi?id=101787

        Reviewed by Simon Fraser.

        This patch adds a new member to the GraphicsContextState that tracks 
        whether or not fonts should be subpixel-quantized. We want to default 
        to sibpixel-quantizing, but we'll turn it off if we're scrolling 
        content that cannot be scrolled on the scrolling thread.

        State has a new bool shouldSubpixelQuantizeFonts. It defaults to true 
        since normally we do want to quantize.
        * platform/graphics/GraphicsContext.cpp:
        (WebCore::GraphicsContext::setShouldSubpixelQuantizeFonts):
        (WebCore::GraphicsContext::shouldSubpixelQuantizeFonts):
        * platform/graphics/GraphicsContext.h:
        (WebCore::GraphicsContextState::GraphicsContextState):
        (GraphicsContextState):
        (GraphicsContext):

        wkSetCGFontRenderingMode now takes a BOOL parameter which indicates 
        whether or not it should try to subpixel-quantize the fonts.
        * platform/graphics/mac/FontMac.mm:
        (WebCore::Font::drawGlyphs):
        * platform/mac/WebCoreSystemInterface.h:
        * platform/mac/WebCoreSystemInterface.mm:

        Disable subpixel-quantization for overflow areas, subframes, and 
        content that is scrolling on the main thread.
        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::paintLayerContents):

2012-11-12  Timothy Hatcher  <timothy@apple.com>

        Expose InspectorFrontendClientLocal::setAttachedWindow as public.

        This allows external actions to update the docked state in the frontend.

        https://bugs.webkit.org/show_bug.cgi?id=102023

        Reviewed by Anders Carlsson.

        * inspector/InspectorFrontendClientLocal.h:
        Moved InspectorFrontendClientLocal::setAttachedWindow to public section.

2012-11-12  Erik Arvidsson  <arv@chromium.org>

        Replace DOMException TYPE_MISMATCH_ERR with TypeError
        https://bugs.webkit.org/show_bug.cgi?id=101604

        Reviewed by Adam Barth.

        DOMException.TYPE_MISMATCH_ERR is deprecated in favor of using TypeError.

        We have historically used TYPE_MISMATCH_ERR as a blanket DOMException code when
        the spec mandates TypeError being thrown.

        Updated existing tests.

        * Modules/mediastream/MediaConstraintsImpl.cpp:
        * Modules/mediastream/MediaStreamTrackList.cpp:
        * Modules/mediastream/PeerConnection00.cpp:
        * Modules/mediastream/RTCDataChannel.cpp:
        * Modules/mediastream/RTCIceCandidate.cpp:
        * Modules/mediastream/RTCPeerConnection.cpp:
        * Modules/mediastream/RTCSessionDescription.cpp:
        * Modules/mediastream/SessionDescription.cpp:
        * bindings/js/CallbackFunction.cpp:
        * bindings/js/JSCustomXPathNSResolver.cpp:
        * bindings/js/JSHTMLOptionsCollectionCustom.cpp:
        * bindings/js/JSHTMLSelectElementCustom.cpp:
        * bindings/js/JSMutationObserverCustom.cpp:
        * bindings/js/JSSQLResultSetRowListCustom.cpp:
        * bindings/js/JSSQLTransactionCustom.cpp:
        * bindings/js/JSSQLTransactionSyncCustom.cpp:
        * bindings/scripts/CodeGeneratorJS.pm:
        * bindings/scripts/CodeGeneratorObjC.pm:
        * bindings/scripts/CodeGeneratorV8.pm:
        * bindings/v8/V8Callback.h:
        * bindings/v8/V8Collection.cpp:
        * bindings/v8/custom/V8DocumentCustom.cpp:
        * bindings/v8/custom/V8HTMLOptionsCollectionCustom.cpp:
        * bindings/v8/custom/V8MutationObserverCustom.cpp:
        * bindings/v8/custom/V8SQLTransactionCustom.cpp:
        * bindings/v8/custom/V8SQLTransactionSyncCustom.cpp:
        * dom/DOMCoreException.idl:
        * html/HTMLElement.cpp:
        * html/HTMLMediaElement.cpp:
        * html/HTMLOptionsCollection.cpp:
        * html/canvas/CanvasRenderingContext2D.cpp:
        * page/Crypto.cpp:
        * page/DOMSelection.cpp:
        * svg/properties/SVGTransformListPropertyTearOff.h:

2012-11-12  Joshua Bell  <jsbell@chromium.org>

        IndexedDB: Use sequence<> instead of DOMString[] in IDL
        https://bugs.webkit.org/show_bug.cgi?id=100539

        Reviewed by Adam Barth.

        In the binding layer, DOMString[] is implemented as an alias for DOMStringList.
        WebIDL usage is tending towards sequence<DOMString> anyway for inputs, so switch
        to that. Note webkit.org/b/100537 which requires sequence<String> instead.

        Covered by storage/indexeddb/transaction-basics.html and objectstore-basics.html

        * Modules/indexeddb/IDBDatabase.cpp:
        (WebCore::IDBDatabase::transaction): DOMStringList -> Vector<String>
        * Modules/indexeddb/IDBDatabase.h:
        (WebCore::IDBDatabase::transaction):
        (IDBDatabase):
        * Modules/indexeddb/IDBDatabase.idl: DOMString[] -> sequence<String>
        * Modules/indexeddb/IDBObjectStore.cpp: Move trivial impls to header.
        * Modules/indexeddb/IDBObjectStore.h:
        (WebCore::IDBObjectStore::createIndex):
        * Modules/indexeddb/IDBObjectStore.idl: DOMString[] -> sequence<String>

2012-11-12  Anders Carlsson  <andersca@apple.com>

        Remove Leopard only gradient code
        https://bugs.webkit.org/show_bug.cgi?id=102033

        Reviewed by Dan Bernstein.

        USE_CG_SHADING was only ever true on Leopard, so we can remove it now.

        * platform/graphics/Gradient.h:
        * platform/graphics/cg/GradientCG.cpp:
        (WebCore::Gradient::platformDestroy):
        (WebCore::Gradient::platformGradient):
        (WebCore::Gradient::paint):

2012-11-12  Tiancheng Jiang  <tijiang@rim.com>

        [BlackBerry] Update BB10 form theme.
        https://bugs.webkit.org/show_bug.cgi?id=100760

        Reviewed by Rob Buis.

        RIM PR 237003
        Internally Reviewed by Eli Fidler.
        Since we nolonger use small font for form controls, adjust paddingDivisor
        ratio to decrease the padding value.

        * platform/blackberry/RenderThemeBlackBerry.cpp:
        (WebCore):

2012-11-12  Simon Fraser  <simon.fraser@apple.com>

        Fix filter dirty rect regression from r134311
        https://bugs.webkit.org/show_bug.cgi?id=102002

        Reviewed by Beth Dakin.

        When rendering with filters, the code can inflate the root-relative
        paintDirtyRect in RenderLayer::paintLayerContents(), and my cleanup
        broke this behavior.
    
        Fix by making a local copy of LayerPaintingInfo, updating its paintDirtyRect,
        and using it for the rest of the function.

        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::paintLayerContents):

2012-11-12  Kentaro Hara  <haraken@chromium.org>

        [V8] V8Event::valueAccessorGetter() in custom binding is not used
        https://bugs.webkit.org/show_bug.cgi?id=101893

        Reviewed by Adam Barth.

        No tests. No change in behavior.

        * bindings/v8/custom/V8EventCustom.cpp:

2012-11-12  Roger Fong  <roger_fong@apple.com>

        Web Inspector: Fix docking behaviour on Windows.
        https://bugs.webkit.org/show_bug.cgi?id=101978

        Reviewed by Brian Weinstein.

        There are a number of problems with docking behaviour on Windows.
        For starters, it does not ever constrain the inspector's size properly while docked.
        It also does not properly set the whether or not the inspector can be docked/undocked.
        This patch fixes both issues.

        * inspector/InspectorFrontendClientLocal.cpp:
        (WebCore::InspectorFrontendClientLocal::frontendLoaded):
        Switch order of calling bringToFront and setDockingUnavailable.

2012-11-12  Adam Barth  <abarth@webkit.org>

        [V8] Update callers to use the aligned pointer API rather than the deprecated unaligned pointer API
        https://bugs.webkit.org/show_bug.cgi?id=101519

        Reviewed by Ojan Vafai.

        There should be no change in behavior.  The new API is slightly faster
        than the old API (and apparently works correctly internally in V8).

        * bindings/scripts/CodeGeneratorV8.pm:
        (GenerateHeader):
        * bindings/scripts/test/V8/V8Float64Array.h:
        (WebCore::V8Float64Array::toNative):
        * bindings/scripts/test/V8/V8TestActiveDOMObject.h:
        (WebCore::V8TestActiveDOMObject::toNative):
        * bindings/scripts/test/V8/V8TestCustomNamedGetter.h:
        (WebCore::V8TestCustomNamedGetter::toNative):
        * bindings/scripts/test/V8/V8TestEventConstructor.h:
        (WebCore::V8TestEventConstructor::toNative):
        * bindings/scripts/test/V8/V8TestEventTarget.h:
        (WebCore::V8TestEventTarget::toNative):
        * bindings/scripts/test/V8/V8TestException.h:
        (WebCore::V8TestException::toNative):
        * bindings/scripts/test/V8/V8TestInterface.h:
        (WebCore::V8TestInterface::toNative):
        * bindings/scripts/test/V8/V8TestMediaQueryListListener.h:
        (WebCore::V8TestMediaQueryListListener::toNative):
        * bindings/scripts/test/V8/V8TestNamedConstructor.h:
        (WebCore::V8TestNamedConstructor::toNative):
        * bindings/scripts/test/V8/V8TestNode.h:
        (WebCore::V8TestNode::toNative):
        * bindings/scripts/test/V8/V8TestObj.h:
        (WebCore::V8TestObj::toNative):
        * bindings/scripts/test/V8/V8TestSerializedScriptValueInterface.h:
        (WebCore::V8TestSerializedScriptValueInterface::toNative):
        * bindings/v8/NPV8Object.cpp:
        (WebCore::v8ObjectToNPObject):
        (WebCore::npCreateV8ScriptObject):
        * bindings/v8/V8Collection.h:
        (WebCore::toNativeCollection):
        * bindings/v8/V8DOMWindowShell.cpp:
        (WebCore::setIsolatedWorldField):
        (WebCore::V8DOMWindowShell::enteredIsolatedWorldContext):
        * bindings/v8/V8DOMWrapper.cpp:
        (WebCore::V8DOMWrapper::isWrapperOfType):
        * bindings/v8/V8DOMWrapper.h:
        (WebCore::V8DOMWrapper::setDOMWrapper):
        (WebCore::V8DOMWrapper::clearDOMWrapper):
        * bindings/v8/WrapperTypeInfo.h:
        (WebCore::toNative):
        (WebCore::toWrapperTypeInfo):

2012-11-12  Andreas Kling  <kling@webkit.org>

        Rename AttributeStyle => PresentationAttributeStyle across WebCore.
        <http://webkit.org/b/101975>

        Rubber-stamped by Antti Koivisto.

        The completely separate concepts of "attribute style" and "style attribute" were a bit too
        easy to confuse in variable and method names. Reconfigure our terminology to call it
        "presentation attribute style" instead of "attribute style".

        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::sweepMatchedPropertiesCache):
        (WebCore::StyleResolver::matchAllRules):
        (WebCore::StyleResolver::canShareStyleWithElement):
        * dom/Attr.cpp:
        (WebCore::Attr::style):
        * dom/ElementAttributeData.cpp:
        (WebCore::MutableElementAttributeData::MutableElementAttributeData):
        (WebCore::ElementAttributeData::reportMemoryUsage):
        * dom/ElementAttributeData.h:
        (WebCore::ElementAttributeData::presentationAttributeStyle):
        (WebCore::ElementAttributeData::setPresentationAttributeStyle):
        (ElementAttributeData):
        * dom/Node.h:
        (WebCore::Node::attributeStyleDirty):
        (WebCore::Node::setPresentationAttributeStyleDirty):
        (WebCore::Node::clearPresentationAttributeStyleDirty):
        * dom/StyledElement.cpp:
        (WebCore::StyledElement::attributeChanged):
        (WebCore::StyledElement::rebuildPresentationAttributeStyle):
        (WebCore::StyledElement::addPropertyToPresentationAttributeStyle):
        * dom/StyledElement.h:
        (WebCore::StyledElement::additionalPresentationAttributeStyle):
        (StyledElement):
        (WebCore::StyledElement::collectStyleForPresentationAttribute):
        (WebCore::StyledElement::presentationAttributeStyle):
        * html/HTMLBRElement.cpp:
        (WebCore::HTMLBRElement::collectStyleForPresentationAttribute):
        * html/HTMLBRElement.h:
        (HTMLBRElement):
        * html/HTMLBodyElement.cpp:
        (WebCore::HTMLBodyElement::collectStyleForPresentationAttribute):
        * html/HTMLBodyElement.h:
        (HTMLBodyElement):
        * html/HTMLDivElement.cpp:
        (WebCore::HTMLDivElement::collectStyleForPresentationAttribute):
        * html/HTMLDivElement.h:
        (HTMLDivElement):
        * html/HTMLElement.cpp:
        (WebCore::HTMLElement::applyBorderAttributeToStyle):
        (WebCore::HTMLElement::mapLanguageAttributeToLocale):
        (WebCore::HTMLElement::collectStyleForPresentationAttribute):
        (WebCore::HTMLElement::applyAlignmentAttributeToStyle):
        (WebCore::HTMLElement::addHTMLLengthToStyle):
        * html/HTMLElement.h:
        (HTMLElement):
        * html/HTMLEmbedElement.cpp:
        (WebCore::HTMLEmbedElement::collectStyleForPresentationAttribute):
        * html/HTMLEmbedElement.h:
        (HTMLEmbedElement):
        * html/HTMLFontElement.cpp:
        (WebCore::HTMLFontElement::collectStyleForPresentationAttribute):
        * html/HTMLFontElement.h:
        (HTMLFontElement):
        * html/HTMLFrameSetElement.cpp:
        (WebCore::HTMLFrameSetElement::collectStyleForPresentationAttribute):
        * html/HTMLFrameSetElement.h:
        (HTMLFrameSetElement):
        * html/HTMLHRElement.cpp:
        (WebCore::HTMLHRElement::collectStyleForPresentationAttribute):
        * html/HTMLHRElement.h:
        (HTMLHRElement):
        * html/HTMLIFrameElement.cpp:
        (WebCore::HTMLIFrameElement::collectStyleForPresentationAttribute):
        * html/HTMLIFrameElement.h:
        (HTMLIFrameElement):
        * html/HTMLImageElement.cpp:
        (WebCore::HTMLImageElement::collectStyleForPresentationAttribute):
        * html/HTMLImageElement.h:
        (HTMLImageElement):
        * html/HTMLInputElement.cpp:
        (WebCore::HTMLInputElement::collectStyleForPresentationAttribute):
        * html/HTMLInputElement.h:
        (HTMLInputElement):
        * html/HTMLLIElement.cpp:
        (WebCore::HTMLLIElement::collectStyleForPresentationAttribute):
        * html/HTMLLIElement.h:
        (HTMLLIElement):
        * html/HTMLMarqueeElement.cpp:
        (WebCore::HTMLMarqueeElement::collectStyleForPresentationAttribute):
        * html/HTMLMarqueeElement.h:
        (HTMLMarqueeElement):
        * html/HTMLOListElement.cpp:
        (WebCore::HTMLOListElement::collectStyleForPresentationAttribute):
        * html/HTMLOListElement.h:
        (HTMLOListElement):
        * html/HTMLObjectElement.cpp:
        (WebCore::HTMLObjectElement::collectStyleForPresentationAttribute):
        * html/HTMLObjectElement.h:
        (HTMLObjectElement):
        * html/HTMLParagraphElement.cpp:
        (WebCore::HTMLParagraphElement::collectStyleForPresentationAttribute):
        * html/HTMLParagraphElement.h:
        (HTMLParagraphElement):
        * html/HTMLPlugInElement.cpp:
        (WebCore::HTMLPlugInElement::collectStyleForPresentationAttribute):
        * html/HTMLPlugInElement.h:
        (HTMLPlugInElement):
        * html/HTMLPreElement.cpp:
        (WebCore::HTMLPreElement::collectStyleForPresentationAttribute):
        * html/HTMLPreElement.h:
        (HTMLPreElement):
        * html/HTMLTableCaptionElement.cpp:
        (WebCore::HTMLTableCaptionElement::collectStyleForPresentationAttribute):
        * html/HTMLTableCaptionElement.h:
        (HTMLTableCaptionElement):
        * html/HTMLTableCellElement.cpp:
        (WebCore::HTMLTableCellElement::collectStyleForPresentationAttribute):
        (WebCore::HTMLTableCellElement::additionalPresentationAttributeStyle):
        * html/HTMLTableCellElement.h:
        (HTMLTableCellElement):
        * html/HTMLTableColElement.cpp:
        (WebCore::HTMLTableColElement::collectStyleForPresentationAttribute):
        (WebCore::HTMLTableColElement::additionalPresentationAttributeStyle):
        * html/HTMLTableColElement.h:
        (HTMLTableColElement):
        * html/HTMLTableElement.cpp:
        (WebCore::HTMLTableElement::collectStyleForPresentationAttribute):
        (WebCore::HTMLTableElement::additionalPresentationAttributeStyle):
        * html/HTMLTableElement.h:
        (HTMLTableElement):
        * html/HTMLTablePartElement.cpp:
        (WebCore::HTMLTablePartElement::collectStyleForPresentationAttribute):
        * html/HTMLTablePartElement.h:
        (HTMLTablePartElement):
        * html/HTMLTableSectionElement.cpp:
        (WebCore::HTMLTableSectionElement::additionalPresentationAttributeStyle):
        * html/HTMLTableSectionElement.h:
        (HTMLTableSectionElement):
        * html/HTMLTextAreaElement.cpp:
        (WebCore::HTMLTextAreaElement::collectStyleForPresentationAttribute):
        * html/HTMLTextAreaElement.h:
        (HTMLTextAreaElement):
        * html/HTMLUListElement.cpp:
        (WebCore::HTMLUListElement::collectStyleForPresentationAttribute):
        * html/HTMLUListElement.h:
        (HTMLUListElement):
        * html/HTMLVideoElement.cpp:
        (WebCore::HTMLVideoElement::collectStyleForPresentationAttribute):
        * html/HTMLVideoElement.h:
        (HTMLVideoElement):
        * inspector/InspectorCSSAgent.cpp:
        (WebCore::InspectorCSSAgent::buildObjectForAttributesStyle):
        * mathml/MathMLElement.cpp:
        (WebCore::MathMLElement::collectStyleForPresentationAttribute):
        * mathml/MathMLElement.h:
        (MathMLElement):
        * svg/SVGImageElement.cpp:
        (WebCore::SVGImageElement::collectStyleForPresentationAttribute):
        * svg/SVGImageElement.h:
        (SVGImageElement):
        * svg/SVGStyledElement.cpp:
        (WebCore::SVGStyledElement::collectStyleForPresentationAttribute):
        * svg/SVGStyledElement.h:
        (SVGStyledElement):
        * svg/SVGTextContentElement.cpp:
        (WebCore::SVGTextContentElement::collectStyleForPresentationAttribute):
        * svg/SVGTextContentElement.h:
        (SVGTextContentElement):

2012-11-12  Adam Barth  <abarth@webkit.org>

        [V8] Many things crash when switching to V8's new aligned pointer API
        https://bugs.webkit.org/show_bug.cgi?id=101994

        Reviewed by Eric Seidel.

        When using the aligned pointer API, we need to make sure to initialize
        every internal field that we later read because the new API has better
        error checks than the old API. This patch explicitly initializes the
        enteredIsolatedWorldIndex internal field to zero for main worlds,
        fixing the LayoutTest crashes from our previous attempt to move the
        aligned pointer API.

        * bindings/v8/V8DOMWindowShell.cpp:
        (WebCore::V8DOMWindowShell::initializeIfNeeded):

2012-11-12  Simon Fraser  <simon.fraser@apple.com>

        Reduce the crazy number of parameters to RenderLayer painting member functions
        https://bugs.webkit.org/show_bug.cgi?id=101895

        Reviewed by Beth Dakin.

        The various RenderLayer::paintLayer* functions took a lot of arguments, most
        of which were passed down directly to descendants.
        
        Gather these arguments into a LayerPaintingInfo struct.

        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::paint): Create a LayerPaintingInfo struct to pass
        to descendant paint calls.
        (WebCore::RenderLayer::paintOverlayScrollbars): Ditto.
        (WebCore::RenderLayer::paintLayer): When painting transformed layers, we
        make a new LayerPaintingInfo because the root layer is shifted.
        (WebCore::RenderLayer::paintLayerContentsAndReflection):
        (WebCore::RenderLayer::paintLayerContents):
        (WebCore::RenderLayer::paintList):
        (WebCore::RenderLayer::paintPaginatedChildLayer):
        (WebCore::RenderLayer::paintChildLayerIntoColumns): Create a new LayerPaintingInfo
        struct for column painting.
        * rendering/RenderLayer.h:
        (WebCore::RenderLayer::LayerPaintingInfo::LayerPaintingInfo):
        (LayerPaintingInfo):
        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::paintIntoLayer): Build a LayerPaintingInfo
        to enter layer painting.
        * rendering/RenderReplica.cpp:
        (WebCore::RenderReplica::paint): Ditto.

2012-11-12  Brady Eidson  <beidson@apple.com>

        NetworkProcess: Use an accurate shouldContentSniff value when creating ResourceHandles
        https://bugs.webkit.org/show_bug.cgi?id=101872

        Reviewed by Alexey Proskuryakov.

        Expose shouldSniffContent to pass it along to the NetworkProcess.

        * loader/ResourceLoader.h:
        (WebCore::ResourceLoader::shouldSniffContent):

2012-11-12  Christophe Dumez  <christophe.dumez@intel.com>

        Fix memory leak in createSurfaceForBackingStore()
        https://bugs.webkit.org/show_bug.cgi?id=101941

        Reviewed by Kenneth Rohde Christiansen.

        Fix memory leak in createSurfaceForBackingStore(),
        the RefPtr<cairo_surface_t> should be released
        when returned since we pass ownership to the
        caller.

        No new tests, no behavior change for layout tests.

        * platform/graphics/efl/CairoUtilitiesEfl.cpp:
        (WebCore::createSurfaceForBackingStore):

2012-11-12  Joe Mason  <jmason@rim.com>

        [BlackBerry] Update to new proxyInfo API
        https://bugs.webkit.org/show_bug.cgi?id=101945

        Reviewed by George Staikos.

        Internal PR: 234680
        Reviewed internally by: Leo Yang

        The proxyAddress, proxyUsername and proxyPassword methods in BlackBerry::Platform::Settings
        have been replaced with a single, more efficient proxyInfo method.

        No new tests because this is an API update with no behaviour change.

        * platform/network/blackberry/NetworkJob.cpp:
        (WebCore::NetworkJob::sendRequestWithCredentials):
        (WebCore::NetworkJob::storeCredentials):

2012-11-12  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r126157.
        http://trac.webkit.org/changeset/126157
        https://bugs.webkit.org/show_bug.cgi?id=101954

        This patch caused (untestable) regression of the volume
        property on Mac, Win, and Blackberry ports. (Requested by
        jernoble on #webkit).

        * platform/graphics/MediaPlayer.cpp:
        (WebCore::MediaPlayer::loadWithNextMediaEngine):
        (WebCore::MediaPlayer::setVolume):
        (WebCore::MediaPlayer::setMuted):
        (WebCore::MediaPlayer::setPreservesPitch):
        (WebCore::MediaPlayer::setSize):
        (WebCore::MediaPlayer::setVisible):
        (WebCore::MediaPlayer::setPreload):

2012-11-12  Arpita Bahuguna  <arpitabahuguna@gmail.com>

        Specified width CSS tables should not include border and padding as part of that width.
        https://bugs.webkit.org/show_bug.cgi?id=77028

        Reviewed by Julien Chaffraix.

        CSS table width should not include border and padding even though HTML
        tables size as though their width includes border/padding.

        This is applicable for all CSS tables with specified widths.

        The change would also make our rendering of CSS tables with specified
        width similar to that of Opera, IE and FF.

        Test: fast/table/css-table-width-with-border-padding.html

        * rendering/RenderTable.cpp:
        (WebCore::RenderTable::convertStyleLogicalWidthToComputedWidth):
        Added check for all (positive) specified widths for CSS tables to
        consider border and padding outside of the specified width.

2012-11-12  Allan Sandfeld Jensen  <allan.jensen@digia.com>

        Move resolving blob references to FormData.
        https://bugs.webkit.org/show_bug.cgi?id=101754

        Reviewed by Simon Hausmann.

        Resolving Blob-references to a set of just File and Data is done similar by several platforms.
        This patch adds a generic implementation in FormData and uses that from CFNetwork, Qt and
        BlackBerry network implementation.

        * platform/network/FormData.cpp:
        (WebCore::appendBlobResolved):
        (WebCore::FormData::resolveBlobReferences):
        * platform/network/FormData.h:
        * platform/network/blackberry/ResourceRequestBlackBerry.cpp:
        (WebCore::ResourceRequest::initializePlatformRequest):
        * platform/network/cf/FormDataStreamCFNet.cpp:
        (WebCore::setHTTPBody):
        * platform/network/qt/QNetworkReplyHandler.cpp:
        (WebCore::FormDataIODevice::prepareFormElements):

2012-11-12  Zeno Albisser  <zeno@webkit.org>

        GraphicsSurfaceGLX does not handle transparency correctly.
        https://bugs.webkit.org/show_bug.cgi?id=101943

        GraphicsSurfacGLX must consistently use RGBA texture format.
        glXCreateWindow must be called after creating the XWindow
        that serves as a temporary offscreen texture storage, in order
        to allow for transparency.
        When creating the offscreen XWindow we must make sure,
        that we use a framebuffer configuration that supports
        an alpha mask.

        Reviewed by Noam Rosenthal.

        * platform/graphics/surfaces/qt/GraphicsSurfaceGLX.cpp:
        (WebCore):
        (WebCore::GraphicsSurfacePrivate::GraphicsSurfacePrivate):
        (WebCore::GraphicsSurfacePrivate::~GraphicsSurfacePrivate):
        (WebCore::GraphicsSurfacePrivate::createSurface):
        (GraphicsSurfacePrivate):
        (WebCore::GraphicsSurface::platformPaintToTextureMapper):

2012-11-12  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r134225.
        http://trac.webkit.org/changeset/134225
        https://bugs.webkit.org/show_bug.cgi?id=101948

        Appears to have broken the EFL and GTK builds (Requested by
        abarth on #webkit).

        * bindings/js/JSHTMLElementCustom.cpp:
        (WebCore):
        (WebCore::JSHTMLElement::itemValue):
        (WebCore::JSHTMLElement::setItemValue):
        * bindings/v8/custom/V8HTMLElementCustom.cpp:
        (WebCore):
        (WebCore::V8HTMLElement::itemValueAccessorGetter):
        (WebCore::V8HTMLElement::itemValueAccessorSetter):
        * html/HTMLElement.idl:

2012-11-12  Allan Sandfeld Jensen  <allan.jensen@digia.com>

        hitTestResultAtPoint does two hit-tests if called on non main frame
        https://bugs.webkit.org/show_bug.cgi?id=101915

        Reviewed by Antonio Gomes.

        Always redirect hitTestResultAtPoint to the main-frame. This used to being
        done on every result that hit anything, which caused running the expensive 
        hit-tests multiple times in almost all cases.

        * page/EventHandler.cpp:
        (WebCore::EventHandler::hitTestResultAtPoint):

2012-11-12  Kentaro Hara  <haraken@chromium.org>

        [V8][JSC] ScriptProfileNode::callUID needs not to be [Custom]
        https://bugs.webkit.org/show_bug.cgi?id=101892

        Reviewed by Adam Barth.

        We can remove [Custom] from callUID in ScriptProfileNode.idl.

        No tests. No change in behavior.

        * GNUmakefile.list.am:
        * Target.pri:
        * UseJSC.cmake:
        * WebCore.gypi:
        * WebCore.vcproj/WebCore.vcproj:
        * WebCore.xcodeproj/project.pbxproj:
        * bindings/js/JSBindingsAllInOne.cpp:
        * bindings/js/JSScriptProfileNodeCustom.cpp: Removed.
        * bindings/v8/custom/V8ScriptProfileNodeCustom.cpp:
        * inspector/ScriptProfileNode.idl:

2012-11-12  Kentaro Hara  <haraken@chromium.org>

        [V8] Performance::memory getter needs not to be [Custom]
        https://bugs.webkit.org/show_bug.cgi?id=101890

        Reviewed by Adam Barth.

        No tests. No change in behavior.

        * UseV8.cmake:
        * WebCore.gypi:
        * bindings/v8/custom/V8PerformanceCustom.cpp: Removed.
        * page/Performance.idl:

2012-11-12  Kentaro Hara  <haraken@chromium.org>

        [V8][JSC] HTMLOptionsCollection::length needs not to be [Custom]
        https://bugs.webkit.org/show_bug.cgi?id=101888

        Reviewed by Adam Barth.

        We can remove [Custom] from getter. It is possible to remove [Custom]
        from setter, but it changes the current behavior.
        (I think the current implementation of the setter is wrong.
        I'll fix it in another patch.)

        No tests. No change in behavior.

        * bindings/js/JSHTMLOptionsCollectionCustom.cpp:
        * bindings/v8/custom/V8HTMLOptionsCollectionCustom.cpp:
        * html/HTMLOptionsCollection.idl:

2012-11-12  Yael Aharon  <yael.aharon@intel.com>

        [EFL][WK2][AC] Black screen when applications use software backend.
        https://bugs.webkit.org/show_bug.cgi?id=101659

        Reviewed by Kenneth Rohde Christiansen.

        Add a utility method to create a cairo_surface_t from a given Evas_Object_Image.

        No new tests. Will be covered when running existing tests without enabling openGL.

        * platform/graphics/efl/CairoUtilitiesEfl.cpp:
        (WebCore::createSurfaceForImage):
        (WebCore):
        * platform/graphics/efl/CairoUtilitiesEfl.h:
        (WebCore):

2012-11-12  Carlos Garcia Campos  <cgarcia@igalia.com>

        Unreviewed. Fix make distcheck.

        * GNUmakefile.am: Remove editing from IDL_PATH since it doesn't
        contain idl files anymore.
        * GNUmakefile.list.am: Add missing header files.

2012-11-12  Tommy Widenflycht  <tommyw@google.com>

        MediaStream API: Make sure that MediaConstraints only has optional and mandatory at the top level
        https://bugs.webkit.org/show_bug.cgi?id=101733

        Reviewed by Jochen Eisinger.

        This patch adds better verification to MediaConstraintsImpl.

        Existing tests expanded to cover this change.

        * Modules/mediastream/MediaConstraintsImpl.cpp:
        (WebCore::MediaConstraintsImpl::initialize):

2012-11-12  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r134223.
        http://trac.webkit.org/changeset/134223
        https://bugs.webkit.org/show_bug.cgi?id=101939

        Breaks inspector tests (Requested by pfeldman on #webkit).

        * inspector/front-end/DefaultTextEditor.js:
        (WebInspector.TextEditorChunkedPanel.prototype._repaintAll):
        (WebInspector.TextEditorMainPanel):
        (WebInspector.TextEditorMainPanel.prototype.markAndRevealRange):
        (WebInspector.TextEditorMainPanel.prototype.beginDomUpdates):
        (WebInspector.TextEditorMainPanel.prototype.endDomUpdates):
        (WebInspector.TextEditorMainPanel.prototype._paintScheduledLines):
        (WebInspector.TextEditorMainPanel.prototype._paintLineChunks):
        (WebInspector.TextEditorMainPanel.prototype._paintLine):
        (WebInspector.TextEditorMainPanel.prototype._insertSpanBefore):
        (WebInspector.TextEditorMainPanel.prototype._handleDOMUpdates):
        (WebInspector.TextEditorMainPanel.prototype._applyDomUpdates):
        * inspector/front-end/externs.js:
        * inspector/front-end/textEditor.css:

2012-11-12  Allan Sandfeld Jensen  <allan.jensen@digia.com>

        [Qt] Support ResourceRequest's setTimeoutInterval
        https://bugs.webkit.org/show_bug.cgi?id=101731

        Reviewed by Simon Hausmann.

        Establish a timeout and return the correct error when it is triggered.

        Tested by existing http/tests/xmlhttprequest/timeout tests.

        * platform/network/ResourceRequestBase.cpp:
        * platform/network/qt/QNetworkReplyHandler.cpp:
        (WebCore::QNetworkReplyHandler::release):
        (WebCore::QNetworkReplyHandler::finish):
        (WebCore::QNetworkReplyHandler::timeout):
        (WebCore::QNetworkReplyHandler::timerEvent):
        (WebCore::QNetworkReplyHandler::start):
        * platform/network/qt/QNetworkReplyHandler.h:
        (QNetworkReplyHandler):

2012-11-12  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r134224.
        http://trac.webkit.org/changeset/134224
        https://bugs.webkit.org/show_bug.cgi?id=101937

        asserting on bawts (Requested by kling on #webkit).

        * rendering/style/RenderStyle.cpp:
        (WebCore::RenderStyle::diff):
        (WebCore::RenderStyle::setColor):
        (WebCore::RenderStyle::setVisitedLinkColor):
        * rendering/style/RenderStyle.h:
        * rendering/style/StyleBackgroundData.cpp:
        (WebCore::StyleBackgroundData::StyleBackgroundData):
        * rendering/style/StyleBackgroundData.h:
        (WebCore::StyleBackgroundData::color):
        (StyleBackgroundData):
        * rendering/style/StyleInheritedData.cpp:
        (WebCore::StyleInheritedData::StyleInheritedData):
        * rendering/style/StyleInheritedData.h:
        (StyleInheritedData):
        * rendering/style/StyleMultiColData.cpp:
        (WebCore::StyleMultiColData::StyleMultiColData):
        * rendering/style/StyleMultiColData.h:
        (StyleMultiColData):
        * rendering/style/StyleRareInheritedData.cpp:
        (SameSizeAsStyleRareInheritedData):
        (WebCore::StyleRareInheritedData::StyleRareInheritedData):
        (WebCore::StyleRareInheritedData::operator==):
        * rendering/style/StyleRareInheritedData.h:
        (WebCore):
        (StyleRareInheritedData):
        * rendering/style/StyleRareNonInheritedData.cpp:
        (WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData):
        (WebCore::StyleRareNonInheritedData::operator==):
        * rendering/style/StyleRareNonInheritedData.h:
        (StyleRareNonInheritedData):

2012-11-12  Tiancheng Jiang  <tijiang@rim.com>

        [BlackBerry] Update BB10 form theme.
        https://bugs.webkit.org/show_bug.cgi?id=100760

        Reviewed by Rob Buis.

        RIM PR 236993
        Internally Reviewed by Jeff Rogers.
        Use slide and paint method on slider range and media controls.

        * platform/blackberry/RenderThemeBlackBerry.cpp:
        (WebCore):
        (WebCore::drawThreeSliceHorizontal):
        (WebCore::drawThreeSliceVertical):
        (WebCore::RenderThemeBlackBerry::paintSliderTrackRect):
        (WebCore::RenderThemeBlackBerry::paintMediaSliderTrack):
        (WebCore::RenderThemeBlackBerry::paintMediaSliderThumb):
        (WebCore::RenderThemeBlackBerry::paintMediaVolumeSliderTrack):
        * platform/blackberry/RenderThemeBlackBerry.h:
        (RenderThemeBlackBerry):

2012-11-12  Kent Tamura  <tkent@chromium.org>

        Refactoring: set read-only values on layout in DateTimeEditElement
        https://bugs.webkit.org/show_bug.cgi?id=101916

        Reviewed by Kentaro Hara.

        We have always updated read-only values when we set an empty value or
        DateTimeFieldsState. It has wasted CPU time because such read-only
        values are never updated after layout() essentially. So, we set
        read-only values in DateTimeEditBuilder used by layout(), and remove
        dateForReadOnlyField arguments of setEmptyValue and
        setValueAsDateTimeFieldsState.

        No new tests. This should not make behavior changes.

        * html/BaseMultipleFieldsDateAndTimeInputType.cpp:
        (WebCore::BaseMultipleFieldsDateAndTimeInputType::restoreFormControlState):
        We removed dateForReadOnlyField argument because read-only values are
        already set in DateTimeFieldElement::layout().
        * html/shadow/DateTimeEditElement.cpp:
        (WebCore::DateTimeEditBuilder::visitField):
        Set a value to a read-only minute/second/millisecond field while
        building UI elements.
        Also, changed variable types for millisecond and second fields to
        RefPtr<DateTimeNumericFieldElement> because we'd like to call
        setValueAsDate, which is private in DateTimeMillisecondFieldElement and
        DateTimeSecondFieldElement
        (WebCore::DateTimeEditElement::setValueAsDateTimeFieldsState):
        We removed dateForReadOnlyField argument because read-only values are
        already set in DateTimeFieldElement::layout().
        (WebCore::DateTimeEditElement::setEmptyValue): Ditto.
        * html/shadow/DateTimeEditElement.h:
        (DateTimeEditElement):
        Removed dateForReadOnlyField argument for setValueAsDateTimeFieldsState.

        * html/shadow/DateTimeFieldElement.cpp:
        (WebCore::DateTimeFieldElement::defaultKeyboardEventHandler):
        We removed dateForReadOnlyField argument because read-only values are
        already set in DateTimeFieldElement::layout().
        * html/shadow/DateTimeFieldElement.h:
        (DateTimeFieldElement): Ditto.

        * html/shadow/DateTimeFieldElements.cpp: Ditto.
        * html/shadow/DateTimeFieldElements.h: Ditto.
        * html/shadow/DateTimeNumericFieldElement.cpp:
        (WebCore::DateTimeNumericFieldElement::setEmptyValue):
        It should do nothing if it is read-only because a read-only value was
        already set just after construction.
        * html/shadow/DateTimeNumericFieldElement.h:
        (DateTimeNumericFieldElement):
        Removed dateForReadOnlyField argument of setEmptyValue.
        * html/shadow/DateTimeSymbolicFieldElement.cpp:
        (WebCore::DateTimeSymbolicFieldElement::setEmptyValue): Ditto.
        * html/shadow/DateTimeSymbolicFieldElement.h:
        (DateTimeSymbolicFieldElement): Ditto.

2012-11-12  Tiancheng Jiang  <tijiang@rim.com>

        [BlackBerry] Update BB10 form theme.
        https://bugs.webkit.org/show_bug.cgi?id=100760

        Reviewed by Rob Buis.

        RIM PR 236993
        Internally Reviewed by Jeff Rogers.
        Enable GL slider.

        * platform/blackberry/RenderThemeBlackBerry.cpp:
        (WebCore::drawThreeSlice):
        (WebCore):
        (WebCore::RenderThemeBlackBerry::paintSliderTrackRect):
        (WebCore::RenderThemeBlackBerry::paintSliderThumb):

2012-11-12  Kentaro Hara  <haraken@chromium.org>

        [V8][JSC] HTMLElement::itemValue() needs not to be custom
        https://bugs.webkit.org/show_bug.cgi?id=101882

        Reviewed by Adam Barth.

        We can remove a [Custom] IDL attribute.

        No tests. No change in behavior.

        * bindings/js/JSHTMLElementCustom.cpp:
        * bindings/v8/custom/V8HTMLElementCustom.cpp:
        * html/HTMLElement.idl:

2012-11-12  Andreas Kling  <kling@webkit.org>

        RenderStyle: Pack Color members tighter in substructures.
        <http://webkit.org/b/101860>

        Reviewed by Antti Koivisto.

        For RenderStyle substructures (StyleInheritedData, et al.), unfold all WebCore::Color
        members into RGBA32/bool variables OR just an RGBA32 if the color can never be invalid.

        Memory saved per instance:

            - StyleMultiColData:          4 bytes
            - StyleBackgroundData:        8 bytes
            - StyleInheritedData:         8 bytes
            - StyleRareInheritedData:    24 bytes
            - StyleRareNonInheritedData: 24 bytes

        323kB progression on Membuster3.

        * rendering/style/RenderStyle.cpp:
        (WebCore::RenderStyle::diff):
        (WebCore::RenderStyle::setColor):
        (WebCore::RenderStyle::setVisitedLinkColor):
        (WebCore::RenderStyle::setVisitedLinkColumnRuleColor):
        (WebCore::RenderStyle::setBackgroundColor):
        * rendering/style/RenderStyle.h:
        * rendering/style/StyleBackgroundData.cpp:
        (WebCore::StyleBackgroundData::StyleBackgroundData):
        * rendering/style/StyleBackgroundData.h:
        (WebCore::StyleBackgroundData::color):
        (StyleBackgroundData):
        * rendering/style/StyleInheritedData.cpp:
        (WebCore::StyleInheritedData::StyleInheritedData):
        * rendering/style/StyleInheritedData.h:
        (StyleInheritedData):
        * rendering/style/StyleMultiColData.cpp:
        (WebCore::StyleMultiColData::StyleMultiColData):
        (WebCore::StyleMultiColData::setVisitedLinkColumnRuleColor):
        * rendering/style/StyleMultiColData.h:
        (StyleMultiColData):
        (WebCore::StyleMultiColData::visitedLinkColumnRuleColor):
        * rendering/style/StyleRareInheritedData.cpp:
        (SameSizeAsStyleRareInheritedData):
        (WebCore::StyleRareInheritedData::StyleRareInheritedData):
        (WebCore::StyleRareInheritedData::operator==):
        (WebCore::StyleRareInheritedData::setTextStrokeColor):
        (WebCore::StyleRareInheritedData::setTextFillColor):
        (WebCore::StyleRareInheritedData::setTextEmphasisColor):
        (WebCore::StyleRareInheritedData::setVisitedLinkTextStrokeColor):
        (WebCore::StyleRareInheritedData::setVisitedLinkTextFillColor):
        (WebCore::StyleRareInheritedData::setVisitedLinkTextEmphasisColor):
        * rendering/style/StyleRareInheritedData.h:
        (StyleRareInheritedData):
        (WebCore::StyleRareInheritedData::textStrokeColor):
        (WebCore::StyleRareInheritedData::textFillColor):
        (WebCore::StyleRareInheritedData::textEmphasisColor):
        (WebCore::StyleRareInheritedData::visitedLinkTextStrokeColor):
        (WebCore::StyleRareInheritedData::visitedLinkTextFillColor):
        (WebCore::StyleRareInheritedData::visitedLinkTextEmphasisColor):
        * rendering/style/StyleRareNonInheritedData.cpp:
        (WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData):
        (WebCore::StyleRareNonInheritedData::operator==):
        (WebCore::StyleRareNonInheritedData::setVisitedLinkBorderLeftColor):
        (WebCore::StyleRareNonInheritedData::setVisitedLinkBorderRightColor):
        (WebCore::StyleRareNonInheritedData::setVisitedLinkBorderTopColor):
        (WebCore::StyleRareNonInheritedData::setVisitedLinkBorderBottomColor):
        (WebCore::StyleRareNonInheritedData::setVisitedLinkOutlineColor):
        (WebCore::StyleRareNonInheritedData::setVisitedLinkBackgroundColor):
        * rendering/style/StyleRareNonInheritedData.h:
        (WebCore::StyleRareNonInheritedData::visitedLinkBackgroundColor):
        (WebCore::StyleRareNonInheritedData::visitedLinkOutlineColor):
        (WebCore::StyleRareNonInheritedData::visitedLinkBorderLeftColor):
        (WebCore::StyleRareNonInheritedData::visitedLinkBorderRightColor):
        (WebCore::StyleRareNonInheritedData::visitedLinkBorderTopColor):
        (WebCore::StyleRareNonInheritedData::visitedLinkBorderBottomColor):
        (StyleRareNonInheritedData):

2012-11-12  Pavel Feldman  <pfeldman@chromium.org>

        Web Inspector: migrate text editor to mutation observers
        https://bugs.webkit.org/show_bug.cgi?id=101841

        Reviewed by Vsevolod Vlasov.

        Otherwise, we miss notifications on the removed lines.

        * inspector/front-end/DefaultTextEditor.js:
        (WebInspector.TextEditorMainPanel):
        (WebInspector.TextEditorMainPanel.prototype.beginDomUpdates):
        (WebInspector.TextEditorMainPanel.prototype.endDomUpdates):
        (WebInspector.TextEditorMainPanel.prototype._handleMutations):
        (WebInspector.TextEditorMainPanel.prototype._handleMutation):
        * inspector/front-end/externs.js:
        (WebKitMutation):
        (WebKitMutationObserver.prototype.observe):
        (WebKitMutationObserver.prototype.disconnect):

2012-11-12  Allan Sandfeld Jensen  <sandfeld@kde.org>

        [Qt] Flash-plugin starts with wrong width
        https://bugs.webkit.org/show_bug.cgi?id=101836

        Reviewed by Simon Hausmann.

        Defer the setWindow call, so that the one time it is called it will have its final size.

        * plugins/PluginPackage.cpp:
        (WebCore::PluginPackage::determineQuirks):

2012-11-12  Tommy Widenflycht  <tommyw@google.com>

        Remove the V8 custom code for WebSockets constructor
        https://bugs.webkit.org/show_bug.cgi?id=100801

        Reviewed by Kentaro Hara.

        This patch does the following:

        1) Modifies the V8 code generator to support overloaded constructors,
           the JS generator is fixed to work as before. Proper support for JS will come later.

        2) Modifies WebSocket.h/.cpp for the new constructors.

        Tested by running WebSockets layout tests.

        * Modules/websockets/WebSocket.cpp:
        (WebCore::WebSocket::create):
        (WebCore):
        * Modules/websockets/WebSocket.h:
        (WebSocket):
        * Modules/websockets/WebSocket.idl:
        * bindings/scripts/CodeGeneratorJS.pm:
        (GenerateConstructorDefinition):
        * bindings/scripts/CodeGeneratorV8.pm:
        (GenerateHeader):
        (GenerateOverloadedConstructorCallback):
        (GenerateSingleConstructorCallback):
        (GenerateConstructorCallback):
        (GenerateImplementation):
        * bindings/scripts/IDLParser.pm:
        (copyAttributes):
        (parseExtendedAttributeList):
        (parseExtendedAttributes):
        (applyExtendedAttributeList):
        * bindings/scripts/IDLStructure.pm:
        * bindings/scripts/test/CPP/WebDOMTestOverloadedConstructors.cpp: Added.
        (WebDOMTestOverloadedConstructors::WebDOMTestOverloadedConstructorsPrivate::WebDOMTestOverloadedConstructorsPrivate):
        (WebDOMTestOverloadedConstructors::WebDOMTestOverloadedConstructorsPrivate):
        (WebDOMTestOverloadedConstructors::WebDOMTestOverloadedConstructors):
        (WebDOMTestOverloadedConstructors::operator=):
        (WebDOMTestOverloadedConstructors::impl):
        (WebDOMTestOverloadedConstructors::~WebDOMTestOverloadedConstructors):
        (toWebCore):
        (toWebKit):
        * bindings/scripts/test/CPP/WebDOMTestOverloadedConstructors.h: Added.
        (WebCore):
        (WebDOMTestOverloadedConstructors):
        * bindings/scripts/test/GObject/WebKitDOMTestOverloadedConstructors.cpp: Added.
        (WebKit):
        (WebKit::kit):
        (WebKit::core):
        (WebKit::wrapTestOverloadedConstructors):
        (webkit_dom_test_overloaded_constructors_finalize):
        (webkit_dom_test_overloaded_constructors_set_property):
        (webkit_dom_test_overloaded_constructors_get_property):
        (webkit_dom_test_overloaded_constructors_constructed):
        (webkit_dom_test_overloaded_constructors_class_init):
        (webkit_dom_test_overloaded_constructors_init):
        * bindings/scripts/test/GObject/WebKitDOMTestOverloadedConstructors.h: Added.
        (_WebKitDOMTestOverloadedConstructors):
        (_WebKitDOMTestOverloadedConstructorsClass):
        * bindings/scripts/test/GObject/WebKitDOMTestOverloadedConstructorsPrivate.h: Added.
        (WebKit):
        * bindings/scripts/test/JS/JSTestOverloadedConstructors.cpp: Added.
        (WebCore):
        (WebCore::JSTestOverloadedConstructorsConstructor::JSTestOverloadedConstructorsConstructor):
        (WebCore::JSTestOverloadedConstructorsConstructor::finishCreation):
        (WebCore::JSTestOverloadedConstructorsConstructor::getOwnPropertySlot):
        (WebCore::JSTestOverloadedConstructorsConstructor::getOwnPropertyDescriptor):
        (WebCore::JSTestOverloadedConstructorsConstructor::constructJSTestOverloadedConstructors):
        (WebCore::JSTestOverloadedConstructorsConstructor::getConstructData):
        (WebCore::JSTestOverloadedConstructorsPrototype::self):
        (WebCore::JSTestOverloadedConstructors::JSTestOverloadedConstructors):
        (WebCore::JSTestOverloadedConstructors::finishCreation):
        (WebCore::JSTestOverloadedConstructors::createPrototype):
        (WebCore::JSTestOverloadedConstructors::destroy):
        (WebCore::JSTestOverloadedConstructors::~JSTestOverloadedConstructors):
        (WebCore::JSTestOverloadedConstructors::getOwnPropertySlot):
        (WebCore::JSTestOverloadedConstructors::getOwnPropertyDescriptor):
        (WebCore::jsTestOverloadedConstructorsConstructor):
        (WebCore::JSTestOverloadedConstructors::getConstructor):
        (WebCore::isObservable):
        (WebCore::JSTestOverloadedConstructorsOwner::isReachableFromOpaqueRoots):
        (WebCore::JSTestOverloadedConstructorsOwner::finalize):
        (WebCore::toJS):
        (WebCore::toTestOverloadedConstructors):
        * bindings/scripts/test/JS/JSTestOverloadedConstructors.h: Added.
        (WebCore):
        (JSTestOverloadedConstructors):
        (WebCore::JSTestOverloadedConstructors::create):
        (WebCore::JSTestOverloadedConstructors::createStructure):
        (WebCore::JSTestOverloadedConstructors::impl):
        (WebCore::JSTestOverloadedConstructors::releaseImpl):
        (WebCore::JSTestOverloadedConstructors::releaseImplIfNotNull):
        (JSTestOverloadedConstructorsOwner):
        (WebCore::wrapperOwner):
        (WebCore::wrapperContext):
        (JSTestOverloadedConstructorsPrototype):
        (WebCore::JSTestOverloadedConstructorsPrototype::create):
        (WebCore::JSTestOverloadedConstructorsPrototype::createStructure):
        (WebCore::JSTestOverloadedConstructorsPrototype::JSTestOverloadedConstructorsPrototype):
        (JSTestOverloadedConstructorsConstructor):
        (WebCore::JSTestOverloadedConstructorsConstructor::create):
        (WebCore::JSTestOverloadedConstructorsConstructor::createStructure):
        * bindings/scripts/test/ObjC/DOMTestOverloadedConstructors.h: Added.
        * bindings/scripts/test/ObjC/DOMTestOverloadedConstructors.mm: Added.
        (-[DOMTestOverloadedConstructors dealloc]):
        (-[DOMTestOverloadedConstructors finalize]):
        (core):
        (kit):
        * bindings/scripts/test/ObjC/DOMTestOverloadedConstructorsInternal.h: Added.
        (WebCore):
        * bindings/scripts/test/TestOverloadedConstructors.idl: Copied from Source/WebCore/bindings/scripts/test/TestSerializedScriptValueInterface.idl.
        * bindings/scripts/test/TestSerializedScriptValueInterface.idl:
        * bindings/scripts/test/V8/V8TestOverloadedConstructors.cpp: Added.
        (WebCore):
        (TestOverloadedConstructorsV8Internal):
        (WebCore::TestOverloadedConstructorsV8Internal::V8_USE):
        (WebCore::V8TestOverloadedConstructors::constructor1Callback):
        (WebCore::V8TestOverloadedConstructors::constructor2Callback):
        (WebCore::V8TestOverloadedConstructors::constructor3Callback):
        (WebCore::V8TestOverloadedConstructors::constructor4Callback):
        (WebCore::V8TestOverloadedConstructors::constructorCallback):
        (WebCore::ConfigureV8TestOverloadedConstructorsTemplate):
        (WebCore::V8TestOverloadedConstructors::GetRawTemplate):
        (WebCore::V8TestOverloadedConstructors::GetTemplate):
        (WebCore::V8TestOverloadedConstructors::HasInstance):
        (WebCore::V8TestOverloadedConstructors::wrapSlow):
        (WebCore::V8TestOverloadedConstructors::derefObject):
        * bindings/scripts/test/V8/V8TestOverloadedConstructors.h: Added.
        (WebCore):
        (V8TestOverloadedConstructors):
        (WebCore::V8TestOverloadedConstructors::toNative):
        (WebCore::V8TestOverloadedConstructors::installPerContextProperties):
        (WebCore::V8TestOverloadedConstructors::installPerContextPrototypeProperties):
        (WebCore::V8TestOverloadedConstructors::wrap):
        (WebCore::toV8):
        * bindings/v8/custom/V8WebSocketCustom.cpp:

2012-11-12  Shinya Kawanaka  <shinyak@chromium.org>

        [Refactoring] Create SelectRuleFeatureSet for collecting RuleFeatureSet for select attribute
        https://bugs.webkit.org/show_bug.cgi?id=101891

        Reviewed by Hajime Morita.

        We would like to have another class for RuleFeatureSet to collect 'select' attribute features,
        since it will have more features than the original RuleFeatureSet has.

        Also, some methods of ElementShadow are removed and we provide a method to get SelectRuleFeatureSet itself.

        No new tests, no change in behavior.

        * CMakeLists.txt:
        * GNUmakefile.list.am:
        * Target.pri:
        * WebCore.gypi:
        * WebCore.vcproj/WebCore.vcproj:
        * WebCore.xcodeproj/project.pbxproj:
        * dom/ElementShadow.h:
        (ElementShadow):
        (WebCore::ElementShadow::selectRuleFeatureSet):
        (WebCore):
        * html/shadow/SelectRuleFeatureSet.cpp: Added.
        (WebCore):
        (WebCore::SelectRuleFeatureSet::SelectRuleFeatureSet):
        (WebCore::SelectRuleFeatureSet::add):
        (WebCore::SelectRuleFeatureSet::clear):
        (WebCore::SelectRuleFeatureSet::collectFeaturesFromSelector):
        * html/shadow/SelectRuleFeatureSet.h: Added.
        (WebCore):
        (SelectRuleFeatureSet):
        (WebCore::SelectRuleFeatureSet::hasSelectorForId):
        (WebCore::SelectRuleFeatureSet::hasSelectorForClass):
        (WebCore::SelectRuleFeatureSet::hasSelectorForAttribute):
        * testing/Internals.cpp:
        (WebCore::Internals::hasSelectorForIdInShadow):
        (WebCore::Internals::hasSelectorForClassInShadow):
        (WebCore::Internals::hasSelectorForAttributeInShadow):

2012-11-13  Keishi Hattori  <keishi@webkit.org>

        Build fix for Chromium Android (caused by r134216)

        Unreviewed.

        No new tests.

        * platform/text/PlatformLocale.cpp:
        (WebCore::Locale::formatDateTime):

2012-11-12  Keishi Hattori  <keishi@webkit.org>

        Add support for week/month to Locale::formatDateTime()
        https://bugs.webkit.org/show_bug.cgi?id=101878

        Reviewed by Kent Tamura.

        Adding support for week/month to Locale::formatDateTime() in preparation for datalist support for <input type=week/month>.

        Added Chromium tests LocaleMacTest.formatWeek and LocaleMacTest.formatMonth.

        * platform/text/PlatformLocale.cpp:
        (WebCore::DateTimeStringBuilder::visitField):
        (WebCore::Locale::formatDateTime): Support week and month types.

2012-11-12  Allan Sandfeld Jensen  <allan.jensen@digia.com>

        [Qt] Can not load MHTML documents
        https://bugs.webkit.org/show_bug.cgi?id=101765

        Reviewed by Simon Hausmann.

        Recognize common MHTML extensions so that we can recognize MHTML tests on the file-system.

        Tested by existing mhtml/ tests.

        * platform/qt/MIMETypeRegistryQt.cpp:
        (WebCore):

2012-11-12  Andreas Kling  <akling@apple.com>

        Tighten vector in ResourceRequestBase::setResponseContentDispositionEncodingFallbackArray().
        <http://webkit.org/b/101850>

        Reviewed by Antti Koivisto.

        Reserve the exact amount of space needed for m_responseContentDispositionEncodingFallbackArray.
        222kB progression on Membuster3.

        * platform/network/ResourceRequestBase.cpp:
        (WebCore::ResourceRequestBase::setResponseContentDispositionEncodingFallbackArray):

2012-11-12  Tommy Widenflycht  <tommyw@google.com>

        MediaStream API: Schedule the RTCDataChannel events to be triggered at idle state
        https://bugs.webkit.org/show_bug.cgi?id=101751

        Reviewed by Adam Barth.

        This patch queues the events until the JS interpreter is in an idle state.

        Existing tests cover this patch.

        * Modules/mediastream/RTCDataChannel.cpp:
        (WebCore::RTCDataChannel::RTCDataChannel):
        (WebCore::RTCDataChannel::readyStateChanged):
        (WebCore::RTCDataChannel::dataArrived):
        (WebCore::RTCDataChannel::error):
        (WebCore::RTCDataChannel::scheduleDispatchEvent):
        (WebCore):
        (WebCore::RTCDataChannel::scheduledEventTimerFired):
        * Modules/mediastream/RTCDataChannel.h:
        (RTCDataChannel):
        * platform/chromium/support/WebRTCDataChannel.cpp:
        (WebKit::WebRTCDataChannel::setBufferedAmount):
        (WebKit::WebRTCDataChannel::readyStateChanged):
        (WebKit::WebRTCDataChannel::dataArrived):
        (WebKit::WebRTCDataChannel::error):

2012-11-12  Kunihiko Sakamoto  <ksakamoto@chromium.org>

        Remove HTMLInputElement dependency from PickerIndicatorElement
        https://bugs.webkit.org/show_bug.cgi?id=101913

        Reviewed by Kent Tamura.

        Introduced PickerIndicatorOwner interface that replaces the role of hostInput() in
        PickerIndicatorElement. It makes easier to add interactions between picker indicator
        and its owner without having to add functions to HTMLInputElement.

        No new tests. This is just a refactor.

        * html/BaseMultipleFieldsDateAndTimeInputType.cpp:
        (WebCore::BaseMultipleFieldsDateAndTimeInputType::isPickerIndicatorOwnerDisabledOrReadOnly): Added.
        (WebCore):
        (WebCore::BaseMultipleFieldsDateAndTimeInputType::pickerIndicatorChooseValue): Added.
        (WebCore::BaseMultipleFieldsDateAndTimeInputType::setupDateTimeChooserParameters): Added.
        (WebCore::BaseMultipleFieldsDateAndTimeInputType::~BaseMultipleFieldsDateAndTimeInputType):
        (WebCore::BaseMultipleFieldsDateAndTimeInputType::createShadowSubtree):
        (WebCore::BaseMultipleFieldsDateAndTimeInputType::destroyShadowSubtree):
        * html/BaseMultipleFieldsDateAndTimeInputType.h:
        (WebCore):
        (BaseMultipleFieldsDateAndTimeInputType): Implements PickerIndicatorOwner.
        * html/shadow/PickerIndicatorElement.cpp: Replaced all the use of hostInput() by using PickerIndicatorOwner.
        (WebCore::PickerIndicatorElement::PickerIndicatorElement):
        (WebCore::PickerIndicatorElement::create):
        (WebCore::PickerIndicatorElement::defaultEventHandler):
        (WebCore::PickerIndicatorElement::willRespondToMouseClickEvents):
        (WebCore::PickerIndicatorElement::didChooseValue):
        (WebCore::PickerIndicatorElement::openPopup):
        * html/shadow/PickerIndicatorElement.h:
        (PickerIndicatorElement): Added a PickerIndicatorOwner member.
        (PickerIndicatorOwner): An interface class for communicating picker indicator and its owner.
        (WebCore::PickerIndicatorElement::PickerIndicatorOwner::~PickerIndicatorOwner):
        (WebCore::PickerIndicatorElement::removePickerIndicatorOwner):

2012-11-12  Mihnea Ovidenie  <mihnea@adobe.com>

        [CSSRegions]Add support for text-shadow in region styling
        https://bugs.webkit.org/show_bug.cgi?id=94472

        Reviewed by David Hyatt.

        Original patch by Andrei Onea.
        Add support for text-shadow in region styling (@-webkit-region rule).
        In addition to the previously supported region styling properties (background-color and color),
        text-shadow requires the computation of an element style in region at layout time.

        This patch adds a new method on RenderRegion - ensureRegionStyleForObject - that
        can be used to retrieve the object style in region (if already cached) or to compute it
        on the spot. When computing the object style in region, we need to compute the style in region
        also for the object ancestor, up to the content nodes.

        This patch also refactors the way styles in region are computed and stored, because
        we can compute the style in region not only at paint time, but also at layout time.

        Test: fast/regions/region-style-text-shadow.html

        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::isValidRegionStyleProperty):
        Allow text-shadow to be used in region styling.
        * rendering/InlineBox.cpp:
        (WebCore::InlineBox::styleInRegion):
        Retrieve the region style for an InlineBox's renderer, given its RenderRegion.
        Compute the style in region if not computed yet.
        (WebCore::InlineBox::regionDuringLayout):
        Retrieve the region in which an InlineBox is being flowed.
        * rendering/InlineBox.h:
        * rendering/InlineFlowBox.cpp: Take region styling into account.
        (WebCore::InlineFlowBox::addToLine):
        (WebCore::InlineFlowBox::addTextBoxVisualOverflow):
        * rendering/RenderRegion.cpp:
        (WebCore::RenderRegion::setRegionObjectsRegionStyle):
        (WebCore::canCacheObjectStyleInRegion):
        Test if we can cache the computed style in region.
        (WebCore::RenderRegion::restoreRegionObjectsOriginalStyle):
        (WebCore::RenderRegion::computeStyleInRegion):
        (WebCore::RenderRegion::setChildrenStyleInRegion):
        (WebCore::setObjectHasBoxDecorationsFlag):
        (WebCore::RenderRegion::setObjectStyleInRegion):
        (WebCore::RenderRegion::clearObjectStyleInRegion):
        (WebCore::RenderRegion::ensureRegionStyleForObject):
        * rendering/RenderRegion.h:

2012-11-12  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r134154.
        http://trac.webkit.org/changeset/134154
        https://bugs.webkit.org/show_bug.cgi?id=101919

        Causes plenty of crashes on GTK and Apple Win builders
        (Requested by zdobersek on #webkit).

        * css/mediaControls.css:
        * css/mediaControlsQuickTime.css:
        (audio::-webkit-media-controls-toggle-closed-captions-button, video::-webkit-media-controls-toggle-closed-captions-button):
        (audio::-webkit-media-controls-volume-slider-mute-button, video::-webkit-media-controls-volume-slider-mute-button):
        * html/shadow/MediaControlElements.cpp:
        (WebCore::MediaControlToggleClosedCaptionsButtonElement::MediaControlToggleClosedCaptionsButtonElement):
        (WebCore::MediaControlToggleClosedCaptionsButtonElement::create):
        (WebCore::MediaControlToggleClosedCaptionsButtonElement::defaultEventHandler):
        (WebCore::MediaControlToggleClosedCaptionsButtonElement::updateDisplayType):
        (WebCore::MediaControlToggleClosedCaptionsButtonElement::shadowPseudoId):
        * html/shadow/MediaControlElements.h:
        (MediaControlElement):
        (MediaControlToggleClosedCaptionsButtonElement):
        * html/shadow/MediaControlRootElement.cpp:
        (WebCore::MediaControlRootElement::MediaControlRootElement):
        (WebCore::MediaControlRootElement::create):
        (WebCore::MediaControlRootElement::setMediaController):
        (WebCore::MediaControlRootElement::hide):
        (WebCore::MediaControlRootElement::makeTransparent):
        (WebCore::MediaControlRootElement::reset):
        (WebCore::MediaControlRootElement::reportedError):
        * html/shadow/MediaControlRootElement.h:
        (WebCore):
        (MediaControlRootElement):
        * html/shadow/MediaControlRootElementChromium.cpp:
        (WebCore::MediaControlRootElementChromium::initializeControls):
        * html/shadow/MediaControls.h:
        (MediaControls):
        * platform/Language.cpp:
        (WebCore):
        * platform/Language.h:
        (WebCore):
        * rendering/RenderMediaControls.cpp:
        (WebCore::RenderMediaControls::paintMediaControlsPart):
        * rendering/RenderMediaControlsChromium.cpp:
        (WebCore::RenderMediaControlsChromium::paintMediaControlsPart):

2012-11-12  Mike West  <mkwst@chromium.org>

        'for (x in y)' requires 'var' declaration in ConsoleMessage.js
        https://bugs.webkit.org/show_bug.cgi?id=101908

        Reviewed by Pavel Feldman.

        r134166 should have included a 'var' declaration in its 'for (x in y)'
        loop. This patch adds the missing 'var' in order to prevent leakage into
        the global context.

        * inspector/front-end/ConsoleMessage.js:
        (WebInspector.ConsoleMessageImpl.prototype.append):
        (WebInspector.ConsoleMessageImpl.prototype._formatWithSubstitutionString):

2012-11-12  Zeno Albisser  <zeno@webkit.org>

        [Qt] MiniBrowser should not strongly depend on QtTestSupport.
        https://bugs.webkit.org/show_bug.cgi?id=101775

        Introducing HAVE(QTTESTSUPPORT) to allow building
        MiniBrowser without QtTestSupport.
        This is necessary when using a production build.

        Reviewed by Tor Arne Vestbø.

        * Target.pri:
        * platform/qt/QtTestSupport.h:

2012-11-12  Pavel Feldman  <pfeldman@chromium.org>

        Web Inspector: wasShown is called twice when show() is called from within wasShown
        https://bugs.webkit.org/show_bug.cgi?id=101858

        Reviewed by Vsevolod Vlasov.

        When we attach views lazily from within wasShown, the views were getting wasShown notification twice.
        We now mute one of them.

        * inspector/front-end/View.js:
        (WebInspector.View):
        (WebInspector.View.prototype._inNotification):
        (WebInspector.View.prototype._parentIsShowing):
        (WebInspector.View.prototype._callOnVisibleChildren):
        (WebInspector.View.prototype._processWasShown):
        (WebInspector.View.prototype._processWillHide):
        (WebInspector.View.prototype._processOnResize):
        (WebInspector.View.prototype._notify):
        (WebInspector.View.prototype.show):

2012-11-12  Ryosuke Niwa  <rniwa@webkit.org>

        Build fix after r134191. Turns out that FrameView::performPostLayoutTasks calls FrameSelection::updateAppearance
        in the middle of a layout. So we can't have assertions in recomputeCaretRect and updateAppearance.

        Furthermore, we can't update layout in updateAppearance. So do that in its call sites.

        * editing/FrameSelection.cpp:
        (WebCore::FrameSelection::setSelection):
        (WebCore::FrameSelection::recomputeCaretRect):
        (WebCore::FrameSelection::updateAppearance):
        (WebCore::FrameSelection::setCaretVisibility):

2012-11-12  Shinya Kawanaka  <shinyak@chromium.org>

        Don't update style when attaching in HTMLMeterElement
        https://bugs.webkit.org/show_bug.cgi?id=101714

        Reviewed by Hajime Morita.

        HTMLMeterElement was updating style when it's being attached. However, updating style when attaching
        can cause style-update prevention. The similar thing has already happened in Bug 100507.

        Since we have already set the default value in creating ShadowDOM subtree, we don't need to update style actually.

        Test: fast/dom/HTMLMeterElement/meter-bar-set-value.html

        * html/HTMLMeterElement.cpp:
        * html/HTMLMeterElement.h:
        (HTMLMeterElement): Removed attach(). We don't need it.

2012-11-09  Ryosuke Niwa  <rniwa@webkit.org>

        Multiple Layout Tests (e.g. fast/repaint/japanese-rl-selection-clear.html) is failing after r133840.
        https://bugs.webkit.org/show_bug.cgi?id=101547

        Reviewed by Simon Fraser.

        I overlooked the fact when the selection is null, we still have to invalidate the caret rect that
        previously existed. Revert the optimization added in r133840 to skip caret invalidation when new
        selection is null, and add a special method to be called by FrameLoader prior to destruction instead.
        This will let us avoid doing an extra layout upon destruction and not regress repaint tests.

        Covered by existing tests.

        * editing/FrameSelection.cpp:
        (WebCore::FrameSelection::setSelection): Added DoNotUpdateAppearance option.
        (WebCore::FrameSelection::prepareForDestruction): Added.
        (WebCore::FrameSelection::updateAppearance): Reverted the flawed optimization added in r133840.
        Also, don't update style before updating selection unless text caret is disabled since we always
        update the layout (including style) when text caret is enabled.
        * editing/FrameSelection.h:
        (FrameSelection):
        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::clear): Call prepareForDestruction instead of clear to avoid a layout.

2012-11-11  Dongwoo Joshua Im  <dw.im@samsung.com>

        [CSS3] Parsing the property, text-align-last.
        https://bugs.webkit.org/show_bug.cgi?id=99439

        Reviewed by Julien Chaffraix.

        This patch implements the parsing side of the "text-align-last" property specified
        in CSS3 working draft, with "-webkit-" prefix, under ENABLE_CSS3_TEXT flag.
        Specification link : http://www.w3.org/TR/css3-text/#text-align-last

        Tests: fast/css3-text/css3-text-align-last/getComputedStyle/getComputedStyle-text-align-last-inherited.html
               fast/css3-text/css3-text-align-last/getComputedStyle/getComputedStyle-text-align-last.html

        * css/CSSComputedStyleDeclaration.cpp:
        (WebCore):
        (WebCore::CSSComputedStyleDeclaration::getPropertyCSSValue): Get the value of the text-align-last property.
        * css/CSSParser.cpp:
        (WebCore::CSSParser::parseValue): Parse the value, and check whether it is a proper value which text-align-last can have.
        * css/CSSPrimitiveValueMappings.h:
        (WebCore):
        (WebCore::CSSPrimitiveValue::CSSPrimitiveValue):
        (WebCore::CSSPrimitiveValue::operator ETextAlignLast):
        * css/CSSProperty.cpp:
        (WebCore::CSSProperty::isInheritedProperty):
        * css/CSSPropertyNames.in: Add '-webkit-text-align-last' property.
        * css/StyleBuilder.cpp:
        (WebCore::StyleBuilder::StyleBuilder):
        * css/StylePropertySet.cpp:
        (WebCore):
        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::applyProperty):
        * rendering/style/RenderStyle.h:
        * rendering/style/RenderStyleConstants.h:
        * rendering/style/StyleRareInheritedData.cpp:
        (WebCore::StyleRareInheritedData::StyleRareInheritedData):
        (WebCore::StyleRareInheritedData::operator==):
        * rendering/style/StyleRareInheritedData.h:
        (StyleRareInheritedData): Add m_textAlignLast.

2012-11-11  Shinya Kawanaka  <shinyak@chromium.org>

        [Refactoring] Remove shadowPseudoId() and use setPseudo() in HTMLKeygenElement
        https://bugs.webkit.org/show_bug.cgi?id=101881

        Reviewed by Kent Tamura.

        We're migrating shadowPseudoId() to pseudo(). We remove shadowPseudoId() from HTMLKeygenElement and use
        setPseudo()/pseudo() instead.

        No new tests, simple refacotring.

        * html/HTMLKeygenElement.cpp:
        (WebCore::KeygenSelectElement::KeygenSelectElement):
        (KeygenSelectElement):

2012-11-11  Adam Barth  <abarth@webkit.org>

        Many DOMWindowProperties would benefit from being ScriptWrappable
        https://bugs.webkit.org/show_bug.cgi?id=101887

        Reviewed by Kentaro Hara.

        These object are only ever created at the behest of script, which means
        making them ScriptWrappable is a win.

        * page/BarInfo.h:
        * page/Console.h:
        * page/Crypto.h:
        * page/History.h:
        * page/Location.h:
        * page/Navigator.h:
        * page/Performance.h:

2012-11-11  Kentaro Hara  <haraken@chromium.org>

        [V8] HTMLDocument::all() needs not to be custom
        https://bugs.webkit.org/show_bug.cgi?id=101875

        Reviewed by Adam Barth.

        We can easily remove the custom getter from V8 because the
        custom setter sets .all by ForceSet(). On the other hand,
        it is non-trivial to remove the custom getter from JSC
        because the custom setter sets .all by putDirect()
        and the custom getter wants to get it by getDirect().

        No tests. No change in behavior.

        * bindings/v8/custom/V8HTMLDocumentCustom.cpp:
        * html/HTMLDocument.idl:

2012-11-11  Kentaro Hara  <haraken@chromium.org>

        [V8] V8Console::memoryAttrGetter() needs not to be custom
        https://bugs.webkit.org/show_bug.cgi?id=101873

        Reviewed by Adam Barth.

        No tests. No change in behavior.

        * bindings/v8/custom/V8ConsoleCustom.cpp:
        (WebCore):
        * page/Console.idl:

2012-11-11  Shinya Kawanaka  <shinyak@chromium.org>

        [Shadow] ElementShadow should have RuleFeatureSet for select attribute selectors.
        https://bugs.webkit.org/show_bug.cgi?id=101180

        Reviewed by Dimitri Glazkov.

        This is a preparation patch for Bug 100451.

        We preserve RuleFeatureSet collected from select attributes in ShadowDOM.
        When an element attribute is changed, we might have to invalidate content distribution,
        however it's high cost operation. So we would like to check RuleFeatureSet used in
        select attributes to determine we really need to invalidate distribution.

        Like StyleResolver, ElementShadow has several rule features. When nested ShadowDOM is used,
        first we collect features in nested ShadowDOM, and merge it to the parent ShadowDOM.
        For the performance reason, we have a flag to check whether we need to collect features again.

        Test: fast/dom/shadow/shadow-select-attribute-featureset.html

        * WebCore.exp.in:
        * dom/ElementShadow.cpp:
        (WebCore::ElementShadow::ElementShadow):
        (WebCore::ElementShadow::setShouldCollectSelectFeatureSet): Enable a flag to collect feature set of descendant
        nodes (and their ShadowDOM).
        (WebCore):
        (WebCore::ElementShadow::ensureSelectFeatureSetCollected):
        (WebCore::ElementShadow::collectSelectFeatureSetFrom): Collect RuleFeatureSet from all descendant Nodes and their
        ShadowDOM. We need to collect id, class, and attribute names.
        * dom/ElementShadow.h:
        (WebCore::ElementShadow::shouldCollectSelectFeatureSet):
        (ElementShadow):
        (WebCore::ElementShadow::hasSelectorForId):
        (WebCore):
        (WebCore::ElementShadow::hasSelectorForClass):
        (WebCore::ElementShadow::hasSelectorForAttribute):
        * html/shadow/HTMLContentElement.cpp:
        (WebCore::HTMLContentElement::parseAttribute): When select attribute is changed, enable a flag to recollect features.
        (WebCore::HTMLContentElement::insertedInto): We have to recollect features when HTMLContentElement is moved.
        (WebCore::HTMLContentElement::removedFrom): ditto.
        * html/shadow/HTMLContentElement.h:
        (WebCore::toHTMLContentElement):
        (WebCore):
        * testing/Internals.cpp:
        (WebCore::Internals::hasSelectorForIdInShadow):
        (WebCore):
        (WebCore::Internals::hasSelectorForClassInShadow):
        (WebCore::Internals::hasSelectorForAttributeInShadow):
        * testing/Internals.h:
        (Internals):
        * testing/Internals.idl:

2012-11-11  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r134144.
        http://trac.webkit.org/changeset/134144
        https://bugs.webkit.org/show_bug.cgi?id=101876

        seems to break win 7 chromium browser test (Requested by
        hayato on #webkit).

        * WebCore.exp.in:
        * page/EventHandler.cpp:
        (WebCore):
        (WebCore::EventHandler::handleMouseMoveEvent):
        * page/EventHandler.h:
        (EventHandler):
        * testing/Internals.cpp:
        * testing/Internals.h:
        * testing/Internals.idl:

2012-11-11  Kent Tamura  <tkent@chromium.org>

        Internals: MockPagePopup should not update DOM structure during detach()
        https://bugs.webkit.org/show_bug.cgi?id=101710

        Reviewed by Hajime Morita.

        PickerIndicatorElement::detach calls
        MockPagePopupDriver::closePagePopup, MockPagePopup::~MockPagePopup,
        which remove the mock iframe from the tree. But updating the tree during
        detach() is dangerous.

        MockPagePopupDriver::closePagePopup calls MockpagePopup::closeLater, it
        requests to call 'close' asynchronously, and 'close' removes the mock
        iframe. We need to change MockPagePopup so that it is ref-couted and has
        a timer.

        No new tests. This is a change for the test harness.

        * testing/MockPagePopupDriver.cpp:
        (MockPagePopup): Make this ref-counted, add closeLater, add close, and
        add m_closeTimer.
        (WebCore::MockPagePopup::MockPagePopup): Initialize the timer.
        (WebCore::MockPagePopup::create): PassOwnPtr -> PassRefPtr
        (WebCore::MockPagePopup::closeLater):
        - Add one reference to avoid destruction by m_mockPagePopup.clear() in
          closePagePopup.
        - Notify didClosePopup here because the client expects didClosePopup is
          called synchronously.
        - Invoke the timer to call 'close'
        (WebCore::MockPagePopup::close):
        Just remove one reference. This means calling the desructor.
        (WebCore::MockPagePopup::~MockPagePopup):
        Move didClosePopup call to caloseLater.
        (WebCore::MockPagePopupDriver::closePagePopup):
        Request to close PagePopup.
        Clear PagePopupClient in m_pagePopupController because this object is
        necessary until MockPagePopup is closed, but it should not have a
        reference to the PagePopupClient.
        * testing/MockPagePopupDriver.h:
        (MockPagePopupDriver): Make MockPagePopup ref-counted.

2012-11-11  Adam Barth  <abarth@webkit.org>

        axObjectCache code is more complicated than necessary
        https://bugs.webkit.org/show_bug.cgi?id=101820

        Reviewed by Darin Adler.

        This code should use OwnPtr rather than manually calling new/delete.
        Also, instead of using a "double check" pattern, we can just access the
        private fields on the top document directly.

        * dom/Document.cpp:
        (WebCore::Document::Document):
        (WebCore::Document::clearAXObjectCache):
        (WebCore::Document::axObjectCacheExists):
        (WebCore):
        (WebCore::Document::axObjectCache):
        * dom/Document.h:
        (Document):

2012-11-10  Simon Fraser  <simon.fraser@apple.com>

        Save one call to containerForRepaint() when updating layer positions
        https://bugs.webkit.org/show_bug.cgi?id=101856

        Reviewed by Dan Bernstein.

         RenderLayer::updateLayerPositions() has already computed the repaint container,
         but calls computeRepaintRects() which computes it again. Computing the repaint
         container involves a walk back up the layer tree, so calling it during a tree
         traversal is costly.
         
         Fix by passing the repaint container down into computeRepaintRects().

        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::updateLayerPositions):
        (WebCore::RenderLayer::computeRepaintRects):
        (WebCore::RenderLayer::computeRepaintRectsIncludingDescendants):
        (WebCore::RenderLayer::updateLayerPositionsAfterScroll):
        (WebCore::RenderLayer::setHasVisibleContent):
        * rendering/RenderLayer.h:
        (RenderLayer):

2012-11-11  Kenichi Ishibashi  <bashi@chromium.org>

        WTFString::utf8() should have a mode of conversion to use replacement character
        https://bugs.webkit.org/show_bug.cgi?id=101678

        Reviewed by Alexey Proskuryakov.

        Follow the change on String::utf8()

        No new tests. No changes in behavior.

        * Modules/websockets/WebSocket.cpp:
        (WebCore::WebSocket::close): Pass String::StrictConversion instead of true to String::utf8().
        * Modules/websockets/WebSocketChannel.cpp:
        (WebCore::WebSocketChannel::send): Ditto.
        * html/MediaFragmentURIParser.cpp:
        (WebCore::MediaFragmentURIParser::parseFragments): Ditto.
        * platform/graphics/blackberry/MediaPlayerPrivateBlackBerry.cpp:
        (WebCore::MediaPlayerPrivate::notifyChallengeResult): Ditto.
        * platform/network/blackberry/rss/RSSFilterStream.cpp:
        (WebCore::RSSFilterStream::convertContentToHtml): Ditto.
        * platform/network/blackberry/rss/RSSGenerator.cpp:
        (WebCore::RSSGenerator::generateHtml): Ditto.

2012-11-10  Simon Fraser  <simon.fraser@apple.com>

        Coalesce main thread scroll position updates
        https://bugs.webkit.org/show_bug.cgi?id=101855

        Reviewed by Anders Carlsson.

        When using threaded scrolling, the dispatched updateMainFrameScrollPosition() calls 
        from ScrollingTree would pile up on the main thread, and we'd handle several per
        runloop cycle when scrolling fast. This causes extra work especially on pages
        with position:fixed elements which must update RenderLayers on scrolling.
        
        Fix by using a zero-delay timer in ScrollingCoordinator to coalesce these
        scrolling updates to one per runloop.

        * page/scrolling/ScrollingCoordinator.cpp:
        (WebCore::ScrollingCoordinator::ScrollingCoordinator): Initialized data members
        for the scheduled scroll position update.
        (WebCore::ScrollingCoordinator::scheduleUpdateMainFrameScrollPosition): If 
        the timer is active and the parameters match, just update the target scroll
        position and return. If the params don't match, dispatch the scheduled update,
        and then the new one. Otherwise, prime the timer.
        (WebCore::ScrollingCoordinator::updateMainFrameScrollPositionTimerFired): Call
        the existing updateMainFrameScrollPosition() with the saved values.
        * page/scrolling/ScrollingCoordinator.h:
        * page/scrolling/ScrollingTree.cpp:
        (WebCore::ScrollingTree::updateMainFrameScrollPosition): Call scheduleUpdateMainFrameScrollPosition()
        rather than updateMainFrameScrollPosition().
        * page/scrolling/mac/ScrollingCoordinatorMac.mm:
        (WebCore::ScrollingCoordinatorMac::syncChildPositions): Fixed a bug that caused fixed
        position elements to jiggle with the patch; we should be calling syncPosition() (which just
        sets the position data, without touching CA layers).

2012-11-10  Simon Fraser  <simon.fraser@apple.com>

        Remove ScrollingCoordinatorMac::updateMainFrameScrollPositionAndScrollLayerPosition()
        https://bugs.webkit.org/show_bug.cgi?id=101514

        Reviewed by Tim Horton.

        ScrollingCoordinatorMac::updateMainFrameScrollPositionAndScrollLayerPosition() is very similar to
        ScrollingCoordinator::updateMainFrameScrollPosition(). In order to eliminate updateMainFrameScrollPositionAndScrollLayerPosition(),
        we just need to plumb through a flag that says that updateMainFrameScrollPosition() should
        set the layer position (rather than just doing a 'sync').

        * page/scrolling/ScrollingCoordinator.cpp:
        (WebCore::ScrollingCoordinator::updateMainFrameScrollPosition):
        * page/scrolling/ScrollingCoordinator.h:
        * page/scrolling/ScrollingTree.cpp:
        (WebCore::ScrollingTree::updateMainFrameScrollPosition):
        * page/scrolling/ScrollingTree.h:
        * page/scrolling/mac/ScrollingCoordinatorMac.h:
        * page/scrolling/mac/ScrollingCoordinatorMac.mm:
        * page/scrolling/mac/ScrollingTreeScrollingNodeMac.mm:
        (WebCore::ScrollingTreeScrollingNodeMac::setScrollPositionWithoutContentEdgeConstraints):

2012-11-10  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r134069.
        http://trac.webkit.org/changeset/134069
        https://bugs.webkit.org/show_bug.cgi?id=101852

        "It is a wrong way to fix the problem. See discussions in bug
        96614" (Requested by 1JTAAPQFJ on #webkit).

        * bindings/js/JSDictionary.cpp:
        (WebCore::JSDictionary::getWithUndefinedOrNullCheck):

2012-11-10  Mike West  <mkwst@chromium.org>

        Web Inspector: Multiple '%c' formatting options should all have effect.
        https://bugs.webkit.org/show_bug.cgi?id=101495

        Reviewed by Pavel Feldman.

        This patch supports multiple '%c' formatting blocks in console messages.
        'console.log("%cblue! %cgreen!", "color: blue;", "color: green;")' will
        do exactly what you expect: "blue!" will be blue, and "green!" will be
        green.

        The implementation moves the styles off the message's parent 'span', and
        onto new 'span' elements that wrap the various textual bits of the
        message.

        * inspector/front-end/ConsoleMessage.js:
        (WebInspector.ConsoleMessageImpl.prototype.):
        (WebInspector.ConsoleMessageImpl.prototype.append):
        (WebInspector.ConsoleMessageImpl.prototype._formatWithSubstitutionString):

2012-11-10  Mike West  <mkwst@chromium.org>

        Including <CoreText/CoreText.h> breaks the chromium/mac build.
        https://bugs.webkit.org/show_bug.cgi?id=101851

        Reviewed by Dan Bernstein.

        r134146 introduced inclusion of 'CoreText/CoreText.h' in
        SimpleFontDataCoreText.cpp, which broke the chromium/mac build. Grepping
        around, it looks like this needs to be modified to include
        'ApplicationServices/ApplicationServices.h'.

        * platform/graphics/mac/SimpleFontDataCoreText.cpp:
            Drop 'CoreText.h' in favor of 'ApplicationServices.h'.
        * platform/graphics/mac/ComplexTextControllerCoreText.mm:
            Drop the platform-specific '#if' logic; just include 'ApplicationServices.h'.

2012-11-10  Andreas Kling  <kling@webkit.org>

        Don't detach from shared ElementAttributeData when overwriting attribute with identical value.
        <http://webkit.org/b/101849>

        Reviewed by Anders Carlsson.

        Defer the mutableAttributeData() call in Element::setAttributeInternal() until the last
        possible moment, to avoid unnecessarily detaching and cloning from attribute data.

        120 kB progression on Membuster3.

        * dom/Element.cpp:
        (WebCore::Element::setAttributeInternal):
        (WebCore::Element::addAttributeInternal):

2012-11-10  Simon Fraser  <simon.fraser@apple.com>

        Some minor optimizations in RenderLayer
        https://bugs.webkit.org/show_bug.cgi?id=101847

        Reviewed by Anders Carlsson.

        Some minor performance improvements in RenderLayer code.

        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::updateLayerPosition): isRenderInline() is a virtual call,
        so prefix it with an isInline() check which tests a bit on RenderObject.
        (WebCore::RenderLayer::localBoundingBox): Ditto.
        (WebCore::RenderLayer::calculateLayerBounds): Pull layer->renderer()
        into a local variable.

2012-11-10  Anders Carlsson  <andersca@apple.com>

        Document::m_fullScreenElementStack should be a Vector
        https://bugs.webkit.org/show_bug.cgi?id=101844

        Reviewed by Andreas Kling.

        m_fullScreenElementStack is currently a Deque where elements are being prepended
        and removed from the beginning in LIFO order, so it can be replaced with a Vector.

        * dom/Document.cpp:
        (WebCore::Document::requestFullScreenForElement):
        (WebCore::Document::webkitCancelFullScreen):
        (WebCore::Document::popFullscreenElementStack):
        (WebCore::Document::pushFullscreenElementStack):
        * dom/Document.h:
        (WebCore::Document::webkitFullscreenElement):
        (Document):

2012-11-10  Adam Barth  <abarth@webkit.org>

        [V8] Clean up header includes and ifdefs in V8GCController
        https://bugs.webkit.org/show_bug.cgi?id=101691

        Reviewed by Kentaro Hara.

        This file doesn't need to include all these headers anymore.

        * bindings/v8/V8GCController.cpp:
        (WebCore::workingSetEstimateMBMutex):
        (WebCore::V8GCController::majorGCEpilogue):
        (WebCore::V8GCController::checkMemoryUsage):

2012-11-10  Joseph Pecoraro  <pecoraro@apple.com>

        [Mac] Guard WebCore PageVisibility Symbol Export
        https://bugs.webkit.org/show_bug.cgi?id=101817

        Reviewed by Andreas Kling.

        Guard the export with the same ENABLE guards around its definition
        and implementation.

        * WebCore.exp.in:

2012-11-10  Bruno de Oliveira Abinader  <bruno.abinader@basyskom.com>

        [css] text-decoration:none no longer valid
        https://bugs.webkit.org/show_bug.cgi?id=101529

        Reviewed by Ojan Vafai.

        This patch fixes an issue where the 'none' value was parsed as explicitly
        'initial' value. However true in a sense that the initial value for the
        'text-decoration' property is 'none', the value itself could not be parsed as
        'initial'.

        The getComputedStyle layout tests for 'text-decoration' and
        '-webkit-text-decoration-line' CSS properties are updated with the correct
        results.

        * css/CSSParser.cpp:
        (WebCore::CSSParser::parseTextDecoration): When parsed, 'none' value
        gets its own identifier value instead of explicit initial.

2012-11-09  Dean Jackson  <dino@apple.com>

        Support list of tracks in caption media controls
        https://bugs.webkit.org/show_bug.cgi?id=101669

        Reviewed by Eric Carlson.

        Attempt three of commit. The first two times caused build failures on Chromium.

        Add some new elements to the media control shadow DOM that display the list of available
        tracks on an audio/video element. The UI is hidden by default everywhere but on Mac,
        where it is given a very basic design. At the moment only the list of available tracks
        are displayed; The followup bug will make the UI active: https://bugs.webkit.org/show_bug.cgi?id=101670

        No new tests - this doesn't expose any testable surface.

        * css/mediaControls.css: Added default rules that hide the new elements.
        * css/mediaControlsQuickTime.css: Specific rules that give a basic rendering of the new track list.
        * html/shadow/MediaControlElements.cpp:
        (WebCore::MediaControlElement::isShowing): Tests for the visibility of a control.
        (WebCore::MediaControlClosedCaptionsContainerElement::MediaControlClosedCaptionsContainerElement):
        (WebCore::MediaControlClosedCaptionsContainerElement::create):
        (WebCore::MediaControlClosedCaptionsContainerElement::shadowPseudoId):
        (WebCore::MediaControlToggleClosedCaptionsButtonElement::MediaControlToggleClosedCaptionsButtonElement):
        (WebCore::MediaControlToggleClosedCaptionsButtonElement::create): Now takes a reference to the media controls as a parameter.
        (WebCore::MediaControlToggleClosedCaptionsButtonElement::updateDisplayType):
        (WebCore::MediaControlToggleClosedCaptionsButtonElement::defaultEventHandler):
        (WebCore::MediaControlToggleClosedCaptionsButtonElement::shadowPseudoId):
        (WebCore::MediaControlClosedCaptionsTrackListElement::MediaControlClosedCaptionsTrackListElement): New element for holding a list of tracks to display.
        * html/shadow/MediaControlElements.h:
        (MediaControlElement):
        (MediaControlToggleClosedCaptionsButtonElement):
        (MediaControlClosedCaptionsContainerElement):
        (MediaControlClosedCaptionsTrackListElement): Examines the media element to build a shadow DOM that lists all the tracks available.
        * html/shadow/MediaControlRootElement.cpp:
        (WebCore::MediaControlRootElement::MediaControlRootElement):
        (WebCore::MediaControlRootElement::create): New track container and list elements created.
        (WebCore::MediaControlRootElement::setMediaController): Hook up the new elements to the controller..
        (WebCore::MediaControlRootElement::hide):
        (WebCore::MediaControlRootElement::makeTransparent):
        (WebCore::MediaControlRootElement::reset):
        (WebCore::MediaControlRootElement::reportedError):
        (WebCore::MediaControlRootElement::toggleClosedCaptionTrackList): Shows or hides the popup with the list of tracks.
        (WebCore):
        * html/shadow/MediaControlRootElement.h:
        (WebCore):
        (MediaControlRootElement):
        * html/shadow/MediaControlRootElementChromium.cpp:
        (WebCore::MediaControlRootElementChromium::initializeControls): Pass in the controls as a parameter.
        * html/shadow/MediaControls.h:
        (MediaControls):
        * platform/Language.cpp:
        (WebCore::displayNameForLanguageLocale): New function to return a human-readable name for a locale, given the identifier input.
        * platform/Language.h:
        (WebCore):
        * rendering/RenderMediaControls.cpp:
        (WebCore::RenderMediaControls::paintMediaControlsPart): New enum values into switch.
        * rendering/RenderMediaControlsChromium.cpp:
        (WebCore::RenderMediaControlsChromium::paintMediaControlsPart): New enum values into switch.

2012-11-09  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r134152.
        http://trac.webkit.org/changeset/134152
        https://bugs.webkit.org/show_bug.cgi?id=101831

        broke chromium again (Requested by dino_ on #webkit).

        * css/mediaControls.css:
        * css/mediaControlsQuickTime.css:
        (audio::-webkit-media-controls-toggle-closed-captions-button, video::-webkit-media-controls-toggle-closed-captions-button):
        (audio::-webkit-media-controls-volume-slider-mute-button, video::-webkit-media-controls-volume-slider-mute-button):
        * html/shadow/MediaControlElements.cpp:
        (WebCore::MediaControlToggleClosedCaptionsButtonElement::MediaControlToggleClosedCaptionsButtonElement):
        (WebCore::MediaControlToggleClosedCaptionsButtonElement::create):
        (WebCore::MediaControlToggleClosedCaptionsButtonElement::defaultEventHandler):
        (WebCore::MediaControlToggleClosedCaptionsButtonElement::updateDisplayType):
        (WebCore::MediaControlToggleClosedCaptionsButtonElement::shadowPseudoId):
        * html/shadow/MediaControlElements.h:
        (MediaControlElement):
        (MediaControlToggleClosedCaptionsButtonElement):
        * html/shadow/MediaControlRootElement.cpp:
        (WebCore::MediaControlRootElement::MediaControlRootElement):
        (WebCore::MediaControlRootElement::create):
        (WebCore::MediaControlRootElement::setMediaController):
        (WebCore::MediaControlRootElement::hide):
        (WebCore::MediaControlRootElement::makeTransparent):
        (WebCore::MediaControlRootElement::reset):
        (WebCore::MediaControlRootElement::reportedError):
        * html/shadow/MediaControlRootElement.h:
        (WebCore):
        (MediaControlRootElement):
        * html/shadow/MediaControlRootElementChromium.cpp:
        (WebCore::MediaControlRootElementChromium::initializeControls):
        * html/shadow/MediaControls.h:
        (MediaControls):
        * platform/Language.cpp:
        (WebCore):
        * platform/Language.h:
        (WebCore):
        * rendering/RenderMediaControls.cpp:
        (WebCore::RenderMediaControls::paintMediaControlsPart):
        * rendering/RenderMediaControlsChromium.cpp:
        (WebCore::RenderMediaControlsChromium::paintMediaControlsPart):

2012-11-09  Dean Jackson  <dino@apple.com>

        Support list of tracks in caption media controls
        https://bugs.webkit.org/show_bug.cgi?id=101669

        Reviewed by Eric Carlson.

        Attempt two of commit. The first time caused a build failure on Chromium.

        Add some new elements to the media control shadow DOM that display the list of available
        tracks on an audio/video element. The UI is hidden by default everywhere but on Mac,
        where it is given a very basic design. At the moment only the list of available tracks
        are displayed; The followup bug will make the UI active: https://bugs.webkit.org/show_bug.cgi?id=101670

        No new tests - this doesn't expose any testable surface.

        * css/mediaControls.css: Added default rules that hide the new elements.
        * css/mediaControlsQuickTime.css: Specific rules that give a basic rendering of the new track list.
        * html/shadow/MediaControlElements.cpp:
        (WebCore::MediaControlElement::isShowing): Tests for the visibility of a control.
        (WebCore::MediaControlClosedCaptionsContainerElement::MediaControlClosedCaptionsContainerElement):
        (WebCore::MediaControlClosedCaptionsContainerElement::create):
        (WebCore::MediaControlClosedCaptionsContainerElement::shadowPseudoId):
        (WebCore::MediaControlToggleClosedCaptionsButtonElement::MediaControlToggleClosedCaptionsButtonElement):
        (WebCore::MediaControlToggleClosedCaptionsButtonElement::create): Now takes a reference to the media controls as a parameter.
        (WebCore::MediaControlToggleClosedCaptionsButtonElement::updateDisplayType):
        (WebCore::MediaControlToggleClosedCaptionsButtonElement::defaultEventHandler):
        (WebCore::MediaControlToggleClosedCaptionsButtonElement::shadowPseudoId):
        (WebCore::MediaControlClosedCaptionsTrackListElement::MediaControlClosedCaptionsTrackListElement): New element for holding a list of tracks to display.
        * html/shadow/MediaControlElements.h:
        (MediaControlElement):
        (MediaControlToggleClosedCaptionsButtonElement):
        (MediaControlClosedCaptionsContainerElement):
        (MediaControlClosedCaptionsTrackListElement): Examines the media element to build a shadow DOM that lists all the tracks available.
        * html/shadow/MediaControlRootElement.cpp:
        (WebCore::MediaControlRootElement::MediaControlRootElement):
        (WebCore::MediaControlRootElement::create): New track container and list elements created.
        (WebCore::MediaControlRootElement::setMediaController): Hook up the new elements to the controller..
        (WebCore::MediaControlRootElement::hide):
        (WebCore::MediaControlRootElement::makeTransparent):
        (WebCore::MediaControlRootElement::reset):
        (WebCore::MediaControlRootElement::reportedError):
        (WebCore::MediaControlRootElement::toggleClosedCaptionTrackList): Shows or hides the popup with the list of tracks.
        (WebCore):
        * html/shadow/MediaControlRootElement.h:
        (WebCore):
        (MediaControlRootElement):
        * html/shadow/MediaControlRootElementChromium.cpp:
        (WebCore::MediaControlRootElementChromium::initializeControls): Pass in the controls as a parameter.
        * html/shadow/MediaControls.h:
        (MediaControls):
        * platform/Language.cpp:
        (WebCore::displayNameForLanguageLocale): New function to return a human-readable name for a locale, given the identifier input.
        * platform/Language.h:
        (WebCore):
        * rendering/RenderMediaControls.cpp:
        (WebCore::RenderMediaControls::paintMediaControlsPart): New enum values into switch.
        * rendering/RenderMediaControlsChromium.cpp:
        (WebCore::RenderMediaControlsChromium::paintMediaControlsPart): New enum values into switch.

2012-11-09  Ojan Vafai  <ojan@chromium.org>

        Should only fire a single set of mouse events and update hover state once when scrolling is done
        https://bugs.webkit.org/show_bug.cgi?id=99940

        Reviewed by Levi Weintraub.

        -Use a DeferrableOneShotTimer instead of a Timer. By resetting when the
        timer is fired, we ensure the actual goal of not firing fake mouse events
        until the scroll is completed. This is the core part of this change.
        -Change our mouse event throttling to keep a running average of how long
        mouse events take and adjust throttling appropriately.
        Test: fast/scrolling/fake-mouse-event-throttling.html
        -Maintain a minimum throttle of 100ms.

        * page/EventHandler.cpp:
        (WebCore):
        (WebCore::RunningAverageDurationTracker::RunningAverageDurationTracker):
        (WebCore::RunningAverageDurationTracker::~RunningAverageDurationTracker):
        Keep track of a running average instead of max. This lets us adjust throttling
        dynamically without punishing a page for having a single mouse event handler
        that takes disproportionately long.
        (RunningAverageDurationTracker):
        (WebCore::EventHandler::EventHandler):
        (WebCore::EventHandler::clear):
        (WebCore::EventHandler::mouseMoved):
        (WebCore::EventHandler::handleMouseMoveEvent):
        (WebCore::EventHandler::dispatchFakeMouseMoveEventSoon):
        (WebCore::EventHandler::fakeMouseMoveEventTimerFired):
        * page/EventHandler.h:
        (EventHandler):
        * platform/Timer.h:
        (WebCore::DeferrableOneShotTimer::setDelay):
        (WebCore::DeferrableOneShotTimer::delay):
        Add a way of adjusting the timer delay.

2012-11-09  Rick Byers  <rbyers@chromium.org>

        Move chromium to USE(LAZY_NATIVE_CURSOR)
        https://bugs.webkit.org/show_bug.cgi?id=101501

        Reviewed by Adam Barth.

        This simplifies cursor handling in chromium and unifies it with other
        ports for easier code sharing and testing by moving to the
        USE_LAZY_CURSOR model and eliminating PlatformCursor entirely.

        PlatformCursor adds no value in chromium since the sandboxing model
        requires the cursor information be marshalled to the browser process
        before being turned into a real OS cursor.

        Test: fast/events/mouse-cursor.html

        * WebCore.gypi:
        * platform/Cursor.h:
        (WebCore):
        * platform/chromium/CursorChromium.cpp:
        (WebCore::Cursor::Cursor):
        (WebCore::Cursor::operator=):
        (WebCore::Cursor::~Cursor):
        (WebCore::Cursor::ensurePlatformCursor):
        * platform/chromium/PlatformCursor.h: Removed.

2012-11-09  Noam Rosenthal  <noam.rosenthal@nokia.com>

        Allow ports to decide whether an image should be directly composited
        https://bugs.webkit.org/show_bug.cgi?id=101827

        Reviewed by Simon Fraser.

        Tested by compositing/tiling/huge-layer-img.html.

        * platform/graphics/GraphicsLayer.h:
        (WebCore::GraphicsLayer::shouldDirectlyCompositeImage):
            Allow the GraphicsLayer implementation to decide if the image can be composited.

        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::isDirectlyCompositedImage):
            Take onto account the new shouldDirectlyCompositeImage check.

2012-11-09  Dan Bernstein  <mitz@apple.com>

        SimpleFontData::getCFStringAttributes sets some attributes to their default values, but shouldn’t
        https://bugs.webkit.org/show_bug.cgi?id=101799

        Reviewed by Alexey Proskuryakov.

        In some configurations, setting kCTLigatureAttributeName to its default value of 1 yields
        different behavior from not setting it at all. We can get the correct behavior and greatly
        simplify the code by not setting attributes to their default values.

        * platform/graphics/mac/SimpleFontDataCoreText.cpp:
        Removed redundant #import directives and changed the remaining ones to #include.
        (WebCore::SimpleFontData::getCFStringAttributes): Changed to use a mutable dictionary and
        only add attributes that have non-default values.

2012-11-09  Rick Byers  <rbyers@chromium.org>

        No tests for changing mouse cursors
        https://bugs.webkit.org/show_bug.cgi?id=100550

        Reviewed by Adam Barth.

        Add infrastructure to keep track of the last set mouse cursor,
        and then to query it from DumpRenderTree.

        Test: fast/events/mouse-cursor.html

        * WebCore.exp.in: Add Cursor copy ctor export
        * page/EventHandler.cpp:
        (WebCore::EventHandler::handleMouseMoveEvent): Keep track of last set mouse cursor
        * page/EventHandler.h:
        (WebCore::EventHandler::currentMouseCursor): New getter for last set mouse cursor
        * testing/Internals.cpp:
        (WebCore::cursorTypeToString): Helper to convert cursor type to enum
        (WebCore):
        (WebCore::Internals::getCurrentCursorInfo): New function to return a string describing the last set mouse cursor
        * testing/Internals.h: Declare getCurrentCursorInfo
        * testing/Internals.idl: Declare getCurrentCursorInfo

2012-11-09  Huang Dongsung  <luxtella@company100.net>

        Coordinated Graphics: Amend CoordinatedBackingStore::paintToTextureMapper to fit its own semantic.
        https://bugs.webkit.org/show_bug.cgi?id=101701

        Reviewed by Noam Rosenthal.

        Add TiledBackingStore::rect() because CoordinatedTile needs to know
        m_rect of TiledBackingStore.

        * platform/graphics/TiledBackingStore.h:
        (WebCore::TiledBackingStore::rect):

2012-11-09  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r134139.
        http://trac.webkit.org/changeset/134139
        https://bugs.webkit.org/show_bug.cgi?id=101823

        breaks chromium (android) build (Requested by thorton on
        #webkit).

        * css/mediaControls.css:
        * css/mediaControlsQuickTime.css:
        (audio::-webkit-media-controls-toggle-closed-captions-button, video::-webkit-media-controls-toggle-closed-captions-button):
        (audio::-webkit-media-controls-volume-slider-mute-button, video::-webkit-media-controls-volume-slider-mute-button):
        * html/shadow/MediaControlElements.cpp:
        (WebCore::MediaControlToggleClosedCaptionsButtonElement::MediaControlToggleClosedCaptionsButtonElement):
        (WebCore::MediaControlToggleClosedCaptionsButtonElement::create):
        (WebCore::MediaControlToggleClosedCaptionsButtonElement::defaultEventHandler):
        (WebCore::MediaControlToggleClosedCaptionsButtonElement::updateDisplayType):
        (WebCore::MediaControlToggleClosedCaptionsButtonElement::shadowPseudoId):
        * html/shadow/MediaControlElements.h:
        (MediaControlElement):
        (MediaControlToggleClosedCaptionsButtonElement):
        * html/shadow/MediaControlRootElement.cpp:
        (WebCore::MediaControlRootElement::MediaControlRootElement):
        (WebCore::MediaControlRootElement::create):
        (WebCore::MediaControlRootElement::setMediaController):
        (WebCore::MediaControlRootElement::hide):
        (WebCore::MediaControlRootElement::makeTransparent):
        (WebCore::MediaControlRootElement::reset):
        (WebCore::MediaControlRootElement::reportedError):
        * html/shadow/MediaControlRootElement.h:
        (WebCore):
        (MediaControlRootElement):
        * html/shadow/MediaControlRootElementChromium.cpp:
        (WebCore::MediaControlRootElementChromium::initializeControls):
        * html/shadow/MediaControls.h:
        (MediaControls):
        * platform/Language.cpp:
        (WebCore):
        * platform/Language.h:
        (WebCore):

2012-11-09  Huang Dongsung  <luxtella@company100.net>

        [TexMap] Initialize m_compositedNativeImagePtr in GraphicsLayerTextureMapper.
        https://bugs.webkit.org/show_bug.cgi?id=101675

        Reviewed by Noam Rosenthal.

        Fix a potential bug in GraphicsLayerTextureMapper. If the member's uninitialized
        value equals image->nativeImageForCurrentFrame() by change, we can encounter
        undefined behavior.

        * platform/graphics/texmap/GraphicsLayerTextureMapper.cpp:
        (WebCore::GraphicsLayerTextureMapper::GraphicsLayerTextureMapper):
        (WebCore::GraphicsLayerTextureMapper::setContentsToImage):

2012-11-09  Dean Jackson  <dino@apple.com>

        Support list of tracks in caption media controls
        https://bugs.webkit.org/show_bug.cgi?id=101669

        Reviewed by Eric Carlson.

        Add some new elements to the media control shadow DOM that display the list of available
        tracks on an audio/video element. The UI is hidden by default everywhere but on Mac,
        where it is given a very basic design. At the moment only the list of available tracks
        are displayed; The followup bug will make the UI active: https://bugs.webkit.org/show_bug.cgi?id=101670

        No new tests - this doesn't expose any testable surface.

        * css/mediaControls.css: Added default rules that hide the new elements.
        * css/mediaControlsQuickTime.css: Specific rules that give a basic rendering of the new track list.
        * html/shadow/MediaControlElements.cpp:
        (WebCore::MediaControlElement::isShowing): Tests for the visibility of a control.
        (WebCore::MediaControlClosedCaptionsContainerElement::MediaControlClosedCaptionsContainerElement):
        (WebCore::MediaControlClosedCaptionsContainerElement::create):
        (WebCore::MediaControlClosedCaptionsContainerElement::shadowPseudoId):
        (WebCore::MediaControlToggleClosedCaptionsButtonElement::MediaControlToggleClosedCaptionsButtonElement):
        (WebCore::MediaControlToggleClosedCaptionsButtonElement::create): Now takes a reference to the media controls as a parameter.
        (WebCore::MediaControlToggleClosedCaptionsButtonElement::updateDisplayType):
        (WebCore::MediaControlToggleClosedCaptionsButtonElement::defaultEventHandler):
        (WebCore::MediaControlToggleClosedCaptionsButtonElement::shadowPseudoId):
        (WebCore::MediaControlClosedCaptionsTrackListElement::MediaControlClosedCaptionsTrackListElement): New element for holding a list of tracks to display.
        * html/shadow/MediaControlElements.h:
        (MediaControlElement):
        (MediaControlToggleClosedCaptionsButtonElement):
        (MediaControlClosedCaptionsContainerElement):
        (MediaControlClosedCaptionsTrackListElement): Examines the media element to build a shadow DOM that lists all the tracks available.
        * html/shadow/MediaControlRootElement.cpp:
        (WebCore::MediaControlRootElement::MediaControlRootElement):
        (WebCore::MediaControlRootElement::create): New track container and list elements created.
        (WebCore::MediaControlRootElement::setMediaController): Hook up the new elements to the controller..
        (WebCore::MediaControlRootElement::hide):
        (WebCore::MediaControlRootElement::makeTransparent):
        (WebCore::MediaControlRootElement::reset):
        (WebCore::MediaControlRootElement::reportedError):
        (WebCore::MediaControlRootElement::toggleClosedCaptionTrackList): Shows or hides the popup with the list of tracks.
        (WebCore):
        * html/shadow/MediaControlRootElement.h:
        (WebCore):
        (MediaControlRootElement):
        * html/shadow/MediaControlRootElementChromium.cpp:
        (WebCore::MediaControlRootElementChromium::initializeControls): Pass in the controls as a parameter.
        * html/shadow/MediaControls.h:
        (MediaControls):
        * platform/Language.cpp:
        (WebCore::displayNameForLanguageLocale): New function to return a human-readable name for a locale, given the identifier input.
        * platform/Language.h:
        (WebCore):

2012-11-09  Noel Gordon  <noel.gordon@gmail.com>

        [chromium] Should pass fast/images/paletted-png-with-color-profile.html
        https://bugs.webkit.org/show_bug.cgi?id=101551

        Reviewed by Adam Barth.

        Support decoding color PALETTE images that have an ICC color profile.

        Covered by fast/images/png-suite/test.html and many other fast/image tests.

        * platform/image-decoders/png/PNGImageDecoder.cpp:
        (WebCore::PNGImageDecoder::headerAvailable): Move the color profile code after the
        transparency (tRNS) reader. Allow color PNG images: RGB, RGBA, PALLETE to be color
        corrected. Use the transparency count from the tRNS reader to detect the expansion
        of RGB and PALLETE image pixels to RGBA.

2012-11-09  Tien-Ren Chen  <trchen@chromium.org>

        Correct hit-test point scaling for document.elementFromPoint
        https://bugs.webkit.org/show_bug.cgi?id=101798

        Reviewed by Adam Barth.

        The hit-test point come from user JavaScript is in the document coordinate.
        Convert to the frame coordinate with correct scale factor for hit test.

        Test: fast/dom/elementFromPoint-scaled-scrolled.html

        * dom/Document.cpp:
        (WebCore::nodeFromPoint):

2012-11-09  Alec Flett  <alecflett@chromium.org>

        IndexedDB: Combine IDBBackingStore and IDBLevelDBBackingStore
        https://bugs.webkit.org/show_bug.cgi?id=101415

        Reviewed by Tony Chang.

        Combine abstract interface IDBBackingStore with its only
        implementation, IDBLevelDBBackingStore, to reduce code
        complexity. The legacy structure existed to support a SQLLite
        IDBBackingStore, but it is no longer worth the complexity to
        support this abstraction.

        Changes include:
        1) Merging IDBLevelDBBackingStore into IDBBackingStore.

        2) Merge together IDBBackingStore's inner classes: Cursor,
        Transaction, and ObjectStoreRecordIdentfier with their respective
        subclasses in IDBLevelDBBackingStore.

        3) Simplifying the inner Transaction class to not be refcounted or
        virtualized, to allow it to be a simple concrete member of its
        owner, IDBTransactionBackendImpl.

        No new tests as this is purely a refactor.

        * Modules/indexeddb/IDBBackingStore.cpp:
        (WebCore::recordInternalError):
        (WebCore::setUpMetadata):
        (WebCore::IDBBackingStore::IDBBackingStore):
        (WebCore):
        (WebCore::IDBBackingStore::~IDBBackingStore):
        (WebCore::IDBBackingStore::open):
        (WebCore::IDBBackingStore::getDatabaseNames):
        (WebCore::IDBBackingStore::getIDBDatabaseMetaData):
        (WebCore::IDBBackingStore::createIDBDatabaseMetaData):
        (WebCore::IDBBackingStore::updateIDBDatabaseIntVersion):
        (WebCore::IDBBackingStore::updateIDBDatabaseMetaData):
        (WebCore::deleteRange):
        (WebCore::IDBBackingStore::deleteDatabase):
        (WebCore::IDBBackingStore::getObjectStores):
        (WebCore::setMaxObjectStoreId):
        (WebCore::IDBBackingStore::createObjectStore):
        (WebCore::IDBBackingStore::deleteObjectStore):
        (WebCore::IDBBackingStore::getRecord):
        (WebCore::IDBBackingStore::putRecord):
        (WebCore::IDBBackingStore::clearObjectStore):
        (WebCore::IDBBackingStore::deleteRecord):
        (WebCore::IDBBackingStore::getKeyGeneratorCurrentNumber):
        (WebCore::IDBBackingStore::maybeUpdateKeyGeneratorCurrentNumber):
        (WebCore::IDBBackingStore::keyExistsInObjectStore):
        (WebCore::IDBBackingStore::getIndexes):
        (WebCore::setMaxIndexId):
        (WebCore::IDBBackingStore::createIndex):
        (WebCore::IDBBackingStore::deleteIndex):
        (WebCore::IDBBackingStore::putIndexDataForRecord):
        (WebCore::IDBBackingStore::deleteIndexDataForRecord):
        (WebCore::IDBBackingStore::findKeyInIndex):
        (WebCore::IDBBackingStore::getPrimaryKeyViaIndex):
        (WebCore::IDBBackingStore::keyExistsInIndex):
        (WebCore::IDBBackingStore::Cursor::Cursor):
        (WebCore::IDBBackingStore::Cursor::firstSeek):
        (WebCore::IDBBackingStore::Cursor::advance):
        (WebCore::IDBBackingStore::Cursor::continueFunction):
        (WebCore::IDBBackingStore::Cursor::haveEnteredRange):
        (WebCore::IDBBackingStore::Cursor::isPastBounds):
        (WebCore::ObjectStoreKeyCursorImpl::create):
        (ObjectStoreKeyCursorImpl):
        (WebCore::ObjectStoreKeyCursorImpl::value):
        (WebCore::ObjectStoreKeyCursorImpl::ObjectStoreKeyCursorImpl):
        (WebCore::ObjectStoreKeyCursorImpl::loadCurrentRow):
        (WebCore::ObjectStoreCursorImpl::create):
        (ObjectStoreCursorImpl):
        (WebCore::ObjectStoreCursorImpl::value):
        (WebCore::ObjectStoreCursorImpl::ObjectStoreCursorImpl):
        (WebCore::ObjectStoreCursorImpl::loadCurrentRow):
        (WebCore::IndexKeyCursorImpl::create):
        (IndexKeyCursorImpl):
        (WebCore::IndexKeyCursorImpl::value):
        (WebCore::IndexKeyCursorImpl::primaryKey):
        (WebCore::IndexKeyCursorImpl::recordIdentifier):
        (WebCore::IndexKeyCursorImpl::IndexKeyCursorImpl):
        (WebCore::IndexKeyCursorImpl::loadCurrentRow):
        (WebCore::IndexCursorImpl::create):
        (IndexCursorImpl):
        (WebCore::IndexCursorImpl::value):
        (WebCore::IndexCursorImpl::primaryKey):
        (WebCore::IndexCursorImpl::recordIdentifier):
        (WebCore::IndexCursorImpl::IndexCursorImpl):
        (WebCore::IndexCursorImpl::loadCurrentRow):
        (WebCore::objectStoreCursorOptions):
        (WebCore::indexCursorOptions):
        (WebCore::IDBBackingStore::openObjectStoreCursor):
        (WebCore::IDBBackingStore::openObjectStoreKeyCursor):
        (WebCore::IDBBackingStore::openIndexKeyCursor):
        (WebCore::IDBBackingStore::openIndexCursor):
        (WebCore::IDBBackingStore::Transaction::Transaction):
        (WebCore::IDBBackingStore::Transaction::begin):
        (WebCore::IDBBackingStore::Transaction::commit):
        (WebCore::IDBBackingStore::Transaction::rollback):
        * Modules/indexeddb/IDBBackingStore.h:
        (WebCore):
        (IDBBackingStore):
        (RecordIdentifier):
        (WebCore::IDBBackingStore::RecordIdentifier::create):
        (WebCore::IDBBackingStore::RecordIdentifier::~RecordIdentifier):
        (WebCore::IDBBackingStore::RecordIdentifier::isValid):
        (WebCore::IDBBackingStore::RecordIdentifier::primaryKey):
        (WebCore::IDBBackingStore::RecordIdentifier::setPrimaryKey):
        (WebCore::IDBBackingStore::RecordIdentifier::version):
        (WebCore::IDBBackingStore::RecordIdentifier::setVersion):
        (WebCore::IDBBackingStore::RecordIdentifier::RecordIdentifier):
        (Transaction):
        (WebCore::IDBBackingStore::Transaction::levelDBTransactionFrom):
        (CursorOptions):
        (Cursor):
        (WebCore::IDBBackingStore::Cursor::Cursor):
        (WebCore::IDBBackingStore::Cursor::key):
        (WebCore::IDBBackingStore::Cursor::primaryKey):
        (WebCore::IDBBackingStore::Cursor::~Cursor):
        * Modules/indexeddb/IDBFactoryBackendImpl.cpp:
        (WebCore::IDBFactoryBackendImpl::openBackingStore):
        * Modules/indexeddb/IDBIndexBackendImpl.cpp:
        (WebCore::IDBIndexBackendImpl::countInternal):
        * Modules/indexeddb/IDBLevelDBBackingStore.h: Removed.
        * Modules/indexeddb/IDBObjectStoreBackendImpl.cpp:
        (WebCore::IDBObjectStoreBackendImpl::setIndexKeys):
        (WebCore::IDBObjectStoreBackendImpl::putInternal):
        (WebCore::IDBObjectStoreBackendImpl::deleteInternal):
        * Modules/indexeddb/IDBTransactionBackendImpl.cpp:
        (WebCore::IDBTransactionBackendImpl::IDBTransactionBackendImpl):
        (WebCore::IDBTransactionBackendImpl::abort):
        (WebCore::IDBTransactionBackendImpl::commit):
        (WebCore::IDBTransactionBackendImpl::taskTimerFired):
        * Modules/indexeddb/IDBTransactionBackendImpl.h:
        (WebCore::IDBTransactionBackendImpl::backingStoreTransaction):
        * WebCore.xcodeproj/project.pbxproj:

2012-11-09  Tien-Ren Chen  <trchen@chromium.org>

        Correct scroll adjustment for touchEvent.clientX/clientY
        https://bugs.webkit.org/show_bug.cgi?id=101800

        Reviewed by Adam Barth.

        FrameView::scrollX/scrollY returns scroll offset in (scaled) frame coordinate.
        Convert to document coordinate before passing to JavaScript.

        Test: fast/events/touch/touch-scaled-scrolled.html

        * dom/Touch.cpp:
        (WebCore::contentsX):
        (WebCore::contentsY):

2012-11-09  Alexandru Chiculita  <achicu@adobe.com>

        [Texmap][CSS Shaders] Enable CSS Shaders in TextureMapperGL
        https://bugs.webkit.org/show_bug.cgi?id=98990

        Reviewed by Noam Rosenthal.

        Added code that draws the Custom Filter in the TextureMapperGL. Also added 
        required code to make a depth buffer for a BitmapTextureGL.

        Note that the code is not optimized yet, so it will always recompile the shader.

        Test: css3/filters/custom/composited/custom-filter-blend-modes.html

        * platform/graphics/texmap/TextureMapperGL.cpp:
        (WebCore::BitmapTextureGL::BitmapTextureGL):
        (WebCore::getPassesRequiredForFilter):
        (WebCore):
        (WebCore::TextureMapperGL::drawUsingCustomFilter):
        (WebCore::BitmapTextureGL::applyFilters):
        (WebCore::BitmapTextureGL::initializeDepthBuffer):
        (WebCore::BitmapTextureGL::~BitmapTextureGL):
        * platform/graphics/texmap/TextureMapperGL.h:
        (BitmapTextureGL):

2012-11-09  Sadrul Habib Chowdhury  <sadrul@chromium.org>

        CustomEvent: Allow taking in a serialized value during initialization.
        https://bugs.webkit.org/show_bug.cgi?id=101348

        Reviewed by Adam Barth.

        If a CustomEvent is initialized using a serialized value, then for each access
        to |detail|, the value is deserialized first. This way, each world gets a different
        deserialization.

        * UseV8.cmake:
        * WebCore.gypi:
        * bindings/v8/V8HiddenPropertyName.h:
        (WebCore):
        * bindings/v8/custom/V8CustomEventCustom.cpp: Copied from Source/WebCore/bindings/v8/V8HiddenPropertyName.h.
        (WebCore):
        (WebCore::V8CustomEvent::detailAccessorGetter):
        * dom/CustomEvent.cpp:
        (WebCore::CustomEvent::initCustomEvent):
        (WebCore):
        * dom/CustomEvent.h:
        (CustomEvent):
        (WebCore::CustomEvent::serializedScriptValue):
        * dom/CustomEvent.idl:

2012-11-09  Brady Eidson  <beidson@apple.com>

        Implement WebResourceBuffer::isEmpty()
        https://bugs.webkit.org/show_bug.cgi?id=101805

        Reviewed by Alexey Proskuryakov.

        This is required to make the existing subresource loading in NetworkProcess work correctly,
        as there's an isEmpty() check in the WebProcess that decides whether or not to actually deliver 
        the data to the ResourceLoader.

        No new tests (No change in behavior in any configuration we test.)

        * loader/ResourceBuffer.h: Make isEmpty() virtual.

2012-11-09  Michael Saboff  <msaboff@apple.com>

        HTML Attributes names and values should be created as 8 bit string where possible
        https://bugs.webkit.org/show_bug.cgi?id=101781

        Reviewed by Filip Pizlo.

        Given that almost all attribute names and values are lower case ASCII, we should try to
        create 8 bit strings to process them.  Creating an AtomicString already tries to make
        an 8 bit string, so that didn't need to change.

        No new tests, functionality covered by existing tests.

        * html/HTMLViewSourceDocument.cpp:
        (WebCore::HTMLViewSourceDocument::processTagToken):
        * html/parser/HTMLMetaCharsetParser.cpp:
        (WebCore::HTMLMetaCharsetParser::processMeta):
        * html/parser/HTMLPreloadScanner.cpp:
        (WebCore::PreloadTask::processAttributes):

2012-11-09  Dana Jansens  <danakj@chromium.org>

        [chromium] Define WEBKIT_IMPLEMENTATION everywhere inside WebCore
        https://bugs.webkit.org/show_bug.cgi?id=101795

        Reviewed by James Robinson.

        * WebCore.gyp/WebCore.gyp:

2012-11-09  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r134101.
        http://trac.webkit.org/changeset/134101
        https://bugs.webkit.org/show_bug.cgi?id=101790

        IDBDatabaseBackendTest.BackingStoreRetention failing
        (Requested by jsbell|gardener on #webkit).

        * GNUmakefile.list.am:
        * Modules/indexeddb/IDBBackingStore.cpp:
        (WebCore::IDBLevelDBBackingStore::IDBLevelDBBackingStore):
        (WebCore::IDBLevelDBBackingStore::~IDBLevelDBBackingStore):
        (WebCore::IDBLevelDBBackingStore::open):
        (WebCore::IDBLevelDBBackingStore::getDatabaseNames):
        (WebCore::IDBLevelDBBackingStore::getIDBDatabaseMetaData):
        (WebCore::IDBLevelDBBackingStore::createIDBDatabaseMetaData):
        (WebCore::IDBLevelDBBackingStore::updateIDBDatabaseIntVersion):
        (WebCore::IDBLevelDBBackingStore::updateIDBDatabaseMetaData):
        (WebCore::IDBLevelDBBackingStore::deleteDatabase):
        (WebCore::IDBLevelDBBackingStore::getObjectStores):
        (WebCore::IDBLevelDBBackingStore::createObjectStore):
        (WebCore::IDBLevelDBBackingStore::deleteObjectStore):
        (WebCore::IDBLevelDBBackingStore::getRecord):
        (WebCore):
        (WebCore::IDBLevelDBBackingStore::putRecord):
        (WebCore::IDBLevelDBBackingStore::clearObjectStore):
        (WebCore::IDBLevelDBBackingStore::createInvalidRecordIdentifier):
        (WebCore::IDBLevelDBBackingStore::deleteRecord):
        (WebCore::IDBLevelDBBackingStore::getKeyGeneratorCurrentNumber):
        (WebCore::IDBLevelDBBackingStore::maybeUpdateKeyGeneratorCurrentNumber):
        (WebCore::IDBLevelDBBackingStore::keyExistsInObjectStore):
        (WebCore::IDBLevelDBBackingStore::getIndexes):
        (WebCore::IDBLevelDBBackingStore::createIndex):
        (WebCore::IDBLevelDBBackingStore::deleteIndex):
        (WebCore::IDBLevelDBBackingStore::putIndexDataForRecord):
        (WebCore::IDBLevelDBBackingStore::deleteIndexDataForRecord):
        (WebCore::IDBLevelDBBackingStore::findKeyInIndex):
        (WebCore::IDBLevelDBBackingStore::getPrimaryKeyViaIndex):
        (WebCore::IDBLevelDBBackingStore::keyExistsInIndex):
        (WebCore::IDBLevelDBBackingStore::openObjectStoreCursor):
        (WebCore::IDBLevelDBBackingStore::openObjectStoreKeyCursor):
        (WebCore::IDBLevelDBBackingStore::openIndexKeyCursor):
        (WebCore::IDBLevelDBBackingStore::openIndexCursor):
        (WebCore::IDBLevelDBBackingStore::createTransaction):
        (WebCore::IDBLevelDBBackingStore::Transaction::create):
        (WebCore::IDBLevelDBBackingStore::Transaction::Transaction):
        (WebCore::IDBLevelDBBackingStore::Transaction::begin):
        (WebCore::IDBLevelDBBackingStore::Transaction::commit):
        (WebCore::IDBLevelDBBackingStore::Transaction::rollback):
        (WebCore::IDBLevelDBBackingStore::backingStoreExists):
        * Modules/indexeddb/IDBBackingStore.h:
        (WebCore):
        (WebCore::IDBBackingStore::~IDBBackingStore):
        (IDBBackingStore):
        (RecordIdentifier):
        (WebCore::IDBBackingStore::Cursor::~Cursor):
        (WebCore::IDBBackingStore::Transaction::~Transaction):
        (Transaction):
        * Modules/indexeddb/IDBFactoryBackendImpl.cpp:
        (WebCore::IDBFactoryBackendImpl::openBackingStore):
        * Modules/indexeddb/IDBLevelDBBackingStore.h: Copied from Source/WebCore/Modules/indexeddb/IDBBackingStore.h.
        (WebCore):
        (IDBLevelDBBackingStore):
        (Transaction):
        (WebCore::IDBLevelDBBackingStore::Transaction::levelDBTransactionFrom):
        * Modules/indexeddb/IDBObjectStoreBackendImpl.cpp:
        (WebCore::IDBObjectStoreBackendImpl::setIndexKeys):
        (WebCore::IDBObjectStoreBackendImpl::putInternal):
        (WebCore::IDBObjectStoreBackendImpl::deleteInternal):
        * Modules/indexeddb/IDBTransactionBackendImpl.cpp:
        (WebCore::IDBTransactionBackendImpl::IDBTransactionBackendImpl):
        (WebCore::IDBTransactionBackendImpl::abort):
        (WebCore::IDBTransactionBackendImpl::commit):
        (WebCore::IDBTransactionBackendImpl::taskTimerFired):
        * Modules/indexeddb/IDBTransactionBackendImpl.h:
        (WebCore::IDBTransactionBackendImpl::backingStoreTransaction):
        * WebCore.xcodeproj/project.pbxproj:

2012-11-09  Erik Arvidsson  <arv@chromium.org>

        REGRESSION (r125239): classList contains() doesn't work after element was moved from strict mode document to quirks mode document
        https://bugs.webkit.org/show_bug.cgi?id=101627

        Reviewed by Alexey Proskuryakov.

        We used to only create m_classNamesForQuirksMode in the constructor or when the class attribute
        was changed. If an element is moved from a standards document to a quirks mode document the
        m_classNamesForQuirksMode would not be up to date which lead to wrong results.

        Now we alway check if m_classNamesForQuirksMode is up to date (in quirks mode only).

        Test: fast/dom/Element/class-list-move-between-document-with-different-quirks-mode.html

        * html/ClassList.cpp:
        (WebCore::ClassList::classNames): Create the m_classNamesForQuirksMode lazily as needed so that
                                          it is up to date.
        * html/ClassList.h:

2012-11-09  Alec Flett  <alecflett@chromium.org>

        IndexedDB: Combine IDBBackingStore and IDBLevelDBBackingStore
        https://bugs.webkit.org/show_bug.cgi?id=101415

        Reviewed by Tony Chang.

        Combine abstract interface IDBBackingStore with its only
        implementation, IDBLevelDBBackingStore, to reduce code
        complexity. The legacy structure existed to support a SQLLite
        IDBBackingStore, but it is no longer worth the complexity to
        support this abstraction.

        Changes include:
        1) Merging IDBLevelDBBackingStore into IDBBackingStore.

        2) Merge together IDBBackingStore's inner classes: Cursor,
        Transaction, and ObjectStoreRecordIdentfier with their respective
        subclasses in IDBLevelDBBackingStore.

        3) Simplifying the inner Transaction class to not be refcounted or
        virtualized, to allow it to be a simple concrete member of its
        owner, IDBTransactionBackendImpl.

        No new tests as this is purely a refactor.

        * Modules/indexeddb/IDBBackingStore.cpp:
        (WebCore::recordInternalError):
        (WebCore::setUpMetadata):
        (WebCore::IDBBackingStore::IDBBackingStore):
        (WebCore):
        (WebCore::IDBBackingStore::~IDBBackingStore):
        (WebCore::IDBBackingStore::open):
        (WebCore::IDBBackingStore::getDatabaseNames):
        (WebCore::IDBBackingStore::getIDBDatabaseMetaData):
        (WebCore::IDBBackingStore::createIDBDatabaseMetaData):
        (WebCore::IDBBackingStore::updateIDBDatabaseIntVersion):
        (WebCore::IDBBackingStore::updateIDBDatabaseMetaData):
        (WebCore::deleteRange):
        (WebCore::IDBBackingStore::deleteDatabase):
        (WebCore::IDBBackingStore::getObjectStores):
        (WebCore::setMaxObjectStoreId):
        (WebCore::IDBBackingStore::createObjectStore):
        (WebCore::IDBBackingStore::deleteObjectStore):
        (WebCore::IDBBackingStore::getRecord):
        (WebCore::IDBBackingStore::putRecord):
        (WebCore::IDBBackingStore::clearObjectStore):
        (WebCore::IDBBackingStore::deleteRecord):
        (WebCore::IDBBackingStore::getKeyGeneratorCurrentNumber):
        (WebCore::IDBBackingStore::maybeUpdateKeyGeneratorCurrentNumber):
        (WebCore::IDBBackingStore::keyExistsInObjectStore):
        (WebCore::IDBBackingStore::getIndexes):
        (WebCore::setMaxIndexId):
        (WebCore::IDBBackingStore::createIndex):
        (WebCore::IDBBackingStore::deleteIndex):
        (WebCore::IDBBackingStore::putIndexDataForRecord):
        (WebCore::IDBBackingStore::deleteIndexDataForRecord):
        (WebCore::IDBBackingStore::findKeyInIndex):
        (WebCore::IDBBackingStore::getPrimaryKeyViaIndex):
        (WebCore::IDBBackingStore::keyExistsInIndex):
        (WebCore::IDBBackingStore::Cursor::Cursor):
        (WebCore::IDBBackingStore::Cursor::firstSeek):
        (WebCore::IDBBackingStore::Cursor::advance):
        (WebCore::IDBBackingStore::Cursor::continueFunction):
        (WebCore::IDBBackingStore::Cursor::haveEnteredRange):
        (WebCore::IDBBackingStore::Cursor::isPastBounds):
        (WebCore::ObjectStoreKeyCursorImpl::create):
        (ObjectStoreKeyCursorImpl):
        (WebCore::ObjectStoreKeyCursorImpl::value):
        (WebCore::ObjectStoreKeyCursorImpl::ObjectStoreKeyCursorImpl):
        (WebCore::ObjectStoreKeyCursorImpl::loadCurrentRow):
        (WebCore::ObjectStoreCursorImpl::create):
        (ObjectStoreCursorImpl):
        (WebCore::ObjectStoreCursorImpl::value):
        (WebCore::ObjectStoreCursorImpl::ObjectStoreCursorImpl):
        (WebCore::ObjectStoreCursorImpl::loadCurrentRow):
        (WebCore::IndexKeyCursorImpl::create):
        (IndexKeyCursorImpl):
        (WebCore::IndexKeyCursorImpl::value):
        (WebCore::IndexKeyCursorImpl::primaryKey):
        (WebCore::IndexKeyCursorImpl::recordIdentifier):
        (WebCore::IndexKeyCursorImpl::IndexKeyCursorImpl):
        (WebCore::IndexKeyCursorImpl::loadCurrentRow):
        (WebCore::IndexCursorImpl::create):
        (IndexCursorImpl):
        (WebCore::IndexCursorImpl::value):
        (WebCore::IndexCursorImpl::primaryKey):
        (WebCore::IndexCursorImpl::recordIdentifier):
        (WebCore::IndexCursorImpl::IndexCursorImpl):
        (WebCore::IndexCursorImpl::loadCurrentRow):
        (WebCore::objectStoreCursorOptions):
        (WebCore::indexCursorOptions):
        (WebCore::IDBBackingStore::openObjectStoreCursor):
        (WebCore::IDBBackingStore::openObjectStoreKeyCursor):
        (WebCore::IDBBackingStore::openIndexKeyCursor):
        (WebCore::IDBBackingStore::openIndexCursor):
        (WebCore::IDBBackingStore::Transaction::Transaction):
        (WebCore::IDBBackingStore::Transaction::begin):
        (WebCore::IDBBackingStore::Transaction::commit):
        (WebCore::IDBBackingStore::Transaction::rollback):
        * Modules/indexeddb/IDBBackingStore.h:
        (WebCore):
        (IDBBackingStore):
        (RecordIdentifier):
        (WebCore::IDBBackingStore::RecordIdentifier::create):
        (WebCore::IDBBackingStore::RecordIdentifier::~RecordIdentifier):
        (WebCore::IDBBackingStore::RecordIdentifier::isValid):
        (WebCore::IDBBackingStore::RecordIdentifier::primaryKey):
        (WebCore::IDBBackingStore::RecordIdentifier::setPrimaryKey):
        (WebCore::IDBBackingStore::RecordIdentifier::version):
        (WebCore::IDBBackingStore::RecordIdentifier::setVersion):
        (WebCore::IDBBackingStore::RecordIdentifier::RecordIdentifier):
        (Transaction):
        (WebCore::IDBBackingStore::Transaction::levelDBTransactionFrom):
        (CursorOptions):
        (Cursor):
        (WebCore::IDBBackingStore::Cursor::Cursor):
        (WebCore::IDBBackingStore::Cursor::key):
        (WebCore::IDBBackingStore::Cursor::primaryKey):
        (WebCore::IDBBackingStore::Cursor::~Cursor):
        * Modules/indexeddb/IDBFactoryBackendImpl.cpp:
        (WebCore::IDBFactoryBackendImpl::openBackingStore):
        * Modules/indexeddb/IDBIndexBackendImpl.cpp:
        (WebCore::IDBIndexBackendImpl::countInternal):
        * Modules/indexeddb/IDBLevelDBBackingStore.h: Removed.
        * Modules/indexeddb/IDBObjectStoreBackendImpl.cpp:
        (WebCore::IDBObjectStoreBackendImpl::setIndexKeys):
        (WebCore::IDBObjectStoreBackendImpl::putInternal):
        (WebCore::IDBObjectStoreBackendImpl::deleteInternal):
        * Modules/indexeddb/IDBTransactionBackendImpl.cpp:
        (WebCore::IDBTransactionBackendImpl::IDBTransactionBackendImpl):
        (WebCore::IDBTransactionBackendImpl::abort):
        (WebCore::IDBTransactionBackendImpl::commit):
        (WebCore::IDBTransactionBackendImpl::taskTimerFired):
        * Modules/indexeddb/IDBTransactionBackendImpl.h:
        (WebCore::IDBTransactionBackendImpl::backingStoreTransaction):
        * WebCore.xcodeproj/project.pbxproj:

2012-10-28  Timothy Hatcher  <timothy@apple.com>

        Make -webkit-canvas in CSS use the full backing store instead
        of always 1x when rendering.

        https://bugs.webkit.org/show_bug.cgi?id=100611

        Reviewed by Dean Jackson.

        Test: fast/canvas/canvas-as-image-hidpi.html

        * html/HTMLCanvasElement.cpp:
        (WebCore::HTMLCanvasElement::makePresentationCopy): Pass Unscaled to copyImage.
        (WebCore::HTMLCanvasElement::copiedImage): Ditto.
        * platform/graphics/ImageBuffer.h:
        * platform/graphics/cg/ImageBufferCG.cpp:
        (WebCore::ImageBuffer::copyImage): Added Scale parameter and use copyNativeImage for Unscaled.
        * platform/graphics/cairo/ImageBufferCairo.cpp:
        (WebCore::ImageBuffer::copyImage): Added unnamed ScaleBehavior parameter.
        * platform/graphics/qt/ImageBufferQt.cpp:
        (WebCore::ImageBuffer::copyImage): Ditto.
        * platform/graphics/skia/ImageBufferSkia.cpp:
        (WebCore::ImageBuffer::copyImage): Ditto.
        * platform/graphics/wince/ImageBufferWinCE.cpp:
        (WebCore::ImageBuffer::copyImage): Ditto.
        * platform/graphics/wx/ImageBufferWx.cpp:
        (WebCore::ImageBuffer::copyImage): Ditto.

2012-10-28  Timothy Hatcher  <timothy@apple.com>

        Reset the canvas backing store pixel ratio when the buffer resizes.

        The backing store was not being recreated using the current page pixel ratio
        when a resize occurred.

        https://bugs.webkit.org/show_bug.cgi?id=100608

        Reviewed by Darin Adler.

        Test: fast/canvas/canvas-resize-reset-pixelRatio.html

        * html/HTMLCanvasElement.cpp:
        (WebCore::HTMLCanvasElement::HTMLCanvasElement): Use targetDeviceScaleFactor.
        (WebCore::HTMLCanvasElement::reset): Do a clear only if the pixel ratios also
        match. Store the new pixel ratio in m_deviceScaleFactor.
        (WebCore::HTMLCanvasElement::targetDeviceScaleFactor): Added.
        * html/HTMLCanvasElement.h:
        (WebCore::HTMLCanvasElement::setSize): Return early only if the sizes and
        pixel ratios match.

2012-11-08  Ryosuke Niwa  <rniwa@webkit.org>

        RemoveFormat command doesn't remove background color
        https://bugs.webkit.org/show_bug.cgi?id=101682

        Reviewed by Tony Chang.

        Fixed the bug by removing all non-transparent background-color properties.

        Test: editing/execCommand/remove-format-background-color.html

        * editing/RemoveFormatCommand.cpp:
        (WebCore::RemoveFormatCommand::doApply):

2012-11-09  Alec Flett  <alecflett@chromium.org>

        IndexedDB: switch frontend to use int64_t-based references
        https://bugs.webkit.org/show_bug.cgi?id=100426

        Reviewed by Tony Chang.

        Remove String-based objectStore/index references, obsoleted by
        https://bugs.webkit.org/show_bug.cgi?id=100425.

        No new tests as this is the second half of a refactor.

        * Modules/indexeddb/IDBCallbacks.h:
        * Modules/indexeddb/IDBDatabase.cpp:
        (WebCore::IDBDatabase::deleteObjectStore):
        (WebCore::IDBDatabase::transaction):
        * Modules/indexeddb/IDBDatabaseBackendImpl.cpp:
        (WebCore::IDBDatabaseBackendImpl::setVersion):
        (WebCore::IDBDatabaseBackendImpl::transaction):
        (WebCore::IDBDatabaseBackendImpl::runIntVersionChangeTransaction):
        * Modules/indexeddb/IDBDatabaseBackendImpl.h:
        (IDBDatabaseBackendImpl):
        * Modules/indexeddb/IDBDatabaseBackendInterface.h:
        (IDBDatabaseBackendInterface):
        * Modules/indexeddb/IDBMetadata.h:
        (WebCore::IDBObjectStoreMetadata::findIndex):
        (IDBObjectStoreMetadata):
        (WebCore::IDBObjectStoreMetadata::containsIndex):
        * Modules/indexeddb/IDBObjectStore.cpp:
        (WebCore::IDBObjectStore::put):
        (WebCore):
        (WebCore::IDBObjectStore::index):
        (WebCore::IDBObjectStore::deleteIndex):
        * Modules/indexeddb/IDBObjectStoreBackendImpl.cpp:
        (WebCore::IDBObjectStoreBackendImpl::put):
        (WebCore):
        * Modules/indexeddb/IDBObjectStoreBackendImpl.h:
        (IDBObjectStoreBackendImpl):
        * Modules/indexeddb/IDBObjectStoreBackendInterface.h:
        * inspector/Inspector-1.0.json:
        * inspector/Inspector.json:
        * inspector/InspectorIndexedDBAgent.cpp:
        (WebCore):
        (WebCore::InspectorIndexedDBAgent::requestData):
        * inspector/InspectorIndexedDBAgent.h:
        (InspectorIndexedDBAgent):

2012-11-09  Mario Sanchez Prada  <mario@webkit.org>

        [GTK] Isolate the GTK/Gail/Pango specific code in accessibility/gtk
        https://bugs.webkit.org/show_bug.cgi?id=101727

        Reviewed by Chris Fleizach.

        Added conditional compilation checks for GTK+ specific
        accessibility code, to pave the way for sharing this
        implementation with other ports (e.g WebKitEFL).

        * accessibility/gtk/WebKitAccessibleInterfaceText.cpp:
        (webkitAccessibleTextGetTextAfterOffset): Added conditional
        compilation checks, only implementing it in GTK so far.
        (webkitAccessibleTextGetTextAtOffset): Ditto.
        (webkitAccessibleTextGetTextBeforeOffset): Ditto.
        * accessibility/gtk/WebKitAccessibleWrapperAtk.cpp:
        (atkParentOfRootObject): Added conditional compilation checks,
        only implementing in GTK the part of getting the accessible object
        for the root object.
        (webkitAccessibleGetParent): Updated comments.
        (webkitAccessibleGetNChildren): Ditto.
        (webkitAccessibleRefChild): Ditto.
        (webkitAccessibleGetIndexInParent): Ditto.
        (webkitAccessibleGetAttributes): Only set the 'toolkit' attribute
        for GTK. Other ports might be interested in this too.
        (setAtkStateSetFromCoreObject): Updated comments.

2012-11-09  Tommy Widenflycht  <tommyw@google.com>

        MediaStream API: Don't trigger any object deletion during RTCPeerConnection::stop
        https://bugs.webkit.org/show_bug.cgi?id=101586

        Reviewed by Adam Barth.

        Stop calling stop on the RTCPeerConnectionHandler, and don't delete it, when
        ActiveDOMObject::stop is called on RTCPeerConnection. Due to the async nature of the new
        API some WebCore objects might be cleaned away which is not allowed at this stage.

        This behaviour is not possible to test unfortunately in webkit.

        * Modules/mediastream/RTCPeerConnection.cpp:
        (WebCore::RTCPeerConnection::stop):

2012-11-09  Joshua Bell  <jsbell@chromium.org>

        [Chromium] Unreviewed gardening. Fix chromium-win builds following r134082

        * WebCore.gypi:

2012-11-09  Dan Carney  <dcarney@google.com>

        [V8] Remove ScriptController::windowShell()
        https://bugs.webkit.org/show_bug.cgi?id=100235

        Reviewed by Adam Barth.

        Refactored windowShell(DOMWrapperWorld*) and
        existingWindowShell(DOMWrapperWorld*) to be like JSC.

        No new tests. No change in functionality.

        * bindings/scripts/CodeGeneratorV8.pm:
        (GenerateToV8Converters):
        * bindings/v8/DOMWrapperWorld.cpp:
        (WebCore::isolatedWorldMap):
        (WebCore::DOMWrapperWorld::getAllWorlds):
        (WebCore):
        * bindings/v8/DOMWrapperWorld.h:
        (DOMWrapperWorld):
        * bindings/v8/PageScriptDebugServer.cpp:
        (WebCore::PageScriptDebugServer::addListener):
        * bindings/v8/ScriptController.cpp:
        (WebCore::ScriptController::~ScriptController):
        (WebCore::ScriptController::clearForOutOfMemory):
        (WebCore):
        (WebCore::ScriptController::clearForClose):
        (WebCore::ScriptController::updateSecurityOrigin):
        (WebCore::ScriptController::initializeMainWorld): Returns true if the main world was initialized.
        (WebCore::existingWindowShellWorkaroundWorld):
        (WebCore::ScriptController::existingWindowShell):
        (WebCore::ScriptController::windowShell):
        (WebCore::ScriptController::evaluateInIsolatedWorld):
        (WebCore::ScriptController::currentWorldContext):
        (WebCore::ScriptController::mainWorldContext):
        (WebCore::ScriptController::haveInterpreter):
        (WebCore::ScriptController::enableEval):
        (WebCore::ScriptController::disableEval):
        (WebCore::ScriptController::clearWindowShell):
        (WebCore::ScriptController::setContextDebugId):
        (WebCore::ScriptController::updateDocument):
        (WebCore::ScriptController::namedItemAdded):
        (WebCore::ScriptController::namedItemRemoved):
        * bindings/v8/ScriptController.h:
        (ScriptController):
        (WebCore::ScriptController::getAllWorlds):
        * bindings/v8/V8Binding.cpp:
        (WebCore::perContextDataForCurrentWorld):
        (WebCore::handleOutOfMemory):
        * bindings/v8/V8DOMWindowShell.cpp:
        (WebCore::V8DOMWindowShell::initializeIfNeeded):
        (WebCore::V8DOMWindowShell::updateDocument):
        (WebCore::V8DOMWindowShell::namedItemAdded):
        (WebCore::V8DOMWindowShell::namedItemRemoved):
        * bindings/v8/V8DOMWindowShell.h:
        (WebCore::V8DOMWindowShell::isContextInitialized):
        (WebCore::V8DOMWindowShell::isGlobalInitialized):
        * bindings/v8/custom/V8DocumentCustom.cpp:
        (WebCore::toV8):
        * bindings/v8/custom/V8HTMLDocumentCustom.cpp:
        (WebCore::toV8):
        * bindings/v8/custom/V8SVGDocumentCustom.cpp:
        (WebCore::toV8):

2012-11-09  Adam Barth  <abarth@webkit.org>

        [V8] Remove a level of indirection in DOMDataStore
        https://bugs.webkit.org/show_bug.cgi?id=101690

        Reviewed by Kentaro Hara.

        There is no longer any reason for the DOMDataStore to hold the wrapper
        map via a pointer. It can just hold the wrapper map directly, saving a
        level of indirection. I doubt this has any measurable performance gain.

        * bindings/v8/DOMDataStore.cpp:
        (WebCore::DOMDataStore::DOMDataStore):
        (WebCore::DOMDataStore::~DOMDataStore):
        (WebCore::DOMDataStore::reportMemoryUsage):
        * bindings/v8/DOMDataStore.h:
        (WebCore::DOMDataStore::get):
        (WebCore::DOMDataStore::set):
        (DOMDataStore):

2012-11-09  Mihnea Ovidenie  <mihnea@adobe.com>

        [CSSRegions] Region styling properties are not filtered correctly
        https://bugs.webkit.org/show_bug.cgi?id=101768

        Reviewed by Andreas Kling.

        Region styling allows only a handful of css properties. There is a mechanism in place,
        in StyleResolver::isValidRegionStyleProperty that filters the supported region style properties.
        In order to be effective, this mechanism relies on RuleData::m_isInRegionRule being set correctly.
        This patch makes sure that the flag RuleData::m_isInRegionRule is set properly in RuleData constructor.

        Test: fast/regions/region-style-not-supported-properties.html

        * css/RuleSet.cpp:
        (WebCore::RuleData::RuleData):

2012-11-09  Tommy Widenflycht  <tommyw@google.com>

        MediaStream API: Deleting all files relating to the deprecated PeerConnection00
        https://bugs.webkit.org/show_bug.cgi?id=101730

        Reviewed by Adam Barth.

        Since RTCPeerConenction has superseeded PeerConnection00 this patch removes all
        files relating to the old API.

        No testing needed, the remaining tests makes sure that nothing else breaks.

        * CMakeLists.txt:
        * GNUmakefile.list.am:
        * Modules/mediastream/DOMWindowMediaStream.idl:
        * Modules/mediastream/IceCallback.h: Removed.
        * Modules/mediastream/IceCallback.idl: Removed.
        * Modules/mediastream/IceCandidate.cpp: Removed.
        * Modules/mediastream/IceCandidate.h: Removed.
        * Modules/mediastream/IceCandidate.idl: Removed.
        * Modules/mediastream/PeerConnection00.cpp: Removed.
        * Modules/mediastream/PeerConnection00.h: Removed.
        * Modules/mediastream/PeerConnection00.idl: Removed.
        * Modules/mediastream/SessionDescription.cpp: Removed.
        * Modules/mediastream/SessionDescription.h: Removed.
        * Modules/mediastream/SessionDescription.idl: Removed.
        * WebCore.gypi:
        * bindings/generic/RuntimeEnabledFeatures.cpp:
        (WebCore):
        * bindings/generic/RuntimeEnabledFeatures.h:
        (RuntimeEnabledFeatures):
        * dom/EventTargetFactory.in:
        * platform/chromium/support/WebICECandidateDescriptor.cpp: Removed.
        * platform/chromium/support/WebICEOptions.cpp: Removed.
        * platform/chromium/support/WebMediaHints.cpp: Removed.
        * platform/mediastream/IceCandidateDescriptor.cpp: Removed.
        * platform/mediastream/IceCandidateDescriptor.h: Removed.
        * platform/mediastream/IceOptions.cpp: Removed.
        * platform/mediastream/IceOptions.h: Removed.
        * platform/mediastream/MediaHints.cpp: Removed.
        * platform/mediastream/MediaHints.h: Removed.
        * platform/mediastream/MediaStreamCenter.h:
        (WebCore):
        (MediaStreamCenter):
        * platform/mediastream/PeerConnection00Handler.cpp: Removed.
        * platform/mediastream/PeerConnection00Handler.h: Removed.
        * platform/mediastream/PeerConnection00HandlerClient.h: Removed.
        * platform/mediastream/SessionDescriptionDescriptor.cpp: Removed.
        * platform/mediastream/SessionDescriptionDescriptor.h: Removed.
        * platform/mediastream/blackberry/MediaStreamCenterBlackBerry.cpp:
        * platform/mediastream/blackberry/MediaStreamCenterBlackBerry.h:
        (WebCore):
        (MediaStreamCenterBlackBerry):
        * platform/mediastream/chromium/MediaStreamCenterChromium.cpp:
        * platform/mediastream/chromium/MediaStreamCenterChromium.h:
        (WebCore):
        (MediaStreamCenterChromium):
        * platform/mediastream/chromium/PeerConnection00Handler.cpp: Removed.
        * platform/mediastream/chromium/PeerConnection00HandlerInternal.cpp: Removed.
        * platform/mediastream/chromium/PeerConnection00HandlerInternal.h: Removed.
        * platform/mediastream/gstreamer/MediaStreamCenterGStreamer.cpp:
        * platform/mediastream/gstreamer/MediaStreamCenterGStreamer.h:
        (WebCore):
        (MediaStreamCenterGStreamer):

2012-11-09  Jer Noble  <jer.noble@apple.com>

        Plugin diagnostic logging should send plugin file basename instead of MIME type.
        https://bugs.webkit.org/show_bug.cgi?id=101679

        Reviewed by Eric Carlson.

        Log the basename of the plugin file rather than the mime type so as to more
        accurately log which plugin was used to handle the request.

        * loader/SubframeLoader.cpp:
        (WebCore::logPluginRequest): Log the plugin 'file' field, if present.
        * plugins/PluginData.cpp:
        (WebCore::PluginData::pluginInfoForMimeType): Factored out from pluginNameForMimeType.
        (WebCore::PluginData::pluginNameForMimeType): Use pluginInfoForMimeType to retrieve name field.
        (WebCore::PluginData::pluginFileForMimeType): Use pluginInfoForMimeType to retrieve file field.
        * plugins/PluginData.h:

2012-11-09  Alexey Proskuryakov  <ap@apple.com>

        CookieJar uses Document class, which is a layering violation
        https://bugs.webkit.org/show_bug.cgi?id=101621

        Reviewed by Brady Eidson.

        Split CookieJar in two parts, one that takes a Document, and another that is a pure
        platform one, using NetworkingContext to access the correct platform storage.

        * GNUmakefile.list.am:
        * PlatformBlackBerry.cmake:
        * Target.pri:
        * WebCore.gypi:
        * WebCore.gyp/WebCore.gyp:
        * WebCore.vcproj/WebCore.vcproj:
        * WebCore.xcodeproj/project.pbxproj:
        Updated.

        * loader/CookieJar.cpp: Added.
        (WebCore::networkingContext):
        (WebCore::cookies):
        (WebCore::setCookies):
        (WebCore::cookiesEnabled):
        (WebCore::cookieRequestHeaderFieldValue):
        (WebCore::getRawCookies):
        (WebCore::deleteCookie):
        (WebCore::getHostnamesWithCookies):
        (WebCore::deleteCookiesForHostname):
        (WebCore::deleteAllCookies):
        * loader/CookieJar.h: Copied from Source/WebCore/platform/CookieJar.h.
        This is an adaptor for pure platform implementations. Clients continue to use the
        old interface unchanged.

        * platform/blackberry/CookieJarBlackBerry.cpp: Removed.
        * loader/blackberry/CookieJarBlackBerry.cpp: Copied from Source/WebCore/platform/blackberry/CookieJarBlackBerry.cpp.
        * platform/network/chromium/CookieJarChromium.cpp: Removed.
        * loader/chromium/CookieJarChromium.cpp: Copied from Source/WebCore/platform/network/chromium/CookieJarChromium.cpp.
        These platforms do not have a pure platform implementation yet, so they just keep
        to use original implementations. Since the code is not in platform/ any more, the
        violation is resolved for Chromium and Blackberry, too.

        * platform/CookieJar.h: Removed.
        * platform/network/PlatformCookieJar.h: Copied from Source/WebCore/platform/CookieJar.h.
        The platform interface is now more uniform - all functions take a NetworkingContext
        instead of hardcoding which cookie storage to use in some cases.
        Renamed functions that are only useful for document.cookie implementation to look
        less generic.

        * platform/mac/CookieJar.mm: Removed.
        * platform/network/mac/CookieJarMac.mm: Copied from Source/WebCore/platform/mac/CookieJar.mm.
        (WebCore::cookiesForDOM): This now takes a context instead of Document, and also
        takes a firstParty URL (unused on Mac, but used on some other platforms).
        (WebCore::cookieRequestHeaderFieldValue): Get cookie storage from context (and
        use shared one if context is null).
        (WebCore::setCookiesFromDOM): Ditto.
        (WebCore::cookiesEnabled): Ditto.
        (WebCore::getRawCookies): Ditto.
        (WebCore::deleteCookie): Ditto.
        (WebCore::getHostnamesWithCookies): Ditto. This used to only support default storage,
        but its cleaner to have a uniform interface.
        (WebCore::deleteCookiesForHostname): Ditto.
        (WebCore::deleteAllCookies): Ditto.

        * platform/network/cf/CookieJarCFNet.cpp:
        Same changes as on Mac.

        * platform/network/curl/CookieJarCurl.cpp:
        Updated for new interface. Implementation is largely a dummy one.

        * platform/qt/CookieJarQt.h: Removed.
        * platform/network/qt/CookieJarQt.h: Copied from Source/WebCore/platform/qt/CookieJarQt.h.
        Moved to a common location, most cookie files were in network/ already.

        * platform/qt/CookieJarQt.cpp: Removed.
        * platform/network/qt/CookieJarQt.cpp: Copied from Source/WebCore/platform/qt/CookieJarQt.cpp.
        (WebCore::setCookiesFromDOM): Use context's or shared cooke jar as appropriate.
        (WebCore::cookiesForDOM): Ditto.
        (WebCore::cookieRequestHeaderFieldValue): Ditto.
        (WebCore::cookiesEnabled): Ditto.
        (WebCore::getRawCookies): Ditto.
        (WebCore::deleteCookie): Ditto.
        (WebCore::getHostnamesWithCookies): Back-end implementation can only handle shared
        jar here, assert that argument does not request another one.
        (WebCore::deleteCookiesForHostname): Ditto.
        (WebCore::deleteAllCookies): Ditto.

        * platform/network/soup/CookieJarSoup.cpp:
        (WebCore::cookieJarForContext):
        (WebCore::setCookiesFromDOM):
        (WebCore::cookiesForContext):
        (WebCore::cookiesForDOM):
        (WebCore::cookieRequestHeaderFieldValue):
        (WebCore::cookiesEnabled):
        (WebCore::getRawCookies):
        (WebCore::deleteCookie):
        (WebCore::getHostnamesWithCookies):
        (WebCore::deleteCookiesForHostname):
        (WebCore::deleteAllCookies):
        Updated for new function signatures, and use the same cross-platform logic for
        choosing a cookie jar.

        * platform/network/soup/CookieJarSoup.h: Don't include unnecessary CooieJar.h.
        
        * platform/network/win/CookieJarWin.cpp:
        (WebCore::setCookiesFromDOM):
        (WebCore::cookiesForDOM):
        (WebCore::cookieRequestHeaderFieldValue):
        (WebCore::cookiesEnabled):
        (WebCore::getRawCookies):
        (WebCore::deleteCookie):
        (WebCore::getHostnamesWithCookies):
        (WebCore::deleteCookiesForHostname):
        (WebCore::deleteAllCookies):
        Updated for new function signatures.

2012-11-09  Bruno de Oliveira Abinader  <bruno.abinader@basyskom.com>

        [css] Text decoration's "blink" not valid when CSS3_TEXT is enabled
        https://bugs.webkit.org/show_bug.cgi?id=101750

        Reviewed by Ojan Vafai.

        This patch fixes an issue regarding "blink" value, which is valid for CSS 2.1
        "text-decoration" property, but recently have its parser function modified by
        the addition of CSS3 "-webkit-text-decoration-line" property.

        The 'fast/css/getComputedStyle/getComputedStyle-text-decoration.html'
        layout test is updated with all possible value combinations.

        * css/CSSParser.cpp:
        (WebCore::CSSParser::parseTextDecoration): Added 'blink' value to list
        if accepted.

2012-11-09  Xan Lopez  <xlopez@igalia.com>

        [GTK] Do not use 'ls' to list IDL files in EXTRA_DIST
        https://bugs.webkit.org/show_bug.cgi?id=101581

        Reviewed by Martin Robinson.

        Use normal GNU Make wildcards instead of 'ls' to list files in
        EXTRA_DIST, it's safer and more straightforward.

        * GNUmakefile.am: ditto.

2012-11-09  Charles Wei  <charles.wei@torchmobile.com.cn>

        Need to clear exception in JSDictionary that might have been caused by previous operation.
        https://bugs.webkit.org/show_bug.cgi?id=96614

        Reviewed by George Staikos.

        IndexedDB IDBDatabase::createObjectStore supports both String type of KeyPath and
        String Array type of KeyPath. It will first try to get the keyPath as a String Array,
        if fails, it will try to get KeyPath as a String, from the Dictionary. The first get
        will leave the internal ExecState of Dictionary in exception state. We need to clear
        the exception state before the 2nd query, otherwise the second query will also fail.

        No new tests. The existing test case LayoutTests/storage/indexeddb/tutorial.html should
        now work with this patch.
        * bindings/js/JSDictionary.cpp:
        (WebCore::JSDictionary::getWithUndefinedOrNullCheck):

2012-11-09  Keishi Hattori  <keishi@webkit.org>

        Month/week picker should submit month/week string
        https://bugs.webkit.org/show_bug.cgi?id=101744

        Reviewed by Kent Tamura.

        Month/week picker should submit month/week string and not yyyy-mm-dd.

        No new tests. Test will be added in Bug 101555 and Bug 101556.

        * Resources/pagepopups/calendarPicker.js:
        (DaysTable.prototype._handleDayClick):

2012-11-07  Pavel Feldman  <pfeldman@chromium.org>

        Web Inspector: wrong output for empty object {}
        https://bugs.webkit.org/show_bug.cgi?id=101356

        Reviewed by Vsevolod Vlasov.

        Changed preview formatting to iterate over enumerable properties only + visit the prototypes.

        * inspector/InjectedScriptSource.js:
        (.):
        * inspector/front-end/ConsoleMessage.js:
        (WebInspector.ConsoleMessageImpl.prototype._appendObjectPreview):

2012-11-09  Keishi Hattori  <keishi@webkit.org>

        Fix annotations in page popup files
        https://bugs.webkit.org/show_bug.cgi?id=101736

        Reviewed by Kent Tamura.

        Add @constructor where needed. Replacing /* with /** for annotations.

        No new tests. No behavior change.

        * Resources/pagepopups/calendarPicker.js:
        * Resources/pagepopups/pickerCommon.js:
        * Resources/pagepopups/suggestionPicker.js:

2012-11-09  Huang Dongsung  <luxtella@company100.net>

        Coordinated Graphics: Remove a backing store of GraphicsLayer when the layer is far from the viewport.
        https://bugs.webkit.org/show_bug.cgi?id=101656

        Reviewed by Kenneth Rohde Christiansen.

        TiledBackingStore computes cover and keep rects to create, keep or remove tiles
        smartly, but currently TiledBackingStore expects a contents rect is big enough
        to cover the visibleRect. However, when CoordinatedGraphicsLayer uses TBS, it
        is usually wrong expectation.

        We must compute cover and keep rects using the visibleRect, instead of
        the rect intersecting the visibleRect with m_rect, because TBS can be
        used as a backing store of GraphicsLayer and the visible rect usually
        does not intersect with m_rect.
        In the below case, the intersecting rect is an empty.

         +---------------+
         |               |
         |   m_rect      |
         |       +-------|-----------------------+
         |       | HERE  |  cover or keep        |
         +---------------+      rect             |
                 |         +---------+           |
                 |         | visible |           |
                 |         |  rect   |           |
                 |         +---------+           |
                 |                               |
                 |                               |
                 +-------------------------------+

        We must create or keep the tiles in the HERE region. Currently in the
        case, we do not create or keep tiles on the HERE region. Moreover, in
        the case, we early return, which means we don't remove any tiles. It
        causes to waste heap and video memory.

        This patch changes TiledBackingStore to manage tiles smartly for
        Coordinated Graphics.

        Changing cache policy is not testable in layout tests.

        * platform/graphics/TiledBackingStore.cpp:
        (WebCore::TiledBackingStore::visibleRect):
        (WebCore::TiledBackingStore::visibleAreaIsCovered):
        (WebCore::TiledBackingStore::createTiles):
        (WebCore::TiledBackingStore::adjustForContentsRect):
        (WebCore::TiledBackingStore::removeAllNonVisibleTiles):
        * platform/graphics/TiledBackingStore.h:
        (TiledBackingStore):

2012-11-09  Keishi Hattori  <keishi@webkit.org>

        Fix undefined variable in Week constructor for calendar picker
        https://bugs.webkit.org/show_bug.cgi?id=101734

        Reviewed by Kent Tamura.

        Closer compiler found an undefined variable in the Week constructor.

        No new tests. This code isn't used.

        * Resources/pagepopups/calendarPicker.js:
        (Week): Used wrong variable name.

2012-11-09  Pavel Feldman  <pfeldman@chromium.org>

        Web Inspector: render canvas log as a grid.
        https://bugs.webkit.org/show_bug.cgi?id=101732

        Reviewed by Vsevolod Vlasov.

        * English.lproj/localizedStrings.js:
        * inspector/front-end/CanvasProfileView.js:
        (WebInspector.CanvasProfileView):
        (WebInspector.CanvasProfileView.prototype._onSelectTraceLog):
        (WebInspector.CanvasProfileView.prototype._replayTraceLog.didReplayTraceLog):
        (WebInspector.CanvasProfileView.prototype._replayTraceLog):
        (WebInspector.CanvasProfileHeader.prototype.traceLogId):
        (WebInspector.CanvasLogGrid):
        (WebInspector.CanvasLogGrid.prototype._didReceiveTraceLog):
        (WebInspector.CanvasLogGrid.prototype._createCallNode):
        * inspector/front-end/DataGrid.js:
        (WebInspector.DataGridNode.prototype.createCell):
        * inspector/front-end/canvasProfiler.css:
        (#canvas-replay-image-container):

2012-11-09  Allan Sandfeld Jensen  <allan.jensen@digia.com>

        Regression(r107593) Crash in ContextMenuController::addInspectElementItem()
        https://bugs.webkit.org/show_bug.cgi?id=101595

        Reviewed by Simon Hausmann.

        If the contextMenu is a null pointer treat it as empty, appendItem will later
        create it if necessary.

        * page/ContextMenuController.cpp:
        (WebCore::ContextMenuController::addInspectElementItem):

2012-11-09  Christophe Dumez  <christophe.dumez@intel.com>

        [EFL][WK2] Add support for custom cursors
        https://bugs.webkit.org/show_bug.cgi?id=101723

        Reviewed by Kenneth Rohde Christiansen.

        Add getEvasObject() virtual method to Image class and
        provide implementation for BitmapImage.

        No new tests, no behavior change.

        * platform/efl/CursorEfl.cpp:
        (WebCore::cursorString):
        * platform/graphics/BitmapImage.h:
        (BitmapImage):
        * platform/graphics/Image.h:
        (Image):
        (WebCore::Image::getEvasObject):
        * platform/graphics/efl/ImageEfl.cpp:
        (WebCore::BitmapImage::getEvasObject):
        (WebCore):

2012-11-09  Adam Barth  <abarth@webkit.org>

        IndexedDB should use mostly ScriptWrappable DOM objects
        https://bugs.webkit.org/show_bug.cgi?id=101694

        Reviewed by Kentaro Hara.

        These object always have JavaScript wrappers, so we should store the
        wrappers inline to use less memory and be faster.

        * Modules/indexeddb/IDBAny.h:
        * Modules/indexeddb/IDBCursor.h:
        * Modules/indexeddb/IDBDatabase.h:
        * Modules/indexeddb/IDBFactory.h:
        * Modules/indexeddb/IDBIndex.h:
        * Modules/indexeddb/IDBKey.h:
        * Modules/indexeddb/IDBKeyRange.h:
        * Modules/indexeddb/IDBObjectStore.h:
        * Modules/indexeddb/IDBRequest.h:
        * Modules/indexeddb/IDBTransaction.h:

2012-11-09  Vsevolod Vlasov  <vsevik@chromium.org>

        Web Inspector: Add meaningful error message when request content was evicted from inspector cache.
        https://bugs.webkit.org/show_bug.cgi?id=101578

        Reviewed by Yury Semikhatsky.

        Added specific error message when request content was evicted from inspector cache.
        Replaced purge with evict in fields/methods names.

        * inspector/InspectorResourceAgent.cpp:
        (WebCore::InspectorResourceAgent::getResponseBody):
        * inspector/NetworkResourcesData.cpp:
        (WebCore::NetworkResourcesData::ResourceData::ResourceData):
        (WebCore::NetworkResourcesData::ResourceData::evictContent):
        (WebCore::NetworkResourcesData::setResourceContent):
        (WebCore::NetworkResourcesData::maybeAddResourceData):
        (WebCore::NetworkResourcesData::maybeDecodeDataToContent):
        (WebCore::NetworkResourcesData::ensureNoDataForRequestId):
        (WebCore::NetworkResourcesData::ensureFreeSpace):
        * inspector/NetworkResourcesData.h:
        (WebCore::NetworkResourcesData::ResourceData::isContentEvicted):
        (ResourceData):

2012-11-09  Kent Tamura  <tkent@chromium.org>

        Don't use RenderTextControlSingleLine for date/time input types without the multiple-fields UI
        https://bugs.webkit.org/show_bug.cgi?id=101722

        Reviewed by Hajime Morita.

        Because the date/time input types are not textfields, we should not use
        RenderTextControlSingleLine, and don't need to create shadow trees for
        RenderTextControlSingleLine.

        No new tests. Covered by fast/forms/*/*-appearance-*.html.

        * css/html.css:
        (input[type="date"]):
        It has menulist appeanrace by default, and should be a flexible box to
        center the inner text. 10em width is almost same as the default width of
        text fields.
        (input[type="datetime"]): Ditto.
        (input[type="datetime-local"]): Ditto.
        (input[type="month"]): Ditto.
        (input[type="time"]): Ditto.
        (input[type="week"]): Ditto.
        (input::-webkit-date-and-time-value):
        Added. A style for the inner text block.
        * html/BaseChooserOnlyDateAndTimeInputType.cpp:
        (WebCore::BaseChooserOnlyDateAndTimeInputType::createRenderer):
        Don't create RenderTextControlSingleLine.
        (WebCore::BaseChooserOnlyDateAndTimeInputType::updateInnerTextValue):
        Skip TextFieldInputType::updateInnerTextValue.
        (WebCore::BaseChooserOnlyDateAndTimeInputType::forwardEvent):
        Skip TextFieldInputType::forwardEvent.
        (WebCore::BaseChooserOnlyDateAndTimeInputType::createShadowSubtree):
        Just add one element to the shadow root.
        (WebCore::BaseChooserOnlyDateAndTimeInputType::updateAppearance):
        Sets a localized value to the inner text block.
        (WebCore::BaseChooserOnlyDateAndTimeInputType::setValue):
        Calls updateAppearance if the value is updated.
        * html/BaseChooserOnlyDateAndTimeInputType.h:
        (BaseChooserOnlyDateAndTimeInputType): Declare updateAppearance,
        createRenderer, updateInnerTextValue, forwardEvent, createShadowSubtree,
        and setValue.
        * html/BaseDateAndTimeInputType.h:
        (WebCore): Add a FIXME comment.
        (BaseDateAndTimeInputType):
        Make visibleValue protected. It is used by BaseChooserOnlyDateAndTimeInputType.
        * html/TextFieldInputType.h:
        (TextFieldInputType):
        Make setValue protected. It is used by BaseChooserOnlyDateAndTimeInputType.

2012-11-09  Vsevolod Vlasov  <vsevik@chromium.org>

        Web Inspector: Clarify meaning of different urls in protocol.
        https://bugs.webkit.org/show_bug.cgi?id=101582

        Reviewed by Yury Semikhatsky.

        * inspector/Inspector.json:

2012-11-09  Keishi Hattori  <keishi@webkit.org>

        Month picker should select the current month when navigating while keeping selection position.
        https://bugs.webkit.org/show_bug.cgi?id=101724

        Reviewed by Kent Tamura.

        Month picker needs to behave differently because selection won't be in the same position when changing current month.

        No new tests. Test will be added in Bug 101556.

        * Resources/pagepopups/calendarPicker.js:
        (DaysTable.prototype.navigateToMonth): Date/Week picker should keep selection position for first selected date node.
        (DaysTable.prototype._startMoveInAnimation): Moving shared code to separate function.
        (MonthPickerDaysTable.prototype.navigateToMonth): Month picker should just select the month.

2012-11-09  Alexei Filippov  <alph@chromium.org>

        Web Inspector: Fix heap snapshots counted several times by NMI
        https://bugs.webkit.org/show_bug.cgi?id=101085

        The fix moves snapshots size counting to V8PerIsolateData class. As long
        as it has one instance per isolate its reportMemoryUsage should be
        called once per isolate.

        Reviewed by Yury Semikhatsky.

        * bindings/v8/V8PerIsolateData.cpp:
        (WebCore::V8PerIsolateData::reportMemoryUsage):
        * inspector/InspectorProfilerAgent.cpp:
        (WebCore::InspectorProfilerAgent::reportMemoryUsage):

2012-11-08  Pavel Feldman  <pfeldman@chromium.org>

        Web Inspector: split SplitView into SplitView and SidebarView
        https://bugs.webkit.org/show_bug.cgi?id=101612

        Reviewed by Vsevolod Vlasov.

        Currently, SplitView is rather a sidebar view. I'm extracting the reusable split component from it.

        * WebCore.gypi:
        * WebCore.vcproj/WebCore.vcproj:
        * inspector/compile-front-end.py:
        * inspector/front-end/AuditsPanel.js:
        (WebInspector.AuditsPanel):
        * inspector/front-end/CSSNamedFlowCollectionsView.js:
        (WebInspector.CSSNamedFlowCollectionsView):
        (WebInspector.CSSNamedFlowCollectionsView.prototype.wasShown):
        * inspector/front-end/ElementsPanel.js:
        * inspector/front-end/FileSystemView.js:
        (WebInspector.FileSystemView):
        * inspector/front-end/MemoryStatistics.js:
        (WebInspector.CounterUI):
        (WebInspector.MemoryStatistics.prototype.setTopPosition):
        (WebInspector.MemoryStatistics.prototype.setSidebarWidth):
        (WebInspector.MemoryStatistics.prototype.visible):
        (WebInspector.MemoryStatistics.prototype.show):
        (WebInspector.MemoryStatistics.prototype.hide):
        * inspector/front-end/NavigatorOverlayController.js:
        (WebInspector.NavigatorOverlayController.prototype.set _pinNavigator):
        (WebInspector.NavigatorOverlayController.prototype.set showNavigatorOverlay):
        (WebInspector.NavigatorOverlayController.prototype.hideNavigatorOverlay):
        (WebInspector.NavigatorOverlayController.prototype._innerHideNavigatorOverlay):
        * inspector/front-end/NetworkPanel.js:
        * inspector/front-end/Panel.js:
        (WebInspector.Panel.prototype.createSidebarView):
        (WebInspector.Panel.prototype.createSidebarViewWithTree):
        * inspector/front-end/ProfilesPanel.js:
        (WebInspector.ProfilesPanel):
        * inspector/front-end/ResourcesPanel.js:
        * inspector/front-end/ScriptsPanel.js:
        (WebInspector.ScriptsPanel):
        * inspector/front-end/SidebarView.js: Added.
        (WebInspector.SidebarView):
        (WebInspector.SidebarView.prototype._hasLeftSidebar):
        (WebInspector.SidebarView.prototype.get mainElement):
        (WebInspector.SidebarView.prototype.get sidebarElement):
        (WebInspector.SidebarView.prototype._innerSetSidebarPosition):
        (WebInspector.SidebarView.prototype.setMinimalSidebarWidth):
        (WebInspector.SidebarView.prototype.setMinimalMainWidthPercent):
        (WebInspector.SidebarView.prototype.setSidebarWidth):
        (WebInspector.SidebarView.prototype.sidebarWidth):
        (WebInspector.SidebarView.prototype.onResize):
        (WebInspector.SidebarView.prototype.applyConstraints):
        (WebInspector.SidebarView.prototype.hideMainElement):
        (WebInspector.SidebarView.prototype.showMainElement):
        (WebInspector.SidebarView.prototype.hideSidebarElement):
        (WebInspector.SidebarView.prototype.showSidebarElement):
        (WebInspector.SidebarView.prototype.elementsToRestoreScrollPositionsFor):
        * inspector/front-end/SplitView.js:
        (WebInspector.SplitView):
        (WebInspector.SplitView.prototype.firstElement):
        (WebInspector.SplitView.prototype.secondElement):
        (WebInspector.SplitView.prototype.setChangeFirstOnResize):
        (WebInspector.SplitView.prototype.resizerElement):
        (WebInspector.SplitView.prototype.showOnlyFirst):
        (WebInspector.SplitView.prototype.showOnlySecond):
        (WebInspector.SplitView.prototype._showOnly):
        (WebInspector.SplitView.prototype._removeAllLayoutProperties):
        (WebInspector.SplitView.prototype.showBoth):
        (WebInspector.SplitView.prototype.setResizable):
        (WebInspector.SplitView.prototype.setSplitOffset):
        (WebInspector.SplitView.prototype.splitOffset):
        (WebInspector.SplitView.prototype._innerSetSplitOffset):
        (WebInspector.SplitView.prototype._startResizerDragging):
        * inspector/front-end/TimelinePanel.js:
        * inspector/front-end/WebKit.qrc:
        * inspector/front-end/inspector.html:
        * inspector/front-end/splitView.css:

2012-11-09  Andrey Lushnikov  <lushnikov@google.com>

        Web Inspector: Ctrl+A in the network panel should select resource content, not the entire panel
        https://bugs.webkit.org/show_bug.cgi?id=101591

        Reviewed by Vsevolod Vlasov.

        Intercept Ctrl+A event in DefaultTextEditor to select resource content

        * inspector/front-end/DefaultTextEditor.js:
        (WebInspector.DefaultTextEditor.prototype._registerShortcuts): Added Ctrl+A
        (WebInspector.DefaultTextEditor.prototype._handleKeyDown): Intercept Ctrl+A even for readonly fields
        (WebInspector.TextEditorMainPanel.prototype.handleSelectAll):
        * inspector/front-end/KeyboardShortcut.js: Added SelectAll constant for Ctrl+A combination

2012-11-09  Dan Carney  <dcarney@google.com>

        [V8] Main world should have one DOMDataStore
        https://bugs.webkit.org/show_bug.cgi?id=101470

        Reviewed by Kentaro Hara.

        The main world DOMWrapperWorld held onto a DOMDataStore that should
        never be used, as there is a static one optimized for speed in
        DOMDataStore.

        No new tests. No change in functionality.

        * bindings/v8/DOMDataStore.cpp:
        (WebCore::DOMDataStore::current):
        * bindings/v8/DOMWrapperWorld.h:
        (WebCore::DOMWrapperWorld::isolatedWorldDomDataStore):
        (WebCore::DOMWrapperWorld::DOMWrapperWorld):
        * bindings/v8/V8DOMWrapper.h:
        (WebCore::V8DOMWrapper::getCachedWrapper):

2012-11-09  Alexei Filippov  <alph@chromium.org>

        Web Inspector: Navigating around NMI snapshot grid with keys breaks the grid
        https://bugs.webkit.org/show_bug.cgi?id=101611

        Reviewed by Yury Semikhatsky.

        Keys navigation cause populate message sent to the node. The node should
        not react on populate messages but the first one.

        * inspector/front-end/NativeMemorySnapshotView.js:

2012-11-08  Eugene Klyuchnikov  <eustas.bug@gmail.com>

        Web Inspector: Timeline: "Send Request" events are shown out of order.
        https://bugs.webkit.org/show_bug.cgi?id=101544

        Reviewed by Yury Semikhatsky.

        Solution: replace obsolete out-of-order record pushing with frontend
        record reparenting.

        * inspector/InspectorTimelineAgent.cpp:
        (WebCore::InspectorTimelineAgent::willSendResourceRequest): Replaced
        direct record pushing with standard appendRecord invokation.
        * inspector/front-end/TimelinePresentationModel.js:
        (WebInspector.TimelinePresentationModel.prototype._findParentRecord):
        Made "Send Request" records top-level if gluing is on.

2012-11-08  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r134010.
        http://trac.webkit.org/changeset/134010
        https://bugs.webkit.org/show_bug.cgi?id=101716

        Broke the chromium windows build. (Requested by noel_ on
        #webkit).

        * Modules/indexeddb/IDBAny.cpp:
        * Modules/indexeddb/IDBCallbacks.h:
        * Modules/indexeddb/IDBDatabase.cpp:
        (WebCore::IDBDatabase::createObjectStore):
        (WebCore::IDBDatabase::deleteObjectStore):
        (WebCore::IDBDatabase::transaction):
        * Modules/indexeddb/IDBDatabase.h:
        (IDBDatabase):
        * Modules/indexeddb/IDBDatabaseBackendImpl.cpp:
        (WebCore::IDBDatabaseBackendImpl::getObjectStoreId):
        (WebCore):
        (WebCore::IDBDatabaseBackendImpl::setVersion):
        (WebCore::IDBDatabaseBackendImpl::transaction):
        (WebCore::IDBDatabaseBackendImpl::runIntVersionChangeTransaction):
        * Modules/indexeddb/IDBDatabaseBackendImpl.h:
        (WebCore::IDBDatabaseBackendImpl::deleteObjectStore):
        (IDBDatabaseBackendImpl):
        * Modules/indexeddb/IDBDatabaseBackendInterface.h:
        (WebCore):
        (IDBDatabaseBackendInterface):
        * Modules/indexeddb/IDBMetadata.h:
        (WebCore::IDBObjectStoreMetadata::containsIndex):
        (WebCore::IDBDatabaseMetadata::findObjectStore):
        (IDBDatabaseMetadata):
        (WebCore::IDBDatabaseMetadata::containsObjectStore):
        * Modules/indexeddb/IDBObjectStore.cpp:
        (WebCore::IDBObjectStore::put):
        (WebCore):
        (WebCore::IDBObjectStore::createIndex):
        (WebCore::IDBObjectStore::index):
        (WebCore::IDBObjectStore::deleteIndex):
        * Modules/indexeddb/IDBObjectStore.h:
        (WebCore::IDBObjectStore::openCursor):
        (IDBObjectStore):
        * Modules/indexeddb/IDBObjectStoreBackendImpl.cpp:
        (WebCore::IDBObjectStoreBackendImpl::put):
        (WebCore::IDBObjectStoreBackendImpl::putWithIndexKeys):
        (WebCore):
        (WebCore::IDBObjectStoreBackendImpl::setIndexKeys):
        (WebCore::IDBObjectStoreBackendImpl::setIndexesReady):
        (WebCore::IDBObjectStoreBackendImpl::index):
        (WebCore::IDBObjectStoreBackendImpl::getIndexId):
        (WebCore::IDBObjectStoreBackendImpl::getIndexIds):
        (WebCore::IDBObjectStoreBackendImpl::deleteIndex):
        * Modules/indexeddb/IDBObjectStoreBackendImpl.h:
        (IDBObjectStoreBackendImpl):
        * Modules/indexeddb/IDBObjectStoreBackendInterface.h:
        (WebCore):
        * Modules/indexeddb/IDBTransaction.cpp:
        (WebCore::IDBTransaction::objectStore):
        * Modules/indexeddb/IDBTransactionBackendImpl.cpp:
        (WebCore::IDBTransactionBackendImpl::objectStore):
        (WebCore):
        * Modules/indexeddb/IDBTransactionBackendImpl.h:
        (IDBTransactionBackendImpl):
        * Modules/indexeddb/IDBTransactionBackendInterface.h:

2012-11-08  Grzegorz Czajkowski  <g.czajkowski@samsung.com>

        [EFL] Add a method to the TextCheckerEnchant class to check whether any dictionary is loaded
        https://bugs.webkit.org/show_bug.cgi?id=101570

        Reviewed by Gustavo Noronha Silva.

        Expose a new method to check whether a vector of loaded languages is empty.
        WK2-EFL needs it to set the default language (if the client didn't set any) when
        spelling setting is being enabled. This change makes it more convenient to check
        whether the dictionaries vector is empty.

        No new tests, no behavior change.

        * platform/text/enchant/TextCheckerEnchant.cpp:
        (TextCheckerEnchant::checkSpellingOfString):
        (TextCheckerEnchant::getGuessesForWord):
        (TextCheckerEnchant::loadedSpellCheckingLanguages):
        A newly exposed method is used internally too.

        * platform/text/enchant/TextCheckerEnchant.h:
        (WebCore::TextCheckerEnchant::hasDictionary):
        Add an inline hasDictionary() method.

2012-11-08  Shinya Kawanaka  <shinyak@chromium.org>

        [Refactoring] Remove shadowPseudoId() and use pseudo() instead in TextTrackCue
        https://bugs.webkit.org/show_bug.cgi?id=101702

        Reviewed by Hajime Morita.

        We're migrating shadowPseudoId() to pseudo(). We remove shadowPseudoId() from TextTrackCue and use
        setPseudo()/pseudo() instead.

        No new tests, simple refactoring.

        * html/track/TextTrackCue.cpp:
        (WebCore::TextTrackCueBox::TextTrackCueBox):
        * html/track/TextTrackCue.h:
        (TextTrackCueBox):

2012-11-08  Arpita Bahuguna  <arpitabahuguna@gmail.com>

        table not aligned in center column and seems shrunk because of float:right (table-layout: fixed and width: 100%)
        https://bugs.webkit.org/show_bug.cgi?id=18153

        Reviewed by Beth Dakin.

        Preferred logical width is computed incorrectly for fixed layout tables
        with 100% percent width, in standards mode.

        According to our fixed table layout algorithm (CSS2 specification - 17.5.2.1)
        the ultimate width of the table is the greater of the value of the
        'width' property for the table elements and the sum of the column
        widths.

        For our specific scenario we have a fixed layout table with 100% width
        consisting of columns with fixed widths, the sum of which is less than
        the specified width of the table (i.e. 100% of the containing block).
        Even then the applied width is the cummulative of the width of the
        columns.

        This happens because of the quirks mode check added in
        FixedTableLayout::computePreferredLogicalWidths(), which prohibits the
        setting of maxWidth to our fixed layout table with percent width, and
        which perhaps is not required anymore.

        Test: fast/table/fixed-table-layout/table-with-percent-width.html

        * rendering/FixedTableLayout.cpp:
        (WebCore::FixedTableLayout::computePreferredLogicalWidths):
        Removed the quirks mode check.

2012-11-08  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r134004.
        http://trac.webkit.org/changeset/134004
        https://bugs.webkit.org/show_bug.cgi?id=101713

        multiple crashes (Requested by hayato on #webkit).

        * rendering/RenderThemeMac.mm:
        (WebCore::RenderThemeMac::adjustMediaSliderThumbSize):
        (WebCore::RenderThemeMac::paintMediaFullscreenButton):
        (WebCore::RenderThemeMac::paintMediaMuteButton):
        (WebCore::RenderThemeMac::paintMediaPlayButton):
        (WebCore::RenderThemeMac::paintMediaSeekBackButton):
        (WebCore::RenderThemeMac::paintMediaSeekForwardButton):
        (WebCore::RenderThemeMac::paintMediaSliderTrack):
        (WebCore::RenderThemeMac::paintMediaSliderThumb):
        (WebCore::RenderThemeMac::paintMediaRewindButton):
        (WebCore::RenderThemeMac::paintMediaReturnToRealtimeButton):
        (WebCore::RenderThemeMac::paintMediaToggleClosedCaptionsButton):
        (WebCore::RenderThemeMac::paintMediaControlsBackground):
        (WebCore::RenderThemeMac::paintMediaCurrentTime):
        (WebCore::RenderThemeMac::paintMediaTimeRemaining):
        (WebCore::RenderThemeMac::paintMediaVolumeSliderContainer):
        (WebCore::RenderThemeMac::paintMediaVolumeSliderTrack):
        (WebCore::RenderThemeMac::paintMediaVolumeSliderThumb):
        (WebCore::RenderThemeMac::paintMediaFullScreenVolumeSliderTrack):
        (WebCore::RenderThemeMac::paintMediaFullScreenVolumeSliderThumb):

2012-11-08  Jan Keromnes  <janx@linux.com>

        Web Inspector: stop using cursorCoords in CodeMirrorTextEditor
        https://bugs.webkit.org/show_bug.cgi?id=101607

        Reviewed by Vsevolod Vlasov.

        API changes completing migration to v3.

        * inspector/front-end/CodeMirrorTextEditor.js:
        (WebInspector.CodeMirrorTextEditor):
        (WebInspector.CodeMirrorTextEditor.prototype.revealLine):
        (WebInspector.CodeMirrorTextEditor.prototype.selection):

2012-11-08  Alexei Filippov  <alph@chromium.org>

        Web Inspector: make "Other" bar color darker in NMI snapshot.
        https://bugs.webkit.org/show_bug.cgi?id=101602

        Reviewed by Vsevolod Vlasov.

        * inspector/front-end/NativeMemorySnapshotView.js:
        (WebInspector.MemoryBlockViewProperties._initialize):

2012-11-08  Alec Flett  <alecflett@chromium.org>

        IndexedDB: switch frontend to use int64_t-based references
        https://bugs.webkit.org/show_bug.cgi?id=100426

        Reviewed by Tony Chang.

        Remove String-based objectStore/index references, obsoleted by
        https://bugs.webkit.org/show_bug.cgi?id=100425.

        No new tests as this is the second half of a refactor.

        * Modules/indexeddb/IDBCallbacks.h:
        * Modules/indexeddb/IDBDatabase.cpp:
        (WebCore::IDBDatabase::deleteObjectStore):
        (WebCore::IDBDatabase::transaction):
        * Modules/indexeddb/IDBDatabaseBackendImpl.cpp:
        (WebCore::IDBDatabaseBackendImpl::setVersion):
        (WebCore::IDBDatabaseBackendImpl::transaction):
        (WebCore::IDBDatabaseBackendImpl::runIntVersionChangeTransaction):
        * Modules/indexeddb/IDBDatabaseBackendImpl.h:
        (IDBDatabaseBackendImpl):
        * Modules/indexeddb/IDBDatabaseBackendInterface.h:
        (IDBDatabaseBackendInterface):
        * Modules/indexeddb/IDBMetadata.h:
        (WebCore::IDBObjectStoreMetadata::findIndex):
        (IDBObjectStoreMetadata):
        (WebCore::IDBObjectStoreMetadata::containsIndex):
        * Modules/indexeddb/IDBObjectStore.cpp:
        (WebCore::IDBObjectStore::put):
        (WebCore):
        (WebCore::IDBObjectStore::index):
        (WebCore::IDBObjectStore::deleteIndex):
        * Modules/indexeddb/IDBObjectStoreBackendImpl.cpp:
        (WebCore::IDBObjectStoreBackendImpl::put):
        (WebCore):
        * Modules/indexeddb/IDBObjectStoreBackendImpl.h:
        (IDBObjectStoreBackendImpl):
        * Modules/indexeddb/IDBObjectStoreBackendInterface.h:
        * inspector/Inspector-1.0.json:
        * inspector/Inspector.json:
        * inspector/InspectorIndexedDBAgent.cpp:
        (WebCore):
        (WebCore::InspectorIndexedDBAgent::requestData):
        * inspector/InspectorIndexedDBAgent.h:
        (InspectorIndexedDBAgent):

2012-11-08  Shinya Kawanaka  <shinyak@chromium.org>

        [Refactoring] Expose collectFeaturesFromSelector from RuleSet.cpp
        https://bugs.webkit.org/show_bug.cgi?id=101692

        Reviewed by Dimitri Glazkov.

        We expose collectFeaturesFromSelector in RuleSet.cpp to use it for collecting ShadowDOM select attribute features.

        No new tests, simple refactoring.

        * css/RuleFeature.cpp:
        (WebCore::RuleFeatureSet::collectFeaturesFromSelector): Moved from RuleSet.cpp.
        (WebCore):
        * css/RuleFeature.h:
        (WebCore):
        (RuleFeatureSet):
        * css/RuleSet.cpp:
        (WebCore::collectFeaturesFromRuleData):

2012-11-08  Robert Sesek  <rsesek@chromium.org>

        Guard calls to WebKitSystemInterface media control drawing functions in RenderThemeMac with PLATFORM(MAC)
        https://bugs.webkit.org/show_bug.cgi?id=101634

        Reviewed by Adam Barth.

        No new tests, just disabling unused code in Chromium port.

        * rendering/RenderThemeMac.mm:
        (WebCore::RenderThemeMac::adjustMediaSliderThumbSize):
        (WebCore::RenderThemeMac::paintMediaFullscreenButton):
        (WebCore::RenderThemeMac::paintMediaMuteButton):
        (WebCore::RenderThemeMac::paintMediaPlayButton):
        (WebCore::RenderThemeMac::paintMediaSeekBackButton):
        (WebCore::RenderThemeMac::paintMediaSeekForwardButton):
        (WebCore::RenderThemeMac::paintMediaSliderTrack):
        (WebCore::RenderThemeMac::paintMediaSliderThumb):
        (WebCore::RenderThemeMac::paintMediaRewindButton):
        (WebCore::RenderThemeMac::paintMediaReturnToRealtimeButton):
        (WebCore::RenderThemeMac::paintMediaToggleClosedCaptionsButton):
        (WebCore::RenderThemeMac::paintMediaControlsBackground):
        (WebCore::RenderThemeMac::paintMediaCurrentTime):
        (WebCore::RenderThemeMac::paintMediaTimeRemaining):
        (WebCore::RenderThemeMac::paintMediaVolumeSliderContainer):
        (WebCore::RenderThemeMac::paintMediaVolumeSliderTrack):
        (WebCore::RenderThemeMac::paintMediaVolumeSliderThumb):
        (WebCore::RenderThemeMac::paintMediaFullScreenVolumeSliderTrack):
        (WebCore::RenderThemeMac::paintMediaFullScreenVolumeSliderThumb):

2012-11-08  Keishi Hattori  <keishi@webkit.org>

        Enable calendar picker for input types week/month
        https://bugs.webkit.org/show_bug.cgi?id=101553

        Reviewed by Kent Tamura.

        Enabling calendar picker for <input type=week/month>

        No new tests. Tests will be added later in Bug 101556 and Bug 101555.

        * rendering/RenderThemeChromiumCommon.cpp:
        (WebCore::RenderThemeChromiumCommon::supportsCalendarPicker):

2012-11-08  Robin Cao  <robin.cao@torchmobile.com.cn>

        [BlackBerry] Change the default return value of MediaPlayerPrivate::hasSingleSecurityOrigin
        https://bugs.webkit.org/show_bug.cgi?id=101681

        Reviewed by George Staikos.

        Since the platform player in BlackBerry disallows resources that come from different origins,
        so it's safe to directly returns true here.

        * platform/graphics/blackberry/MediaPlayerPrivateBlackBerry.cpp:
        (WebCore::MediaPlayerPrivate::hasSingleSecurityOrigin):

2012-11-08  Mark Lam  <mark.lam@apple.com>

        Renamed ...InlineMethods.h files to ...Inlines.h.
        https://bugs.webkit.org/show_bug.cgi?id=101145.

        Reviewed by Geoffrey Garen.

        This is only a refactoring effort to rename the files. There are no
        functionality changes.

        No new tests.

        * GNUmakefile.list.am:
        * Target.pri:
        * WebCore.gypi:
        * WebCore.vcproj/WebCore.vcproj:
        * WebCore.xcodeproj/project.pbxproj:
        * html/parser/HTMLEntityParser.cpp:
        * html/parser/HTMLTokenizer.cpp:
        * html/track/WebVTTTokenizer.cpp:
        * xml/parser/CharacterReferenceParserInlineMethods.h: Removed.
        * xml/parser/CharacterReferenceParserInlines.h: Copied from Source/WebCore/xml/parser/CharacterReferenceParserInlineMethods.h.
        * xml/parser/MarkupTokenizerInlineMethods.h: Removed.
        * xml/parser/MarkupTokenizerInlines.h: Copied from Source/WebCore/xml/parser/MarkupTokenizerInlineMethods.h.
        * xml/parser/XMLCharacterReferenceParser.cpp:
        * xml/parser/XMLTokenizer.cpp:

2012-11-08  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r133984.
        http://trac.webkit.org/changeset/133984
        https://bugs.webkit.org/show_bug.cgi?id=101684

        windows build error. (Requested by hayato on #webkit).

        * Modules/indexeddb/IDBCallbacks.h:
        * Modules/indexeddb/IDBDatabase.cpp:
        (WebCore::IDBDatabase::createObjectStore):
        (WebCore::IDBDatabase::deleteObjectStore):
        (WebCore::IDBDatabase::transaction):
        * Modules/indexeddb/IDBDatabase.h:
        (IDBDatabase):
        * Modules/indexeddb/IDBDatabaseBackendImpl.cpp:
        (WebCore::IDBDatabaseBackendImpl::getObjectStoreId):
        (WebCore):
        (WebCore::IDBDatabaseBackendImpl::setVersion):
        (WebCore::IDBDatabaseBackendImpl::transaction):
        (WebCore::IDBDatabaseBackendImpl::runIntVersionChangeTransaction):
        * Modules/indexeddb/IDBDatabaseBackendImpl.h:
        (WebCore::IDBDatabaseBackendImpl::deleteObjectStore):
        (IDBDatabaseBackendImpl):
        * Modules/indexeddb/IDBDatabaseBackendInterface.h:
        (IDBDatabaseBackendInterface):
        * Modules/indexeddb/IDBMetadata.h:
        (WebCore::IDBObjectStoreMetadata::containsIndex):
        (WebCore::IDBDatabaseMetadata::findObjectStore):
        (IDBDatabaseMetadata):
        (WebCore::IDBDatabaseMetadata::containsObjectStore):
        * Modules/indexeddb/IDBObjectStore.cpp:
        (WebCore::IDBObjectStore::put):
        (WebCore):
        (WebCore::IDBObjectStore::createIndex):
        (WebCore::IDBObjectStore::index):
        (WebCore::IDBObjectStore::deleteIndex):
        * Modules/indexeddb/IDBObjectStore.h:
        (WebCore::IDBObjectStore::openCursor):
        (IDBObjectStore):
        * Modules/indexeddb/IDBObjectStoreBackendImpl.cpp:
        (WebCore::IDBObjectStoreBackendImpl::put):
        (WebCore::IDBObjectStoreBackendImpl::putWithIndexKeys):
        (WebCore):
        (WebCore::IDBObjectStoreBackendImpl::setIndexKeys):
        (WebCore::IDBObjectStoreBackendImpl::setIndexesReady):
        (WebCore::IDBObjectStoreBackendImpl::index):
        (WebCore::IDBObjectStoreBackendImpl::getIndexId):
        (WebCore::IDBObjectStoreBackendImpl::getIndexIds):
        (WebCore::IDBObjectStoreBackendImpl::deleteIndex):
        * Modules/indexeddb/IDBObjectStoreBackendImpl.h:
        (IDBObjectStoreBackendImpl):
        * Modules/indexeddb/IDBObjectStoreBackendInterface.h:
        * Modules/indexeddb/IDBTransaction.cpp:
        (WebCore::IDBTransaction::objectStore):
        * Modules/indexeddb/IDBTransactionBackendImpl.cpp:
        (WebCore::IDBTransactionBackendImpl::objectStore):
        (WebCore):
        * Modules/indexeddb/IDBTransactionBackendImpl.h:
        (IDBTransactionBackendImpl):
        * Modules/indexeddb/IDBTransactionBackendInterface.h:

2012-11-08  Shinya Kawanaka  <shinyak@chromium.org>

        HTMLContentElement should preserve parsed CSSSelectorList
        https://bugs.webkit.org/show_bug.cgi?id=101543

        Reviewed by Dimitri Glazkov.

        We would like to preserve CSSSelectorList for select attribute of HTMLContentElement.

        Before, we parsed and validated select attribute every time distribution happens. If we preserve the parsed
        CSSSelectorList, we can reduce distribution time.

        This is also a prepration patch for Bug 101180. It also needs the parsed CSSSelectorList. We don't want to
        parse and validate it again.

        No new tests, covered by exising tests.

        * html/shadow/ContentSelectorQuery.cpp:
        (WebCore::ContentSelectorQuery::ContentSelectorQuery): We don't parse select attribute here anymore.
        if it's already parsed.
        (WebCore::ContentSelectorQuery::matches):
        * html/shadow/ContentSelectorQuery.h:
        (ContentSelectorQuery):
        * html/shadow/HTMLContentElement.cpp:
        (WebCore::HTMLContentElement::HTMLContentElement):
        (WebCore::HTMLContentElement::isSelectValid):
        (WebCore::HTMLContentElement::ensureSelectParsed): If we don't have parsed the current select attribute,
        we parse and validate it.
        (WebCore::HTMLContentElement::parseAttribute): When select attribute is changed, we have to have a flag enabled
        to parse select attrite again.
        (WebCore::validateSubSelector): Moved from ContentSelectorQuery.
        (WebCore):
        (WebCore::validateSelector): Moved from ContentSelectorQuery.
        (WebCore::HTMLContentElement::validateSelect):
        * html/shadow/HTMLContentElement.h:
        (HTMLContentElement):
        (WebCore::HTMLContentElement::setSelect):
        (WebCore):
        (WebCore::HTMLContentElement::selectorList):
        * html/shadow/HTMLShadowElement.cpp:
        (WebCore::HTMLShadowElement::emptySelectorList):
        (WebCore):
        * html/shadow/HTMLShadowElement.h:
        (HTMLShadowElement):
        (WebCore::HTMLShadowElement::selectorList):
        * html/shadow/InsertionPoint.h:
        (InsertionPoint):

2012-11-08  Alec Flett  <alecflett@chromium.org>

        IndexedDB: switch frontend to use int64_t-based references
        https://bugs.webkit.org/show_bug.cgi?id=100426

        Reviewed by Tony Chang.

        Remove String-based objectStore/index references, obsoleted by
        https://bugs.webkit.org/show_bug.cgi?id=100425.

        No new tests as this is the second half of a refactor.

        * Modules/indexeddb/IDBCallbacks.h:
        * Modules/indexeddb/IDBDatabase.cpp:
        (WebCore::IDBDatabase::deleteObjectStore):
        (WebCore::IDBDatabase::transaction):
        * Modules/indexeddb/IDBDatabaseBackendImpl.cpp:
        (WebCore::IDBDatabaseBackendImpl::setVersion):
        (WebCore::IDBDatabaseBackendImpl::transaction):
        (WebCore::IDBDatabaseBackendImpl::runIntVersionChangeTransaction):
        * Modules/indexeddb/IDBDatabaseBackendImpl.h:
        (IDBDatabaseBackendImpl):
        * Modules/indexeddb/IDBDatabaseBackendInterface.h:
        (IDBDatabaseBackendInterface):
        * Modules/indexeddb/IDBMetadata.h:
        (WebCore::IDBObjectStoreMetadata::findIndex):
        (IDBObjectStoreMetadata):
        (WebCore::IDBObjectStoreMetadata::containsIndex):
        * Modules/indexeddb/IDBObjectStore.cpp:
        (WebCore::IDBObjectStore::put):
        (WebCore):
        (WebCore::IDBObjectStore::index):
        (WebCore::IDBObjectStore::deleteIndex):
        * Modules/indexeddb/IDBObjectStoreBackendImpl.cpp:
        (WebCore::IDBObjectStoreBackendImpl::put):
        (WebCore):
        * Modules/indexeddb/IDBObjectStoreBackendImpl.h:
        (IDBObjectStoreBackendImpl):
        * Modules/indexeddb/IDBObjectStoreBackendInterface.h:
        * inspector/Inspector-1.0.json:
        * inspector/Inspector.json:
        * inspector/InspectorIndexedDBAgent.cpp:
        (WebCore):
        (WebCore::InspectorIndexedDBAgent::requestData):
        * inspector/InspectorIndexedDBAgent.h:
        (InspectorIndexedDBAgent):

2012-11-08  Kenichi Ishibashi  <bashi@chromium.org>

        [Chromium] Arabic digits should appear left-to-right
        https://bugs.webkit.org/show_bug.cgi?id=101440

        Reviewed by Tony Chang.

        Call hb_buffer_set_direction() to set direction when drawing glyphs or
        direction should be overridden. Leave direction setting to HarfBuzz when
        WebKit is calculating widths because the direction is LTR by default while
        calculating widths.  Set script before shaping so that HarfBuzz can estimate
        appropriate direction.

        Test: fast/text/international/arabic-digits.html

        * platform/graphics/harfbuzz/ng/HarfBuzzShaper.cpp:
        (WebCore::HarfBuzzShaper::HarfBuzzRun::HarfBuzzRun):
        Add m_script. This holds the script of the run.
        (WebCore::HarfBuzzShaper::shape):
        Tell shapeHarfBuzzRuns() to set direction when drawing glyphs or
        direction should be overridden.
        (WebCore::HarfBuzzShaper::collectHarfBuzzRuns):
        Set script of HarfBuzzRuns.
        (WebCore::HarfBuzzShaper::shapeHarfBuzzRuns):
        Add an argument that indicates it should set direction.
        * platform/graphics/harfbuzz/ng/HarfBuzzShaper.h:
        (WebCore::HarfBuzzShaper::HarfBuzzRun::create):
        (WebCore::HarfBuzzShaper::HarfBuzzRun::rtl):
        (WebCore::HarfBuzzShaper::HarfBuzzRun::script):
        (HarfBuzzRun):
        (HarfBuzzShaper):

2012-11-08  Huang Dongsung  <luxtella@company100.net>

        [TexMap] Remove contentsLayer() in GraphicsLayerTextureMapper.
        https://bugs.webkit.org/show_bug.cgi?id=101658

        Reviewed by Noam Rosenthal.

        GraphicsLayerTextureMapper::contentsLayer() is duplicated to
        GraphicsLayer::platformLayer(), so we remove it.

        No new tests, this is just a refactor.

        * platform/graphics/texmap/GraphicsLayerTextureMapper.h:
        (WebCore::GraphicsLayerTextureMapper::platformLayer):
        * platform/graphics/texmap/TextureMapperLayer.cpp:
        (WebCore::TextureMapperLayer::flushCompositingStateSelf):

2012-11-08  Benjamin Poulain  <benjamin@webkit.org>

        Improve the use of AtomicString with literals
        https://bugs.webkit.org/show_bug.cgi?id=101298

        Reviewed by Darin Adler.

        Fix a bunch of cases of AtomicString with literals:
        -Do not create temporary AtomicString to perform a comparison, that is very wasteful.
        -Use the ConstructFromLiteral constructor whenever it makes sense.
        -Make "x-frame-options" static instead of creating it for each response.
        -Use ASCIILiteral() instead of AtomicString() in EventHandler, the function takes a String,
         not an AtomicString.

        * Modules/battery/BatteryController.cpp:
        (WebCore::BatteryController::supplementName):
        * Modules/battery/NavigatorBattery.cpp:
        (WebCore::NavigatorBattery::from):
        * Modules/filesystem/chromium/DraggedIsolatedFileSystem.cpp:
        (WebCore::DraggedIsolatedFileSystem::supplementName):
        * Modules/gamepad/NavigatorGamepad.cpp:
        (WebCore::NavigatorGamepad::from):
        * Modules/geolocation/GeolocationController.cpp:
        (WebCore::GeolocationController::supplementName):
        * Modules/geolocation/NavigatorGeolocation.cpp:
        (WebCore::NavigatorGeolocation::from):
        * Modules/indexeddb/DOMWindowIndexedDatabase.cpp:
        (WebCore::DOMWindowIndexedDatabase::from):
        * Modules/indexeddb/IDBCursor.cpp:
        (WebCore::IDBCursor::directionNext):
        (WebCore::IDBCursor::directionNextUnique):
        (WebCore::IDBCursor::directionPrev):
        (WebCore::IDBCursor::directionPrevUnique):
        * Modules/indexeddb/IDBRequest.cpp:
        (WebCore::IDBRequest::readyState):
        * Modules/indexeddb/IDBTransaction.cpp:
        (WebCore::IDBTransaction::modeReadOnly):
        (WebCore::IDBTransaction::modeReadWrite):
        (WebCore::IDBTransaction::modeVersionChange):
        (WebCore::IDBTransaction::modeReadOnlyLegacy):
        (WebCore::IDBTransaction::modeReadWriteLegacy):
        * Modules/indexeddb/PageGroupIndexedDatabase.cpp:
        (WebCore::PageGroupIndexedDatabase::from):
        * Modules/intents/DOMWindowIntents.cpp:
        (WebCore::DOMWindowIntents::from):
        * Modules/mediastream/UserMediaController.cpp:
        (WebCore::UserMediaController::supplementName):
        * Modules/navigatorcontentutils/NavigatorContentUtils.cpp:
        (WebCore::NavigatorContentUtils::supplementName):
        * Modules/networkinfo/NavigatorNetworkInfoConnection.cpp:
        (WebCore::NavigatorNetworkInfoConnection::from):
        * Modules/networkinfo/NetworkInfoController.cpp:
        (WebCore::NetworkInfoController::supplementName):
        * Modules/notifications/DOMWindowNotifications.cpp:
        (WebCore::DOMWindowNotifications::from):
        * Modules/notifications/NotificationController.cpp:
        (WebCore::NotificationController::supplementName):
        * Modules/quota/DOMWindowQuota.cpp:
        (WebCore::DOMWindowQuota::from):
        * Modules/speech/SpeechRecognitionController.cpp:
        (WebCore::SpeechRecognitionController::supplementName):
        * Modules/vibration/Vibration.cpp:
        (WebCore::Vibration::supplementName):
        * accessibility/AccessibilityObject.cpp:
        (WebCore::AccessibilityObject::invalidStatus):
        * accessibility/AccessibilityRenderObject.cpp:
        (WebCore::AccessibilityRenderObject::ariaLiveRegionStatus):
        (WebCore::AccessibilityRenderObject::ariaLiveRegionRelevant):
        * bindings/v8/custom/V8DOMWindowCustom.cpp:
        (WebCore::V8DOMWindow::namedSecurityCheck):
        * bindings/v8/custom/V8NodeListCustom.cpp:
        (WebCore::V8NodeList::namedPropertyGetter):
        * dom/ContextFeatures.cpp:
        (WebCore::ContextFeatures::supplementName):
        * dom/DeviceMotionController.cpp:
        (WebCore::DeviceMotionController::supplementName):
        * dom/DeviceOrientationController.cpp:
        (WebCore::DeviceOrientationController::supplementName):
        * dom/Element.cpp:
        (WebCore::Element::webkitRegionOverset):
        * dom/MutationRecord.cpp:
        * html/FileInputType.cpp:
        (WebCore::UploadButtonElement::shadowPseudoId):
        * html/FormController.cpp:
        (WebCore::SavedFormState::getReferencedFilePaths):
        (WebCore::FormKeyGenerator::formKey):
        * html/HTMLButtonElement.cpp:
        (WebCore::HTMLButtonElement::formControlType):
        * html/HTMLDetailsElement.cpp:
        (WebCore::summaryQuerySelector):
        * html/HTMLFieldSetElement.cpp:
        (WebCore::HTMLFieldSetElement::formControlType):
        * html/HTMLKeygenElement.cpp:
        (WebCore::KeygenSelectElement::shadowPseudoId):
        (WebCore::HTMLKeygenElement::formControlType):
        * html/HTMLOptGroupElement.cpp:
        (WebCore::HTMLOptGroupElement::formControlType):
        * html/HTMLOutputElement.cpp:
        (WebCore::HTMLOutputElement::formControlType):
        * html/HTMLSelectElement.cpp:
        (WebCore::HTMLSelectElement::formControlType):
        * html/HTMLTextAreaElement.cpp:
        (WebCore::HTMLTextAreaElement::formControlType):
        * html/HTMLTextFormControlElement.cpp:
        (WebCore::directionString):
        * html/shadow/DateTimeEditElement.cpp:
        (WebCore::DateTimeEditElement::DateTimeEditElement):
        * html/shadow/DateTimeFieldElements.cpp:
        (WebCore::DateTimeAMPMFieldElement::create):
        (WebCore::DateTimeDayFieldElement::create):
        (WebCore::DateTimeHourFieldElement::create):
        (WebCore::DateTimeMillisecondFieldElement::create):
        (WebCore::DateTimeMinuteFieldElement::create):
        (WebCore::DateTimeMonthFieldElement::create):
        (WebCore::DateTimeSecondFieldElement::create):
        (WebCore::DateTimeSymbolicMonthFieldElement::create):
        (WebCore::DateTimeWeekFieldElement::create):
        (WebCore::DateTimeYearFieldElement::create):
        * html/shadow/DetailsMarkerControl.cpp:
        (WebCore::DetailsMarkerControl::shadowPseudoId):
        * html/shadow/ImageInnerElement.cpp:
        (WebCore::ImageInnerElement::shadowPseudoId):
        * html/shadow/MediaControlElements.cpp:
        (WebCore::MediaControlPanelElement::shadowPseudoId):
        (WebCore::MediaControlTimelineContainerElement::shadowPseudoId):
        (WebCore::MediaControlVolumeSliderContainerElement::shadowPseudoId):
        (WebCore::MediaControlStatusDisplayElement::shadowPseudoId):
        (WebCore::MediaControlPanelMuteButtonElement::shadowPseudoId):
        (WebCore::MediaControlVolumeSliderMuteButtonElement::shadowPseudoId):
        (WebCore::MediaControlPlayButtonElement::shadowPseudoId):
        (WebCore::MediaControlOverlayPlayButtonElement::shadowPseudoId):
        (WebCore::MediaControlSeekForwardButtonElement::shadowPseudoId):
        (WebCore::MediaControlSeekBackButtonElement::shadowPseudoId):
        (WebCore::MediaControlRewindButtonElement::shadowPseudoId):
        (WebCore::MediaControlReturnToRealtimeButtonElement::shadowPseudoId):
        (WebCore::MediaControlToggleClosedCaptionsButtonElement::shadowPseudoId):
        (WebCore::MediaControlTimelineElement::shadowPseudoId):
        (WebCore::MediaControlVolumeSliderElement::shadowPseudoId):
        (WebCore::MediaControlFullscreenVolumeSliderElement::shadowPseudoId):
        (WebCore::MediaControlFullscreenButtonElement::shadowPseudoId):
        (WebCore::MediaControlFullscreenVolumeMinButtonElement::shadowPseudoId):
        (WebCore::MediaControlFullscreenVolumeMaxButtonElement::shadowPseudoId):
        (WebCore::MediaControlTimeRemainingDisplayElement::shadowPseudoId):
        (WebCore::MediaControlCurrentTimeDisplayElement::shadowPseudoId):
        (WebCore::MediaControlTextTrackContainerElement::shadowPseudoId):
        * html/shadow/MediaControlRootElement.cpp:
        (WebCore::MediaControlRootElement::shadowPseudoId):
        * html/shadow/MediaControlRootElementChromium.cpp:
        (WebCore::MediaControlPanelEnclosureElement::shadowPseudoId):
        (WebCore::MediaControlRootElementChromium::shadowPseudoId):
        * html/shadow/MediaControlRootElementChromiumAndroid.cpp:
        (WebCore::MediaControlOverlayEnclosureElement::shadowPseudoId):
        * html/shadow/MeterShadowElement.cpp:
        (WebCore::MeterInnerElement::shadowPseudoId):
        (WebCore::MeterBarElement::shadowPseudoId):
        (WebCore::MeterValueElement::shadowPseudoId):
        * html/shadow/ProgressShadowElement.cpp:
        (WebCore::ProgressInnerElement::shadowPseudoId):
        (WebCore::ProgressBarElement::shadowPseudoId):
        (WebCore::ProgressValueElement::shadowPseudoId):
        * html/shadow/SliderThumbElement.cpp:
        (WebCore::sliderThumbShadowPseudoId):
        (WebCore::mediaSliderThumbShadowPseudoId):
        (WebCore::SliderContainerElement::shadowPseudoId):
        * html/shadow/SpinButtonElement.cpp:
        (WebCore::SpinButtonElement::shadowPseudoId):
        * html/shadow/TextControlInnerElements.cpp:
        (WebCore::SearchFieldResultsButtonElement::shadowPseudoId):
        (WebCore::SearchFieldCancelButtonElement::shadowPseudoId):
        (WebCore::InputFieldSpeechButtonElement::shadowPseudoId):
        * html/track/TextTrackCue.cpp:
        (WebCore::TextTrackCueBox::textTrackCueBoxShadowPseudoId):
        * loader/CrossOriginAccessControl.cpp:
        (WebCore::passesAccessControlCheck):
        * loader/MainResourceLoader.cpp:
        (WebCore::MainResourceLoader::didReceiveResponse):
        * loader/PrerendererClient.cpp:
        (WebCore::PrerendererClient::supplementName):
        * loader/cache/CachedResource.cpp:
        (WebCore::CachedResource::updateResponseAfterRevalidation):
        * page/DOMWindowPagePopup.cpp:
        (WebCore::DOMWindowPagePopup::supplementName):
        * page/EventHandler.cpp:
        (WebCore::EventHandler::handlePasteGlobalSelection):
        (WebCore::focusDirectionForKey):
        * page/SpeechInput.cpp:
        (WebCore::SpeechInput::supplementName):
        * page/animation/CompositeAnimation.cpp:
        (WebCore::CompositeAnimation::updateKeyframeAnimations):
        * platform/graphics/FontCache.cpp:
        (WebCore::alternateFamilyName):
        * platform/graphics/MediaPlayer.cpp:
        (WebCore::applicationOctetStream):
        (WebCore::textPlain):
        (WebCore::codecs):
        * platform/graphics/chromium/FontCacheAndroid.cpp:
        (WebCore::FontCache::getLastResortFallbackFont):
        * platform/graphics/filters/SourceAlpha.cpp:
        (WebCore::SourceAlpha::effectName):
        * platform/graphics/filters/SourceGraphic.cpp:
        (WebCore::SourceGraphic::effectName):
        * platform/graphics/mac/FontCacheMac.mm:
        (WebCore::FontCache::getSimilarFontPlatformData):
        (WebCore::FontCache::getLastResortFallbackFont):
        * platform/graphics/skia/FontCacheSkia.cpp:
        (WebCore::FontCache::getLastResortFallbackFont):
        * platform/graphics/win/FontCacheWin.cpp:
        (WebCore::FontCache::getLastResortFallbackFont):
        * platform/graphics/wx/FontCacheWx.cpp:
        (WebCore::FontCache::getSimilarFontPlatformData):
        * platform/network/ResourceResponseBase.cpp:
        (WebCore::ResourceResponseBase::setHTTPHeaderField):
        (WebCore::ResourceResponseBase::parseCacheControlDirectives):
        (WebCore::ResourceResponseBase::hasCacheValidatorFields):
        (WebCore::ResourceResponseBase::date):
        (WebCore::ResourceResponseBase::age):
        (WebCore::ResourceResponseBase::expires):
        (WebCore::ResourceResponseBase::lastModified):
        (WebCore::ResourceResponseBase::isAttachment):
        * rendering/RenderTextControlMultiLine.cpp:
        (WebCore::RenderTextControlMultiLine::getAvgCharWidth):
        * rendering/RenderTextControlSingleLine.cpp:
        (WebCore::RenderTextControlSingleLine::getAvgCharWidth):
        (WebCore::RenderTextControlSingleLine::preferredContentWidth):
        * svg/SVGAnimateColorElement.cpp:
        (WebCore::attributeValueIsCurrentColor):
        * svg/SVGAnimateMotionElement.cpp:
        (WebCore::SVGAnimateMotionElement::rotateMode):
        * svg/SVGAnimationElement.cpp:
        (WebCore::SVGAnimationElement::setCalcMode):
        (WebCore::SVGAnimationElement::setAttributeType):
        (WebCore::SVGAnimationElement::isAdditive):
        (WebCore::SVGAnimationElement::isAccumulated):
        (WebCore::inheritsFromProperty):
        * svg/SVGFEConvolveMatrixElement.cpp:
        (WebCore::SVGFEConvolveMatrixElement::kernelUnitLengthXIdentifier):
        (WebCore::SVGFEConvolveMatrixElement::kernelUnitLengthYIdentifier):
        (WebCore::SVGFEConvolveMatrixElement::orderXIdentifier):
        (WebCore::SVGFEConvolveMatrixElement::orderYIdentifier):
        * svg/SVGFEDiffuseLightingElement.cpp:
        (WebCore::SVGFEDiffuseLightingElement::kernelUnitLengthXIdentifier):
        (WebCore::SVGFEDiffuseLightingElement::kernelUnitLengthYIdentifier):
        * svg/SVGFEDropShadowElement.cpp:
        (WebCore::SVGFEDropShadowElement::stdDeviationXIdentifier):
        (WebCore::SVGFEDropShadowElement::stdDeviationYIdentifier):
        * svg/SVGFEGaussianBlurElement.cpp:
        (WebCore::SVGFEGaussianBlurElement::stdDeviationXIdentifier):
        (WebCore::SVGFEGaussianBlurElement::stdDeviationYIdentifier):
        * svg/SVGFEMorphologyElement.cpp:
        (WebCore::SVGFEMorphologyElement::radiusXIdentifier):
        (WebCore::SVGFEMorphologyElement::radiusYIdentifier):
        * svg/SVGFESpecularLightingElement.cpp:
        (WebCore::SVGFESpecularLightingElement::kernelUnitLengthXIdentifier):
        (WebCore::SVGFESpecularLightingElement::kernelUnitLengthYIdentifier):
        * svg/SVGFETurbulenceElement.cpp:
        (WebCore::SVGFETurbulenceElement::baseFrequencyXIdentifier):
        (WebCore::SVGFETurbulenceElement::baseFrequencyYIdentifier):
        * svg/SVGFilterElement.cpp:
        (WebCore::SVGFilterElement::filterResXIdentifier):
        (WebCore::SVGFilterElement::filterResYIdentifier):
        * svg/SVGLangSpace.cpp:
        (WebCore::SVGLangSpace::xmlspace):
        (WebCore::SVGLangSpace::addSupportedAttributes):
        * svg/SVGMarkerElement.cpp:
        (WebCore::SVGMarkerElement::orientTypeIdentifier):
        (WebCore::SVGMarkerElement::orientAngleIdentifier):
        (WebCore::SVGMarkerElement::synchronizeOrientType):
        * svg/SVGSVGElement.cpp:
        (WebCore::SVGSVGElement::contentScriptType):
        (WebCore::SVGSVGElement::contentStyleType):
        * svg/SVGStyleElement.cpp:
        (WebCore::SVGStyleElement::type):
        (WebCore::SVGStyleElement::media):
        * svg/SVGTextContentElement.cpp:
        (WebCore::SVGTextContentElement::collectStyleForAttribute):
        * svg/SVGViewSpec.cpp:
        (WebCore::SVGViewSpec::viewBoxIdentifier):
        (WebCore::SVGViewSpec::preserveAspectRatioIdentifier):
        (WebCore::SVGViewSpec::transformIdentifier):
        * svg/animation/SVGSMILElement.cpp:
        (WebCore::SVGSMILElement::parseClockValue):
        (WebCore::SVGSMILElement::restart):
        (WebCore::SVGSMILElement::fill):
        (WebCore::SVGSMILElement::repeatCount):
        * testing/InternalSettings.cpp:
        (WebCore::InternalSettings::from):
        * xml/parser/XMLTreeBuilder.cpp:
        (WebCore::XMLTreeBuilder::processDOCTYPE):
        (WebCore::XMLTreeBuilder::processXMLEntity):

2012-11-08  Beth Dakin  <bdakin@apple.com>

        https://bugs.webkit.org/show_bug.cgi?id=101644
        Fixed header on Facebook news feed becomes detached from top of 
        viewport after rubber band scrolling
        -and corresponding-
        <rdar://problem/12651944>

        Reviewed by Simon Fraser.

        There is code to handle this for non-threaded scrolling on FrameView. 
        This patch moves most of that code into a convenience function on 
        ScrollingCoordinator.

        Have FrameView::scrollOffsetForFixedPosition() call 
        WebCore::scrollOffsetForFixedPosition() with all the right 
        parameters.
        * page/FrameView.cpp:
        (WebCore::FrameView::scrollOffsetForFixedPosition):

        Here's where all the math happens.
        * page/scrolling/ScrollingCoordinator.cpp:
        (WebCore::fixedPositionScrollOffset):
        (WebCore::scrollOffsetForFixedPosition):

        The viewportRect in these three places needs to have the 
        adjusted-for-fixed offset.
        (WebCore::ScrollingCoordinator::updateMainFrameScrollPosition):
        * page/scrolling/mac/ScrollingTreeScrollingNodeMac.mm:
        (WebCore::ScrollingTreeScrollingNodeMac::setScrollLayerPosition):
        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::computeFixedViewportConstraints):

2012-11-08  Alpha Lam  <hclam@chromium.org>

        [chromium] Deferred image decoding fails with image orientation
        https://bugs.webkit.org/show_bug.cgi?id=101648

        Reviewed by Stephen White.

        When an image is deferred save the orientation state. Once this state
        is cached it can be used to reply future queries since this state is
        static.

        No new tests but platform/chromium/virtual/deferred/fast/images/image-orientation.html is passing now.

        * platform/graphics/chromium/DeferredImageDecoder.cpp:
        (WebCore::DeferredImageDecoder::DeferredImageDecoder):
        (WebCore::DeferredImageDecoder::frameBufferAtIndex):
        (WebCore::DeferredImageDecoder::orientation):
        * platform/graphics/chromium/DeferredImageDecoder.h:
        (DeferredImageDecoder):

2012-11-08  Andreas Kling  <kling@webkit.org>

        DocumentLoader: Shrink-to-fit the ResourceResponse vector after loading completes.
        <http://webkit.org/b/101657>

        Reviewed by Anders Carlsson.

        Shrink DocumentLoader::m_responses to exact size when we stop adding responses to it,
        as we know it won't grow after that.

        520kB progression on Membuster3.

        * loader/DocumentLoader.cpp:
        (WebCore::DocumentLoader::stopRecordingResponses):

2012-11-08  Hans Muller  <hmuller@adobe.com>

        [CSS Exclusions] Polygon with horizontal bottom edges returns incorrect segments
        https://bugs.webkit.org/show_bug.cgi?id=100874

        Reviewed by Dirk Schulze.

        Revised the way that computeXIntersections() handles intersections with horizotal polygon edges.
        Deciding if a vertex intersection corresponds to a polygon "edge crossing", i.e. a change from inside
        to outside or outside to inside, now depends on which side of the horizontal line the function's
        y parameter corresponds to. If the y corresponds to the top of the line, then isaMinY the parameter
        is true, and an intersection with a horizontal edge is only considered to be an edge crossing if
        if the inside of the polygon is just below the horizontal edge.  When isMinY is false then the inside
        of the polygon must be just above the horizontal edge.

        Tests: fast/exclusions/shape-inside/shape-inside-rectilinear-polygon-003.html
               fast/exclusions/shape-inside/shape-inside-rectilinear-polygon-004.html

        * rendering/ExclusionPolygon.cpp:
        (WebCore::getVertexIntersectionVertices): Corrected two cases where the next/previous vertex was determined incorrectly.
        (WebCore::ExclusionPolygon::computeXIntersections): Added a bool isMinY parameter which specifies if the y parameter corresponds to the top or bottom a horizontal line.
        (WebCore::ExclusionPolygon::getExcludedIntervals): Added the new computeXIntersections() parameter.
        (WebCore::ExclusionPolygon::getIncludedIntervals): Ditto.
        * rendering/ExclusionPolygon.h:
        (WebCore::ExclusionPolygonEdge::previousEdge): Corrected the previousEdge() function.

2012-11-08  Otto Derek Cheung  <otcheung@rim.com>

        [BlackBerry] Disable cookies on file://
        https://bugs.webkit.org/show_bug.cgi?id=101646

        Reviewed by Rob Buis.

        Disabling cookies on file and local in the browser app.

        PR 239779

        Tested by trying to set and retrieve cookies on WI while browsing
        files on the file scheme.

        * platform/blackberry/CookieManager.cpp:
        (WebCore):
        (WebCore::shouldIgnoreScheme):
        (WebCore::CookieManager::getRawCookies):
        (WebCore::CookieManager::checkAndTreatCookie):

2012-11-08  Joshua Bell  <jsbell@chromium.org>

        Expose snapshots in platform/leveldb wrapper API
        https://bugs.webkit.org/show_bug.cgi?id=100786

        Reviewed by Tony Chang.

        Expose leveldb "snapshots" in the LevelDB API. A snapshot lets you observe the database
        as it was when the snapshot was taken. This can be used to implement parallel transactions,
        e.g. where a read transaction won't see updates made by a later write transaction.

        Tests: webkit_unit_tests --gtest_filter='LevelDBDatabaseTest.Transaction*'

        * platform/leveldb/LevelDBDatabase.cpp:
        (WebCore::LevelDBSnapshot::LevelDBSnapshot): New (but for now internal-only) wrapper type.
        (WebCore):
        (WebCore::LevelDBSnapshot::~LevelDBSnapshot): Release the leveldb::Snapshot.
        (WebCore::LevelDBDatabase::get): Optional snapshot argument, for use by transactions.
        (WebCore::LevelDBDatabase::createIterator): Ditto.
        * platform/leveldb/LevelDBDatabase.h:
        (leveldb):
        (WebCore):
        (LevelDBSnapshot):
        (LevelDBDatabase):
        * platform/leveldb/LevelDBTransaction.cpp:
        (WebCore::LevelDBTransaction::LevelDBTransaction): Initialize a snapshot.
        (WebCore::LevelDBTransaction::get):
        (WebCore::LevelDBTransaction::TransactionIterator::TransactionIterator):
        * platform/leveldb/LevelDBTransaction.h:
        (LevelDBTransaction):

2012-11-08  Brady Eidson  <beidson@apple.com>

        Have NetworkProcess do the actual loading of subresources.
        https://bugs.webkit.org/show_bug.cgi?id=101640

        Reviewed by Alexey Proskuryakov.

        No new tests (No change in behavior in any configuration we test.)

        * WebCore.exp.in:
        * loader/ResourceBuffer.h: Virtualize a few methods for ports to override.

2012-11-08  Huang Dongsung  <luxtella@company100.net>

        Coordinated Graphics: Remove an invisible TiledBackingStore of CoordinatedGraphicsLayer.
        https://bugs.webkit.org/show_bug.cgi?id=101424

        Reviewed by Noam Rosenthal.

        This patch adds ASSERT to TextureMapperLayer while fixing this bug in
        WebKit2.

        * platform/graphics/texmap/TextureMapperLayer.cpp:
        (WebCore::TextureMapperLayer::paintSelf):

2012-11-08  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r133945.
        http://trac.webkit.org/changeset/133945
        https://bugs.webkit.org/show_bug.cgi?id=101645

        Numerous layout and unit test failures (Requested by
        jsbell|gardener on #webkit).

        * bindings/scripts/CodeGeneratorV8.pm:
        (GenerateHeader):
        * bindings/scripts/test/V8/V8Float64Array.h:
        (WebCore::V8Float64Array::toNative):
        * bindings/scripts/test/V8/V8TestActiveDOMObject.h:
        (WebCore::V8TestActiveDOMObject::toNative):
        * bindings/scripts/test/V8/V8TestCustomNamedGetter.h:
        (WebCore::V8TestCustomNamedGetter::toNative):
        * bindings/scripts/test/V8/V8TestEventConstructor.h:
        (WebCore::V8TestEventConstructor::toNative):
        * bindings/scripts/test/V8/V8TestEventTarget.h:
        (WebCore::V8TestEventTarget::toNative):
        * bindings/scripts/test/V8/V8TestException.h:
        (WebCore::V8TestException::toNative):
        * bindings/scripts/test/V8/V8TestInterface.h:
        (WebCore::V8TestInterface::toNative):
        * bindings/scripts/test/V8/V8TestMediaQueryListListener.h:
        (WebCore::V8TestMediaQueryListListener::toNative):
        * bindings/scripts/test/V8/V8TestNamedConstructor.h:
        (WebCore::V8TestNamedConstructor::toNative):
        * bindings/scripts/test/V8/V8TestNode.h:
        (WebCore::V8TestNode::toNative):
        * bindings/scripts/test/V8/V8TestObj.h:
        (WebCore::V8TestObj::toNative):
        * bindings/scripts/test/V8/V8TestSerializedScriptValueInterface.h:
        (WebCore::V8TestSerializedScriptValueInterface::toNative):
        * bindings/v8/NPV8Object.cpp:
        (WebCore::v8ObjectToNPObject):
        (WebCore::npCreateV8ScriptObject):
        * bindings/v8/V8Collection.h:
        (WebCore::toNativeCollection):
        * bindings/v8/V8DOMWindowShell.cpp:
        (WebCore::setIsolatedWorldField):
        (WebCore::V8DOMWindowShell::enteredIsolatedWorldContext):
        * bindings/v8/V8DOMWrapper.cpp:
        (WebCore::V8DOMWrapper::isWrapperOfType):
        * bindings/v8/V8DOMWrapper.h:
        (WebCore::V8DOMWrapper::setDOMWrapper):
        (WebCore::V8DOMWrapper::clearDOMWrapper):
        * bindings/v8/WrapperTypeInfo.h:
        (WebCore::toNative):
        (WebCore::toWrapperTypeInfo):

2012-11-01  Filip Pizlo  <fpizlo@apple.com>

        JSC should infer when indexed storage contains only integers or doubles
        https://bugs.webkit.org/show_bug.cgi?id=98606

        Reviewed by Oliver Hunt.

        Just refactoring WebCore to pass 0 for the ArrayAllocationProfile*.

        * bindings/js/JSCanvasRenderingContext2DCustom.cpp:
        (WebCore::JSCanvasRenderingContext2D::webkitLineDash):
        * bindings/js/JSClipboardCustom.cpp:
        (WebCore::JSClipboard::types):
        * bindings/js/JSDOMBinding.cpp:
        (WebCore::jsArray):
        * bindings/js/JSDOMBinding.h:
        (WebCore::jsArray):
        * bindings/js/JSInjectedScriptHostCustom.cpp:
        (WebCore::getJSListenerFunctions):
        * bindings/js/JSJavaScriptCallFrameCustom.cpp:
        (WebCore::JSJavaScriptCallFrame::scopeChain):
        * bindings/js/JSMessageEventCustom.cpp:
        (WebCore::JSMessageEvent::ports):
        * bindings/js/JSMutationCallbackCustom.cpp:
        (WebCore::JSMutationCallback::handleEvent):
        * bindings/js/JSWebGLRenderingContextCustom.cpp:
        (WebCore::toJS):
        (WebCore::JSWebGLRenderingContext::getAttachedShaders):
        (WebCore::JSWebGLRenderingContext::getSupportedExtensions):
        * bindings/js/SerializedScriptValue.cpp:
        (WebCore::CloneDeserializer::deserialize):

2012-11-08  Tiancheng Jiang  <tijiang@rim.com>

        [BlackBerry] Update BB10 date input form.
        https://bugs.webkit.org/show_bug.cgi?id=101075

        Reviewed by Rob Buis.

        RIM PR 234531
        Internally Reviewed by Mike Fenton.
        Change date input appearance to button and hide caret when click on them.

        * css/themeBlackBerry.css:
        (input[type="date"], input[type="datetime"], input[type="datetime-local"], input[type="time"], input[type="month"]):

2012-11-08  Adam Barth  <abarth@webkit.org>

        [V8] Update callers to use the aligned pointer API rather than the deprecated unaligned pointer API
        https://bugs.webkit.org/show_bug.cgi?id=101519

        Reviewed by Ojan Vafai.

        There should be no change in behavior.  The new API is slightly faster
        than the old API (and apparently works correctly internally in V8).

        * bindings/scripts/CodeGeneratorV8.pm:
        (GenerateHeader):
        * bindings/scripts/test/V8/V8Float64Array.h:
        (WebCore::V8Float64Array::toNative):
        * bindings/scripts/test/V8/V8TestActiveDOMObject.h:
        (WebCore::V8TestActiveDOMObject::toNative):
        * bindings/scripts/test/V8/V8TestCustomNamedGetter.h:
        (WebCore::V8TestCustomNamedGetter::toNative):
        * bindings/scripts/test/V8/V8TestEventConstructor.h:
        (WebCore::V8TestEventConstructor::toNative):
        * bindings/scripts/test/V8/V8TestEventTarget.h:
        (WebCore::V8TestEventTarget::toNative):
        * bindings/scripts/test/V8/V8TestException.h:
        (WebCore::V8TestException::toNative):
        * bindings/scripts/test/V8/V8TestInterface.h:
        (WebCore::V8TestInterface::toNative):
        * bindings/scripts/test/V8/V8TestMediaQueryListListener.h:
        (WebCore::V8TestMediaQueryListListener::toNative):
        * bindings/scripts/test/V8/V8TestNamedConstructor.h:
        (WebCore::V8TestNamedConstructor::toNative):
        * bindings/scripts/test/V8/V8TestNode.h:
        (WebCore::V8TestNode::toNative):
        * bindings/scripts/test/V8/V8TestObj.h:
        (WebCore::V8TestObj::toNative):
        * bindings/scripts/test/V8/V8TestSerializedScriptValueInterface.h:
        (WebCore::V8TestSerializedScriptValueInterface::toNative):
        * bindings/v8/NPV8Object.cpp:
        (WebCore::v8ObjectToNPObject):
        (WebCore::npCreateV8ScriptObject):
        * bindings/v8/V8Collection.h:
        (WebCore::toNativeCollection):
        * bindings/v8/V8DOMWindowShell.cpp:
        (WebCore::setIsolatedWorldField):
        (WebCore::V8DOMWindowShell::enteredIsolatedWorldContext):
        * bindings/v8/V8DOMWrapper.cpp:
        (WebCore::V8DOMWrapper::isWrapperOfType):
        * bindings/v8/V8DOMWrapper.h:
        (WebCore::V8DOMWrapper::setDOMWrapper):
        (WebCore::V8DOMWrapper::clearDOMWrapper):
        * bindings/v8/WrapperTypeInfo.h:
        (WebCore::toNative):
        (WebCore::toWrapperTypeInfo):

2012-11-08  Erik Arvidsson  <arv@chromium.org>

        setAttributeNode and friends should not have optional argument
        https://bugs.webkit.org/show_bug.cgi?id=101631

        Reviewed by Ojan Vafai.

        http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-887236154

        Fix getAttributeNode, getAttributeNodeNS and removeAttributeNode to make the Attr
        argument mandatory.

        These used to throw DOMExceptions when an invalid type was passed instead of
        TypeError which is also a spec violation.

        Updated existing tests.

        * bindings/scripts/CodeGeneratorV8.pm:
        * dom/Element.cpp:
        * dom/Element.idl:

2012-11-08  Joshua Bell  <jsbell@chromium.org>

        IndexedDB: Remove unused error handling clauses when writing to transaction
        https://bugs.webkit.org/show_bug.cgi?id=100700

        Reviewed by Tony Chang.

        Transactions are written into in-memory data structures. This can only fail if allocation
        fails, so "success" results are always returned. Change the return types to void, and delete
        all of the unreachable error handling code.

        No new tests - just refactoring/dead code removal.

        * Modules/indexeddb/IDBLevelDBBackingStore.cpp:
        (WebCore::putBool): Only write to transactions.
        (WebCore):
        (WebCore::putInt): Ditto.
        (WebCore::putVarInt): Ditto.
        (WebCore::putString): Ditto.
        (WebCore::putIDBKeyPath): Ditto.
        (WebCore::IDBLevelDBBackingStore::updateIDBDatabaseIntVersion):
        (WebCore::IDBLevelDBBackingStore::updateIDBDatabaseMetaData):
        (WebCore::deleteRange): Writes only to transaction, so can't fail.
        (WebCore::setMaxObjectStoreId):
        (WebCore::IDBLevelDBBackingStore::createObjectStore):
        (WebCore::getNewVersionNumber):
        (WebCore::IDBLevelDBBackingStore::putObjectStoreRecord):
        (WebCore::IDBLevelDBBackingStore::maybeUpdateKeyGeneratorCurrentNumber):
        (WebCore::setMaxIndexId):
        (WebCore::IDBLevelDBBackingStore::createIndex):
        (WebCore::IDBLevelDBBackingStore::putIndexDataForRecord):
        * platform/leveldb/LevelDBTransaction.cpp:
        (WebCore::LevelDBTransaction::set): Return type is void.
        (WebCore::LevelDBTransaction::put): Ditto.
        (WebCore::LevelDBTransaction::remove): Ditto.
        * platform/leveldb/LevelDBTransaction.h:
        (LevelDBTransaction):

2012-11-08  Ryosuke Niwa  <rniwa@webkit.org>

        On Chromium, click-after-nested-block.html, focus_editable_html.html, and autoscroll.html
        hit assertion added in r133840
        https://bugs.webkit.org/show_bug.cgi?id=101576

        Reviewed by Abhishek Arya.

        Update layout before invalidating caret rect as needed.
        Existing tests cover this.

        * editing/FrameSelection.cpp:
        (WebCore::FrameSelection::setCaretVisibility): Merged clearCaretRectIfNeeded.
        * editing/FrameSelection.h:

2012-11-08  Elliott Sprehn  <esprehn@chromium.org>

        Skip frame owner disconnect when there's no frames
        https://bugs.webkit.org/show_bug.cgi?id=101619

        Reviewed by Ojan Vafai.

        Even when there's no subframes in the document we traverse down every
        subtree on Node removal looking for frames to disconnect. This patch
        checks document()->frame()->tree()->firstChild() to skip this traversal
        if there's no subframes.

        No new tests, this just short circuits code for speed.

        * dom/ContainerNodeAlgorithms.h:
        (WebCore::ChildFrameDisconnector::ChildFrameDisconnector):

2012-11-08  Erik Arvidsson  <arv@chromium.org>

        Wrong error type is thrown for type errors in callbacks
        https://bugs.webkit.org/show_bug.cgi?id=101502

        Reviewed by Adam Barth.

        We should be throwing a TypeError and not a DOMException with code TYPE_MISMATCH_ERR.

        http://www.w3.org/TR/WebIDL/#es-callback-function

        Updated existing tests.

        * bindings/scripts/CodeGeneratorJS.pm:
        * bindings/scripts/CodeGeneratorV8.pm:
        * bindings/scripts/test/JS/JSTestObj.cpp:
        * bindings/scripts/test/V8/V8TestObj.cpp:

2012-11-08  Andreas Kling  <kling@webkit.org>

        4.68MB below RenderStyle::filter() on Membuster3.
        <http://webkit.org/b/101624>
        <rdar://problem/12663822>

        Reviewed by Darin Adler.

        Rename the non-const RenderStyle::filter() to mutableFilter() since using it causes us to detach
        from the rare non-inherited data (copy-on-write.)
        Most call sites were calling filter() on a RenderStyle* which was causing the bloat.

        4.68MB progression on Membuster3.

        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::loadPendingSVGDocuments):
        (WebCore::StyleResolver::loadPendingShaders):
        * rendering/style/RenderStyle.h:

2012-11-08  Alexey Proskuryakov  <ap@apple.com>

        Create loader/blackberry directory, because svn-apply cannot apply a patch that
        creates a directory and moves a file into it.

        * loader/blackberry: Added.

2012-11-08  Geoffrey Garen  <ggaren@apple.com>

        Mac build fix: Mark WidthCache.h 'private' so WebKit can use it.

        Not reviewed.

        * WebCore.xcodeproj/project.pbxproj:

2012-11-05  Geoffrey Garen  <ggaren@apple.com>

        Optimized kerning and ligatures using caching
        https://bugs.webkit.org/show_bug.cgi?id=101269

        Reviewed by Dan Bernstein.

        Consider three kinds of text layout, and the value of caching for each:

            (1) 1 layout of 100% unique words: small negative value.

            (2) 1 layout of English prose: medium positive value.

            (3) Many layouts of anything: extra-extra-large positive value.

        Since we can't distinguish betwen these workflows a priori, we use statistical
        sampling. To minimize cost in (1) and maximize benefit in (2) and (3), we treat
        each cache access as a statistical sample, and use the cache in proportion to
        the observed probability of duplicate text measurement.

        Benchmark results:
            plt3: 1% faster
            chapter-reflow-once-random: No change [*]
            chapter-reflow-once: 23% faster
            chapter-reflow-twice: 52% faster
            chapter-reflow-thrice: 68% faster
            chapter-reflow: 263% faster
            line-layout: 270% faster

            [*] This is a stress test designed to make everything go wrong for
            caching. It does not represent real world content.

        * GNUmakefile.list.am:
        * Target.pri:
        * WebCore.vcproj/WebCore.vcproj:
        * WebCore.xcodeproj/project.pbxproj:
        * platform/graphics/WidthCache.h: Added.

        (WidthCache): Added a class that caches common word widths. This cache
        could cache more things or more cases in future -- but for now it seems
        to cover the common cases.

        (SmallStringKey): Early profiling showed that allocating an AtomicString
        or String measurably added to the cost of the cache, so I added a custom
        string key that can be stored directly inside the table by value --
        empirically answering an age-old question with which Apple WebKit engineers
        seem to be obsessed.

        (WebCore::WidthCache::SmallStringKey::capacity):
        (WebCore::WidthCache::SmallStringKey::SmallStringKey):
        (WebCore::WidthCache::SmallStringKey::characters):
        (WebCore::WidthCache::SmallStringKey::length):
        (WebCore::WidthCache::SmallStringKey::hash):
        (WebCore::WidthCache::SmallStringKey::isHashTableDeletedValue):
        (WebCore::WidthCache::SmallStringKey::isHashTableEmptyValue):
        (WebCore::WidthCache::SmallStringKeyHash::hash):
        (WebCore::WidthCache::SmallStringKeyHash::equal):
        (SmallStringKeyHash):
        (SmallStringKeyHashTraits):
        (WebCore::WidthCache::SmallStringKeyHashTraits::isEmptyValue): Ditto.

        (WebCore::WidthCache::WidthCache):
        (WebCore::WidthCache::add): Separate out the "don't use the cache" case
        so the compiler can inline it separate, hopefully further reducing cases
        of (1).

        (WebCore::WidthCache::addSlowCase): There's a little subtlety to the
        sampling policy here. Lots of different approaches are possible, and I
        just picked a simple one that seemed to work based on benchmarking. I'll
        point out some interesting sublteties I'm aware of here:

            (*) Since we start at the min sampling rate, a font used for 20 words
            or fewer never allocates a cache. Anecdotally, some fonts seem to
            be used this way.

            (*) When the sampling rate is x / y, sampling all x words in a row
            seems smart because some words may occur more commonly in relation to
            each other (such as 'each' and 'other'), and repeat workloads will
            lay out the same words in order. Intuitively, these are both reasons
            this policy may ramp up more effectively under load.

            (*) I opted for linear back-off instead of, say, exponential back-off
            because we're not trying to back off to infinity -- just to our min
            sampling rate. Since we don't expect the cache to hit for every word,
            my guess is that exponential back-off would be too aggressive.

            (*) Our "eviction" policy has an IQ of 1. I expect this is sufficient
            because it would be surprising to see a million unique words all used
            in the same document. (I would not like to play a Letterpress game
            against such a document.)

        (WebCore::WidthCache::clear): Needed because a font can change, in which
        case we need to ditch its cache.

        (WebCore::operator==): Needed for hashing.

2012-11-08  Andrey Kosyakov  <caseq@chromium.org>

        Web Inspector: show statistics over selected frame range in Timeline's Frame mode
        https://bugs.webkit.org/show_bug.cgi?id=101593

        Reviewed by Pavel Feldman.

        - change status bar records counter wording to "N of M frames|records shown" depending on mode;
        - append average frame length and & stddev in frame mode;
        - expand the above to a popover that includes frame count, range duration and min/avg/max/stddev on frame length;
        - show frame bars & dividers iff selection range includes < 30 frames (drive-by)

        * English.lproj/localizedStrings.js:
        * inspector/front-end/TimelineFrameController.js:
        (WebInspector.FrameStatistics):
        * inspector/front-end/TimelineModel.js:
        (WebInspector.TimelineModel.aggregateTimeByCategory):
        * inspector/front-end/TimelinePanel.js:
        (WebInspector.TimelinePanel.prototype.get statusBarItems):
        (WebInspector.TimelinePanel.prototype._createStatusBarItems.getAnchor):
        (WebInspector.TimelinePanel.prototype._createStatusBarItems):
        (WebInspector.TimelinePanel.prototype._updateRecordsCounter):
        (WebInspector.TimelinePanel.prototype._updateFrameStatistics):
        (WebInspector.TimelinePanel.prototype._showFrameStatistics):
        (WebInspector.TimelinePanel.prototype._updateFrameBars):
        (WebInspector.TimelinePanel.prototype._overviewModeChanged.set if):
        (WebInspector.TimelinePanel.prototype._overviewModeChanged):
        (WebInspector.TimelinePanel.prototype._refresh):
        * inspector/front-end/TimelinePresentationModel.js:
        (WebInspector.TimelinePresentationModel.prototype.):
        (WebInspector.TimelinePresentationModel.prototype.compareEndTime):
        (WebInspector.TimelinePresentationModel.prototype.filteredFrames):
        (WebInspector.TimelinePresentationModel.generatePopupContentForFrameStatistics):
        * inspector/front-end/timelinePanel.css:
        (.timeline-records-stats, .storage-application-cache-status, .storage-application-cache-connectivity):
        (.timeline-records-stats):
        (.timeline-frames-stats):

2012-11-08  Jakob Petsovits  <jpetsovits@rim.com>

        [BlackBerry] Rework the API to use document coordinates
        https://bugs.webkit.org/show_bug.cgi?id=101608
        RIM PR 173292

        Reviewed by Adam Treat.

        Provide a better API for WebPage to relay.
        See Source/WebKit/blackberry/ChangeLog for details.

        * platform/graphics/blackberry/MediaPlayerPrivateBlackBerry.cpp:
        (WebCore::MediaPlayerPrivate::getWindowScreenRect):
        * platform/graphics/blackberry/MediaPlayerPrivateBlackBerry.h:
        (Platform):
        (BlackBerry):
        (MediaPlayerPrivate):

2012-11-08  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r133892.
        http://trac.webkit.org/changeset/133892
        https://bugs.webkit.org/show_bug.cgi?id=101617

        Compile failures on mac, android, linux (Requested by
        jsbell|gardener on #webkit).

        * bindings/v8/DOMDataStore.cpp:
        (WebCore::DOMDataStore::current):
        * bindings/v8/DOMWrapperWorld.h:
        (WebCore::DOMWrapperWorld::domDataStore):
        (WebCore::DOMWrapperWorld::DOMWrapperWorld):
        * bindings/v8/V8DOMWrapper.h:
        (WebCore::V8DOMWrapper::getCachedWrapper):

2012-11-08  Andrey Adaikin  <aandrey@chromium.org>

        Web Inspector: [Canvas] UI iterations: image on the top, auto replay
        https://bugs.webkit.org/show_bug.cgi?id=101584

        Reviewed by Pavel Feldman.

        * inspector/front-end/CanvasProfileView.js:
        (WebInspector.CanvasProfileView):
        (WebInspector.CanvasProfileView.prototype._showTraceLog):
        (WebInspector.CanvasProfileView.prototype._onTraceLogItemClick):
        (WebInspector.CanvasProfileView.prototype._replayTraceLog.didReplayTraceLog):
        (WebInspector.CanvasProfileView.prototype._replayTraceLog):
        * inspector/front-end/canvasProfiler.css:
        (.canvas-trace-log):
        (#canvas-replay-image-container):
        (#canvas-replay-image):

2012-11-08  Wei Fanzhe  <whyer1@gmail.com>

        While absolute positioning is put before the first flexitem, flexitems will move to a new line.
        https://bugs.webkit.org/show_bug.cgi?id=101294

        Reviewed by Ojan Vafai.

        This issue has to do with RenderFlexibleBox::computeNextFlexLine. When determing line breaks, the algorithm sees if 1) the total width exceeds lineBreakLength and 2) whether orderedChildren is non-empty.  But then, if the total width exceeds lineBreakLength and there's only absolutely positioned elemments in orderedChildren then the conditions are met and the algorithm mistakenly breaks the line. The solution is to see if orderedChildren collects at least a flex item. If it does, break the line.  

        * rendering/RenderFlexibleBox.cpp:
        (WebCore::RenderFlexibleBox::computeNextFlexLine):

2012-11-08  Dimitri Glazkov  <dglazkov@chromium.org>

        Unreviewed, rolling out r133429.
        http://trac.webkit.org/changeset/133429
        https://bugs.webkit.org/show_bug.cgi?id=101173

        Speculative roll out, investigating perf regression.

        * dom/ContextFeatures.cpp:
        * dom/ContextFeatures.h:
        * dom/Position.cpp:
        (WebCore::Position::Position):
        (WebCore::Position::findParent):
        * dom/TreeScope.cpp:
        (WebCore::TreeScope::getSelection):
        * html/HTMLTagNames.in:
        * html/shadow/HTMLContentElement.cpp:
        (WebCore::HTMLContentElement::contentTagName):
        * page/DOMWindow.idl:

2012-11-07  Emil A Eklund  <eae@chromium.org>

        Fix enclosingLayoutRect calls in InlineFlowBox.h
        https://bugs.webkit.org/show_bug.cgi?id=101497

        Reviewed by Levi Weintraub.

        InlineFlowBox.h used to include LayoutTypesInlineMethods.h which
        overrid enclosingLayoutRect to call closingIntRect. When we
        removed the LayoutTypes abstraction we switched these to
        enclosingIntRect to preserve the behavior.
        This patch changes these back to enclosingLayoutRect which is
        the desired behavior.

        Covered by existing tests.

        * rendering/InlineFlowBox.h:
        (WebCore::InlineFlowBox::layoutOverflowRect):
        (WebCore::InlineFlowBox::visualOverflowRect):

2012-11-08  Philip Rogers  <pdr@google.com>

        Remove unnecessary save/restore in SVGTextRunRenderingContext
        https://bugs.webkit.org/show_bug.cgi?id=101546

        Reviewed by Andreas Kling.

        This patch removes an unnecessary context save/restore SVGTextRunRenderingContext by
        refactoring the code to save off the stroke thickness.

        No new tests as this is heavily covered by existing tests.

        * rendering/svg/SVGTextRunRenderingContext.cpp:
        (WebCore::SVGTextRunRenderingContext::drawSVGGlyphs):

2012-11-08  Carlos Garcia Campos  <cgarcia@igalia.com>

        [GTK] Clean up includes in GObject DOM bindings code
        https://bugs.webkit.org/show_bug.cgi?id=101077

        Reviewed by Kentaro Hara.

        Remove some headers included multiple times for the same file and
        fix consistency in the includes style.

        * bindings/gobject/DOMObjectCache.cpp:
        * bindings/gobject/GObjectEventListener.cpp:
        * bindings/gobject/GObjectEventListener.h:
        * bindings/gobject/WebKitDOMBinding.cpp:
        * bindings/gobject/WebKitDOMBinding.h:
        * bindings/gobject/WebKitDOMEventTarget.cpp:
        * bindings/gobject/WebKitDOMEventTarget.h:
        * bindings/gobject/WebKitDOMEventTargetPrivate.h:
        (WebKit):
        * bindings/gobject/WebKitDOMObject.cpp:
        * bindings/gobject/WebKitDOMObject.h:
        * bindings/gobject/WebKitHTMLElementWrapperFactory.cpp:
        * bindings/gobject/WebKitHTMLElementWrapperFactory.h:
        * bindings/scripts/CodeGeneratorGObject.pm:
        (GenerateHeader):
        (GenerateFunction):
        (Generate):
        (WriteData):
        * bindings/scripts/test/GObject/WebKitDOMFloat64Array.cpp:
        * bindings/scripts/test/GObject/WebKitDOMFloat64Array.h:
        * bindings/scripts/test/GObject/WebKitDOMFloat64ArrayPrivate.h:
        * bindings/scripts/test/GObject/WebKitDOMTestActiveDOMObject.cpp:
        * bindings/scripts/test/GObject/WebKitDOMTestActiveDOMObject.h:
        * bindings/scripts/test/GObject/WebKitDOMTestActiveDOMObjectPrivate.h:
        * bindings/scripts/test/GObject/WebKitDOMTestCallback.cpp:
        * bindings/scripts/test/GObject/WebKitDOMTestCallback.h:
        * bindings/scripts/test/GObject/WebKitDOMTestCallbackPrivate.h:
        * bindings/scripts/test/GObject/WebKitDOMTestCustomNamedGetter.cpp:
        * bindings/scripts/test/GObject/WebKitDOMTestCustomNamedGetter.h:
        * bindings/scripts/test/GObject/WebKitDOMTestCustomNamedGetterPrivate.h:
        * bindings/scripts/test/GObject/WebKitDOMTestEventConstructor.cpp:
        * bindings/scripts/test/GObject/WebKitDOMTestEventConstructor.h:
        * bindings/scripts/test/GObject/WebKitDOMTestEventConstructorPrivate.h:
        * bindings/scripts/test/GObject/WebKitDOMTestEventTarget.cpp:
        * bindings/scripts/test/GObject/WebKitDOMTestEventTarget.h:
        * bindings/scripts/test/GObject/WebKitDOMTestEventTargetPrivate.h:
        * bindings/scripts/test/GObject/WebKitDOMTestException.cpp:
        * bindings/scripts/test/GObject/WebKitDOMTestException.h:
        * bindings/scripts/test/GObject/WebKitDOMTestExceptionPrivate.h:
        * bindings/scripts/test/GObject/WebKitDOMTestInterface.cpp:
        * bindings/scripts/test/GObject/WebKitDOMTestInterface.h:
        * bindings/scripts/test/GObject/WebKitDOMTestInterfacePrivate.h:
        * bindings/scripts/test/GObject/WebKitDOMTestMediaQueryListListener.cpp:
        * bindings/scripts/test/GObject/WebKitDOMTestMediaQueryListListener.h:
        * bindings/scripts/test/GObject/WebKitDOMTestMediaQueryListListenerPrivate.h:
        * bindings/scripts/test/GObject/WebKitDOMTestNamedConstructor.cpp:
        * bindings/scripts/test/GObject/WebKitDOMTestNamedConstructor.h:
        * bindings/scripts/test/GObject/WebKitDOMTestNamedConstructorPrivate.h:
        * bindings/scripts/test/GObject/WebKitDOMTestNode.cpp:
        * bindings/scripts/test/GObject/WebKitDOMTestNode.h:
        * bindings/scripts/test/GObject/WebKitDOMTestNodePrivate.h:
        * bindings/scripts/test/GObject/WebKitDOMTestObj.cpp:
        * bindings/scripts/test/GObject/WebKitDOMTestObj.h:
        * bindings/scripts/test/GObject/WebKitDOMTestObjPrivate.h:
        * bindings/scripts/test/GObject/WebKitDOMTestSerializedScriptValueInterface.cpp:
        * bindings/scripts/test/GObject/WebKitDOMTestSerializedScriptValueInterface.h:
        * bindings/scripts/test/GObject/WebKitDOMTestSerializedScriptValueInterfacePrivate.h:

2012-11-08  Dan Carney  <dcarney@google.com>

        [V8] Main world should have one DOMDataStore
        https://bugs.webkit.org/show_bug.cgi?id=101470

        Reviewed by Kentaro Hara.

        The main world DOMWrapperWorld held onto a DOMDataStore that should
        never be used, as there is a static one optimized for speed in
        DOMDataStore.

        No new tests. No change in functionality.

        * bindings/v8/DOMDataStore.cpp:
        (WebCore::DOMDataStore::current):
        * bindings/v8/DOMWrapperWorld.h:
        (WebCore::DOMWrapperWorld::isolatedWorldDomDataStore):
        (WebCore::DOMWrapperWorld::DOMWrapperWorld):
        * bindings/v8/V8DOMWrapper.h:
        (WebCore::V8DOMWrapper::getCachedWrapper):

2012-11-08  Laszlo Gombos  <l.gombos@samsung.com>

        [EFL] Remove non-variable options from the build system
        https://bugs.webkit.org/show_bug.cgi?id=101506

        Reviewed by Kenneth Rohde Christiansen.

        Remove WTF_USE_ICU_UNICODE, WTF_USE_CAIRO and WTF_USE_FREETYPE cmake variables
        as these are always set to const 1 and not really configurable.

        Remove duplicate platform/graphics/cairo include path from
        PlatformEfl.cmake.

        No new tests as there is no new functionality.

        * PlatformEfl.cmake:

2012-11-08  KyungTae Kim  <ktf.kim@samsung.com>

        Unused parameters on GraphicsLayerUpdater.cpp
        https://bugs.webkit.org/show_bug.cgi?id=101577

        Reviewed by Kentaro Hara.

        The parameter 'displayID' is not used when !USE(REQUEST_ANIMATION_FRAME_DISPLAY_MONITOR)
        Use UNUSED_PARAM macro for removing -Wunused-parameter warnings

        * platform/graphics/GraphicsLayerUpdater.cpp:
        (WebCore::GraphicsLayerUpdater::GraphicsLayerUpdater):
        (WebCore::GraphicsLayerUpdater::screenDidChange):

2012-11-08  Alexander Pavlov  <apavlov@chromium.org>

        Web Inspector: Add option to disable rulers (Elements panel)
        https://bugs.webkit.org/show_bug.cgi?id=101554

        Reviewed by Pavel Feldman.

        A new setting, showMetricsRulers, has been introduced (off by default, so users need to opt in to see the rulers).
        The setting value is passed into InspectorDOMAgent, down to the InspectorOverlayPage, which affects the drawGrid() and
        drawRulers() calls. As a side effect, the issue when the rulers were painted for elements having no renderers has been fixed.

        No new tests, a UI change.

        * English.lproj/localizedStrings.js: Add "Show rulers" string.
        * inspector/InspectorDOMAgent.cpp:
        (WebCore::InspectorDOMAgent::highlightConfigFromInspectorObject): Copy over the showRulers value.
        * inspector/InspectorOverlay.cpp:
        (WebCore::buildObjectForHighlight): Copy over the showRulers value.
        * inspector/InspectorOverlay.h:
        (HighlightConfig): Add |bool showRulers|.
        (WebCore::Highlight::Highlight): Initialize fields.
        (Highlight): Add |bool showRulers|.
        (WebCore::Highlight::setDataFromConfig):
        * inspector/InspectorOverlayPage.html:
        * inspector/front-end/DOMAgent.js: Make use of WebInspector.settings.showMetricsRulers when building the highlight DTO.
        * inspector/front-end/Settings.js: Add showMetricsRulers.
        * inspector/front-end/SettingsScreen.js:
        (WebInspector.GenericSettingsTab): Add "Show rulers" checkbox in the Elements panel section.

2012-11-08  Alexander Shalamov  <alexander.shalamov@intel.com>

        Warn in the inspector console when using dpi and dpcm units outside of media="print"
        https://bugs.webkit.org/show_bug.cgi?id=100865

        Reviewed by Kenneth Rohde Christiansen.

        Added function that prints warning to inspector console whenever dpi or dpcm CSS units
        are used for screen media.

        Test: fast/media/mq-resolution-dpi-dpcm-warning.html

        * css/CSSStyleSheet.cpp:
        (WebCore::CSSStyleSheet::setMediaQueries):
        * css/MediaList.cpp:
        (WebCore):
        (WebCore::addResolutionWarningMessageToConsole):
        (WebCore::reportMediaQueryWarningIfNeeded):
        * css/MediaList.h:
        (WebCore):
        * css/MediaQueryMatcher.cpp:
        (WebCore::MediaQueryMatcher::matchMedia):
        * css/StyleSheetContents.cpp:
        (WebCore::StyleSheetContents::parserAppendRule):

2012-11-08  Eugene Klyuchnikov  <eustas.bug@gmail.com>

        Web Inspector: Console: "time" and "timeEnd" should have same number of required arguments
        https://bugs.webkit.org/show_bug.cgi?id=101451

        Reviewed by Yury Semikhatsky.

        Solution: make console.time "title" parameter mandatory.

        * page/Console.idl: Changed parameter specification.

2012-11-08  Vsevolod Vlasov  <vsevik@chromium.org>

        Unreviewed fixed inspector frontend compilation

        * inspector/front-end/DataGrid.js:

2012-11-08  Zeno Albisser  <zeno@webkit.org>

        GraphicsSurfaceGLX needs to query the drawable for YInversion.
        https://bugs.webkit.org/show_bug.cgi?id=101472

        After r133049 the WebGL content is now displayed upside down
        for the Qt port. We cannot just apply a generic rule, that
        the content needs to be flipped upside down.
        Instead we have to query GLX to tell us, if the drawable's
        framebuffer is y-inverted.

        Reviewed by Kenneth Rohde Christiansen.

        * platform/graphics/surfaces/qt/GraphicsSurfaceGLX.cpp:
        (WebCore::GraphicsSurfacePrivate::textureIsYInverted):
        (GraphicsSurfacePrivate):
        (WebCore::GraphicsSurface::platformPaintToTextureMapper):

2012-11-08  Mike West  <mkwst@chromium.org>

        Warn when parsing an invalid X-Frame-Options header.
        https://bugs.webkit.org/show_bug.cgi?id=101447

        Reviewed by Adam Barth.

        An 'X-Frame-Options' header that contains an invalid option (that is,
        neither 'DENY' nor 'SAMEORIGIN') is ignored. This patch adds a console
        warning to notify developers that they've made a mistake.

        Test: http/tests/security/XFrameOptions/x-frame-options-invalid.html

        * dom/Document.cpp:
        (WebCore::Document::processHttpEquiv):
            Move the request identifier generation out of the failure block in
            order to pass it into 'shouldInterruptLoadForXFrameOptions'. This
            ensures that the console message is properly tied to a request.
        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::shouldInterruptLoadForXFrameOptions):
        * loader/FrameLoader.h:
        (FrameLoader):
            'shouldInterruptLoadForXFrameOptions' now accepts a request
            identifier as a parameter, and generates a console message if the
            load is blocked.
        * loader/MainResourceLoader.cpp:
        (WebCore::MainResourceLoader::didReceiveResponse):
            Pass the request identifier into 'shouldInterruptLoadForXFrameOptions'.

2012-11-08  Eugene Klyuchnikov  <eustas.bug@gmail.com>

        Web Inspector: Timeline: Improve time/timeEnd appearance.
        https://bugs.webkit.org/show_bug.cgi?id=100936

        Reviewed by Yury Semikhatsky.

        Changes:
        - time/timeEnd records should be top level records only in "glue" mode
        - time/timeEnd records should display "message" in record list / popover
        - glued records add aggregated statistics to root record
        - glued records do not reduce their origin self time

        Test: inspector/timeline/timeline-time.html

        * English.lproj/localizedStrings.js: Added "Message" string.
        * inspector/front-end/TimelinePresentationModel.js:
        (WebInspector.TimelinePresentationModel.Record): Added "origin" field.

2012-11-08  Yury Semikhatsky  <yurys@chromium.org>

        Web Inspector: move front-end methods called from native part to InspectorFrontendAPI
        https://bugs.webkit.org/show_bug.cgi?id=101463

        Reviewed by Vsevolod Vlasov.

        Moved Web Inspector methods called from native code to InspectorFrontendAPI.

        * inspector/InspectorClient.cpp:
        (WebCore::InspectorClient::doDispatchMessageOnFrontendPage):
        * inspector/InspectorFrontendHost.cpp:
        (WebCore::FrontendMenuProvider::create):
        (WebCore::FrontendMenuProvider::disconnect):
        (WebCore::FrontendMenuProvider::FrontendMenuProvider):
        (WebCore::FrontendMenuProvider::contextMenuItemSelected):
        (WebCore::FrontendMenuProvider::contextMenuCleared):
        (FrontendMenuProvider):
        (WebCore::InspectorFrontendHost::showContextMenu):
        * inspector/front-end/InspectorFrontendAPI.js:
        (InspectorFrontendAPI.loadCompleted):
        (InspectorFrontendAPI.contextMenuItemSelected):
        (InspectorFrontendAPI.contextMenuCleared):
        (InspectorFrontendAPI.dispatchMessageAsync):
        (InspectorFrontendAPI.dispatchMessage):
        * inspector/front-end/inspector.js:

2012-11-08  Kunihiko Sakamoto  <ksakamoto@chromium.org>

        User can change a disabled select (drop down box)
        https://bugs.webkit.org/show_bug.cgi?id=100932

        Reviewed by Kent Tamura.

        <select> should not handle events if it's disabled.

        Test: fast/forms/select/select-disabled.html

        * html/HTMLSelectElement.cpp:
        (WebCore::HTMLSelectElement::defaultEventHandler):

2012-11-08  Alec Flett  <alecflett@chromium.org>

        IndexedDB: Rename methods and remove dead code from IDBBackingStore
        https://bugs.webkit.org/show_bug.cgi?id=101488

        Reviewed by Ojan Vafai.

        In preparation for merging IDBBackingStore and IDBLevelDBBackingStore:

        1) rename ObjectStoreRecordIdentifier to RecordIdentifier
        2) remove IDBBackingStore::forEachRecord and friends
        3) remove IDBBackingStore::Cursor::close, since it was an empty method.

        No new tests as this is purely code cleanup.

        * Modules/indexeddb/IDBBackingStore.cpp:
        (WebCore::IDBLevelDBBackingStore::getRecord):
        (WebCore):
        (WebCore::IDBLevelDBBackingStore::putRecord):
        (WebCore::IDBLevelDBBackingStore::createInvalidRecordIdentifier):
        (WebCore::IDBLevelDBBackingStore::deleteRecord):
        (WebCore::IDBLevelDBBackingStore::keyExistsInObjectStore):
        (WebCore::IDBLevelDBBackingStore::putIndexDataForRecord):
        (WebCore::IDBLevelDBBackingStore::deleteIndexDataForRecord):
        * Modules/indexeddb/IDBBackingStore.h:
        (WebCore::IDBBackingStore::RecordIdentifier::~RecordIdentifier):
        (IDBBackingStore):
        * Modules/indexeddb/IDBCursorBackendImpl.cpp:
        (WebCore::IDBCursorBackendImpl::close):
        * Modules/indexeddb/IDBIndexBackendImpl.cpp:
        (WebCore::IDBIndexBackendImpl::countInternal):
        (WebCore::IDBIndexBackendImpl::getInternal):
        (WebCore::IDBIndexBackendImpl::getKeyInternal):
        * Modules/indexeddb/IDBLevelDBBackingStore.h:
        (IDBLevelDBBackingStore):
        * Modules/indexeddb/IDBObjectStoreBackendImpl.cpp:
        (WebCore::IDBObjectStoreBackendImpl::getInternal):
        (WebCore):
        (WebCore::IDBObjectStoreBackendImpl::setIndexKeys):
        (WebCore::IDBObjectStoreBackendImpl::putInternal):
        (WebCore::IDBObjectStoreBackendImpl::deleteInternal):
        (WebCore::IDBObjectStoreBackendImpl::countInternal):

2012-11-07  Vsevolod Vlasov  <vsevik@chromium.org>

        Web Inspector: console error after inspecting IndexedDB
        https://bugs.webkit.org/show_bug.cgi?id=101481

        Reviewed by Pavel Feldman.

        Added objectId nullity check to RemoteOBject::release.
        Drive-by added release for entry key and primaryKey.

        * inspector/front-end/IndexedDBViews.js:
        (WebInspector.IDBDataView.prototype.clear):
        * inspector/front-end/RemoteObject.js:
        (WebInspector.RemoteObject.prototype.release):

2012-11-07  Vsevolod Vlasov  <vsevik@chromium.org>

        Web Inspector: Migrate inspector IndexedDB support to frontend API.
        https://bugs.webkit.org/show_bug.cgi?id=101457

        Reviewed by Pavel Feldman.

        Migrated IndexedDB support to web facing IndexedDB API.

        * inspector/Inspector.json:
        * inspector/InspectorIndexedDBAgent.cpp:
        (WebCore):
        (WebCore::assertIDBFactory):
        (WebCore::InspectorIndexedDBAgent::requestDatabaseNamesForFrame):
        (WebCore::InspectorIndexedDBAgent::requestDatabase):
        (WebCore::InspectorIndexedDBAgent::requestData):
        * inspector/front-end/IndexedDBModel.js:
        (WebInspector.IndexedDBModel.prototype.innerCallback):
        (WebInspector.IndexedDBModel.prototype._requestData):
        * inspector/front-end/IndexedDBViews.js:
        (WebInspector.IDBDataView.prototype._updateData.callback):
        (WebInspector.IDBDataView.prototype._updateData):
        (WebInspector.IDBDataGridNode):
        (WebInspector.IDBDataGridNode.prototype.createCell):

2012-08-20  Taiju Tsuiki  <tzik@chromium.org>

        Web Inspector: Drop dimmed crumb handling
        https://bugs.webkit.org/show_bug.cgi?id=94457

        Reviewed by Vsevolod Vlasov.

        No new tests. Existing inspector test should work.

        * inspector/front-end/ElementsPanel.js:
        (WebInspector.ElementsPanel.prototype.updateBreadcrumb):
        (WebInspector.ElementsPanel.prototype.updateBreadcrumbSizes):
        * inspector/front-end/breadcrumbList.css:

2012-11-07  Vsevolod Vlasov  <vsevik@chromium.org>

        Web Inspector: Infinite loop in DataGrid::autoSizeColumn
        https://bugs.webkit.org/show_bug.cgi?id=101363

        Reviewed by Pavel Feldman.

        Test: inspector/datagrid-autosize.html

        * inspector/front-end/DataGrid.js:
        (WebInspector.DataGrid.prototype._autoSizeWidths):
        (WebInspector.DataGrid.prototype.autoSizeColumns):

2012-11-07  Keishi Hattori  <keishi@webkit.org>

        Implement week picking to calendar picker
        https://bugs.webkit.org/show_bug.cgi?id=101449

        Reviewed by Kent Tamura.

        This adds week picker mode to CalendarPicker.

        No new tests. Tests will be added later when this feature is enabled in DRT.

        * Resources/pagepopups/calendarPicker.css:
        (.month-mode .day):
        (.week-mode .available.day-selected.monday): Rounded corners around week selection.
        (.week-mode .available.day-selected.sunday): Ditto.
        (.week-mode .unavailable.day-selected):
        (.week-mode .unavailable.day-selected.monday):
        (.week-mode .unavailable.day-selected.sunday):
        (.week-mode .week-column.unavailable.day-selected):
        (.week-column): Hide week column unless in week mode.
        (.week-mode .week-column):
        * Resources/pagepopups/calendarPicker.js:
        (parseDateString): Support week string.
        (Week):
        (Week.parse): Parses "yyyy-Www" string.
        (Week.createFromDate): Creates Week containing datetime.
        (Week.createFromToday): Creates Week containing today.
        (Week.weekOneStartDateForYear): Returns the start date for the first week of year.
        (Week.numberOfWeeksInYear): Returns the number of weeks in year.
        (Week._numberOfWeeksSinceDate): Returns number of weeks since a date.
        (Week.prototype.equals): Returns true if the Weeks are the same.
        (Week.prototype.previous): Returns the previous Week.
        (Week.prototype.next): Returns the next Week.
        (Week.prototype.startDate): Returns start datetime of Week.
        (Week.prototype.endDate): Returns end datetime of Week.
        (Week.prototype.valueOf): Returns the milliseconds since epoch.
        (Week.prototype.toString): Returns ISO week string.
        (CalendarPicker): Add week picker mode.
        (CalendarPicker.prototype.showMonth): Use NavigationBehaviour instead of bools.
        (YearMonthController.prototype.attachTo): Fix bug.
        (YearMonthController.prototype.moveRelatively): Use new showMonth.
        (DaysTable.prototype.attachTo): Add week number column.
        (DaysTable.prototype._renderMonth): Render week numbers.
        (DaysTable.prototype.navigateToMonth): Render week numbers.
        (DaysTable.prototype.selectRange):
        (DaysTable.prototype._selectRangeAtPosition): Week number nodes have an positionX of -1.
        (DaysTable.prototype._maybeSetPreviousMonth):
        (DaysTable.prototype._maybeSetNextMonth):
        (MonthPickerDaysTable.prototype.selectRange):
        (MonthPickerDaysTable.prototype.selectRangeAndShowEntireRange):
        (MonthPickerDaysTable.prototype._handleKey):
        (WeekPickerDaysTable): Added.
        (WeekPickerDaysTable.prototype._markRangeAsSelected): Marks week as selected.
        (WeekPickerDaysTable.prototype.selectRange): Selects week.
        (WeekPickerDaysTable.prototype.selectRangeAndShowEntireRange): Selects week and navigate to show entire selection.
        (WeekPickerDaysTable.prototype._rangeForNode): Returns Week for node.
        (WeekPickerDaysTable.prototype._handleKey):

2012-11-07  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r133841.
        http://trac.webkit.org/changeset/133841
        https://bugs.webkit.org/show_bug.cgi?id=101542

        Reverted patches were innocent (Requested by shinyak on
        #webkit).

        * WebCore.exp.in:
        * dom/Element.cpp:
        (WebCore::Element::shadowPseudoId):
        * dom/Element.h:
        (Element):
        * dom/ElementRareData.cpp:
        (WebCore::ElementRareData::reportMemoryUsage):
        * dom/ElementRareData.h:
        (ElementRareData):
        * html/BaseMultipleFieldsDateAndTimeInputType.cpp:
        (WebCore::BaseMultipleFieldsDateAndTimeInputType::createShadowSubtree):
        * html/ColorInputType.cpp:
        (WebCore::ColorInputType::createShadowSubtree):
        * html/HTMLTextAreaElement.cpp:
        (WebCore::HTMLTextAreaElement::updatePlaceholderText):
        * html/RangeInputType.cpp:
        (WebCore::RangeInputType::createShadowSubtree):
        * html/TextFieldInputType.cpp:
        (WebCore::TextFieldInputType::createShadowSubtree):
        (WebCore::TextFieldInputType::updatePlaceholderText):
        * html/ValidationMessage.cpp:
        (WebCore::ValidationMessage::buildBubbleTree):
        * html/shadow/DateTimeEditElement.cpp:
        (WebCore::DateTimeEditBuilder::visitLiteral):
        (WebCore::DateTimeEditElement::DateTimeEditElement):
        * html/shadow/DateTimeFieldElement.cpp:
        (WebCore::DateTimeFieldElement::initialize):
        * html/shadow/DateTimeFieldElement.h:
        (DateTimeFieldElement):
        * html/shadow/PickerIndicatorElement.cpp:
        (WebCore::PickerIndicatorElement::PickerIndicatorElement):
        * html/track/TextTrackCue.cpp:
        (WebCore::TextTrackCueBox::TextTrackCueBox):
        (WebCore::TextTrackCue::updateDisplayTree):
        * testing/Internals.cpp:
        (WebCore::Internals::setShadowPseudoId):

2012-11-07  Simon Fraser  <simon.fraser@apple.com>

        Fix EFL build, which has accelerated compositing disabled, by making
        repaintViewRectangle() const.

        * rendering/RenderView.cpp:
        (WebCore::RenderView::repaintViewRectangle):
        * rendering/RenderView.h:
        (RenderView):

2012-11-07  Simon Fraser  <simon.fraser@apple.com>

        constify ALL the repaint containers
        https://bugs.webkit.org/show_bug.cgi?id=101541

        Reviewed by Beth Dakin.

        Make all the RenderLayerModelObject* repaintContainer arguments const, since
        these member functions should have no need to mutate this object.

        * WebCore.exp.in:
        * rendering/RenderBR.h:
        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::selectionGapRectsForRepaint):
        (WebCore::RenderBlock::rectWithOutlineForRepaint):
        * rendering/RenderBlock.h:
        * rendering/RenderBox.cpp:
        (WebCore::RenderBox::outlineBoundsForRepaint):
        (WebCore::RenderBox::mapLocalToContainer):
        (WebCore::RenderBox::clippedOverflowRectForRepaint):
        (WebCore::RenderBox::computeRectForRepaint):
        * rendering/RenderBox.h:
        * rendering/RenderFlowThread.cpp:
        (WebCore::RenderFlowThread::repaintRectangleInRegions): Need to use a const_iterator.
        * rendering/RenderFlowThread.h:
        * rendering/RenderInline.cpp:
        (WebCore::RenderInline::clippedOverflowRectForRepaint):
        (WebCore::RenderInline::rectWithOutlineForRepaint):
        (WebCore::RenderInline::computeRectForRepaint):
        (WebCore::RenderInline::mapLocalToContainer):
        * rendering/RenderInline.h:
        * rendering/RenderListMarker.cpp:
        (WebCore::RenderListMarker::selectionRectForRepaint):
        * rendering/RenderListMarker.h:
        * rendering/RenderObject.cpp:
        (WebCore::RenderObject::repaintUsingContainer):
        (WebCore::RenderObject::repaintAfterLayoutIfNeeded):
        (WebCore::RenderObject::rectWithOutlineForRepaint):
        (WebCore::RenderObject::clippedOverflowRectForRepaint):
        (WebCore::RenderObject::computeRectForRepaint):
        (WebCore::RenderObject::computeFloatRectForRepaint):
        (WebCore::RenderObject::mapLocalToContainer):
        (WebCore::RenderObject::localToContainerQuad):
        (WebCore::RenderObject::localToContainerPoint):
        * rendering/RenderObject.h:
        (WebCore::RenderObject::selectionRectForRepaint):
        (WebCore::RenderObject::outlineBoundsForRepaint):
        * rendering/RenderReplaced.cpp:
        (WebCore::RenderReplaced::selectionRectForRepaint):
        (WebCore::RenderReplaced::clippedOverflowRectForRepaint):
        * rendering/RenderReplaced.h:
        * rendering/RenderTableCell.cpp:
        (WebCore::RenderTableCell::clippedOverflowRectForRepaint):
        (WebCore::RenderTableCell::computeRectForRepaint):
        * rendering/RenderTableCell.h:
        * rendering/RenderTableCol.cpp:
        (WebCore::RenderTableCol::clippedOverflowRectForRepaint):
        * rendering/RenderTableCol.h:
        * rendering/RenderTableRow.cpp:
        (WebCore::RenderTableRow::clippedOverflowRectForRepaint):
        * rendering/RenderTableRow.h:
        * rendering/RenderText.cpp:
        (WebCore::RenderText::clippedOverflowRectForRepaint):
        (WebCore::RenderText::selectionRectForRepaint):
        * rendering/RenderText.h:
        * rendering/RenderView.cpp:
        (WebCore::RenderView::mapLocalToContainer):
        (WebCore::RenderView::computeRectForRepaint):
        * rendering/RenderView.h:
        * rendering/svg/RenderSVGForeignObject.cpp:
        (WebCore::RenderSVGForeignObject::clippedOverflowRectForRepaint):
        (WebCore::RenderSVGForeignObject::computeFloatRectForRepaint):
        (WebCore::RenderSVGForeignObject::mapLocalToContainer):
        * rendering/svg/RenderSVGForeignObject.h:
        * rendering/svg/RenderSVGGradientStop.h:
        * rendering/svg/RenderSVGHiddenContainer.h:
        * rendering/svg/RenderSVGInline.cpp:
        (WebCore::RenderSVGInline::clippedOverflowRectForRepaint):
        (WebCore::RenderSVGInline::computeFloatRectForRepaint):
        (WebCore::RenderSVGInline::mapLocalToContainer):
        * rendering/svg/RenderSVGInline.h:
        * rendering/svg/RenderSVGModelObject.cpp:
        (WebCore::RenderSVGModelObject::clippedOverflowRectForRepaint):
        (WebCore::RenderSVGModelObject::computeFloatRectForRepaint):
        (WebCore::RenderSVGModelObject::mapLocalToContainer):
        (WebCore::RenderSVGModelObject::outlineBoundsForRepaint):
        * rendering/svg/RenderSVGModelObject.h:
        * rendering/svg/RenderSVGRoot.cpp:
        (WebCore::RenderSVGRoot::clippedOverflowRectForRepaint):
        (WebCore::RenderSVGRoot::computeFloatRectForRepaint):
        (WebCore::RenderSVGRoot::mapLocalToContainer):
        * rendering/svg/RenderSVGRoot.h:
        * rendering/svg/RenderSVGText.cpp:
        (WebCore::RenderSVGText::clippedOverflowRectForRepaint):
        (WebCore::RenderSVGText::computeRectForRepaint):
        (WebCore::RenderSVGText::computeFloatRectForRepaint):
        (WebCore::RenderSVGText::mapLocalToContainer):
        * rendering/svg/RenderSVGText.h:
        * rendering/svg/SVGRenderSupport.cpp:
        (WebCore::SVGRenderSupport::clippedOverflowRectForRepaint):
        (WebCore::SVGRenderSupport::computeFloatRectForRepaint):
        (WebCore::SVGRenderSupport::mapLocalToContainer):
        * rendering/svg/SVGRenderSupport.h:
        (SVGRenderSupport):

2012-11-07  Kent Tamura  <tkent@chromium.org>

        [Chromium-win] Refactor date/time format conversion code in LocaleWin
        https://bugs.webkit.org/show_bug.cgi?id=101329

        Reviewed by Kentaro Hara.

        convertWindowsDateFormatToLDML and convertWindowsTimeFormatToLDML did
        similar jobs with different code. We can merge them into one function.

        As for the date format conversion, we have tokenized a format string and
        stored token objects into a vector. We skip token object generation and
        generate a LDML-compliant pattern string during parsing.

        No new tests. This should make no behavior changes and
        WebKit/chromium/tests/LocaleWinTest.cpp has test cases.

        * platform/text/win/LocaleWin.cpp:
        (WebCore): Remove DateFormatToken, isFooSymbol, ensureShortDateTokens,
        convertWindowsDateFormatToLDML, mapCharacterToDateTimeFieldType, and
        convertWindowsTimeFormatToLDML.
        (WebCore::commitLiteralToken): Store the result to the specified StringBuilder.
        (WebCore::convertWindowsDateTimeFormat):
        Renamed from parseDateFormat, and supports time format symbols.
        (WebCore::LocaleWin::dateFormat): Use convertWindowsDateTimeFormat.
        (WebCore::LocaleWin::monthFormat): Ditto.
        (WebCore::LocaleWin::timeFormat): Ditto.
        (WebCore::LocaleWin::shortTimeFormat): Ditto.
        * platform/text/win/LocaleWin.h:
        (LocaleWin): Remove ensureShortDateTokens and m_shortDateTokens.

2012-11-07  Shinya Kawanaka  <shinyak@chromium.org>

        Unreviewed, rolling out r133428 and r133749
        https://bugs.webkit.org/show_bug.cgi?id=101533

        These patches might cause memory regression.

        * WebCore.exp.in:
        * dom/Element.cpp:
        (WebCore::Element::shadowPseudoId):
        (WebCore):
        (WebCore::Element::setShadowPseudoId):
        * dom/Element.h:
        (Element):
        * dom/ElementRareData.cpp:
        (WebCore::ElementRareData::reportMemoryUsage):
        * dom/ElementRareData.h:
        (ElementRareData):
        * html/BaseMultipleFieldsDateAndTimeInputType.cpp:
        (WebCore::BaseMultipleFieldsDateAndTimeInputType::createShadowSubtree):
        * html/ColorInputType.cpp:
        (WebCore::ColorInputType::createShadowSubtree):
        * html/HTMLTextAreaElement.cpp:
        (WebCore::HTMLTextAreaElement::updatePlaceholderText):
        * html/RangeInputType.cpp:
        (WebCore::RangeInputType::createShadowSubtree):
        * html/TextFieldInputType.cpp:
        (WebCore::TextFieldInputType::createShadowSubtree):
        (WebCore::TextFieldInputType::updatePlaceholderText):
        * html/ValidationMessage.cpp:
        (WebCore::ValidationMessage::buildBubbleTree):
        * html/shadow/DateTimeEditElement.cpp:
        (WebCore::DateTimeEditBuilder::visitLiteral):
        (WebCore::DateTimeEditElement::DateTimeEditElement):
        * html/shadow/DateTimeFieldElement.cpp:
        (WebCore::DateTimeFieldElement::initialize):
        * html/shadow/DateTimeFieldElement.h:
        (DateTimeFieldElement):
        * html/shadow/PickerIndicatorElement.cpp:
        (WebCore::PickerIndicatorElement::PickerIndicatorElement):
        * html/track/TextTrackCue.cpp:
        (WebCore::TextTrackCueBox::TextTrackCueBox):
        (WebCore::TextTrackCue::updateDisplayTree):
        * testing/Internals.cpp:
        (WebCore::Internals::setShadowPseudoId):

2012-11-07  Ryosuke Niwa  <rniwa@webkit.org>

        Crash in WebCore::RenderLayer::normalFlowList
        https://bugs.webkit.org/show_bug.cgi?id=101528

        Reviewed by Simon Fraser.

        Make sure the layout is up to date before re-computing the caret rect.
        Avoid doing the layout when the selection is cleared since we can always stop
        the blink timer in that case.

        Unfortunately, we haven't found any reproduction of this crash yet.

        * editing/FrameSelection.cpp:
        (WebCore::isNonOrphanedCaret):
        (WebCore::FrameSelection::localCaretRect):
        (WebCore::FrameSelection::updateAppearance):

2012-11-07  Adam Barth  <abarth@webkit.org>

        [V8] IntrusiveDOMWrapperMap should be usable for more than just Nodes
        https://bugs.webkit.org/show_bug.cgi?id=101110

        Reviewed by Kentaro Hara.

        Hopefully the memory issues with this patch have been resolved by
        fixing bug 101525. This patch re-lands this patch again, hopefully for
        the last time.

        * bindings/v8/DOMDataStore.cpp:
        (WebCore::DOMDataStore::weakCallback):
        * bindings/v8/DOMDataStore.h:
        (WebCore::DOMDataStore::wrapperIsStoredInObject):
        (WebCore::DOMDataStore::getWrapperFromObject):
        (WebCore::DOMDataStore::setWrapperInObject):

2012-11-07  KyungTae Kim  <ktf.kim@samsung.com>

        Seam occurred between pieces of ShadowBlur on floating point zoom
        https://bugs.webkit.org/show_bug.cgi?id=101435

        Reviewed by Simon Fraser.

        When paint Shadow that doesn't have blurred edge on floating point zoom,
        pixel seam (pixel cracks) occurred between pieces of the ShadowBlur because of unaligned clip rect.
        So, enlarge the clipping area 1 pixel so that the fill does not bleed (due to antialiasing)
        even if the unaligned clip rect occurred.


        * platform/graphics/ShadowBlur.cpp:
        (WebCore::ShadowBlur::calculateLayerBoundingRect):

2012-11-07  Tim Horton  <timothy_horton@apple.com>

        Repaint issues with -webkit-svg-shadow used on a container
        https://bugs.webkit.org/show_bug.cgi?id=65643
        <rdar://problem/7600532>

        Reviewed by Simon Fraser.

        SVG renderer repaint rects are currently expanded only by the shadow of
        the renderer itself; however, the area they need to repaint can be larger
        than that, if their parents also have shadows. We need to take into account
        parent's shadows (respecting transforms, as well).

        clippedOverflowRectForRepaint already recurses upwards through the render tree,
        and ends up with a rect in layout coordinates, so we manually apply the shadow
        at each step (repaintRectInLocalCoordinatesExcludingSVGShadow was added to allow
        us to get the raw repaint rect without the shadow baked-in).

        repaintRectInLocalCoordinates now includes shadows from all parents.

        Also, RenderSVGRoot was clipping repaint rects to the viewport before applying
        shadows, so offscreen elements with on-screen shadows (applied by the root) would not paint the shadows.
        We can just swap the order of these things to correct this.

        Tests: svg/css/parent-shadow-offscreen.svg, svg/css/root-shadow-offscreen.svg, svg/repaint/repaint-webkit-svg-shadow.svg

        * rendering/RenderObject.cpp:
        (WebCore::RenderObject::addChild): Mark the child being added as having an SVG shadow if it is being added as a child of an element that does.
        (WebCore::RenderObject::styleDidChange): Mark the child being added as having an SVG shadow if its new style has a shadow.
        * rendering/svg/RenderSVGImage.cpp:
        (WebCore::RenderSVGImage::layout): Cache the repaint rect before intersecting it with the shadow.
        * rendering/svg/RenderSVGImage.h:
        (WebCore::RenderSVGImage::repaintRectInLocalCoordinatesExcludingSVGShadow): Return the cached repaint rect for the renderer without the shadow included.
        * rendering/svg/RenderSVGModelObject.cpp:
        (WebCore::RenderSVGModelObject::RenderSVGModelObject): Renderers do not have a shadow by default.
        * rendering/svg/RenderSVGModelObject.h:
        (WebCore::RenderSVGModelObject::repaintRectInLocalCoordinatesExcludingSVGShadow): Return the cached repaint rect for the renderer without the shadow included.
        (WebCore::RenderSVGModelObject::hasSVGShadow): Return whether or not the renderer has a shadow.
        (WebCore::RenderSVGModelObject::setHasSVGShadow): Set whether or not the renderer has a shadow.
        * rendering/svg/RenderSVGRoot.cpp:
        (WebCore::RenderSVGRoot::RenderSVGRoot):
        (WebCore::RenderSVGRoot::computeFloatRectForRepaint): Apply the shadow before clipping to the viewport, so we draw shadows for elements outside the viewport.
        (WebCore::RenderSVGRoot::updateCachedBoundaries): Cache the repaint rect before intersecting it with the shadow.
        * rendering/svg/RenderSVGRoot.h:
        (WebCore::RenderSVGRoot::hasSVGShadow): Return whether or not the renderer has a shadow.
        (WebCore::RenderSVGRoot::setHasSVGShadow): Set whether or not the renderer has a shadow.
        (WebCore::RenderSVGRoot::repaintRectInLocalCoordinatesExcludingSVGShadow): Return the cached repaint rect for the renderer without the shadow included.
        * rendering/svg/RenderSVGShape.cpp:
        (WebCore::RenderSVGShape::updateRepaintBoundingBox): Cache the repaint rect before intersecting it with the shadow.
        * rendering/svg/RenderSVGShape.h:
        (WebCore::RenderSVGShape::repaintRectInLocalCoordinatesExcludingSVGShadow): Return the cached repaint rect for the renderer without the shadow included.
        * rendering/svg/SVGRenderSupport.cpp:
        (WebCore::SVGRenderSupport::repaintRectForRendererInLocalCoordinatesExcludingSVGShadow): Return the cached repaint rect for the renderer without the shadow included.
        (WebCore::SVGRenderSupport::clippedOverflowRectForRepaint): Apply shadows as we walk through our parents, instead of only applying the renderer's own shadow.
        (WebCore::SVGRenderSupport::rendererHasSVGShadow): Return whether or not the renderer has a shadow.
        (WebCore::SVGRenderSupport::setRendererHasSVGShadow): Set whether or not the renderer has a shadow.
        (WebCore::SVGRenderSupport::intersectRepaintRectWithShadows): Walk through the element's parents, adding shadows to the repaint rect as we go, eventually
        transforming the repaint rect back into local coordinates.
        (WebCore::SVGRenderSupport::intersectRepaintRectWithResources): Don't add shadows by default, just other resources, so that we can cache repaint rects with and without shadows.
        * rendering/svg/SVGRenderSupport.h:

2012-11-07  Anders Carlsson  <andersca@apple.com>

        Add RemoteGraphicsLayer class
        https://bugs.webkit.org/show_bug.cgi?id=101535

        Reviewed by Simon Fraser.

        * WebCore.exp.in:
        Export GraphicsLayer symbols required by WebKit2.

        * WebCore.xcodeproj/project.pbxproj:
        Make GraphicsLayerFactory.h a private header.

2012-11-07  Adam Barth  <abarth@webkit.org>

        [V8] Don't leak <img> elements in content scripts
        https://bugs.webkit.org/show_bug.cgi?id=101525

        Reviewed by Ojan Vafai.

        I found the leak that was causing a problem for bug 101110. We weren't
        filling in the derefObjectFunction for HTMLImageElements (and
        potentially some other types of elements). That manifests today as a
        memory leak in content scripts (which use the derefObjectFunction for
        nodes) and caused a memory leak after bug 101110 because we started
        using the derefObjectFunction in the main world as well.

        This patch adds ASSERTs so that we won't make this mistake in the future.

        * bindings/scripts/CodeGeneratorV8.pm:
        (GenerateNamedConstructorCallback):
        * bindings/v8/DOMDataStore.cpp:
        (WebCore::DOMDataStore::weakCallback):
        * bindings/v8/DOMWrapperMap.h:
        (WebCore::DOMWrapperMap::defaultWeakCallback):
        * bindings/v8/custom/V8HTMLImageElementConstructor.cpp:
        (WebCore):

2012-11-07  Alec Flett  <alecflett@chromium.org>

        IndexedDB: Prepare for IDBBackingStore merge by renaming IDBLevelDBBackingStore.cpp
        https://bugs.webkit.org/show_bug.cgi?id=101486

        Reviewed by Ojan Vafai.

        Rename IDBLevelDBBackingStore.cpp to IDBBackingStore.cpp in
        preparation for merging these classes. This will make the merge
        diffs sane. See https://bugs.webkit.org/show_bug.cgi?id=101415
        for the final goal.

        No new tests, this is is just a rename and minor style fix.

        * CMakeLists.txt:
        * GNUmakefile.list.am:
        * Modules/indexeddb/IDBBackingStore.cpp: Renamed from Source/WebCore/Modules/indexeddb/IDBLevelDBBackingStore.cpp.
        * WebCore.gypi:
        * WebCore.xcodeproj/project.pbxproj:

2012-11-07  Adam Barth  <abarth@webkit.org>

        [V8] Prepare DOMDataStore to be able to store ScriptWrappable wrappers inline
        https://bugs.webkit.org/show_bug.cgi?id=101523

        Unreviewed. Technically this patch hasn't been reviewed, but it is part
        of a patch that was reviewed by Kentaro Hara.

        Sadly, my patch for bug 101110 triggered the regression again. This
        patch is a smaller incremental step towards the patch in bug 101110. It
        doesn't make that much sense on its own, but it will help me isolate
        the source of the regression.

        * bindings/v8/DOMDataStore.h:
        (WebCore::DOMDataStore::get):
        (DOMDataStore):
        (WebCore::DOMDataStore::set):
        (WebCore::DOMDataStore::wrapperIsStoredInObject):
        (WebCore::DOMDataStore::getWrapperFromObject):
        (WebCore::DOMDataStore::setWrapperInObject):

2012-11-05  Ryosuke Niwa  <rniwa@webkit.org>

        SimplifyMarkupCommand takes a disproportionally long time to run when there are many nodes to remove
        https://bugs.webkit.org/show_bug.cgi?id=101144

        Reviewed by Enrica Casucci.

        The bug was caused by attach() happening between each node removal. Since the command was trying
        to remove millions of node in some cases, attach()ing render objects for each node being reinserted
        imposed a huge runtime cost.

        Fixed the bug by using lazy attach when removing nodes and avoiding calls to isContentEditable.
        Also remove all ancestors at once when they are direct child/parent of each other so that we don't
        remove an ancestor and then insert its child back only to remove it again in the next iteration.

        No new tests since it doesn't change the asymptotic performance, and adding a new performance test for
        this specific case is not the worth the increase in the bot cycle time. I'll note that the email
        attached in the original radar bug (<rdar://problem/12179712>) took 100 seconds to open now only takes
        7 seconds to open on my MacPro.

        * editing/AppendNodeCommand.cpp:
        (WebCore::AppendNodeCommand::doApply): Takes a flag indicating whether we should assume nodes are editable
        without calling isContentEditable or not.
        * editing/ApplyStyleCommand.cpp:
        (WebCore::ApplyStyleCommand::applyInlineStyleToPushDown): Update the style as later code requires render
        object.
        * editing/CompositeEditCommand.cpp:
        (WebCore::CompositeEditCommand::insertNodeBefore): Passes a flag to the command.
        (WebCore::CompositeEditCommand::removeNode): Ditto.
        (WebCore::CompositeEditCommand::removeNodePreservingChildren): Ditto.
        * editing/CompositeEditCommand.h:
        (CompositeEditCommand):
        * editing/DeleteSelectionCommand.cpp:
        (WebCore::DeleteSelectionCommand::removeNode): Takes a flag indicating whether we should assume nodes are
        editable without calling isContentEditable or not.
        * editing/DeleteSelectionCommand.h:
        (DeleteSelectionCommand):
        * editing/EditCommand.h:
        * editing/InsertIntoTextNodeCommand.cpp:
        (WebCore::InsertIntoTextNodeCommand::doApply): Update the layout when password echo is enabled since
        we need to have render objects for echoing.
        * editing/InsertNodeBeforeCommand.cpp:
        (WebCore::InsertNodeBeforeCommand::InsertNodeBeforeCommand): Ditto.
        (WebCore::InsertNodeBeforeCommand::doApply): Ditto; also always use lazy attach.
        (WebCore::InsertNodeBeforeCommand::doUnapply):
        * editing/InsertNodeBeforeCommand.h:
        (WebCore::InsertNodeBeforeCommand::create):
        (InsertNodeBeforeCommand):
        * editing/RemoveNodeCommand.cpp:
        (WebCore::RemoveNodeCommand::RemoveNodeCommand): Ditto about the flag.
        (WebCore::RemoveNodeCommand::doApply):
        * editing/RemoveNodeCommand.h:
        (WebCore::RemoveNodeCommand::create):
        (RemoveNodeCommand):
        * editing/RemoveNodePreservingChildrenCommand.cpp:
        (WebCore::RemoveNodePreservingChildrenCommand::RemoveNodePreservingChildrenCommand): Ditto.
        (WebCore::RemoveNodePreservingChildrenCommand::doApply):
        * editing/RemoveNodePreservingChildrenCommand.h:
        (WebCore::RemoveNodePreservingChildrenCommand::create):
        (RemoveNodePreservingChildrenCommand):
        * editing/SimplifyMarkupCommand.cpp:
        (WebCore::SimplifyMarkupCommand::doApply):
        (WebCore::SimplifyMarkupCommand::pruneSubsequentAncestorsToRemove): Added to optimize removals of multiple
        ancestors.
        * editing/SimplifyMarkupCommand.h:
        (SimplifyMarkupCommand):

2012-11-07  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r133810.
        http://trac.webkit.org/changeset/133810
        https://bugs.webkit.org/show_bug.cgi?id=101520

        This patch made ws_single_peak_r regress by 15% (Requested by
        abarth on #webkit).

        * bindings/v8/DOMDataStore.cpp:
        (WebCore::DOMDataStore::weakCallback):
        * bindings/v8/DOMDataStore.h:
        (WebCore::DOMDataStore::get):
        (WebCore::DOMDataStore::set):
        (DOMDataStore):

2012-11-07  Elliott Sprehn  <esprehn@chromium.org>

        Clean up confused use of Document::renderer and renderView
        https://bugs.webkit.org/show_bug.cgi?id=101484

        Reviewed by Ojan Vafai.

        Document::renderer and Document::renderView are the same thing, but it seems
        people don't always realize it and check if document()->renderer() is a RenderView.

        This patch cleans up usage of document()->renderer() and document()->renderView() and
        simplifies the code that was written without realizing they were the same thing.

        No new tests, this is just a refactor.

        * accessibility/AccessibilityRenderObject.cpp:
        (WebCore::AccessibilityRenderObject::visiblePositionForPoint): Lots of simplification.
        * dom/Element.cpp:
        (WebCore::Element::screenRect):
        (WebCore::Element::unregisterNamedFlowContentNode): Remove unneeded conditional.
        * editing/FrameSelection.cpp: Remove verbose casts.
        (WebCore::clearRenderViewSelection):
        (WebCore::FrameSelection::recomputeCaretRect):
        (WebCore::CaretBase::invalidateCaretRect):
        (WebCore::FrameSelection::focusedOrActiveStateChanged):
        * page/Frame.cpp:
        (WebCore::Frame::contentRenderer): Vastly simplified.
        * page/PrintContext.cpp: Remove verbose casts.
        (WebCore::PrintContext::computePageRects):
        (WebCore::PrintContext::computePageRectsWithPageSizeInternal):
        * page/wince/FrameWinCE.cpp:
        (WebCore::computePageRectsForFrame): Remove unreachable code.
        * rendering/RenderObject.cpp:
        (WebCore::RenderObject::maximalOutlineSize): Remove verbose cast.

2012-11-07  Adam Barth  <abarth@webkit.org>

        [V8] IntrusiveDOMWrapperMap should be usable for more than just Nodes
        https://bugs.webkit.org/show_bug.cgi?id=101110

        Reviewed by Kentaro Hara.

        This patch generalizes our support for storing wrappers in DOM objects
        to be usable for more than just nodes. After this patch, any object
        with a ScriptWrappable base class will have its wrapper stored inline
        in the object in the main world.

        * bindings/v8/DOMDataStore.cpp:
        (WebCore::DOMDataStore::weakCallback):
        * bindings/v8/DOMDataStore.h:
        (WebCore::DOMDataStore::get):
        (WebCore::DOMDataStore::set):

2012-11-07  Tiancheng Jiang  <tijiang@rim.com>

        [BlackBerry] Update BB10 form theme.
        https://bugs.webkit.org/show_bug.cgi?id=100760

        Reviewed by Rob Buis.

        RIM PR 236997
        Internally Reviewed by Jakob Petsovits.

        Set font family to fix DRT test fast/forms/input-type-text-min-width.html

        * platform/blackberry/RenderThemeBlackBerry.cpp:
        (WebCore::RenderThemeBlackBerry::defaultGUIFont):
        (WebCore):
        (WebCore::RenderThemeBlackBerry::systemFont):

2012-11-07  Beth Dakin  <bdakin@apple.com>

        https://bugs.webkit.org/show_bug.cgi?id=101303
        Fixed position elements that are out of view still end up forcing 
        non-threaded scrolling
        -and corresponding-
        <rdar://problem/12642222>

        Reviewed by Simon Fraser.

        Re-name hasNonLayerFixedObjects() to 
        hasVisibleSlowRepaintFixedObjects() and make it virtual. 
        * page/scrolling/ScrollingCoordinator.cpp:
        (WebCore::ScrollingCoordinator::hasVisibleSlowRepaintFixedObjects):
        (WebCore::ScrollingCoordinator::mainThreadScrollingReasons):
        * page/scrolling/ScrollingCoordinator.h:
        (ScrollingCoordinator):

        Override hasVisibleSlowRepaintFixedObjects() to always return false. 
        We don't want to bother with the extra computation in the 
        ScrollingCoordinator implementation, though other ports might still 
        want it.
        * page/scrolling/mac/ScrollingCoordinatorMac.h:
        (WebCore::ScrollingCoordinatorMac::hasVisibleSlowRepaintFixedObjects):
        (ScrollingCoordinatorMac):

        Make this function const so that we can call it from 
        requiresCompositingForPosition().
        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::calculateCompositedBounds):

        Actually be thorough here and check if the fixed object has any 
        descendants that are visible in the view. If it does, then we do 
        want to composite the fixed object.
        (WebCore::RenderLayerCompositor::requiresCompositingForPosition):
        * rendering/RenderLayerCompositor.h:

2012-11-07  Roger Fong  <roger_fong@apple.com>

        Unreviewed. Style fix following r133262.

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::clearMediaPlayer):
        * html/HTMLMediaElement.h:
        (HTMLMediaElement):

2012-11-07  Adam Barth  <abarth@webkit.org>

        [V8] DOMWrapperMap doesn't need to use virtual functions
        https://bugs.webkit.org/show_bug.cgi?id=101494

        Reviewed by Kentaro Hara.

        DOMWrapperMap has only one subclass. There's no reason to use virtual functions.

        * bindings/v8/DOMDataStore.cpp:
        (WebCore::DOMDataStore::DOMDataStore):
        * bindings/v8/DOMWrapperMap.h:
        (WebCore::DOMWrapperMap::DOMWrapperMap):
        (WebCore::DOMWrapperMap::get):
        (WebCore::DOMWrapperMap::set):
        (WebCore::DOMWrapperMap::clear):
        (WebCore::DOMWrapperMap::reportMemoryUsage):
        (WebCore::DOMWrapperMap::remove):
        (WebCore::DOMWrapperMap::defaultWeakCallback):
        * bindings/v8/V8NPObject.cpp:
        (WebCore::staticNPObjectMap):

2012-11-07  Alexandru Chiculita  <achicu@adobe.com>

        [CSS Shaders] Remove the dependency on CustomFilterValidatedProgram from CustomFilterRenderer
        https://bugs.webkit.org/show_bug.cgi?id=101071

        Reviewed by Dean Jackson.

        I've removed the need to get a CustomFilterValidatedProgram from FilterEffectRenderer. It was only
        used to delay the compilation of the shader until it was really needed. Instead, the FilterEffectRenderer
        will directly get the compiled shader in the constructor. The callers that still want to avoid 
        compiling the shader until it is really needed can use the setCompiledProgram to inject the shader
        at a later time, before painting.

        No new tests, the change is covered by the css3/filters/custom/ tests.

        * platform/graphics/filters/CustomFilterConstants.h:
        * platform/graphics/filters/CustomFilterProgramInfo.h:
        * platform/graphics/filters/CustomFilterRenderer.cpp:
        (WebCore::CustomFilterRenderer::create):
        (WebCore::CustomFilterRenderer::CustomFilterRenderer):
        (WebCore::CustomFilterRenderer::premultipliedAlpha):
        (WebCore::CustomFilterRenderer::setCompiledProgram):
        (WebCore):
        (WebCore::CustomFilterRenderer::prepareForDrawing):
        (WebCore::CustomFilterRenderer::bindProgramAndBuffers):
        * platform/graphics/filters/CustomFilterRenderer.h:
        (WebCore):
        (CustomFilterRenderer):
        (WebCore::CustomFilterRenderer::compiledProgram):
        * platform/graphics/filters/FECustomFilter.cpp:
        (WebCore::FECustomFilter::FECustomFilter):
        (WebCore::FECustomFilter::prepareForDrawing):
        * platform/graphics/filters/FECustomFilter.h:
        (FECustomFilter):

2012-11-07  Adam Barth  <abarth@webkit.org>

        [V8] IntrusiveDOMWrapperMap is no longer needed and can be deleted
        https://bugs.webkit.org/show_bug.cgi?id=101493

        Reviewed by Kentaro Hara.

        This patch is another incremental step towards landing the patch in bug
        101110. In this patch, we delete IntrusiveDOMWrapperMap, which is no
        longer needed.

        * WebCore.gypi:
        * bindings/v8/DOMDataStore.cpp:
        (WebCore::DOMDataStore::DOMDataStore):
        (WebCore::DOMDataStore::~DOMDataStore):
        (WebCore::DOMDataStore::reportMemoryUsage):
        (WebCore::DOMDataStore::weakCallback):
        (WebCore):
        * bindings/v8/DOMDataStore.h:
        (WebCore::DOMDataStore::get):
        (WebCore::DOMDataStore::set):
        (DOMDataStore):
        * bindings/v8/IntrusiveDOMWrapperMap.h: Removed.
        * bindings/v8/V8GCController.cpp:

2012-11-07  Sudarsana Nagineni  <sudarsana.nagineni@intel.com>

        [AC] glXChooseFBConfig() and glXGetVisualFromFBConfig() return values are leaking in GraphicsSurface
        https://bugs.webkit.org/show_bug.cgi?id=101475

        Reviewed by Kenneth Rohde Christiansen.

        Free the memory returned by glXChooseFBConfig and glXGetVisualFromFBConfig
        using XFree to avoid memory leaks.

        No tests. No change in behavior.

        * platform/graphics/surfaces/qt/GraphicsSurfaceGLX.cpp:
        (WebCore::GraphicsSurfacePrivate::~GraphicsSurfacePrivate):
        (WebCore::GraphicsSurfacePrivate::createSurface):

2012-11-07  Fady Samuel  <fsamuel@chromium.org>

        Autoresize should work even if turned on while the page is loading.
        https://bugs.webkit.org/show_bug.cgi?id=101380

        Reviewed by David Levin.

        Autoresize does not work in cases where it is turned on while loading.
        This patch addresses this by allowing autoSize to complete if it's turned on
        while loading and doing a final pass after loading.

        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::checkCompleted):
        Adjust to call renamed function.
        * page/FrameView.cpp:
        (WebCore::FrameView::handleLoadCompleted):
        Rename function to encompass its expanded responsibilities (which include doing the final auto size after the load is completed).
        (WebCore::FrameView::autoSizeIfEnabled):
        Allow the size to shrink if autosize is adjusted while the page is loading.
        * page/FrameView.h:
        (FrameView):
        Renamed 'checkFlushDeferredRepaintsAfterLoadComplete' to 'handleLoadComplete'

2012-11-07  Philip Rogers  <pdr@google.com>

        Skip SVG repaint tracking when parent container transforms
        https://bugs.webkit.org/show_bug.cgi?id=101177

        Reviewed by Eric Seidel.

        This patch skips child repaint rect checks when a parent container is transformed, leading
        to a 75% increase on the RoboHornet SVG benchmark:
            http://www.robohornet.org/#et=svg  (average of 2 runs)
            Before patch: 161.6ms
            After patch: 38.5ms

        SVG transforms are relative to the local container which makes calculating an absolute
        repaint rect expensive because it requires multiplying the local repaint rect by each
        parent container's local transform. See SVGRenderSupport::computeFloatRectForRepaint
        as an example of this calculation.

        This patch takes advantage of SVG's container rules: when a parent container's transform
        changes, all children must be repainted (there is no absolute positioning in SVG).
        SVGRenderSupport::checkForSVGRepaintDuringLayout has been added which checks for whether
        the parent transform changed before doing child repaint checks. A similar optimization is
        used in HTML (see RenderObject::checkForRepaintDuringLayout) where no repaint checking
        is done when the view is fully repainted.

        This code is tested in existing tests.

        * rendering/svg/RenderSVGContainer.cpp:
        (WebCore::RenderSVGContainer::layout):
        * rendering/svg/RenderSVGForeignObject.cpp:
        (WebCore::RenderSVGForeignObject::layout):
        * rendering/svg/RenderSVGImage.cpp:
        (WebCore::RenderSVGImage::layout):
        * rendering/svg/RenderSVGShape.cpp:
        (WebCore::RenderSVGShape::layout):
        * rendering/svg/RenderSVGText.cpp:
        (WebCore::RenderSVGText::layout):
        * rendering/svg/SVGRenderSupport.cpp:
        (WebCore::SVGRenderSupport::checkForSVGRepaintDuringLayout):
        (WebCore):
        * rendering/svg/SVGRenderSupport.h:
        (SVGRenderSupport):

2012-11-07  Chris Fleizach  <cfleizach@apple.com>

        AX: Textfields don't get focus when navigated to from 'show all tabs' button
        https://bugs.webkit.org/show_bug.cgi?id=101369

        Reviewed by Darin Adler.

        When focus leaves a webpage, the webpage does not normally clear its focused node. When focus
        returns (through tab, or mouse click), then focus will be cleared and restored.

        However, when focus is returned through accessibility means, focus is not cleared first, which
        means subsequent focus actions do nothing.

        This fix will check if the focused node is the same as the node being focused, and if so, clear the focus first.

        Making a layout test for this is not possible because it requires setting focus to something in the chrome, and then
        moving focus back to the webpage.
      
        * accessibility/AccessibilityRenderObject.cpp:
        (WebCore::AccessibilityRenderObject::setFocused):

2012-11-07  Adam Barth  <abarth@webkit.org>

        [V8] We should hide the DOMWrapperMaps inside DOMDataStore
        https://bugs.webkit.org/show_bug.cgi?id=101430

        Reviewed by Kentaro Hara.

        This is yet another incremental step towards landing the patch in bug
        101110. In this patch, we hide the existence of DOMWrapperMaps inside
        DOMDataStore. In the process, we can remove V8DOMMap.cpp.

        * UseV8.cmake:
        * WebCore.gypi:
        * bindings/v8/DOMDataStore.h:
        (WebCore::DOMDataStore::set):
        * bindings/v8/DOMWrapperWorld.h:
        * bindings/v8/ScriptProfiler.cpp:
        * bindings/v8/SerializedScriptValue.cpp:
        (WebCore::neuterBinding):
        * bindings/v8/V8DOMMap.cpp: Removed.
        * bindings/v8/V8DOMMap.h: Removed.
        * bindings/v8/V8DOMWindowShell.cpp:
        * bindings/v8/V8DOMWrapper.h:
        (WebCore::V8DOMWrapper::getCachedWrapper):
        (WebCore::V8DOMWrapper::setWrapperClass):
        (WebCore::V8DOMWrapper::setJSWrapperForDOMObject):
        * bindings/v8/V8NPObject.cpp:
        * bindings/v8/WorkerContextExecutionProxy.cpp:
        * bindings/v8/WorkerScriptController.cpp:

2012-11-07  Varun Jain  <varunjain@chromium.org>

        Add new gesture type, LongTap, which is basically the completion of a GestureLongPress
        https://bugs.webkit.org/show_bug.cgi?id=101385

        Reviewed by Adam Barth.

        Test: Only creating the new enum. No functionality change, hence no tests required.

        * platform/PlatformEvent.h:

2012-11-05  Emil A Eklund  <eae@chromium.org>

        Remove LayoutTypes abstraction
        https://bugs.webkit.org/show_bug.cgi?id=93050

        Reviewed by Levi Weintraub.

        Remove LayoutTypes abstraction and rename FractionalLayout* to
        Layout* now that all platforms use the FractionalLayout version
        (albeit with different fractions).

        No new tests, no change in functionality.

        * CMakeLists.txt:
        * GNUmakefile.list.am:
        * Target.pri:
        * WebCore.exp.in:
        * WebCore.gypi:
        * WebCore.vcproj/WebCore.vcproj:
        * WebCore.xcodeproj/project.pbxproj:
        * accessibility/AccessibilityNodeObject.cpp:
        * accessibility/AccessibilityNodeObject.h:
        * accessibility/AccessibilityObject.h:
        * accessibility/AccessibilityRenderObject.h:
        * css/LengthFunctions.cpp:
        * css/LengthFunctions.h:
        * dom/Document.h:
        * dom/DocumentMarkerController.h:
        * dom/ElementRareData.h:
        * dom/MouseRelatedEvent.h:
        * dom/Node.h:
        * dom/Touch.h:
        * editing/FrameSelection.cpp:
        * editing/FrameSelection.h:
        * editing/RenderedPosition.h:
        * html/HTMLAreaElement.h:
        * inspector/InspectorOverlay.h:
        * inspector/InspectorTimelineAgent.h:
        * inspector/TimelineRecordFactory.cpp:
        * inspector/TimelineRecordFactory.h:
        * loader/cache/CachedImage.h:
        * page/FocusController.h:
        * page/FrameView.h:
        * page/Page.h:
        * page/SpatialNavigation.cpp:
        * page/SpatialNavigation.h:
        * platform/FractionalLayoutUnit.h: Removed.
        * platform/LayoutUnit.h: Copied from Source/WebCore/platform/FractionalLayoutUnit.h.
        * platform/Length.h:
        * platform/PopupMenuClient.h:
        * platform/animation/AnimationUtilities.h:
        * platform/graphics/FloatPoint.cpp:
        * platform/graphics/FloatPoint.h:
        * platform/graphics/FloatRect.cpp:
        * platform/graphics/FloatRect.h:
        * platform/graphics/FloatSize.cpp:
        * platform/graphics/FloatSize.h:
        * platform/graphics/FractionalLayoutBoxExtent.cpp: Removed.
        * platform/graphics/FractionalLayoutBoxExtent.h: Removed.
        * platform/graphics/FractionalLayoutPoint.h: Removed.
        * platform/graphics/FractionalLayoutRect.cpp: Removed.
        * platform/graphics/FractionalLayoutRect.h: Removed.
        * platform/graphics/FractionalLayoutSize.h: Removed.
        * platform/graphics/GraphicsLayer.cpp:
        * platform/graphics/GraphicsLayerAnimation.cpp:
        * platform/graphics/IntRect.cpp:
        * platform/graphics/IntRect.h:
        * platform/graphics/LayoutBoxExtent.cpp: Copied from Source/WebCore/platform/graphics/FractionalLayoutBoxExtent.cpp.
        * platform/graphics/LayoutBoxExtent.h: Copied from Source/WebCore/platform/graphics/FractionalLayoutBoxExtent.h.
        * platform/graphics/LayoutPoint.h: Copied from Source/WebCore/platform/graphics/FractionalLayoutPoint.h.
        * platform/graphics/LayoutRect.cpp: Copied from Source/WebCore/platform/graphics/FractionalLayoutRect.cpp.
        * platform/graphics/LayoutRect.h: Copied from Source/WebCore/platform/graphics/FractionalLayoutRect.h.
        * platform/graphics/LayoutSize.h: Copied from Source/WebCore/platform/graphics/FractionalLayoutSize.h.
        * platform/graphics/MediaPlayer.h:
        * platform/graphics/filters/CustomFilterOperation.h:
        * platform/graphics/filters/CustomFilterParameterList.h:
        * platform/graphics/filters/FilterOperation.h:
        * platform/graphics/filters/FilterOperations.h:
        * platform/graphics/filters/ValidatedCustomFilterOperation.cpp:
        * platform/graphics/filters/ValidatedCustomFilterOperation.h:
        * platform/graphics/qt/FractionalLayoutPointQt.cpp: Removed.
        * platform/graphics/qt/FractionalLayoutRectQt.cpp: Removed.
        * platform/graphics/qt/FractionalLayoutSizeQt.cpp: Removed.
        * platform/graphics/qt/LayoutPointQt.cpp: Copied from Source/WebCore/platform/graphics/qt/FractionalLayoutPointQt.cpp.
        * platform/graphics/qt/LayoutRectQt.cpp: Added.
        * platform/graphics/qt/LayoutSizeQt.cpp: Copied from Source/WebCore/platform/graphics/qt/FractionalLayoutSizeQt.cpp.
        * platform/graphics/transforms/TransformOperations.h:
        * platform/graphics/transforms/TransformState.h:
        * platform/graphics/transforms/TransformationMatrix.cpp:
        * platform/graphics/transforms/TransformationMatrix.h:
        * rendering/AutoTableLayout.h:
        * rendering/ColumnInfo.h:
        * rendering/ExclusionShapeInsideInfo.h:
        * rendering/FilterEffectRenderer.h:
        * rendering/FixedTableLayout.h:
        * rendering/GapRects.h:
        * rendering/HitTestResult.h:
        * rendering/HitTestingTransformState.cpp:
        * rendering/HitTestingTransformState.h:
        * rendering/InlineFlowBox.cpp:
        * rendering/LayoutRepainter.cpp:
        * rendering/LayoutRepainter.h:
        * rendering/LayoutState.h:
        * rendering/LayoutTypes.h:
        * rendering/LayoutTypesInlineMethods.h:
        * rendering/PaintInfo.h:
        * rendering/RenderBlock.cpp:
        * rendering/RenderBlock.h:
        * rendering/RenderBlockLineLayout.cpp:
        * rendering/RenderBox.cpp:
        * rendering/RenderBox.h:
        * rendering/RenderBoxModelObject.cpp:
        * rendering/RenderBoxModelObject.h:
        * rendering/RenderDeprecatedFlexibleBox.cpp:
        * rendering/RenderFieldset.cpp:
        * rendering/RenderFlexibleBox.cpp:
        * rendering/RenderFlowThread.cpp:
        * rendering/RenderGeometryMap.h:
        * rendering/RenderImageResource.h:
        * rendering/RenderInline.cpp:
        * rendering/RenderLayer.cpp:
        * rendering/RenderLayerFilterInfo.h:
        * rendering/RenderLineBoxList.cpp:
        * rendering/RenderListMarker.cpp:
        * rendering/RenderMarquee.cpp:
        * rendering/RenderMenuList.h:
        * rendering/RenderMultiColumnBlock.cpp:
        * rendering/RenderMultiColumnSet.cpp:
        * rendering/RenderNamedFlowThread.cpp:
        * rendering/RenderObject.cpp:
        * rendering/RenderObject.h:
        * rendering/RenderOverflow.h:
        * rendering/RenderRegion.cpp:
        * rendering/RenderReplaced.cpp:
        * rendering/RenderTable.cpp:
        * rendering/RenderTable.h:
        * rendering/RenderText.cpp:
        * rendering/RenderThemeChromiumCommon.cpp:
        * rendering/RenderThemeChromiumCommon.h:
        * rendering/RenderTreeAsText.cpp:
        * rendering/RenderTreeAsText.h:
        * rendering/RenderView.h:
        * rendering/style/NinePieceImage.h:
        * rendering/style/RenderStyle.h:
        * rendering/style/ShadowData.cpp:
        * rendering/style/ShadowData.h:
        * rendering/style/StyleCachedImageSet.h:
        * rendering/style/StyleImage.h:
        * rendering/svg/SVGRenderSupport.h:

2012-11-07  Alexandru Chiculita  <achicu@adobe.com>

        CoordinatedGraphicsArgumentCoders should use ValidatedCustomFitlerOperation instead
        https://bugs.webkit.org/show_bug.cgi?id=100905

        Reviewed by Noam Rosenthal.

        Added getters for the validated shaders, so that platform code could extract them.

        No new tests, just added two getters.

        * platform/graphics/filters/CustomFilterValidatedProgram.h:
        (WebCore::CustomFilterValidatedProgram::validatedVertexShader):
        (WebCore::CustomFilterValidatedProgram::validatedFragmentShader):
        (CustomFilterValidatedProgram):

2012-11-07  Joshua Bell  <jsbell@chromium.org>

        IndexedDB: Assertion failure with open() within upgradeneeded
        https://bugs.webkit.org/show_bug.cgi?id=96947

        Reviewed by Dimitri Glazkov.

        Postpone creation of the "pending second half open" until the version change
        transaction has started.

        Test: storage/indexeddb/unblocked-version-changes.html

        * Modules/indexeddb/IDBDatabaseBackendImpl.cpp:
        (WebCore::IDBDatabaseBackendImpl::setIntVersionInternal):
        (WebCore::IDBDatabaseBackendImpl::runIntVersionChangeTransaction):
        * Modules/indexeddb/IDBDatabaseBackendImpl.h:
        (IDBDatabaseBackendImpl):
        * Modules/indexeddb/IDBDatabaseCallbacks.h:

2012-11-07  Alexandru Chiculita  <achicu@adobe.com>

        [CSS Shaders] Add CustomFilterMeshBoxType to ValidatedCustomFilterOperation
        https://bugs.webkit.org/show_bug.cgi?id=100890

        Reviewed by Dean Jackson.

        Added the CustomFilterMeshBoxType parameter to the ValidatedCustomFilterOperation.

        No new tests, this parameter is not used in the implementation yet.

        * platform/graphics/filters/ValidatedCustomFilterOperation.cpp:
        (WebCore::ValidatedCustomFilterOperation::ValidatedCustomFilterOperation):
        * platform/graphics/filters/ValidatedCustomFilterOperation.h:
        (WebCore::ValidatedCustomFilterOperation::create):
        (WebCore::ValidatedCustomFilterOperation::meshBoxType):
        (WebCore::ValidatedCustomFilterOperation::operator==):
        (ValidatedCustomFilterOperation):
        * rendering/FilterEffectRenderer.cpp:
        (WebCore::createCustomFilterEffect):
        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::computeFilterOperations):

2012-11-07  Sergio Villar Senin  <svillar@igalia.com>

        [Qt] Implement deleteCookie() for persistent storage
        https://bugs.webkit.org/show_bug.cgi?id=101272

        Reviewed by Jocelyn Turcotte.

        Individual cookies were never persistently cleared as the
        deleteCookie() virtual method was not implemented for persistent
        storage. That's why cookies were only deleted for the current
        session.

        * platform/qt/CookieJarQt.cpp:
        (WebCore::SharedCookieJarQt::deleteCookie):
        (WebCore): added deleteCookie() implementation for persistent
        storage.
        * platform/qt/CookieJarQt.h:
        (SharedCookieJarQt):

2012-11-07  Shinya Kawanaka  <shinyak@chromium.org>

        [Shadow] Style should update when 'pseudo' attribute is dynamically updated
        https://bugs.webkit.org/show_bug.cgi?id=100918

        Reviewed by Dimitri Glazkov.

        When 'pseudo' attribute is changed and its element is in ShadowTree, we enable the styleShouldRecalc flag.

        It would be fast if we have a set of pseudo attribute style value in RuleFeatureSet,
        but it might consume a lot of memory.

        Test: fast/dom/shadow/pseudo-attribute-dynamic.html

        * dom/Element.cpp:
        (WebCore::Element::attributeChanged):

2012-11-07  Ulan Degenbaev  <ulan@chromium.org>

        [V8] WebKit sends unnecessary low memory notification when running memory benchmarks
        https://bugs.webkit.org/show_bug.cgi?id=101474

        Reviewed by Kentaro Hara.

        Do not send low memory notification to V8 when most of memory usage
        comes from V8 heap and not DOM objects. In this case V8 can schedule GC
        itself more optimally.

        * bindings/v8/V8GCController.cpp:
        (WebCore::V8GCController::checkMemoryUsage):

2012-11-07  Allan Sandfeld Jensen  <allan.jensen@digia.com>

        [Qt] Open link in this window action
        https://bugs.webkit.org/show_bug.cgi?id=101226

        Reviewed by Simon Hausmann.

        Adds the action to the WebCore context-menu controller.

        * page/ContextMenuController.cpp:
        (WebCore::ContextMenuController::contextMenuItemSelected):
        (WebCore::ContextMenuController::checkOrEnableIfNeeded):
        * platform/ContextMenuItem.h:
        * platform/LocalizedStrings.h:
        * platform/qt/LocalizedStringsQt.cpp:
        (WebCore::contextMenuItemTagOpenLinkInThisWindow):

2012-11-07  Andrey Adaikin  <aandrey@chromium.org>

        Web Inspector: [Canvas] closure compiler fixes
        https://bugs.webkit.org/show_bug.cgi?id=101459

        Reviewed by Pavel Feldman.

        * inspector/InjectedScriptCanvasModuleSource.js:
        (.):

2012-11-07  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r133712.
        http://trac.webkit.org/changeset/133712
        https://bugs.webkit.org/show_bug.cgi?id=101461

        Broke fast/forms/time* tests on chromium-win. (Requested by
        mkwst on #webkit).

        * platform/text/win/LocaleWin.cpp:
        (WebCore::DateFormatToken::DateFormatToken):
        (DateFormatToken):
        (WebCore):
        (WebCore::isEraSymbol):
        (WebCore::isYearSymbol):
        (WebCore::isMonthSymbol):
        (WebCore::isDaySymbol):
        (WebCore::commitLiteralToken):
        (WebCore::parseDateFormat):
        (WebCore::LocaleWin::ensureShortDateTokens):
        (WebCore::convertWindowsDateFormatToLDML):
        (WebCore::mapCharacterToDateTimeFieldType):
        (WebCore::convertWindowsTimeFormatToLDML):
        (WebCore::LocaleWin::dateFormat):
        (WebCore::LocaleWin::monthFormat):
        (WebCore::LocaleWin::timeFormat):
        (WebCore::LocaleWin::shortTimeFormat):
        * platform/text/win/LocaleWin.h:
        (LocaleWin):

2012-11-07  Vsevolod Vlasov  <vsevik@chromium.org>

        Web Inspector: [Regression] Editing formatted source should not be allowed.
        https://bugs.webkit.org/show_bug.cgi?id=101355

        Reviewed by Pavel Feldman.

        * inspector/front-end/JavaScriptSourceFrame.js:
        (WebInspector.JavaScriptSourceFrame.prototype._onFormattedChanged):
        * inspector/front-end/UISourceCodeFrame.js:
        (WebInspector.UISourceCodeFrame.prototype._onFormattedChanged):

2012-11-07  Shinya Kawanaka  <shinyak@chromium.org>

        [Shadow] Use setPseudo() instead of setShadowPseudoId().
        https://bugs.webkit.org/show_bug.cgi?id=101306

        Reviewed by Kent Tamura.

        We would like to remove setShadowPseudoId() and use setPseudo() instead, since ShadowDOM spec now has
        'pseudo' attribute.

        We change all setShadowPseudoId() invocation to setPseudo() invocation. Also, when AtomicString is not
        constructed with AtomicStringFromLiteral, we use it.

        No new tests, refactoring.

        * WebCore.exp.in:
        * dom/Element.cpp:
        * dom/Element.h:
        (Element):
        * html/BaseMultipleFieldsDateAndTimeInputType.cpp:
        (WebCore::BaseMultipleFieldsDateAndTimeInputType::createShadowSubtree):
        * html/ColorInputType.cpp:
        (WebCore::ColorInputType::createShadowSubtree):
        * html/HTMLTextAreaElement.cpp:
        (WebCore::HTMLTextAreaElement::updatePlaceholderText):
        * html/RangeInputType.cpp:
        (WebCore::RangeInputType::createShadowSubtree):
        * html/TextFieldInputType.cpp:
        (WebCore::TextFieldInputType::createShadowSubtree):
        (WebCore::TextFieldInputType::updatePlaceholderText):
        * html/ValidationMessage.cpp:
        (WebCore::ValidationMessage::buildBubbleTree):
        * html/shadow/DateTimeEditElement.cpp:
        (WebCore::DateTimeEditBuilder::visitLiteral):
        (WebCore::DateTimeEditElement::DateTimeEditElement):
        * html/shadow/DateTimeFieldElement.cpp:
        (WebCore::DateTimeFieldElement::initialize):
        * html/shadow/DateTimeFieldElement.h:
        (DateTimeFieldElement):
        * html/shadow/PickerIndicatorElement.cpp:
        (WebCore::PickerIndicatorElement::PickerIndicatorElement):
        * html/track/TextTrackCue.cpp:
        (WebCore::TextTrackCueBox::TextTrackCueBox):
        (WebCore::TextTrackCue::updateDisplayTree):
        * testing/Internals.cpp:
        (WebCore::Internals::setShadowPseudoId):

2012-11-07  Andrey Adaikin  <aandrey@chromium.org>

        Web Inspector: [Canvas] Save CanvasGradient objects state for a replay
        https://bugs.webkit.org/show_bug.cgi?id=101432

        Reviewed by Pavel Feldman.

        Save CanvasGradient resource state for a subsequent replay. The gradient's state is modified by the gradient.addColorStop() call.

        Test: inspector/profiler/canvas2d/canvas2d-gradient-capturing.html

        * inspector/InjectedScriptCanvasModuleSource.js:
        (.):

2012-11-07  Vsevolod Vlasov  <vsevik@chromium.org>

        Web Inspector: [Regression] Snippets evaluations should not appear in Sources tab of navigator.
        https://bugs.webkit.org/show_bug.cgi?id=101354

        Reviewed by Pavel Feldman.

        * inspector/front-end/DebuggerScriptMapping.js:
        * inspector/front-end/NetworkUISourceCodeProvider.js:
        (WebInspector.NetworkUISourceCodeProvider.prototype._parsedScriptSource):
        * inspector/front-end/Script.js:
        (WebInspector.Script.prototype.isSnippet):
        * inspector/front-end/ScriptSnippetModel.js:
        (WebInspector.ScriptSnippetModel.prototype._snippetIdForSourceURL):

2012-11-07  Dan Carney  <dcarney@google.com>

        [V8] Cleanup V8DOMWrapper::getCachedWrapper
        https://bugs.webkit.org/show_bug.cgi?id=100853

        Reviewed by Adam Barth.

        Slight cleanup. Removed redundant branch.

        No new tests. No change in functionality.

        * bindings/v8/V8DOMWrapper.h:
        (WebCore::V8DOMWrapper::getCachedWrapper):

2012-11-07  Simon Hausmann  <simon.hausmann@digia.com>

        [Qt] Unreviewed trivial build fix adapting to QtMultimedia API changes

        The QtMultimedia namespace is now called QMultimedia and
        QtMultimedia::MetaData is now QMediaMetaData.

        * platform/graphics/qt/MediaPlayerPrivateQt.cpp:
        (WebCore::MediaPlayerPrivateQt::supportsType):
        (WebCore::MediaPlayerPrivateQt::totalBytes):

2012-11-07  Christophe Dumez  <christophe.dumez@intel.com>

        Add replaceWithLiteral() method to WTF::String
        https://bugs.webkit.org/show_bug.cgi?id=101257

        Reviewed by Benjamin Poulain.

        Substitute String::replace() calls by String::replaceWithLiteral() where
        adequate, for efficiency.

        No new tests, no behavior change.

        * dom/Node.cpp:
        (WebCore::Node::showNode):
        * editing/EditingStyle.cpp:
        (WebCore::StyleChange::extractTextStyles):
        * editing/MarkupAccumulator.cpp:
        (WebCore::MarkupAccumulator::appendQuotedURLAttributeValue):
        * html/HTMLAnchorElement.cpp:
        (WebCore::HTMLAnchorElement::setSearch):
        * loader/FormSubmission.cpp:
        (WebCore::appendMailtoPostFormDataToURL):
        * platform/network/soup/ProxyResolverSoup.cpp:
        (soupProxyResolverWkSetProperty):
        * plugins/PluginView.cpp:
        (WebCore::makeURL):
        * rendering/InlineTextBox.cpp:
        (WebCore::InlineTextBox::showBox):
        * xml/XSLTProcessor.cpp:
        (WebCore::transformTextStringToXHTMLDocumentString):

2012-11-07  Kenneth Rohde Christiansen  <kenneth@webkit.org>

        Remove support for "desktop-width" in the viewport meta tag
        https://bugs.webkit.org/show_bug.cgi?id=101217

        Reviewed by Gyuyoung Kim.

        This has been removed from the CSS Device Adaptation spec, and
        should be safe to remove as it is not documented anywhere (neither
        in blog posts).

        The viewport meta should only support the legacy features.

        * dom/ViewportArguments.cpp:
        (WebCore::computeViewportAttributes):
        (WebCore::findSizeValue):
        (WebCore::findScaleValue):
        (WebCore::findUserScalableValue):
        * dom/ViewportArguments.h:

2012-11-07  Dominik Röttsches  <dominik.rottsches@intel.com>

        [EFL] Fix execution of exif-orientation-image-document.html on EFL Wk2 bot
        https://bugs.webkit.org/show_bug.cgi?id=101343

        Reviewed by Kenneth Rohde Christiansen.

        Add Cairo to the list of backends that support shouldRespectImageOrientation.

        No new tests, fixes exif-orientation-image-document.html.

        * rendering/RenderObject.cpp:
        (WebCore::RenderObject::shouldRespectImageOrientation):

2012-11-06  Yury Semikhatsky  <yurys@chromium.org>

        Console not displaying all properties of an Object once native Constructor overwritten
        https://bugs.webkit.org/show_bug.cgi?id=101320

        Reviewed by Pavel Feldman.

        Use Object instance from {}.constructor when formatting inspector messages in the
        injected script. Otherwise inspected page may overwrite Object value and break inspector.

        Test: inspector/console/console-Object-overwritten.html

        * inspector/InjectedScriptSource.js:

2012-11-06  Keishi Hattori  <keishi@webkit.org>

        Implement month picking to calendar picker
        https://bugs.webkit.org/show_bug.cgi?id=101333

        Reviewed by Kent Tamura.

        This adds month picker mode to CalendarPicker.

        No new tests. Tests will be added later when this feature is enabled in DRT.

        * Resources/pagepopups/calendarPicker.css:
        (.month-mode .day): Remove rounded corners when in month mode.
        * Resources/pagepopups/calendarPicker.js:
        (Month.createFromToday): Creates month containing today.
        (CalendarPicker): Set this.selectionConstructor to Day or Month depending on the mode. Create DayTables or MonthPickerDaysTable depending on the mode.
        (CalendarPicker.prototype.handleToday):
        (CalendarPicker.prototype._layoutButtons):
        (DaysTable.prototype._renderMonth): Set element.dataset.monthValue for all date nodes.
        (DaysTable.prototype._markRangeAsSelected): Marks all day nodes in range as selected.
        (DaysTable.prototype.selectRange): Selects a day.
        (DaysTable.prototype.selectRangeAndShowEntireRange): Same as selectRange.
        (DaysTable.prototype._selectRangeContainingNode):
        (DaysTable.prototype._rangeForNode): Returns Day for node.
        (DaysTable.prototype.startDate): Start datetime of visible date range. This value is inclusive.
        (DaysTable.prototype.endDate): End datetime of visible date range. This value is exclusive.
        (DaysTable.prototype._handleKey):
        (MonthPickerDaysTable):
        (MonthPickerDaysTable.prototype._markRangeAsSelected): Marks all day nodes in range as selected.
        (MonthPickerDaysTable.prototype.selectRange): Selects month. If month is not visible, navigates to that month.
        (MonthPickerDaysTable.prototype.selectRangeAndShowEntireRange): Selects month. Navigates to the month.
        (MonthPickerDaysTable.prototype._rangeForNode): Returns Month for node.
        (MonthPickerDaysTable.prototype._handleKey): Arrow keys simply move the selection forwards or backwards.

2012-11-06  Dan Beam  <dbeam@chromium.org>

        Enable REQUEST_AUTOCOMPLETE for chromium port
        https://bugs.webkit.org/show_bug.cgi?id=101376

        Reviewed by Adam Barth.

        Added a runtime enabled feature to control whether HTMLFormElement#requestAutocomplete is visible from JavaScript.

        * bindings/generic/RuntimeEnabledFeatures.cpp:
        (WebCore):
        * bindings/generic/RuntimeEnabledFeatures.h:
        (RuntimeEnabledFeatures):

        Added a binding from RuntimeEnabledFeatures that triggers [V8EnabledAtRuntime=requestAutocomplete].

        (WebCore::RuntimeEnabledFeatures::requestAutocompleteEnabled):

        Added a getter to WebCore to ask whether the runtime flag requestAutocomplete is on.

        (WebCore::RuntimeEnabledFeatures::setRequestAutocompleteEnabled):

        Added a setter to WebCore to affect the runtime flag requestAutocomplete.

        * html/HTMLFormElement.idl:

        Wrapped commonly grouped features in an #if defined(ENABLED_REQUEST_AUTOCOMPLETE) block and added [V8EnableAtRuntime]
        so these features can be changed with a command line switch in the chromium port.

2012-11-06  Adam Barth  <abarth@webkit.org>

        [V8] Unify setJSWrapperForDOMObject and setJSWrapperForDOMNode
        https://bugs.webkit.org/show_bug.cgi?id=101422

        Reviewed by Kentaro Hara.

        This patch is another incremental step towards the patch in Bug 10110.
        In this step, we unify setJSWrapperForDOMObject and
        setJSWrapperForDOMNode.

        * bindings/scripts/CodeGeneratorV8.pm:
        (GenerateHeader):
        (GenerateNormalAttrGetter):
        (GenerateConstructorCallback):
        (GenerateNamedConstructorCallback):
        (GenerateToV8Converters):
        * bindings/scripts/test/V8/V8Float64Array.h:
        (WebCore::V8Float64Array::wrap):
        * bindings/scripts/test/V8/V8TestActiveDOMObject.h:
        (WebCore::V8TestActiveDOMObject::wrap):
        * bindings/scripts/test/V8/V8TestCustomNamedGetter.h:
        (WebCore::V8TestCustomNamedGetter::wrap):
        * bindings/scripts/test/V8/V8TestEventConstructor.h:
        (WebCore::V8TestEventConstructor::wrap):
        * bindings/scripts/test/V8/V8TestEventTarget.h:
        (WebCore::V8TestEventTarget::wrap):
        * bindings/scripts/test/V8/V8TestException.h:
        (WebCore::V8TestException::wrap):
        * bindings/scripts/test/V8/V8TestInterface.h:
        (WebCore::V8TestInterface::wrap):
        * bindings/scripts/test/V8/V8TestMediaQueryListListener.h:
        (WebCore::V8TestMediaQueryListListener::wrap):
        * bindings/scripts/test/V8/V8TestNamedConstructor.h:
        (WebCore::V8TestNamedConstructor::wrap):
        * bindings/scripts/test/V8/V8TestNode.cpp:
        (WebCore::V8TestNode::constructorCallback):
        (WebCore::V8TestNode::wrapSlow):
        * bindings/scripts/test/V8/V8TestObj.cpp:
        (WebCore::TestObjV8Internal::readOnlyTestObjAttrAttrGetter):
        * bindings/scripts/test/V8/V8TestObj.h:
        (WebCore::V8TestObj::wrap):
        * bindings/scripts/test/V8/V8TestSerializedScriptValueInterface.h:
        (WebCore::V8TestSerializedScriptValueInterface::wrap):
        * bindings/v8/DOMDataStore.cpp:
        (WebCore::DOMDataStore::current):
        * bindings/v8/DOMDataStore.h:
        (WebCore::DOMDataStore::get):
        (DOMDataStore):
        * bindings/v8/V8DOMWrapper.cpp:
        * bindings/v8/V8DOMWrapper.h:
        (V8DOMWrapper):
        (WebCore::V8DOMWrapper::setJSWrapperPrivate):
        (WebCore::V8DOMWrapper::setJSWrapperForDOMObject):
        * bindings/v8/custom/V8HTMLImageElementConstructor.cpp:
        (WebCore::v8HTMLImageElementConstructorCallback):

2012-11-06  Ken Buchanan  <kenrb@chromium.org>

        Crash due to column span under button element
        https://bugs.webkit.org/show_bug.cgi?id=101402

        Reviewed by Abhishek Arya.

        When there is a column-spanning child of a RenderButton
        splitBlocks() must split the RenderButton as well as its
        only permitted direct child, the anonymous block referenced
        by m_inner. A crash was occurring because splitBlocks()
        calls addChildIgnoringAnonymousColumnBlocks() to add the
        cloned m_inner to the cloned RenderButton, which meant the
        m_inner for the cloned RenderButton was not being set even
        though a child was being added. This violates state
        assumptions in the RenderButton code.

        This patch prevents any descendants of RenderButton from
        spanning columns. Also, it adds a precautionary check in
        RenderButton::removeChild() to mitigate problems if similar
        state problems are found in future.

        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::containingColumnsBlock):
        * rendering/RenderButton.cpp:
        (WebCore::RenderButton::removeChild):

2012-11-06  Shinya Kawanaka  <shinyak@chromium.org>

        [Shadow] Pseudo custom-elements should start with 'x-'.
        https://bugs.webkit.org/show_bug.cgi?id=100919

        Reviewed by Dimitri Glazkov.

        Pseuco custom-elements should start with 'x-'. 'Pseudo' starting with '-webkit-' should work
        only in UserAgent ShadowDOM. If it's used in Author ShadowDOM, it should not work.

        Test: fast/dom/shadow/pseudo-attribute-rendering.html

        * css/SelectorChecker.cpp:
        (WebCore::SelectorChecker::checkSelector): Added ShadowRoot type check.

2012-11-06  Chris Evans  <cevans@google.com>

        Re-order variables in BidiRun and LayoutState
        https://bugs.webkit.org/show_bug.cgi?id=100173

        Reviewed by Eric Seidel.

        The variable re-ordering and use of bitfields for bools has two benefits:
        1) Size reduction. sizeof(BidiRun) goes down from 48 to 40 bytes on 64-bit. This is achieved by removing a bool member variable from BidiRun and packing it together with other bools in the BidiCharacterRun base class.
        2) Security improvement. We have a lot of use-after-free in the RenderObject hierarchy, and the RenderArena class protects us from a lot of trouble by ensuring that objects of arbitrary type cannot be overlayed on top of freed RenderObjects. This change additionally makes sure that non-virtual RenderArena allocated objects do not have member variables which fully overlap the freed vtable pointer. This leaves re-used vtable pointers always pointing to either a valid vtable or an invalid address due to the freelist high-bit poisoning.

        This change is exclusively about size savings; it is performance neutral as you would expect, including on Parser/html5-full-render.html

        * platform/text/BidiResolver.h:
        (WebCore::BidiCharacterRun::BidiCharacterRun): impact from re-ordering members.
        (BidiCharacterRun): provide an efficiently packed bit of storage for BidiRun subclass to use, and re-order members to place bools adjacent.
        * rendering/BidiRun.h:
        (WebCore::BidiRun::BidiRun): use base class' efficiently packed bit storage for m_hasHyphen.
        (BidiRun): m_hasHyphen is now stored in the base class.
        * rendering/LayoutState.cpp:
        (WebCore::LayoutState::LayoutState):
        * rendering/LayoutState.h:
        (WebCore::LayoutState::LayoutState): impact from re-ordering members.
        (LayoutState): re-order members to place bools adjacently.

2012-11-06  Kent Tamura  <tkent@chromium.org>

        [Chromium-win] Refactor date/time format conversion code in LocaleWin
        https://bugs.webkit.org/show_bug.cgi?id=101329

        Reviewed by Kentaro Hara.

        convertWindowsDateFormatToLDML and convertWindowsTimeFormatToLDML did
        similar jobs with different code. We can merge them into one function.

        As for the date format conversion, we have tokenized a format string and
        stored token objects into a vector. We skip token object generation and
        generate a LDML-compliant pattern string during parsing.

        No new tests. This should make no behavior changes and
        WebKit/chromium/tests/LocaleWinTest.cpp has test cases.

        * platform/text/win/LocaleWin.cpp:
        (WebCore): Remove DateFormatToken, isFooSymbol, ensureShortDateTokens,
        convertWindowsDateFormatToLDML, mapCharacterToDateTimeFieldType, and
        convertWindowsTimeFormatToLDML.
        (WebCore::commitLiteralToken): Store the result to the specified StringBuilder.
        (WebCore::convertWindowsDateTimeFormat):
        Renamed from parseDateFormat, and supports time format symbols.
        (WebCore::LocaleWin::dateFormat): Use convertWindowsDateTimeFormat.
        (WebCore::LocaleWin::monthFormat): Ditto.
        (WebCore::LocaleWin::timeFormat): Ditto.
        (WebCore::LocaleWin::shortTimeFormat): Ditto.
        * platform/text/win/LocaleWin.h:
        (LocaleWin): Remove ensureShortDateTokens and m_shortDateTokens.

2012-11-06  Elliott Sprehn  <esprehn@chromium.org>

        Make Document::renderer faster by using the cached ptr for RenderView
        https://bugs.webkit.org/show_bug.cgi?id=101409

        Reviewed by Eric Seidel.

        In Bug 101277 I made Document::renderView() just return m_renderView instead
        of casting the result of renderer(). While this made renderView() cheaper it
        makes more sense to just make renderer() faster for Document pointers and
        go back to the out of line method in RenderView.h because lots of places in
        the code do document()->renderer().

        No new tests, this is just a refactor.

        * dom/Document.h:
        (WebCore::Document::renderer):
        * rendering/RenderView.h:
        (WebCore::Document::renderView):

2012-11-06  Adam Barth  <abarth@webkit.org>

        [V8] neuterBinding should remember the type of its argument
        https://bugs.webkit.org/show_bug.cgi?id=101413

        Reviewed by Kentaro Hara.

        This is a small part of the patch in
        https://bugs.webkit.org/show_bug.cgi?id=101110 that we can land
        separately to try to tease out what is causing the memory regression.

        * bindings/v8/SerializedScriptValue.cpp:
        (WebCore):
        (WebCore::neuterBinding):

2012-11-06  Alexey Proskuryakov  <ap@apple.com>

        Clean up which storage cookie jar functions use
        https://bugs.webkit.org/show_bug.cgi?id=101395

        Reviewed by Brady Eidson.

        * WebCore.exp.in:
        * platform/mac/WebCoreSystemInterface.h:
        * platform/mac/WebCoreSystemInterface.mm:
        Updated for two new WKSI functions.

        * platform/CookieJar.h: Added explanatory comments.

        * platform/mac/CookieJar.mm:
        (WebCore::cookies): Removed fallback on NSHTTPCookieStorage, the WKSI function
        already implements it.
        (WebCore::cookieRequestHeaderFieldValue): Ditto.
        (WebCore::setCookies): Ditto.
        (WebCore::cookiesEnabled): Ditto.
        (WebCore::getRawCookies): Ditto.
        (WebCore::deleteCookie): Ditto.
        (WebCore::getHostnamesWithCookies): This function used to look at NSHTTPCookieStorage
        exclusively. While it makes sense to bypass private storage session, default storage
        session (currently only used for testing on Mac) is never OK to bypass. Changed to
        use a WKSI function that supports both.
        (WebCore::deleteCookiesForHostname): Ditto.
        (WebCore::deleteAllCookies): Ditto.

        * platform/network/cf/CookieJarCFNet.cpp:
        (WebCore::getHostnamesWithCookies):
        (WebCore::deleteCookiesForHostname):
        (WebCore::deleteAllCookies):
        Updated to match Foundation, so now these functions bypass private session.

        * platform/network/cf/CookieStorageCFNet.cpp:
        (WebCore::currentCFHTTPCookieStorage): Updated a comment.
        (WebCore::defaultCFHTTPCookieStorage):  Added a function that returns cookie storage
        for non-private session (or null if that would be an NSHTTPCookieStorage).        
        (WebCore::startObservingCookieChanges): We do not want to observe private cookies
        here, and we certainly don't want a mismatch between start/stop due to private
        browsing mode changes.
        (WebCore::stopObservingCookieChanges): Ditto.

        * platform/network/cf/CookieStorageCFNet.h: Added defaultCFHTTPCookieStorage().

2012-11-06  Huang Dongsung  <luxtella@company100.net>

        Build fix. r133601 broke the Windows build.
        https://bugs.webkit.org/show_bug.cgi?id=101404

        Reviewed by Noam Rosenthal.

        Only static const integral data members can be initialized within a class in the
        Windows, so we initialize static const double date members out of the class.

        * platform/graphics/texmap/TextureMapper.cpp:
        (BitmapTexturePool):
        (WebCore):

2012-11-06  Simon Fraser  <simon.fraser@apple.com>

        -webkit-background-clip:text produces artifacts when applied to the body and the browser is resized
        https://bugs.webkit.org/show_bug.cgi?id=89287

        Reviewed by Beth Dakin.

        If the body had -webkit-background-clip: text, we'd fail to paint
        anything behind it, so would see garbage pixels.
        
        Fix by having RenderView::paintBoxDecorations() check for a background-clip of "text"
        on the renderer that paints the root background.
        
        Added some new pixel tests for combinations of html and body transform
        and backgrounds; earlier versions of the patch broke some of these tests.

        Tests: fast/backgrounds/background-clip-text-on-body.html
               fast/backgrounds/transformed-body-background.html
               fast/backgrounds/transformed-body-html-background.html
               fast/backgrounds/transformed-html-body-background.html

        * rendering/RenderView.cpp:
        (WebCore::rendererObscuresBackground): Broke up the single condition
        into early 'false' returns when possible. We need to also check whether
        the renderer that actually paints the background (which might be the body)
        will fill it; background-clip: text does not.
        (WebCore::RenderView::paintBoxDecorations): Rather than checking firstChild(),
        actually check the root renderer, so that we can reliably get to the renderer
        that mains the root background.

2012-11-06  Stephen White  <senorblanco@chromium.org>

        Implement save and restore for a bunch of InternalSettings state
        https://bugs.webkit.org/show_bug.cgi?id=101394

        Reviewed by Dirk Pranke.

        In http://trac.webkit.org/changeset/133399, I resolved a bunch of 
        flaky tests by saving and restoring the InternalSettings state
        EnableCompositingForFixedPosition.  On a hunch, I git grepped for all
        internal settings state which is being set by layout tests but not
        saved and restored.  It turns out there about 15 calls.

        This patch takes care of five of them, mostly compositing-related.
        The others I was either not sure about, or were already at least
        being reset to known values by the testing harness.

        Hopefully this will alleviate some further test flakiness.

        * testing/InternalSettings.cpp:
        * testing/InternalSettings.h:

2012-11-06  KyungTae Kim  <ktf.kim@samsung.com>

        Fix build warning in RenderLayer.cpp caused by r133628
        https://bugs.webkit.org/show_bug.cgi?id=101401

        Reviewed by Simon Fraser.

        The static function WebCore::frameViewFromLayer is only used when USE(ACCELERATED_COMPOSITING),
        so define it only that case for removing -Wunused-function warning

        * rendering/RenderLayer.cpp:
        (WebCore):

2012-11-06  Hans Muller  <hmuller@adobe.com>

        [CSS Exclusions] Store ExclusionPolygonEdge vertices in clockwise order
        https://bugs.webkit.org/show_bug.cgi?id=100763

        Reviewed by Darin Adler.

        The ExclusionPolygon's internal logic, notably getVertexIntersectionVertices(),
        assumes that ExclusionPolygonEdge vertices are stored in clockwise order.
        If this is not true, then we construct the polygon's edges in reverse.

        To determine if the vertices are in clockwise order, we compare the slope
        of the line between the top,left vertex and its previous vertex, with the
        the slope of the line of vertices before and after the top,left vertex.
        If the slope of the latter is greater, then top,left vertex is located
        to its left, and the vertices are clockwise.

        Test: fast/exclusions/shape-inside/shape-inside-counterclockwise-polygon.html

        * rendering/ExclusionPolygon.cpp:
        (WebCore::determinant): Used to decide if the min vertex is on the left side of the line that passes through its adjacent vertices.
        (WebCore::ExclusionPolygon::ExclusionPolygon): If the polygon's vertices are specified in counterclockwise order, construct the edges in reverse.
        (WebCore::appendIntervalX): Made this an inline since it was only defined as a function for the sake of clarity.

2012-11-06  Tiancheng Jiang  <tijiang@rim.com>

        [BlackBerry] Update BB10 form theme.
        https://bugs.webkit.org/show_bug.cgi?id=100760

        Reviewed by Rob Buis.

        RIM PR 238123
        Internal Reviewed by Chris Hutten-Czapski
        BB10 selection theme use slice image function to draw selection button,
        any border-radius setting other than 0 will make the button corner
        clipped. Always set button border-radius: 0 for BB10 theme.

        * css/themeBlackBerry.css:
        (select[size][multiple]):
        (select[size="1"]):

2012-11-06  Elliott Sprehn  <esprehn@chromium.org>

        Remove branch from inside RenderObject::view now that renderer() is more expensive
        https://bugs.webkit.org/show_bug.cgi?id=101277

        Reviewed by Eric Seidel.

        It was observed in Bug 100057 that calling renderer() repeatedly now that it has a branch
        can be a performance regression. Now that we no longer keep a separate pointer for rare data
        in Document, we can use that space for a pointer to the RenderView making RenderObject::view()
        faster and removing the branch.

        This is a 1% improvement on Parser/html5-full-render.html

        This also cleans up the code because it turns out we don't need to have RenderObject::view() in
        RenderView.h because we can just call Document::renderView() and not do toRenderView. This makes
        it easier to find this method as it exists in the right header file now.

        No new tests, this is just a refactor.

        * WebCore.exp.in: Remove export of Document::renderView since it's inline now.
        * dom/Document.cpp:
        (WebCore::Document::Document):
        (WebCore::Document::setRenderer):
        (WebCore):
        * dom/Document.h:
        (WebCore::Document::renderView):
        (Document):
        * rendering/RenderObject.h:
        (WebCore::RenderObject::view):
        * rendering/RenderView.h:
        (WebCore):

2012-11-06  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r133526.
        http://trac.webkit.org/changeset/133526
        https://bugs.webkit.org/show_bug.cgi?id=101388

        May have caused 15% memory regression in Chromium (Requested
        by jsbell|gardener on #webkit).

        * UseV8.cmake:
        * WebCore.gypi:
        * bindings/scripts/CodeGeneratorV8.pm:
        (GenerateHeader):
        (GenerateNormalAttrGetter):
        (GenerateConstructorCallback):
        (GenerateNamedConstructorCallback):
        (GenerateToV8Converters):
        (GetDomMapFunction):
        (GetDomMapName):
        * bindings/scripts/test/V8/V8Float64Array.h:
        (WebCore::V8Float64Array::wrap):
        * bindings/scripts/test/V8/V8TestActiveDOMObject.h:
        (WebCore::V8TestActiveDOMObject::wrap):
        * bindings/scripts/test/V8/V8TestCustomNamedGetter.h:
        (WebCore::V8TestCustomNamedGetter::wrap):
        * bindings/scripts/test/V8/V8TestEventConstructor.h:
        (WebCore::V8TestEventConstructor::wrap):
        * bindings/scripts/test/V8/V8TestEventTarget.h:
        (WebCore::V8TestEventTarget::wrap):
        * bindings/scripts/test/V8/V8TestException.h:
        (WebCore::V8TestException::wrap):
        * bindings/scripts/test/V8/V8TestInterface.h:
        (WebCore::V8TestInterface::wrap):
        * bindings/scripts/test/V8/V8TestMediaQueryListListener.h:
        (WebCore::V8TestMediaQueryListListener::wrap):
        * bindings/scripts/test/V8/V8TestNamedConstructor.h:
        (WebCore::V8TestNamedConstructor::wrap):
        * bindings/scripts/test/V8/V8TestNode.cpp:
        (WebCore::V8TestNode::constructorCallback):
        (WebCore::V8TestNode::wrapSlow):
        * bindings/scripts/test/V8/V8TestObj.cpp:
        (WebCore::TestObjV8Internal::readOnlyTestObjAttrAttrGetter):
        * bindings/scripts/test/V8/V8TestObj.h:
        (WebCore::V8TestObj::wrap):
        * bindings/scripts/test/V8/V8TestSerializedScriptValueInterface.h:
        (WebCore::V8TestSerializedScriptValueInterface::wrap):
        * bindings/v8/DOMDataStore.cpp:
        (WebCore::DOMDataStore::DOMDataStore):
        (WebCore::DOMDataStore::~DOMDataStore):
        (WebCore::DOMDataStore::current):
        (WebCore::DOMDataStore::reportMemoryUsage):
        * bindings/v8/DOMDataStore.h:
        (WebCore::DOMDataStore::domNodeMap):
        (WebCore::DOMDataStore::domObjectMap):
        (DOMDataStore):
        * bindings/v8/DOMWrapperMap.h:
        (WebCore):
        (DOMWrapperMap):
        (WebCore::DOMWrapperMap::~DOMWrapperMap):
        (WebCore::DOMWrapperHashMap::remove):
        * bindings/v8/DOMWrapperWorld.h:
        * bindings/v8/IntrusiveDOMWrapperMap.h: Copied from Source/WebKit/chromium/src/WebScriptController.cpp.
        (WebCore):
        (IntrusiveDOMWrapperMap):
        (WebCore::IntrusiveDOMWrapperMap::weakCallback):
        * bindings/v8/ScriptProfiler.cpp:
        * bindings/v8/SerializedScriptValue.cpp:
        (WebCore::neuterBinding):
        * bindings/v8/V8DOMMap.cpp: Copied from Source/WebKit/chromium/src/WebScriptController.cpp.
        (WebCore):
        (WebCore::getDOMNodeMap):
        (WebCore::getDOMObjectMap):
        * bindings/v8/V8DOMMap.h: Copied from Source/WebKit/chromium/src/WebScriptController.cpp.
        (WebCore):
        * bindings/v8/V8DOMWindowShell.cpp:
        * bindings/v8/V8DOMWrapper.cpp:
        (WebCore::V8DOMWrapper::setJSWrapperForDOMNode):
        (WebCore):
        * bindings/v8/V8DOMWrapper.h:
        (V8DOMWrapper):
        (WebCore::V8DOMWrapper::getCachedWrapper):
        (WebCore::V8DOMWrapper::setJSWrapperForDOMObject):
        * bindings/v8/V8GCController.cpp:
        * bindings/v8/V8NPObject.cpp:
        * bindings/v8/WorkerContextExecutionProxy.cpp:
        * bindings/v8/WorkerScriptController.cpp:
        * bindings/v8/custom/V8HTMLImageElementConstructor.cpp:
        (WebCore::v8HTMLImageElementConstructorCallback):

2012-11-06  Alexey Proskuryakov  <ap@apple.com>

        Some cookie code cleanup
        https://bugs.webkit.org/show_bug.cgi?id=101375

        Reviewed by Dan Bernstein.

        * platform/CookieJar.h: Fixed style. Grouped functions by which storage they operate
        on in Mac port, but didn't add explanatory comments yet, because this is different
        in some ports.

        * platform/mac/CookieJar.mm:
        (WebCore): Removed special code for isHTTPOnly, it's present in Foundation in all
        supported OS X versions.
        (WebCore::filterCookies): Use -isHTTPOnly directly.
        (WebCore::cookies): Get rid of a variable for URL, implicit conversion works just as well.
        (WebCore::cookieRequestHeaderFieldValue): Ditto.
        (WebCore::setCookies): Assert that no more than one cookie was created from one
        Set-Cookie header, document.cookie can only be used to set one cookie at a time.
        (WebCore::getRawCookies): Removed useless local variables.

        * platform/network/CookieStorage.h: Removed an unneeded include, clarified a comment.

        * platform/network/HTTPHeaderMap.h: Added a FIXME.

2012-11-06  John Griggs  <jgriggs@rim.com>

        Implement MediaPlayerPrivate::didLoadingProgress for BlackBerry platform
        https://bugs.webkit.org/show_bug.cgi?id=100378

        Reviewed by Eric Carlson.

        Implement this method for BlackBerry platform.

        New test: LayoutTests/media/progress-events-generated-correctly.html

        * platform/graphics/blackberry/MediaPlayerPrivateBlackBerry.cpp:
        (WebCore::MediaPlayerPrivate::MediaPlayerPrivate):
        (WebCore::MediaPlayerPrivate::didLoadingProgress):
        * platform/graphics/blackberry/MediaPlayerPrivateBlackBerry.h:
        (MediaPlayerPrivate):

2012-11-06  Adam Barth  <abarth@webkit.org>

        DOMImplementation should use ScriptWrappable
        https://bugs.webkit.org/show_bug.cgi?id=101279

        Reviewed by Eric Seidel.

        This patch makes DOMImplementation ScriptWrappable. Both the V8 and JSC
        bindings automatically detect the presence of this base class and use
        it to optimize getting and setting JavaScript wrappers.

        This patch is a 23% progression on Bindings/document-implementation for
        the V8 bindings and a 69% progression for the JSC bindings.

        * dom/DOMImplementation.h:

2012-11-06  Benjamin Poulain  <benjamin@webkit.org>

        Speed up TransformationMatrix::multiply() on modern ARM
        https://bugs.webkit.org/show_bug.cgi?id=101084

        Reviewed by Gavin Barraclough.

        The main improvements are:
        -Store the full source matrix in the registers d16 to d31. This way we avoid going
         back and forth to memory to use the operands.
         Since the full matrix is in register, we can also directly modify the memory of m_matrix,
         we no longer need the temporary matrix memcopied at the end.
        -Use of LoadMultiple and StoreMultiple to load-store the matrix parameters.
        -Use Multiply-Accumulate instead of VMUL followed by VADD. This half the number of instruction.
        -On regular ARMv7, using a loop to reuse the same code for each row also improve the performance.

        Depending on the hardware, the new code takes 20% to 42% less time than the basic implementation.

        * platform/graphics/transforms/TransformationMatrix.cpp:
        (WebCore::TransformationMatrix::multiply):
        * platform/graphics/transforms/TransformationMatrix.h:
        (TransformationMatrix):

2012-11-06  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r133529 and r133562.
        http://trac.webkit.org/changeset/133529
        http://trac.webkit.org/changeset/133562
        https://bugs.webkit.org/show_bug.cgi?id=101371

        Caused 15% memory regression on Chromium page cyclers
        (Requested by jsbell|gardener on #webkit).

        * platform/text/LineBreakIteratorPoolICU.h:
        (WebCore::LineBreakIteratorPool::take):
        (WebCore::LineBreakIteratorPool::put):
        (LineBreakIteratorPool):
        * platform/text/TextBreakIterator.cpp:
        (WebCore::acquireLineBreakIterator):
        * platform/text/TextBreakIterator.h:
        (WebCore):
        (WebCore::LazyLineBreakIterator::LazyLineBreakIterator):
        (WebCore::LazyLineBreakIterator::get):
        (WebCore::LazyLineBreakIterator::reset):
        (LazyLineBreakIterator):
        * platform/text/TextBreakIteratorICU.cpp:
        (WebCore::acquireLineBreakIterator):
        (WebCore::releaseLineBreakIterator):
        * platform/text/gtk/TextBreakIteratorGtk.cpp:
        (WebCore::setUpIterator):
        (WebCore::acquireLineBreakIterator):
        * platform/text/wince/TextBreakIteratorWinCE.cpp:
        (WebCore::acquireLineBreakIterator):
        * rendering/RenderBlockLineLayout.cpp:
        (WebCore::RenderBlock::LineBreaker::nextLineBreak):
        * rendering/RenderText.cpp:
        (WebCore::RenderText::computePreferredLogicalWidths):
        * rendering/RenderText.h:
        (WebCore):
        * rendering/break_lines.cpp:
        (WebCore):
        (WebCore::isBreakableSpace):
        (WebCore::needsLineBreakIterator):
        (WebCore::nextBreakablePosition):
        (WebCore::nextBreakablePositionIgnoringNBSP):
        * rendering/break_lines.h:
        (WebCore):
        (WebCore::isBreakable):

2012-11-06  Peter Beverloo  <peter@chromium.org>

        [Chromium] Enable the JavaScript i18n API for Android
        https://bugs.webkit.org/show_bug.cgi?id=101357

        Reviewed by Adam Barth.

        Remove the conditional dependency on the v8-i18n API. The library is now
        always available in a Chromium for Android checkout.

        * WebCore.gyp/WebCore.gyp:

2012-11-06  Adam Barth  <abarth@webkit.org>

        ScriptWrappable should work for more than just Node
        https://bugs.webkit.org/show_bug.cgi?id=101319

        Reviewed by Eric Seidel.

        This patch generalizes the inline cached wrapper code path to work with
        all subclasses of ScriptWrappable, not just Node.

        * bindings/js/JSDOMBinding.h:
        (WebCore::setInlineCachedWrapper):
        (WebCore::getInlineCachedWrapper):
        (WebCore):
        (WebCore::clearInlineCachedWrapper):
        (WebCore::cacheWrapper):
        * bindings/js/JSNodeCustom.h:

2012-11-06  Tiancheng Jiang  <tijiang@rim.com>

        [BlackBerry] Update BB10 form theme.
        https://bugs.webkit.org/show_bug.cgi?id=100760

        Reviewed by Rob Buis.

        Revert webkit/ce306dcc698199a6f7ce679daf0a30c25d3a3d43 slider theme
        change which break media control and vertical slider.

        RIM PR 236993
        Internal Reviewed by Jeff Rogers.

        * platform/blackberry/RenderThemeBlackBerry.cpp:
        (WebCore::RenderThemeBlackBerry::paintSliderTrackRect):
        (WebCore::RenderThemeBlackBerry::paintSliderThumb):

2012-11-06  Michael Saboff  <msaboff@apple.com>

        canonicalizedTitle() shouldn't convert 8 bit title strings to 16 bit
        https://bugs.webkit.org/show_bug.cgi?id=101105

        Reviewed by Darin Adler.

        Turned canonicalizedTitle() into a templated function based on character type.
        Changed call in updateTitle() to check the bitness of the title string to call
        the right template flavor of canonicalizedTitle().
        Made supporting changes by adding displayBufferModifiedByEncoding(LChar*, ...)
        and made TextEncoding::displayBuffer() a templated function as well.

        No new tests needed, as functionality is unchanged.

        * dom/Document.cpp:
        (WebCore::canonicalizedTitle):
        (WebCore::Document::updateTitle):
        (WebCore::Document::displayBufferModifiedByEncodingInternal):
        * dom/Document.h:
        (WebCore::Document::displayBufferModifiedByEncoding):
        * platform/text/TextEncoding.h:
        (TextEncoding):
        (WebCore::TextEncoding::displayBuffer):

2012-11-05  Simon Fraser  <simon.fraser@apple.com>

        Fix RenderGeometryMap assertion when layers are scrolled during layout
        https://bugs.webkit.org/show_bug.cgi?id=101292

        Reviewed by Beth Dakin.

        When we set RenderLayer scroll positions as part of layout, we don't want
        to update compositing layers right away. Updating compositing layers
        requires that the entire layer tree has been updated from renderers,
        so that the geometry of all RenderLayers can be trusted. When this state
        was violated, RenderGeometryMap asserts.
        
        Fix by bailing from updateCompositingLayersAfterScroll() if FrameView
        tells us that we're doing layout. A full update of the compositing layers
        will happen later anyway.

        Test: compositing/geometry/geometry-map-scroll-during-layout-assertion.html

        * rendering/RenderLayer.cpp:
        (WebCore::frameViewFromLayer):
        (WebCore::RenderLayer::updateCompositingLayersAfterScroll):

2012-11-06  Michael Saboff  <msaboff@apple.com>

        quoteCSSString() always creates a 16 bit string
        https://bugs.webkit.org/show_bug.cgi?id=101004

        Reviewed by Darin Adler.

        Added a new templated helper based on character type from the logic of quoteCSSString() to process
        the argument string based on its native bitness.

        Functionality covered by existing tests.

        * css/CSSParser.cpp:
        (WebCore::quoteCSSStringInternal):
        (WebCore::quoteCSSString):

2012-11-06  Andras Becsi  <andras.becsi@digia.com>

        [Qt][WK2] Fit-to-width broken on pages with viewport meta tag
        https://bugs.webkit.org/show_bug.cgi?id=99715

        Reviewed by Jocelyn Turcotte.

        Add a bool that indicates if the content had an explicit
        initial-scale in the viewport meta tag.

        * dom/ViewportArguments.cpp:
        (WebCore::computeViewportAttributes):
        * dom/ViewportArguments.h:
        (ViewportAttributes):

2012-11-06  Mike West  <mkwst@chromium.org>

        CSP 1.1: Tweak the script interface to match the spec.
        https://bugs.webkit.org/show_bug.cgi?id=101321

        Reviewed by Adam Barth.

       This patch brings WebKit in line with the changes made to the spec in
       https://dvcs.w3.org/hg/content-security-policy/rev/5a29424a37d4.
       Specifically, the following:

       - Renamed 'document.SecurityPolicy' to 'document.securityPolicy'
       - Converted the following to read-only boolean attributes:
         - 'allowsEval'
         - 'allowsInlineScript'
         - 'allowsInlineStyle'
         - 'isActive'

        These changes only have effect for ports with CSP_NEXT enabled.

        Tests: http/tests/security/contentSecurityPolicy/1.1/securitypolicy-allowinlinescript.html
               http/tests/security/contentSecurityPolicy/1.1/securitypolicy-allowinlinestyle.html

        * dom/Document.idl:
        * page/DOMSecurityPolicy.idl:
            Tweaking the IDL files to match the new definition of the
            functionlity in the spec.

2012-11-06  Andrey Lushnikov  <lushnikov@google.com>

        Added console.clear() method

        Web Inspector: add console.clear()
        https://bugs.webkit.org/show_bug.cgi?id=101021

        Reviewed by Vsevolod Vlasov.

        Adds native implementation of console.clear

        Test: inspector/console/console-clear-function.html

        * English.lproj/localizedStrings.js: Adds 'Console was cleared' string
        * inspector/ConsoleMessage.cpp:
        (WebCore::messageTypeValue): Adds ClearMessageType
        * inspector/Inspector.json:
        * inspector/InspectorConsoleAgent.cpp:
        (WebCore::InspectorConsoleAgent::addMessageToConsole):
        * inspector/front-end/ConsoleMessage.js:
        (WebInspector.ConsoleMessageImpl.prototype._formatMessage): Display strategy for "clear" message
        * inspector/front-end/ConsoleModel.js:
        * inspector/front-end/inspector.css:
        (.console-info): Adds style for the 'console was cleared' message
        * page/Console.cpp: backend binging for console.clear()
        (WebCore::Console::clear):
        (WebCore):
        * page/Console.h:
        (Console):
        * page/Console.idl: Adds 'clear' message to protocol
        * page/ConsoleTypes.h:

2012-11-06  Aaron Colwell  <acolwell@chromium.org>

        Heap-buffer-overflow in WebCore::TextTrackCueList::add
        https://bugs.webkit.org/show_bug.cgi?id=101018

        Reviewed by Eric Carlson.

        Added an extra check to avoid using a negative array index when a cue
        is added to the beginning of the list.

        Test case added to LayoutTests/media/track/track-add-remove-cue.html.

        * html/track/TextTrackCueList.cpp:
        (WebCore::TextTrackCueList::add):

2012-11-06  Aaron Colwell  <acolwell@chromium.org>

        Regression(r132681): Heap-use-after-free in WebCore::RenderTextTrackCue::layout
        https://bugs.webkit.org/show_bug.cgi?id=100981

        Reviewed by Eric Carlson.

        Fixing a TextTrackCue use after free bug. textTrackRemoveCues() needs to be called when
        an HTMLTrackElement is removed from an HTMLMediaElement so that references to
        TextTrackCues are removed from m_cueTree.

        Test: media/track/track-remove-by-setting-innerHTML.html

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::willRemoveTrack):

2012-10-23  Stephen White  <senorblanco@chromium.org>

        [skia] Implement reference (url) filters on composited layers.
        https://bugs.webkit.org/show_bug.cgi?id=100142

        Reviewed by James Robinson.

        Covered by css3/filters/effect-reference-hw.html

        * WebCore.gyp/WebCore.gyp:
        * WebCore.gypi:
        Add new files.
        * WebCore.xcodeproj/project.pbxproj:
        Mark FilterEffect.h as "private".
        * platform/graphics/chromium/GraphicsLayerChromium.cpp:
        (WebCore::GraphicsLayerChromium::setFilters):
        Use the new SkImageFilter builder and setLayer() infrastructure, but
        only if there's a reference filter in the chain.
        * platform/graphics/filters/FEBlend.h:
        * platform/graphics/filters/FEColorMatrix.h:
        * platform/graphics/filters/FEGaussianBlur.h:
        * platform/graphics/filters/FELighting.h:
        * platform/graphics/filters/FEMorphology.h:
        * platform/graphics/filters/FilterEffect.h:
        (WebCore::FilterEffect::createImageFilter):
        Add createImageFilter() factory function for building SkImageFilters.
        * platform/graphics/filters/FilterOperation.h:
        (WebCore::FilterOperation::ReferenceFilterOperation::filterEffect):
        (WebCore::FilterOperation::ReferenceFilterOperation::setFilterEffect):
        Add a FilterEffect member to ReferenceFilterOperation, and accessors
        for it.
        * platform/graphics/filters/skia/FEBlendSkia.cpp:
        (WebCore::FEBlend::createImageFilter):
        Implement SkImageFilter building for FEBlend filter.
        * platform/graphics/filters/skia/FEColorMatrixSkia.cpp:
        (WebCore::createColorFilter):
        (WebCore::FEColorMatrix::platformApplySkia):
        Refactor creation of SkColorFilter from an FEColorMatrix filter.
        (WebCore::FEColorMatrix::createImageFilter):
        Implement SkImageFilter building for FEColorMatrix filter.
        * platform/graphics/filters/skia/FEGaussianBlurSkia.cpp:
        (WebCore::FEGaussianBlur::createImageFilter):
        Implement SkImageFilter building for FEGaussianBlur filter.
        * platform/graphics/filters/skia/FELightingSkia.cpp:
        (WebCore::FELighting::createImageFilter):
        Implement SkImageFilter building for FELighting filters.
        * platform/graphics/filters/skia/FEMorphologySkia.cpp:
        (WebCore::FEMorphology::createImageFilter):
        Implement SkImageFilter building for FEMorphology filter.
        * platform/graphics/filters/skia/SkiaImageFilterBuilder.cpp: Added.
        (WebCore::SkiaImageFilterBuilder::SkiaImageFilterBuilder):
        (WebCore::SkiaImageFilterBuilder::build):
        * platform/graphics/filters/skia/SkiaImageFilterBuilder.h:
        Implement new helper class for building an SkImageFilter DAG from
        a FilterEffect DAG.  Can also build from FilterOperations list.
        * rendering/FilterEffectRenderer.cpp:
        (WebCore::FilterEffectRenderer::build):
        When building FilterEffects from a reference filter, also store the
        generated DAG on the ReferenceFilterOperation itself.
        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::updateOrRemoveFilterEffect):
        Even when in composited mode, if there's a reference filter in the 
        chain, build the FilterEffect DAG from it.

2012-11-06  Max Feil  <mfeil@rim.com>

        [BlackBerry] Automatically go fullscreen on video play
        https://bugs.webkit.org/show_bug.cgi?id=101100

        Reviewed by Eric Carlson.

        There is a requirement to have HTML5 video automatically enter
        fullscreen when a video starts playing (PR131774). This change
        implements this feature, with restrictions. The main restriction
        is adherence to WebKit's philosophy of only entering fullscreen
        due to a user gesture. This is important in order to avoid
        pop-up advertisements and other unwanted fullscreen content.
        One consequence of this is that video elements with the autoplay
        attribute will not automatically enter fullscreen.

        Other caveats:
        - This feature applies only to "small screen" devices where
        automatically going fullscreen makes more sense.
        - Fullscreen will only be entered automatically when the
        video is played from the beginning (current time is zero).
        It is assumed that if the user is resuming play from a paused
        state and is not in fullscreen mode, then they exited fullscreen
        mode intentionally.

        Test: platform/blackberry/media/video-automatic-fullscreen.html

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::mediaPlayerEnterFullscreen):
        (WebCore):
        (WebCore::HTMLMediaElement::mediaPlayerIsFullscreen):
        (WebCore::HTMLMediaElement::mediaPlayerIsFullscreenPermitted):
        * html/HTMLMediaElement.h:
        (HTMLMediaElement):
        * platform/graphics/MediaPlayer.h:
        (WebCore::MediaPlayerClient::mediaPlayerEnterFullscreen):
        (WebCore::MediaPlayerClient::mediaPlayerIsFullscreen):
        (WebCore::MediaPlayerClient::mediaPlayerIsFullscreenPermitted):
        * platform/graphics/blackberry/MediaPlayerPrivateBlackBerry.cpp:
        (WebCore::MediaPlayerPrivate::play):
        (WebCore::MediaPlayerPrivate::waitMetadataTimerFired):
        (WebCore::MediaPlayerPrivate::conditionallyGoFullscreenAfterPlay):
        (WebCore):
        * platform/graphics/blackberry/MediaPlayerPrivateBlackBerry.h:
        (MediaPlayerPrivate):

2012-11-06  Grzegorz Czajkowski  <g.czajkowski@samsung.com>

        [WK2][EFL][GTK] early return of checkSpellingOfString treats correct words as misspelled
        https://bugs.webkit.org/show_bug.cgi?id=101215

        Reviewed by Gustavo Noronha Silva.

        Save the misspelled location and length of the string to the default values (-1, 0)
        at the beginning of the checkSpellingOfString method.
        It assumes that the words are spelled correctly and early return of method doesn't
        cause assertions in findFirstMisspelling (WebCore/editing/TextCheckingHelper.cpp).

        * platform/text/enchant/TextCheckerEnchant.cpp:
        (TextCheckerEnchant::checkSpellingOfString):

2012-11-06  Huang Dongsung  <luxtella@company100.net>

        [TexMap] Remove unused textures in the texture pool.
        https://bugs.webkit.org/show_bug.cgi?id=100706

        Reviewed by Noam Rosenthal.

        Currently, we do not remove textures in the texture pool of
        TextureMapper. The texture pool is destroyed when TextureMapper is
        destroyed. It means the texture pool consumes texture memory until its
        destruction. This patch removes textures if the textures have been not
        used in 3 seconds as LayerTreeCoordinator manages UpdateAtlases.

        Changing cache policy is not testable in layout tests.

        * platform/graphics/texmap/TextureMapper.cpp:
        (WebCore::BitmapTexturePoolEntry::BitmapTexturePoolEntry):
        (WebCore::BitmapTexturePoolEntry::markUsed):
        (WebCore::BitmapTexturePoolEntry::compareTimeLastUsed):
        (BitmapTexturePoolEntry):
        (WebCore):
        (BitmapTexturePool):
        (WebCore::BitmapTexturePool::BitmapTexturePool):
        (WebCore::BitmapTexturePool::scheduleReleaseUnusedTextures):
        (WebCore::BitmapTexturePool::releaseUnusedTexturesTimerFired):
        (WebCore::BitmapTexturePool::acquireTexture):
        (WebCore::TextureMapper::acquireTextureFromPool):
        (WebCore::TextureMapper::TextureMapper):
        (WebCore::TextureMapper::~TextureMapper):
        * platform/graphics/texmap/TextureMapper.h:
        (WebCore):
        (TextureMapper):

2012-11-02  Ilya Tikhonovsky  <loislo@chromium.org>

        Web Inspector: NMI instrument CachedMetadata. It uses ~300k on plus.google.com
        https://bugs.webkit.org/show_bug.cgi?id=101067

        Reviewed by Yury Semikhatsky.

        Plain vanilla instrumentation for CachedMetadata class.

        * CMakeLists.txt:
        * GNUmakefile.list.am:
        * Target.pri:
        * WebCore.gypi:
        * WebCore.vcproj/WebCore.vcproj:
        * WebCore.xcodeproj/project.pbxproj:
        * loader/CachedMetadata.cpp: Added.
        (WebCore):
        (WebCore::CachedMetadata::reportMemoryUsage):
        * loader/CachedMetadata.h:
        (CachedMetadata):

2012-11-06  Alexei Filippov  <alph@chromium.org>

        Web Inspector: report physical memory really committed for JS heap in NMI
        https://bugs.webkit.org/show_bug.cgi?id=101335

        Some OSes (e.g. Linux) perform lazy commits of requested memory.
        Because of that the committed memory may not retain any physical
        memory until the very first access to the committed chunk.
        That led to JS heap reported more physical memory than was currently
        in use.

        Reviewed by Vsevolod Vlasov.

        * bindings/v8/ScriptGCEvent.cpp:
        (WebCore::ScriptGCEvent::getHeapSize):

2012-11-06  Vsevolod Vlasov  <vsevik@chromium.org>

        Web Inspector: Breakpoint is not removed when it was set in non-formatted mode and then removed while in formatted mode.
        https://bugs.webkit.org/show_bug.cgi?id=100595

        Reviewed by Yury Semikhatsky.

        Breakpoints in storage are now updated/removed by file name saved from primary location when they were created,
        not by the name returned by UISourceCode (as this one could change when UISourceCode is formatted).
        SourceFileId is now used across BreakpointManager to specify file name.
        And breakpointStorageId is now used to specify (fileName, lineNumber) pair.

        * inspector/front-end/BreakpointManager.js:
        (WebInspector.BreakpointManager.sourceFileId):
        (WebInspector.BreakpointManager.prototype._restoreBreakpoints):
        (WebInspector.BreakpointManager.prototype._uiSourceCodeRemoved): Removed redundant check.
        (WebInspector.BreakpointManager.prototype.breakpointLocationsForUISourceCode):
        (WebInspector.BreakpointManager.Breakpoint):
        (WebInspector.BreakpointManager.Breakpoint.prototype._breakpointStorageId):
        (WebInspector.BreakpointManager.Storage.prototype._restoreBreakpoints):
        (set WebInspector.BreakpointManager.Storage.Item):

2012-11-06  Keishi Hattori  <keishi@webkit.org>

        The "Rect" class in WebCore/Resources/pagepopups/pickerCommon.js should be renamed
        https://bugs.webkit.org/show_bug.cgi?id=101304

        Reviewed by Kent Tamura.

        The name Rect conflicts with CSS Rect.

        No new tests. Just renaming.

        * Resources/pagepopups/pickerCommon.js:
        (Rectangle): Renamed from Rect.
        (Rectangle.prototype.toString):
        (Rectangle.intersection):
        (adjustWindowRect):
        (hideWindow):

2012-11-06  Kentaro Hara  <haraken@chromium.org>

        Replace setDOMWrapper(wrapper, 0) with resetDOMWrapper(wrapper)
        https://bugs.webkit.org/show_bug.cgi?id=101190

        Reviewed by Adam Barth.

        To guarantee that we never stores NULL pointers to V8 internal
        fields, we want to insert ASSERT()s to setDOMWrapper().
        This patch replaces setDOMWrapper() that intentionally
        passes NULL pointers with clearDOMWrapper().

        No tests. No change in behavior.

        * bindings/v8/V8DOMWrapper.h:
        (V8DOMWrapper):
        (WebCore::V8DOMWrapper::clearDOMWrapper):
        * bindings/v8/V8NPObject.cpp:
        (WebCore::forgetV8ObjectForNPObject):

2012-11-06  Vsevolod Vlasov  <vsevik@chromium.org>

        Web Inspector: Displayed name/path of urls in network tab of dev tools is inconsistent
        https://bugs.webkit.org/show_bug.cgi?id=101064

        Reviewed by Yury Semikhatsky.

        Extracted some generic methods from ParsedURL displayName getters (about:blank and data url handlers).
        Implemented consistent name() and path() method on NetworkRequest based on ParsedURL.
        NetworkPanel now uses name() and path() methods on NetworkRequest to show requests and search for them.

        Test: http/tests/inspector/network/request-name-path.html

        * inspector/front-end/NetworkPanel.js:
        (WebInspector.NetworkLogView.prototype._matchRequest):
        (WebInspector.NetworkLogView.prototype._highlightMatchedRequests):
        (WebInspector.NetworkLogView.prototype.performFilter):
        (WebInspector.NetworkDataGridNode.prototype._refreshNameCell):
        (WebInspector.NetworkDataGridNode.NameComparator):
        * inspector/front-end/NetworkRequest.js:
        (WebInspector.NetworkRequest.prototype.set url):
        (WebInspector.NetworkRequest.prototype.name):
        (WebInspector.NetworkRequest.prototype.path):
        (WebInspector.NetworkRequest.prototype._parseNameAndPathFromURL):
        * inspector/front-end/ParsedURL.js:
        (WebInspector.ParsedURL):
        (WebInspector.ParsedURL.prototype.get displayName):
        (WebInspector.ParsedURL.prototype.dataURLDisplayName):
        (WebInspector.ParsedURL.prototype.isAboutBlank):
        (WebInspector.ParsedURL.prototype.isDataURL):

2012-11-05  Pavel Feldman  <pfeldman@chromium.org>

        Web Inspector: make Spectrum and Popover WebInspector.Views in order to enable reuse
        https://bugs.webkit.org/show_bug.cgi?id=101200

        Reviewed by Yury Semikhatsky.

        - Split Spectrum and SpectrumPopoverHelper (first is a component, second is controller)
        - Made Popover a root view in order to enable lazy style loading for potential subviews (such as Spectrum)
        - Extracted spectrum's css into a separate file

        * WebCore.gypi:
        * WebCore.vcproj/WebCore.vcproj:
        * inspector/front-end/DOMExtension.js:
        (Element.prototype.positionAt):
        (Size):
        (Element.prototype.measurePreferredSize):
        * inspector/front-end/HeapSnapshotView.js:
        (WebInspector.HeapSnapshotView.prototype.willHide):
        (WebInspector.HeapSnapshotView.prototype._helpClicked):
        * inspector/front-end/Popover.js:
        (WebInspector.Popover):
        (WebInspector.Popover.prototype.show):
        (WebInspector.Popover.prototype.showView):
        (WebInspector.Popover.prototype._innerShow):
        (WebInspector.Popover.prototype.hide):
        (WebInspector.Popover.prototype.dispose):
        (WebInspector.Popover.prototype._positionElement):
        * inspector/front-end/Spectrum.js:
        (WebInspector.Spectrum.alphaDrag):
        (WebInspector.Spectrum):
        (WebInspector.Spectrum.prototype.wasShown):
        (WebInspector.SpectrumPopupHelper):
        (WebInspector.SpectrumPopupHelper.prototype.spectrum):
        (WebInspector.SpectrumPopupHelper.prototype.toggle):
        (WebInspector.SpectrumPopupHelper.prototype.show):
        (WebInspector.SpectrumPopupHelper.prototype.reposition):
        (WebInspector.SpectrumPopupHelper.prototype.hide):
        (WebInspector.ColorSwatch):
        (WebInspector.ColorSwatch.prototype.setColorString):
        * inspector/front-end/StylesSidebarPane.js:
        (WebInspector.StylesSidebarPane):
        (WebInspector.StylesSidebarPane.prototype.update):
        (WebInspector.StylesSidebarPane.prototype.willHide):
        (WebInspector.StylePropertyTreeElement.prototype.updateTitle.):
        * inspector/front-end/View.js:
        (WebInspector.View.prototype.measurePreferredSize):
        * inspector/front-end/WebKit.qrc:
        * inspector/front-end/elementsPanel.css:
        (.image-preview-container img):
        * inspector/front-end/inspector.css:
        (.swatch):
        (.swatch-inner):
        (.swatch-inner:hover):
        * inspector/front-end/spectrum.css: Added.
        (.spectrum-container):
        (.spectrum-top):
        (.spectrum-color):
        (.spectrum-display-value):
        (.spectrum-hue):
        (.spectrum-fill):
        (.spectrum-range-container):
        (.spectrum-range-container *):
        (.spectrum-range-container label):
        (.spectrum-range-container input):
        (.spectrum-dragger, .spectrum-slider):
        (.spectrum-sat):
        (.spectrum-val):
        (.spectrum-dragger):
        (.spectrum-slider):
        (.spectrum-container .swatch):

2012-11-06  Takashi Sakamoto  <tasak@google.com>

        removeAttribute('style') not working in certain circumstances
        https://bugs.webkit.org/show_bug.cgi?id=99295

        Reviewed by Ryosuke Niwa.

        After web developers did style.XXXX=YYYY for some element, the inline
        style should be always removable by using "removeAttribute('style')".
        Currently it depends on whether web developers invokes
        getAttribute('style'), setAttribute('style), and so on. E.g. once they
        invoke getAttribute('style'), removeAttribute('style') works. This is
        very confusing behavior.
        Looking at Firefox browser, removeAttribute('style') always removes
        all inline styles.

        Test: fast/css/remove-attribute-style.html

        * css/StylePropertySet.cpp:
        (WebCore::StylePropertySet::clear):
        Added a new method to remove all style properties.
        (WebCore):
        * css/StylePropertySet.h:
        (StylePropertySet):
        * dom/Element.cpp:
        (WebCore::Element::removeAttribute):
        If 'style' is given but the element has no style attribute, the old
        code did nothing. However, if the element is styled element and has any
        inline styles, the inline styles should be removed. So invoke
        StyledElement::removeAllInlineStyleProperties and if any inline styles
        are removed, invoke style recalc, too.
        * dom/StyledElement.cpp:
        (WebCore::StyledElement::removeAllInlineStyleProperties):
        Added a new method to remove all inline style propeties. If any inline
        style is removed, invoke inlineStyleChanged() to force style recalc.
        (WebCore):
        * dom/StyledElement.h:
        (StyledElement):

2012-11-06  Alexei Filippov  <alph@chromium.org>

        Web Inspector: dim size bar for expanded item in native memory snapshot grid
        https://bugs.webkit.org/show_bug.cgi?id=101062

        Reviewed by Yury Semikhatsky.

        * inspector/front-end/nativeMemoryProfiler.css:
        (.native-snapshot-view .data-grid .expanded div.size-bar):

2012-11-06  Shinya Kawanaka  <shinyak@chromium.org>

        [Shadow] Using isUnknownPseudoElement() for shadow pseudo id seems confusing
        https://bugs.webkit.org/show_bug.cgi?id=100826

        Reviewed by Hajime Morita.

        We used isUnknownPseudoElement() for these 3 meanings: 1) the element is a custom pseudo-element (starting with 'x-'),
        2) the element is a webkit custom pseudo-element (starting with '-webkit-'), and 3) the element has an unknown type.
        We would like to distinguish them when parsing CSSSelector types. Also, we disable using (3) type for using
        shadowPseudoId.

        In this patch, we allow using WebKitCustomPseudoElement in AuthorShadowRoot, and CustomPseudoElement in
        UAShadowRoot. However, we will disable them later.

        Test: fast/dom/shadow/shadow-pseudo-id.html

        * css/CSSGrammar.y.in: Now we can discard UNKNOWN type. It should not match anything.
        * css/CSSParser.cpp:
        (WebCore::CSSParser::updateSpecifiersWithElementName):
        (WebCore::CSSParser::updateSpecifiers):
        * css/CSSParserValues.h:
        (WebCore::CSSParserSelector::isCustomPseudoElement):
        (CSSParserSelector):
        * css/CSSSelector.cpp:
        (WebCore::CSSSelector::pseudoId):
        (WebCore::CSSSelector::parsePseudoType):
        (WebCore::CSSSelector::isCustomPseudoType): Returns true if the type is PseudoUserAgentCustomElement or PseudoWebKitCustomElement.
        (WebCore::CSSSelector::extractPseudoType):
        * css/CSSSelector.h:
        (CSSSelector):
        (WebCore::CSSSelector::isCustomPseudoElement):
        (WebCore):
        * css/CSSSelectorList.cpp:
        (WebCore::SelectorHasInvalidSelectorFunctor::operator()): We will reject all selectors which were judged as
        UNKNOWN before. i.e. It contians all three types for now.
        (WebCore::CSSSelectorList::hasInvalidSelector): Renamed.
        * css/CSSSelectorList.h:
        (CSSSelectorList):
        * css/RuleSet.cpp:
        (WebCore::RuleSet::addRule):
        * css/SelectorChecker.cpp:
        (WebCore::SelectorChecker::checkSelector):
        * dom/Element.cpp:
        (WebCore::Element::setShadowPseudoId):
        * dom/SelectorQuery.cpp:
        (WebCore::SelectorQueryCache::add):

2012-11-06  Shinya Kawanaka  <shinyak@chromium.org>

        [Shadow] ShadowRoot should know the existence of elements having ElementShadow.
        https://bugs.webkit.org/show_bug.cgi?id=100922

        Reviewed by Hajime Morita.

        We count the elements having ElementShadow in ShadowRoot. This is a prepation patch for to solve Bug 100451.
        We have a count-up and count-down login in ShadowRoot::insertedInto and ShadowRoot::removedFrom.

        For performance reason, we have a flag that an element should be unregistered in ShadowRoot.

        Test: fast/dom/shadow/has-elementshadow.html

        * dom/ShadowRoot.cpp:
        (WebCore::ShadowRoot::ShadowRoot):
        (WebCore::ShadowRoot::insertedInto): Count up the number of elements having ElementShadow. ElementShadow
        is created only when the oldest ShadowRoot is created, we only count up only when this ShadowRoot is oldest.
        (WebCore):
        (WebCore::ShadowRoot::removedFrom): Count down if we used this ShadowRoot for count up.
        * dom/ShadowRoot.h:
        (ShadowRoot):
        (WebCore::ShadowRoot::registerElementShadow):
        (WebCore::ShadowRoot::unregisterElementShadow):
        (WebCore::ShadowRoot::hasElementShadow):
        (WebCore::ShadowRoot::countElementShadow):
        * testing/Internals.cpp:
        (WebCore::Internals::countElementShadow):
        (WebCore):
        * testing/Internals.h:
        (Internals):
        * testing/Internals.idl:

2012-11-06  Pavel Feldman  <pfeldman@chromium.org>

        Web Inspector: show "debugging session terminated" message when remote debuggign connection is closed unexpectedly.
        https://bugs.webkit.org/show_bug.cgi?id=101030

        Reviewed by Vsevolod Vlasov.

        * inspector/front-end/inspector.js:
        (WebInspector.loaded.WebInspector.socket.onclose):
        (WebInspector.loaded):
        (WebInspector.detached):

2012-11-06  Alexander Pavlov  <apavlov@chromium.org>

        Web Inspector: [Overrides] Add Chrome for Android and Firefox for Android user agent strings
        https://bugs.webkit.org/show_bug.cgi?id=100666

        Reviewed by Pavel Feldman.

        * inspector/front-end/SettingsScreen.js:
        (WebInspector.UserAgentSettingsTab.prototype._createUserAgentSelectRowElement.get const):

2012-11-02  Yury Semikhatsky  <yurys@chromium.org>

        Web Inspector: JavaScript web workers debugging crashes
        https://bugs.webkit.org/show_bug.cgi?id=101065

        Reviewed by Alexander Pavlov.

        Clear m_pageInspector when page inspector instance is deleted.
        Disable worker inspection when front-end disconnects.

        Test: inspector-protocol/debugger-terminate-dedicated-worker-while-paused.html

        * inspector/InspectorWorkerAgent.cpp:
        (WebCore::InspectorWorkerAgent::WorkerFrontendChannel::~WorkerFrontendChannel): notify
        WorkerMessagingProxy so that it can clear pointer to the channel.

2012-11-06  Nikita Vasilyev  <me@elv1s.ru>

        Web Inspector: Console: wrap long URLs
        https://bugs.webkit.org/show_bug.cgi?id=100970

        Reviewed by Yury Semikhatsky.

        * inspector/front-end/inspector.css:
        (.console-message-url):

2012-11-05  Keishi Hattori  <keishi@webkit.org>

        Introduce Day class to calendar picker
        https://bugs.webkit.org/show_bug.cgi?id=101194

        Reviewed by Kent Tamura.

        Introducing Day class so day, week, and month can all be abstracted. To
        solve some of the complexity around which months to show, I made
        CalendarPicker in charge of it. This also made YearMonthController and
        DaysTable independent of each other.

        No new tests. Covered by existing calendar-picker-*.html tests.

        * Resources/pagepopups/calendarPicker.js:
        (createUTCDate): Allow negative month or date.
        (parseDateString): Will return Day or Month depending on string format.
        (Day): Represents a day.
        (Day.parse): Parse yyyy-mm-dd.
        (Day.createFromDate): Creates a Day that contains a datetime.
        (Day.createFromToday): Creates Day for today. A method with the same name will be added to Week and Month in the future.
        (Day.prototype.equals): Returns true if they are the same.
        (Day.prototype.previous): Returns the previous day.
        (Day.prototype.next): Returns the next day.
        (Day.prototype.startDate): Returns the datetime that is the start of this day.
        (Day.prototype.endDate): Returns the datetime that is the start of this day.
        (Day.prototype.valueOf): Returns the milliseconds since epoch.
        (Day.prototype.toString): Returns an ISO date string.
        (Month): Fix bug in calculating month from value.
        (Month.prototype.endDate): Use Day.Maximum.
        (CalendarPicker): Added _currentMonth. yearMonthController and daysTable can be private members now.
        (CalendarPicker.prototype._layout):
        (CalendarPicker.prototype.handleToday): Use Day.createFromToday.
        (CalendarPicker.prototype.shouldShowMonth): Returns true if the month should be shown.
        (CalendarPicker.prototype.showMonth): Shows the given month. If the month is out of the range of months that should be shown, we clamp the month and show that.
        (CalendarPicker.prototype.currentMonth): Returns the current month that is shown.
        (YearMonthController): Removed _currentMonth.
        (YearMonthController.prototype.attachTo):
        (YearMonthController.prototype.setMonth):
        (YearMonthController.prototype._handleYearMonthChange): Use CalendarPicker.showMonth
        (YearMonthController.prototype.moveRelatively):
        (DaysTable):
        (CalendarPicker.prototype._stepMismatch): Made private.
        (CalendarPicker.prototype._outOfRange): Made private.
        (CalendarPicker.prototype.isValidDate): Take Day or Month instead of milliseconds since epoch.
        (DaysTable.prototype._renderMonth):
        (DaysTable.prototype.navigateToMonth): Shows a given month. Can use animation and leave the selection position as is.
        (DaysTable.prototype.selectRange): Select a range.
        (DaysTable.prototype._maybeSetPreviousMonth):
        (DaysTable.prototype._maybeSetNextMonth):
        (DaysTable.prototype._handleKey):
        (CalendarPicker.prototype._handleBodyKeyDown):

2012-11-05  Kenichi Ishibashi  <bashi@chromium.org>

        Unreviewed, Adding #if PLATFORM(CHROMIUM) for the fix of
        https://bugs.webkit.org/show_bug.cgi?id=101009

        This fix requires the most recent version of harfbuzz-ng.
        EFL port uses version 0.9.2, which doesn't have the fix.

        * platform/graphics/harfbuzz/ng/HarfBuzzShaper.cpp:
        (WebCore::HarfBuzzShaper::shapeHarfBuzzRuns):

2012-11-05  Glenn Adams  <glenn@skynav.com>

        Ensure acquireLineBreakIterator signature consistency on non-ICU ports.
        https://bugs.webkit.org/show_bug.cgi?id=101281

        Reviewed by Ryosuke Niwa.

        Fix (newly) inconsistent signature for acquireLineBreakIterator for non-ICU ports
        caused by http://trac.webkit.org/changeset/133529.

        See new tests added from https://bugs.webkit.org/show_bug.cgi?id=89235.

        * platform/text/TextBreakIterator.cpp:
        (WebCore::acquireLineBreakIterator):
        * platform/text/gtk/TextBreakIteratorGtk.cpp:
        (WebCore::setUpIterator):
        (WebCore::acquireLineBreakIterator):
        * platform/text/wince/TextBreakIteratorWinCE.cpp:
        (WebCore::acquireLineBreakIterator):

2012-11-05  Hayato Ito  <hayato@chromium.org>

        Use switch/case statements instead of if/elseif in CSSSelector.cpp
        https://bugs.webkit.org/show_bug.cgi?id=100470

        Reviewed by Ryosuke Niwa.

        Minor clean up. We can get compiler warnings if we use switch/case statements here.

        No changes to functionality, so no new tests.

        * css/CSSSelector.cpp:
        (WebCore::CSSSelector::selectorText):

2012-11-05  Kenichi Ishibashi  <bashi@chromium.org>

        [Chromium] Unicode combining diacritical aren't always combined on Linux
        https://bugs.webkit.org/show_bug.cgi?id=101009

        Reviewed by Kent Tamura.

        Add a space character to harfbuzzBuffer as pre-context. This will prevent
        harfbuzz from inserting dotted-circle.

        Test: fast/text/international/combining-marks-position.html

        * platform/graphics/harfbuzz/ng/HarfBuzzShaper.cpp:
        (WebCore::HarfBuzzShaper::shapeHarfBuzzRuns):

2012-11-05  Shinya Kawanaka  <shinyak@chromium.org>

        LayoutTest fast/dom/shadow/shadowroot-type.html is failing on Windows
        https://bugs.webkit.org/show_bug.cgi?id=101201

        Reviewed by Hajime Morita.

        When we use a bit field for enum, Windows compiler seems returning some wrong value.
        We would like to avoid using a bit field for enum value.

        * dom/ShadowRoot.cpp:
        (WebCore::ShadowRoot::create):
        * dom/ShadowRoot.h:
        (WebCore::ShadowRoot::type):
        (WebCore::ShadowRoot::setType):
        (ShadowRoot):

2012-11-05  Benjamin Poulain  <benjamin@webkit.org>

        TransformOperationInfo's constructor is really slow
        https://bugs.webkit.org/show_bug.cgi?id=101143

        Reviewed by Sam Weinig.

        TransformOperationInfo() was slow for a few reasons:
        -The function used a lot of branches. The basic assumption is that the input
         is incorrect, thus every character is an opportunity to fail.
        -Every branch had to be tested in order. If the name was matching the last if()
         all the previous names had to be tested.
        -Since equalIgnoringCase() was used in every branch, it was forcing the case folding
         every time.
        -When the string is 16bits, the case folding was using ICU, which was incredibly inefficient.

        This can be fixed by either
        1) Compute the lowercase name, then match it to a HashMap.
        2) Write a tree to quickly reduce the number of branch needed.

        The first solution is not viable because 16bits strings case folding
        remains an important bottleneck.

        Instead, the code now splits the names on simple characteristics to
        match any name in a limited number of branches.

        The assumption is the input is correct, so & is used instead of && to
        avoid branches in favor of conditional instructions.

        * css/CSSParser.cpp:
        (WebCore::TransformOperationInfo::TransformOperationInfo):

2012-11-05  Simon Fraser  <simon.fraser@apple.com>

        RenderGeometryMap asserts when loading http://en.softonic.com/mac
        https://bugs.webkit.org/show_bug.cgi?id=101284
        <rdar://problem/11540560>

        Reviewed by Tim Horton.

        When FrameView::layout() calls document->updateStyleIfNeeded(), we
        can be in a state where FrameView::needsLayout() is false. However,
        this is a bad time to update compositing layers, because we're about
        to do layout, which will require us to update them again soon anyway,
        and some RenderLayers may not have been sized or positioned yet.
        
        Fix by adding a m_doingPreLayoutStyleUpdate member to FrameView,
        and toggling it around this call to updateStyleIfNeeded().
        Read this state in updateCompositingLayersAfterStyleChange(), which is
        now called unconditionally by recalcStyle(), but returns early
        if this flag is set, or layout is pending.

        * dom/Document.cpp:
        (WebCore::Document::recalcStyle):
        * page/FrameView.cpp:
        (WebCore::FrameView::reset):
        (WebCore::FrameView::updateCompositingLayersAfterStyleChange):
        (WebCore::FrameView::layout):
        * page/FrameView.h:
        (FrameView):

2012-11-05  Beth Dakin  <bdakin@apple.com>

        https://bugs.webkit.org/show_bug.cgi?id=101275
        Clean up ScrollingConstraints.h

        Reviewed by Simon Fraser.

        This class cleans up ScrollingConstraints.h by removing the constructors since the 
        compiler will generate those constructors for us anyway. The patch also makes the 
        two override functions private.
        * page/scrolling/ScrollingConstraints.h:
        (ViewportConstraints):
        (FixedPositionViewportConstraints):
        (StickyPositionViewportConstraints):

2012-11-05  Simon Fraser  <simon.fraser@apple.com>

        Make Document::updateStyleIfNeeded() non-virtual
        https://bugs.webkit.org/show_bug.cgi?id=101273

        Reviewed by Eric Seidel.

        Document::updateStyleIfNeeded() has been virtual like forever, but
        no-one ever overrides it, so make it non-virtual.

        * dom/Document.h:
        (Document):

2012-11-05  Philip Rogers  <pdr@google.com>

        Unblock SVG external references
        https://bugs.webkit.org/show_bug.cgi?id=100635

        Reviewed by Adam Barth.

        This patch reverts r132849 and r132869 because the potential XSS issue
        turned out to not be an issue after all.

        Covered by existing tests, many of which are re-whitelisted with this patch.

        * loader/cache/CachedResourceLoader.cpp:
        (WebCore::CachedResourceLoader::canRequest):

2012-11-05  Beth Dakin  <bdakin@apple.com>

        https://bugs.webkit.org/show_bug.cgi?id=101001
        Pages with position:fixed elements should still be able to scroll on 
        the scrolling thread
        -and corresponding-
        <rdar://problem/10857315>

        Reviewed by Simon Fraser.

        This patch adds two new classes. ScrollingStateFixedNode is a class 
        to represent fixed nodes in the state tree, and 
        ScrollingTreeFixedNode represents fixed node in the scrolling tree 
        over on the scrolling thread.
        * WebCore.xcodeproj/project.pbxproj:

        When we are (non-programatically) scrolling fixed objects on the 
        scrolling thread, we do not want to do any work here. 
        * page/FrameView.cpp:
        (WebCore::FrameView::updateFixedElementsAfterScrolling):

        Whenever we sync the position of the main frame's layer, we have to 
        do the same for scrolling tree children.
        * page/scrolling/ScrollingCoordinator.cpp:
        (WebCore::ScrollingCoordinator::updateMainFrameScrollPosition):

        New ScrollingNodeType -- FixedNode, yay! And two new functions 
        specific to dealing with FixedNodes.
        * page/scrolling/ScrollingCoordinator.h:
        (WebCore::ScrollingCoordinator::updateViewportConstrainedNode):
        (WebCore::ScrollingCoordinator::syncChildPositions):

        This is the new class that represents fixed nodes in the state tree. 
        All of the changed properties are stored within 
        FixedPositionViewportConstraints.
        * page/scrolling/ScrollingStateFixedNode.cpp: Added.
        (WebCore):
        (WebCore::ScrollingStateFixedNode::create):
        (WebCore::ScrollingStateFixedNode::ScrollingStateFixedNode):
        (WebCore::ScrollingStateFixedNode::~ScrollingStateFixedNode):
        (WebCore::ScrollingStateFixedNode::updateConstraints):
        (WebCore::ScrollingStateFixedNode::dumpProperties):
        * page/scrolling/ScrollingStateFixedNode.h: Added.
        (WebCore):
        (ScrollingStateFixedNode):
        (WebCore::ScrollingStateFixedNode::viewportConstraints):
        (WebCore::toScrollingStateFixedNode):

        Make sure to create the right type of clone for each node.
        * page/scrolling/ScrollingStateNode.cpp:
        (WebCore::ScrollingStateNode::cloneAndReset):

        Now that m_children may be anything other than null, I found this 
        bug. We encounter it when the parameter to removeChild is this and we 
        want to remove all of our children. In that case, this is obviously 
        not found in its own child array.
        (WebCore::ScrollingStateNode::removeChild):

        ScrollingStateNode now caches the GraphicsLayer in addition to the 
        PlatformLayer. This will allow us to sync the GraphicsLayer position 
        at the appropriate times.
        * page/scrolling/ScrollingStateNode.h:
        (WebCore::ScrollingStateNode::isScrollingStateFixedNode):
        (WebCore::ScrollingStateNode::graphicsLayer):
        (ScrollingStateNode):

        Handle fixed nodes.
        * page/scrolling/ScrollingTree.cpp:
        (WebCore::ScrollingTree::updateTreeFromStateNode):

        New function parentScrollPositionDidChange() is called on children 
        when the parent has scrolled.
        * page/scrolling/ScrollingTreeNode.h:
        (ScrollingTreeNode):
        * page/scrolling/ScrollingTreeScrollingNode.h:
        (ScrollingTreeScrollingNode):

        Return true for supportsFixedPositionLayers(). 
        * page/scrolling/mac/ScrollingCoordinatorMac.h:
        (ScrollingCoordinatorMac):

        Handle fixed nodes.
        * page/scrolling/mac/ScrollingCoordinatorMac.mm:
        (WebCore::ScrollingCoordinatorMac::attachToStateTree):

        Now that m_children can be non-null I caught this pre-existing bug 
        where we would come times remove a node without updating the HashMap. 
        This patch fixes that by consolidating the removal into one function.
        (WebCore::ScrollingCoordinatorMac::removeNode):
        (WebCore::ScrollingCoordinatorMac::detachFromStateTree):
        (WebCore::ScrollingCoordinatorMac::clearStateTree):

        Update the GraphicsLayers to reflect the new position that the 
        Scrolling thread has moved the underlying CALayer to already.
        (WebCore::ScrollingCoordinatorMac::syncChildPositions):

        Pass new constraints over to the appropriate state node.
        (WebCore::ScrollingCoordinatorMac::updateViewportConstrainedNode):

        Cache the GraphicsLayer in addition to the PlatformLayer.
        * page/scrolling/mac/ScrollingStateNodeMac.mm:
        (WebCore::ScrollingStateNode::setScrollLayer):

        Here is the new class that represents fixed nodes over on the 
        scrolling thread. 
        * page/scrolling/mac/ScrollingTreeFixedNode.h: Added.
        (WebCore):
        (ScrollingTreeFixedNode):
        * page/scrolling/mac/ScrollingTreeFixedNode.mm: Added.
        (WebCore):
        (WebCore::ScrollingTreeFixedNode::create):
        (WebCore::ScrollingTreeFixedNode::ScrollingTreeFixedNode):
        (WebCore::ScrollingTreeFixedNode::~ScrollingTreeFixedNode):
        (WebCore::ScrollingTreeFixedNode::update):

        This is where the magic happens. re-position the fixed object when 
        its parent has scrolled so that it appears to have not moved at all.
        (WebCore::ScrollingTreeFixedNode::parentScrollPositionDidChange):

        Whenever we change the position of a scrolling layer, tell our 
        children.
        * page/scrolling/mac/ScrollingTreeScrollingNodeMac.mm:
        (WebCore::ScrollingTreeScrollingNodeMac::setScrollLayerPosition):

        Handle fixed nodes.
        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::attachToScrollingCoordinator):

        detachFromScrollingCoordinator() needs to be public so that it can be 
        called from RenderLayerCompositor for fixed nodes.
        * rendering/RenderLayerBacking.h:
        (RenderLayerBacking):

        RenderLayerCompositor takes control of attaching and detaching fixed 
        nodes to/from the ScrollingCoordinator. 
        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::flushPendingLayerChanges):
        (WebCore::RenderLayerCompositor::didFlushChangesForLayer):
        (WebCore::RenderLayerCompositor::updateBacking):
        (WebCore::RenderLayerCompositor::layerWillBeRemoved):
        (WebCore::RenderLayerCompositor::didMoveOnscreen):
        (WebCore::RenderLayerCompositor::willMoveOffscreen):
        (WebCore::RenderLayerCompositor::clearBackingForLayerIncludingDescendants):
        (WebCore::isRootmostFixedOrStickyLayer):
        (WebCore):
        (WebCore::RenderLayerCompositor::updateViewportConstraintStatus):
        (WebCore::RenderLayerCompositor::addViewportConstrainedLayer):
        (WebCore::RenderLayerCompositor::removeViewportConstrainedLayer):
        (WebCore::RenderLayerCompositor::computeViewportConstraints):
        (WebCore::nearestScrollingCoordinatorAncestor):
        (WebCore::RenderLayerCompositor::registerOrUpdateViewportConstrainedLayer):
        (WebCore::RenderLayerCompositor::unregisterViewportConstrainedLayer):
        (WebCore::RenderLayerCompositor::registerAllViewportConstrainedLayers):
        (WebCore::RenderLayerCompositor::unregisterAllViewportConstrainedLayers):
        * rendering/RenderLayerCompositor.h:
        (WebCore):
        (RenderLayerCompositor):

2012-11-05  Geoffrey Garen  <ggaren@apple.com>

        Cleaned up the Font class in preparation for optimizing kerning and ligatures
        https://bugs.webkit.org/show_bug.cgi?id=101258

        Reviewed by Dan Bernstein.

        * platform/graphics/Font.h:
        (WebCore::Font::typesettingFeatures):
        (WebCore::Font::computeTypesettingFeatures): Compute and cache our
        typesetting features instead of recomputing each time a client asks
        for them. This makes the class interface easier to use because
        "typesettingFeatures()" can appear in more than one expression without
        undue performance cost. This may also be a small speedup to code that
        calls typesettingFeatures() often for other reasons.

        * platform/graphics/Font.cpp:
        (WebCore::Font::Font):
        (WebCore::Font::operator=):
        (WebCore::Font::update): Ditto.

        (WebCore::Font::width): Unforked the width() function so all width-related
        interfaces can benefit from optimization without duplicate code.

2012-11-05  Peng Huang  <penghuang@google.com>

        Webkit does not handle some media keys correctly On Linux gtk platform.
        https://bugs.webkit.org/show_bug.cgi?id=101221

        Reviewed by Alexey Proskuryakov.

        Add media keyboard support on Linux gtk platform.

        * platform/chromium/KeyCodeConversionGtk.cpp:
        (WebCore::windowsKeyCodeForKeyEvent):

2012-11-05  Glenn Adams  <glenn@skynav.com>

        Add support to -webkit-line-break property for CSS3 Text line-break property values and semantics.
        https://bugs.webkit.org/show_bug.cgi?id=89235

        Reviewed by Eric Seidel.

        See also wiki documentation at:
        [1] http://trac.webkit.org/wiki/LineBreaking
        [2] http://trac.webkit.org/wiki/LineBreakingCSS3Mapping

        Web exposed changes include:
        (1) The default (initial) value for -webkit-line-break becomes 'auto', instead of 'normal';
        (2) The values 'auto', 'loose', 'normal', and 'strict' are added to -webkit-line-break;
        (3) See [2] above for details regarding interpretation.

        Tests: css3/line-break/line-break-auto-centered.html
               css3/line-break/line-break-auto-half-kana.html
               css3/line-break/line-break-auto-hyphens.html
               css3/line-break/line-break-auto-inseparables.html
               css3/line-break/line-break-auto-iteration-marks.html
               css3/line-break/line-break-auto-postfixes.html
               css3/line-break/line-break-auto-prefixes.html
               css3/line-break/line-break-auto-sound-marks.html
               css3/line-break/line-break-loose-centered.html
               css3/line-break/line-break-loose-half-kana.html
               css3/line-break/line-break-loose-hyphens.html
               css3/line-break/line-break-loose-inseparables.html
               css3/line-break/line-break-loose-iteration-marks.html
               css3/line-break/line-break-loose-postfixes.html
               css3/line-break/line-break-loose-prefixes.html
               css3/line-break/line-break-loose-sound-marks.html
               css3/line-break/line-break-normal-centered.html
               css3/line-break/line-break-normal-half-kana.html
               css3/line-break/line-break-normal-hyphens.html
               css3/line-break/line-break-normal-inseparables.html
               css3/line-break/line-break-normal-iteration-marks.html
               css3/line-break/line-break-normal-postfixes.html
               css3/line-break/line-break-normal-prefixes.html
               css3/line-break/line-break-normal-sound-marks.html
               css3/line-break/line-break-strict-centered.html
               css3/line-break/line-break-strict-half-kana.html
               css3/line-break/line-break-strict-hyphens.html
               css3/line-break/line-break-strict-inseparables.html
               css3/line-break/line-break-strict-iteration-marks.html
               css3/line-break/line-break-strict-postfixes.html
               css3/line-break/line-break-strict-prefixes.html
               css3/line-break/line-break-strict-sound-marks.html

        * platform/text/LineBreakIteratorPoolICU.h:
        (WebCore::LineBreakIteratorPool::makeLocaleWithBreakKeyword):
        Add static function to construct ICU locale argument (also used as pool key) with additional
        break keyword.
        (WebCore::LineBreakIteratorPool::take):
        (WebCore::LineBreakIteratorPool::put):
        (LineBreakIteratorPool):
        Remove direct dependency from ICU library (and types), moving that dependency into
        new {open,close}LineBreakIterator() functions (defined in TextBreakIteratorICU.cpp).
        Update to take line break mode into account.
        Create (and cache) different break iterators depending on line break mode (in addition to locale),
        which entails expanding pool entry key format to optionally append "@break=" +
        "loose"|"normal"|"strict" keyword to locale string.

        * platform/text/TextBreakIterator.h:
        (WebCore::LazyLineBreakIterator::LazyLineBreakIterator):
        (WebCore::LazyLineBreakIterator::isLooseCJKMode):
        (WebCore::LazyLineBreakIterator::get):
        (WebCore::LazyLineBreakIterator::reset):
        (LazyLineBreakIterator):
        Define LineBreakIteratorMode enumeration for use in TextBreakIterator et al.
        Add state member to indicate line break mode.

        * platform/text/TextBreakIteratorICU.cpp:
        (WebCore::acquireLineBreakIterator):
        Use new line break mode when making iterator from pool.
        Handle change of return type of LineBreakIteratorPool::take() to non-ICU type,
        i.e., TextBreakIterator* instead of ICU's UBreakIterator*.
        (WebCore::releaseLineBreakIterator):
        Handle change of parameter type of LineBreakIteratorPool::put() to non-ICU type,
        i.e., TextBreakIterator* instead of ICU's UBreakIterator*.
        (WebCore::isCJKLocale):
        New functions for determining if CJK rules apply.
        (WebCore::openLineBreakIterator):
        New function for abstracting opening of ICU style line break iterator. This is now
        used in LineBreakIteratorPoolICU.h rather than having direct ICU API dependency there.
        This function also takes into account the line break mode.
        (WebCore::closeLineBreakIterator):
        (WebCore::mapLineIteratorModeToRules):
        New function for abstracting closing of ICU style line break iterator. This is now
        used in LineBreakIteratorPoolICU.h rather than having direct ICU API dependency there.

        * rendering/RenderBlockLineLayout.cpp:
        (WebCore::RenderBlock::LineBreaker::nextLineBreak):
        Pass line break iterator mode flag when reseting LazyLineBreakIterator.
        Add looseMode local variable to prevent need for computing under isBreakable().

        * rendering/RenderText.cpp:
        (WebCore::mapLineBreakToIteratorMode):
        Add implementation for mapLineBreakToIteratorMode(), used by both RenderText::computePreferredLogicalWidths
        and RenderBlock::LineBreaker::nextLineBreak.
        (WebCore::RenderText::computePreferredLogicalWidths):
        Ensure (lazy line) breakIterator is initialized for line break mode.
        Ensure isBreakable() is passed loose mode flag to match behavior in RenderBlock::LineBreaker::nextLineBreak.

        * rendering/RenderText.h:
        (WebCore):
        Add declaration for mapLineBreakToIteratorMode(), used by both RenderText::computePreferredLogicalWidths
        and RenderBlock::LineBreaker::nextLineBreak.

        * rendering/break_lines.cpp:
        (WebCore):
        Introduce two (local) enums NBSPBehavior and LooseBehavior for expanding template on nextBreakablePosition
        to include loose mode parameter.
        (WebCore::isBreakableSpace):
        Add externally specified loose mode parameter to prevent need to invoke line break iterator
        accessor method on each invocation. Use new loose mode flavors off NBP functions.
        (WebCore::needsLineBreakIterator):
        Introduce loose mode behavior template parameter to optimize loose mode behavior code path in order
        to prevent regression to non loose mode path.
        (WebCore::nextBreakablePosition):
        (WebCore::nextBreakablePositionIgnoringNBSP):
        Use new template parameter enums described above.
        (WebCore::nextBreakablePositionIgnoringNBSPLoose):
        (WebCore::nextBreakablePositionLoose):
        Introduce two additional 'loose' mode flavors of NBP template expansions.

        * rendering/break_lines.h:
        (WebCore):
        (WebCore::isBreakable):
        Add externally specified loose mode parameter to prevent need to invoke line break iterator
        accessor method on each invocation.

2012-11-05  Adam Barth  <abarth@webkit.org>

        webkitRegionLayoutUpdate is incorrectly named
        https://bugs.webkit.org/show_bug.cgi?id=100335

        Reviewed by Ojan Vafai.

        DOM event names are supposed to be lower case.

        * dom/EventNames.h:
        (WebCore):
        * dom/WebKitNamedFlow.cpp:
        (WebCore::WebKitNamedFlow::dispatchRegionLayoutUpdateEvent):

2012-11-05  Adam Barth  <abarth@webkit.org>

        [V8] IntrusiveDOMWrapperMap should be usable for more than just Nodes
        https://bugs.webkit.org/show_bug.cgi?id=101110

        Reviewed by Kentaro Hara.

        This patch generalizes our support for storing wrappers in DOM objects
        to be usable for more than just nodes. After this patch, any object
        with a ScriptWrappable base class will have its wrapper stored inline
        in the object in the main world.

        To achieve this goal, this patch hides the details of how we map from
        objects to wrappers inside DOMDataStore and then removes the
        IntrusiveDOMWrapperMap class entirely. This approach lets us remove the
        DOMWrapperMap base class and make all of these functions non-virtual.

        * UseV8.cmake:
        * WebCore.gypi:
            - Remove deleted files.
        * bindings/scripts/CodeGeneratorV8.pm:
        (GenerateHeader):
        (GenerateNormalAttrGetter):
        (GenerateConstructorCallback):
        (GenerateNamedConstructorCallback):
        (GenerateToV8Converters):
            - Rather than grabbing at the DOMWrapperMap directly, we now ask
              the DOMDataStore to do this work for us.
        * bindings/scripts/test/V8/V8Float64Array.h:
        (WebCore::V8Float64Array::wrap):
        * bindings/scripts/test/V8/V8TestActiveDOMObject.h:
        (WebCore::V8TestActiveDOMObject::wrap):
        * bindings/scripts/test/V8/V8TestCustomNamedGetter.h:
        (WebCore::V8TestCustomNamedGetter::wrap):
        * bindings/scripts/test/V8/V8TestEventConstructor.h:
        (WebCore::V8TestEventConstructor::wrap):
        * bindings/scripts/test/V8/V8TestEventTarget.h:
        (WebCore::V8TestEventTarget::wrap):
        * bindings/scripts/test/V8/V8TestException.h:
        (WebCore::V8TestException::wrap):
        * bindings/scripts/test/V8/V8TestInterface.h:
        (WebCore::V8TestInterface::wrap):
        * bindings/scripts/test/V8/V8TestMediaQueryListListener.h:
        (WebCore::V8TestMediaQueryListListener::wrap):
        * bindings/scripts/test/V8/V8TestNamedConstructor.h:
        (WebCore::V8TestNamedConstructor::wrap):
        * bindings/scripts/test/V8/V8TestNode.cpp:
        (WebCore::V8TestNode::constructorCallback):
        (WebCore::V8TestNode::wrapSlow):
        * bindings/scripts/test/V8/V8TestObj.cpp:
        (WebCore::TestObjV8Internal::readOnlyTestObjAttrAttrGetter):
        * bindings/scripts/test/V8/V8TestObj.h:
        (WebCore::V8TestObj::wrap):
        * bindings/scripts/test/V8/V8TestSerializedScriptValueInterface.h:
        (WebCore::V8TestSerializedScriptValueInterface::wrap):
        * bindings/v8/DOMDataStore.cpp:
            - Updated run-bindings-test results.
        (WebCore::DOMDataStore::DOMDataStore):
        (WebCore::DOMDataStore::~DOMDataStore):
            - Simplify constructor and destructor now that there is only one
              hash map.
        (WebCore::DOMDataStore::current):
            - Now that V8DOMMap.cpp doesn't handle the null isolate case, we
              need to handle it here.
        (WebCore::DOMDataStore::reportMemoryUsage):
            - Simplfied now that there is only one wrapper map.
        (WebCore::DOMDataStore::weakCallback):
            - Moved from IntrusiveDOMWrapperMap.h
        * bindings/v8/DOMDataStore.h:
        (WebCore::DOMDataStore::get):
        (WebCore::DOMDataStore::set):
            - These functions now handle the intrusive case with a branch
              rather than with a virtual function call. In many cases, the
              branch can be optimized away by the compiler when the overloaded
              inline functions are inlined.
        (WebCore::DOMDataStore::wrapperIsStoredInObject):
            - Overloaded functions to determine whether to store the wrapper
              inside the object or in the hashmap.
        (WebCore::DOMDataStore::getWrapperFromObject):
        (WebCore::DOMDataStore::storeWrapperInObject):
            - Overloaded functions to get/set the wrapper from inside the
              object itself.
        * bindings/v8/DOMWrapperMap.h:
        (WebCore::DOMWrapperHashMap::get):
        (WebCore::DOMWrapperHashMap::set):
        (WebCore::DOMWrapperHashMap::clear):
        (WebCore::DOMWrapperHashMap::reportMemoryUsage):
        (WebCore::DOMWrapperHashMap::remove):
            - These functions are no longer virtual.
        * bindings/v8/DOMWrapperWorld.h:
        * bindings/v8/IntrusiveDOMWrapperMap.h: Removed.
        * bindings/v8/ScriptProfiler.cpp:
        * bindings/v8/SerializedScriptValue.cpp:
        (WebCore::neuterBinding):
            - We need to keep the type information slightly longer so that we
              look in the right wrapper map.
        * bindings/v8/V8DOMMap.cpp: Removed.
        * bindings/v8/V8DOMMap.h: Removed.
        * bindings/v8/V8DOMWindowShell.cpp:
        * bindings/v8/V8DOMWrapper.cpp:
        * bindings/v8/V8DOMWrapper.h:
        (WebCore::V8DOMWrapper::getCachedWrapper):
            - Defer this work to the store.
        (WebCore::V8DOMWrapper::setWrapperClass):
            - An overloaded function to set the right wrapper class.
        (WebCore::V8DOMWrapper::setJSWrapperForDOMObject):
            - This function is now general enough to handle ever kind of object.
        * bindings/v8/V8GCController.cpp:
        * bindings/v8/V8NPObject.cpp:
        * bindings/v8/WorkerContextExecutionProxy.cpp:
        * bindings/v8/WorkerScriptController.cpp:
        * bindings/v8/custom/V8HTMLImageElementConstructor.cpp:
        (WebCore::v8HTMLImageElementConstructorCallback):
            - Call the more general function (instead of the now-deleted specialized function).

2012-11-05  Alexey Proskuryakov  <ap@apple.com>

        Get rid of setCookieStoragePrivateBrowsingEnabled.
        https://bugs.webkit.org/show_bug.cgi?id=101247

        Reviewed by Brady Eidson.

        We were only doing anything here on Mac, and only because we couldn't know if
        sessions were in use. But sessions are always in use, and those obsolete changing
        cookie storage explicitly.

        * platform/network/win/CookieStorageWin.cpp: Removed.
        * PlatformWinCE.cmake:
        * WebCore.gypi:
        No more CookieStorageWin.cpp with an empty implementation.
    
        * WebCore.exp.in:
        * platform/mac/WebCoreSystemInterface.h:
        * platform/mac/WebCoreSystemInterface.mm:
        We no longer need this WKSI function.

        * page/Settings.cpp: (WebCore::Settings::setPrivateBrowsingEnabled):
        Removed the only call to setCookieStoragePrivateBrowsingEnabled().

        * platform/network/CookieStorage.h:
        * platform/network/cf/CookieStorageCFNet.cpp:
        * platform/network/curl/CookieJarCurl.cpp:
        * platform/network/soup/CookieStorageSoup.cpp:
        * platform/qt/TemporaryLinkStubsQt.cpp:
        Removed empty setCookieStoragePrivateBrowsingEnabled implementations.

        * platform/network/mac/CookieStorageMac.mm: This function used to have a FIXME
        that we should observe private storage while in private browsing mode. I don't think
        that it was correct - Safari doesn't display content of private storage, and thus
        doesn't need to know about changes.
        The removal of this function has an effect on WebKit1 clients that enable private
        browsing. We used to globally change cookie storage, even for loads not initiated
        by WebKit. Now we match API description: "If private browsing is enabled, WebKit
        will not store information about sites the user visits."

2012-11-05  Florin Malita  <fmalita@chromium.org>

        Crash when mixing layers, foreignObjects and SVG hidden containers
        https://bugs.webkit.org/show_bug.cgi?id=87297

        Reviewed by Dirk Schulze.

        Foreign objects may introduce content which requires layers, but layer creation is
        suppressed within RenderSVGHiddenContainer subtrees and this yields an inconsistent render
        tree state. This patch prevents foreignObject renderer instantiation under
        RenderSVGHiddenContainers.

        Test: svg/foreignObject/foreign-object-defs-crash.svg

        * svg/SVGForeignObjectElement.cpp:
        (WebCore::SVGForeignObjectElement::rendererIsNeeded):
        (WebCore):
        * svg/SVGForeignObjectElement.h:
        (SVGForeignObjectElement):

2012-11-05  Simon Fraser  <simon.fraser@apple.com>

        Remove the unused m_fixedPositionedElements from RenderView
        https://bugs.webkit.org/show_bug.cgi?id=101251

        Reviewed by Anders Carlsson.

        m_fixedPositionedElements was completely unused. Remove it
        and the related typedef.

        * rendering/RenderView.h:
        (RenderView):

2012-11-05  Simon Fraser  <simon.fraser@apple.com>

        Fix layer borders to cleaning appear and disappear on switching
        https://bugs.webkit.org/show_bug.cgi?id=101136

        Reviewed by Sam Weinig.

        GraphicsLayers decided whether to show layer borders based
        on a callback through the GraphicsLayerClient. This made it
        hard to manage state, resulting in a failure to cleanly
        hide layers when toggled off via the preference.
        
        Changed the layer border and repaint counter visibility to be bits
        stored on GraphicsLayer just like other properties, with getters
        and setters. RenderLayerBacking now updates these debug
        indicators when we update other compositing layer properties.
        
        In GraphicsLayerCA, avoid calling updateDebugIndicators() explicitly
        in several places by setting the change flag DebugIndicatorsChanged
        for properties whose values affect the appearance of the debug border.

        Removed the GraphicsLayerClient methods showDebugBorders() and
        showRepaintCounter() which are no longer required.

        * platform/graphics/GraphicsLayer.cpp:
        (WebCore::GraphicsLayer::GraphicsLayer):
        (WebCore::GraphicsLayer::updateDebugIndicators):
        * platform/graphics/GraphicsLayer.h:
        (WebCore::GraphicsLayer::setShowDebugBorder):
        (WebCore::GraphicsLayer::isShowingDebugBorder):
        (WebCore::GraphicsLayer::setShowRepaintCounter):
        (WebCore::GraphicsLayer::isShowingRepaintCounter):
        (WebCore::GraphicsLayer::repaintCount):
        (WebCore::GraphicsLayer::incrementRepaintCount):
        * platform/graphics/GraphicsLayerClient.h:
        * platform/graphics/ca/GraphicsLayerCA.cpp:
        (WebCore::GraphicsLayerCA::GraphicsLayerCA):
        (WebCore::GraphicsLayerCA::setMasksToBounds):
        (WebCore::GraphicsLayerCA::setDrawsContent):
        (WebCore::GraphicsLayerCA::platformCALayerShowRepaintCounter):
        (WebCore::GraphicsLayerCA::commitLayerChangesBeforeSublayers):
        (WebCore::GraphicsLayerCA::updateMasksToBounds):
        (WebCore::GraphicsLayerCA::updateLayerDrawsContent):
        (WebCore::GraphicsLayerCA::updateDebugBorder):
        (WebCore::GraphicsLayerCA::setShowDebugBorder):
        (WebCore::GraphicsLayerCA::setShowRepaintCounter):
        (WebCore::GraphicsLayerCA::swapFromOrToTiledLayer):
        (WebCore::GraphicsLayerCA::setupContentsLayer):
        (WebCore::GraphicsLayerCA::cloneLayer):
        * platform/graphics/ca/GraphicsLayerCA.h:
        (GraphicsLayerCA):
        (WebCore::GraphicsLayerCA::platformCALayerShowDebugBorders):
        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::updateDebugIndicators):
        * rendering/RenderLayerBacking.h:
        (RenderLayerBacking):
        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::updateBacking):
        * rendering/RenderLayerCompositor.h:
        (RenderLayerCompositor):

2012-11-05  Genevieve Mak  <gmak@rim.com>

        [BLACKBERRY] Update touch code to reflect touch refactor
        https://bugs.webkit.org/show_bug.cgi?id=101227

        Reviewed by Rob Buis.

        PR #2706785
        Reviewed Internally by: Mike Lattanzio

        * platform/blackberry/PlatformTouchEventBlackBerry.cpp:
        (WebCore::touchEventType):
        (WebCore::PlatformTouchEvent::PlatformTouchEvent):

2012-11-05  Alok Priyadarshi  <alokp@chromium.org>

        [chromium] Pass canPaintLCDText to WebContentLayerClient::paintContents
        https://bugs.webkit.org/show_bug.cgi?id=99083

        Reviewed by Stephen White.

        Use LCD text setting passed to WebContentLayerClient::paintContents instead of turning it off for all composited layers.

        No new tests needed. This patch does not change anything functionally.

        * platform/graphics/chromium/GraphicsLayerChromium.cpp:
        (WebCore::GraphicsLayerChromium::setContentsOpaque):
        (WebCore::GraphicsLayerChromium::paint):
        * platform/graphics/chromium/OpaqueRectTrackingContentLayerDelegate.cpp:
        (WebCore::OpaqueRectTrackingContentLayerDelegate::paintContents):
        * platform/graphics/chromium/OpaqueRectTrackingContentLayerDelegate.h:
        (OpaqueRectTrackingContentLayerDelegate):

2012-11-05  Stephen White  <senorblanco@chromium.org>

        [chromium] Build fix after http://trac.webkit.org/changeset/133488.
        Removed a deleted file.  Unreviewed.

        * WebCore.gypi:

2012-11-05  Kentaro Hara  <haraken@chromium.org>

        [V8] toV8(impl) should return null if impl is 0
        https://bugs.webkit.org/show_bug.cgi?id=101206

        Reviewed by Adam Barth.

        toV8(impl) should return null if impl is 0. However,
        V8HTMLCollection::toV8() does not have the null check.
        All other toV8()s return null.

        No tests. I think there will be no call path that hits the change.

        * bindings/v8/custom/V8HTMLCollectionCustom.cpp:
        (WebCore::toV8):

2012-11-05  David Barton  <dbarton@mathscribe.com>

        Implement SimpleFontData::platformBoundsForGlyph on skia
        https://bugs.webkit.org/show_bug.cgi?id=101115

        Reviewed by Eric Seidel.

        The implementation is similar to SimpleFontData::platformWidthForGlyph on skia.

        Tested by: fast/block/lineboxcontain/*glyphs*, mathml/presentation/*

        * platform/graphics/skia/SimpleFontDataSkia.cpp:
        (WebCore::SimpleFontData::platformBoundsForGlyph): Implemented.

2012-11-05  Andreas Kling  <kling@webkit.org>

        Decouple Attr logic from ElementAttributeData.
        <http://webkit.org/b/101126>

        Reviewed by Antti Koivisto.

        Move all logic dealing with Attr DOM nodes from ElementAttributeData to Element.
        This makes more sense since an Attr is tied to a single Element, but an ElementAttributeData
        can be shared by any number of Elements at a given time.

        Also updated naming convention from just "Attr" to "Attr node" in the code I was touching.
        "Attr" is way too generic, and has been historically confused with WebCore::Attribute a lot.

        * dom/Element.h:
        * dom/ElementAttributeData.h:
        * dom/Element.cpp:
        (WebCore::attrNodeListMap):
        (WebCore::attrNodeListForElement):
        (WebCore::ensureAttrNodeListForElement):
        (WebCore::removeAttrNodeListForElement):
        (WebCore::findAttrNodeInList):
        (WebCore::Element::~Element):
        (WebCore::Element::detachAttribute):
        (WebCore::Element::setAttributeNode):
        (WebCore::Element::removeAttributeInternal):
        (WebCore::Element::getAttributeNode):
        (WebCore::Element::getAttributeNodeNS):
        (WebCore::Element::normalizeAttributes):
        (WebCore::Element::attrIfExists):
        (WebCore::Element::ensureAttr):
        (WebCore::Element::detachAttrNodeFromElementWithValue):
        (WebCore::Element::detachAllAttrNodesFromElement):
        (WebCore::Element::cloneAttributesFromElement):

            Move everything Attr-related into Element.cpp while simplifying some loops and remove
            conditions that are no longer needed as they used to depend on having an attributeData().

        * dom/Node.h:
        (WebCore::Node::hasSyntheticAttrChildNodes):
        (WebCore::Node::setHasSyntheticAttrChildNodes):

            Renamed the hasAttrList() node flag to hasSyntheticAttrChildNodes().

        * dom/Attr.cpp:
        (WebCore::Attr::detachFromElementWithValue):

            Remove awkward indirection and let the call site deal with removing the Attr node from
            the Element's list of Attr nodes.

        * dom/ElementAttributeData.cpp:
        (WebCore::ElementAttributeData::clearAttributes):

            Remove now-unused Element* argument.

2012-11-05  Hans Muller  <hmuller@adobe.com>

        [CSS Exclusions] Polygon edges should span colinear vertices
        https://bugs.webkit.org/show_bug.cgi?id=99343

        Reviewed by Dirk Schulze.

        ExclusionPolygonEdges now span coincident and collinear vertices. Currently
        pairs of vertices are only considered coincident if their coordinates are exactly
        equal. Similarly, a vertex is only considered collinear with an edge if the area
        of the triangle defined by the three vertices is exactly zero.  In the future it
        may be useful to relax the comparison with zero.

        Tests: fast/exclusions/shape-inside/shape-inside-coincident-vertices.html
               fast/exclusions/shape-inside/shape-inside-collinear-vertices.html

        * rendering/ExclusionPolygon.cpp:
        (WebCore::determinant): Used to measure collinearity.
        (WebCore):
        (WebCore::areCollinearPoints): True if three FloatPoint arguments are collinear per the test outlined above.
        (WebCore::areCoincidentPoints): True if the two FloatPoint arguments are equal.
        (WebCore::nextVertexIndex): The next vertex index in clockwise or counterclockwise order.
        (WebCore::ExclusionPolygon::findNextEdgeVertexIndex): Return the index of the next non-coincident, non-collinear vertex.
        (WebCore::ExclusionPolygon::ExclusionPolygon): Skip coincident and collinear vertices when building the list of edges.
        * rendering/ExclusionPolygon.h: Added private findNextEdgeVertexIndex() declaration.

2012-11-05  Christophe Dumez  <christophe.dumez@intel.com>

        [EFL] Use POSIX implementation of SharedBuffer::createWithContentsOfFile()
        https://bugs.webkit.org/show_bug.cgi?id=101228

        Reviewed by Kenneth Rohde Christiansen.

        Get rid of EFL-specific implementation of SharedBuffer::createWithContentsOfFile()
        and reuse the POSIX one since it is pretty much the same.

        No new tests, no behavior change.

        * PlatformEfl.cmake:
        * platform/efl/SharedBufferEfl.cpp: Removed.

2012-11-05  Kentaro Hara  <haraken@chromium.org>

        Add a comment about a return value of IDBKey::toV8()
        https://bugs.webkit.org/show_bug.cgi?id=101212

        Reviewed by Adam Barth.

        Although all other toV8(impl) return null when impl is 0,
        IDBKey::toV8(impl) is expected to return undefined when impl is 0.
        This patch adds a comment about it.

        No tests.

        * bindings/js/JSIDBKeyCustom.cpp:
        (WebCore::toJS):
        * bindings/v8/custom/V8IDBKeyCustom.cpp:
        (WebCore::toV8):

2012-11-05  Dominik Röttsches  <dominik.rottsches@intel.com>

        [Cairo] Make Cairo honor image orientation
        https://bugs.webkit.org/show_bug.cgi?id=101207

        Reviewed by Kenneth Rohde Christiansen.

        Implement transformed image drawing in BitmapImageCairo, similar
        as it was done for Skia in bug 100179, r132384.
        The image drawing code needs to transform the graphics context
        depending on exif orientation in order for this to work.

        No new tests, covered by fast/images/exif-* which are passing now.

        * platform/graphics/BitmapImage.h: Enable draw function which respects image orientation for Cairo.
        * platform/graphics/cairo/BitmapImageCairo.cpp:
        (WebCore::BitmapImage::draw): Apply ImageOrientation's transformFromDefault() transformation to context.
        (WebCore):

2012-11-05  Kentaro Hara  <haraken@chromium.org>

        [V8] Dispose() and Clear() should be always coupled for safety
        https://bugs.webkit.org/show_bug.cgi?id=101191

        Reviewed by Adam Barth.

        Clear() is not mandatory. However, to avoid misusing already
        disposed wrappers, Clear() should be always called just
        after Dispose().

        No tests. No change in behavior.

        * bindings/v8/DOMWrapperMap.h:
        (WebCore::DOMWrapperHashMap::defaultWeakCallback):
        * bindings/v8/IntrusiveDOMWrapperMap.h:
        (WebCore::IntrusiveDOMWrapperMap::weakCallback):
        * bindings/v8/NPV8Object.cpp:
        (WebCore::freeV8NPObject):
        * bindings/v8/ScheduledAction.cpp:
        (WebCore::ScheduledAction::~ScheduledAction):
        * bindings/v8/V8NPObject.cpp:
        (WebCore::V8NPTemplateMap::dispose):
        (WebCore::weakNPObjectCallback):
        (WebCore::forgetV8ObjectForNPObject):
        * bindings/v8/V8PerContextData.cpp:
        (WebCore::V8PerContextData::dispose):
        * bindings/v8/V8ValueCache.cpp:
        (WebCore::cachedStringCallback):
        (WebCore::IntegerCache::~IntegerCache):
        * bindings/v8/custom/V8InjectedScriptManager.cpp:
        (WebCore::WeakReferenceCallback):

2012-11-05  Hans Muller  <hmuller@adobe.com>

        [CSS Exclusions] Layout of the first shape-inside line can be incorrect
        https://bugs.webkit.org/show_bug.cgi?id=100996

        Reviewed by Dirk Schulze.

        Made the conversion from floating point top/bottom logical shape bounds coordinates
        LayoutUnits explicit and corrected the case where the top value was truncated.  A
        float logicalTop value is converted to LayoutUnit with fromFloatCeil() to ensure
        that the LayoutUnit value is within the shape.
        
        Test: fast/exclusions/shape-inside/shape-inside-shape-logical-top.html

        * rendering/ExclusionShapeInsideInfo.h:
        (WebCore::ExclusionShapeInsideInfo::shapeLogicalTop): Redefined this method in terms of shapeLogicalBoundsY,Max().
        (WebCore::ExclusionShapeInsideInfo::shapeLogicalBottom):  Ditto.
        (WebCore::ExclusionShapeInsideInfo::lineOverlapsShapeBounds):  Ditto.
        (ExclusionShapeInsideInfo):
        (WebCore::ExclusionShapeInsideInfo::shapeLogicalBoundsY): Explicit conversion from floating point shape coordinates to LayoutUnits.
        (WebCore::ExclusionShapeInsideInfo::shapeLogicalBoundsMaxY): Ditto.

2012-11-05  Antti Koivisto  <antti@apple.com>

        Protect against resource deletion during iteration in MemoryCache::pruneDeadResourcesToSize
        https://bugs.webkit.org/show_bug.cgi?id=101211

        Reviewed by Andreas Kling.
        
        Some crashes have been seen under MemoryCache::pruneDeadResourcesToSize. A possible cause is that
        destroyDecodedData() call ends up evicting the resource pointed by 'previous' pointer during iteration
        and deleting the object. This looks in principle possible via stylesheets and SVG images.
        
        Speculative fix, no repro, no obvious way to construct a test.

        * loader/cache/MemoryCache.cpp:
        (WebCore::MemoryCache::pruneDeadResourcesToSize):
        
            Use CachedResourceHandle to protect the 'previous' pointer during iteration. Check if the
            resource has been kicked out from the cache during destroyDecodedData() and stop iterating
            if has (as it may die when CachedResourceHandle releases it).
            The 'current' pointer is not protected as the resource it points to is allowed to die.
            
2012-11-05  Andrey Adaikin  <aandrey@chromium.org>

        Web Inspector: Fix jscompiler cast syntax
        https://bugs.webkit.org/show_bug.cgi?id=101066

        Reviewed by Pavel Feldman.

        Casts should be in the form of "/** @type {TypeName} */ (expr)" instead of "/** @type {TypeName} */ expr".

        * inspector/InjectedScriptCanvasModuleSource.js:
        (.):
        * inspector/InjectedScriptSource.js:
        (.):
        * inspector/front-end/ApplicationCacheModel.js:
        (WebInspector.ApplicationCacheModel.prototype._frameNavigated):
        (WebInspector.ApplicationCacheModel.prototype._frameDetached):
        * inspector/front-end/AuditLauncherView.js:
        (WebInspector.AuditLauncherView.prototype._onRequestStarted):
        (WebInspector.AuditLauncherView.prototype._onRequestFinished):
        * inspector/front-end/BreakpointManager.js:
        (WebInspector.BreakpointManager.prototype._uiSourceCodeAdded):
        (WebInspector.BreakpointManager.prototype._uiSourceCodeFormatted):
        (WebInspector.BreakpointManager.prototype._uiSourceCodeRemoved):
        (WebInspector.BreakpointManager.prototype._breakpointResolved):
        (WebInspector.BreakpointManager.Breakpoint.prototype._locationUpdated):
        (WebInspector.BreakpointManager.Storage):
        * inspector/front-end/BreakpointsSidebarPane.js:
        (WebInspector.JavaScriptBreakpointsSidebarPane.prototype._breakpointAdded):
        * inspector/front-end/CSSNamedFlowCollectionsView.js:
        (WebInspector.CSSNamedFlowCollectionsView.prototype._documentUpdated):
        (WebInspector.CSSNamedFlowCollectionsView.prototype._namedFlowCreated):
        (WebInspector.CSSNamedFlowCollectionsView.prototype._regionLayoutUpdated):
        (WebInspector.CSSNamedFlowCollectionsView.prototype._selectedNodeChanged):
        * inspector/front-end/CSSSelectorProfileView.js:
        (WebInspector.CSSProfileHeader.prototype.createView):
        * inspector/front-end/CSSStyleModel.js:
        (WebInspector.CSSStyleModel.LiveLocation.prototype.uiLocation):
        (WebInspector.CSSStyleDeclaration.parseComputedStylePayload):
        * inspector/front-end/CompilerScriptMapping.js:
        (WebInspector.CompilerScriptMapping.prototype.rawLocationToUILocation):
        (WebInspector.CompilerScriptMapping.prototype.loadSourceMapForScript):
        * inspector/front-end/ConsoleView.js:
        (WebInspector.ConsoleView.prototype._frameAdded):
        (WebInspector.ConsoleView.prototype._frameRemoved):
        * inspector/front-end/DOMAgent.js:
        (WebInspector.DOMDocument):
        * inspector/front-end/DebuggerModel.js:
        (WebInspector.DebuggerModel.prototype.didSetBreakpoint):
        (WebInspector.DebuggerModel.prototype.setBreakpointByURL):
        (WebInspector.DebuggerModel.prototype.):
        (WebInspector.DebuggerModel.prototype.setBreakpointBySourceId):
        (WebInspector.DebuggerModel.CallFrame.prototype.get location):
        * inspector/front-end/DebuggerScriptMapping.js:
        (WebInspector.DebuggerScriptMapping.prototype._parsedScriptSource):
        * inspector/front-end/DirectoryContentView.js:
        (WebInspector.DirectoryContentView.prototype._sort):
        * inspector/front-end/ElementsPanel.js:
        (WebInspector.ElementsPanel.prototype._updateBreadcrumbIfNeeded):
        * inspector/front-end/ElementsPanelDescriptor.js:
        (WebInspector.ElementsPanelDescriptor.prototype.appendApplicableItems):
        * inspector/front-end/ElementsTreeOutline.js:
        (.get node):
        * inspector/front-end/ExtensionServer.js:
        (WebInspector.ExtensionServer.prototype._onAddRequestHeaders):
        (WebInspector.ExtensionServer.prototype._handleOpenURL):
        (WebInspector.ExtensionServer.prototype._onGetResourceContent):
        (WebInspector.ExtensionServer.prototype._onSetResourceContent):
        (WebInspector.ExtensionServer.prototype._notifyResourceAdded):
        (WebInspector.ExtensionServer.prototype._notifyUISourceCodeContentCommitted):
        (WebInspector.ExtensionServer.prototype._notifyRequestFinished):
        * inspector/front-end/FileContentView.js:
        (WebInspector.FileContentView.prototype._metadataReceived):
        (WebInspector.FileContentView.FileContentProvider.prototype.requestContent):
        * inspector/front-end/FileSystemModel.js:
        (WebInspector.FileSystemModel.prototype._frameAdded):
        (WebInspector.FileSystemModel.prototype._frameNavigated):
        (WebInspector.FileSystemModel.prototype._frameDetached):
        * inspector/front-end/FileSystemView.js:
        (WebInspector.FileSystemView.EntryTreeElement.prototype.onselect):
        (WebInspector.FileSystemView.EntryTreeElement.prototype.refresh):
        * inspector/front-end/HandlerRegistry.js:
        (WebInspector.HandlerRegistry.prototype._appendHrefItems):
        * inspector/front-end/HeapSnapshotLoader.js:
        (WebInspector.HeapSnapshotLoader.prototype.write):
        * inspector/front-end/HeapSnapshotView.js:
        (WebInspector.HeapSnapshotView.prototype._changeBase):
        (WebInspector.HeapProfileHeader.prototype.load):
        (WebInspector.HeapProfileHeader.prototype._snapshotReceived):
        * inspector/front-end/IndexedDBModel.js:
        (WebInspector.IndexedDBModel.prototype._frameNavigated):
        (WebInspector.IndexedDBModel.prototype._frameDetached):
        * inspector/front-end/IndexedDBViews.js:
        (WebInspector.IDBDataView.prototype._keyColumnHeaderFragment):
        * inspector/front-end/JavaScriptSourceFrame.js:
        (WebInspector.JavaScriptSourceFrame.prototype._onFormattedChanged):
        (WebInspector.JavaScriptSourceFrame.prototype._breakpointAdded):
        (WebInspector.JavaScriptSourceFrame.prototype._breakpointRemoved):
        (WebInspector.JavaScriptSourceFrame.prototype._consoleMessageAdded):
        (WebInspector.JavaScriptSourceFrame.prototype._consoleMessageRemoved):
        (WebInspector.JavaScriptSourceFrame.prototype._handleGutterClick):
        (WebInspector.JavaScriptSourceFrame.prototype._continueToLine):
        * inspector/front-end/MemoryStatistics.js:
        (WebInspector.MemoryStatistics.prototype.show):
        * inspector/front-end/NavigatorView.js:
        (WebInspector.NavigatorView.prototype._uiSourceCodeTitleChanged):
        (WebInspector.NavigatorView.prototype._uiSourceCodeWorkingCopyChanged):
        (WebInspector.NavigatorView.prototype._uiSourceCodeWorkingCopyCommitted):
        (WebInspector.NavigatorView.prototype._uiSourceCodeFormattedChanged):
        * inspector/front-end/NetworkLog.js:
        (WebInspector.NetworkLog.prototype._onRequestStarted):
        * inspector/front-end/NetworkManager.js:
        (WebInspector.NetworkManager.prototype._cacheDisabledSettingChanged):
        * inspector/front-end/NetworkPanel.js:
        (WebInspector.NetworkLogView.prototype._onRequestUpdated):
        (WebInspector.NetworkLogView.prototype._mainFrameNavigated):
        (WebInspector.NetworkPanel.prototype.reveal):
        (WebInspector.NetworkPanel.prototype.appendApplicableItems):
        * inspector/front-end/NetworkUISourceCodeProvider.js:
        (WebInspector.NetworkUISourceCodeProvider.prototype._parsedScriptSource):
        (WebInspector.NetworkUISourceCodeProvider.prototype._resourceAdded):
        * inspector/front-end/ObjectPopoverHelper.js:
        (WebInspector.ObjectPopoverHelper.prototype.):
        (WebInspector.ObjectPopoverHelper.prototype._showObjectPopover):
        * inspector/front-end/PresentationConsoleMessageHelper.js:
        (WebInspector.PresentationConsoleMessageHelper.prototype._consoleMessageAdded):
        (WebInspector.PresentationConsoleMessageHelper.prototype._parsedScriptSource):
        * inspector/front-end/ProfilesPanel.js:
        * inspector/front-end/ResourceScriptMapping.js:
        (WebInspector.ResourceScriptMapping.prototype.rawLocationToUILocation):
        (WebInspector.ResourceScriptMapping.prototype._uiSourceCodeAddedToWorkspace):
        (WebInspector.ResourceScriptFile.prototype._workingCopyCommitted):
        (WebInspector.ResourceScriptFile.prototype._workingCopyChanged):
        * inspector/front-end/ResourceTreeModel.js:
        (WebInspector.ResourceTreeModel.prototype._onRequestFinished):
        (WebInspector.ResourceTreeModel.prototype._consoleMessageAdded):
        * inspector/front-end/ResourcesPanel.js:
        (WebInspector.ResourcesPanel.prototype._databaseAdded):
        (WebInspector.ResourcesPanel.prototype._domStorageAdded):
        (WebInspector.IndexedDBTreeElement.prototype._indexedDBAdded):
        (WebInspector.IndexedDBTreeElement.prototype._indexedDBRemoved):
        (WebInspector.IndexedDBTreeElement.prototype._indexedDBLoaded):
        (WebInspector.FileSystemListTreeElement.prototype._fileSystemAdded):
        (WebInspector.FileSystemListTreeElement.prototype._fileSystemRemoved):
        (WebInspector.FileSystemListTreeElement.prototype._fileSystemTreeElementByName):
        (WebInspector.SearchResultsTreeElementsTraverser.prototype._traverseNext):
        (WebInspector.SearchResultsTreeElementsTraverser.prototype._traversePrevious):
        * inspector/front-end/RevisionHistoryView.js:
        (WebInspector.RevisionHistoryView.prototype._uiSourceCodeRemoved):
        * inspector/front-end/SASSSourceMapping.js:
        (rawLocationToUILocation):
        * inspector/front-end/ScopeChainSidebarPane.js:
        (WebInspector.ScopeChainSidebarPane.prototype.update):
        * inspector/front-end/Script.js:
        (WebInspector.Script.Location.prototype.uiLocation):
        * inspector/front-end/ScriptFormatter.js:
        (WebInspector.ScriptFormatter.prototype.get _worker):
        * inspector/front-end/ScriptsPanel.js:
        (WebInspector.ScriptsPanel.prototype._uiSourceCodeAdded):
        (WebInspector.ScriptsPanel.prototype._uiSourceCodeRemoved):
        (WebInspector.ScriptsPanel.prototype._editorClosed):
        (WebInspector.ScriptsPanel.prototype._editorSelected):
        (WebInspector.ScriptsPanel.prototype._scriptSelected):
        (WebInspector.ScriptsPanel.prototype.canSearchAndReplace):
        (WebInspector.ScriptsPanel.prototype.replaceSelectionWith):
        (WebInspector.ScriptsPanel.prototype.replaceAllWith):
        (WebInspector.ScriptsPanel.prototype._toggleBreakpoint):
        (WebInspector.ScriptsPanel.prototype.set _fileRenamed):
        (WebInspector.ScriptsPanel.prototype._appendUISourceCodeItems):
        * inspector/front-end/ScriptsPanelDescriptor.js:
        (WebInspector.ScriptsPanelDescriptor.prototype.appendApplicableItems):
        * inspector/front-end/StylesSourceMapping.js:
        (WebInspector.StylesSourceMapping.prototype.rawLocationToUILocation):
        (WebInspector.StylesSourceMapping.prototype._uiSourceCodeAddedToWorkspace):
        * inspector/front-end/TabbedEditorContainer.js:
        (WebInspector.TabbedEditorContainer.prototype._scrollChanged):
        (WebInspector.TabbedEditorContainer.prototype._selectionChanged):
        (WebInspector.TabbedEditorContainer.prototype._tabClosed):
        (WebInspector.TabbedEditorContainer.prototype._tabSelected):
        (WebInspector.TabbedEditorContainer.prototype._uiSourceCodeTitleChanged):
        (WebInspector.TabbedEditorContainer.prototype._uiSourceCodeWorkingCopyChanged):
        (WebInspector.TabbedEditorContainer.prototype._uiSourceCodeWorkingCopyCommitted):
        (WebInspector.TabbedEditorContainer.prototype._uiSourceCodeFormattedChanged):
        * inspector/front-end/TimelineModel.js:
        (WebInspector.TimelineModelLoader.prototype.write):
        * inspector/front-end/UISourceCodeFrame.js:
        (WebInspector.UISourceCodeFrame.prototype._onFormattedChanged):
        * inspector/front-end/Workspace.js:
        (WebInspector.WorkspaceController.prototype._frameAdded):
        (WebInspector.Project.prototype._fileAdded):
        (WebInspector.Project.prototype._fileRemoved):

2012-11-05  Pavel Feldman  <pfeldman@chromium.org>

        Web Inspector: render message bubbles in CodeMirror experiment.
        https://bugs.webkit.org/show_bug.cgi?id=101164

        Reviewed by Vsevolod Vlasov.

        It sounds like addLineWidget just makes it happen.

        * inspector/front-end/CodeMirrorTextEditor.js:
        (WebInspector.CodeMirrorTextEditor):
        (WebInspector.CodeMirrorTextEditor.prototype.addDecoration):
        (WebInspector.CodeMirrorTextEditor.prototype.get if):
        (WebInspector.CodeMirrorTextEditor.prototype.removeDecoration):
        (WebInspector.CodeMirrorTextEditor.prototype._change):
        * inspector/front-end/DefaultTextEditor.js:
        (.preventDefaultOnMouseUp):
        * inspector/front-end/PresentationConsoleMessageHelper.js:
        (WebInspector.PresentationConsoleMessageHelper):
        * inspector/front-end/cm/cmdevtools.css:
        (.CodeMirror .webkit-html-message-bubble):
        (.CodeMirror .webkit-html-message-bubble img):
        (.CodeMirror .webkit-html-warning-message):
        (.CodeMirror .webkit-html-error-message):

2012-11-05  Thiago Marcos P. Santos  <thiago.santos@intel.com>

        Validate CSS Device Adaptation properties and resolve shorthands
        https://bugs.webkit.org/show_bug.cgi?id=95962

        Reviewed by Alexis Menard.

        Add the missing keywords and properties for the viewport at-rule.
        Note that we have to mark that we are inside a viewport scope because
        some properties are not validated as they would be inside a style
        rule. As an example, the semantics of CSSPropertyWidth are completely
        different: on a viewport rule, it stands for a shorthand for the
        minimum and maximum width.

        Test: css3/device-adapt/viewport-properties-validation.html

        * css/CSSComputedStyleDeclaration.cpp:
        (WebCore::CSSComputedStyleDeclaration::getPropertyCSSValue):
        * css/CSSParser.cpp:
        (WebCore::CSSParser::parseValue):
        (WebCore):
        (WebCore::CSSParser::parseViewportProperty):
        (WebCore::CSSParser::parseViewportShorthand):
        * css/CSSParser.h:
        * css/CSSProperty.cpp:
        (WebCore::CSSProperty::isInheritedProperty):
        * css/CSSPropertyNames.in:
        * css/CSSValueKeywords.in:

2012-11-05  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r133286, r133385, and r133394.
        http://trac.webkit.org/changeset/133286
        http://trac.webkit.org/changeset/133385
        http://trac.webkit.org/changeset/133394
        https://bugs.webkit.org/show_bug.cgi?id=101198

        Broke image placement on some web sites. (Requested by kling
        on #webkit).

        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::sweepMatchedPropertiesCache):
        (WebCore::StyleResolver::matchAllRules):
        (WebCore::StyleResolver::canShareStyleWithElement):
        * dom/Attr.cpp:
        (WebCore::Attr::detachFromElementWithValue):
        * dom/Element.cpp:
        (WebCore::Element::~Element):
        (WebCore::Element::detachAttribute):
        (WebCore::Element::getAttribute):
        (WebCore::Element::setAttributeNode):
        (WebCore::Element::removeAttributeInternal):
        (WebCore::Element::getAttributeNode):
        (WebCore::Element::getAttributeNodeNS):
        (WebCore::Element::normalizeAttributes):
        (WebCore::Element::attrIfExists):
        (WebCore::Element::ensureAttr):
        (WebCore::Element::cloneAttributesFromElement):
        * dom/Element.h:
        (Element):
        (WebCore::Element::updateInvalidAttributes):
        * dom/ElementAttributeData.cpp:
        (WebCore::MutableElementAttributeData::MutableElementAttributeData):
        (WebCore):
        (WebCore::attrListMap):
        (WebCore::attrListForElement):
        (WebCore::ensureAttrListForElement):
        (WebCore::removeAttrListForElement):
        (WebCore::findAttrInList):
        (WebCore::ElementAttributeData::attrIfExists):
        (WebCore::ElementAttributeData::ensureAttr):
        (WebCore::ElementAttributeData::setAttr):
        (WebCore::ElementAttributeData::removeAttr):
        (WebCore::ElementAttributeData::detachAttrObjectsFromElement):
        (WebCore::ElementAttributeData::reportMemoryUsage):
        (WebCore::ElementAttributeData::cloneDataFrom):
        (WebCore::ElementAttributeData::clearAttributes):
        (WebCore::ElementAttributeData::getAttributeNode):
        * dom/ElementAttributeData.h:
        (WebCore):
        (WebCore::ElementAttributeData::attributeStyle):
        (WebCore::ElementAttributeData::setAttributeStyle):
        (ElementAttributeData):
        (WebCore::ElementAttributeData::ElementAttributeData):
        * dom/Node.h:
        (WebCore):
        (WebCore::Node::hasAttrList):
        (WebCore::Node::attributeStyleDirty):
        (WebCore::Node::setAttributeStyleDirty):
        (WebCore::Node::clearAttributeStyleDirty):
        (Node):
        (WebCore::Node::setHasAttrList):
        (WebCore::Node::clearHasAttrList):
        (WebCore::Node::isStyleAttributeValid):
        (WebCore::Node::setIsStyleAttributeValid):
        (WebCore::Node::clearIsStyleAttributeValid):
        * dom/StyledElement.cpp:
        (WebCore::StyledElement::updateStyleAttribute):
        (WebCore::StyledElement::attributeChanged):
        (WebCore::StyledElement::styleAttributeChanged):
        (WebCore::StyledElement::inlineStyleChanged):
        (WebCore::StyledElement::updateAttributeStyle):
        * dom/StyledElement.h:
        (StyledElement):
        (WebCore::StyledElement::invalidateStyleAttribute):
        (WebCore::StyledElement::attributeStyle):
        * inspector/InspectorCSSAgent.cpp:
        (WebCore::InspectorCSSAgent::buildObjectForAttributesStyle):

2012-11-05  Simon Hausmann  <simon.hausmann@digia.com>

        Unreviewed trivial Qt build fix.

        Surround imports from QtGui by QT_{BEGIN,END}_NAMESPACE to fix namespaced
        builds.

        * platform/graphics/qt/GraphicsContextQt.cpp:
        * platform/graphics/qt/ImageQt.cpp:

2012-11-05  Shinya Kawanaka  <shinyak@chromium.org>

        [Shadow] ShadowRoot type is not set correctly.
        https://bugs.webkit.org/show_bug.cgi?id=101188

        Reviewed by Hajime Morita.

        ShadowRoot type is not set correctly in Release build. We have had to remove #ifndef block.

        Test: fast/dom/shadow/shadowroot-type.html

        * dom/ShadowRoot.cpp:
        (WebCore::ShadowRoot::create):
        * testing/Internals.cpp:
        (WebCore::Internals::shadowRootType):
        (WebCore):
        * testing/Internals.h:
        (Internals):
        * testing/Internals.idl:

2012-11-05  Kent Tamura  <tkent@chromium.org>

        BaseChooserOnlyDateAndTimeInputType should implement DateTimeChooserClient
        https://bugs.webkit.org/show_bug.cgi?id=101038

        Reviewed by Hajime Morita.

        Add DateTimeChooserClient behavior to BaseChooserOnlyDateAndTimeInputType.
        It means that date/time input elements without
        ENABLE_INPUT_MULTIPLE_FIELDS_UI can open date/time choosers by
        DOMActivate event.

        This patch doesn't change behavior yet because Chromimum-Android port
        intercepts user events and doesn't deliver them to date/time input
        elements. <http://crbug.com/159381>

        * html/BaseChooserOnlyDateAndTimeInputType.cpp:
        Add DateTimeChooserClient behavior. The code is similar to
        PickerIndicatorElement.
        (WebCore::BaseChooserOnlyDateAndTimeInputType::~BaseChooserOnlyDateAndTimeInputType):
        Closes DateTimeChooser.
        (WebCore::BaseChooserOnlyDateAndTimeInputType::handleDOMActivateEvent):
        Open DateTimeChooser if
         - The element is not disabled,
         - The element is not read-only,
         - The element has a renderer,
         - This event is created by a user gesture, and
         - The element has no DateTimeChooser.
        (WebCore::BaseChooserOnlyDateAndTimeInputType::detach):
        Closes DateTimeChooser.
        (WebCore::BaseChooserOnlyDateAndTimeInputType::didChooseValue):
        Set a string value coming from a chooser to the input element.
        (WebCore::BaseChooserOnlyDateAndTimeInputType::didEndChooser):
        Clear m_dateTimeChooser when the chooser was closed.
        (WebCore::BaseChooserOnlyDateAndTimeInputType::closeDateTimeChooser):
        Requests to close the chooser.
        * html/BaseChooserOnlyDateAndTimeInputType.h:
        (BaseChooserOnlyDateAndTimeInputType):
         - Implement DateTimeChooserClient
         - Add closeDateTimeChooser helper function.
         - Add detach override.
         - Add m_dateTimeChooser.
        * html/HTMLInputElement.cpp:
        (WebCore::HTMLInputElement::setupDateTimeChooserParameters):
        Added. The code is moved from PickerIndicatorElement.cpp in order to
        share it with BaseChooserOnlyDateAndTimeInputType.
        * html/HTMLInputElement.h:
        (HTMLInputElement): Declare setupDateTimeChooserParameters.
        * html/shadow/PickerIndicatorElement.cpp:
        (WebCore::PickerIndicatorElement::openPopup):
        Move some code to HTMLInputElement::setupDateTimeChooserParameters.

2012-11-04  Julien Chaffraix  <jchaffraix@webkit.org>

        Fix the collapsing border code to handle mixed directionality at the row level
        https://bugs.webkit.org/show_bug.cgi?id=101060

        Reviewed by Ojan Vafai.

        After bug 87900, we support mixed directionality at the row-group level. For coherency
        - as the underlying code didn't support it - we were artificially ignoring 'direction'
        below the row-group. This change relaxes the restriction and patches the collapsing
        borders code to query the right style and border.

        Tests: fast/table/border-collapsing/table-ltr-rows-mixed-direction.html
               fast/table/border-collapsing/table-rtl-row-mixed-direction.html

        * rendering/RenderTable.cpp:
        (WebCore::RenderTable::tableStartBorderAdjoiningCell):
        (WebCore::RenderTable::tableEndBorderAdjoiningCell):
        Changed to query the row's direction.

        * rendering/RenderTableCell.cpp:
        (WebCore::RenderTableCell::hasStartBorderAdjoiningTable):
        (WebCore::RenderTableCell::hasEndBorderAdjoiningTable):
        Added 2 helper functions. They determine if a specific cell's border
        adjoins the table. This code is required as the last cell's end border
        can be resolved against the start border.

        (WebCore::RenderTableCell::computeCollapsedStartBorder):
        (WebCore::RenderTableCell::computeCollapsedEndBorder):
        Updated these functions now that being the start / end column doesn't mean
        that we have to resolve against the row / row-group / table's border.

        * rendering/RenderTableCell.h:
        (WebCore::RenderTableCell::styleForCellFlow):
        Updated to return the row's style.

        * rendering/RenderTableRow.cpp:
        (WebCore::RenderTableRow::borderAdjoiningStartCell):
        (WebCore::RenderTableRow::borderAdjoiningEndCell):
        * rendering/RenderTableSection.cpp:
        (WebCore::RenderTableSection::borderAdjoiningStartCell):
        (WebCore::RenderTableSection::borderAdjoiningEndCell):
        Updated these functions to work with mixed directionality.

        * rendering/RenderTableSection.cpp:
        (WebCore::RenderTableSection::setLogicalPositionForCell):
        Changed this function to use the section's direction. This is wrong and should be changed
        once we properly fix the collapsing border code.

        (WebCore::RenderTableSection::logicalRectForWritingModeAndDirection):
        Added a FIXME.

        * rendering/style/CollapsedBorderValue.h:
        (WebCore::CollapsedBorderValue::width):
        This is a bug in our implementation: we used to return a non-zero width for inexistant borders (per CSS 2.1,
        'border-style: off | hidden' should have a 0 width). This is covered by our existing tests (among others by
        fast/table/border-collapsing/last-cell-left-border-hidden-table-ltr-section-rtl.html).

2012-11-04  Andrey Adaikin  <aandrey@chromium.org>

        Web Inspector: [Canvas] do not blow up the capturing log
        https://bugs.webkit.org/show_bug.cgi?id=100752

        Reviewed by Pavel Feldman.

        Clear obsolete calls in the canvas 2D capturing log in runtime.
        Now we store in the log only minimum number of calls that are necessary to replay a
        canvas 2D context. To achieve that we find in runtime those calls in the log that no
        longer contribute to the final context state and remove them.
        These are the rules according which we find and remove such calls:
        - all PATH methods between a clip() call and beginPath() call can be removed
        - all MATRIX methods before a restore() or setTransform() call but after any PATH or corresponding save() method
        - all consecutive save() + restore() calls

        Tests: inspector/profiler/canvas2d/canvas2d-api-changes.html
               inspector/profiler/canvas2d/canvas2d-profiler-capturing-basics.html

        * inspector/InjectedScriptCanvasModuleSource.js:
        (.):

2012-11-04  Shinya Kawanaka  <shinyak@chromium.org>

        [Shadow] ShadowRoot should have a method to return ShadowRootType.
        https://bugs.webkit.org/show_bug.cgi?id=101178

        Reviewed by Hajime Morita.

        When we style PseudoCustomElement, we have to know ShadowRootType.
        We would like to expose a method to get ShadowRootType also in Release mode.

        This is a preparation patch for Bug 101170.

        * dom/ShadowRoot.h:
        (ShadowRoot):

2012-11-04  Keishi Hattori  <keishi@webkit.org>

        Introduce Month class to calendar picker
        https://bugs.webkit.org/show_bug.cgi?id=101024

        Reviewed by Kent Tamura.

        Month class needs to be introduced to implement a month picker. This
        patch just introduces the Month class into the calendar picker without
        changing the current behavior.

        No new tests. Covered by existing calendar-picker-*.html tests.

        * Resources/pagepopups/calendarPicker.js:
        (Month.prototype.toLocaleString): Returns a localized month string.
        (Month): Takes a Month object, number representing the month, or year and month numbers.
        (Month.parse): Returns a new Month from an ISO month string.
        (Month.createFromDate): Returns a new Month containing the given datetime.
        (Month.prototype.equals): Returns true if the given month is the same.
        (Month.prototype.previous): Returns the previous month.
        (Month.prototype.next): Returns the next month.
        (Month.prototype.startDate): Returns a datetime that is the start of this month. The value is inclusive.
        (Month.prototype.endDate): Returns a datetime that is the end of this month. The value is exclusive.
        (Month.prototype.valueOf): Returns a number representing the month.
        (Month.prototype.toString): Returns an ISO month string.
        (YearMonthController): Use Month object.
        (YearMonthController.prototype.attachTo): Year 275760 ends in September so use the year before to measure the label width.
        (YearMonthController.prototype.setMonth): Take a month object.
        (YearMonthController.prototype._redraw): Use ISO month string for element.dataset.value.
        (YearMonthController.prototype._handleYearMonthChange):
        (YearMonthController.prototype.moveRelatively):
        (DaysTable): Use Month object.
        (DaysTable.prototype._renderMonth): Take a month object. Testing for isNaN is moved up to fix a bug when showing September, 275760.
        (DaysTable.prototype._navigateToMonth): Take a month object.
        (DaysTable.prototype._navigateToMonthWithAnimation): Take a month object.
        (DaysTable.prototype.navigateToMonthAndKeepSelectionPosition): Take a month object.
        (DaysTable.prototype.selectDate):
        (DaysTable.prototype._maybeSetPreviousMonth): Use Month object to calculate the previous month.
        (DaysTable.prototype._maybeSetNextMonth): Use Month object to calculate the next month.

2012-11-04  Halton Huo  <halton.huo@intel.com>

        [EFL] Use _LIBRARIES instead of _LIBRARY
        https://bugs.webkit.org/show_bug.cgi?id=101042

        Reviewed by Gyuyoung Kim.

        In CMake Find files, _LIBRARY is intended for internal use, should
        use _LIBRARIES instead.

        * PlatformEfl.cmake: s/_LIBRARY}/_LIBRARIES}

2012-11-04  MORITA Hajime  <morrita@google.com>

        Shadow DOM should be able to be disabled per context.
        https://bugs.webkit.org/show_bug.cgi?id=101173

        Reviewed by Dimitri Glazkov.

        This change pulls back relevant bits from r131549. Note that if
        the the port enables runtime Shadow DOM flag, this can cause slow
        down on some Chromium page cycler test cases (which r131549
        attempted to fix).

        This change is temporal and the flags should be switched back from
        ContextFeatures to RuntimeEnabledFeatures once it gains sufficent
        stability.

        * dom/ContextFeatures.cpp:
        (WebCore::ContextFeatures::shadowDOMEnabled):
        (WebCore):
        * dom/ContextFeatures.h:
        * dom/Position.cpp:
        (WebCore::Position::Position):
        (WebCore::Position::findParent):
        * dom/TreeScope.cpp:
        (WebCore::TreeScope::getSelection):
        * html/HTMLTagNames.in:
        * html/shadow/HTMLContentElement.cpp:
        (WebCore::HTMLContentElement::contentTagName):
        * page/DOMWindow.idl:

2012-11-04  Shinya Kawanaka  <shinyak@chromium.org>

        [Shadow] Implement custom pseudo-elements styling
        https://bugs.webkit.org/show_bug.cgi?id=100812

        Reviewed by Hajime Morita.

        Instead of using ElementRareData::m_shadowPseudoId, we use 'pseudo' attribute.

        Later we would like to remove Element::shadowPseudoId and Element::setShadowPseudoId
        and use pseudo()/setPseudo() instead (Bug 101171).

        Test: fast/dom/shadow/styling-pseudo-attribute.html

        * dom/Element.cpp:
        (WebCore::Element::shadowPseudoId):
        (WebCore::Element::setShadowPseudoId):
        * dom/ElementRareData.cpp:
        (WebCore::ElementRareData::reportMemoryUsage):
        * dom/ElementRareData.h:
        (ElementRareData):

2012-11-04  Kent Tamura  <tkent@chromium.org>

        BaseChooserOnlyDateAndTimeInputType should have BaseClickableWithKeyInputType behavior
        https://bugs.webkit.org/show_bug.cgi?id=101039

        Reviewed by Hajime Morita.

        Add BaseClickableWithKeyInputType behavior to
        BaseChooserOnlyDateAndTimeInputType. It means date/time input types
        without ENABLE_INPUT_MULTIPLE_FIELDS_UI receive DOMActivate events by
        pressing space or enter key. They're going to open a date/time chooser
        by DOMActive event.

        Because BaseChooserOnlyDateAndTimeInputType inherits from
        BaseDateAndTimeInputType, it can't inherit
        BaseClickableWithKeyInputType. So, this patch adds static helper
        functions to BaseClickableWithKeyInputType, and
        BaseChooserOnlyDateAndTimeInputType uses them.

        This patch doesn't change behavior yet because Chromimum-Android port
        intercepts user events and doesn't deliver them to date/time input
        elements.

        * html/BaseChooserOnlyDateAndTimeInputType.cpp:
        (WebCore::BaseChooserOnlyDateAndTimeInputType::handleDOMActivateEvent):
        Add an empty implementation with a FIXME comment.
        (WebCore::BaseChooserOnlyDateAndTimeInputType::handleKeydownEvent):
        Add BaseClickableWithKeyInputType behavior by a helper function.
        (WebCore::BaseChooserOnlyDateAndTimeInputType::handleKeypressEvent): Ditto.
        (WebCore::BaseChooserOnlyDateAndTimeInputType::handleKeyupEvent): Ditto.
        (WebCore::BaseChooserOnlyDateAndTimeInputType::accessKeyAction): Ditto.
        * html/BaseChooserOnlyDateAndTimeInputType.h:
        (BaseChooserOnlyDateAndTimeInputType): Add function declarations.
        * html/BaseClickableWithKeyInputType.cpp:
        Add static helper functions, and existing member functions use them.
        * html/BaseClickableWithKeyInputType.h:
        (BaseClickableWithKeyInputType): Add declarations of the helper functions.
        * html/InputType.h:
        (InputType): Make dispatchSimulatedClickIfActive public because it is
        called from a helper function.

2012-11-04  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r133416.
        http://trac.webkit.org/changeset/133416
        https://bugs.webkit.org/show_bug.cgi?id=101169

        Broke world selection by right click (Requested by rniwa on
        #webkit).

        * page/EventHandler.cpp:
        (WebCore::EventHandler::handleGestureForTextSelectionOrContextMenu):
        (WebCore::EventHandler::sendContextMenuEvent):

2012-11-04  Gyuyoung Kim  <gyuyoung.kim@samsung.com>

        Missing ASCIILiteral in a place of accessibility
        https://bugs.webkit.org/show_bug.cgi?id=101160

        Reviewed by Darin Adler.

        ASCIILiteral usage is being missed in a spot of accessibliity.

        * accessibility/AccessibilityMediaControls.cpp:
        (WebCore::AccessibilityMediaTimeDisplay::accessibilityDescription):

2012-11-03  Balazs Kelemen  <kbalazs@webkit.org>

        [Qt][WK2] setPlatformStrategies always asserts after r132744
        https://bugs.webkit.org/show_bug.cgi?id=100838

        Reviewed by Simon Hausmann.

        Reland with build fixes.

        The problem here is that we use QWebSettings::clearMemoryCaches, a WebKit1 API
        from the injected bundle, which calls initializeWebCoreQt and it sets the platform
        strategies to the one for WebKit1. We should stop using WebKit1 API's from WebKit2
        code. In order to keep the behavior, this patch adds exported helpers to WebCore
        that can be used from DumpRenderTree and WebKitTestRunner. This is the same idea
        as WebCoreTestSupport but these helpers are specific to Qt. Technically we could
        add it to the WebKit1 API for the time being, but my goal was to move in the direction
        of removing the WebKit1 dependency from WebKitTestRunner. We only build the file
        in non production mode.

        Basically covered by all tests.

        * Target.pri:
        * WebCore.pri: We need to link against fontconfig (only in non-production mode) since
        initializeTestFonts uses it.
        * platform/qt/QtTestSupport.cpp: Added. I choose GPL license because code from qwebsettings.cpp
        is also under that.
        (WebKit):
        (WebKit::QtTestSupport::clearMemoryCaches): This is basically a copy of QWebSettings::clearMemoryCaches
        without calling initializeWebCoreQt.
        (WebKit::QtTestSupport::initializeTestFonts): I moved this code here as well now that we have to expose
        symbols from WebCore anyway. The advantage is that now we don't have to build it twice and we don't need
        additional files to forward it from the directory of DumpRenderTree for WebKitTestRunner.
        I added a call to FontCace::invalidate in the case when the font set has been changed so that it will do
        the job even if we would stop clearing all caches between tests. Also moved the call to
        QFontDatabase::removeAllApplicationFonts from callers to here.
        * platform/qt/QtTestSupport.h:
        (WebKit):
        (QtTestSupport):

2012-11-04  Florin Malita  <fmalita@chromium.org>

        Color-profile property triggers assert
        https://bugs.webkit.org/show_bug.cgi?id=101080

        Reviewed by Dirk Schulze.

        CSSPropertyColorProfile is not handled in StyleResolver::applySVGProperty(), triggering the
        unimplemented property assert. Adding a stub entry to avoid that.

        Test: svg/css/color-profile-crash.html

        * css/SVGCSSStyleSelector.cpp:
        (WebCore::StyleResolver::applySVGProperty):

2012-11-04  Kaustubh Atrawalkar  <kaustubh@motorola.com>

        Unable to copy text on disabled input fields on long press gesture
        https://bugs.webkit.org/show_bug.cgi?id=99698

        Reviewed by Ryosuke Niwa.

        Text from disabled input/text should be allowed to select. Replaced isContentEditable()
        with canStartSelection()

        Test: fast/events/touch/gesture/disabled-input-text-selection.html

        * page/EventHandler.cpp:
        (WebCore::EventHandler::handleGestureLongPress):

2012-11-03  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r133403, r133404, and r133409.
        http://trac.webkit.org/changeset/133403
        http://trac.webkit.org/changeset/133404
        http://trac.webkit.org/changeset/133409
        https://bugs.webkit.org/show_bug.cgi?id=101158

        "Broke tests" (Requested by kbalazs on #webkit).

        * Target.pri:
        * WebCore.pri:
        * platform/qt/QtTestSupport.h: Removed.

2012-11-03  Alexey Proskuryakov  <ap@apple.com>

        Get rid of USE(CFURLSTORAGESESSIONS)
        https://bugs.webkit.org/show_bug.cgi?id=101131

        Reviewed by Sam Weinig.

        This is always enabled on CFNetwork based platforms.

        * WebCore.exp.in:
        * page/Settings.cpp:
        (WebCore::Settings::setPrivateBrowsingEnabled):
        * platform/mac/CookieJar.mm:
        (WebCore::cookies):
        (WebCore::cookieRequestHeaderFieldValue):
        (WebCore::setCookies):
        (WebCore::cookiesEnabled):
        (WebCore::getRawCookies):
        (WebCore::deleteCookie):
        * platform/network/ResourceHandle.h:
        (ResourceHandle):
        * platform/network/cf/CookieStorageCFNet.cpp:
        (WebCore):
        (WebCore::currentCFHTTPCookieStorage):
        * platform/network/cf/CookieStorageCFNet.h:
        * platform/network/cf/ResourceHandleCFNet.cpp:
        (WebCore::willSendRequest):
        (WebCore::makeFinalRequest):
        (WebCore::ResourceHandle::willSendRequest):
        (WebCore):
        * platform/network/cf/ResourceRequest.h:
        (ResourceRequest):
        * platform/network/cf/ResourceRequestCFNet.cpp:
        (WebCore::ResourceRequest::doUpdatePlatformRequest):
        (WebCore):
        * platform/network/mac/CookieStorageMac.mm:
        (WebCore::setCookieStoragePrivateBrowsingEnabled):
        * platform/network/mac/ResourceHandleMac.mm:
        (WebCore::shouldRelaxThirdPartyCookiePolicy):
        (WebCore::ResourceHandle::createNSURLConnection):
        (WebCore::ResourceHandle::willSendRequest):
        (WebCore):
        * platform/network/mac/ResourceRequestMac.mm:
        (WebCore):
        (WebCore::ResourceRequest::setStorageSession):

2012-11-03  Balazs Kelemen  <kbalazs@webkit.org>

        [Qt][WK2] setPlatformStrategies always asserts after r132744
        https://bugs.webkit.org/show_bug.cgi?id=100838

        Reviewed by Simon Hausmann.

        Reland with build fix.

        The problem here is that we use QWebSettings::clearMemoryCaches, a WebKit1 API
        from the injected bundle, which calls initializeWebCoreQt and it sets the platform
        strategies to the one for WebKit1. We should stop using WebKit1 API's from WebKit2
        code. In order to keep the behavior, this patch adds exported helpers to WebCore
        that can be used from DumpRenderTree and WebKitTestRunner. This is the same idea
        as WebCoreTestSupport but these helpers are specific to Qt. Technically we could
        add it to the WebKit1 API for the time being, but my goal was to move in the direction
        of removing the WebKit1 dependency from WebKitTestRunner. We only build the file
        in non production mode.

        Basically covered by all tests.

        * Target.pri:
        * WebCore.pri: We need to link against fontconfig (only in non-production mode) since
        initializeTestFonts uses it.
        * platform/qt/QtTestSupport.cpp: Added. I choose GPL license because code from qwebsettings.cpp
        is also under that.
        (WebKit):
        (WebKit::QtTestSupport::clearMemoryCaches): This is basically a copy of QWebSettings::clearMemoryCaches
        without calling initializeWebCoreQt.
        (WebKit::QtTestSupport::initializeTestFonts): I moved this code here as well now that we have to expose
        symbols from WebCore anyway. The advantage is that now we don't have to build it twice and we don't need
        additional files to forward it from the directory of DumpRenderTree for WebKitTestRunner.
        I added a call to FontCace::invalidate in the case when the font set has been changed so that it will do
        the job even if we would stop clearing all caches between tests. Also moved the call to
        QFontDatabase::removeAllApplicationFonts from callers to here.
        * platform/qt/QtTestSupport.h:
        (WebKit):
        (QtTestSupport):

2012-11-03  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r133397.
        http://trac.webkit.org/changeset/133397
        https://bugs.webkit.org/show_bug.cgi?id=101155

        "Broke Qt. No way to force the damn bots to do a clean build.
        I'm giving up." (Requested by kbalazs on #webkit).

        * Target.pri:
        * WebCore.pri:
        * platform/qt/QtTestSupport.h: Removed.

2012-11-03  Stephen White  <senorblanco@chromium.org>

        Speculative fix to eliminate flakiness in
        css3/filters/blur-filter-page-scroll-self.html
        https://bugs.webkit.org/show_bug.cgi?id=91620.
        Suspicion is that a prior test is setting
        window.internals.settings.setEnableCompositingForFixedPosition(true),
        causing this test to be intermittely run on the GPU, giving different
        pixel results depending on test order.

        Reviewed by Jochen Eisinger.

        Covered by css3/filters/blur-filter-page-scroll-self.html

        * testing/InternalSettings.cpp:
        (WebCore::InternalSettings::Backup::Backup):
        (WebCore::InternalSettings::Backup::restoreTo):
        * testing/InternalSettings.h:
        (Backup):

2012-11-03  Mark Rowe  <mrowe@apple.com>

        REGRESSION (r132858): Crash below -[DOMElement setClassName:] when called with a nil string

        Reviewed by Anders Carlsson.

        The changes in r132858 introduced an overload of AtomicString::add for CFStrings. However, the overload
        that was introduced is not null safe.

        * platform/text/cf/AtomicStringCF.cpp:
        (WTF::AtomicString::add): Handle a null string by returning a null StringImpl.

2012-11-03  Balazs Kelemen  <kbalazs@webkit.org>

        [Qt][WK2] setPlatformStrategies always asserts after r132744
        https://bugs.webkit.org/show_bug.cgi?id=100838

        Reviewed by Simon Hausmann.

        The problem here is that we use QWebSettings::clearMemoryCaches, a WebKit1 API
        from the injected bundle, which calls initializeWebCoreQt and it sets the platform
        strategies to the one for WebKit1. We should stop using WebKit1 API's from WebKit2
        code. In order to keep the behavior, this patch adds exported helpers to WebCore
        that can be used from DumpRenderTree and WebKitTestRunner. This is the same idea
        as WebCoreTestSupport but these helpers are specific to Qt. Technically we could
        add it to the WebKit1 API for the time being, but my goal was to move in the direction
        of removing the WebKit1 dependency from WebKitTestRunner. We only build the file
        in non production mode.

        Basically covered by all tests.

        * Target.pri:
        * WebCore.pri: We need to link against fontconfig (only in non-production mode) since
        initializeTestFonts uses it.
        * platform/qt/QtTestSupport.cpp: Added. I choose GPL license because code from qwebsettings.cpp
        is also under that.
        (WebKit):
        (WebKit::QtTestSupport::clearMemoryCaches): This is basically a copy of QWebSettings::clearMemoryCaches
        without calling initializeWebCoreQt.
        (WebKit::QtTestSupport::initializeTestFonts): I moved this code here as well now that we have to expose
        symbols from WebCore anyway. The advantage is that now we don't have to build it twice and we don't need
        additional files to forward it from the directory of DumpRenderTree for WebKitTestRunner.
        I added a call to FontCace::invalidate in the case when the font set has been changed so that it will do
        the job even if we would stop clearing all caches between tests. Also moved the call to
        QFontDatabase::removeAllApplicationFonts from callers to here.
        * platform/qt/QtTestSupport.h:
        (WebKit):
        (QtTestSupport):

2012-11-03  Dan Beam  <dbeam@chromium.org>

        Implement HTMLFormElement#requestAutocomplete and associated events
        https://bugs.webkit.org/show_bug.cgi?id=100557

        Reviewed by Adam Barth.

        Implements an initial version of the proposal for interactive autocomplete outlined in this email:
        http://lists.whatwg.org/htdig.cgi/whatwg-whatwg.org/2012-October/037711.html

        The goal of this patch is to allow web authors to call formElement.requestAutocomplete(); after subscribing for
        autocomplete/autocompleteerror events on formElement. If the form's [autocomplete] attribute is "off" an
        error will be dispatched. Otherwise, a request will be issued to the FrameLoaderClient.  At the moment, the
        implementation in Chrome (https://codereview.chromium.org/11270018/) will simply dispatch an error until the
        UI on Chrome's side is built. Both autocomplete and autocompleteerror events will be dispatched asynchronously
        after a small delay to behave consistently in all situations and implementations.

        Currently this is behind the feature flag REQUEST_AUTOCOMPLETE, which is disabled.

        Test: fast/forms/form-request-autocomplete.html

        * dom/EventNames.h:
        (WebCore):

        Added autocomplete and autocompleteerror events. The autocomplete event is dispatched after a user adds more
        information to a form using the future UI. This is not currently dispatched in any implementation (including Chrome)
        but will be in the future. The autocompleteerror event is dispatched when the form has [autocomplete="off"] on the
        node being asked for an interactive autocomplete. The user agent may also dispatch this event if it doesn't implement
        this API but has turned on the feature flag, can't currently show an autocomplete UI (e.g. running headlessly or in
        an HTML notification, security concerns, or any other reason it desires).

        * html/HTMLAttributeNames.in:

        Added onautocomplete and onautocompleteerror attributes so they can be parsed when creating form elements and used
        as event listeners. For example:

          <form onautocomplete="/* when autocomplete succeeds */" autocompleteerror="/* when autocomplete fails */">

        * html/HTMLFormElement.cpp:
        (WebCore::HTMLFormElement::HTMLFormElement):
        (WebCore):

        Added m_requestAutocompleteTimer (a timer that's used to dispatch events asynchronously) to the initializer list that
        triggers requestAutocompleteTimerFired when it times out.

        (WebCore::HTMLFormElement::requestAutocomplete):

        Called when HTMLFormElement#requestAutocomplete is called from JS (also see HTMLFormElement.idl) and decides whether
        to dispatch an error and exit early (in the case where autocomplete="off") or pass the request on to the
        FrameLoaderClient.

        (WebCore::HTMLFormElement::finishRequestAutocomplete):

        Called when the request for an interactive autocomplete is finished with either a success or error result. This
        causes an event to queue and fired after a 0 second delay. Events are owned by HTMLFormElement and reference the
        target element (this) until fired.

        (WebCore::HTMLFormElement::requestAutocompleteTimerFired):

        Called when the event timer runs out to pump the queue of current events. Events are released on dispatch.

        (WebCore::HTMLFormElement::parseAttribute):

        Encountering onautocomplete or onautocompleteerror attributes while parsing HTMLFormElements now adds event listeners
        for autocomplete an autocompleteerror events (respectively) to dispatch the value of the attribute as a script.

        * html/HTMLFormElement.h:
        (HTMLFormElement):

        Added various methods and data members as required by the implementation.

        * html/HTMLFormElement.idl:

        Added the method requestAutocomplete and associated DOM event handler attributes (onautocomplete/onautocompleteerror)
        to HTMLFormElement's public DOM API (unprefixed, as per Ian Hickson's advice). All are require the Conditional
        REQUEST_AUTOCOMPLETE to be enabled to be activated.

        * loader/EmptyClients.cpp:
        (WebCore):
        (WebCore::EmptyFrameLoaderClient::didRequestAutocomplete):

        Added noop implementation for FrameLoader::didRequestAutocomplete.

        * loader/EmptyClients.h:
        (EmptyFrameLoaderClient):

        Added FrameLoader::didRequestAutocomplete to EmptyFrameLoaderClient interface.

        * loader/FrameLoaderClient.h:
        (FrameLoaderClient):

        Added noop implementation to FrameLoaderClient interface (which is implemented chromium's FrameLoaderLoaderImpl.cpp).

2012-11-03  Pavel Feldman  <pfeldman@chromium.org>

        Web Inspector: %d, %i, and %f log formatters have same result
        https://bugs.webkit.org/show_bug.cgi?id=101148

        Reviewed by Alexander Pavlov.

        Added separate formatters for %f, %i, %d and %s.

        Test: inspector/console/console-message-format.html

        * inspector/front-end/ConsoleMessage.js:
        (WebInspector.ConsoleMessageImpl.prototype.stringFormatter):
        (WebInspector.ConsoleMessageImpl.prototype.floatFormatter):
        (WebInspector.ConsoleMessageImpl.prototype.integerFormatter):

2012-11-03  Andreas Kling  <kling@webkit.org>

        Decouple Attr logic from ElementAttributeData.
        <http://webkit.org/b/101126>

        Reviewed by Antti Koivisto.

        Move all logic dealing with Attr DOM nodes from ElementAttributeData to Element.
        This makes more sense since an Attr is tied to a single Element, but an ElementAttributeData
        can be shared by any number of Elements at a given time.

        Also updated naming convention from just "Attr" to "Attr node" in the code I was touching.
        "Attr" is way too generic, and has been historically confused with WebCore::Attribute a lot.

        * dom/Element.h:
        * dom/ElementAttributeData.h:
        * dom/Element.cpp:
        (WebCore::attrNodeListMap):
        (WebCore::attrNodeListForElement):
        (WebCore::ensureAttrNodeListForElement):
        (WebCore::removeAttrNodeListForElement):
        (WebCore::findAttrNodeInList):
        (WebCore::Element::~Element):
        (WebCore::Element::detachAttribute):
        (WebCore::Element::setAttributeNode):
        (WebCore::Element::removeAttributeInternal):
        (WebCore::Element::getAttributeNode):
        (WebCore::Element::getAttributeNodeNS):
        (WebCore::Element::normalizeAttributes):
        (WebCore::Element::attrIfExists):
        (WebCore::Element::ensureAttr):
        (WebCore::Element::detachAttrNodeFromElementWithValue):
        (WebCore::Element::detachAllAttrNodesFromElement):
        (WebCore::Element::cloneAttributesFromElement):

            Move everything Attr-related into Element.cpp while simplifying some loops and remove
            conditions that are no longer needed as they used to depend on having an attributeData().

        * dom/Node.h:
        (WebCore::Node::hasSyntheticAttrChildNodes):
        (WebCore::Node::setHasSyntheticAttrChildNodes):

            Renamed the hasAttrList() node flag to hasSyntheticAttrChildNodes().

        * dom/Attr.cpp:
        (WebCore::Attr::detachFromElementWithValue):

            Remove awkward indirection and let the call site deal with removing the Attr node from
            the Element's list of Attr nodes.

        * dom/ElementAttributeData.cpp:
        (WebCore::ElementAttributeData::clearAttributes):

            Remove now-unused Element* argument.

2012-11-03  Pavel Feldman  <pfeldman@chromium.org>

        REGRESSION (r132014-r132047): Webkit Inspector Window docking broken
        https://bugs.webkit.org/show_bug.cgi?id=101125

        Reviewed by Vsevolod Vlasov.

        Added "bottom" as default docked state.

        * inspector/front-end/DockController.js:
        (WebInspector.DockController):

2012-11-02  Shinya Kawanaka  <shinyak@chromium.org>

        [Shadow] ShadowRoot should be able to know the existence of <content>
        https://bugs.webkit.org/show_bug.cgi?id=100921

        Reviewed by Dimitri Glazkov.

        When <content> is inserted into or removed from a shadow subtree, ShadowRoot counts the number of <content>.
        It provides O(1) method to check the existence of <content>.

        This is necessary when we implement a fast checking path for distribution invalidation when an element attribute
        is changed. Larger context is explained in Bug 100451.

        Test: fast/dom/shadow/has-content-elements.html

        * dom/ShadowRoot.cpp:
        (WebCore::ShadowRoot::ShadowRoot):
        (WebCore::ShadowRoot::hasInsertionPoint): Since we track both <content> and <shadow>, we don't need to traverse
        all the descendants of ShadowRoot anymore.
        * dom/ShadowRoot.h:
        (WebCore::ShadowRoot::registerContentElement):
        (WebCore::ShadowRoot::unregisterContentElement):
        (WebCore::ShadowRoot::hasContentElement):
        (ShadowRoot):
        * html/shadow/HTMLContentElement.cpp:
        (WebCore::HTMLContentElement::HTMLContentElement):
        (WebCore::HTMLContentElement::insertedInto): When <content> is inserted into ShadowDOM subtree,
        we notify it to the ShadowRoot. Note that only active <content> element is counted.
        (WebCore):
        (WebCore::HTMLContentElement::removedFrom):
        * html/shadow/HTMLContentElement.h:
        (HTMLContentElement):
        * testing/Internals.cpp:
        (WebCore::Internals::hasContentElement):
        (WebCore):
        * testing/Internals.h:
        (Internals):
        * testing/Internals.idl:

2012-11-02  KyungTae Kim  <ktf.kim@samsung.com>

        sCurrentPaintTimeStamp is not initialized when FrameView::paintContents returns in the middle
        https://bugs.webkit.org/show_bug.cgi?id=99990

        Reviewed by Darin Adler.

        Move initialization code for sCurrentPaintTimeStamp to the below of early returns,
        because it was not reset after early return.

        * page/FrameView.cpp:
        (WebCore::FrameView::paintContents):

2012-11-02  KyungTae Kim  <ktf.kim@samsung.com>

        Fix build warning in PluginView.cpp on release build
        https://bugs.webkit.org/show_bug.cgi?id=101049

        Reviewed by Kentaro Hara.

        The protocol, host, port parameters are not used when LOG_DISABLED
        Use UNUSED_PARAM macro for removing -Wunused-parameter warning

        * plugins/PluginView.cpp:
        (WebCore::PluginView::getAuthenticationInfo):

2012-10-25  Martin Robinson  <mrobinson@igalia.com>

        [GTK] Move soup authentication from GtkAuthenticationDialog to WebCore
        https://bugs.webkit.org/show_bug.cgi?id=99914

        Reviewed by Carlos Garcia Campos.

        Move the actual soup authentication code from the GtkAuthenticationDialog to ResourceHandleSoup.
        This allows a more generic implementation of authentication, for example, one where a WebKit2
        client can completely handle authentication.

        No new tests. This does not change behavior.

        * platform/gtk/GtkAuthenticationDialog.cpp: Remove references to the SoupPasswordManager, which
        is going away in the next release of Gnome. Instead we always assume that the authentication backend has
        support for remembering passwords and pass that information along with the answer to the authentication
        request.

        The rest of the changes to this class can be summarized as:
        1. Getting the information from the AuthenticationChallenge instead of directly from the libsoup
           objects.
        2. Using the AuthenticationClient to accomplish the authentication instead of talking to libsoup
           directly.
        * platform/gtk/GtkAuthenticationDialog.h:
        (GtkAuthenticationDialog): Remove members which are no longer used.
        * platform/network/ResourceHandle.h:
        (ResourceHandle): ResourceHandleSoup now implements the entire AuthenticationClient interface.
        * platform/network/soup/ResourceHandleSoup.cpp:
        (WebCore::WebCoreSynchronousLoader::didReceiveAuthenticationChallenge): Don't handle authentication
        for synchronous handles.
        (WebCore::ResourceHandle::didReceiveAuthenticationChallenge): Now set the current challenge on
        the internal data structure.
        (WebCore::ResourceHandle::receivedRequestToContinueWithoutCredential): Added.
        (WebCore::ResourceHandle::receivedCredential): Added.
        (WebCore::ResourceHandle::receivedCancellation): Added.
        (WebCore::authenicateCallback): Pass the handle as the authentication client.

2012-11-02  Benjamin Poulain  <bpoulain@apple.com>

        Improve CSSParser::setupParser() since the prefix/suffix are literals
        https://bugs.webkit.org/show_bug.cgi?id=101107

        Reviewed by Andreas Kling.

        * css/CSSParser.cpp:
        (WebCore::CSSParser::setupParser):
        * css/CSSParser.h:
        (CSSParser):
        (WebCore::CSSParser::setupParser):
        CSSParser::setupParser() is only used with literals prefix and suffix. We do not have
        to compute the length at runtime, we can direclty encode it in the binary.

2012-11-02  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r133375.
        http://trac.webkit.org/changeset/133375
        https://bugs.webkit.org/show_bug.cgi?id=101138

        Caused 3 tests to fail on Mac (Requested by aboxhall-laptop on
        #webkit).

        * platform/text/LineBreakIteratorPoolICU.h:
        (WebCore::LineBreakIteratorPool::take):
        (WebCore::LineBreakIteratorPool::put):
        (LineBreakIteratorPool):
        * platform/text/TextBreakIterator.h:
        (WebCore):
        (WebCore::LazyLineBreakIterator::LazyLineBreakIterator):
        (WebCore::LazyLineBreakIterator::get):
        (WebCore::LazyLineBreakIterator::reset):
        (LazyLineBreakIterator):
        * platform/text/TextBreakIteratorICU.cpp:
        (WebCore::acquireLineBreakIterator):
        (WebCore::releaseLineBreakIterator):
        * rendering/RenderBlockLineLayout.cpp:
        (WebCore::RenderBlock::LineBreaker::nextLineBreak):
        * rendering/RenderText.cpp:
        (WebCore::RenderText::computePreferredLogicalWidths):
        * rendering/RenderText.h:
        (WebCore):
        * rendering/break_lines.cpp:
        (WebCore):
        (WebCore::isBreakableSpace):
        (WebCore::needsLineBreakIterator):
        (WebCore::nextBreakablePosition):
        (WebCore::nextBreakablePositionIgnoringNBSP):
        * rendering/break_lines.h:
        (WebCore):
        (WebCore::isBreakable):

2012-11-02  Andreas Kling  <kling@webkit.org>

        Cut overgrown ElementAttributeData bitfield.
        <http://webkit.org/b/101129>

        Reviewed by Anders Carlsson.

        Make sure the ElementAttributeData bitfield fits into 32 bits. Added a compile-time assertion
        to guard against future bloatage.

        * dom/ElementAttributeData.cpp:
        (SameSizeAsElementAttributeData):
        * dom/ElementAttributeData.h:
        (ElementAttributeData):

2012-11-02  Michael Saboff  <msaboff@apple.com>

        Crash calling is8Bit() in visitedLinkHash()
        https://bugs.webkit.org/show_bug.cgi?id=101119

        Reviewed by Filip Pizlo.

        Added an isEmpty() check to AttributeURL and KURL.

        * platform/LinkHash.cpp:
        (WebCore::visitedLinkHash):

2012-11-02  Glenn Adams  <glenn@skynav.com>

        Add support to -webkit-line-break property for CSS3 Text line-break property values and semantics.
        https://bugs.webkit.org/show_bug.cgi?id=89235

        Reviewed by Eric Seidel.

        See also wiki documentation at:
        [1] http://trac.webkit.org/wiki/LineBreaking
        [2] http://trac.webkit.org/wiki/LineBreakingCSS3Mapping

        Web exposed changes include:
        (1) The default (initial) value for -webkit-line-break becomes 'auto', instead of 'normal';
        (2) The values 'auto', 'loose', 'normal', and 'strict' are added to -webkit-line-break;
        (3) See [2] above for details regarding interpretation.

        Tests: css3/line-break/line-break-auto-centered.html
               css3/line-break/line-break-auto-half-kana.html
               css3/line-break/line-break-auto-hyphens.html
               css3/line-break/line-break-auto-inseparables.html
               css3/line-break/line-break-auto-iteration-marks.html
               css3/line-break/line-break-auto-postfixes.html
               css3/line-break/line-break-auto-prefixes.html
               css3/line-break/line-break-auto-sound-marks.html
               css3/line-break/line-break-loose-centered.html
               css3/line-break/line-break-loose-half-kana.html
               css3/line-break/line-break-loose-hyphens.html
               css3/line-break/line-break-loose-inseparables.html
               css3/line-break/line-break-loose-iteration-marks.html
               css3/line-break/line-break-loose-postfixes.html
               css3/line-break/line-break-loose-prefixes.html
               css3/line-break/line-break-loose-sound-marks.html
               css3/line-break/line-break-normal-centered.html
               css3/line-break/line-break-normal-half-kana.html
               css3/line-break/line-break-normal-hyphens.html
               css3/line-break/line-break-normal-inseparables.html
               css3/line-break/line-break-normal-iteration-marks.html
               css3/line-break/line-break-normal-postfixes.html
               css3/line-break/line-break-normal-prefixes.html
               css3/line-break/line-break-normal-sound-marks.html
               css3/line-break/line-break-strict-centered.html
               css3/line-break/line-break-strict-half-kana.html
               css3/line-break/line-break-strict-hyphens.html
               css3/line-break/line-break-strict-inseparables.html
               css3/line-break/line-break-strict-iteration-marks.html
               css3/line-break/line-break-strict-postfixes.html
               css3/line-break/line-break-strict-prefixes.html
               css3/line-break/line-break-strict-sound-marks.html

        * platform/text/LineBreakIteratorPoolICU.h:
        (WebCore::LineBreakIteratorPool::makeLocaleWithBreakKeyword):
        Add static function to construct ICU locale argument (also used as pool key) with additional
        break keyword.
        (WebCore::LineBreakIteratorPool::take):
        (WebCore::LineBreakIteratorPool::put):
        (LineBreakIteratorPool):
        Remove direct dependency from ICU library (and types), moving that dependency into
        new {open,close}LineBreakIterator() functions (defined in TextBreakIteratorICU.cpp).
        Update to take line break mode into account.
        Create (and cache) different break iterators depending on line break mode (in addition to locale),
        which entails expanding pool entry key format to optionally append "@break=" +
        "loose"|"normal"|"strict" keyword to locale string.

        * platform/text/TextBreakIterator.h:
        (WebCore::LazyLineBreakIterator::LazyLineBreakIterator):
        (WebCore::LazyLineBreakIterator::isLooseCJKMode):
        (WebCore::LazyLineBreakIterator::get):
        (WebCore::LazyLineBreakIterator::reset):
        (LazyLineBreakIterator):
        Define LineBreakIteratorMode enumeration for use in TextBreakIterator et al.
        Add state member to indicate line break mode.

        * platform/text/TextBreakIteratorICU.cpp:
        (WebCore::acquireLineBreakIterator):
        Use new line break mode when making iterator from pool.
        Handle change of return type of LineBreakIteratorPool::take() to non-ICU type,
        i.e., TextBreakIterator* instead of ICU's UBreakIterator*.
        (WebCore::releaseLineBreakIterator):
        Handle change of parameter type of LineBreakIteratorPool::put() to non-ICU type,
        i.e., TextBreakIterator* instead of ICU's UBreakIterator*.
        (WebCore::isCJKLocale):
        New functions for determining if CJK rules apply.
        (WebCore::openLineBreakIterator):
        New function for abstracting opening of ICU style line break iterator. This is now
        used in LineBreakIteratorPoolICU.h rather than having direct ICU API dependency there.
        This function also takes into account the line break mode.
        (WebCore::closeLineBreakIterator):
        (WebCore::mapLineIteratorModeToRules):
        New function for abstracting closing of ICU style line break iterator. This is now
        used in LineBreakIteratorPoolICU.h rather than having direct ICU API dependency there.

        * rendering/RenderBlockLineLayout.cpp:
        (WebCore::RenderBlock::LineBreaker::nextLineBreak):
        Pass line break iterator mode flag when reseting LazyLineBreakIterator.
        Add looseMode local variable to prevent need for computing under isBreakable().

        * rendering/RenderText.cpp:
        (WebCore::mapLineBreakToIteratorMode):
        Add implementation for mapLineBreakToIteratorMode(), used by both RenderText::computePreferredLogicalWidths
        and RenderBlock::LineBreaker::nextLineBreak.
        (WebCore::RenderText::computePreferredLogicalWidths):
        Ensure (lazy line) breakIterator is initialized for line break mode.
        Ensure isBreakable() is passed loose mode flag to match behavior in RenderBlock::LineBreaker::nextLineBreak.

        * rendering/RenderText.h:
        (WebCore):
        Add declaration for mapLineBreakToIteratorMode(), used by both RenderText::computePreferredLogicalWidths
        and RenderBlock::LineBreaker::nextLineBreak.

        * rendering/break_lines.cpp:
        (WebCore):
        Introduce two (local) enums NBSPBehavior and LooseBehavior for expanding template on nextBreakablePosition
        to include loose mode parameter.
        (WebCore::isBreakableSpace):
        Add externally specified loose mode parameter to prevent need to invoke line break iterator
        accessor method on each invocation. Use new loose mode flavors off NBP functions.
        (WebCore::needsLineBreakIterator):
        Introduce loose mode behavior template parameter to optimize loose mode behavior code path in order
        to prevent regression to non loose mode path.
        (WebCore::nextBreakablePosition):
        (WebCore::nextBreakablePositionIgnoringNBSP):
        Use new template parameter enums described above.
        (WebCore::nextBreakablePositionIgnoringNBSPLoose):
        (WebCore::nextBreakablePositionLoose):
        Introduce two additional 'loose' mode flavors of NBP template expansions.

        * rendering/break_lines.h:
        (WebCore):
        (WebCore::isBreakable):
        Add externally specified loose mode parameter to prevent need to invoke line break iterator
        accessor method on each invocation.

2012-11-02  Elliott Sprehn  <esprehn@chromium.org>

        Replace NodeRareData hash map with a union on m_renderer
        https://bugs.webkit.org/show_bug.cgi?id=100057

        Reviewed by Eric Seidel.

        Use a union on Node::m_renderer between NodeRareData* and RenderObject*. This removes
        the overhead of accessing rare data and the memory from the map.

        This is an 8% improvement on Bindings/get-elements-by-tag-name.html which tested
        document.getElementsByTagName and was previously optimized in Bug 90059 for a 5% 
        improvement. As this is better than even the special casing for document that was
        done in that bug, general node list access should see an even greater win.

        This reduces the memory usage on nytimes.com by 250k per Bug 101052 by
        removing the rare data map overhead.

        This is also a 15% improvement on Parser/textarea-parsing.html

        By removing the performance overhead of rareData() this patch addresses the performance
        issues raised in Bugs 73853, 87034 and 89635.

        I ran Parser/html5-full-render.html and there was no performance regression after
        tuning Text::recalcTextStyle and the refactor that was done in r132684.

        No new tests, this is just a refactor.

        * dom/Document.cpp:
        (WebCore::Document::Document):
        * dom/Document.h:
        (WebCore::Node::Node):
        * dom/Element.cpp:
        (WebCore::Element::elementRareData):
        * dom/Node.cpp:
        (WebCore::Node::rareData):
        (WebCore::Node::ensureRareData):
        (WebCore::Node::clearRareData):
        (WebCore::Node::renderBox):
        (WebCore::Node::renderBoxModelObject):
        (WebCore::Node::reportMemoryUsage):
        * dom/Node.h:
        (NodeRareDataBase):
          Base class for NodeRareData that knows about the renderer so we can
          inline the accesses in Node.h
        (WebCore::NodeRareDataBase::renderer):
        (WebCore::NodeRareDataBase::setRenderer):
        (WebCore::NodeRareDataBase::~NodeRareDataBase):
        (WebCore::NodeRareDataBase::NodeRareDataBase):
        (WebCore):
        (WebCore::Node::renderer):
        (WebCore::Node::setRenderer):
        (Node):
        * dom/NodeRareData.h:
        * dom/NodeRenderStyle.h:
        (WebCore::Node::renderStyle):
        * dom/Text.cpp:
        (WebCore::Text::recalcTextStyle):
          This method appears very hot in html5-full-render.html and accessing the
          renderer 4 times caused a 2% performance regression with this patch. I
          reduced it to 1 access and there's no longer any performance regression.
        * dom/WebCoreMemoryInstrumentation.cpp:
          Removed tracking of the rare data map memory usage as there is no longer
          a map to track.
        * dom/WebCoreMemoryInstrumentation.h:
        * inspector/InspectorMemoryAgent.cpp:
        (WebCore::InspectorMemoryAgent::getProcessMemoryDistribution):

2012-11-02  Alexey Proskuryakov  <ap@apple.com>

        [Mac] ResourceHandle changes for network process
        https://bugs.webkit.org/show_bug.cgi?id=101111

        Reviewed by Jessie Berlin.

        With NSOperationQueue, we'll be getting NetworkProcess delegate method calls
        on secondary threads, and so we won't block other requests while consulting with WebProcess.

        * platform/network/NetworkingContext.h:
        (WebCore::NetworkingContext::scheduledRunLoopPairs):
        (WebCore::NetworkingContext::scheduledOperationQueue):
        Add an ability to schedule on an NSOperationQueue. Now that scheduling on run loop
        is not a must, give scheduledRunLoopPairs() a default implementation.

        * platform/network/mac/ResourceHandleMac.mm: Removed isInitializingConnection
        static. It was only used to catch a long obsolete bug with debug logging, and
        cannot work with multiple threads.
        (WebCore::ResourceHandle::start): Scedule on a operation queue if applicable.
        (-[WebCoreResourceHandleAsDelegate connection:willCacheResponse:]): Removed a
        check that used isInitializingConnection.

2012-11-02  Chris Rogers  <crogers@google.com>

        Automating gain AudioParam with linearRampToValueAtTime introduces buzzing distortion
        https://bugs.webkit.org/show_bug.cgi?id=100885

        Reviewed by Kenneth Russell.

        AudioParamTimeline needs to use double-precision for time-values to avoid drift and precision issues.

        Covered by existing tests.

        * Modules/webaudio/AudioParam.cpp:
        (WebCore::AudioParam::calculateTimelineValues):
        * Modules/webaudio/AudioParamTimeline.cpp:
        (WebCore::AudioParamTimeline::valueForContextTime):
        (WebCore::AudioParamTimeline::valuesForTimeRange):
        (WebCore::AudioParamTimeline::valuesForTimeRangeImpl):
        * Modules/webaudio/AudioParamTimeline.h:
        (AudioParamTimeline):

2012-11-02  Stephen Chenney  <schenney@chromium.org>

        Reduce redundant code in SimpleFontData[platform]
        https://bugs.webkit.org/show_bug.cgi?id=97245

        Reviewed by Eric Seidel.

        Move duplicated code out of platform specific files and into the common file.
        This represents all of the methods in SimpleFontData that do not have genuine
        platform specific code.

        No new tests because there is no change at all in the functionality.

        * platform/graphics/SimpleFontData.cpp:
        (WebCore):
        (WebCore::SimpleFontData::smallCapsFontData): Implementation from platform files.
        (WebCore::SimpleFontData::emphasisMarkFontData): Implementation from platform files.
        * platform/graphics/chromium/SimpleFontDataChromiumWin.cpp:
        (WebCore): Removed common code.
        * platform/graphics/freetype/SimpleFontDataFreeType.cpp:
        (WebCore): Removed common code.
        * platform/graphics/mac/SimpleFontDataMac.mm:
        (WebCore): Removed common code.
        * platform/graphics/pango/SimpleFontDataPango.cpp:
        (WebCore): Removed common code.
        * platform/graphics/qt/SimpleFontDataQt.cpp:
        (WebCore): Removed common code.
        * platform/graphics/skia/SimpleFontDataSkia.cpp:
        (WebCore): Removed common code.
        * platform/graphics/win/SimpleFontDataWin.cpp:
        (WebCore): Removed common code.
        * platform/graphics/wince/SimpleFontDataWinCE.cpp:
        (WebCore): Removed common code.
        * platform/graphics/wx/SimpleFontDataWx.cpp:
        (WebCore): Removed common code.

2012-11-02  Adam Barth  <abarth@webkit.org>

        memory-instrumentation-cached-images.html is crashing
        https://bugs.webkit.org/show_bug.cgi?id=101103

        Unreviewed.

        Restore code deleted in http://trac.webkit.org/changeset/133331.

        * bindings/v8/IntrusiveDOMWrapperMap.h:

2012-11-02  Simon Fraser  <simon.fraser@apple.com>

        Enable SUBPIXEL_LAYOUT on Mac
        https://bugs.webkit.org/show_bug.cgi?id=101076

        Reviewed by Dave Hyatt.

        Define ENABLE_SUBPIXEL_LAYOUT and include it in FEATURE_DEFINES.

        * Configurations/FeatureDefines.xcconfig:

2012-11-02  Lianghui Chen  <liachen@rim.com>

        [BlackBerry] ResourceHandle::cancel() in ResourceHandleBlackBerry should setClient to null.
        https://bugs.webkit.org/show_bug.cgi?id=101082

        Internal PR: 235410.
        Patch suggested by George Staikos, prepared by Lyon Chen.
        Reviewed by Yong Li.

        ResourceHandle::cancel() should call setClient(0) to close the window
        during which it has been cancelled but its client is still there and can
        be called.

        No new tests as it's a code improvement without obvious bug.

        * platform/network/blackberry/ResourceHandleBlackBerry.cpp:
        (WebCore::ResourceHandle::cancel):

2012-11-02  Anders Carlsson  <andersca@apple.com>

        Add a PluginInactive plug-in unavailability reason
        https://bugs.webkit.org/show_bug.cgi?id=101089

        Reviewed by Sam Weinig.

        This is to be used by Mac WebKit and WebKit2 shortly.

        * English.lproj/Localizable.strings:
        * platform/LocalizedStrings.cpp:
        (WebCore::inactivePluginText):
        (WebCore):
        * platform/LocalizedStrings.h:
        (WebCore):
        * platform/blackberry/LocalizedStringsBlackBerry.cpp:
        (WebCore::inactivePluginText):
        (WebCore):
        * platform/efl/LocalizedStringsEfl.cpp:
        (WebCore::inactivePluginText):
        (WebCore):
        * platform/gtk/LocalizedStringsGtk.cpp:
        (WebCore::inactivePluginText):
        (WebCore):
        * platform/qt/LocalizedStringsQt.cpp:
        (WebCore::inactivePluginText):
        (WebCore):
        * rendering/RenderEmbeddedObject.cpp:
        (WebCore::unavailablePluginReplacementText):
        * rendering/RenderEmbeddedObject.h:

2012-11-02  Rob Buis  <rbuis@rim.com>

        [CMAKE] Remove QNX specific section
        https://bugs.webkit.org/show_bug.cgi?id=101063

        Reviewed by Daniel Bates.

        We do not need the QNX section anymore, so also remove the FEATURE_DEFINES_CSS variable as it
        equals FEATURE_DEFINES_WITH_SPACE_SEPARATOR.

        * CMakeLists.txt:

2012-11-02  Michael Saboff  <msaboff@apple.com>

        visitedHashLink() converts 8 bit URLs and attributes to 16 bits.
        https://bugs.webkit.org/show_bug.cgi?id=101014

        Reviewed by Geoffrey Garen.

        Converted most of the static methods to templated based on character type.  Changed visitedHashLink to 
        check bitness of both the base URL and attribute.  If both are 8 bit, then we process using the LChar
        version of the templated methods.  Otherwise we use the 16 bit flavor.

        Changes covered by existing tests.

        * platform/LinkHash.cpp:
        (WebCore::findSlashDotDotSlash):
        (WebCore::findSlashSlash):
        (WebCore::findSlashDotSlash):
        (WebCore::containsColonSlashSlash):
        (WebCore::squeezeOutNullCharacters):
        (WebCore::cleanSlashDotDotSlashes):
        (WebCore::mergeDoubleSlashes):
        (WebCore::cleanSlashDotSlashes):
        (WebCore::cleanPath):
        (WebCore::matchLetter):
        (WebCore::needsTrailingSlash):
        (WebCore::visitedURLInline):
        (WebCore::visitedURL):
        (WebCore::visitedLinkHash):

2012-11-02  Ian Vollick  <vollick@chromium.org>

        Support invalidation tracking for composited layers
        https://bugs.webkit.org/show_bug.cgi?id=97801

        Reviewed by Simon Fraser.

        GraphicsLayers now store invalidated rects and can include them in
        the layer tree dump.

        Test: compositing/repaint/invalidations-on-composited-layers.html

        * WebCore.exp.in:
          Exports FrameView::resetTrackedRepaints()
        * page/FrameView.cpp:
        (WebCore::FrameView::setTracksRepaints):
          Notifies each compositor that we are starting/stopping repaints.
        (WebCore::FrameView::resetTrackedRepaints):
          Moved implementation to the cpp file.
        * platform/graphics/GraphicsLayer.cpp:
        (WebCore::GraphicsLayer::~GraphicsLayer):
          Clears the repaint rects associated with this layer.
        (WebCore::GraphicsLayer::resetTrackedRepaints):
          Clears the repaint rects associated with this layer.
          Note that the repaint rects are stored in a statically allocated
          HashMap to avoid using space on the graphics layers.
        (WebCore::GraphicsLayer::addRepaintRect):
          Adds a repaint rect to list associated with this layer in the
          hash map mentioned above.
        (WebCore::GraphicsLayer::dumpProperties):
          This has been modified to include the repaint rects in the dump
          if they've been requested.
        * platform/graphics/GraphicsLayerClient.h:
        (WebCore::GraphicsLayerClient::isTrackingRepaints):
          This is how graphics layers check if repaint tracking is happening.
          Returns false by default.
        * platform/graphics/blackberry/GraphicsLayerBlackBerry.cpp:
        (WebCore::GraphicsLayerBlackBerry::setContentsNeedsDisplay):
        (WebCore::GraphicsLayerBlackBerry::setNeedsDisplay):
        (WebCore::GraphicsLayerBlackBerry::setNeedsDisplayInRect):
          These now call GraphicsLayer::addRepaintRect as necessary.
        * platform/graphics/ca/GraphicsLayerCA.cpp:
        (WebCore::GraphicsLayerCA::setNeedsDisplayInRect):
          Now calls GraphicsLayer::addRepaintRect as necessary.
        * platform/graphics/chromium/GraphicsLayerChromium.cpp:
        (WebCore::GraphicsLayerChromium::setContentsNeedsDisplay):
        (WebCore::GraphicsLayerChromium::setNeedsDisplay):
        (WebCore::GraphicsLayerChromium::setNeedsDisplayInRect):
          These now call GraphicsLayer::addRepaintRect as necessary.
        * platform/graphics/clutter/GraphicsLayerClutter.cpp:
        (WebCore::GraphicsLayerClutter::setNeedsDisplay):
        (WebCore::GraphicsLayerClutter::setNeedsDisplayInRect):
          These now call GraphicsLayer::addRepaintRect as necessary.
        * platform/graphics/texmap/GraphicsLayerTextureMapper.cpp:
        (WebCore::GraphicsLayerTextureMapper::setNeedsDisplay):
        (WebCore::GraphicsLayerTextureMapper::setContentsNeedsDisplay):
        (WebCore::GraphicsLayerTextureMapper::setNeedsDisplayInRect):
          These now call GraphicsLayer::addRepaintRect as necessary.
        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::isTrackingRepaints):
          Required since this is a GraphicsLayerClient.
        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::layerTreeAsText):
          Now accepts a flag to include the repaint rects in the layer tree
          dump.
        (WebCore::resetTrackedRepaintRectsRecursive):
          Clears the repaint rects on all graphics layers.
        (WebCore::RenderLayerCompositor::resetTrackedRepaintRects):
          Clears the repaint rects on all graphics layers.
        (WebCore::RenderLayerCompositor::isTrackingRepaints):
          Required since this is a GraphicsLayerClient.
        * testing/Internals.cpp:
        (WebCore::Internals::layerTreeAsText):
        * testing/Internals.h:
        * testing/Internals.idl:
          The internals changes plumb the new flag for including the repaint
          rects in the layer tree dump.

2012-11-02  Adam Barth  <abarth@webkit.org>

        [V8] Generalize NodeWrapperMap to be able to handle other sorts of keys
        https://bugs.webkit.org/show_bug.cgi?id=100973

        Reviewed by Stephen White.

        This is the first step towards using intrusive DOM wrapper maps more
        widely in WebCore (see
        http://lists.webkit.org/pipermail/webkit-dev/2012-November/022686.html
        for more context).

        * bindings/v8/DOMDataStore.cpp:
        (WebCore::DOMDataStore::DOMDataStore):
        * bindings/v8/IntrusiveDOMWrapperMap.h:
        (WebCore):
        (WebCore::IntrusiveDOMWrapperMap::weakCallback):

2012-11-02  Adam Barth  <abarth@webkit.org>

        ASSERT in RenderLayer::hitTestContents can fire
        https://bugs.webkit.org/show_bug.cgi?id=99656

        Reviewed by Eric Seidel.

        The issue is that updateHitTestResult and addNodeToRectBasedTestResult
        are using two different nodes. Since they aren't consistent, we violate
        assertions about only setting the inner node if we're doing a
        rect-based hit test. This patch makes the two consistent.

        Test: fast/dom/nodesFromRect/nodesFromRect-continuation-crash.html

        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::nodeForHitTest):
        (WebCore):
        (WebCore::RenderBlock::nodeAtPoint):
        (WebCore::RenderBlock::updateHitTestResult):
        * rendering/RenderBlock.h:
        (RenderBlock):

2012-11-02  Mike West  <mkwst@chromium.org>

        Prefer 'Content-Security-Policy' to 'X-WebKit-CSP'.
        https://bugs.webkit.org/show_bug.cgi?id=101043

        Reviewed by Adam Barth.

        The canonical 'Content-Security-Policy' header landed in 133095, but we
        missed a few tests while updating to the new hotness. We also should
        start using the canonical header for the inspector.

        This patch should have no visible change; tests should continue to pass
        with the new header, just as they did with the old header.

        * inspector/front-end/inspector.html:

2012-11-02  Adam Barth  <abarth@webkit.org>

        ENABLE(UNDO_MANAGER) is disabled everywhere and is not under active development
        https://bugs.webkit.org/show_bug.cgi?id=100711

        Reviewed by Eric Seidel.

        No one is actively working on ENABLE(UNDO_MANAGER). There are some
        tricky lifetime issues in the UndoManager API that are complicating
        ongoing work to improve the interaction between WebCore and the garbage
        collector. Rather than leave this code in a broken state, we should
        remove it for the time being. We can always restore it from the svn
        history when there is an active owner for this code.

        * CMakeLists.txt:
        * Configurations/FeatureDefines.xcconfig:
        * DerivedSources.cpp:
        * DerivedSources.make:
        * DerivedSources.pri:
        * GNUmakefile.features.am:
        * GNUmakefile.list.am:
        * Target.pri:
        * UseJSC.cmake:
        * UseV8.cmake:
        * WebCore.gypi:
        * WebCore.vcproj/WebCore.vcproj:
        * WebCore.xcodeproj/project.pbxproj:
        * bindings/js/DOMTransaction.cpp: Removed.
        * bindings/js/DOMTransaction.h: Removed.
        * bindings/js/JSBindingsAllInOne.cpp:
        * bindings/js/JSUndoManagerCustom.cpp: Removed.
        * bindings/v8/DOMTransaction.cpp: Removed.
        * bindings/v8/DOMTransaction.h: Removed.
        * bindings/v8/V8HiddenPropertyName.h:
        (WebCore):
        * bindings/v8/custom/V8DOMTransactionCustom.cpp: Removed.
        * bindings/v8/custom/V8UndoManagerCustom.cpp: Removed.
        * css/PropertySetCSSStyleDeclaration.cpp:
        (WebCore::PropertySetCSSStyleDeclaration::setCssText):
        (WebCore::PropertySetCSSStyleDeclaration::setProperty):
        (WebCore::PropertySetCSSStyleDeclaration::removeProperty):
        (WebCore::PropertySetCSSStyleDeclaration::setPropertyInternal):
        * dom/CharacterData.cpp:
        (WebCore::CharacterData::setDataAndUpdate):
        * dom/ContainerNode.cpp:
        (WebCore::willRemoveChild):
        (WebCore::willRemoveChildren):
        (WebCore::updateTreeAfterInsertion):
        * dom/Document.cpp:
        (WebCore::Document::Document):
        * dom/Document.h:
        (WebCore):
        (Document):
        * dom/Document.idl:
        * dom/Element.cpp:
        (WebCore::Element::willModifyAttribute):
        * editing/CompositeEditCommand.h:
        * editing/DOMTransaction.idl: Removed.
        * editing/DOMTransactionStep.cpp: Removed.
        * editing/DOMTransactionStep.h: Removed.
        * editing/Editor.cpp:
        (WebCore::Editor::appliedEditing):
        (WebCore::Editor::unappliedEditing):
        (WebCore::Editor::reappliedEditing):
        (WebCore::Editor::canUndo):
        (WebCore::Editor::undo):
        (WebCore::Editor::canRedo):
        (WebCore::Editor::redo):
        * editing/UndoManager.cpp: Removed.
        * editing/UndoManager.h: Removed.
        * editing/UndoManager.idl: Removed.
        * editing/UndoStep.h:
        (UndoStep):

2012-11-02  Mike West  <mkwst@chromium.org>

        Measure the usage of the various CSP headers.
        https://bugs.webkit.org/show_bug.cgi?id=100974

        Reviewed by Adam Barth.

        Currently, we're collecting metrics regarding usage of the
        'X-WebKit-CSP' and 'X-WebKit-CSP-Report-Only' HTTP headers. We've
        recently added support for the canonical 'Content-Security-Policy'
        and 'Content-Security-Policy-Report-Only' headers. This patch adds
        those headers explicitly into the metrics, giving insight into uptake
        of the unprefixed header, and into usage of pure reporting vs.
        enforcement.

        No visible functionality should change; all Content Security Policy
        tests should continue to pass.

        * page/ContentSecurityPolicy.cpp:
        (WebCore::ContentSecurityPolicy::didReceiveHeader):
            Convert the CSP header type into a FeatureObserver::Feature, and
            observe it.
        * page/FeatureObserver.h:
            Add three new values to the enum to cover the new header types.

2012-11-02  Ojan Vafai  <ojan@chromium.org>

        Fix silly mistake from http://trac.webkit.org/changeset/133315.
        Forgot to remove the "!".

        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::canShareStyleWithElement):

2012-11-02  Tom Sepez  <tsepez@chromium.org>

        Support X-XSS-Protection: report=URL header syntax in XSSAuditor.
        https://bugs.webkit.org/show_bug.cgi?id=100892

        Reviewed by Adam Barth.

        This patch adds a security feature which allows a violation report to be sent back
        to a site when the XSSAuditor detects a reflected XSS against it.  It uses the same
        reporting mechanism as for CSP violation reports.

        Tests: http/tests/security/xssAuditor/malformed-xss-protection-header-5.html
               http/tests/security/xssAuditor/malformed-xss-protection-header-6.html
               http/tests/security/xssAuditor/malformed-xss-protection-header-7.html
               http/tests/security/xssAuditor/malformed-xss-protection-header-8.html
               http/tests/security/xssAuditor/malformed-xss-protection-header-9.html
               http/tests/security/xssAuditor/report-script-tag.html
               http/tests/security/xssAuditor/xss-protection-parsing-03.html
               http/tests/security/xssAuditor/xss-protection-parsing-04.html

        * html/parser/XSSAuditor.cpp:
        (WebCore::XSSAuditor::XSSAuditor):
        (WebCore::XSSAuditor::init):
        (WebCore::XSSAuditor::filterToken):
        Invoke Ping loader's violation reporting, if requested, when a reflected
        XSS is detected.
        
        * html/parser/XSSAuditor.h:
        XSSAuditor class need to store the report URL as well as the undigested versions
        of the request URL and request body for reporting.

        * loader/MixedContentChecker.cpp:
        (WebCore):
        * loader/MixedContentChecker.h:
        (MixedContentChecker):
        Make isMixedContent() method public.

        * loader/PingLoader.cpp:
        (WebCore::PingLoader::sendViolationReport):
        * loader/PingLoader.h:
        (PingLoader):
        * page/ContentSecurityPolicy.cpp:
        (WebCore::ContentSecurityPolicy::reportViolation):
        Renamed reportContentSecurityPolicyViolation() method to sendViolationReport(),
        since this is now used to send more than just CSP violations.
        
        * platform/network/HTTPParsers.cpp:
        (WebCore):
        (WebCore::skipEquals):
        (WebCore::skipValue):
        (WebCore::parseXSSProtectionHeader):
        * platform/network/HTTPParsers.h:
        Parse and return report= directive in X-XSS-Protection header.
        
2012-11-02  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r133313.
        http://trac.webkit.org/changeset/133313
        https://bugs.webkit.org/show_bug.cgi?id=101078

        "A lot of tests hit the ASSERTs introduced by this patch"
        (Requested by haraken on #webkit).

        * bindings/v8/V8DOMWrapper.h:
        (WebCore::V8DOMWrapper::setDOMWrapper):

2012-11-02  Ojan Vafai  <ojan@chromium.org>

        Unreviewed, rolling out r132913.
        http://trac.webkit.org/changeset/132913
        https://bugs.webkit.org/show_bug.cgi?id=91850

        Caused performance regressions.
        See https://bugs.webkit.org/show_bug.cgi?id=100872 for details.

        * bindings/v8/V8PerIsolateData.cpp:
        (WebCore::V8PerIsolateData::visitExternalStrings):
        * bindings/v8/V8StringResource.cpp:
        (StringTraits):
        (WebCore::v8StringToWebCoreString):
        * bindings/v8/V8ValueCache.cpp:
        (WebCore::makeExternalString):
        (WebCore::WebCoreStringResource::visitStrings):
        * bindings/v8/V8ValueCache.h:
        (WebCore::WebCoreStringResource::WebCoreStringResource):
        (WebCore::WebCoreStringResource::~WebCoreStringResource):
        (WebCore::WebCoreStringResource::data):
        (WebCoreStringResource):
        (WebCore::WebCoreStringResource::length):
        (WebCore::WebCoreStringResource::atomicString):
        (WebCore::WebCoreStringResource::toStringResource):

2012-11-02  Martin Robinson  <mrobinson@igalia.com>

        [GTK] Remove dependency on SoupPasswordManager
        https://bugs.webkit.org/show_bug.cgi?id=100775

        Reviewed by Carlos Garcia Campos.

        Remember passwords using libsecret instead of SoupPasswordManager. We accomplish this using
        a new class, CredentialBackingStore. CredentialBackingStore will soon be the thing that backs
        CredentialStoreGtk. The name is based on the name of a similar class from the BlackBerry port.

        No new tests. This does not change behavior.

        * GNUmakefile.am: Add libsecret flags to the build and the new directory to the include list.
        * GNUmakefile.list.am: Add new files to the source list.
        * platform/gtk/GRefPtrGtk.cpp: Add support for SecretValue to GRefPtrGtk.
        * platform/gtk/GtkAuthenticationDialog.cpp: Replace interaction with SoupPasswordManger with
        interaction with the CredentialBackingStore. Remove all conditional SoupPasswordManager guards.
        * platform/gtk/GtkAuthenticationDialog.h: Ditto.
        * platform/network/gtk/CredentialBackingStore.cpp: Added.
        * platform/network/gtk/CredentialBackingStore.h: Added.

2012-11-02  Jinwoo Song  <jinwoo7.song@samsung.com>

        Fix build warning [-Wswitch]
        https://bugs.webkit.org/show_bug.cgi?id=101029

        Reviewed by Alexey Proskuryakov.

        Fix build warning message: enumeration value ‘Viewport’ not handled in switch [-Wswitch]
        in Source/WebCore/css/StyleSheetContents.cpp.
        Add case statement for 'Viewport' with the CSS_DEVICE_ADAPTATION macro.

        * css/StyleSheetContents.cpp:
        (WebCore::childRulesHaveFailedOrCanceledSubresources):

2012-11-02  Ojan Vafai  <ojan@chromium.org>

        Move m_element checks out of canShareStyle into locateSharedStyle
        https://bugs.webkit.org/show_bug.cgi?id=101070

        Reviewed by Darin Adler.

        Can shareStyleWithElement is called for each sibling as we look for a
        shareElement. locateSharedStyle is called once for the element we're
        trying to find a style for. Checks that only depend on the latter
        element should, thus be in locateSharedStyle.

        No new tests. There should be no change in behavior, except possibly
        a performance improvement in some cases.

        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::canShareStyleWithElement):
        (WebCore::StyleResolver::locateSharedStyle):

2012-11-02  Kentaro Hara  <haraken@chromium.org>

        [V8] Add ASSERT() to guarantee that we don't store NULL pointers to V8 internal fields
        https://bugs.webkit.org/show_bug.cgi?id=101054

        Reviewed by Adam Barth.

        I'm investigating a Chromium crash bug:
        http://code.google.com/p/chromium/issues/detail?id=155942

        I've not yet identified the root cause (because I can't reproduce
        the crash), but it looks like we are storing NULL pointers to
        V8 internal fields. Just in case, we can add an ASSERT() to
        guarantee that NULL pointers are never stored. (Also I'm hoping
        that this ASSERT() will give me more debug information.)

        No tests. No change in behavior.

        * bindings/v8/V8DOMWrapper.h:
        (WebCore::V8DOMWrapper::setDOMWrapper):

2012-11-02  Kevin Ellis  <kevers@chromium.org>

        Imrpove scoring in touch adjustment to address bias towards smaller targets.
        https://bugs.webkit.org/show_bug.cgi?id=101046

        Reviewed by Antonio Gomes.

        Update the touch overlap score for touch adjustmetn to normalize
        with respect to the maximum possible overlap rather than the size
        of the target element.  This change enables good overlap scores for
        small and large targets alike.  Prior to the patch it was not possible
        to get a good overlap score for a sufficiently larget target.

        Covered by existing tests, which have been updated to reflect the
        intended behavior.

        * page/TouchAdjustment.cpp:
        (WebCore::TouchAdjustment::hybridDistanceFunction):

2012-11-02  Mike West  <mkwst@chromium.org>

        Web Inspector: Repeated errors are rendered incorrectly: link is not floating to the right.
        https://bugs.webkit.org/show_bug.cgi?id=101032

        Reviewed by Yury Semikhatsky.

        https://bugs.webkit.org/show_bug.cgi?id=100525 incorrectly added
        '-webkit-flex: 1' only to the list generated for errors in the console.
        It should have been added to normal warning text as well. This patch
        fixes the problem.

        * inspector/front-end/inspector.css:
        (.repeated-message .outline-disclosure, .repeated-message > .console-message-text):

2012-11-02  Eugene Klyuchnikov  <eustas.bug@gmail.com>

        Web Inspector: Timeline: show popup for CPU bars.
        https://bugs.webkit.org/show_bug.cgi?id=100951

        Reviewed by Pavel Feldman.

        Each CPU bar can represent a combination of several shorter messages.
        We should show information about combined messages - start time,
        total duration, CPU time, message count.

        * English.lproj/localizedStrings.js: Added "Message Count" string.
        * inspector/front-end/TimelinePanel.js:
        (WebInspector.TimelinePanel.prototype._refreshMainThreadBars):
        Supply elements with underlying info.
        * inspector/front-end/TimelinePresentationModel.js:
        (WebInspector.TimelinePresentationModel.prototype.generateMainThreadBarPopupContent):
        Added.

2012-11-02  Alexei Filippov  <alph@chromium.org>

        Web Inspector: Network panel grid UI is misaligned after r132888
        https://bugs.webkit.org/show_bug.cgi?id=101050

        Rollback the change to basic data grid css and move it to the native memory
        snapshot datagrid css.

        Reviewed by Alexander Pavlov.

        * inspector/front-end/dataGrid.css:
        (.data-grid td):
        * inspector/front-end/nativeMemoryProfiler.css:
        (.native-snapshot-view .data-grid td):

2012-11-02  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r133303.
        http://trac.webkit.org/changeset/133303
        https://bugs.webkit.org/show_bug.cgi?id=101068

        "Broke qt wk2 build (seems like bots fails to rerun qmake if
        needed)" (Requested by kbalazs on #webkit).

        * Target.pri:
        * WebCore.pri:
        * platform/PlatformStrategies.cpp:
        (WebCore):
        * platform/qt/QtTestSupport.h: Removed.

2012-11-02  Balazs Kelemen  <kbalazs@webkit.org>

        [Qt][WK2] setPlatformStrategies always asserts after r132744
        https://bugs.webkit.org/show_bug.cgi?id=100838

        Reviewed by Simon Hausmann.

        The problem here is that we use QWebSettings::clearMemoryCaches, a WebKit1 API
        from the injected bundle, which calls initializeWebCoreQt and it sets the platform
        strategies to the one for WebKit1. We should stop using WebKit1 API's from WebKit2
        code. In order to keep the behavior, this patch adds exported helpers to WebCore
        that can be used from DumpRenderTree and WebKitTestRunner. This is the same idea
        as WebCoreTestSupport but these helpers are specific to Qt. Technically we could
        add it to the WebKit1 API for the time being, but my goal was to move in the direction
        of removing the WebKit1 dependency from WebKitTestRunner. We only build the file
        in non production mode.

        Basically covered by all tests.

        * Target.pri:
        * WebCore.pri: We need to link against fontconfig (only in non-production mode) since
        initializeTestFonts uses it.
        * platform/PlatformStrategies.cpp:
        (WebCore): Zero initialize the global static variable as it is expected by the functions
        below. It is a side fix. It seems like it has not been shown on debug WebKit2 bots because
        common runtime environments tend to zero initialize statics by default - but I don't think
        we should rely on that.
        * platform/qt/QtTestSupport.cpp: Added. I choose GPL license because code from qwebsettings.cpp
        is also under that.
        (WebKit):
        (WebKit::QtTestSupport::clearMemoryCaches): This is basically a copy of QWebSettings::clearMemoryCaches
        without calling initializeWebCoreQt.
        (WebKit::QtTestSupport::initializeTestFonts): I moved this code here as well now that we have to expose
        symbols from WebCore anyway. The advantage is that now we don't have to build it twice and we don't need
        additional files to forward it from the directory of DumpRenderTree for WebKitTestRunner.
        I added a call to FontCace::invalidate in the case when the font set has been changed so that it will do
        the job even if we would stop clearing all caches between tests. Also moved the call to
        QFontDatabase::removeAllApplicationFonts from callers to here.
        * platform/qt/QtTestSupport.h:
        (WebKit):
        (QtTestSupport):

2012-11-02  Kent Tamura  <tkent@chromium.org>

        Optimize DateTimeFormat::quoteAndAppendLiteral output
        https://bugs.webkit.org/show_bug.cgi?id=101040

        Reviewed by Kentaro Hara.

        In LDML date format pattern, only ASCII alphabet and quote have special
        roles. So we don't need to quote the input string if it doesn't contain
        them.

        No new tests. Updated WebKit/chromium/tests/LocaleWinTest.cpp

        * platform/text/DateTimeFormat.cpp:
        (WebCore::isASCIIAlphabetOrQuote): A helper to check special characters.
        (WebCore::DateTimeFormat::quoteAndAppendLiteral):
        Append the input string as is if it has no special character.

2012-11-02  Ilya Tikhonovsky  <loislo@chromium.org>

        Web Inspector: NMI instrument NodeRareData::Map. It uses ~250k on nytimes.com
        https://bugs.webkit.org/show_bug.cgi?id=101052

        Reviewed by Yury Semikhatsky.

        I noticed that in many cases cache structures are plain static HashMap, HashSet etc.
        MemoryAgent can visit it but instrumentation for these containers report no objectType.
        It means that addRootObject method needs to accept objectType property as an argument.
        Otherwise I would have had to create a proxy class with proper objectType.

        * dom/WebCoreMemoryInstrumentation.cpp:
        (WebCore::WebCoreMemoryInstrumentation::reportMemoryUsage):
        (WebCore):
        * dom/WebCoreMemoryInstrumentation.h:
        (WebCoreMemoryInstrumentation):
        (WebCore):
        * inspector/InspectorMemoryAgent.cpp:
        (WebCore::InspectorMemoryAgent::getProcessMemoryDistribution):

2012-11-02  Michael Brüning  <michael.bruning@digia.com>

        [Qt][WK2] ASSERT hit for every mouse click
        https://bugs.webkit.org/show_bug.cgi?id=100607

        Reviewed by Jocelyn Turcotte.

        Changed the logic of absolutePathForRenderer to use the first highlight box as the mid box 
        by uniting the two in case the mid box is empty. This allows the first box to be merged with
        the last box should they intersect, and thereby prevents an ASSERT in addHighlightRect that is
        triggered by two intersecting boxes being passed to addHighlightRect as separate ones.

        Also, this patch removes some superfluous checks for LayoutRect::isEmpty, which is being checked
        in LayoutRect::intersects already.

        No new tests, but added manual test: ManualTests/tap-gesture-on-em-link-tap-highlight-assert.html

        * page/GestureTapHighlighter.cpp:

2012-11-02  Arpita Bahuguna  <arpitabahuguna@gmail.com>

        Regression r130057: Improper preferred width calculation when an inline replaced object, wrapped in an inline flow, follows some text.
        https://bugs.webkit.org/show_bug.cgi?id=99442

        Reviewed by Levi Weintraub.

        Extra width is displayed after an inline replaced object that follows some
        text (not ending in a whitespace) within an inline-block. This is due to
        the end width (endMin) of the text object being carried forward (via inlineMin)
        and added onto the next line containing the inline replaced object.

        This was caused as a regression to, or rather became apparent post the fix
        http://trac.webkit.org/changeset/130057 which fixed the block's preferred
        width when a renderInline with width contained an inline replaced object.

        Test: fast/block/block-with-inline-replaced-child-following-text.html

        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::computeInlinePreferredLogicalWidths):
        Introduced another flag (shouldBreakLineAfterText) which is set when
        our current Text line (object) does not end in a whitespace, thereby
        implying that there could be more text following, for which the end width
        needs to be carried forward onto the next line.

        In case the following object instead turns out to be an Inline Replaced
        object, we should terminate our previous line and reset this extra width.
        This is now being handled by checking for the shouldBreakLineAfterText
        flag while processing Inline Replaced objects.

        Once set, shouldBreakLineAfterText shall be reset only if we get another
        Text object that ends in a whitespace, signifying the termination of
        that text line. For all other cases, we persist with this flag through
        the block's inline contents.

2012-11-02  Eugene Klyuchnikov  <eustas.bug@gmail.com>

        Web Inspector: Console: remove obsolete ctrl-shift-m shortcut
        https://bugs.webkit.org/show_bug.cgi?id=101036

        Reviewed by Pavel Feldman.

        Ctrl-shift-m on console dumps MemoryAgent.getDOMNodeCount
        This functionality seems to be obsolete.

        * inspector/front-end/ConsoleView.js: Removed shortcut and function.

2012-11-02  Stephen Chenney  <schenney@chromium.org>

        SVG classes cause layering violations in platform Font code
        https://bugs.webkit.org/show_bug.cgi?id=98513

        Reviewed by Eric Seidel.

        Add a contained class to save and restore GlpyhPage state in FontFallbackList.
        This allows us to remove the layering violation, and several methods, that
        previously existed to support SVGTextRunRenderingContext.

        No new tests because no change at all in functionality.

        * platform/graphics/FontFallbackList.h:
        (FontFallbackList):
        (GlyphPagesStateSaver): New state save and restore class
        (WebCore::FontFallbackList::GlyphPagesStateSaver::GlyphPagesStateSaver): Save GlyphPage state
        (WebCore::FontFallbackList::GlyphPagesStateSaver::~GlyphPagesStateSaver): Restore GlyphPage state
        * rendering/svg/SVGTextRunRenderingContext.cpp:
        (WebCore::SVGTextRunRenderingContext::glyphDataForCharacter): Shift to usage of the new class.

2012-11-02  Vsevolod Vlasov  <vsevik@chromium.org>

        Web Inspector: Fix compilation errors
        https://bugs.webkit.org/show_bug.cgi?id=101027

        Reviewed by Yury Semikhatsky.

        * inspector/InjectedScriptSource.js:
        (.):
        * inspector/front-end/NativeMemorySnapshotView.js:
        (WebInspector.NativeSnapshotNode.prototype._createSizeCell):

2012-11-02  Andreas Kling  <kling@webkit.org>

        Only resolve attribute-derived style once per shared ElementAttributeData.
        <http://webkit.org/b/100990>

        Reviewed by Antti Koivisto.

        Track the serialization of the "style" attribute, and the dirtiness of the presentation attribute style
        on ElementAttributeData instead of in Node flags.

        This allows us to avoid duplicate work for ElementAttributeData that are shared between multiple elements,
        since the state is no longer per-Element.

        I've left the presentation attribute cache in there for now, since it covers two additional cases:

            - Elements with the same attributes in different order.
            - Elements with the same presentation attributes, but with differing non-presentation attributes.

        It's likely that we're not gaining much from it anymore, but that's a topic for another patch.

        * dom/Node.h:
        * dom/ElementAttributeData.h:
        (WebCore::ElementAttributeData::presentationAttributeStyle):
        (WebCore::ElementAttributeData::setPresentationAttributeStyle):
        (WebCore::ElementAttributeData::styleAttributeIsDirty):
        (WebCore::ElementAttributeData::setStyleAttributeIsDirty):
        (WebCore::ElementAttributeData::presentationAttributeStyleIsDirty):
        (WebCore::ElementAttributeData::setPresentationAttributeStyleIsDirty):
        (ElementAttributeData):
        (WebCore::ElementAttributeData::ElementAttributeData):
        * dom/Element.cpp:
        (WebCore::Element::getAttribute):
        * dom/Element.h:
        (WebCore::Element::styleAttributeIsDirty):
        (WebCore::Element::updateInvalidAttributes):
        * dom/StyledElement.cpp:
        (WebCore::StyledElement::updateStyleAttribute):
        (WebCore::StyledElement::attributeChanged):
        (WebCore::StyledElement::styleAttributeChanged):
        (WebCore::StyledElement::inlineStyleChanged):
        * dom/StyledElement.h:
        (WebCore::StyledElement::invalidateStyleAttribute):

            Move the "attribute style dirty" and "style attribute valid" node flags to ElementAttributeData
            and change them to both use dirty semantics.

        * dom/ElementAttributeData.cpp:
        (WebCore::ElementAttributeData::cloneDataFrom):

            Share the presentation attribute style between cloned elements initially.

        * dom/StyledElement.h:
        (WebCore::StyledElement::presentationAttributeStyle):
        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::sweepMatchedPropertiesCache):
        (WebCore::StyleResolver::matchAllRules):
        (WebCore::StyleResolver::canShareStyleWithElement):
        * dom/ElementAttributeData.cpp:
        (WebCore::MutableElementAttributeData::MutableElementAttributeData):
        (WebCore::ElementAttributeData::reportMemoryUsage):
        * inspector/InspectorCSSAgent.cpp:
        (WebCore::InspectorCSSAgent::buildObjectForAttributesStyle):

            Renamed StyledElement::attributeStyle() to presentationAttributeStyle(). The old name was too
            easily confused with "style attribute".

        * dom/StyledElement.cpp:
        (WebCore::StyledElement::rebuildPresentationAttributeStyle):

            Renamed from updateAttributeStyle().

2012-11-01  Kent Tamura  <tkent@chromium.org>

        Introduce ENABLE_DATE_AND_TIME_INPUT_TYPES, and clarify usage of other related flags
        https://bugs.webkit.org/show_bug.cgi?id=101007

        Reviewed by Kentaro Hara.

        ChromeClient::openDateTimeChooser and Locale::formatDateTime are
        necessary if one of date/time input types is enabled and even if
        ENABLE_INPUT_MULTIPLE_FIELDS_UI is disabled. So they should be wrapped
        with ENABLE(DATE_AND_TIME_INPUT_TYPES).

        The following clases are used only for ChromeClient::openDateTimeChooser.
        They should be wrapped with the same flag.
          - class DateTimeChooser
          - class DateTiemChooserClient

        The following classes/functions are used for
        Locale::formatDateTime. They should be wrapped with the same flag.
          - Locale::dateFormat
          - Locale::monthFormat
          - Locale::timeFormat
          - Locale::shortTimeFormat
          - Locale::monthLabels
          - Locale::shortMonthLabels
          - Locale::standAloneMonthLabels
          - Locale::shortStandAloneMonthLabels
          - class DateTimeFormat

        Also, we change the meaning of ENABLE_CALENDAR_PICKER. It meant
         1) <input> supports calendar picker UI, and
         2) WebCore/Resources/pagepopups/ is used for the calendar UI implementation.
        Now ENABLE_CALENDAR_PICKER means only 2.

        No new tests because of no behavior changes.

        * html/BaseDateAndTimeInputType.h: This is necessary only if date/time
        input types are enabled because this is a common super class of
        date/time InputType classes.
        * html/BaseDateAndTimeInputType.cpp: Ditto.
        * html/BaseChooserOnlyDateAndTimeInputType.cpp: Ditto.
        * html/BaseChooserOnlyDateAndTimeInputType.h: Ditto.

        * page/ChromeClient.h: Change the flag for openDateTimeChooser, and add a comment.
        * loader/EmptyClients.cpp: Follow the openDateTimeChooser flag change.
        * loader/EmptyClients.h: Ditto.
        * platform/DateTimeChooser.h:
        This is needed only if ChromeClient::openDateTimeChooser is available.
        * platform/DateTimeChooserClient.h: Ditto.

        * platform/LocalizedStrings.h:
        weekFormatInLDML is necessary if ENABLE(INPUT_TYPE_WEEK) regardless of
        ENABLE(INPUT_MULTIPLE_FIELDS_UI).

        * platform/text/PlatformLocale.h:
        Change the condition for Locale::formatDateTime and the code used by
        Locale::formatDateTime.
        * platform/text/PlatformLocale.cpp:
        (WebCore::Locale::formatDateTime):
        This is necessary even if !ENABLE(INPUT_MULTIPLE_FIELDS_UI), to produce
        localized representations of date/time values.
        * platform/text/LocaleICU.cpp:
        Change the condition for the code used by Locale::formatDateTime.
        * platform/text/LocaleICU.h: Ditto.
        * platform/text/LocaleNone.cpp: Ditto.
        * platform/text/mac/LocaleMac.h: Ditto.
        * platform/text/mac/LocaleMac.mm: Ditto.
        * platform/text/win/LocaleWin.cpp: Ditto.
        * platform/text/win/LocaleWin.h: Ditto.
        * platform/text/DateTimeFormat.cpp: Ditto.
        * platform/text/DateTimeFormat.h: Ditto.

        * html/BaseMultipleFieldsDateAndTimeInputType.h:
        Remove some #if-#endif for a picker indicator element because
        ENABLE_CALENDAR_PICKER meaning is changed.
        * html/BaseMultipleFieldsDateAndTimeInputType.cpp: Ditto.

        * html/shadow/PickerIndicatorElement.cpp: CALENDAR_PICKER ->
        INPUT_MULTIPLE_FIELDS_UI because ENABLE_CALENDAR_PICKER meaning is changed.
        * html/shadow/PickerIndicatorElement.h: Ditto.
        * rendering/RenderDetailsMarker.cpp: Ditto.
        * rendering/RenderDetailsMarker.h: Ditto.
        * rendering/RenderTheme.h: Ditto.
        * rendering/RenderThemeChromiumCommon.cpp: Ditto.
        * rendering/RenderThemeChromiumCommon.h: Ditto.
        * rendering/RenderThemeChromiumMac.h: Ditto.
        * rendering/RenderThemeChromiumSkia.h: Ditto.

2012-11-02  Zeno Albisser  <zeno@webkit.org>

        [Qt] Revert QCocoaNativeInterface workaround from r131720.
        https://bugs.webkit.org/show_bug.cgi?id=100842

        Reviewed by Simon Hausmann.

        After updating Qt5 on the buildbots, the workaround
        introduced in r131720 is not needed anymore.

        * platform/graphics/surfaces/mac/GraphicsSurfaceMac.cpp:
        (WebCore::GraphicsSurfacePrivate::GraphicsSurfacePrivate):

2012-11-02  Kent Tamura  <tkent@chromium.org>

        Add a common base class for date/time input types without inline editing behavior
        https://bugs.webkit.org/show_bug.cgi?id=101031

        Reviewed by Hajime Morita.

        Add BaseChooserOnlyDateAndTimeInputType class, which will support
        DateTimeChooserClient, and date/time input types inherit it if
        !ENABLE(INPUT_MULTIPLE_FIELDS_UI).

        No new tests. This doesn't change any behavior.

        * CMakeLists.txt: Add BaseChooserOnlyDateAndTimeInputType.{cpp,h}.
        * GNUmakefile.list.am: Ditto.
        * Target.pri: Ditto.
        * WebCore.gypi: Ditto.
        * WebCore.xcodeproj/project.pbxproj: Ditto.
        * html/BaseChooserOnlyDateAndTimeInputType.cpp: Added.
        * html/BaseChooserOnlyDateAndTimeInputType.h: Added.

        * html/DateInputType.h: Inherit BaseChooserOnlyDateAndTimeInputType if
        !ENABLE(INPUT_MULTIPLE_FIELDS_UI).
        * html/DateTimeInputType.h: Ditto.
        * html/DateTimeLocalInputType.h: Ditto.
        * html/MonthInputType.h: Ditto.
        * html/TimeInputType.h: Ditto.
        * html/WeekInputType.h: Ditto.

2012-11-02  Peter Wang  <peter.wang@torchmobile.com.cn>

        Web Inspector: [JSC] implement WorkerScriptDebugServer
        https://bugs.webkit.org/show_bug.cgi?id=99801

        Reviewed by Yury Semikhatsky.

        To implement Worker Inspector for JSC.
        The virtual function "runEventLoopWhilePaused" is defined, since there are different ways to block
        the JS running in worker-context and normal page-context.
        The function "isContentScript" now is virtual because the original invoked functions are useless
        and cause problem in worker-context.
        In function "WebCore::WorkerScriptController::attachDebugger", we invoke "initScriptIfNeeded" to
        ensure the JSGloblalObject exist in the case of attaching Debugger before executing the worker
        JS code (Pause on start).

        No new test case.

        * bindings/js/PageScriptDebugServer.cpp:
        (WebCore::PageScriptDebugServer::runEventLoopWhilePaused):
        (WebCore):
        * bindings/js/PageScriptDebugServer.h:
        (PageScriptDebugServer):
        * bindings/js/ScriptDebugServer.cpp:
        (WebCore::ScriptDebugServer::isContentScript):
        (WebCore::ScriptDebugServer::pauseIfNeeded):
        * bindings/js/ScriptDebugServer.h:
        (JSC):
        (ScriptDebugServer):
        * bindings/js/WorkerScriptController.cpp:
        (WebCore::WorkerScriptController::attachDebugger):
        (WebCore):
        (WebCore::WorkerScriptController::detachDebugger):
        * bindings/js/WorkerScriptController.h:
        (WorkerScriptController):
        * bindings/js/WorkerScriptDebugServer.cpp:
        (WebCore::WorkerScriptDebugServer::WorkerScriptDebugServer):
        (WebCore):
        (WebCore::WorkerScriptDebugServer::addListener):
        (WebCore::WorkerScriptDebugServer::recompileAllJSFunctions):
        (WebCore::WorkerScriptDebugServer::removeListener):
        (WebCore::WorkerScriptDebugServer::runEventLoopWhilePaused):
        * bindings/js/WorkerScriptDebugServer.h:
        (WorkerScriptDebugServer):
        (WebCore::WorkerScriptDebugServer::getListenersForGlobalObject):
        (WebCore::WorkerScriptDebugServer::isContentScript):

2012-11-02  KyungTae Kim  <ktf.kim@samsung.com>

        Compilation warning in Node.cpp when USERSELECT_ALL is disabled
        https://bugs.webkit.org/show_bug.cgi?id=101025

        Reviewed by Ryosuke Niwa.

        The parameter 'treatment' is not used when USERSELECT_ALL is disabled. 

        * dom/Node.cpp:
        (WebCore::Node::rendererIsEditable):

2012-11-01  Vsevolod Vlasov  <vsevik@chromium.org>

        Web Inspector: Middle click closes an editor and pastes selection into current editor on Linux
        https://bugs.webkit.org/show_bug.cgi?id=100743

        Reviewed by Alexander Pavlov.

        Editor now consumes all middle mouse button mouse ups except for the ones in the main panel.
        TabbedPane now consumes all middle mouse button mouse ups as well.
        Navigator view does not pass focus anymore if element was selected with middle mouse button.

        * inspector/front-end/DefaultTextEditor.js:
        (.preventDefaultOnMouseUp):
        (.consumeMouseUp):
        * inspector/front-end/NavigatorView.js:
        (WebInspector.NavigatorSourceTreeElement.prototype.ondblclick):
        * inspector/front-end/TabbedPane.js:
        (WebInspector.TabbedPane):
        (WebInspector.TabbedPane.prototype.onMouseUp):
        (WebInspector.TabbedPane.prototype.onMouseClick):

2012-11-01  Ilya Tikhonovsky  <loislo@chromium.org>

        Web Inspector: NMI instrument ShadowRoot. It gives us ~400k on plus.google.com
        https://bugs.webkit.org/show_bug.cgi?id=100866

        Reviewed by Yury Semikhatsky.

        Plain vanilla memory instrumentation code for HTMLInputElement which has a ElementShadow.

        * CMakeLists.txt:
        * GNUmakefile.list.am:
        * Target.pri:
        * WebCore.gypi:
        * WebCore.vcproj/WebCore.vcproj:
        * dom/DocumentOrderedMap.cpp:
        (WebCore::DocumentOrderedMap::reportMemoryUsage):
        (WebCore):
        * dom/DocumentOrderedMap.h:
        (DocumentOrderedMap):
        * dom/Element.cpp:
        (WebCore::Element::reportMemoryUsage):
        (WebCore):
        * dom/Element.h:
        * dom/ElementRareData.cpp: Added.
        (WebCore):
        (WebCore::ElementRareData::reportMemoryUsage):
        * dom/ElementRareData.h:
        (ElementRareData):
        * dom/ElementShadow.cpp:
        (WebCore::ElementShadow::reportMemoryUsage):
        (WebCore):
        * dom/ElementShadow.h:
        (ElementShadow):
        * dom/Node.cpp:
        (WebCore::Node::reportMemoryUsage):
        * dom/NodeRareData.cpp: Added.
        (WebCore):
        (WebCore::NodeListsNodeData::reportMemoryUsage):
        (WebCore::NodeRareData::reportMemoryUsage):
        * dom/NodeRareData.h:
        (NodeListsNodeData):
        (NodeRareData):
        * dom/ShadowRoot.cpp:
        (WebCore):
        (WebCore::ShadowRoot::reportMemoryUsage):
        * dom/ShadowRoot.h:
        (ShadowRoot):
        * dom/TreeScope.cpp:
        (WebCore::TreeScope::reportMemoryUsage):
        (WebCore):
        * dom/TreeScope.h:
        (TreeScope):
        * html/HTMLFormControlElement.cpp:
        (WebCore::HTMLFormControlElement::reportMemoryUsage):
        (WebCore):
        * html/HTMLFormControlElement.h:
        (HTMLFormControlElement):
        * html/HTMLInputElement.cpp:
        (WebCore::HTMLInputElement::reportMemoryUsage):
        (WebCore):
        * html/HTMLInputElement.h:
        (HTMLInputElement):
        * html/HTMLTextFormControlElement.cpp:
        (WebCore::HTMLTextFormControlElement::reportMemoryUsage):
        (WebCore):
        * html/HTMLTextFormControlElement.h:
        (HTMLTextFormControlElement):

2012-11-02  Vsevolod Vlasov  <vsevik@chromium.org>

        Web Inspector: Cookie info in Network Resources Cookies tab shows "Invalid Date"
        https://bugs.webkit.org/show_bug.cgi?id=97471

        Reviewed by Pavel Feldman.

        This patch is partly based on patch by Otto Derek Cheung <otcheung@rim.com>.
        Refactored CookieParser so that all cookies in front-end were WebInspector.Cookie object.
        Cookie table can now show Max-Age as well as Expires attribute of a cookie.
        Fixed expiresDate calculation.
        Removed getters from CookieParser for better compilation.

        * English.lproj/localizedStrings.js:
        * inspector/front-end/AuditRules.js:
        (WebInspector.AuditRules.CookieRuleBase.prototype.mapResourceCookies):
        (WebInspector.AuditRules.CookieSizeRule.prototype._average):
        (WebInspector.AuditRules.CookieSizeRule.prototype._max):
        (WebInspector.AuditRules.StaticCookielessRule.prototype._collectorCallback):
        * inspector/front-end/CookieItemsView.js:
        (WebInspector.CookieItemsView.prototype._filterCookiesForDomain):
        * inspector/front-end/CookieParser.js:
        (WebInspector.CookieParser.prototype.cookies):
        (WebInspector.CookieParser.prototype._flushCookie):
        (WebInspector.CookieParser.prototype._addCookie):
        (WebInspector.Cookie.prototype.httpOnly):
        (WebInspector.Cookie.prototype.secure):
        (WebInspector.Cookie.prototype.session):
        (WebInspector.Cookie.prototype.path):
        (WebInspector.Cookie.prototype.domain):
        (WebInspector.Cookie.prototype.expires):
        (WebInspector.Cookie.prototype.maxAge):
        (WebInspector.Cookie.prototype.size):
        (WebInspector.Cookie.prototype.setSize):
        (WebInspector.Cookie.prototype.expiresDate):
        (WebInspector.Cookie.prototype.attributes):
        (WebInspector.Cookies.getCookiesAsync):
        (WebInspector.Cookies.buildCookiesFromString):
        (WebInspector.Cookies.buildCookieProtocolObject):
        (WebInspector.Cookies.cookieMatchesResourceURL):
        (WebInspector.Cookies.cookieDomainMatchesResourceDomain):
        * inspector/front-end/CookiesTable.js:
        (WebInspector.CookiesTable):
        (WebInspector.CookiesTable.prototype._totalSize):
        (WebInspector.CookiesTable.prototype._sortCookies.expiresCompare):
        (WebInspector.CookiesTable.prototype._sortCookies):
        (WebInspector.CookiesTable.prototype._createGridNode):
        * inspector/front-end/HAREntry.js:
        (WebInspector.HAREntry.prototype._buildCookie):

2012-11-01  Yury Semikhatsky  <yurys@chromium.org>

        Memory instrumentation: do not call checkCountedObject with wrong pointers
        https://bugs.webkit.org/show_bug.cgi?id=100958

        Reviewed by Alexander Pavlov.

        Removed redundant call to checkCountedObject.

        * inspector/MemoryInstrumentationImpl.cpp:
        (WebCore::MemoryInstrumentationClientImpl::countObjectSize):

2012-11-02  Peter Wang  <peter.wang@torchmobile.com.cn>

        Web Inspector: a small defect in "WorkersSidebarPanel.js"
        https://bugs.webkit.org/show_bug.cgi?id=101022

        Reviewed by Yury Semikhatsky.

        In "autoattachToWorkersClicked", the "event.target.checked" doesn't alwyas valid, since the
        "event.target" might be a label.

        The problem just causes an error report, doesn't effect function, so no new test case.

        * inspector/front-end/WorkersSidebarPane.js:
        (WebInspector.WorkersSidebarPane.prototype._autoattachToWorkersClicked):

2012-11-01  Shinya Kawanaka  <shinyak@chromium.org>

        [Shadow] Element should have getter and setter of attribute 'pseudo'
        https://bugs.webkit.org/show_bug.cgi?id=100831

        Reviewed by Hajime Morita.

        We expose 'pseudo' attribute in Element. When nothing is assigned to 'pseudo', it should return null.

        Test: fast/dom/shadow/pseudo-attribute.html

        * dom/Element.cpp:
        (WebCore::Element::pseudo):
        (WebCore):
        (WebCore::Element::setPseudo):
        * dom/Element.h:
        (Element):
        * dom/Element.idl:
        * html/HTMLAttributeNames.in:

2012-11-01  Roger Fong  <roger_fong@apple.com>

        Build fix. http://trac.webkit.org/changeset/133252 broke the Windows build.
        https://bugs.webkit.org/show_bug.cgi?id=101008

        Reviewed by fischman@chromium.org.

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::clearMediaPlayer):
        * html/HTMLMediaElement.h:
        (HTMLMediaElement):

2012-11-01  Stephen White  <senorblanco@chromium.org>

        Unreviewed, rolling out r133244.
        http://trac.webkit.org/changeset/133244
        https://bugs.webkit.org/show_bug.cgi?id=100973

        Broke Chromium Mac (clang) builds.

        * bindings/v8/DOMDataStore.cpp:
        (WebCore::DOMDataStore::DOMDataStore):
        * bindings/v8/IntrusiveDOMWrapperMap.h:
        (WebCore::DOMNodeWrapperMap::weakCallback):

2012-11-01  Ami Fischman  <fischman@chromium.org>

        HTMLMediaPlayer should free m_player when src is set/changed
        https://bugs.webkit.org/show_bug.cgi?id=99647

        Reviewed by Eric Carlson.

        New ManualTest added; manual since leaking media players doesn't have layoutTestController-visible effects.

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::parseAttribute): clearMediaPlayer() when src is set/changed
        (WebCore::HTMLMediaElement::userCancelledLoad): use new clearMediaPlayer() helper
        (WebCore::HTMLMediaElement::clearMediaPlayer): clear m_player and associated timers/flags
        (WebCore):
        (WebCore::HTMLMediaElement::createMediaPlayer): whitespace-only change
        * html/HTMLMediaElement.h: new method: createMediaPlayer().
        (HTMLMediaElement):

2012-11-01  Tom Sepez  <tsepez@chromium.org>

        XSS blocker false positive when page contains <iframe src="">
        https://bugs.webkit.org/show_bug.cgi?id=93416

        Reviewed by Adam Barth.

        Treat src="" and src="about:blank" as safe resources even if they appear
        in the query parameters.

        Tests: http/tests/security/xssAuditor/iframe-injection-allowed-2.html
               http/tests/security/xssAuditor/iframe-injection-allowed-3.html
               http/tests/security/xssAuditor/iframe-injection-allowed.html

        * html/parser/XSSAuditor.cpp:
        (WebCore::XSSAuditor::isLikelySafeResource):

2012-11-01  Tien-Ren Chen  <trchen@chromium.org>

        Fix assertion failure in RenderGeometryMap::absoluteRect when frame scale != 1.0
        https://bugs.webkit.org/show_bug.cgi?id=100912

        Reviewed by Simon Fraser.

        Frame scale will add transformation to RenderView, so fixed position doesn't
        get propagated up to the viewport by RenderGeometryMap. This is handled
        correctly in RenderView::mapLocalToContainer, causing the assertion to fail.
        This patch corrects RenderGeometryMap::mapToAbsolute to handle the RenderView
        transformation case.

        A layout test is added to catch this issue. The test will crash debug build
        without this patch.

        Test: compositing/geometry/fixed-position-composited-page-scale-scroll.html

        * rendering/RenderGeometryMap.cpp:
        (WebCore::RenderGeometryMap::mapToAbsolute):

2012-11-01  Adam Barth  <abarth@webkit.org>

        [V8] Generalize NodeWrapperMap to be able to handle other sorts of keys
        https://bugs.webkit.org/show_bug.cgi?id=100973

        Reviewed by Kentaro Hara.

        This is the first step towards using intrusive DOM wrapper maps more
        widely in WebCore (see
        http://lists.webkit.org/pipermail/webkit-dev/2012-November/022686.html
        for more context).

        * bindings/v8/DOMDataStore.cpp:
        (WebCore::DOMDataStore::DOMDataStore):
        * bindings/v8/IntrusiveDOMWrapperMap.h:
        (WebCore):
        (WebCore::IntrusiveDOMWrapperMap::weakCallback):

2012-11-01  Alexandru Chiculita  <achicu@adobe.com>

        [CSS Shaders] CustomFilterOperation should be converted to ValidatedCustomFilterOperation before using it
        https://bugs.webkit.org/show_bug.cgi?id=100533

        Reviewed by Dean Jackson.

        Added the code that converts a CustomFilterOperation to a ValidatedCustomFilterOperation.
        Both the software path and the composited one will use this operation instead. There will be
        no need to check the shader in platform code anymore.

        No new tests, already covered by existing custom filter tests.

        * platform/graphics/filters/ValidatedCustomFilterOperation.cpp:
        (WebCore::ValidatedCustomFilterOperation::ValidatedCustomFilterOperation):
        * platform/graphics/filters/ValidatedCustomFilterOperation.h:
        (WebCore):
        (WebCore::ValidatedCustomFilterOperation::create):
        (ValidatedCustomFilterOperation):
        (WebCore::ValidatedCustomFilterOperation::validatedProgram):
        (WebCore::ValidatedCustomFilterOperation::parameters):
        (WebCore::ValidatedCustomFilterOperation::meshRows):
        (WebCore::ValidatedCustomFilterOperation::meshColumns):
        (WebCore::ValidatedCustomFilterOperation::meshType):
        (WebCore::ValidatedCustomFilterOperation::operator==):
        * rendering/FilterEffectRenderer.cpp:
        (WebCore::createCustomFilterEffect):
        (WebCore::FilterEffectRenderer::build):
        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::ensureBacking):
        (WebCore::RenderLayer::clearBacking):
        (WebCore::RenderLayer::styleChanged): updateOrRemoveFilterClients needs to be called before the composited
        layer is updated. Otherwise the composited layer will never see a loaded filter in the first call.
        (WebCore):
        (WebCore::RenderLayer::isCSSCustomFilterEnabled):
        (WebCore::RenderLayer::computeFilterOperations):
        (WebCore::RenderLayer::updateOrRemoveFilterClients): Split updateOrRemoveFilterEffect into 2 functions.
        This one is supposed to add the clients needed to load network resources.
        (WebCore::RenderLayer::updateOrRemoveFilterEffectRenderer): Figures out if a software fallback is needed 
        and creates a FilterEffectRenderer.
        * rendering/RenderLayer.h:
        (RenderLayer):

2012-11-01  Max Vujovic  <mvujovic@adobe.com>

        [CSS Shaders] Get rid of internal tex coord attribute
        https://bugs.webkit.org/show_bug.cgi?id=94358

        Reviewed by Dean Jackson.

        Remove the internal css_a_texCoord attribute that WebKit added to shaders in order to
        sample the element texture by texture coordinate.

        Now, the WebKit-added sampling code can leverage a_texCoord if the author defined it, or
        WebKit can add its own a_texCoord definition to the author's shader.

        Note that vertex attributes are read-only in GLSL. Also, note that we already reject the
        shader if the author did not define a_texCoord with the correct type. Essentially, if
        a_texCoord exists in the author's validated shader, we are guaranteed that it's the correct
        type and that its value is unmodified.

        Test: css3/filters/custom/custom-filter-a-tex-coord-optional.html

        * platform/graphics/filters/CustomFilterCompiledProgram.cpp:
        (WebCore::CustomFilterCompiledProgram::CustomFilterCompiledProgram):
            Remove the references to m_internalTexCoordAttribLocation.
        (WebCore::CustomFilterCompiledProgram::initializeParameterLocations): Ditto.
        * platform/graphics/filters/CustomFilterCompiledProgram.h: Ditto.
        * platform/graphics/filters/CustomFilterRenderer.cpp:
        (WebCore::CustomFilterRenderer::bindProgramAndBuffers): Ditto.
        (WebCore::CustomFilterRenderer::unbindVertexAttributes): Ditto.
        * platform/graphics/filters/CustomFilterValidatedProgram.cpp:
        (WebCore::CustomFilterValidatedProgram::CustomFilterValidatedProgram):
            Pass the set of symbols found in the author's shaders to the rewriteMixVertexShader
            method.
        (WebCore::CustomFilterValidatedProgram::rewriteMixVertexShader):
            If the author didn't define a_texCoord, add it to the end of the author's vertex 
            shader, but before the shader's new main function. As before, the new main function
            will pass the texture coordinate to the fragment shader via the css_v_texCoord varying.
        * platform/graphics/filters/CustomFilterValidatedProgram.h:
        (WebCore):
            Add a forward declaration for ANGLEShaderSymbol.
        (CustomFilterValidatedProgram):
            Update the method prototype for rewriteMixVertexShader.

2012-11-01  Chris Rogers  <crogers@google.com>

        Ensure that AudioNode deletion is synchronized with a stable state of the rendering graph
        https://bugs.webkit.org/show_bug.cgi?id=100994

        Reviewed by Kenneth Russell.

        In some rare cases it has been observed that nodes are getting deleted in the main thread
        during an audio rendering quantum where the dirty inputs and outputs have not yet been cleaned
        via calls to handleDirtyAudioSummingJunctions() and handleDirtyAudioNodeOutputs().
        This was possible because nodes marked for deletion with markForDeletion() could be picked
        up in a subsequent call to deleteMarkedNodes() before the render quantum has finished and
        handlePostRenderTasks() has had a chance to reconcile these marked nodes and clean the dirty state.
        The solution is to manage the marked nodes in a separate vector which only gets copied to another
        vector truly eligible for deletion which is synchronized in handlePostRenderTasks().

        * Modules/webaudio/AudioContext.cpp:
        (WebCore::AudioContext::markForDeletion):
        (WebCore::AudioContext::scheduleNodeDeletion):
        (WebCore::AudioContext::deleteMarkedNodes):
        * Modules/webaudio/AudioContext.h:
        (AudioContext):

2012-11-01  Ryosuke Niwa  <rniwa@webkit.org>

        Build fix after r133224 as suggested by Enrica.
        Confirmed the test failures go away on Chromium Mac locally.

        * page/EventHandler.cpp:
        (WebCore::EventHandler::updateSelectionForMouseDrag):

2012-11-01  Alexey Proskuryakov  <ap@apple.com>

        Rename HAVE(NETWORK_CFDATA_ARRAY_CALLBACK) to USE(NETWORK_CFDATA_ARRAY_CALLBACK)

        Rubber-stamped by Joe Pecoraro.

        All CFNetwork based platforms have this now, but not all use it at the moment.

        * loader/ResourceLoader.h:
        * loader/SubresourceLoader.h:
        * loader/cf/SubresourceLoaderCF.cpp:
        * loader/mac/ResourceLoaderMac.mm:
        * platform/SharedBuffer.cpp:
        (WebCore::SharedBuffer::clear):
        (WebCore::SharedBuffer::buffer):
        (WebCore::SharedBuffer::getSomeData):
        * platform/SharedBuffer.h:
        * platform/cf/SharedBufferCF.cpp:
        * platform/network/ResourceHandle.h:
        * platform/network/ResourceHandleClient.h:
        (ResourceHandleClient):
        * platform/network/cf/ResourceHandleCFNet.cpp:
        (WebCore::willCacheResponse):
        (WebCore::ResourceHandle::createCFURLConnection):
        * platform/network/mac/ResourceHandleMac.mm:

2012-11-01  Alexey Proskuryakov  <ap@apple.com>

        Fix HAVE(NETWORK_CFDATA_ARRAY_CALLBACK) build
        https://bugs.webkit.org/show_bug.cgi?id=100979

        Reviewed by Joseph Pecoraro.

        * loader/ResourceBuffer.cpp: (WebCore::ResourceBuffer::append):
        * loader/ResourceBuffer.h:
        Added a version of append() that takes CFDataRef, passing it directly to SharedBuffer.

        * loader/mac/ResourceLoaderMac.mm: (WebCore::ResourceLoader::didReceiveDataArray):
        InspectorInstrumentation now takes a length. Unfortunately, we don't have encodedLength
        here, meaning that the results will likely be incorrect.

        * platform/network/cf/ResourceHandleCFNet.cpp:
        (WebCore::willCacheResponse): Removed a version that needlessly used deprecated API.
        (WebCore::ResourceHandle::createCFURLConnection): This code assumed that
        HAVE(NETWORK_CFDATA_ARRAY_CALLBACK) and USE(PROTECTION_SPACE_AUTH_CALLBACK) always
        come together. Changed to check for these separately.

2012-11-01  Rob Buis  <rbuis@rim.com>

        [BlackBerry] Add more form validation strings
        https://bugs.webkit.org/show_bug.cgi?id=100978

        Reviewed by Yong Li.

        PR 210072

        Implement these two methods properly.

        * platform/blackberry/LocalizedStringsBlackBerry.cpp:
        (WebCore::validationMessageRangeUnderflowText):
        (WebCore::validationMessageRangeOverflowText):

2012-11-01  Alexandru Chiculita  <achicu@adobe.com>

        [CSS Shaders] Move MeshBoxType out of CustomFilterOperation
        https://bugs.webkit.org/show_bug.cgi?id=100782

        Reviewed by Dean Jackson.

        Moved CustomFilter::MeshBoxType enum to the CustomFilterConstants.h file and renamed it to CustomFilterMeshBoxType. 
        This way we can reuse it without including the CustomFilterOperation file.

        No new tests, just refactoring code.

        * css/CSSPrimitiveValueMappings.h:
        (WebCore::CSSPrimitiveValue::CSSPrimitiveValue):
        (WebCore::CSSPrimitiveValue::operator CustomFilterMeshBoxType):
        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::createCustomFilterOperation):
        * platform/graphics/filters/CustomFilterArrayParameter.h: Adding AnimationUtilities.h for WebCore::blend, looks like
        CustomFilterOperation already included AnimationsUtilities.h indirectly.
        * platform/graphics/filters/CustomFilterConstants.h: Added CustomFilterMeshBoxType.
        * platform/graphics/filters/CustomFilterNumberParameter.h:
        * platform/graphics/filters/CustomFilterOperation.cpp:
        (WebCore::CustomFilterOperation::CustomFilterOperation):
        * platform/graphics/filters/CustomFilterOperation.h:
        (WebCore::CustomFilterOperation::create):
        (WebCore::CustomFilterOperation::meshBoxType):
        (CustomFilterOperation):
        * platform/graphics/filters/CustomFilterRenderer.cpp:
        (WebCore::CustomFilterRenderer::create):
        (WebCore::CustomFilterRenderer::CustomFilterRenderer):
        * platform/graphics/filters/CustomFilterRenderer.h: Also removed the need to include CustomFilterOperation.h. Some other
        headers were needed to replace the files that were automatically incldued because of that file.
        (WebCore):
        (CustomFilterRenderer):
        * platform/graphics/filters/FECustomFilter.cpp:
        (WebCore::FECustomFilter::FECustomFilter):
        (WebCore::FECustomFilter::create):
        * platform/graphics/filters/FECustomFilter.h:
        (FECustomFilter):

2012-11-01  Enrica Casucci  <enrica@apple.com>

        Part2 of: Extend -webkit-user-select with new value "all"
        <rdar://problem/10161404>
        https://bugs.webkit.org/show_bug.cgi?id=91912

        Reviewed by Ryosuke Niwa.

        The new value "all" for -webkit-user-select property gives content none-or-all selection option.
        The patch was originally prepared by Alice Cheng but the approach has been changed.
        The idea is to treat these elements like non editable, meaning that we should skip over them entirely
        when moving the cursor and a deletion should delete the element and all its descentants at once.
        The key change is in Node::rendererIsEditable where we now return false if the element style is
        userSelect: all. The other change is in the way we create the selection on mouse click and dragging
        over the element. In both cases we force the selection to extend over the entire element with
        the user-select: all attribute.
        This is currently enabled only for the Mac port.

        Test: editing/selection/user-select-all-selection.html

        * dom/Node.cpp: Added a parameter to isContentEditable to behave differently
        when called from JavaScript. Internally isContentEditable returns false on
        nodes with user-select: all style.
        (WebCore::Node::isContentEditable):
        (WebCore::Node::isContentRichlyEditable):
        (WebCore::Node::rendererIsEditable):
        (WebCore::Node::shouldUseInputMethod):
        (WebCore::Node::willRespondToMouseClickEvents):
        * dom/Node.h:
        (WebCore::Node::rendererIsEditable):
        (WebCore::Node::rendererIsRichlyEditable):
        * dom/Position.cpp:
        (WebCore::Position::nodeIsUserSelectAll): Added.
        (WebCore::Position::rootUserSelectAllForNode): Added.
        * dom/Position.h: Added static functions described above.
        * editing/ApplyStyleCommand.cpp:
        (WebCore::ApplyStyleCommand::removeInlineStyleFromElement): Added parameter to
        isContentEditable() call.
        (WebCore::ApplyStyleCommand::surroundNodeRangeWithElement): Added parameter to
        isContentEditable() call.
        * editing/DeleteFromTextNodeCommand.cpp:
        (WebCore::DeleteFromTextNodeCommand::doApply): Added parameter to
        isContentEditable() call.
        * editing/FrameSelection.cpp:
        (WebCore::adjustForwardPositionForUserSelectAll): New helper function.
        (WebCore::adjustBackwardPositionForUserSelectAll): New helper function.
        (WebCore::FrameSelection::modifyExtendingRight):
        (WebCore::FrameSelection::modifyExtendingForward):
        (WebCore::FrameSelection::modifyExtendingLeft):
        (WebCore::FrameSelection::modifyExtendingBackward):
        (WebCore::FrameSelection::modify):
        (WebCore::CaretBase::invalidateCaretRect): Added parameter to
        isContentEditable() call.
        * editing/InsertNodeBeforeCommand.cpp:
        (WebCore::InsertNodeBeforeCommand::doApply): Ditto.
        (WebCore::InsertNodeBeforeCommand::doUnapply): Ditto.
        * editing/RemoveNodeCommand.cpp:
        (WebCore::RemoveNodeCommand::doApply): Ditto.
        * editing/visible_units.cpp:
        (WebCore::startOfParagraph): We should not consider a paragraph break and element
        with user-select: all style, like we do at the border of editability.
        (WebCore::endOfParagraph): Ditto.
        * page/EventHandler.cpp:
        (WebCore::EventHandler::updateSelectionForMouseDownDispatchingSelectStart): Create a selection
        around the element whose style is user-select: all.
        (WebCore::EventHandler::updateSelectionForMouseDrag): Ditto.
        * rendering/RootInlineBox.cpp:
        (WebCore::RootInlineBox::selectionState): Fixed a bug uncovered during this work.
        If the selection starts in one of the leaf boxes and after we encounter one with SelectionNone,
        we should return the selection state as SelectionBoth, assuming we went past the end selection.
        This avoids doing an incorrect gap filling for the selection highlighting.

2012-11-01  Alec Flett  <alecflett@chromium.org>

        IndexedDB: Fix Windows build by re-adding a #include
        https://bugs.webkit.org/show_bug.cgi?id=100986

        Reviewed by Stephen White.

        Fix #include that broke windows.

        * Modules/indexeddb/IDBCallbacks.h:

2012-11-01  David Barton  <dbarton@mathscribe.com>

        REGRESSION (r128837): mathml/presentation/subsup.xhtml became flaky
        https://bugs.webkit.org/show_bug.cgi?id=97390

        Reviewed by Ojan Vafai.

        In a RenderMathMLSubSup, we need to set the base's wrapper's style so that baseHeight
        in layout() will be the base's true height, without any flexbox stretching.

        Tested by existing tests.

        * rendering/mathml/RenderMathMLSubSup.cpp:
        (WebCore::RenderMathMLSubSup::fixAnonymousStyles):
        (WebCore::RenderMathMLSubSup::addChild):
        (WebCore::RenderMathMLSubSup::styleDidChange):
        * rendering/mathml/RenderMathMLSubSup.h:
        (RenderMathMLSubSup):

2012-11-01  Antti Koivisto  <antti@apple.com>

        REGRESSION (r132941): attribute modification 10% performance regression
        https://bugs.webkit.org/show_bug.cgi?id=100873

        Reviewed by Ojan Vafai.

        Don't do the class change finding by mutating SpaceSplitString. It is slow. Instead use a bit vector
        to mark the unchanged classes

        * css/StyleResolver.cpp:
        (WebCore):
        * css/StyleResolver.h:
        (WebCore::StyleResolver::hasSelectorForAttribute):
        (WebCore):
        (WebCore::StyleResolver::hasSelectorForClass):
        (WebCore::StyleResolver::hasSelectorForId):
        
            Inlined these and moved value validity testing to clients.

        * dom/Element.cpp:
        (WebCore::checkNeedsStyleInvalidationForIdChange):
        (WebCore):
        (WebCore::Element::attributeChanged):
    
            Clean up id testing too.

        (WebCore::checkNeedsStyleInvalidationForClassChange):
        
            Use bit vector for marking seen values. Avoids allocations and reffing.

        (WebCore::Element::classAttributeChanged):
        
            Don't test if style is already invalid.

2012-11-01  Ryosuke Niwa  <rniwa@webkit.org>

        [Mac] Crash in Range::editingStartPosition
        https://bugs.webkit.org/show_bug.cgi?id=100972

        Reviewed by Enrica Casucci.

        Add a missing null pointer check. toNormalizedRange() can return null here, in which case the call to
        pastLastNode() will crash.

        No new tests since determining the exact condition under which we go through the said code path and
        toNormalRange returns null is hard.

        * editing/mac/EditorMac.mm:
        (WebCore::Editor::fontForSelection):

2012-11-01  Beth Dakin  <bdakin@apple.com>

        https://bugs.webkit.org/show_bug.cgi?id=100917
        There should be a way to dump the scrolling tree from the layout tests

        Reviewed by Simon Fraser.

        New Internals call to dump the scrolling state tree as text. Calls through to the 
        ScrollingCoordinator.
        * testing/Internals.cpp:
        (WebCore::Internals::scrollingStateTreeAsText):
        (WebCore):
        * testing/Internals.h:
        * testing/Internals.idl:
        * WebCore.exp.in:
        * page/Page.cpp:
        (WebCore::Page::scrollingStateTreeAsText):
        (WebCore):
        * page/Page.h:
        (Page):

        ScrollingCoordinator tells the rootStateNode to dump the tree as text.
        * page/scrolling/mac/ScrollingCoordinatorMac.h:
        (ScrollingCoordinatorMac):
        * page/scrolling/mac/ScrollingCoordinatorMac.mm:
        (WebCore::ScrollingCoordinatorMac::scrollingStateTreeAsText):
        (WebCore):
        * page/scrolling/ScrollingCoordinator.cpp:
        (WebCore::ScrollingCoordinator::scrollingStateTreeAsText):
        (WebCore):
        * page/scrolling/ScrollingCoordinator.h:
        (ScrollingCoordinator):

        dumpNode() dumps generic stuff for each node, and dumpProperties will dump the 
        properties that are specific to different types of nodes.
        * page/scrolling/ScrollingStateNode.cpp:
        (WebCore::ScrollingStateNode::writeIndent):
        (WebCore):
        (WebCore::ScrollingStateNode::dumpNode):
        (WebCore::ScrollingStateNode::scrollingStateTreeAsText):
        * page/scrolling/ScrollingStateNode.h:
        (WebCore):
        (ScrollingStateNode):
        * page/scrolling/ScrollingStateScrollingNode.cpp:
        (WebCore::ScrollingStateScrollingNode::dumpProperties):
        (WebCore):
        * page/scrolling/ScrollingStateScrollingNode.h:
        (ScrollingStateScrollingNode):

2012-11-01  Kenneth Russell  <kbr@google.com>

        Add RGB to supported destination formats of ImageBuffer::copyToPlatformTexture
        https://bugs.webkit.org/show_bug.cgi?id=100971

        Reviewed by Stephen White.

        The ImageBuffer::copyToPlatformTexture restriction added in
        r132965 was too restrictive. Allow RGB textures to prevent
        performance regressions.

        * html/canvas/WebGLRenderingContext.cpp:
        (WebCore):
        (WebCore::WebGLRenderingContext::texImage2D):
        * platform/graphics/ImageBuffer.h:
        (ImageBuffer):

2012-11-01  Michael Matovsky  <mmatovsky@rim.com>

        [BlackBerry] Web page view state should be preserved for pages loaded from page cache
        https://bugs.webkit.org/show_bug.cgi?id=100694
        Internal PR: 220488

        Internally reviewed by Lianghui Chen, Joe Mason
        Reviewed by Rob Buis.

        The web page view specific metadata should be preserved for web pages loaded from page cache (by using back/forward).
        This requires web page view state to be saved in and restored from the corresponding page cache history item.

        No new tests for platform specific internal change.

        * history/blackberry/HistoryItemViewState.h:
        (HistoryItemViewState):

2012-11-01  Alec Flett  <alecflett@chromium.org>

        IndexedDB: add methods to support id-based backend APIs
        https://bugs.webkit.org/show_bug.cgi?id=100425

        Reviewed by Tony Chang.

        First half of refactor involves adding a number of methods that
        are int64_t-based rather than String-based. As a part of this, the
        IDB*Metadata structs and the backend objectStore/index maps all
        use int64_t as keys, rather than String.

        In addition, there were a number of cleanups that came out of the
        refactor:

        - The list of object stores active in a transaction is now
          maintained by the frontend IDBTransaction rather than the backend
          IDBTransactionBackendImpl. This also had a simplifying rippling
          effect through other call signatures.

        - I was able to remove an apparently old FIXME from
          IDBTransactionBackendImpl::objectStore and replace it with an ASSERT.

        - IDBObjectStoreBackendImpl's IndexWriter class got a little
          simpler since the id is now easily available in the
          IDBIndexMetadata.

        - A number of methods got simpler in their int64_t versions,
          specifically dropping a number of ExceptionCodes.

        There is also some glue code
        (getIndexId/getIndexIds/getObjectStoreId) that will go away with
        the 2nd half of this: https://bugs.webkit.org/show_bug.cgi?id=100425

        No new tests, no new functionality as this is just a refactor.

        * Modules/indexeddb/IDBDatabase.cpp:
        (WebCore::IDBDatabase::objectStoreNames):
        (WebCore::IDBDatabase::createObjectStore):
        (WebCore::IDBDatabase::deleteObjectStore):
        (WebCore::IDBDatabase::transaction):
        * Modules/indexeddb/IDBDatabaseBackendImpl.cpp:
        (WebCore::IDBDatabaseBackendImpl::metadata):
        (WebCore::IDBDatabaseBackendImpl::createObjectStore):
        (WebCore::IDBDatabaseBackendImpl::objectStore):
        (WebCore::IDBDatabaseBackendImpl::getObjectStoreId):
        (WebCore):
        (WebCore::IDBDatabaseBackendImpl::deleteObjectStore):
        (WebCore::IDBDatabaseBackendImpl::transaction):
        (WebCore::IDBDatabaseBackendImpl::loadObjectStores):
        (WebCore::IDBDatabaseBackendImpl::removeObjectStoreFromMap):
        (WebCore::IDBDatabaseBackendImpl::addObjectStoreToMap):
        * Modules/indexeddb/IDBDatabaseBackendImpl.h:
        (WebCore::IDBDatabaseBackendImpl::deleteObjectStore):
        (IDBDatabaseBackendImpl):
        * Modules/indexeddb/IDBDatabaseBackendInterface.h:
        (IDBDatabaseBackendInterface):
        * Modules/indexeddb/IDBIndex.h:
        (WebCore::IDBIndex::id):
        (WebCore::IDBIndex::openKeyCursor):
        * Modules/indexeddb/IDBIndexBackendInterface.h:
        * Modules/indexeddb/IDBMetadata.h:
        (WebCore::IDBIndexMetadata::IDBIndexMetadata):
        (IDBIndexMetadata):
        (IDBObjectStoreMetadata):
        (WebCore::IDBObjectStoreMetadata::containsIndex):
        (IDBDatabaseMetadata):
        (WebCore::IDBDatabaseMetadata::IDBDatabaseMetadata):
        (WebCore::IDBDatabaseMetadata::containsObjectStore):
        * Modules/indexeddb/IDBObjectStore.cpp:
        (WebCore::IDBObjectStore::indexNames):
        (WebCore::IDBObjectStore::put):
        (WebCore::IDBObjectStore::createIndex):
        (WebCore::IDBObjectStore::index):
        (WebCore::IDBObjectStore::deleteIndex):
        * Modules/indexeddb/IDBObjectStoreBackendImpl.cpp:
        (WebCore::IDBObjectStoreBackendImpl::put):
        (WebCore::IDBObjectStoreBackendImpl::putWithIndexKeys):
        (WebCore):
        (WebCore::makeIndexWriters):
        (WebCore::IDBObjectStoreBackendImpl::setIndexKeys):
        (WebCore::IDBObjectStoreBackendImpl::setIndexesReady):
        (WebCore::IDBObjectStoreBackendImpl::setIndexesReadyInternal):
        (WebCore::IDBObjectStoreBackendImpl::putInternal):
        (WebCore::IDBObjectStoreBackendImpl::deleteInternal):
        (WebCore::IDBObjectStoreBackendImpl::createIndex):
        (WebCore::IDBObjectStoreBackendImpl::index):
        (WebCore::IDBObjectStoreBackendImpl::getIndexId):
        (WebCore::IDBObjectStoreBackendImpl::getIndexIds):
        (WebCore::IDBObjectStoreBackendImpl::deleteIndex):
        (WebCore::IDBObjectStoreBackendImpl::loadIndexes):
        (WebCore::IDBObjectStoreBackendImpl::removeIndexFromMap):
        (WebCore::IDBObjectStoreBackendImpl::addIndexToMap):
        * Modules/indexeddb/IDBObjectStoreBackendImpl.h:
        (IDBObjectStoreBackendImpl):
        * Modules/indexeddb/IDBObjectStoreBackendInterface.h:
        * Modules/indexeddb/IDBOpenDBRequest.cpp:
        (WebCore::IDBOpenDBRequest::onUpgradeNeeded):
        * Modules/indexeddb/IDBRequest.cpp:
        (WebCore::IDBRequest::onSuccess):
        (WebCore::IDBRequest::uncaughtExceptionInEventHandler):
        * Modules/indexeddb/IDBTransaction.cpp:
        (WebCore::IDBTransaction::create):
        (WebCore::IDBTransaction::IDBTransaction):
        (WebCore::IDBTransaction::objectStore):
        * Modules/indexeddb/IDBTransaction.h:
        (IDBTransaction):
        * Modules/indexeddb/IDBTransactionBackendImpl.cpp:
        (WebCore::IDBTransactionBackendImpl::create):
        (WebCore::IDBTransactionBackendImpl::IDBTransactionBackendImpl):
        (WebCore::IDBTransactionBackendImpl::objectStore):
        (WebCore):
        (WebCore::IDBTransactionBackendImpl::scheduleTask):
        * Modules/indexeddb/IDBTransactionBackendImpl.h:
        (IDBTransactionBackendImpl):
        * Modules/indexeddb/IDBTransactionBackendInterface.h:

2012-11-01  Adam Barth  <abarth@webkit.org>

        [V8] The DOMWrapperVisitor abstraction is no longer needed
        https://bugs.webkit.org/show_bug.cgi?id=100965

        Reviewed by Kentaro Hara.

        This patch removes the DOMWrapperVisitor interface because it is no
        longer needed. As a consequence, DOMWrapperMaps no longer need to
        support enumeration, and we can move more DOM objects to use the faster
        intrusive wrappers.

        There was one remaining user of DOMWrapperVisitor in the
        ScriptProfiler, which I've moved over to enumerating objects directly
        from V8, similar to a function above it in the same file.

        * bindings/v8/DOMWrapperMap.h:
        (WebCore):
        (DOMWrapperMap):
        * bindings/v8/IntrusiveDOMWrapperMap.h:
        * bindings/v8/ScriptProfiler.cpp:
        (WebCore::ScriptProfiler::visitNodeWrappers):
        (WebCore::ScriptProfiler::visitExternalArrays):

2012-11-01  Mike West  <mkwst@chromium.org>

        CSP 1.0: Warn when old-style directives encountered.
        https://bugs.webkit.org/show_bug.cgi?id=100883

        Reviewed by Adam Barth.

        In Mozilla's pre-W3C-spec implementation, a few directives are
        implemented that were either renamed, reworked, or removed from CSP 1.0.
        This patch adds special warning messages for three of those directives
        to set developer expectations correctly.

        Test: http/tests/security/contentSecurityPolicy/source-list-parsing-deprecated.html

        * page/ContentSecurityPolicy.cpp:
        (WebCore::CSPDirectiveList::parseDirective):
        (WebCore::CSPDirectiveList::addDirective):
        (WebCore::ContentSecurityPolicy::reportUnsupportedDirective):
        * page/ContentSecurityPolicy.h:
            Rename 'reportUnrecognizedDirectives' to
            'reportUnsupportedDirectives', and teach it to give more descriptive
            error messages when encountering 'allow', 'options', and
            'policy-uri'.

2012-11-01  Pavel Feldman  <pfeldman@chromium.org>

        Web Inspector: Update CodeMirror to v3
        https://bugs.webkit.org/show_bug.cgi?id=99319

        Reviewed by Vsevolod Vlasov.

        Updated to ToT v3.

        * inspector/front-end/CodeMirrorTextEditor.js:
        (WebInspector.CodeMirrorTextEditor):
        (WebInspector.CodeMirrorTextEditor.prototype._gutterClick):
        (WebInspector.CodeMirrorTextEditor.prototype.addBreakpoint):
        (WebInspector.CodeMirrorTextEditor.prototype.removeBreakpoint):
        (WebInspector.CodeMirrorTextEditor.prototype.setExecutionLine):
        (WebInspector.CodeMirrorTextEditor.prototype.clearExecutionLine):
        (WebInspector.CodeMirrorTextEditor.prototype.highlightLine):
        (WebInspector.CodeMirrorTextEditor.prototype.clearLineHighlight):
        (WebInspector.CodeMirrorTextEditor.prototype._change):
        * inspector/front-end/cm/cmdevtools.css:
        (.CodeMirror):
        (.CodeMirror-linenumber):
        (.cm-breakpoint):
        * inspector/front-end/cm/codemirror.css:
        (.CodeMirror):
        (.CodeMirror-scroll):
        (.CodeMirror-lines):
        (.CodeMirror pre):
        (.CodeMirror-scrollbar-filler):
        (.CodeMirror-gutters):
        (.CodeMirror-linenumbers):
        (.CodeMirror-linenumber):
        (.CodeMirror pre.CodeMirror-cursor):
        (.CodeMirror pre.CodeMirror-secondarycursor):
        (.cm-keymap-fat-cursor pre.CodeMirror-cursor):
        (.cm-keymap-fat-cursor pre.CodeMirror-cursor:not(#nonsense_id)):
        (.CodeMirror pre.CodeMirror-cursor.CodeMirror-overwrite):
        (.cm-s-default .cm-keyword):
        (.cm-s-default .cm-atom):
        (.cm-s-default .cm-number):
        (.cm-s-default .cm-def):
        (.cm-s-default .cm-variable):
        (.cm-s-default .cm-variable-2):
        (.cm-s-default .cm-variable-3):
        (.cm-s-default .cm-property):
        (.cm-s-default .cm-operator):
        (.cm-s-default .cm-comment):
        (.cm-s-default .cm-string):
        (.cm-s-default .cm-string-2):
        (.cm-s-default .cm-meta):
        (.cm-s-default .cm-error):
        (.cm-s-default .cm-qualifier):
        (.cm-s-default .cm-builtin):
        (.cm-s-default .cm-bracket):
        (.cm-s-default .cm-tag):
        (.cm-s-default .cm-attribute):
        (.cm-s-default .cm-header):
        (.cm-s-default .cm-quote):
        (.cm-s-default .cm-hr):
        (.cm-s-default .cm-link):
        (.cm-header, .cm-strong):
        (.cm-em):
        (.cm-emstrong):
        (.cm-link):
        (.cm-invalidchar):
        (div.CodeMirror span.CodeMirror-matchingbracket):
        (div.CodeMirror span.CodeMirror-nonmatchingbracket):
        (.CodeMirror-sizer):
        (.CodeMirror-vscrollbar, .CodeMirror-hscrollbar, .CodeMirror-scrollbar-filler):
        (.CodeMirror-vscrollbar):
        (.CodeMirror-hscrollbar):
        (.CodeMirror-gutter):
        (.CodeMirror-gutter-elt):
        (.CodeMirror-linebackground):
        (.CodeMirror-linewidget):
        (.CodeMirror-measure):
        (.CodeMirror-measure pre):
        (.CodeMirror-selected):
        (.CodeMirror-focused .CodeMirror-selected):
        (.CodeMirror span):
        * inspector/front-end/cm/codemirror.js:
        (window.CodeMirror.):
        (window.CodeMirror):
        * inspector/front-end/utilities.js:

2012-11-01  Tiancheng Jiang  <tijiang@rim.com>

        [BlackBerry] Update BB10 form theme.
        https://bugs.webkit.org/show_bug.cgi?id=100760

        Reviewed by Rob Buis.

        RIM PR 235194.

        Check img pointer is null, if so, do early return.

        * platform/blackberry/RenderThemeBlackBerry.cpp:
        (WebCore::drawControl):
        (WebCore::drawThreeSlice):
        (WebCore::drawNineSlice):

2012-11-01  Adam Barth  <abarth@webkit.org>

        [V8] The V8DOMMap visitors are no longer needed
        https://bugs.webkit.org/show_bug.cgi?id=100963

        Reviewed by Kentaro Hara.

        This patch inlines visitAllDOMNodes into its one caller (and removes
        one layer of visitor adaptor abstraction).

        * bindings/v8/ScriptProfiler.cpp:
        (WebCore::ScriptProfiler::visitNodeWrappers):
        * bindings/v8/V8DOMMap.cpp:
        * bindings/v8/V8DOMMap.h:
        (WebCore):

2012-11-01  Tiancheng Jiang  <tijiang@rim.com>

        [BlackBerry] Update BB10 form theme.
        https://bugs.webkit.org/show_bug.cgi?id=100760

        Reviewed by Rob Buis.

        RIM PR 235194.

        Check img pointer is null, if so, do early return.

        * platform/blackberry/RenderThemeBlackBerry.cpp:
        (WebCore::drawControl):
        (WebCore::drawThreeSlice):
        (WebCore::drawNineSlice):

2012-11-01  Adam Barth  <abarth@webkit.org>

        Unreviewed. Build fix.

        * bindings/v8/V8GCController.cpp:

2012-11-01  Christophe Dumez  <christophe.dumez@intel.com>

        [EFL][WK2] Add Ewk_Auth_Request API
        https://bugs.webkit.org/show_bug.cgi?id=100858

        Reviewed by Kenneth Rohde Christiansen.

        Provide an AuthenticationClient for EFL port in WebCore so
        that we can handle authentication similarly to other ports
        of WebKit.

        No new tests, no behavior change for layout tests.

        * PlatformEfl.cmake: Add AuthenticationChallengeSoup.cpp to CMake.
        * loader/ResourceLoader.cpp:
        (WebCore::ResourceLoader::didReceiveAuthenticationChallenge):
        * platform/network/ResourceHandle.h:
        (ResourceHandle): Have ResourceHandle subclass AuthenticationClient like
        most of the other ports.
        * platform/network/soup/AuthenticationChallengeSoup.cpp: Fix initialization
        of previousFailureCount member. It should be 1 if we are retrying
        authentication and 0 otherwise, not the opposite.
        (WebCore::AuthenticationChallenge::AuthenticationChallenge):
        * platform/network/soup/ResourceHandleSoup.cpp: Provide implementation for EFL
        port of AuthenticationClient methods.
        (WebCore::WebCoreSynchronousLoader::didReceiveAuthenticationChallenge):
        (WebCoreSynchronousLoader):
        (WebCore):
        (WebCore::ResourceHandle::didReceiveAuthenticationChallenge):
        (WebCore::ResourceHandle::receivedRequestToContinueWithoutCredential):
        (WebCore::ResourceHandle::receivedCredential):
        (WebCore::ResourceHandle::receivedCancellation):
        (WebCore::authenticateCallback):
        (WebCore::ResourceHandle::defaultSession):

2012-10-24  Jocelyn Turcotte  <jocelyn.turcotte@digia.com>

        WebIconDatabase: Properly clean up on destruction
        https://bugs.webkit.org/show_bug.cgi?id=100237

        Reviewed by Brady Eidson.

        It's now possible that the IconDatabase gets destroyed since WebKit2
        isn't using it as a singleton.

        Check that the database was properly closed rather than asserting that
        it won't get deleted.

        * loader/icon/IconDatabase.cpp:
        (WebCore::IconDatabase::~IconDatabase):

2012-11-01  Alexei Filippov  <alph@chromium.org>

        Web Inspector: make component subitems use parent color in native memory snapshots.
        https://bugs.webkit.org/show_bug.cgi?id=100876

        A component subitems use the color of the component itself if the color
        is not explicitly specified for the subitem.

        Reviewed by Yury Semikhatsky.

        * inspector/front-end/NativeMemorySnapshotView.js:
        (WebInspector.NativeSnapshotNode.prototype._createSizeCell):
        (WebInspector.MemoryBlockViewProperties._initialize):
        (WebInspector.MemoryBlockViewProperties._forMemoryBlock):

2012-11-01  Emil A Eklund  <eae@chromium.org>

        [subpixel] Change intrinsicSize to LayoutUnit
        https://bugs.webkit.org/show_bug.cgi?id=99104

        Reviewed by Levi Weintraub.

        Change RenderReplaced and intrinsicSize to LayoutUnit to avoid
        rounding problems when zooming/scaling. Also change imageSize to
        LayoutUnit as it can return a scaled size.

        Test: fast/sub-pixel/tiled-canvas-elements.html

        * html/ImageDocument.cpp:
        (WebCore::ImageDocumentParser::finish):
        * loader/cache/CachedImage.cpp:
        (WebCore::CachedImage::imageSizeForRenderer):
        * loader/cache/CachedImage.h:
        (CachedImage):
        * platform/graphics/FractionalLayoutSize.h:
        (FractionalLayoutSize):
        (WebCore::FractionalLayoutSize::scale):
        (WebCore::FractionalLayoutSize::clampToMinimumSize):
        * rendering/RenderBox.h:
        (WebCore::RenderBox::intrinsicSize):
        * rendering/RenderHTMLCanvas.cpp:
        (WebCore::RenderHTMLCanvas::canvasSizeChanged):
        * rendering/RenderImage.cpp:
        (WebCore::RenderImage::imageChanged):
        (WebCore::RenderImage::updateIntrinsicSizeIfNeeded):
        (WebCore::RenderImage::paintReplaced):
        (WebCore::RenderImage::minimumReplacedHeight):
        * rendering/RenderImage.h:
        (RenderImage):
        * rendering/RenderImageResource.h:
        (WebCore::RenderImageResource::imageSize):
        * rendering/RenderImageResourceStyleImage.h:
        * rendering/RenderReplaced.cpp:
        (WebCore::RenderReplaced::RenderReplaced):
        (WebCore::RenderReplaced::computeAspectRatioInformationForRenderBox):
        (WebCore::RenderReplaced::computeReplacedLogicalWidth):
        (WebCore::RenderReplaced::computeReplacedLogicalHeight):
        * rendering/RenderReplaced.h:
        (RenderReplaced):
        (WebCore::RenderReplaced::minimumReplacedHeight):
        (WebCore::RenderReplaced::setIntrinsicSize):
        * rendering/RenderVideo.cpp:
        (WebCore::RenderVideo::updateIntrinsicSize):
        (WebCore::RenderVideo::calculateIntrinsicSize):
        (WebCore::RenderVideo::videoBox):
        (WebCore::RenderVideo::minimumReplacedHeight):
        * rendering/RenderVideo.h:
        (RenderVideo):
        * rendering/style/StyleCachedImage.cpp:
        (WebCore::StyleCachedImage::imageSize):
        * rendering/style/StyleCachedImage.h:
        (StyleCachedImage):
        * rendering/style/StyleCachedImageSet.cpp:
        (WebCore::StyleCachedImageSet::imageSize):
        * rendering/style/StyleCachedImageSet.h:
        (StyleCachedImageSet):
        * rendering/style/StyleGeneratedImage.cpp:
        (WebCore::StyleGeneratedImage::imageSize):
        (WebCore::StyleGeneratedImage::computeIntrinsicDimensions):
        * rendering/style/StyleGeneratedImage.h:
        (StyleGeneratedImage):
        * rendering/style/StyleImage.h:
        (StyleImage):
        * rendering/style/StylePendingImage.h:

2012-11-01  Adam Barth  <abarth@webkit.org>

        [V8] Unify the V8GCController visitors
        https://bugs.webkit.org/show_bug.cgi?id=100897

        Reviewed by Eric Seidel.

        After this patch, we use a single visitor for all DOM wrappers,
        regardless of type. We also visit all the wrappers in one pass by
        calling v8::V8::VisitHandlesWithClassIds directly rather than via
        visitAllDOMNodes.

        This patch also introduces a wrapper class ID for non-Node DOM objects.
        Previously, only DOM nodes had a class ID.

        * bindings/v8/IntrusiveDOMWrapperMap.h:
        * bindings/v8/ScriptProfiler.cpp:
        (WebCore::retainedDOMInfo):
        (WebCore::ScriptProfiler::initialize):
        * bindings/v8/V8DOMMap.cpp:
        (WebCore::visitAllDOMNodes):
        * bindings/v8/V8DOMWrapper.cpp:
        (WebCore::V8DOMWrapper::setJSWrapperForDOMNode):
        * bindings/v8/V8DOMWrapper.h:
        (WebCore::V8DOMWrapper::setJSWrapperForDOMObject):
        * bindings/v8/V8GCController.cpp:
        (WebCore::GCHandleVisitor::notifyFinished):
        (GCHandleVisitor):
        (WebCore::V8GCController::majorGCPrologue):
        * bindings/v8/WrapperTypeInfo.h:
        (WebCore):

2012-11-01  Stephen White  <senorblanco@chromium.org>

        Unreviewed, rolling out r133143.
        http://trac.webkit.org/changeset/133143
        https://bugs.webkit.org/show_bug.cgi?id=96894

        Causing content_browsertests failures

        * CMakeLists.txt:
        * GNUmakefile.list.am:
        * Target.pri:
        * WebCore.gypi:
        * WebCore.vcproj/WebCore.vcproj:
        * WebCore.xcodeproj/project.pbxproj:
        * dom/DeviceOrientationClient.h:
        (DeviceOrientationClient):
        * dom/DeviceOrientationController.cpp:
        (WebCore::DeviceOrientationController::DeviceOrientationController):
        (WebCore):
        (WebCore::DeviceOrientationController::~DeviceOrientationController):
        (WebCore::DeviceOrientationController::timerFired):
        (WebCore::DeviceOrientationController::addListener):
        (WebCore::DeviceOrientationController::removeListener):
        (WebCore::DeviceOrientationController::removeAllListeners):
        (WebCore::DeviceOrientationController::suspendEventsForAllListeners):
        (WebCore::DeviceOrientationController::resumeEventsForAllListeners):
        (WebCore::DeviceOrientationController::didChangeDeviceOrientation):
        (WebCore::DeviceOrientationController::supplementName):
        * dom/DeviceOrientationController.h:
        (WebCore):
        (DeviceOrientationController):
        (WebCore::DeviceOrientationController::isActive):
        (WebCore::DeviceOrientationController::client):
        (WebCore::DeviceOrientationController::from):
        * dom/Document.cpp:
        (WebCore::Document::suspendActiveDOMObjects):
        (WebCore::Document::resumeActiveDOMObjects):
        * loader/EmptyClients.h:
        (WebCore::EmptyDeviceOrientationClient::startUpdating):
        (WebCore::EmptyDeviceOrientationClient::stopUpdating):
        * page/DOMWindow.cpp:
        (WebCore::DOMWindow::addEventListener):
        (WebCore::DOMWindow::removeEventListener):
        (WebCore::DOMWindow::removeAllEventListeners):
        * page/DeviceClient.h: Removed.
        * page/DeviceController.cpp: Removed.
        * page/DeviceController.h: Removed.

2012-11-01  Kondapally Kalyan  <kalyan.kondapally@intel.com>

        [EFL][AC]Free GL resources allocated by GraphicsContext3DEfl.
        https://bugs.webkit.org/show_bug.cgi?id=100923.

        Reviewed by Kenneth Rohde Christiansen.

        GraphicsContext3DEfl creates FBO's, textures and render buffer's, but doesn't free them.
        This patch makes sure that GraphicsContext3dEfl frees all the GL resources allocated by it.

        * platform/graphics/efl/GraphicsContext3DEfl.cpp:
        (WebCore::GraphicsContext3D::~GraphicsContext3D):

2012-11-01  Andreas Kling  <kling@webkit.org>

        Fix StylePropertySet/ElementAttributeData custom allocation in debug builds.
        <http://webkit.org/b/100753>

        Unreviewed debug bot crash fix after r133138.

        There's additional padding after StylePropertySet and ElementAttributeData
        in 64-bit debug builds since there are additional members in RefCountedBase.
        Use 'sizeof(ImmutableFoo) - sizeof(void*)' as the base size of ImmutableFoo.

        * css/StylePropertySet.cpp:
        (WebCore::sizeForImmutableStylePropertySetWithPropertyCount):
        * dom/ElementAttributeData.cpp:
        (WebCore::sizeForImmutableElementAttributeDataWithAttributeCount):
        (WebCore::ElementAttributeData::createImmutable):
        (WebCore::ElementAttributeData::reportMemoryUsage):

2012-11-01  Stephen Chenney  <schenney@chromium.org>

        FEImage::m_document is never cleared. Why not?
        https://bugs.webkit.org/show_bug.cgi?id=99243

        Reviewed by Dirk Schulze.

        Adding a comment to explain why the failure to clear m_document is not a problem.

        No new tests because no code change at all.

        * svg/graphics/filters/SVGFEImage.h:
        (FEImage): Add a comment on the lifetime of m_document.

2012-11-01  Eugene Klyuchnikov  <eustas.bug@gmail.com>

        Web Inspector: Timeline: make "addRecord" unambiguous
        https://bugs.webkit.org/show_bug.cgi?id=100761

        Reviewed by Pavel Feldman.

        TimelinePresentationModel.addRecord accepts two parameters:
        record and parentRecord. parentRecord is always root record.
        Make this explicit by removing parentRecord parameter.

        * inspector/front-end/TimelinePanel.js: Removed parameter.
        * inspector/front-end/TimelinePresentationModel.js:
        (WebInspector.TimelinePresentationModel.prototype.addRecord):
        Used root recoed instead of parent record.

2012-11-01  Charles Wei  <charles.wei@torchmobile.com.cn>

        [BlackBerry] Browser prematurely sends wrong credentials
        https://bugs.webkit.org/show_bug.cgi?id=100585

        Reviewed by George Staikos.

        Don't send credentials to the server before been challenged.

        * platform/network/blackberry/NetworkManager.cpp:
        (WebCore::NetworkManager::startJob):

2012-11-01  Stephen Chenney  <schenney@chromium.org>

        SVG as an image may recreate the renderer on zoom
        https://bugs.webkit.org/show_bug.cgi?id=99508

        Reviewed by Abhishek Arya.

        The SVGImage code, when SVG is used in <img> tags, caches the renderer
        at the start of the painting method and re-uses the pointer at the end
        of the method. However, when the page is zoomed the renderer may be
        detached mid-method, thus leaving a stray pointer. The fix is to
        re-fetch the pointer after the zooms.

        Test: svg/as-image/img-zoom-svg-stylesheet.html

        * svg/graphics/SVGImage.cpp:
        (WebCore::SVGImage::drawSVGToImageBuffer): Re-fetch the renderer after
        the zoom operations.

2012-11-01  Pavel Feldman  <pfeldman@chromium.org>

        Web Inspector: introduce Inspector.detached message containing termination cause.
        https://bugs.webkit.org/show_bug.cgi?id=100948

        Reviewed by Yury Semikhatsky.

        Now protocol clients have more information to process connection termination.

        * English.lproj/localizedStrings.js:
        * inspector/Inspector.json:
        * inspector/front-end/InspectorFrontendHostStub.js:
        (WebInspector.RemoteDebuggingTerminatedScreen):
        * inspector/front-end/inspector.js:
        (WebInspector.loaded.WebInspector.socket.onopen):
        (WebInspector.loaded):
        (WebInspector.detached):

2012-11-01  Vsevolod Vlasov  <vsevik@chromium.org>

        Web Inspector: Restoring breakpoints for formatted UISourceCode should be triggered by BreakpointManager, not ScriptsPanel.
        https://bugs.webkit.org/show_bug.cgi?id=100593

        Reviewed by Pavel Feldman.

        BreakpointManager now listen for FormattedChanged event and restores formatted breakpoints on it.
        Removed now redundant callback from UISourceCode.setFormatted().

        * inspector/front-end/BreakpointManager.js:
        (WebInspector.BreakpointManager.prototype._restoreBreakpoints):
        (WebInspector.BreakpointManager.prototype._uiSourceCodeAdded):
        (WebInspector.BreakpointManager.prototype._uiSourceCodeFormatted):
        (WebInspector.BreakpointManager.prototype._uiSourceCodeRemoved):
        * inspector/front-end/ScriptsPanel.js:
        (WebInspector.ScriptsPanel.prototype._addUISourceCode):
        (WebInspector.ScriptsPanel.prototype._revealExecutionLine):
        (WebInspector.ScriptsPanel.prototype._toggleFormatSource):
        * inspector/front-end/UISourceCode.js:
        (WebInspector.UISourceCode.prototype._fireContentAvailable):
        (WebInspector.UISourceCode.prototype.setFormatted.formattedChanged):
        (WebInspector.UISourceCode.prototype.setFormatted.didGetContent):
        (WebInspector.UISourceCode.prototype.setFormatted):

2012-10-30  Yury Semikhatsky  <yurys@chromium.org>

        Web Inspector: Output code evaluated in the console the same as console.log
        https://bugs.webkit.org/show_bug.cgi?id=100695

        Reviewed by Pavel Feldman.

        Added an option to return object preview from evaluation commands in the protocol.
        The option is used to generate preview for console eval results.

        * inspector/InjectedScript.cpp:
        (WebCore::InjectedScript::evaluate):
        (WebCore::InjectedScript::callFunctionOn):
        (WebCore::InjectedScript::evaluateOnCallFrame):
        * inspector/InjectedScript.h:
        (InjectedScript):
        * inspector/InjectedScriptSource.js:
        (.):
        * inspector/Inspector.json:
        * inspector/InspectorDebuggerAgent.cpp:
        (WebCore::InspectorDebuggerAgent::evaluateOnCallFrame):
        * inspector/InspectorDebuggerAgent.h:
        (InspectorDebuggerAgent):
        * inspector/InspectorRuntimeAgent.cpp:
        (WebCore::InspectorRuntimeAgent::evaluate):
        (WebCore::InspectorRuntimeAgent::callFunctionOn):
        * inspector/InspectorRuntimeAgent.h:
        (InspectorRuntimeAgent):
        * inspector/front-end/ConsoleMessage.js:
        (WebInspector.ConsoleMessageImpl.prototype.useArrayPreviewInFormatter):
        (WebInspector.ConsoleMessageImpl.prototype._formatParameterAsArray):
        * inspector/front-end/ConsoleView.js:
        (WebInspector.ConsoleCommandResult.prototype.useArrayPreviewInFormatter):
        * inspector/front-end/DebuggerModel.js:
        (WebInspector.DebuggerModel.prototype.evaluateOnSelectedCallFrame):
        (WebInspector.DebuggerModel.CallFrame.prototype.evaluate):
        * inspector/front-end/ExtensionServer.js:
        (WebInspector.ExtensionServer.prototype.evaluate):
        * inspector/front-end/JavaScriptSourceFrame.js:
        (WebInspector.JavaScriptSourceFrame.prototype._resolveObjectForPopover):
        * inspector/front-end/RemoteObject.js:
        (WebInspector.RemoteObject.prototype.):
        (WebInspector.RemoteObject.prototype.callFunction):
        (WebInspector.RemoteObject.prototype.callFunctionJSON):
        * inspector/front-end/RuntimeModel.js:
        (WebInspector.RuntimeModel.prototype.evaluate):
        (WebInspector.RuntimeModel.prototype.evaluated):
        * inspector/front-end/WatchExpressionsSidebarPane.js:
        (WebInspector.WatchExpressionsSection.prototype.update):

2012-11-01  Vsevolod Vlasov  <vsevik@chromium.org>

        Web Inspector: Remove obsolete code from JavaScriptSourceFrame
        https://bugs.webkit.org/show_bug.cgi?id=100594

        Reviewed by Yury Semikhatsky.

        Removed obsolete WorkingCopyCommitted listener.
        Removed redundant code that removes breakpoints from _innerSetContent.

        * inspector/front-end/JavaScriptSourceFrame.js:
        (WebInspector.JavaScriptSourceFrame):
        (WebInspector.JavaScriptSourceFrame.prototype._innerSetContent):

2012-11-01  Andreas Kling  <kling@webkit.org>

        Update average StylePropertySet size estimation.
        <http://webkit.org/b/100940>

        Reviewed by Antti Koivisto.

        Use sizeForImmutableStylePropertySetWithPropertyCount(2) as the average StylePropertySet
        size to keep it in sync with the changed object memory layout.

        * css/StylePropertySet.cpp:
        (WebCore::sizeForImmutableStylePropertySetWithPropertyCount):
        (WebCore::StylePropertySet::createImmutable):
        (WebCore::StylePropertySet::averageSizeInBytes):
        (WebCore::StylePropertySet::reportMemoryUsage):


2012-11-01  Kondapally Kalyan  <kalyan.kondapally@intel.com>

        [EFL][Qt][AC] Remove an unnecessary connection to X-Server.
        https://bugs.webkit.org/show_bug.cgi?id=100628.

        Reviewed by Kenneth Rohde Christiansen.

        With Changset: https://bugs.webkit.org/show_bug.cgi?id=100523
        GraphicsSurfacePrivate should always use the Display returned by offscreenwindow.
        However, in GraphicsSurfacePrivate constructor we call XOpenDisplay before asking
        display from offscreenwindow.
        This patch removes unnecessary call to XOpenDisplay made in GraphicsSurfacePrivate.

        * platform/graphics/surfaces/qt/GraphicsSurfaceGLX.cpp:
        (WebCore::GraphicsSurfacePrivate::GraphicsSurfacePrivate):

2012-11-01  Mihnea Ovidenie  <mihnea@adobe.com>

        [CSSRegions]Former auto-height regions should not ignore their defined height
        https://bugs.webkit.org/show_bug.cgi?id=100749

        Reviewed by Julien Chaffraix.

        When a region with height auto has its height defined, we should also clear the override logical content height.
        Otherwise, the region will use the wrong height when laying out content from the associated render flow thread.

        Test: fast/regions/autoheight-definedheight-changenotdetected.html

        * rendering/RenderRegion.cpp:
        (WebCore::RenderRegion::updateRegionHasAutoLogicalHeightFlag):

2012-11-01  Yury Semikhatsky  <yurys@chromium.org>

        Memory instrumentation: do not report memory occupied by RenderObjects referenced from CSSImageGeneratorValue
        https://bugs.webkit.org/show_bug.cgi?id=100934

        Reviewed by Alexander Pavlov.

        * css/CSSImageGeneratorValue.cpp:
        (WTF): Skip rederences to RenderObjects from CSSImageGeneratorValue when collecting
        memory usage data.

2012-11-01  Kihong Kwon  <kihong.kwon@samsung.com>

        Add DeviceController base-class to remove duplication of DeviceXXXControler
        https://bugs.webkit.org/show_bug.cgi?id=96894

        Reviewed by Hajime Morita.

        Add DeviceController which is extracted from DeviceOrientationController to remove duplication.
        And soon-to-be-added DeviceMotionController and ProximityController.

        Covered by existing tests.

        * CMakeLists.txt:
        * GNUmakefile.list.am:
        * Target.pri:
        * WebCore.gypi:
        * WebCore.vcproj/WebCore.vcproj:
        * WebCore.xcodeproj/project.pbxproj:
        * dom/DeviceOrientationClient.h:
        * dom/DeviceOrientationController.cpp:
        Remove member functions to move to DeviceController.
        - addListener(), removeListener(), removeAllListeners(), isActive()
        (WebCore::DeviceOrientationController::DeviceOrientationController):
        (WebCore::DeviceOrientationController::didChangeDeviceOrientation):
        (WebCore::DeviceOrientationController::client):
        (WebCore::DeviceOrientationController::hasLastData):
        (WebCore::DeviceOrientationController::getLastEvent):
        (WebCore::DeviceOrientationController::from):
        (WebCore):
        * dom/DeviceOrientationController.h:
        (WebCore):
        (WebCore::DeviceOrientationController::~DeviceOrientationController):
        (DeviceOrientationController):
        * dom/Document.cpp:
        Remove suspendEventsForAllListeners() and resumeEventsForAllListeners() function calls.
        These calls can be made by checking activeDOMObjectsAreSuspended() and activeDOMObjectsAreStopped() before dispatchEvent.
        (WebCore::Document::suspendActiveDOMObjects):
        (WebCore::Document::resumeActiveDOMObjects):
        * loader/EmptyClients.h:
        (EmptyDeviceClient):
        (WebCore::EmptyDeviceClient::startUpdating):
        (WebCore::EmptyDeviceClient::stopUpdating):
        (WebCore):
        * page/DOMWindow.cpp:
        (WebCore::DOMWindow::addEventListener):
        (WebCore::DOMWindow::removeEventListener):
        (WebCore::DOMWindow::removeAllEventListeners):
        * page/DeviceClient.h: Added.
        (WebCore):
        (DeviceClient):
        (WebCore::DeviceClient::~DeviceClient):
        * page/DeviceController.cpp: Added.
        DeviceController has extracted functions from DeviceOrientationController and DeviceMotionController.
        - addDeviceEventListener(), removeDeviceEventlistener(), removeAllDeviceEventListeners(), dispatchDeviceEvent()
        All kind of device event controller which has DeviceClient can be inherited from DeviceController.
        (WebCore):
        (WebCore::DeviceController::DeviceController):
        (WebCore::DeviceController::addDeviceEventListener):
        (WebCore::DeviceController::removeDeviceEventListener):
        (WebCore::DeviceController::removeAllDeviceEventListeners):
        (WebCore::DeviceController::dispatchDeviceEvent):
        (WebCore::DeviceController::fireDeviceEvent):
        * page/DeviceController.h: Added.
        (WebCore):
        (DeviceController):
        (WebCore::DeviceController::~DeviceController):
        (WebCore::DeviceController::isActive):
        (WebCore::DeviceController::client):
        (WebCore::DeviceController::hasLastData):
        (WebCore::DeviceController::getLastEvent):

2012-11-01  Yury Semikhatsky  <yurys@chromium.org>

        Memory instrumentation: report memory occupied by ResourceRequest instead of its base ResourceRequestBase
        https://bugs.webkit.org/show_bug.cgi?id=100497

        Reviewed by Alexander Pavlov.

        Added memory reporting method to chromium implementation of ResourceRequest.

        * platform/network/ResourceRequestBase.cpp:
        (WebCore::ResourceRequestBase::reportMemoryUsageBase): Renamed reportMemoryUsage
        on ResourceRequestBase to reportMemoryUsageBase and made it protected. I'd
        rather make ResourceRequestBase::reportMemoryUsage virtual and override it
        in the descendant but ResourceRequestBase doesn't have any virtual methods
        and shouldn't be used directly(ResourceRequest should be used instead).
        * platform/network/ResourceRequestBase.h:
        (ResourceRequestBase):
        * platform/network/chromium/ResourceRequest.cpp:
        (WebCore::ResourceRequest::reportMemoryUsage):
        (WebCore):
        * platform/network/chromium/ResourceRequest.h:
        (ResourceRequest):

2012-11-01  Andreas Kling  <kling@webkit.org>

        Pack immutable StylePropertySets harder on 64-bit.
        <http://webkit.org/b/100753>
        <rdar://problem/12599155>

        Reviewed by Antti Koivisto.

        Move away from using CSSProperty as internal storage for immutable StylePropertySets.
        Instead use two arrays, one for property metadata (ID, shorthand ID, !important, ...)
        and one for the CSSValue pointers. This saves 4 bytes per property on 64-bit.

        Old object layout:

            Ref count                   (4 bytes)
            Metadata                    (4 bytes)
            CSSProperty [N]             (16 bytes each)

        New object layout:

            Ref count                   (4 bytes)
            Metadata                    (4 bytes)
            CSSValue* [N]               (8 bytes each)
            StylePropertyMetadata [N]   (4 bytes each)

        901kB progress on Membuster3 (22% overall reduction in StylePropertySet memory.)

        The CSSProperty class sticks around for now, it's still used in mutable StylePropertySets
        and by the StylePropertySet constructors.

        * css/CSSProperty.cpp:
        * css/CSSProperty.h:
        (CSSProperty):
        (WebCore::CSSProperty::CSSProperty):
        (WebCore::CSSProperty::id):
        (WebCore::CSSProperty::shorthandID):
        (WebCore::CSSProperty::isImportant):
        (WebCore::CSSProperty::metadata):

            Break the bitfield from CSSProperty out into a StylePropertyMetadata class (actually a union.)

        * css/StylePropertySet.cpp:
        (WebCore::immutableStylePropertySetSize):

            Updated size calculation for immutable StylePropertySets, 1/4 smaller!

        (WebCore::ImmutableStylePropertySet::ImmutableStylePropertySet):
        (WebCore::ImmutableStylePropertySet::~ImmutableStylePropertySet):
        (WebCore::MutableStylePropertySet::MutableStylePropertySet):
        (WebCore::StylePropertySet::mergeAndOverrideOnConflict):
        (WebCore::StylePropertySet::reportMemoryUsage):
        (WebCore::StylePropertySet::PropertyReference::cssName):
        (WebCore::StylePropertySet::PropertyReference::cssText):
        * css/StylePropertySet.h:
        (WebCore::StylePropertySet::PropertyReference::id):
        (WebCore::StylePropertySet::PropertyReference::shorthandID):
        (WebCore::StylePropertySet::PropertyReference::isImportant):
        (WebCore::StylePropertySet::PropertyReference::isInherited):
        (WebCore::StylePropertySet::PropertyReference::isImplicit):
        (PropertyReference):
        (WebCore::StylePropertySet::PropertyReference::value):
        (WebCore::StylePropertySet::PropertyReference::toCSSProperty):
        (WebCore::StylePropertySet::PropertyReference::propertyMetadata):
        (WebCore::StylePropertySet::PropertyReference::propertyValue):
        (StylePropertySet):
        (ImmutableStylePropertySet):
        (WebCore::StylePropertySet::immutableValueArray):
        (WebCore::StylePropertySet::immutableMetadataArray):

            Refactored internal storage for StylePropertySet.

2012-11-01  Kent Tamura  <tkent@chromium.org>

        Remove unused Locale::parseDateTime
        https://bugs.webkit.org/show_bug.cgi?id=100910

        Reviewed by Kentaro Hara.

        For date/time input types, InputType::convertFromVisibleValue is never
        called. convertFromVisibleValue is called when an inner editable node is
        updated. However input elements don't have such editable nodes if
        ENABLE_INPUT_MULTIPLE_FIELDS_UI is enabled, and a user can't edit the
        inner editable node otherwise because we open date/time pickers when a
        user try to change the field value.

        We had used convertFromVisibleValue for input[type=date] with an old UI.

        No new tests because of no behavior changes.

        * html/BaseDateAndTimeInputType.cpp:
        (WebCore::BaseDateAndTimeInputType::convertFromVisibleValue):
        Remove Locale::parseDateTiem and put ASSERT_NOT_REACHED.

        * platform/text/PlatformLocale.h: Remove parseDateTime.

        * platform/text/LocaleICU.h: Remove parseDateTime and a bogus comment.
        * platform/text/LocaleICU.cpp: Remove parseDateTime.

        * platform/text/LocaleNone.cpp: Remove parseDateTime.

        * platform/text/mac/LocaleMac.h: Remove parseDateTime.
        * platform/text/mac/LocaleMac.mm: Ditto.
        * platform/text/win/LocaleWin.h:
        - Remove parseDateTime, its helpers, and m_baseYear.
        - Remove appendNumber, appendTwoDigitsNumber, appendFourDigitsNumber,
          and formatDate. They don't exist.
        * platform/text/win/LocaleWin.cpp:
        Remove the above functions.
        (WebCore::LocaleWin::LocaleWin): Remove m_baseYear iniitalization.

2012-10-31  Nate Chapin  <japhet@chromium.org>

        Remove some CachedResource::Status's in favor of looking at CachedResource::m_error
        https://bugs.webkit.org/show_bug.cgi?id=100901

        Reviewed by Adam Barth.

        No new tests, refactor only.

        * inspector/InspectorPageAgent.cpp:
        (WebCore::InspectorPageAgent::buildObjectForFrameTree):
        * loader/DocumentThreadableLoader.cpp:
        (WebCore::DocumentThreadableLoader::notifyFinished):
        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::loadInSameDocument):
        * loader/SubresourceLoader.cpp:
        (WebCore::SubresourceLoader::didFail):
        (WebCore::SubresourceLoader::willCancel):
        * loader/cache/CachedResource.cpp:
        (WebCore::CachedResource::stopLoading):
        * loader/cache/CachedResource.h:
        (WebCore::CachedResource::wasCanceled):
        (WebCore::CachedResource::errorOccurred):
        (WebCore::CachedResource::loadFailedOrCanceled):

2012-10-31  Stephen White  <senorblanco@chromium.org>

        Unreviewed, rolling out r133122.
        http://trac.webkit.org/changeset/133122
        https://bugs.webkit.org/show_bug.cgi?id=99083

        Broke Chromium Win, Android, ChromeOS builds

        * platform/graphics/chromium/GraphicsLayerChromium.cpp:
        (WebCore::GraphicsLayerChromium::setContentsOpaque):
        (WebCore::GraphicsLayerChromium::paint):
        * platform/graphics/chromium/OpaqueRectTrackingContentLayerDelegate.cpp:
        (WebCore::OpaqueRectTrackingContentLayerDelegate::paintContents):
        * platform/graphics/chromium/OpaqueRectTrackingContentLayerDelegate.h:
        (OpaqueRectTrackingContentLayerDelegate):

2012-10-31  Takashi Sakamoto  <tasak@google.com>

        [Refactoring] Move initial style setting for ProgressValueElement from attach method to createShadowSubtree method in HTMLProgressElement.
        https://bugs.webkit.org/show_bug.cgi?id=83664

        Reviewed by Hajime Morita.

        The original code updates inline style during attach(). However,
        the attach would be invoked from Element::recalcStyle()'s reattach().
        If updating inline styles during the reattach(), style related flags,
        i.e. childNeedsStyleRecalc, and needsStyleRecalc are cleared after the
        reattach(). So the inline styles are not updated in next
        setNeedsStyleRecalc, because ProgressValueElement has already had
        InlineStyleChange (existingChanegType == InlineStyleChange) and
        markAncestorsWithChildNeedsStyleRecalc is not invoked.

        Test: fast/dom/HTMLProgressElement/progress-bar-set-value.html

        * html/HTMLProgressElement.cpp:
        (WebCore::HTMLProgressElement::attach):
        Copied updateFromElement from didElementStateChange. If removing the
        update, indeterminate-progress-001.html and progress-element.html
        under fast/dom/HTMLProgressElement will fail. We still need attach()
        and updateFromElement. To remove the attach(), need more refactoring,
        i.e. investigating where attach() is invoked from and modifying all
        related codes.
        (WebCore::HTMLProgressElement::createShadowSubtree):
        Initialize m_value by indeterminate-position. The value is default
        value of progress element.

2012-10-31  Hayato Ito  <hayato@chromium.org>

        Make resolveReprojection() defined in ComposedShadowTreeWalker.cpp callable from outside.
        https://bugs.webkit.org/show_bug.cgi?id=100832

        Reviewed by Dimitri Glazkov.

        InsertionPoint.h now defines resolveReprojection() so that it can be called from outside.

        No new tests as no new functionality.

        * dom/ComposedShadowTreeWalker.cpp:
        * html/shadow/InsertionPoint.h:
        (WebCore::shadowOfParentForDistribution):
        (WebCore):
        (WebCore::resolveReprojection):

2012-10-31  Alok Priyadarshi  <alokp@chromium.org>

        [chromium] Pass canPaintLCDText to WebContentLayerClient::paintContents
        https://bugs.webkit.org/show_bug.cgi?id=99083

        Reviewed by James Robinson.

        Use LCD text setting passed to WebContentLayerClient::paintContents instead of turning it off for all composited layers.

        No new tests needed. This patch does not change anything functionally.

        * platform/graphics/chromium/GraphicsLayerChromium.cpp:
        (WebCore::GraphicsLayerChromium::setContentsOpaque):
        (WebCore::GraphicsLayerChromium::paint):
        * platform/graphics/chromium/OpaqueRectTrackingContentLayerDelegate.cpp:
        (WebCore::OpaqueRectTrackingContentLayerDelegate::paintContents):
        * platform/graphics/chromium/OpaqueRectTrackingContentLayerDelegate.h:
        (OpaqueRectTrackingContentLayerDelegate):

2012-10-31  Chris Evans  <cevans@google.com>

        RenderArena has a memory leak and poor efficiency
        https://bugs.webkit.org/show_bug.cgi?id=100893

        Reviewed by Eric Seidel.

        1) Avoid memory leak that persists for the Document lifetime by
        increasing recycled size buckets up to 1024. It was previously 400,
        and sizeof(RenderNamedFlowThread) / sizeof(RenderSVGText) both blew this
        quota. An assert was added to prevent this happening again.

        2) Fix the size of the recyled size bucket array on 64-bit. We only
        need 8 byte granularity on 64-bit, but we had 4.

        3) Try and pass power-of-two sizes to the underlying malloc() call, so
        that we're space efficient. We now take Arena metadata into account.

        4) Double the default RenderArena size allocation to 8192 bytes. Even
        for a render of a trivial text file, 4096 bytes is not enough to prevent
        extra calls into the underlying malloc() for more arena pool.

        * rendering/RenderArena.cpp:
        (WebCore::RenderArena::RenderArena): Adjust arena size so that we pass on the page-sized multiple to the underlying malloc() implementation.
        (WebCore::RenderArena::allocate):
        (WebCore::RenderArena::free): Assert that the allocation size is handled by our recycling buckets.
        * rendering/RenderArena.h:
        (WebCore): Maintain free buckets up to 1024 bytes to avoid memory leak.
        (RenderArena): Double the default allocation size and handle 64-bit systems more efficiently.

2012-10-31  Adam Barth  <abarth@webkit.org>

        [V8] Garbage collection should use opaque roots rather than implicit references
        https://bugs.webkit.org/show_bug.cgi?id=100707

        Reviewed by Kentaro Hara.

        This patch replaces visitDOMWrapper with opaqueRootForGC. The
        former used to inform V8 of implicit relationships between wrapper
        objects on a per-wrapper basis. That meant that we needed to know which
        DOMDataStore a given wrapper was in during garbage collection.

        After this patch, we now use object groups rather than implicit
        references to inform V8 of these relationships. That has two benefits:

        1) We no longer need to know which DOMDataStore a wrapper belongs
           because we don't need to find the exact source wrapper for the
           implicit connection.

        2) We can now handle more complicated implicit relationships, for
           example when some of the intervening objects haven't had their
           JavaScript wrappers created yet.

        This patch also unlocks to paths of future development:
        A) Fixing the remaining failures in fast/dom/gc-9.html
        B) Enumerating DOM wrappers entirely from V8 rather than from the
           DOMWrapperMaps (so that we can move more object towards using
           IntrusiveDOMWrapperMaps, which aren't enumerable from WebCore).

        * bindings/scripts/CodeGeneratorV8.pm:
        (NeedsCustomOpaqueRootForGC):
        (GenerateOpaqueRootForGC):
        (GenerateHeader):
        (GenerateImplementation):
        * bindings/v8/V8GCController.cpp:
        (ImplicitConnection):
        (WebCore::ImplicitConnection::ImplicitConnection):
        (WebCore::ImplicitConnection::root):
        (WebCore::ImplicitConnection::wrapper):
        (WebCore):
        (WebCore::operator<):
        (WrapperGrouper):
        (WebCore::WrapperGrouper::WrapperGrouper):
        (WebCore::WrapperGrouper::addToGroup):
        (WebCore::WrapperGrouper::keepAlive):
        (WebCore::WrapperGrouper::apply):
        (WebCore::ObjectVisitor::ObjectVisitor):
        (WebCore::ObjectVisitor::visitDOMWrapper):
        (ObjectVisitor):
        (WebCore::V8GCController::opaqueRootForGC):
        (WebCore::NodeVisitor::NodeVisitor):
        (WebCore::NodeVisitor::visitNodeWrapper):
        (NodeVisitor):
        (WebCore::V8GCController::majorGCPrologue):
        * bindings/v8/V8GCController.h:
        (WebCore):
        (V8GCController):
        * bindings/v8/WrapperTypeInfo.h:
        (WebCore):
        (WebCore::WrapperTypeInfo::opaqueRootForGC):
        (WrapperTypeInfo):
        * bindings/v8/custom/V8NodeListCustom.cpp:
        (WebCore::V8NodeList::opaqueRootForGC):
        * bindings/v8/custom/V8SpeechRecognitionResultCustom.cpp:
        (WebCore::V8SpeechRecognitionResult::opaqueRootForGC):

2012-10-31  Stephen White  <senorblanco@chromium.org>

        Unreviewed, rolling out r133107.
        http://trac.webkit.org/changeset/133107
        https://bugs.webkit.org/show_bug.cgi?id=100425

        Broke compile on Chromium Win.

        * Modules/indexeddb/IDBCallbacks.h:
        (IDBCallbacks):
        * Modules/indexeddb/IDBDatabase.cpp:
        (WebCore::IDBDatabase::objectStoreNames):
        (WebCore::IDBDatabase::createObjectStore):
        (WebCore::IDBDatabase::deleteObjectStore):
        (WebCore::IDBDatabase::transaction):
        * Modules/indexeddb/IDBDatabaseBackendImpl.cpp:
        (WebCore::IDBDatabaseBackendImpl::metadata):
        (WebCore::IDBDatabaseBackendImpl::createObjectStore):
        (WebCore::IDBDatabaseBackendImpl::objectStore):
        (WebCore::IDBDatabaseBackendImpl::deleteObjectStore):
        (WebCore::IDBDatabaseBackendImpl::transaction):
        (WebCore::IDBDatabaseBackendImpl::loadObjectStores):
        (WebCore::IDBDatabaseBackendImpl::removeObjectStoreFromMap):
        (WebCore::IDBDatabaseBackendImpl::addObjectStoreToMap):
        * Modules/indexeddb/IDBDatabaseBackendImpl.h:
        (IDBDatabaseBackendImpl):
        * Modules/indexeddb/IDBDatabaseBackendInterface.h:
        (IDBDatabaseBackendInterface):
        * Modules/indexeddb/IDBFactory.cpp:
        * Modules/indexeddb/IDBFactory.h:
        * Modules/indexeddb/IDBIndex.h:
        (WebCore::IDBIndex::openKeyCursor):
        * Modules/indexeddb/IDBIndexBackendInterface.h:
        * Modules/indexeddb/IDBKeyPath.cpp:
        * Modules/indexeddb/IDBMetadata.h:
        (WebCore):
        (IDBDatabaseMetadata):
        (WebCore::IDBDatabaseMetadata::IDBDatabaseMetadata):
        (IDBObjectStoreMetadata):
        (WebCore::IDBIndexMetadata::IDBIndexMetadata):
        (IDBIndexMetadata):
        * Modules/indexeddb/IDBObjectStore.cpp:
        (WebCore::IDBObjectStore::indexNames):
        (WebCore::IDBObjectStore::put):
        (WebCore::IDBObjectStore::createIndex):
        (WebCore::IDBObjectStore::index):
        (WebCore::IDBObjectStore::deleteIndex):
        * Modules/indexeddb/IDBObjectStoreBackendImpl.cpp:
        (WebCore::IDBObjectStoreBackendImpl::putWithIndexKeys):
        (WebCore):
        (WebCore::makeIndexWriters):
        (WebCore::IDBObjectStoreBackendImpl::setIndexKeys):
        (WebCore::IDBObjectStoreBackendImpl::setIndexesReady):
        (WebCore::IDBObjectStoreBackendImpl::setIndexesReadyInternal):
        (WebCore::IDBObjectStoreBackendImpl::putInternal):
        (WebCore::IDBObjectStoreBackendImpl::deleteInternal):
        (WebCore::IDBObjectStoreBackendImpl::createIndex):
        (WebCore::IDBObjectStoreBackendImpl::index):
        (WebCore::IDBObjectStoreBackendImpl::deleteIndex):
        (WebCore::IDBObjectStoreBackendImpl::loadIndexes):
        (WebCore::IDBObjectStoreBackendImpl::removeIndexFromMap):
        (WebCore::IDBObjectStoreBackendImpl::addIndexToMap):
        * Modules/indexeddb/IDBObjectStoreBackendImpl.h:
        (IDBObjectStoreBackendImpl):
        * Modules/indexeddb/IDBObjectStoreBackendInterface.h:
        * Modules/indexeddb/IDBOpenDBRequest.cpp:
        (WebCore::IDBOpenDBRequest::onUpgradeNeeded):
        * Modules/indexeddb/IDBRequest.cpp:
        (WebCore::IDBRequest::onSuccess):
        (WebCore::IDBRequest::uncaughtExceptionInEventHandler):
        * Modules/indexeddb/IDBTransaction.cpp:
        (WebCore::IDBTransaction::create):
        (WebCore::IDBTransaction::IDBTransaction):
        (WebCore::IDBTransaction::objectStore):
        * Modules/indexeddb/IDBTransaction.h:
        (IDBTransaction):
        * Modules/indexeddb/IDBTransactionBackendImpl.cpp:
        (WebCore::IDBTransactionBackendImpl::create):
        (WebCore::IDBTransactionBackendImpl::IDBTransactionBackendImpl):
        (WebCore::IDBTransactionBackendImpl::objectStore):
        (WebCore::IDBTransactionBackendImpl::scheduleTask):
        * Modules/indexeddb/IDBTransactionBackendImpl.h:
        (IDBTransactionBackendImpl):
        * Modules/indexeddb/IDBTransactionBackendInterface.h:
        * Modules/indexeddb/IDBTransactionCoordinator.h:

2012-10-31  Alec Flett  <alecflett@chromium.org>

        IndexedDB: add methods to support id-based backend APIs
        https://bugs.webkit.org/show_bug.cgi?id=100425

        Reviewed by Tony Chang.

        First half of refactor involves adding a number of methods that
        are int64_t-based rather than String-based. As a part of this, the
        IDB*Metadata structs and the backend objectStore/index maps all
        use int64_t as keys, rather than String.

        In addition, there were a number of cleanups that came out of the
        refactor:

        - The list of object stores active in a transaction is now
          maintained by the frontend IDBTransaction rather than the backend
          IDBTransactionBackendImpl. This also had a simplifying rippling
          effect through other call signatures.

        - I was able to remove an apparently old FIXME from
          IDBTransactionBackendImpl::objectStore and replace it with an ASSERT.

        - IDBObjectStoreBackendImpl's IndexWriter class got a little
          simpler since the id is now easily available in the
          IDBIndexMetadata.

        - A number of methods got simpler in their int64_t versions,
          specifically dropping a number of ExceptionCodes.

        There is also some glue code
        (getIndexId/getIndexIds/getObjectStoreId) that will go away with
        the 2nd half of this: https://bugs.webkit.org/show_bug.cgi?id=100425

        No new tests, no new functionality as this is just a refactor.

        * Modules/indexeddb/IDBDatabase.cpp:
        (WebCore::IDBDatabase::objectStoreNames):
        (WebCore::IDBDatabase::createObjectStore):
        (WebCore::IDBDatabase::deleteObjectStore):
        (WebCore::IDBDatabase::transaction):
        * Modules/indexeddb/IDBDatabaseBackendImpl.cpp:
        (WebCore::IDBDatabaseBackendImpl::metadata):
        (WebCore::IDBDatabaseBackendImpl::createObjectStore):
        (WebCore::IDBDatabaseBackendImpl::objectStore):
        (WebCore::IDBDatabaseBackendImpl::getObjectStoreId):
        (WebCore):
        (WebCore::IDBDatabaseBackendImpl::deleteObjectStore):
        (WebCore::IDBDatabaseBackendImpl::transaction):
        (WebCore::IDBDatabaseBackendImpl::loadObjectStores):
        (WebCore::IDBDatabaseBackendImpl::removeObjectStoreFromMap):
        (WebCore::IDBDatabaseBackendImpl::addObjectStoreToMap):
        * Modules/indexeddb/IDBDatabaseBackendImpl.h:
        (WebCore::IDBDatabaseBackendImpl::deleteObjectStore):
        (IDBDatabaseBackendImpl):
        * Modules/indexeddb/IDBDatabaseBackendInterface.h:
        (IDBDatabaseBackendInterface):
        * Modules/indexeddb/IDBIndex.h:
        (WebCore::IDBIndex::id):
        (WebCore::IDBIndex::openKeyCursor):
        * Modules/indexeddb/IDBIndexBackendInterface.h:
        * Modules/indexeddb/IDBMetadata.h:
        (WebCore::IDBIndexMetadata::IDBIndexMetadata):
        (IDBIndexMetadata):
        (IDBObjectStoreMetadata):
        (WebCore::IDBObjectStoreMetadata::containsIndex):
        (IDBDatabaseMetadata):
        (WebCore::IDBDatabaseMetadata::IDBDatabaseMetadata):
        (WebCore::IDBDatabaseMetadata::containsObjectStore):
        * Modules/indexeddb/IDBObjectStore.cpp:
        (WebCore::IDBObjectStore::indexNames):
        (WebCore::IDBObjectStore::put):
        (WebCore::IDBObjectStore::createIndex):
        (WebCore::IDBObjectStore::index):
        (WebCore::IDBObjectStore::deleteIndex):
        * Modules/indexeddb/IDBObjectStoreBackendImpl.cpp:
        (WebCore::IDBObjectStoreBackendImpl::put):
        (WebCore::IDBObjectStoreBackendImpl::putWithIndexKeys):
        (WebCore):
        (WebCore::makeIndexWriters):
        (WebCore::IDBObjectStoreBackendImpl::setIndexKeys):
        (WebCore::IDBObjectStoreBackendImpl::setIndexesReady):
        (WebCore::IDBObjectStoreBackendImpl::setIndexesReadyInternal):
        (WebCore::IDBObjectStoreBackendImpl::putInternal):
        (WebCore::IDBObjectStoreBackendImpl::deleteInternal):
        (WebCore::IDBObjectStoreBackendImpl::createIndex):
        (WebCore::IDBObjectStoreBackendImpl::index):
        (WebCore::IDBObjectStoreBackendImpl::getIndexId):
        (WebCore::IDBObjectStoreBackendImpl::getIndexIds):
        (WebCore::IDBObjectStoreBackendImpl::deleteIndex):
        (WebCore::IDBObjectStoreBackendImpl::loadIndexes):
        (WebCore::IDBObjectStoreBackendImpl::removeIndexFromMap):
        (WebCore::IDBObjectStoreBackendImpl::addIndexToMap):
        * Modules/indexeddb/IDBObjectStoreBackendImpl.h:
        (IDBObjectStoreBackendImpl):
        * Modules/indexeddb/IDBObjectStoreBackendInterface.h:
        * Modules/indexeddb/IDBOpenDBRequest.cpp:
        (WebCore::IDBOpenDBRequest::onUpgradeNeeded):
        * Modules/indexeddb/IDBRequest.cpp:
        (WebCore::IDBRequest::onSuccess):
        (WebCore::IDBRequest::uncaughtExceptionInEventHandler):
        * Modules/indexeddb/IDBTransaction.cpp:
        (WebCore::IDBTransaction::create):
        (WebCore::IDBTransaction::IDBTransaction):
        (WebCore::IDBTransaction::objectStore):
        * Modules/indexeddb/IDBTransaction.h:
        (IDBTransaction):
        * Modules/indexeddb/IDBTransactionBackendImpl.cpp:
        (WebCore::IDBTransactionBackendImpl::create):
        (WebCore::IDBTransactionBackendImpl::IDBTransactionBackendImpl):
        (WebCore::IDBTransactionBackendImpl::objectStore):
        (WebCore):
        (WebCore::IDBTransactionBackendImpl::scheduleTask):
        * Modules/indexeddb/IDBTransactionBackendImpl.h:
        (IDBTransactionBackendImpl):
        * Modules/indexeddb/IDBTransactionBackendInterface.h:

2012-10-30  Mark Lam  <mark.lam@apple.com>

        A JSC printf (support for %J+s and %b).
        https://bugs.webkit.org/show_bug.cgi?id=100566.

        Reviewed by Michael Saboff.

        Added forwarding header for VMInspector.h.

        No new tests needed for this.

        * ForwardingHeaders/interpreter/VMInspector.h: Added.

2012-10-31  Chris Rogers  <crogers@google.com>

        Implement optional arguments in AudioBufferSourceNode start() method
        https://bugs.webkit.org/show_bug.cgi?id=100894

        Reviewed by Kenneth Russell.

        The start() method should be able to take 1, 2, or 3 arguments, optionally supporting
        offset and duration.  Currently, only 1 and 3 arguments are supported.

        Test: webaudio/audiobuffersource-start.html

        * Modules/webaudio/AudioBufferSourceNode.cpp:
        (WebCore::AudioBufferSourceNode::renderFromBuffer):
        (WebCore::AudioBufferSourceNode::startGrain):
        (WebCore):
        * Modules/webaudio/AudioBufferSourceNode.h:
        (AudioBufferSourceNode):
        * Modules/webaudio/AudioBufferSourceNode.idl:

2012-10-31  Mike West  <mkwst@chromium.org>

        Implement the canonical "Content-Security-Policy" header.
        https://bugs.webkit.org/show_bug.cgi?id=96765

        Reviewed by Adam Barth.

        The CSP 1.0 specification defines the "Content-Security-Policy" header
        as the canonical mechanism of defining a resource's security policy. Up
        through this patch, we've implemented the functionality behind a prefix
        in order to ensure compatibility with the standard once it's released as
        a recommendation. Both the specification and WebKit's implementation are
        far enough along in that process that it makes sense to support the
        unprefixed header for sites that wish to opt-in to CSP 1.0.

        As discussed on public-webappsec[1], we'll keep the experimental 1.1
        features behind the prefixed header ('X-WebKit-CSP') until that standard
        is far enough along to justify moving them out to the canonical header.

        This patch defines the 'Content-Security-Policy' header for all ports,
        just as the 'X-WebKit-CSP' header is currently supported on all ports.
        Ports that have not opted-in to the CSP_NEXT flag will see exactly the
        same behavior with both headers. Ports that have opted-in will see much
        of CSP 1.1's current definition on the prefixed header, and CSP 1.0 on
        the canonical header.

        The functionality in this change is covered by the changes made to
        existing tests. No expectations changed, only the headers that are sent.

        * dom/Document.cpp:
        (WebCore::Document::processHttpEquiv):
            Add canonical header support to 'meta' element definitions.
        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::didBeginDocument):
            Add canonical header support to FrameLoader.
        * page/ContentSecurityPolicy.cpp:
        (WebCore::CSPDirectiveList::headerType):
            The ContentSecurityPolicy::HeaderType enum now has four values:
            prefixed/report-only, unprefixed/report-only, prefixed/enforce, and
            unprefixed/enforce. Instead of creating logic to output the proper
            type based on internal flags, CSPDirectiveList now saves the value
            provided at creation time, and returns it via this method.
        (CSPDirectiveList):
        (WebCore::CSPDirectiveList::CSPDirectiveList):
            The constructor now accepts a type, which is stored on the object.
            It also stores a new internal variable, 'm_experimental', which
            defines whether or not experimental features ought to be available.
            These features are still locked behind the CSP_NEXT flag, but that
            might not be the case forever.
        (WebCore::CSPDirectiveList::create):
            The static constructor wrapper now passes the type into the real
            constructor, which also now handles setting its internal variables.
        (WebCore::CSPDirectiveList::parse):
            'parse()' is given the header, so it makes sense to store it here as
            well, rather than in the create wrapper.
        (WebCore::CSPDirectiveList::addDirective):
            1.1 directives remain locked behind CSP_NEXT, but now also require
            that 'm_experimental' is set, signaling usage of the prefixed header
            and an implicit opt-in to 1.1.
        * page/ContentSecurityPolicy.h:
            Added two new types to the HeaderTypes enum: PrefixedReportOnly, and
            PrefixedEnforcePolicy. These map to 'X-WebKitCSP-Report-Only' and
            'X-WebKit-CSP', respectively.

2012-10-31  Roger Fong  <roger_fong@apple.com>

        Change PopupMenu positioning on Windows such that behaviour on multiple monitors matches Windows standards.
        https://bugs.webkit.org/show_bug.cgi?id=100317

        Reviewed by Sam Weinig.

        The existing code determines which screen the popup menu "belongs" to by determining which screen the owning application's hwnd belongs to,
        where ownership is determined by how much of the hwnd is on which screen.
        To match what most Windows applications do, the owning screen should be whichever screen the drop down button belongs to.
        To determine which screen an element belongs to in Windows we need to pass in an hwnd for that element.
        However, since the drop down button is something that WebKit renders there is no hwnd.

        To remedy this issue, we can temporarily move the popup menu's hwnd to match the position and size of the button,
        determine the correct screen, and then eventually move it back to the correct final position after the rest of 
        the calculations have been completed. This is all done in the same function call so no rendering of the popup menu occurs
        between the temporary and final positionings.

        There's not really a good way of testing popup menus except manually, they're separate hwnds created outside of the WebView.

        * platform/win/PopupMenuWin.cpp:
        (WebCore::monitorFromHwnd):
        (WebCore):
        (WebCore::PopupMenuWin::show):
        (WebCore::PopupMenuWin::calculatePositionAndSize):

2012-10-31  Thiago Marcos P. Santos  <thiago.santos@intel.com>

        Added viewport at-rule to the CSS parser and tokenizer
        https://bugs.webkit.org/show_bug.cgi?id=95961

        Reviewed by Kenneth Rohde Christiansen.

        Add tokens and grammar rules to parse @-webkit-viewport blocks. Also add
        the newly parsed rule to the rule list.

        This parser now implements the following part of the CSS Device Adaptation
        specification: http://www.w3.org/TR/css-device-adapt/#syntax

        Test: css3/device-adapt/viewport-at-rule-parsing.html

        * CMakeLists.txt:
        * GNUmakefile.list.am:
        * Target.pri:
        * WebCore.gypi:
        * WebCore.vcproj/WebCore.vcproj:
        * WebCore.xcodeproj/project.pbxproj:
        * css/CSSGrammar.y.in:
        * css/CSSParser.cpp:
        (WebCore::CSSParser::CSSParser):
        (WebCore::CSSParser::detectAtToken):
        (WebCore):
        (WebCore::CSSParser::createViewportRule):
        * css/CSSParser.h:
        (CSSParser):
        (WebCore::CSSParser::markViewportRuleBodyStart):
        (WebCore::CSSParser::markViewportRuleBodyEnd):
        (WebCore::CSSParser::inViewport):

            These methods are needed by the next patch validating the properties.
            Some viewport properties are common to other rules but have different
            semantics, and accepts different keywords. The validation needs to be
            done in a different code path.

        * css/CSSPropertySourceData.h:
        * css/CSSRule.cpp:
        (WebCore):
        (WebCore::CSSRule::cssText):
        (WebCore::CSSRule::destroy):
        (WebCore::CSSRule::reattach):
        (WebCore::CSSRule::reportMemoryUsage):
        * css/CSSRule.h:
        (CSSRule):
        (WebCore::CSSRule::isViewportRule):
        * css/StyleRule.cpp:
        (WebCore::StyleRuleBase::reportMemoryUsage):
        (WebCore::StyleRuleBase::destroy):
        (WebCore::StyleRuleBase::copy):
        (WebCore::StyleRuleBase::createCSSOMWrapper):
        (WebCore):
        (WebCore::StyleRuleViewport::StyleRuleViewport):
        (WebCore::StyleRuleViewport::~StyleRuleViewport):
        (WebCore::StyleRuleViewport::mutableProperties):
        (WebCore::StyleRuleViewport::setProperties):
        (WebCore::StyleRuleViewport::reportDescendantMemoryUsage):
        * css/StyleRule.h:
        (StyleRuleBase):
        (WebCore::StyleRuleBase::isViewportRule):
        (WebCore):
        (StyleRuleViewport):
        (WebCore::StyleRuleViewport::create):
        (WebCore::StyleRuleViewport::properties):
        (WebCore::StyleRuleViewport::copy):
        * css/WebKitCSSViewportRule.cpp: Added.
        (WebCore):
        (WebCore::WebKitCSSViewportRule::WebKitCSSViewportRule):
        (WebCore::WebKitCSSViewportRule::~WebKitCSSViewportRule):
        (WebCore::WebKitCSSViewportRule::style):
        (WebCore::WebKitCSSViewportRule::cssText):
        (WebCore::WebKitCSSViewportRule::reattach):
        (WebCore::WebKitCSSViewportRule::reportDescendantMemoryUsage):
        * css/WebKitCSSViewportRule.h: Added.
        (WebCore):

2012-10-31  Max Vujovic  <mvujovic@adobe.com>

        [CSS Shaders] Validate types of built-in uniforms
        https://bugs.webkit.org/show_bug.cgi?id=98974

        Reviewed by Dean Jackson.

        Reject shaders which define built-in uniforms with the wrong type. For example, we reject a
        shader with the GLSL code "uniform float u_textureSize;" because u_textureSize should be a
        vec2, not a float.

        Relevant Spec Section:
        https://dvcs.w3.org/hg/FXTF/raw-file/tip/filters/index.html#shader-uniform-variables

        Test: css3/filters/custom/invalid-custom-filter-uniform-types.html

        * platform/graphics/filters/CustomFilterValidatedProgram.cpp:
        (WebCore):
        (WebCore::builtInUniformNameToTypeMap):
        (WebCore::validateSymbols):

2012-10-31  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r133044.
        http://trac.webkit.org/changeset/133044
        https://bugs.webkit.org/show_bug.cgi?id=100888

        Hits an ASSERT in the isolatedWorlds tests (Requested by
        abarth on #webkit).

        * bindings/scripts/CodeGeneratorV8.pm:
        (NeedsToVisitDOMWrapper):
        (GenerateVisitDOMWrapper):
        (GenerateHeader):
        (GenerateImplementation):
        * bindings/v8/V8GCController.cpp:
        (WebCore::ObjectVisitor::ObjectVisitor):
        (WebCore::ObjectVisitor::visitDOMWrapper):
        (ObjectVisitor):
        (WebCore::rootForGC):
        (ImplicitConnection):
        (WebCore::ImplicitConnection::ImplicitConnection):
        (WebCore::ImplicitConnection::root):
        (WebCore::ImplicitConnection::wrapper):
        (WebCore):
        (WebCore::operator<):
        (WebCore::NodeVisitor::NodeVisitor):
        (WebCore::NodeVisitor::visitNodeWrapper):
        (NodeVisitor):
        (WebCore::NodeVisitor::applyGrouping):
        (WebCore::V8GCController::majorGCPrologue):
        * bindings/v8/V8GCController.h:
        (V8GCController):
        * bindings/v8/WrapperTypeInfo.h:
        (WebCore):
        (WebCore::WrapperTypeInfo::visitDOMWrapper):
        (WrapperTypeInfo):
        * bindings/v8/custom/V8NodeListCustom.cpp:
        (WebCore::V8NodeList::visitDOMWrapper):
        * bindings/v8/custom/V8SpeechRecognitionResultCustom.cpp:
        (WebCore::V8SpeechRecognitionResult::visitDOMWrapper):

2012-10-31  Philip Rogers  <pdr@google.com>

        Cache animationMode() in SVG animations.
        https://bugs.webkit.org/show_bug.cgi?id=99694

        Reviewed by Eric Seidel.

        This patch caches animationMode() which accounted for 25% of the CPU time of a simple
        animation benchmark! This is the 3rd patch for WK99694.

        Background: SVGAnimationElement contains most of the shared animation logic for <animate>,
        <set>, <animateColor>, <animateTransform>, and <animateMotion>. <animateMotion> is the only
        animation element that can depend on other elements in the page. For example:
        <path id="mypath" d="M0 0 L 100 100Z"/> <!-- note, can be animated! -->
        <rect x="0" y="0" width="100" height="100" fill="green">
            <animateMotion dur="6s" repeatCount="indefinite">
                <mpath xlink:href="#mypath"/>
            </animateMotion>
        </rect>
        See: http://www.w3.org/TR/SVG/single-page.html#animate-AnimateMotionElement

        animationMode depends on several properties of an animation element: the set tag, whether
        the animation has a path, and the "values", "to", and "by" attributes. animationMode() was
        a hot function for two reasons:
        1) hasAttribute(SVGNames::valuesAttr) is expensive because we are unable to use
           fastHasAttribute. This is cacheable by simply calculating the animationMode when the
           "values" attribute changes.
        2) In the <animateMotion> case, determining if a path is empty or changed is expensive.
           AnimateMotion can have a path attribute, or it can have <mpath> children that reference
           a (possibly non-existent) <path> element elsewhere in the page. Before this patch we did
           this path lookup on every animation loop in case something changed. After this patch we
           only update AnimateMotion's path when it changes.

        A previous patch, http://trac.webkit.org/changeset/132847, laid the groundwork for tracking
        <path> changes in <mpath>. This patch adds <mpath> to our resource tracking infrastructure
        to track when target <path>s change, instead of looking this up every time.

        This refactoring is covered by existing tests.
        svg/animations/mozilla/animateMotion-mpath-targetChange-1.svg fails after this patch
        because our element dependency tracking has a bug with duplicate ids; see WK99893.

        * svg/SVGAnimateMotionElement.cpp:
        (WebCore::SVGAnimateMotionElement::parseAttribute):
        (WebCore::SVGAnimateMotionElement::updateAnimationPath):

            animationPath() has been changed to updateAnimationPath() and should only be called
            when the animation path (path attribute, or mpath's referenced path) has changed.

        (WebCore::SVGAnimateMotionElement::buildTransformForProgress):
        (WebCore::SVGAnimateMotionElement::updateAnimationMode):

            If an animationPath exists, we use PathAnimation, otherwise we fall back to the normal
            updateAnimationMode() codepath.

        (WebCore):
        * svg/SVGAnimateMotionElement.h:
        (SVGAnimateMotionElement):
        * svg/SVGAnimationElement.cpp:
        (WebCore::SVGAnimationElement::SVGAnimationElement):
        (WebCore::SVGAnimationElement::isSupportedAttribute):
        (WebCore::SVGAnimationElement::parseAttribute):

            The from, by, and to attributes have been added so that we can track when they change
            and update the animation mode. Similarly for when the values attribute changes.

        (WebCore::SVGAnimationElement::updateAnimationMode):
        * svg/SVGAnimationElement.h:
        (WebCore::SVGAnimationElement::animationMode):
        (SVGAnimationElement):
        (WebCore::SVGAnimationElement::setAnimationMode):
        (WebCore::SVGAnimationElement::calculateDistance):
        * svg/SVGMPathElement.cpp:
        (WebCore::SVGMPathElement::buildPendingResource):

            It would be nice to move all the duplicated buildPendingResource() logic into a central
            place (SVGURIReference?) but for now it is copied. This function is nearly identical to
            SVGFEImageElement::buildPendingResource.

        (WebCore):
        (WebCore::SVGMPathElement::clearResourceReferences):
        (WebCore::SVGMPathElement::insertedInto):
        (WebCore::SVGMPathElement::removedFrom):
        (WebCore::SVGMPathElement::svgAttributeChanged):
        (WebCore::SVGMPathElement::targetPathChanged):
        (WebCore::SVGMPathElement::notifyParentOfPathChange):
        * svg/SVGMPathElement.h:
        (SVGMPathElement):
        * svg/SVGPathElement.cpp:

            When a <path>'s path changes, we need to notify any dependent <mpath> elements. This is
            typically handled with RenderSVGResource::markForLayoutAndParentResourceInvalidation
            but for the special-case of <mpath> we only need to track when the path's "d" attribute
            changes so invalidateMPathDependencies() has been added.

        (WebCore::SVGPathElement::svgAttributeChanged):
        (WebCore::SVGPathElement::invalidateMPathDependencies):
        (WebCore):
        (WebCore::SVGPathElement::insertedInto):
        (WebCore::SVGPathElement::removedFrom):
        * svg/SVGPathElement.h:
        (SVGPathElement):
        * svg/SVGSetElement.cpp:
        (WebCore::SVGSetElement::SVGSetElement):
        (WebCore::SVGSetElement::updateAnimationMode):
        (WebCore):
        * svg/SVGSetElement.h:
        (SVGSetElement):
        * svg/animation/SVGSMILElement.cpp:
        (WebCore::SVGSMILElement::isSupportedAttribute):

2012-10-31  Beth Dakin  <bdakin@apple.com>

        https://bugs.webkit.org/show_bug.cgi?id=100879
        ScrollingStateNode::cloneAndResetNode() should not be virtual

        Reviewed by Simon Fraser.

        cloneAndResetNode() is currently pure virtual and implemented only 
        in ScrollingStateScrollingNode. However, all of the work that it 
        does at this time is stuff that a generic ScrollingStateNode could 
        do. We should move this implementation to the base class so that it 
        does not need to be duplicated for future node types.

        This patch also re-names cloneAndResetNode() to cloneAndReset()
        and correspondingly re-names cloneAndResetChildNodes() to 
        cloneAndResetChildren(). 

        Finally the patch also changes the copy constructors of both of these 
        classes to take a const reference instead of a pointer.

        * page/scrolling/ScrollingStateNode.cpp:
        (WebCore::ScrollingStateNode::ScrollingStateNode):
        (WebCore::ScrollingStateNode::cloneAndReset):
        (WebCore):
        (WebCore::ScrollingStateNode::cloneAndResetChildren):
        * page/scrolling/ScrollingStateNode.h:
        (ScrollingStateNode):
        * page/scrolling/ScrollingStateScrollingNode.cpp:
        (WebCore::ScrollingStateScrollingNode::ScrollingStateScrollingNode):
        (WebCore):
        * page/scrolling/ScrollingStateScrollingNode.h:
        (ScrollingStateScrollingNode):
        * page/scrolling/ScrollingStateTree.cpp:
        (WebCore::ScrollingStateTree::commit):

2012-10-31  Tom Sepez  <tsepez@chromium.org>
        
        Malformed X-XSS-Protection headers not reported.
        https://bugs.webkit.org/show_bug.cgi?id=100538

        Reviewed by Adam Barth.

        Re-writes X-XSS-Protection header parser to be more particular, and to
        return better information on error.

        Tests: http/tests/security/xssAuditor/malformed-xss-protection-header-1.html
               http/tests/security/xssAuditor/malformed-xss-protection-header-2.html
               http/tests/security/xssAuditor/malformed-xss-protection-header-4.html
               http/tests/security/xssAuditor/xss-protection-parsing-02.html

        * html/parser/XSSAuditor.cpp:
        (WebCore::XSSAuditor::init):
        Detect error return code and log console message with details
        * platform/network/HTTPParsers.cpp:
        (WebCore):
        (WebCore::skipWhiteSpace):
        Use safe less-than comparsion in case called with pos already out of range.
        (WebCore::skipToken):
        Fix comparison to properly reject substrings at end of input.  Prevent advancing
        returned position when match fails, so that this may someday be used to match
        optional tokens.
        (WebCore::parseXSSProtectionHeader):
        Return detailled error status. Avoid needless string copy.
        * platform/network/HTTPParsers.h:
        Add new error returns for x-xss-protection header parser.
        
2012-10-31  Simon Fraser  <simon.fraser@apple.com>

        REGRESSION (tile cache layers): bits of tiled layers are missing with certain 3D transforms
        https://bugs.webkit.org/show_bug.cgi?id=100808
        <rdar://problem/12562541>

        Reviewed by Dean Jackson.

        When projecting rects down into transformed layers, the projection can fail with severe
        3D rotations if the computed w component in TransformationMatrix::projectPoint() is negative.
        In this case we already clamp, but the fact that we clamped doesn't make it out to
        GraphicsLayerCA::computeVisibleRect() which resulted in incorrect visible rects being
        computed.
        
        Fix by propagating the fact that clamping occurred out of the TransformState functions
        which can clamp. In computeVisibleRect(), simply consider the entire layer bounds
        to be visible if clamping occurred.

        Tests: compositing/tiling/rotated-tiled-clamped.html
               compositing/tiling/rotated-tiled-preserve3d-clamped.html

        * platform/graphics/ca/GraphicsLayerCA.cpp:
        (WebCore::GraphicsLayerCA::computeVisibleRect): If either the applyTransform()
        or the state.mappedQuad() clamped, use our bounds as the visible rect.
        * platform/graphics/transforms/TransformState.cpp:
        (WebCore::TransformState::applyTransform): Pass out clamping state.
        (WebCore::TransformState::flatten): Ditto.
        (WebCore::TransformState::mappedPoint): Ditto.
        (WebCore::TransformState::mappedQuad): Ditto.
        (WebCore::TransformState::flattenWithTransform): Ditto. No need to initialize
        wasClamped, since this function is internal.
        * platform/graphics/transforms/TransformState.h:
        (TransformState):
        * platform/graphics/transforms/TransformationMatrix.cpp:
        (WebCore::TransformationMatrix::projectQuad): If any point projection clamped,
        set the flag to say we clamped.
        * platform/graphics/transforms/TransformationMatrix.h:
        (TransformationMatrix):

2012-10-31  Tiancheng Jiang  <tijiang@rim.com>

        Change bubble message style to BB10 UX spec.
        https://bugs.webkit.org/show_bug.cgi?id=100862

        Reviewed by Rob Buis.

        RIM PR 198108
        Internal Reviewed by Otto Cheung.
        No new tests.

        * css/themeBlackBerry.css:
        (::-webkit-validation-bubble-message): Added.
        (::-webkit-validation-bubble-arrow): Added.
        (::-webkit-validation-bubble-heading): Added.

2012-10-31  Mike West  <mkwst@chromium.org>

        Prefer document->addConsoleMessage to document->domWindow->console->addMessage.
        https://bugs.webkit.org/show_bug.cgi?id=100850

        Reviewed by Adam Barth.

        For historical reasons, a few places in WebCore talk to Console directly
        via 'document()->domWindow()->console()->addMessage(...)'. This is more
        safely wrapped by calling 'addConsoleMessage' on the Document itself.

        No visible functionality should change; we'll simply avoid potential
        null dereferences in the future.

        * html/HTMLFormElement.cpp:
        (WebCore::HTMLFormElement::validateInteractively):
        * html/canvas/WebGLRenderingContext.cpp:
        (WebCore):
        (WebCore::WebGLRenderingContext::printWarningToConsole):
        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::reportLocalLoadFailed):
        * loader/MixedContentChecker.cpp:
        (WebCore::MixedContentChecker::logWarning):
        * loader/appcache/ApplicationCacheGroup.cpp:
        (WebCore::ApplicationCacheGroup::abort):
        (WebCore::ApplicationCacheGroup::didReceiveResponse):
        (WebCore::ApplicationCacheGroup::didFinishLoading):
        (WebCore::ApplicationCacheGroup::didFail):
        (WebCore::ApplicationCacheGroup::didReceiveManifestResponse):
        (WebCore::ApplicationCacheGroup::didFinishLoadingManifest):
        (WebCore::ApplicationCacheGroup::checkIfLoadIsComplete):
        * loader/cache/CachedResourceLoader.cpp:
        (WebCore::CachedResourceLoader::printAccessDeniedMessage):

2012-10-31  Pavel Feldman  <pfeldman@chromium.org>

        Web Inspector: frame chooser does not work on subsequent inspector open.
        https://bugs.webkit.org/show_bug.cgi?id=100771

        Reviewed by Yury Semikhatsky.

        - Make WorkerRuntimeAgent and PageRuntimeAgent register themselves in the instrumenting agents independently
        - Move pause / run worker handling from InspectorRuntimeAgent into WorkerRuntimeAgent
        - Remove remains of the front-end reused signal from InspectorAgent
        - Send execution contexts post clear window object instead of post commit load.

        * inspector/InspectorAgent.cpp:
        (WebCore::InspectorAgent::InspectorAgent):
        (WebCore::InspectorAgent::clearFrontend):
        (WebCore::InspectorAgent::didCommitLoad):
        * inspector/InspectorAgent.h:
        (InspectorAgent):
        * inspector/InspectorInstrumentation.cpp:
        (WebCore):
        (WebCore::InspectorInstrumentation::didClearWindowObjectInWorldImpl):
        (WebCore::InspectorInstrumentation::willEvaluateWorkerScript):
        * inspector/InspectorInstrumentation.h:
        (InspectorInstrumentation):
        * inspector/InspectorPageAgent.cpp:
        (WebCore::InspectorPageAgent::restore):
        * inspector/InspectorRuntimeAgent.cpp:
        (WebCore::InspectorRuntimeAgent::InspectorRuntimeAgent):
        (WebCore::InspectorRuntimeAgent::~InspectorRuntimeAgent):
        (WebCore::InspectorRuntimeAgent::run):
        (WebCore::InspectorRuntimeAgent::setScriptDebugServer):
        * inspector/InspectorRuntimeAgent.h:
        (InspectorRuntimeAgent):
        * inspector/InstrumentingAgents.h:
        (WebCore):
        (WebCore::InstrumentingAgents::InstrumentingAgents):
        (WebCore::InstrumentingAgents::workerRuntimeAgent):
        (WebCore::InstrumentingAgents::setWorkerRuntimeAgent):
        (InstrumentingAgents):
        * inspector/PageRuntimeAgent.cpp:
        (WebCore::PageRuntimeAgent::PageRuntimeAgent):
        (WebCore::PageRuntimeAgent::~PageRuntimeAgent):
        (WebCore::PageRuntimeAgent::setFrontend):
        (WebCore::PageRuntimeAgent::clearFrontend):
        (WebCore::PageRuntimeAgent::enable):
        (WebCore::PageRuntimeAgent::didCreateMainWorldContext):
        * inspector/PageRuntimeAgent.h:
        (PageRuntimeAgent):
        * inspector/WorkerRuntimeAgent.cpp:
        (WebCore::WorkerRuntimeAgent::WorkerRuntimeAgent):
        (WebCore::WorkerRuntimeAgent::~WorkerRuntimeAgent):
        (WebCore::WorkerRuntimeAgent::run):
        (WebCore):
        (WebCore::WorkerRuntimeAgent::pauseWorkerContext):
        * inspector/WorkerRuntimeAgent.h:
        (WorkerRuntimeAgent):

2012-10-31  Kondapally Kalyan  <kalyan.kondapally@intel.com>

        [Qt][EFL][AC][WK2]TextureMapperLayer backing store contents are drawn upside down on screen.
        https://bugs.webkit.org/show_bug.cgi?id=100845.

        Reviewed by Noam Rosenthal.

        WebGL displays the Canvas with (0,0) being the bottom left corner.
        In GraphicsSurface::platformPaintToTextureMapper we don't set ShouldFlipTexture
        flag before painting to TextureMapper.
        It results in backing store contents being drawn upside down on screen.
        This patch enables ShouldFlipTexture flag when TextureMapperLayer renders 
        it's backing store contents into a TextureMapper.

        * platform/graphics/surfaces/qt/GraphicsSurfaceGLX.cpp:
        (WebCore::GraphicsSurface::platformPaintToTextureMapper):

2012-10-31  Noam Rosenthal  <noam.rosenthal@nokia.com>

        [Texmap] Enable filter animations in GraphicsLayerAnimation
        https://bugs.webkit.org/show_bug.cgi?id=100318

        Reviewed by Kenneth Rohde Christiansen.

        Use the same method of animating filters in WebCore to animate filters for TextureMapper.
        Added the appropriate methods to GraphicsLayerAnimation and TextureMapperLayer.

        Tested by LayoutTests/css3/filters/filter-animation-hw.html and other tests.

        * platform/graphics/GraphicsLayerAnimation.cpp:
        (WebCore):
        (WebCore::blendFunc):
        (WebCore::applyFilterAnimation):
        (WebCore::GraphicsLayerAnimation::applyInternal):
        * platform/graphics/GraphicsLayerAnimation.h:
        (Client):
        * platform/graphics/texmap/TextureMapperLayer.cpp:
        (WebCore::TextureMapperLayer::intermediateSurfaceRect):
        (WebCore::TextureMapperLayer::shouldPaintToIntermediateSurface):
        (WebCore::TextureMapperLayer::paintRecursive):
        (WebCore::TextureMapperLayer::syncAnimations):
        * platform/graphics/texmap/TextureMapperLayer.h:
        (TextureMapperLayer):
        (WebCore::TextureMapperLayer::setFilters):
        (WebCore::TextureMapperLayer::setAnimatedFilters):

2012-10-31  Adam Barth  <abarth@webkit.org>

        [V8] Garbage collection should use opaque roots rather than implicit references
        https://bugs.webkit.org/show_bug.cgi?id=100707

        Reviewed by Kentaro Hara.

        This patch replaces visitDOMWrapper with opaqueRootForGC. The
        former used to inform V8 of implicit relationships between wrapper
        objects on a per-wrapper basis. That meant that we needed to know which
        DOMDataStore a given wrapper was in during garbage collection.

        After this patch, we now use object groups rather than implicit
        references to inform V8 of these relationships. That has two benefits:

        1) We no longer need to know which DOMDataStore a wrapper belongs
           because we don't need to find the exact source wrapper for the
           implicit connection.

        2) We can now handle more complicated implicit relationships, for
           example when some of the intervening objects haven't had their
           JavaScript wrappers created yet.

        This patch also unlocks to paths of future development:
        A) Fixing the remaining failures in fast/dom/gc-9.html
        B) Enumerating DOM wrappers entirely from V8 rather than from the
           DOMWrapperMaps (so that we can move more object towards using
           IntrusiveDOMWrapperMaps, which aren't enumerable from WebCore).

        * bindings/scripts/CodeGeneratorV8.pm:
        (NeedsCustomOpaqueRootForGC):
        (GenerateOpaqueRootForGC):
        (GenerateHeader):
        (GenerateImplementation):
        * bindings/v8/V8GCController.cpp:
        (ImplicitConnection):
        (WebCore::ImplicitConnection::ImplicitConnection):
        (WebCore::ImplicitConnection::root):
        (WebCore::ImplicitConnection::wrapper):
        (WebCore):
        (WebCore::operator<):
        (WrapperGrouper):
        (WebCore::WrapperGrouper::WrapperGrouper):
        (WebCore::WrapperGrouper::addToGroup):
        (WebCore::WrapperGrouper::keepAlive):
        (WebCore::WrapperGrouper::apply):
        (WebCore::ObjectVisitor::ObjectVisitor):
        (WebCore::ObjectVisitor::visitDOMWrapper):
        (ObjectVisitor):
        (WebCore::V8GCController::opaqueRootForGC):
        (WebCore::NodeVisitor::NodeVisitor):
        (WebCore::NodeVisitor::visitNodeWrapper):
        (NodeVisitor):
        (WebCore::V8GCController::majorGCPrologue):
        * bindings/v8/V8GCController.h:
        (WebCore):
        (V8GCController):
        * bindings/v8/WrapperTypeInfo.h:
        (WebCore):
        (WebCore::WrapperTypeInfo::opaqueRootForGC):
        (WrapperTypeInfo):
        * bindings/v8/custom/V8NodeListCustom.cpp:
        (WebCore::V8NodeList::opaqueRootForGC):
        * bindings/v8/custom/V8SpeechRecognitionResultCustom.cpp:
        (WebCore::V8SpeechRecognitionResult::opaqueRootForGC):

2012-10-31  Alexei Filippov  <alph@chromium.org>

        Web Inspector: Add total node to native memory snapshot tree
        https://bugs.webkit.org/show_bug.cgi?id=100843

        Reviewed by Yury Semikhatsky.

        * inspector/front-end/NativeMemorySnapshotView.js:
        (WebInspector.NativeSnapshotDataGrid):
        (WebInspector.NativeSnapshotNode):
        (WebInspector.MemoryBlockViewProperties._initialize):

2012-10-31  Arpita Bahuguna  <arpitabahuguna@gmail.com>

        Table with percentage column widths doesn't scale to fill the entire width of a table containing it
        https://bugs.webkit.org/show_bug.cgi?id=11645

        Reviewed by Julien Chaffraix.

        When the inner (or nested) table has auto width and column(s) with
        percent width, we should scale our column(s) to the width of the
        containing table (unless it has auto width).

        Test: fast/table/scale-nested-percent-width-cols.html

        * rendering/AutoTableLayout.cpp:
        (WebCore::shouldScaleColumns):
        If the containing table width was of percent type, we were disallowing
        our inner or nested table's column from scaling to the size of the parent
        table. We should prohibit the scaling of the nested table columns only
        if the parent table has auto width.

2012-10-31  Ian Vollick  <vollick@chromium.org>

        Add support for text-based repaint testing
        https://bugs.webkit.org/show_bug.cgi?id=100584

        Reviewed by Simon Fraser.

        Allows tracked repaint rects to be dumped as text.

        The following layout tests have been converted:
          fast/repaint/layer-full-repaint.html
          fast/repaint/overflow-flipped-writing-mode-table.html

        * WebCore.exp.in:
          Exports for:
            FrameView::setTracksRepaints(bool)
            Frame::trackedRepaintRectsAsText() const
        * page/Frame.cpp:
        (WebCore::Frame::trackedRepaintRectsAsText):
          Returns a string containing information on all tracked repaint rects.
        * page/FrameView.cpp:
        (WebCore::FrameView::setTracksRepaints):
          Rather than calling m_trackedRepaintRects.clear() directly, I've
          called resetTrackedRepaints(). This will allow us to do more
          sophisticated resetting when we start tracking repaint rects for
          composited layers.
        (WebCore::FrameView::trackedRepaintRectsAsText):
          Provides the string returned by Frame::trackedRepaintRectsAsText.
        * testing/Internals.cpp:
        (WebCore::Internals::repaintRectsAsText):
          Returns Frame::trackedRepaintRectsAsText.
        (WebCore):
        (WebCore::Internals::startTrackingRepaints):
          Calls FrameView::setTracksRepaints(true)
        (WebCore::Internals::stopTrackingRepaints):
          Calls FrameView::setTracksRepaints(false)
        * testing/Internals.h:
        * testing/Internals.idl:
          Declarations for:
            repaintRectsAsText
            startTrackingRepaints
            stopTrackingRepaints

2012-10-31  Yury Semikhatsky  <yurys@chromium.org>

        Web Inspector: page crash when pausing in dedicated worker
        https://bugs.webkit.org/show_bug.cgi?id=100837

        Reviewed by Pavel Feldman.

        Pass debugger agent to InjectedScriptHost::init in case of workers.

        Test: inspector-protocol/debugger-pause-dedicated-worker.html

        * inspector/WorkerInspectorController.cpp:
        (WebCore::WorkerInspectorController::WorkerInspectorController):

2012-10-31  Zoltan Nyul  <zoltan.nyul@intel.com>

        perspective-origin should ignore values with more then two lengths and use the default values
        https://bugs.webkit.org/show_bug.cgi?id=100835

        Reviewed by Kenneth Rohde Christiansen.

        Perspective-origin should ignore values with more then two lengths
        (http://www.w3.org/TR/css3-transforms/#perspective-origin) and use
        the default values instead of parsing it as an unlimited-length list,
        of which all but the first two values are ignored. This makes perspective-origin 
        behave similar to transform-origin which uses default value in this case,
        as well as firefox does the same.

        Test: transforms/2d/computed-style-origin.html

        * css/CSSParser.cpp:
        (WebCore::CSSParser::parsePerspectiveOrigin):

2012-10-31  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r133016.
        http://trac.webkit.org/changeset/133016
        https://bugs.webkit.org/show_bug.cgi?id=100856

        broke compile-webkit on several bots (Requested by podivilov
        on #webkit).

        * CMakeLists.txt:
        * GNUmakefile.list.am:
        * Target.pri:
        * WebCore.gypi:
        * WebCore.vcproj/WebCore.vcproj:
        * WebCore.xcodeproj/project.pbxproj:
        * dom/DeviceOrientationClient.h:
        (DeviceOrientationClient):
        * dom/DeviceOrientationController.cpp:
        (WebCore::DeviceOrientationController::DeviceOrientationController):
        (WebCore):
        (WebCore::DeviceOrientationController::~DeviceOrientationController):
        (WebCore::DeviceOrientationController::timerFired):
        (WebCore::DeviceOrientationController::addListener):
        (WebCore::DeviceOrientationController::removeListener):
        (WebCore::DeviceOrientationController::removeAllListeners):
        (WebCore::DeviceOrientationController::suspendEventsForAllListeners):
        (WebCore::DeviceOrientationController::resumeEventsForAllListeners):
        (WebCore::DeviceOrientationController::didChangeDeviceOrientation):
        (WebCore::DeviceOrientationController::supplementName):
        * dom/DeviceOrientationController.h:
        (WebCore):
        (DeviceOrientationController):
        (WebCore::DeviceOrientationController::isActive):
        (WebCore::DeviceOrientationController::client):
        (WebCore::DeviceOrientationController::from):
        * dom/Document.cpp:
        (WebCore::Document::suspendActiveDOMObjects):
        (WebCore::Document::resumeActiveDOMObjects):
        * loader/EmptyClients.h:
        (WebCore::EmptyDeviceOrientationClient::startUpdating):
        (WebCore::EmptyDeviceOrientationClient::stopUpdating):
        * page/DOMWindow.cpp:
        (WebCore::DOMWindow::addEventListener):
        (WebCore::DOMWindow::removeEventListener):
        (WebCore::DOMWindow::removeAllEventListeners):
        * page/DeviceClient.h: Removed.
        * page/DeviceController.cpp: Removed.
        * page/DeviceController.h: Removed.

2012-10-31  Antti Koivisto  <antti@apple.com>

        Remove stray calls to mutableAttributeData()
        https://bugs.webkit.org/show_bug.cgi?id=100849

        Reviewed by Andreas Kling.

        Changing the cached class attribute value does not require mutable attribute data.

        * dom/Element.cpp:
        (WebCore::Element::classAttributeChanged):
        * dom/ElementAttributeData.h:
        (WebCore::ElementAttributeData::clearClass):
        
            Make const like setClass().

2012-10-31  Mike West  <mkwst@chromium.org>

        X-Frame-Options console message should be associated with a request.
        https://bugs.webkit.org/show_bug.cgi?id=100735

        Reviewed by Pavel Feldman.

        In 99941, we added the possibility to tie console messages to requests,
        which enables automatic generation of stack traces, line numbers, etc.
        making the error simpler to diagnose for web developers. This patch
        uses the piping laid in that patch to improve the console message
        generated when a document is blocked by X-Frame-Options.

        No new tests; the functionality is covered by changes to existing tests.

        * dom/Document.cpp:
        (WebCore::Document::processHttpEquiv):
            Grab the request identifier from the currently active DocumentLoader
            and pass it into the console message.
        * loader/MainResourceLoader.cpp:
        (WebCore::MainResourceLoader::didReceiveResponse):
            Grab the request identifier from the MainResourceLoader, and pass it
            into the console message.

2012-10-31  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r133015.
        http://trac.webkit.org/changeset/133015
        https://bugs.webkit.org/show_bug.cgi?id=100847

        broke Apple Win Debug compilation (Requested by podivilov on
        #webkit).

        * inspector/InspectorAgent.cpp:
        (WebCore::InspectorAgent::InspectorAgent):
        (WebCore::InspectorAgent::clearFrontend):
        (WebCore::InspectorAgent::didCommitLoad):
        * inspector/InspectorAgent.h:
        (WebCore::InspectorAgent::didCommitLoadFired):
        (InspectorAgent):
        * inspector/InspectorInstrumentation.cpp:
        (WebCore):
        (WebCore::InspectorInstrumentation::didClearWindowObjectInWorldImpl):
        (WebCore::InspectorInstrumentation::willEvaluateWorkerScript):
        (WebCore::InspectorInstrumentation::runtimeAgentEnabled):
        * inspector/InspectorInstrumentation.h:
        (InspectorInstrumentation):
        * inspector/InspectorPageAgent.cpp:
        (WebCore::InspectorPageAgent::restore):
        * inspector/InspectorRuntimeAgent.cpp:
        (WebCore::InspectorRuntimeAgent::InspectorRuntimeAgent):
        (WebCore::InspectorRuntimeAgent::~InspectorRuntimeAgent):
        (WebCore::InspectorRuntimeAgent::run):
        (WebCore):
        (WebCore::InspectorRuntimeAgent::pauseWorkerContext):
        * inspector/InspectorRuntimeAgent.h:
        (InspectorRuntimeAgent):
        * inspector/InstrumentingAgents.h:
        (WebCore):
        (WebCore::InstrumentingAgents::InstrumentingAgents):
        (WebCore::InstrumentingAgents::inspectorRuntimeAgent):
        (WebCore::InstrumentingAgents::setInspectorRuntimeAgent):
        (InstrumentingAgents):
        * inspector/PageRuntimeAgent.cpp:
        (WebCore::PageRuntimeAgent::PageRuntimeAgent):
        (WebCore::PageRuntimeAgent::~PageRuntimeAgent):
        (WebCore::PageRuntimeAgent::setFrontend):
        (WebCore::PageRuntimeAgent::clearFrontend):
        (WebCore::PageRuntimeAgent::enable):
        (WebCore::PageRuntimeAgent::didClearWindowObject):
        * inspector/PageRuntimeAgent.h:
        (PageRuntimeAgent):
        * inspector/WorkerRuntimeAgent.cpp:
        (WebCore::WorkerRuntimeAgent::WorkerRuntimeAgent):
        (WebCore::WorkerRuntimeAgent::~WorkerRuntimeAgent):
        * inspector/WorkerRuntimeAgent.h:
        (WorkerRuntimeAgent):

2012-10-31  Kihong Kwon  <kihong.kwon@samsung.com>

        Add DeviceController base-class to remove duplication of DeviceXXXControler
        https://bugs.webkit.org/show_bug.cgi?id=96894

        Reviewed by Hajime Morita.

        Add DeviceController which is extracted from DeviceOrientationController to remove duplication.
        And soon-to-be-added DeviceMotionController and ProximityController.

        Covered by existing tests.

        * CMakeLists.txt:
        * GNUmakefile.list.am:
        * Target.pri:
        * WebCore.gypi:
        * WebCore.vcproj/WebCore.vcproj:
        * WebCore.xcodeproj/project.pbxproj:
        * dom/DeviceOrientationClient.h:
        * dom/DeviceOrientationController.cpp:
        Remove member functions to move to DeviceController.
        - addListener(), removeListener(), removeAllListeners(), isActive()
        (WebCore::DeviceOrientationController::DeviceOrientationController):
        (WebCore::DeviceOrientationController::didChangeDeviceOrientation):
        (WebCore::DeviceOrientationController::client):
        (WebCore::DeviceOrientationController::hasLastData):
        (WebCore::DeviceOrientationController::getLastEvent):
        (WebCore::DeviceOrientationController::from):
        (WebCore):
        * dom/DeviceOrientationController.h:
        (WebCore):
        (WebCore::DeviceOrientationController::~DeviceOrientationController):
        (DeviceOrientationController):
        * dom/Document.cpp:
        Remove suspendEventsForAllListeners() and resumeEventsForAllListeners() function calls.
        These calls can be made by checking activeDOMObjectsAreSuspended() and activeDOMObjectsAreStopped() before dispatchEvent.
        (WebCore::Document::suspendActiveDOMObjects):
        (WebCore::Document::resumeActiveDOMObjects):
        * loader/EmptyClients.h:
        (EmptyDeviceClient):
        (WebCore::EmptyDeviceClient::startUpdating):
        (WebCore::EmptyDeviceClient::stopUpdating):
        (WebCore):
        * page/DOMWindow.cpp:
        (WebCore::DOMWindow::addEventListener):
        (WebCore::DOMWindow::removeEventListener):
        (WebCore::DOMWindow::removeAllEventListeners):
        * page/DeviceClient.h: Added.
        (WebCore):
        (DeviceClient):
        (WebCore::DeviceClient::~DeviceClient):
        * page/DeviceController.cpp: Added.
        DeviceController has extracted functions from DeviceOrientationController and DeviceMotionController.
        - addDeviceEventListener(), removeDeviceEventlistener(), removeAllDeviceEventListeners(), dispatchDeviceEvent()
        All kind of device event controller which has DeviceClient can be inherited from DeviceController.
        (WebCore):
        (WebCore::DeviceController::DeviceController):
        (WebCore::DeviceController::addDeviceEventListener):
        (WebCore::DeviceController::removeDeviceEventListener):
        (WebCore::DeviceController::removeAllDeviceEventListeners):
        (WebCore::DeviceController::dispatchDeviceEvent):
        (WebCore::DeviceController::fireDeviceEvent):
        * page/DeviceController.h: Added.
        (WebCore):
        (DeviceController):
        (WebCore::DeviceController::~DeviceController):
        (WebCore::DeviceController::isActive):
        (WebCore::DeviceController::client):
        (WebCore::DeviceController::hasLastData):
        (WebCore::DeviceController::getLastEvent):

2012-10-31  Pavel Feldman  <pfeldman@chromium.org>

        Web Inspector: frame chooser does not work on subsequent inspector open.
        https://bugs.webkit.org/show_bug.cgi?id=100771

        Reviewed by Yury Semikhatsky.

        - Make WorkerRuntimeAgent and PageRuntimeAgent register themselves in the instrumenting agents independently
        - Move pause / run worker handling from InspectorRuntimeAgent into WorkerRuntimeAgent
        - Remove remains of the front-end reused signal from InspectorAgent
        - Send execution contexts post clear window object instead of post commit load.

        * inspector/InspectorAgent.cpp:
        (WebCore::InspectorAgent::InspectorAgent):
        (WebCore::InspectorAgent::clearFrontend):
        (WebCore::InspectorAgent::didCommitLoad):
        * inspector/InspectorAgent.h:
        (InspectorAgent):
        * inspector/InspectorInstrumentation.cpp:
        (WebCore):
        (WebCore::InspectorInstrumentation::didClearWindowObjectInWorldImpl):
        (WebCore::InspectorInstrumentation::willEvaluateWorkerScript):
        * inspector/InspectorInstrumentation.h:
        (InspectorInstrumentation):
        * inspector/InspectorPageAgent.cpp:
        (WebCore::InspectorPageAgent::restore):
        * inspector/InspectorRuntimeAgent.cpp:
        (WebCore::InspectorRuntimeAgent::InspectorRuntimeAgent):
        (WebCore::InspectorRuntimeAgent::~InspectorRuntimeAgent):
        (WebCore::InspectorRuntimeAgent::run):
        (WebCore::InspectorRuntimeAgent::setScriptDebugServer):
        * inspector/InspectorRuntimeAgent.h:
        (InspectorRuntimeAgent):
        * inspector/InstrumentingAgents.h:
        (WebCore):
        (WebCore::InstrumentingAgents::InstrumentingAgents):
        (WebCore::InstrumentingAgents::workerRuntimeAgent):
        (WebCore::InstrumentingAgents::setWorkerRuntimeAgent):
        (InstrumentingAgents):
        * inspector/PageRuntimeAgent.cpp:
        (WebCore::PageRuntimeAgent::PageRuntimeAgent):
        (WebCore::PageRuntimeAgent::~PageRuntimeAgent):
        (WebCore::PageRuntimeAgent::setFrontend):
        (WebCore::PageRuntimeAgent::clearFrontend):
        (WebCore::PageRuntimeAgent::enable):
        (WebCore::PageRuntimeAgent::didCreateMainWorldContext):
        * inspector/PageRuntimeAgent.h:
        (PageRuntimeAgent):
        * inspector/WorkerRuntimeAgent.cpp:
        (WebCore::WorkerRuntimeAgent::WorkerRuntimeAgent):
        (WebCore::WorkerRuntimeAgent::~WorkerRuntimeAgent):
        (WebCore::WorkerRuntimeAgent::run):
        (WebCore):
        (WebCore::WorkerRuntimeAgent::pauseWorkerContext):
        * inspector/WorkerRuntimeAgent.h:
        (WorkerRuntimeAgent):

2012-10-31  Keishi Hattori  <keishi@webkit.org>

        Calendar picker can flicker when opened from the suggestion picker
        https://bugs.webkit.org/show_bug.cgi?id=100816

        Reviewed by Kent Tamura.

        Calendar picker was opening before the hiding completed.

        No new tests. Added test to date-suggestion-picker-key-operations.html.

        * Resources/pagepopups/pickerCommon.js: Added didHide event.
        * Resources/pagepopups/suggestionPicker.js:
        (SuggestionPicker.prototype.selectEntry): Use didHide event so we don't open the calendar picker prematurely.
        (SuggestionPicker._handleWindowDidHide): When the window finished hiding, open the calendar picker.

2012-10-31  Allan Sandfeld Jensen  <allan.jensen@digia.com>

        Reset binding test result after r132973
        https://bugs.webkit.org/show_bug.cgi?id=99178

        Unreviewed gardening.

        * bindings/scripts/test/JS/JSFloat64Array.cpp:
        (WebCore::getJSFloat64ArrayConstructorTable):
        (WebCore::JSFloat64ArrayConstructor::getOwnPropertySlot):
        (WebCore::JSFloat64ArrayConstructor::getOwnPropertyDescriptor):

2012-10-31  Mike West  <mkwst@chromium.org>

        Script run from an isolated world should bypass a page's CSP.
        https://bugs.webkit.org/show_bug.cgi?id=97398

        Reviewed by Adam Barth.

        A page's Content Security Policy currently applies to all resources
        loaded, regardless of their source. That generally makes sense, but
        proves problematic when considering script run from an isolated
        world (Chrome extensions, for instance). These scripts should be allowed
        to inject resources into a page's DOM without eiher being restricted by
        the page's active CSP, or generating violation reports that spam the
        page owner.

        Ideally, the isolated world could define its own Content Security Policy
        which should be applied to resources it loads. For the moment, this
        patch accepts a String that we can parse later on, but only uses it in
        a binary way. If a non-empty policy String is provided, we bypass the
        main world's CSP checks. If an empty String is provided, the main
        world's CSP checks remain active.

        Test: http/tests/security/isolatedWorld/bypass-main-world-csp.html

        (WebCore::isolatedWorldContentSecurityPolicies):
        (WebCore::DOMWrapperWorld::isolatedWorldHasContentSecurityPolicy):
        (WebCore::DOMWrapperWorld::setIsolatedWorldContentSecurityPolicy):
        (WebCore::DOMWrapperWorld::clearIsolatedWorldContentSecurityPolicy):
        * bindings/v8/DOMWrapperWorld.h:
        (DOMWrapperWorld):
            Mechanisms for setting and clearing Content Security Policies from
            isolated worlds; implemented in the same HashMappy way as
            SecurityOrigin.
        * bindings/v8/ScriptController.cpp:
        (WebCore::ScriptController::shouldBypassMainWorldContentSecurityPolicy):
        (WebCore):
        * bindings/v8/ScriptController.h:
        (ScriptController):
            Adding a method to ScriptController to query the state of the
            current world's Content Security Policy. We'll drop this once we can
            apply a policy more directly, but for the moment it's necessary for
            the next bit.
        * loader/cache/CachedResourceLoader.cpp:
        (WebCore::CachedResourceLoader::canRequest):
            Check the new ScriptController method, and only perform CSP checks
            when loading resources if we're executing code from the main world,
            or an isolated world with no Content Security Policy set.

2012-10-31  Tim Horton  <timothy_horton@apple.com>

        Unreviewed, attempt to fix the release build by not exporting symbols that aren't defined there.

        * WebCore.exp.in:

2012-10-31  Yury Semikhatsky  <yurys@chromium.org>

        Memory instrumentation: do not report memory occupied by objects referenced using client interfaces
        https://bugs.webkit.org/show_bug.cgi?id=100824

        Reviewed by Alexander Pavlov.

        In many classes we have pointer to a client object. These references should be
        reported as weak pointers and the client's memory usage should be reported when
        the client is reached from its instrumented owner where we know exact type of
        the client. Otherwise we would need to add reportMemoryUsage to all client
        interfaces which places additional burden on the client implementers and blurs
        the instrumentation boundaries.

        * inspector/InspectorController.cpp:
        (WebCore::InspectorController::reportMemoryUsage):
        * inspector/InspectorDebuggerAgent.cpp:
        (WebCore::InspectorDebuggerAgent::reportMemoryUsage):
        * inspector/InspectorMemoryAgent.cpp:
        (WebCore::InspectorMemoryAgent::reportMemoryUsage):
        * inspector/InspectorOverlay.cpp:
        (WebCore::InspectorOverlay::reportMemoryUsage):
        * inspector/InspectorResourceAgent.cpp:
        (WebCore::InspectorResourceAgent::reportMemoryUsage):
        * page/Page.cpp:
        (WebCore::Page::reportMemoryUsage):

2012-10-31  Tim Horton  <timothy_horton@apple.com>

        Unreviewed, attempt to fix the build by exporting NoExceptionAssertionChecker symbols.

        * WebCore.exp.in:

2012-10-31  Eric Seidel  <eric@webkit.org>

        Add non-virtual firstChild/lastChild overrides to RenderBlock and RenderTableCol for a > 30% speedup on table from bug 100304
        https://bugs.webkit.org/show_bug.cgi?id=100306

        Reviewed by Abhishek Arya.

        Presumably this is a speedup for other rendering tests as well.  We use firstChild() all over
        the rendering code w/o considering that it makes a virtual function call.
        Originally I just fixed the one callsite which was showing up on the sample to
        use children()->firstChild() directly.  However after further thought, this
        broader solution seemed the better way to go.  The first patch was a 15% win for
        this large table, this broader solution was a 30%!? win.

        The elephant in the room for this table is that we're walking the whole table
        for many nextColumn calls.  But that I will solve in a later bug.

        * rendering/RenderBlock.h:
        (WebCore::RenderBlock::firstChild):
        (WebCore::RenderBlock::lastChild):
        (RenderBlock):
        * rendering/RenderObject.h:
        (RenderObject):
        * rendering/RenderTableCol.h:
        (WebCore::RenderTableCol::firstChild):
        (WebCore::RenderTableCol::lastChild):
        (RenderTableCol):

2012-10-31  Philippe Normand  <pnormand@igalia.com>

        Spatialized panning renders incorrectly with USE_CONCATENATED_IMPULSE_RESPONSES
        https://bugs.webkit.org/show_bug.cgi?id=98294

        Reviewed by Chris Rogers.

        Regenerated the concatenated impulse responses file with
        elevations in increasing order per azimuth. In the previous
        version of this file the elevations for 315, 330 and 345 were
        concatenated at the wrong indexes.

        * platform/audio/resources/Composite.wav:

2012-10-31  Tim Horton  <timothy_horton@apple.com>

        Full-page PDFPlugin should support inline form editing
        https://bugs.webkit.org/show_bug.cgi?id=100155

        Reviewed by Dan Bernstein.

        Add form controls corresponding to Text and Choice PDF annotations,
        allowing for single- and multi-line text input, and <option>-like input.

        Currently, forms are only implemented for full-page PDF documents.

        * WebCore.exp.in: Expose a variety of additional WebCore functionality to WebKit2.
        * WebCore.xcodeproj/project.pbxproj: Expose some more WebCore headers as private headers for use in WebKit2.

2012-10-30  Eric Seidel  <eric@webkit.org>

        RoboHornetPro spends ~25% of total test time in WebCore::Region::Shape methods
        https://bugs.webkit.org/show_bug.cgi?id=98800

        Reviewed by Sam Weinig.

        This patch brings our total RoboHornetPro time from 8.2 seconds to 5.3 seconds!

        OverlapMap previously used Regions to track Layer bounds rects. 
        Unfortunately unioning a list of Regions is O(N^2)
        where N is the number of Shapes (in this case rects).
        This is because Shapes are immutable, so to union two shapes, we copy
        both Shapes' segment/span vectors into a single new Shape.
        Thus if we union a set of M Regions, each with 1 Shape, we'll end up copying
        the segments of the first Shape N times before we have the final Region/Shape
        and the second shape N-1 times. The sum of 1 to N is (N*(N-1))/2 aka order N^2.
        Fixing the N^2 algorithm covered by https://bugs.webkit.org/show_bug.cgi?id=100814.

        For now we just avoid this O(N^2) by moving away from Region, since OverlapMap
        doesn't need it. We just collect a vector of the layer rects and hit-test that directly.
        Hit-testing the rect list is O(N), just like hit-testing the same information in a Region would be.

        Even better for us is that the OverlapMap is never even used in RoboHornetPro.
        We just collect these rects to end up doing nothing with them. :)

        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::OverlapMap::add):
        (WebCore::RenderLayerCompositor::OverlapMap::overlapsLayers):
        (WebCore::RenderLayerCompositor::OverlapMap::pushCompositingContainer):
        (WebCore::RenderLayerCompositor::OverlapMap::popCompositingContainer):
        (RenderLayerCompositor::OverlapMap):

2012-10-30  Beth Dakin  <bdakin@apple.com>

        https://bugs.webkit.org/show_bug.cgi?id=100813
        ScrollingCoordinatorMac::stateNodeForID() should return a 
        ScrollingStateNode* instead of a ScrollingStateScrollingNode*

        Reviewed by Sam Weinig.

        ScrollingCoordinatorMac::stateNodeForID() should return a 
        ScrollingStateNode* instead of a ScrollingStateScrollingNode* so that 
        it can be used for other types of nodes once we add them.
        * page/scrolling/mac/ScrollingCoordinatorMac.h:
        (ScrollingCoordinatorMac):
        * page/scrolling/mac/ScrollingCoordinatorMac.mm:
        (WebCore::ScrollingCoordinatorMac::frameViewLayoutUpdated):
        (WebCore::ScrollingCoordinatorMac::recomputeWheelEventHandlerCountForFrameView):
        (WebCore::ScrollingCoordinatorMac::requestScrollPositionUpdate):
        (WebCore::ScrollingCoordinatorMac::stateNodeForID):

2012-10-30  Keishi Hattori  <keishi@webkit.org>

        F4 inside <input type=time> should not open calendar picker
        https://bugs.webkit.org/show_bug.cgi?id=100730

        Reviewed by Kent Tamura.

        We lacked the check to see if the picker indicator is visible.

        Test: fast/forms/time-multiple-fields/time-multiple-fields-open-picker-key-bindings.html

        * html/BaseMultipleFieldsDateAndTimeInputType.cpp:
        (WebCore::BaseMultipleFieldsDateAndTimeInputType::handleKeydownEvent): Check if picker indicator is visible.

2012-10-30  Kent Tamura  <tkent@chromium.org>

        Delaying 'change' and 'input' event dispatching during HTMLInputElement::setValue
        https://bugs.webkit.org/show_bug.cgi?id=100772

        Reviewed by Abhishek Arya.

        'change' and 'input' events are asynchronous and not
        cancelable. We can use ScopedEvent.

        Test: fast/forms/range/range-type-change-onchange.html

        * dom/Node.cpp:
        (WebCore::Node::dispatchChangeEvent): Use dispatchScopedEvent.
        (WebCore::Node::dispatchInputEvent): Ditto.
        * html/HTMLInputElement.cpp:
        (WebCore::HTMLInputElement::setValue):
        Make a scope to delay event dispatching.
        * html/RangeInputType.cpp:
        (WebCore::RangeInputType::handleKeydownEvent): Ditto.

2012-10-30  Simon Fraser  <simon.fraser@apple.com>

        Fix issues with filters and reflections
        https://bugs.webkit.org/show_bug.cgi?id=100308

        Reviewed by Dirk Schulze.

        Composited filters were being applied to the wrong CALayer. The code used
        primaryLayer(), which may be a CATransformLayer (which filters cannot apply
        to; doing so causes console spew), or a CALayer that is used for reflection
        flattening, which again is the wrong layer.

        Test: css3/filters/composited-reflected.html

        * platform/graphics/ca/GraphicsLayerCA.cpp:
        (WebCore::GraphicsLayerCA::updateContentsVisibility): Replace .get()-> with ->
        (WebCore::GraphicsLayerCA::updateContentsOpaque): Ditto.
        (WebCore::GraphicsLayerCA::updateFilters): Apply filters to m_layer, not primaryLayer(),
        and use m_layerClones, not primaryLayerClones().
        (WebCore::GraphicsLayerCA::cloneLayer): When cloning a layer for reflections, copy filters
        from the source layer.
        * platform/graphics/ca/PlatformCALayer.h:
        (PlatformCALayer): Add a member function to copy filters from a supplied layer.
        * platform/graphics/ca/mac/PlatformCALayerMac.mm:
        (PlatformCALayer::setFilters): Remove blank line.
        (PlatformCALayer::copyFiltersFrom): Copy CAFIlters from the given layer.
        * platform/graphics/ca/win/PlatformCALayerWin.cpp:
        (PlatformCALayer::copyFiltersFrom): Stub; no filters on Windows.

2012-10-30  Beth Dakin  <bdakin@apple.com>

        https://bugs.webkit.org/show_bug.cgi?id=100809
        ScrollingCoordinator::attachToStateTree() should take an enum 
        indicating what type of node to create

        Reviewed by Simon Fraser.

        New enum ScrollingNodeType will soon have other values, such as 
        FixedNode.
        * page/scrolling/ScrollingCoordinator.h:
        (WebCore::ScrollingCoordinator::attachToStateTree):
        * page/scrolling/mac/ScrollingCoordinatorMac.h:
        (ScrollingCoordinatorMac):

        This patch generalizes this function so that it can be used to create 
        different types of nodes and so that it is actually ready to create 
        child nodes. 
        * page/scrolling/mac/ScrollingCoordinatorMac.mm:
        (WebCore::ScrollingCoordinatorMac::attachToStateTree):

        The rootStateNode is always a ScrollingNode.
        (WebCore::ScrollingCoordinatorMac::ensureRootStateNodeForFrameView):

        For the time being, always create a ScrollingNode.
        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::attachToScrollingCoordinator):

2012-10-30  Gregg Tavares  <gman@google.com>

        Set the initial scissor box for WebGL
        https://bugs.webkit.org/show_bug.cgi?id=100804

        Reviewed by Kenneth Russell.

        The initial scissor box needs to be set for WebGL

        No new tests as no new functionality.

        * html/canvas/WebGLRenderingContext.cpp:
        (WebCore):
        (WebCore::WebGLRenderingContext::initializeNewContext):

2012-10-30  Charles Wei  <charles.wei@torchmobile.com.cn>

        [BlackBerry] PurgeCredential should also purge the persisted credential store
        https://bugs.webkit.org/show_bug.cgi?id=100744

        Reviewed by George Staikos.

        When challenged by the server, we will check the credential in-memory and from the persistent storage.
        So the invalid credentials should also be purged from the persistent credential storage; Otherwise,
        it will be sent to the server next time been challenged, instead of prompting the user.

        * platform/network/blackberry/NetworkJob.cpp:
        (WebCore::NetworkJob::purgeCredentials):

2012-10-30  Allan Sandfeld Jensen  <allan.jensen@digia.com>

        DOM URL is flaky when workers are used
        https://bugs.webkit.org/show_bug.cgi?id=99178

        Reviewed by Geoffrey Garen.

        Extend JSNoStaticTables to also avoid direct access of static tables in constructor objects.

        Test: fast/workers/worker-domurl.html

        * bindings/scripts/CodeGeneratorJS.pm:
        (constructorHashTableAccessor):
        (GenerateConstructorDefinition):

2012-10-30  Jae Hyun Park  <jae.park@company100.net>

        Coordinated Graphics: Remove unused methods
        https://bugs.webkit.org/show_bug.cgi?id=100799

        Reviewed by Noam Rosenthal.

        Currently, there are several unused methods regarding Coordinated
        Graphics. This patch removes those unused methods.

        No new tests (No change in behavior).

        * platform/graphics/texmap/TextureMapperGL.cpp:

2012-10-30  Hans Muller  <hmuller@adobe.com>

        [CSS Exclusions] Multiple segment polygon layout does not get all segments
        https://bugs.webkit.org/show_bug.cgi?id=100039

        Reviewed by Dirk Schulze.

        Corrected the algorithm for computing included polygon intervals for rectilinear polygons,
        and polygons with horizontal edges in general.

        Tests: fast/exclusions/shape-inside/shape-inside-rectilinear-polygon-001.html
               fast/exclusions/shape-inside/shape-inside-rectilinear-polygon-002.html

        * rendering/ExclusionPolygon.cpp: Removed some internal dead code related to the no-longer-used sortedEdgesMinY Vector.
        (WebCore::ExclusionPolygon::ExclusionPolygon): Initialize new ExclusionPolygonEdge edgeIndex field.
        (WebCore::getVertexIntersectionVertices): Return the previous, next, and target vertex indices for a vertex intersection.
        (WebCore::ExclusionPolygon::computeXIntersections): Refactored the core of this method to improve handling of horizontal edges.
        (WebCore::ExclusionPolygon::computeEdgeIntersections): Ignore zero-width edges.
        * rendering/ExclusionPolygon.h: Removed the rightVertexY() method, since it's no longer used.
        (WebCore::ExclusionPolygon::edgeAt): New method.
        (WebCore::ExclusionPolygon::numberOfEdges): New method.
        (ExclusionPolygon): Added support for retrieving edges.
        (WebCore::ExclusionPolygonEdge::vertex1): Use vertex1Index.
        (WebCore::ExclusionPolygonEdge::vertex2): Use vertex2Index.
        (ExclusionPolygonEdge): Renamed index1, index2 fields to vertex1Index, vertex2Index.
        (WebCore::ExclusionPolygonEdge::previousEdge): New method.
        (WebCore::ExclusionPolygonEdge::nextEdge): New method.

2012-10-30  Chris Evans  <cevans@google.com>

        Improve performance of MaskPtr.
        https://bugs.webkit.org/show_bug.cgi?id=100790

        Reviewed by Eric Seidel.

        Calculate the mask once, and store it as a fast-access member variable.
        Also avoid unneccessary integer width expansion in index calculation.
        Parser/tiny-innerHTML.html has a high stddev.
        Best result I've seen pre-patch is 5.70 runs/s.
        Best result I've seen post-patch is 5.72 runs/s, but this is not statistically significant.
        MaskPtr is still showing as ~2% in the profile, so we're not sure we trust the profile symbolization at this time.
        MaskPtr is now reduced to a single inline instruction (was: 4) so this seems like a strict improvement worth landing.

        * rendering/RenderArena.cpp:
        (MaskPtr): Use a passed-in mask for the mask operation.
        (WebCore::RenderArena::RenderArena): Calculate the mask and store it.
        (WebCore::RenderArena::allocate):
        (WebCore::RenderArena::free): Use stored mask and avoid unneccessary casts.
        * rendering/RenderArena.h:
        (RenderArena): Store the freelist mask as a member variable.

2012-10-30  Kenichi Ishibashi  <bashi@chromium.org>

        local(Helvetica) in src descriptor prevent fallback
        https://bugs.webkit.org/show_bug.cgi?id=100446

        Reviewed by Dan Bernstein.

        FontCache::getCachedFontData() has a mechanism that aliases a few pairs
        of font family names, so that if the family name specified in the font-family
        property is not available on the system, but the its alias is available,
        it will be used instead. This is appropriate for the font-family property,
        but not for font family names specified in the local() function of the src
        descriptor in a @font-face rule.

        This patch disables the mechanism while checking src descriptor of @font-face.

        No new tests. It's difficult to test the change because 'Helvetica' can
        be mapped any other font. For example, chromium DRT uses FontConfig to
        map Helvetica to Times New Roman. Other ports may map Helvetica to other
        fonts. We can't define the expected result.

        * css/CSSFontFaceSource.cpp:
        (WebCore::CSSFontFaceSource::getFontData):
        Call fontCache()->getCachedFontData() with checkingAlternateName = true.
        This disables aliasing font family names in FontCache.

2012-10-30  Beth Dakin  <bdakin@apple.com>

        https://bugs.webkit.org/show_bug.cgi?id=100796
        Should add FixedPositionViewportConstraints to ScrollingConstraints.h

        Reviewed by Simon Fraser.

        ScrollingConstraints.h currently contains an abstract class called 
        ViewportConstraints that is intended to encapsulate data and logic 
        required to reposition elements whose layout depends on the viewport 
        rect (positions fixed and sticky), when scrolling and zooming. 
        However, at this time there is only a subclass for sticky. We should 
        add a sub-class for fixed. This is required to get pages with fixed 
        position elements scrolling on the scrolling thread.

        * page/scrolling/ScrollingConstraints.cpp:
        (WebCore::FixedPositionViewportConstraints::layerPositionForViewportRect):
        (WebCore):
        * page/scrolling/ScrollingConstraints.h:
        (WebCore::ViewportConstraints::ViewportConstraints):
        (ViewportConstraints):
        (WebCore::ViewportConstraints::setAnchorEdges):
        (FixedPositionViewportConstraints):
        (WebCore::FixedPositionViewportConstraints::FixedPositionViewportConstraints):
        (WebCore::FixedPositionViewportConstraints::viewportRectAtLastLayout):
        (WebCore::FixedPositionViewportConstraints::setViewportRectAtLastLayout):
        (WebCore::FixedPositionViewportConstraints::layerPositionAtLastLayout):
        (WebCore::FixedPositionViewportConstraints::setLayerPositionAtLastLayout):
        (WebCore):

2012-10-30  Tiancheng Jiang  <tijiang@rim.com>

        [BlackBerry] update form theme for BB10.
        https://bugs.webkit.org/show_bug.cgi?id=100760

        Reviewed by Rob Buis.

        RIM PR:222126
        Introduce slide function to paint new theme for the form controls.

        No new tests.

        * css/themeBlackBerry.css:
        (select):
        * platform/blackberry/RenderThemeBlackBerry.cpp:
        (WebCore):
        (WebCore::drawControl): Added.
        (WebCore::drawThreeSlice): Added.
        (WebCore::drawNineSlice): Added.
        (WebCore::loadImage): Added.
        (WebCore::RenderThemeBlackBerry::systemFont): Modified.
        (WebCore::RenderThemeBlackBerry::paintTextFieldOrTextAreaOrSearchField): Modified.
        (WebCore::RenderThemeBlackBerry::paintCheckbox): Modified.
        (WebCore::RenderThemeBlackBerry::paintRadio): Modified.
        (WebCore::RenderThemeBlackBerry::paintButton): Modified.
        (WebCore::RenderThemeBlackBerry::paintMenuList): Modified.
        (WebCore::RenderThemeBlackBerry::paintMenuListButton): Modified.
        (WebCore::RenderThemeBlackBerry::paintSliderTrackRect): Modified.
        (WebCore::RenderThemeBlackBerry::paintSliderThumb): Modified.
        * platform/blackberry/RenderThemeBlackBerry.h:
        (RenderThemeBlackBerry):

2012-10-30  Rick Byers  <rbyers@chromium.org>

        cssText for cursor property doesn't include hotspot
        https://bugs.webkit.org/show_bug.cgi?id=99530

        Reviewed by Darin Adler.

        Implement customCssText in CSSCursorImageValue to include the hotspot when present.
        Also explicitly track whether or not a hotspot was supplied in the parser,
        while still using the existing convention of (-1,-1) to denote no hotspot
        in the rest of the system.

        Test: fast/css/cursor-parsing.html

        * css/CSSCursorImageValue.cpp:
        (WebCore::CSSCursorImageValue::customCssText):
        * css/CSSCursorImageValue.h:
        (CSSCursorImageValue):

2012-10-30  Kenneth Russell  <kbr@google.com>

        Temporarily restrict use of ImageBufferSkia::copyToPlatformTexture until bugs resolved
        https://bugs.webkit.org/show_bug.cgi?id=100714

        Reviewed by Stephen White.

        For the moment, only use ImageBuffer::copyToPlatformTexture when
        copying to RGBA/UNSIGNED_BYTE textures, and document restriction
        in header. Restriction will be lifted once the implementations
        (currently only Chromium has one) have been fixed; see bug 100715.

        No new tests; manually ran WebGL conformance test
        tex-image-and-sub-image-2d-with-canvas-rgba5551.html on NVIDIA
        hardware on Mac OS.

        * html/canvas/WebGLRenderingContext.cpp:
        (WebCore):
        (WebCore::WebGLRenderingContext::texImage2D):
        * platform/graphics/ImageBuffer.h:
        (ImageBuffer):

2012-10-30  Nico Weber  <thakis@chromium.org>

        Fix potential overflow in jpeg exif reader. Found by aedla@google.com.
        https://bugs.webkit.org/show_bug.cgi?id=100320

        Reviewed by Eric Seidel.

        Adding more than 1 element past an array is undefined, so don't do it.

        No test, since in practice ifd will just overflow and `end - ifd` will
        become much larget than 2 and the `if (end - ifd < 2)` a few lines
        down will catch that case.

        * platform/image-decoders/jpeg/JPEGImageDecoder.cpp:
        (WebCore::readImageOrientation):

2012-10-26  Alexandru Chiculita  <achicu@adobe.com>

        [CSS Shaders] Add the ValidatedCustomFilterOperation class
        https://bugs.webkit.org/show_bug.cgi?id=100558

        Reviewed by Dean Jackson.

        Added the ValidatedCustomFilterOperation class. The file is now almost empty,
        but more is going to come in the following patches.

        Added the a filter operation type VALIDATED_CUSTOM and updated the compositors to ignore
        such operations for now.
        
        No new tests, there is no new functionality yet.

        * CMakeLists.txt:
        * GNUmakefile.list.am:
        * Target.pri:
        * WebCore.gypi:
        * WebCore.vcproj/WebCore.vcproj:
        * WebCore.xcodeproj/project.pbxproj:
        * css/CSSComputedStyleDeclaration.cpp:
        (WebCore::CSSComputedStyleDeclaration::valueForFilter):
        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::createFilterOperations):
        * platform/graphics/blackberry/LayerWebKitThread.cpp:
        (WebCore::LayerWebKitThread::filtersCanBeComposited):
        * platform/graphics/ca/mac/PlatformCALayerMac.mm:
        (PlatformCALayer::filtersCanBeComposited):
        * platform/graphics/chromium/GraphicsLayerChromium.cpp:
        (WebCore::copyWebCoreFilterOperationsToWebFilterOperations):
        * platform/graphics/filters/FilterOperation.h:
        * platform/graphics/filters/FilterOperations.cpp:
        (WebCore::FilterOperations::hasCustomFilter):
        (WebCore::FilterOperations::getOutsets):
        * platform/graphics/filters/ValidatedCustomFilterOperation.cpp: Added.
        (WebCore):
        (WebCore::ValidatedCustomFilterOperation::ValidatedCustomFilterOperation):
        (WebCore::ValidatedCustomFilterOperation::~ValidatedCustomFilterOperation):
        (WebCore::ValidatedCustomFilterOperation::blend):
        * platform/graphics/filters/ValidatedCustomFilterOperation.h: Added.
        (WebCore):
        (ValidatedCustomFilterOperation):
        (WebCore::ValidatedCustomFilterOperation::create):
        (WebCore::ValidatedCustomFilterOperation::affectsOpacity):
        (WebCore::ValidatedCustomFilterOperation::movesPixels):
        (WebCore::ValidatedCustomFilterOperation::blendingNeedsRendererSize):
        (WebCore::ValidatedCustomFilterOperation::operator==):

2012-10-30  Joseph Pecoraro  <pecoraro@apple.com>

        [Mac] Sync up FeatureDefine Configuration Files
        https://bugs.webkit.org/show_bug.cgi?id=100171

        Reviewed by David Kilzer.

        Follow up to better coordinate with iOS feature defines. Make:

          - ENABLE_FILTERS always on
          - ENABLE_INPUT_* iphonesimulator values point to the iphoneos values

        * Configurations/FeatureDefines.xcconfig:

2012-10-30  Joseph Pecoraro  <pecoraro@apple.com>

        [Mac] Sync up FeatureDefine Configuration Files
        https://bugs.webkit.org/show_bug.cgi?id=100171

        Reviewed by David Kilzer.

        Ensure an identical FeatureDefine files across all projects. Changes:

          - ENABLE_CSS_BOX_DECORATION_BREAK should be in all
          - ENABLE_PDFKIT_PLUGIN should be in all
          - ENABLE_RESOLUTION_MEDIA_QUERY should be in all
          - ENABLE_ENCRYPTED_MEDIA should be in all
          - ENABLE_HIDDEN_PAGE_DOM_TIMER_THROTTLING with corrected value
          - Some alphabetical ordering cleanup

        * Configurations/FeatureDefines.xcconfig:

2012-10-30  Andreas Kling  <kling@webkit.org>

        StylePropertySet: Convert more logic to use PropertyReference.
        <http://webkit.org/b/100779>

        Reviewed by Antti Koivisto.

        Rewrite more of the StylePropertySet logic to use PropertyReference instead of CSSProperty.
        This is cleanup before changing the internal storage layout of immutable StylePropertySet.

        * css/CSSComputedStyleDeclaration.cpp:
        (WebCore::CSSComputedStyleDeclaration::cssPropertyMatches):
        * css/CSSComputedStyleDeclaration.h:
        * css/CSSStyleDeclaration.h:
        * css/PropertySetCSSStyleDeclaration.cpp:
        (WebCore::PropertySetCSSStyleDeclaration::cssPropertyMatches):
        * css/PropertySetCSSStyleDeclaration.h:
        * css/StylePropertySet.cpp:
        (WebCore::StylePropertySet::appendFontLonghandValueIfExplicit):
        (WebCore::StylePropertySet::fontValue):
        (WebCore::StylePropertySet::get4Values):
        (WebCore::StylePropertySet::getPropertyCSSValue):
        (WebCore::StylePropertySet::removeProperty):
        (WebCore::StylePropertySet::propertyIsImportant):
        (WebCore::StylePropertySet::getPropertyShorthand):
        (WebCore::StylePropertySet::isPropertyImplicit):
        (WebCore::StylePropertySet::setProperty):
        (WebCore::StylePropertySet::mergeAndOverrideOnConflict):
        (WebCore::StylePropertySet::findPropertyIndex):
        (WebCore::StylePropertySet::findMutableCSSPropertyWithID):
        (WebCore::StylePropertySet::propertyMatches):
        (WebCore::StylePropertySet::removeEquivalentProperties):
        * css/StylePropertySet.h:
        (WebCore::StylePropertySet::PropertyReference::shorthandID):
        (WebCore::StylePropertySet::PropertyReference::isImplicit):

2012-10-30  Eric Seidel  <eric@webkit.org>

        Teach RenderTable how to use Vector::insert and Vector::append instead of its own custom memmove code
        https://bugs.webkit.org/show_bug.cgi?id=100428

        Reviewed by Julien Chaffraix.

        RenderTable is now like all other clients of Vector instead of being
        needlessly different. :)

        insert, append and grow all use the same expandCapacity logic under the covers
        and Vector::insert uses TypeOperations::moveOverlapping which should use memmove
        by default for unknown types.

        * rendering/RenderTable.cpp:
        (WebCore::RenderTable::splitColumn):
        (WebCore::RenderTable::appendColumn):
        * rendering/RenderTable.h:
        (WebCore::RenderTable::ColumnStruct::ColumnStruct):

2012-10-30  Vincent Scheib  <scheib@chromium.org>

        Unreviewed, rolling out r132927.
        http://trac.webkit.org/changeset/132927
        https://bugs.webkit.org/show_bug.cgi?id=100558

        Compile error on Chromium builders

        * CMakeLists.txt:
        * GNUmakefile.list.am:
        * Target.pri:
        * WebCore.gypi:
        * WebCore.vcproj/WebCore.vcproj:
        * WebCore.xcodeproj/project.pbxproj:
        * css/CSSComputedStyleDeclaration.cpp:
        (WebCore::CSSComputedStyleDeclaration::valueForFilter):
        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::createFilterOperations):
        * platform/graphics/blackberry/LayerWebKitThread.cpp:
        (WebCore::LayerWebKitThread::filtersCanBeComposited):
        * platform/graphics/ca/mac/PlatformCALayerMac.mm:
        (PlatformCALayer::filtersCanBeComposited):
        * platform/graphics/chromium/GraphicsLayerChromium.cpp:
        (WebCore::copyWebCoreFilterOperationsToWebFilterOperations):
        * platform/graphics/filters/FilterOperation.h:
        * platform/graphics/filters/FilterOperations.cpp:
        (WebCore::FilterOperations::hasCustomFilter):
        (WebCore::FilterOperations::getOutsets):
        * platform/graphics/filters/ValidatedCustomFilterOperation.cpp: Removed.
        * platform/graphics/filters/ValidatedCustomFilterOperation.h: Removed.

2012-10-30  W. James MacLean  <wjmaclean@chromium.org>

        [chromium] Restrict link highlights to targets that display a hand-cursor
        https://bugs.webkit.org/show_bug.cgi?id=99862

        Reviewed by James Robinson.

        To avoid applying highlights to inappropriate targets, such as large divs with
        click handlers installed, test candidate targets and only highlight them if they
        would normally display a hand cursor on mouse over. This is a heuristic, but has
        been tested and found effective in practice.

        This CL refactors EventHandler::selectCursor() to make the logic for determining
        if CURSOR_AUTO should resolve to CURSOR_POINTER available outside EventHandler.

        Relies on existing cursor tests.

        * page/EventHandler.cpp:
        (WebCore::EventHandler::useHandCursor):
        (WebCore):
        (WebCore::EventHandler::selectCursor):
        * page/EventHandler.h:
        (EventHandler):

2012-10-30  Rob Buis  <rbuis@rim.com>

        [BlackBerry] Remove CookieDatabaseBackingStore::upgradeTableIfNeeded
        https://bugs.webkit.org/show_bug.cgi?id=100783

        Reviewed by Yong Li.

        PR 220513.

        Remove CookieDatabaseBackingStore::upgradeTableIfNeeded, it was needed for backwards
        compatibility, but not needed anymore.

        * platform/blackberry/CookieDatabaseBackingStore/CookieDatabaseBackingStore.cpp:
        (WebCore::CookieDatabaseBackingStore::invokeOpen):
        * platform/blackberry/CookieDatabaseBackingStore/CookieDatabaseBackingStore.h:

2012-10-30  Glenn Adams  <glenn@skynav.com>

        [CSS] Expand -webkit-line-break value space
        https://bugs.webkit.org/show_bug.cgi?id=100739

        Reviewed by Eric Seidel.

        (1) expand -webkit-line-break to include new values defined by CSS3 Text [1], i.e., 'auto', 'strict', 'loose';
        (2) change default (initial) value for -webkit-line-break to 'auto' to match CSS3 Text;
        (3) rename enum EKHTMLLineBreak to LineBreak, renaming enum values appropriately;

        New tests to be added when functionality of new values is added. No rendering behavior change at this time.
        Only externally visible change is default (initial) value returning 'auto' rather than 'normal', for which 3 existing
        tests that were sensitive to this value have been updated. Note that until the functionality for the new values is
        added, any actual use of the new values will be treated as the same as the pre-existing 'normal' value, i.e., the
        default semantics.

        * css/CSSComputedStyleDeclaration.cpp:
        (WebCore::CSSComputedStyleDeclaration::getPropertyCSSValue):
        Update from kthmlLineBreak() to lineBreak().

        * css/CSSParser.cpp:
        (WebCore::isValidKeywordPropertyAndValue):
        Update values supported for CSSPropertyWebkitLineBreak.

        * css/CSSPrimitiveValueMappings.h:
        (WebCore::CSSPrimitiveValue::CSSPrimitiveValue):
        (WebCore::CSSPrimitiveValue::operator LineBreak):
        Update LineBreak enumeration values (previously EKHTMLLineBreak).

        * css/CSSValueKeywords.in:
        Update keywords used for -webkit-line-break.

        * css/StyleBuilder.cpp:
        (WebCore::StyleBuilder::StyleBuilder):
        Update names for line break style getter/setter.

        * rendering/style/RenderStyle.cpp:
        (WebCore::RenderStyle::diff):
        Remove khtml prefix on line break related state.

        * rendering/style/RenderStyle.h:
        Remove khtml prefix on line break related methods. Update to redefined LineBreak
        enumeration type.

        * rendering/style/RenderStyleConstants.h:
        Rename EKHTMLLineBreak enumeration to LineBreak.
        Redefine LineBreak enumeration to include new CSS3 Text modes (auto, loose, strict) and
        use better names.

        * rendering/style/StyleRareInheritedData.cpp:
        (WebCore::StyleRareInheritedData::StyleRareInheritedData):
        (WebCore::StyleRareInheritedData::operator==):
        Remove khtml prefix on line break related state references.

        * rendering/style/StyleRareInheritedData.h:
        (StyleRareInheritedData):
        Remove khtml prefix on line break related state. Widen field to 3 bits to support 8 values,
        of which 5 are now used.

2012-10-30  Antti Koivisto  <antti@apple.com>

        Avoid unnecessary style recalcs on class attribute mutation
        https://bugs.webkit.org/show_bug.cgi?id=100776

        Reviewed by Andreas Kling.

        There is no need to invalidate element style on class attribute change if neither the added
        or removed classes featured in any active stylesheet.

        * css/RuleFeature.cpp:
        (WebCore::RuleFeatureSet::add):
        (WebCore::RuleFeatureSet::clear):
        (WebCore::RuleFeatureSet::reportMemoryUsage):
        * css/RuleFeature.h:
        (RuleFeatureSet):
        * css/RuleSet.cpp:
        (WebCore::collectFeaturesFromSelector):
        
            Collect classes mentioned in CSS selectors the same way ids and attribute names are
            already collected.

        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::hasSelectorForClass):
        
            Add a method to test if a given class name is mentioned anywhere in stylehseets.

        (WebCore):
        * css/StyleResolver.h:
        * css/StyleScopeResolver.h:
        (WebCore):
        * dom/Element.cpp:
        (WebCore::collectAddedAndRemovedClasses):
        (WebCore):
        (WebCore::Element::classAttributeChanged):
        
            Figure out which classes were added and removed. Test if they are present in any style
            rule and invalidate the style only if they are.

        * dom/SpaceSplitString.cpp:
        (WebCore::SpaceSplitStringData::add):
        (WebCore::SpaceSplitStringData::remove):
        (WebCore::SpaceSplitString::add):
        (WebCore::SpaceSplitString::remove):
        
            Added bool return value to indicate if anything was actually removed. Reorganized 
            the code a bit to avoid unnecessary uniquing when nothing changes.

        * dom/SpaceSplitString.h:
        (SpaceSplitStringData):
        (SpaceSplitString):

2012-10-30  Robert Hogan  <robert@webkit.org>

        white-space: nowrap inline element beside a floated element wraps incorrectly without trailing textnode/newline
        https://bugs.webkit.org/show_bug.cgi?id=29648

        Reviewed by Levi Weintraub.

        A no-wrap child on a line inside an autowrap container should move to the next line if a float doesn't allow
        it to fit. This will happen if there is trailing space after the no-wrap child but not if it's the last renderer
        on the line. This is because nextLineBreak() is only interested in the white-space style of the current renderer 
        and the renderer's next sibling (if there is one) when deciding whether it needs to fit below any floats that
        push it beyond the edge of the container. There isn't any situation in which a no-wrap child shouldn't move 
        below a float on an auto-wrap line though, so this check always needs to respect the container's white-space style too.

        Test: fast/text/whitespace/no-wrap-child-in-auto-wrap-container.html

        * rendering/RenderBlockLineLayout.cpp:
        (WebCore::RenderBlock::LineBreaker::nextLineBreak):

2012-10-26  Alexandru Chiculita  <achicu@adobe.com>

        [CSS Shaders] Add the ValidatedCustomFilterOperation class
        https://bugs.webkit.org/show_bug.cgi?id=100558

        Reviewed by Dean Jackson.

        Added the ValidatedCustomFilterOperation class. The file is now almost empty,
        but more is going to come in the following patches.

        Added the a filter operation type VALIDATED_CUSTOM and updated the compositors to ignore
        such operations for now.
        
        No new tests, there is no new functionality yet.

        * CMakeLists.txt:
        * GNUmakefile.list.am:
        * Target.pri:
        * WebCore.gypi:
        * WebCore.vcproj/WebCore.vcproj:
        * WebCore.xcodeproj/project.pbxproj:
        * css/CSSComputedStyleDeclaration.cpp:
        (WebCore::CSSComputedStyleDeclaration::valueForFilter):
        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::createFilterOperations):
        * platform/graphics/blackberry/LayerWebKitThread.cpp:
        (WebCore::LayerWebKitThread::filtersCanBeComposited):
        * platform/graphics/ca/mac/PlatformCALayerMac.mm:
        (PlatformCALayer::filtersCanBeComposited):
        * platform/graphics/chromium/GraphicsLayerChromium.cpp:
        (WebCore::copyWebCoreFilterOperationsToWebFilterOperations):
        * platform/graphics/filters/FilterOperation.h:
        * platform/graphics/filters/FilterOperations.cpp:
        (WebCore::FilterOperations::hasCustomFilter):
        (WebCore::FilterOperations::getOutsets):
        * platform/graphics/filters/ValidatedCustomFilterOperation.cpp: Added.
        (WebCore):
        (WebCore::ValidatedCustomFilterOperation::ValidatedCustomFilterOperation):
        (WebCore::ValidatedCustomFilterOperation::~ValidatedCustomFilterOperation):
        (WebCore::ValidatedCustomFilterOperation::blend):
        * platform/graphics/filters/ValidatedCustomFilterOperation.h: Added.
        (WebCore):
        (ValidatedCustomFilterOperation):
        (WebCore::ValidatedCustomFilterOperation::create):
        (WebCore::ValidatedCustomFilterOperation::affectsOpacity):
        (WebCore::ValidatedCustomFilterOperation::movesPixels):
        (WebCore::ValidatedCustomFilterOperation::blendingNeedsRendererSize):
        (WebCore::ValidatedCustomFilterOperation::operator==):

2012-10-29  Anders Carlsson  <andersca@apple.com>

        Build WebKit as C++11 on Mac
        https://bugs.webkit.org/show_bug.cgi?id=100720

        Reviewed by Daniel Bates.

        * Configurations/Base.xcconfig:
        Add CLANG_CXX_LANGUAGE_STANDARD=gnu++0x.

        * platform/graphics/FontPlatformData.h:
        (WebCore::FontPlatformData::hash):
        * platform/graphics/cg/GraphicsContextCG.cpp:
        (WebCore::GraphicsContext::drawLine):
        (WebCore::GraphicsContext::strokeArc):
        * platform/graphics/filters/CustomFilterProgramInfo.cpp:
        (WebCore::CustomFilterProgramInfo::hash):
        (WebCore::ProtectionSpaceHash::hash):
        * platform/network/cf/FormDataStreamCFNet.cpp:
        (WebCore::setHTTPBody):
        Add static_casts to prevent implicit type conversions in non-constant initializer lists.
        
        * platform/mac/ClipboardMac.mm:
        (WebCore::ClipboardMac::createDragImage):
        * platform/mac/CursorMac.mm:
        (WebCore::createNamedCursor):
        * platform/mac/ScrollViewMac.mm:
        (WebCore::ScrollView::platformSetContentsSize):
        Use NSMakePoint to prevent implicit type conversions in non-constant initializer lists.

        * platform/mac/CookieJar.mm:
        (WebCore::cookiesEnabled):
        * platform/network/mac/ResourceHandleMac.mm:
        (WebCore::shouldRelaxThirdPartyCookiePolicy):
        Add explicit casts to NSHTTPCookieAcceptPolicy.

        * platform/mac/WebCoreNSURLExtras.h:
        * platform/mac/WebCoreNSURLExtras.mm:
        (WebCore::URLByTruncatingOneCharacterBeforeComponent):
        (WebCore::dataForURLComponentType):
        * platform/network/ProtectionSpaceHash.h:
        Use CFIndex instead of CFURLComponentType, the enum can be mangled differently in some cases, and these
        functions are exported from WebCore.

2012-10-30  Dan Bernstein  <mitz@apple.com>

        <rdar://problem/12395187> REGRESSION (r121299): OS X Text Replacement forces cursor out of text fields
        https://bugs.webkit.org/show_bug.cgi?id=100768

        Reviewed by Anders Carlsson.

        r121299 introduced code to restore the paragraph range by saving its length and start offset
        relative to the document. The latter was obtained by iterating over the range starting at
        the beginning of the document and ending at the beginning of the paragraph range. However,
        such a range could not be constructed if the paragraph range was contained in a shadow DOM,
        since a range must have both its endpoints within the same shadow tree (or not in a shadow
        tree).

        Test: platform/mac/editing/spelling/autocorrection-in-textarea.html

        * editing/Editor.cpp:
        (WebCore::Editor::markAndReplaceFor): Changed paragraphStartIndex to be relative to the
        root container of paragraphRange, using the same logic used by
        checkForDifferentRootContainer() in Range.cpp.

2012-10-30  Dan Carney  <dcarney@google.com>

        Remove ensureAuxiliaryContext
        https://bugs.webkit.org/show_bug.cgi?id=99975

        Reviewed by Adam Barth.

        Removed auxilliaryContext as use if it is problematic in IDB.

        No new tests. No change in functionality.

        * Modules/indexeddb/IDBCursor.cpp:
        (WebCore::IDBCursor::update):
        (WebCore::IDBCursor::setValueReady):
        * Modules/indexeddb/IDBCursor.h:
        (IDBCursor):
        * Modules/indexeddb/IDBObjectStore.cpp:
        (WebCore::generateIndexKeysForValue):
        (WebCore::IDBObjectStore::put):
        (WebCore):
        * Modules/indexeddb/IDBRequest.cpp:
        (WebCore::IDBRequest::onSuccess):
        (WebCore::IDBRequest::dispatchEvent):
        * bindings/v8/IDBBindingUtilities.cpp:
        (WebCore::createIDBKeyFromScriptValueAndKeyPath):
        (WebCore::deserializeIDBValue):
        (WebCore::injectIDBKeyIntoScriptValue):
        * bindings/v8/IDBBindingUtilities.h:
        (WebCore):
        * bindings/v8/V8Binding.cpp:
        (WebCore::toV8Context):
        (WebCore):
        * bindings/v8/V8Binding.h:
        (WebCore):
        * bindings/v8/V8PerIsolateData.cpp:
        (WebCore):
        * bindings/v8/V8PerIsolateData.h:

2012-10-30  Huang Dongsung  <luxtella@company100.net>

        [CSS Shaders] Add CustomFilterRenderer to reuse this class by Accelerated Compositing.
        https://bugs.webkit.org/show_bug.cgi?id=98989

        Reviewed by Dean Jackson.

        Extract CustomFilterRenderer class from the rendering part of FECustomFilter.
        FECustomFilter now plays a role in extending FilterEffect and delegates
        rendering CSS Shaders to CustomFilterRenderer.

        CustomFilterRenderer does not know Filter and FilterEffect. We can
        create a CustomFilterRenderer instance with only GraphicsContext3D and
        CustomFilterValidatedProgram. It means that Accelerated Compositing can
        create the CustomFilterRenderer instance if Accelerated Compositing has
        GraphicsContext3D and CustomFilterOperation, and it is already possible.

        This patch prepares to enable CSS Shaders on Accelerated Compositing.

        No new tests. Covered by css3/filters/custom

        * CMakeLists.txt:
        * GNUmakefile.list.am:
        * Target.pri:
        * WebCore.gypi:
        * WebCore.vcproj/WebCore.vcproj:
        * WebCore.xcodeproj/project.pbxproj:
        * platform/graphics/filters/CustomFilterRenderer.cpp: Added.
        (WebCore):
        (WebCore::orthogonalProjectionMatrix):
        (WebCore::CustomFilterRenderer::create):
        (WebCore::CustomFilterRenderer::CustomFilterRenderer):
        (WebCore::CustomFilterRenderer::~CustomFilterRenderer):
        (WebCore::CustomFilterRenderer::premultipliedAlpha):
        (WebCore::CustomFilterRenderer::programNeedsInputTexture):
        (WebCore::CustomFilterRenderer::draw):
        (WebCore::CustomFilterRenderer::prepareForDrawing):
        (WebCore::CustomFilterRenderer::initializeCompiledProgramIfNeeded):
        (WebCore::CustomFilterRenderer::initializeMeshIfNeeded):
        (WebCore::CustomFilterRenderer::bindVertexAttribute):
        (WebCore::CustomFilterRenderer::unbindVertexAttribute):
        (WebCore::CustomFilterRenderer::bindProgramArrayParameters):
        (WebCore::CustomFilterRenderer::bindProgramNumberParameters):
        (WebCore::CustomFilterRenderer::bindProgramTransformParameter):
        (WebCore::CustomFilterRenderer::bindProgramParameters):
        (WebCore::CustomFilterRenderer::bindProgramAndBuffers):
        (WebCore::CustomFilterRenderer::unbindVertexAttributes):
        * platform/graphics/filters/CustomFilterRenderer.h: Copied from Source/WebCore/platform/graphics/filters/FECustomFilter.h.
        (WebCore):
        (CustomFilterRenderer):
          CustomFilterRenderer renders custom filters in GPU using a
          GraphicsContext3D.
        * platform/graphics/filters/FECustomFilter.cpp:
        (WebCore::FECustomFilter::FECustomFilter):
        (WebCore::FECustomFilter::create):
        (WebCore::FECustomFilter::deleteRenderBuffers):
        (WebCore::FECustomFilter::drawFilterMesh):
        (WebCore::FECustomFilter::prepareForDrawing):
        (WebCore::FECustomFilter::applyShader):
        (WebCore::FECustomFilter::resolveMultisampleBuffer):
        (WebCore::FECustomFilter::resizeMultisampleBuffers):
        (WebCore::FECustomFilter::resizeContext):
        * platform/graphics/filters/FECustomFilter.h:
        (WebCore):
        (FECustomFilter):
        * rendering/FilterEffectRenderer.cpp:
        (WebCore::createCustomFilterEffect):

2012-10-30  Mike West  <mkwst@chromium.org>

        Web Inspector: Associate console messages with the requests that caused them.
        https://bugs.webkit.org/show_bug.cgi?id=99941

        Reviewed by Pavel Feldman.

        The inspector currently supports the concept of a request's "initiator"
        in order to add context to console messages that are generated in
        response to a specific request. The initiator is used as the message's
        anchor link iff a requestID is present, and no stack trace is present.

        Currently, this functionality is only exposed to three specific
        callsites: 'InspectorConsoleAgent::didFinishXHRLoading',
        'InspectorConsoleAgent::didReceiveResponse', and
        'InspectorConsoleAgent::didFailLoading'. This patch adds a generic
        mechanism to associate requests with console messages by passing the
        request's identifier through 'ScriptExecutionContext::addConsoleMessage'
        or 'Console::addMessage' when relevant.

        This patch should have no visible changes. It just installs some new
        piping, and adjusts the three methods mentioned above to use it.
        Existing tests shouldn't break.

        * dom/Document.cpp:
        (WebCore::Document::addMessage):
        * dom/Document.h:
        (Document):
            Add a 'requestIdentifier' parameter (defaulting to 0), and pipe it
            through to Console::addMessage.
        * dom/ScriptExecutionContext.cpp:
        (WebCore::ScriptExecutionContext::addConsoleMessage):
        * dom/ScriptExecutionContext.h:
        (ScriptExecutionContext):
            Add a 'requestIdentifier' parameter (defaulting to 0), and pipe it
            through to the subclass' addMessage method.
        * inspector/ConsoleMessage.cpp:
        (WebCore::ConsoleMessage::ConsoleMessage):
            Accept an unsigned long instead of a string, and move the conversion
            from WebCore request identifiers to Inspector request identifiers
            into ConsoleMessage.
        * inspector/ConsoleMessage.h:
        (ConsoleMessage):
            Add 'requestIdentifier' (defaulting to 0) to the
            ConsoleMessage constructor that accepts a ScriptCallStack (it was
            already part of the constructor that accepted a line number).
        * inspector/IdentifiersFactory.cpp:
        (WebCore::IdentifiersFactory::requestId):
            If the provided request identifier is 0, return an empty string.
            This simplifies the logic at the callsite.
        * inspector/InspectorConsoleAgent.cpp:
        (WebCore::InspectorConsoleAgent::addMessageToConsole):
            Add a 'requestIdentifier' parameter (defaulting to 0), and pipe it
            through to the 'ConsoleMessage' constructor after converting it to
            an internal identifier via 'IdentifiersFactor::requestId'.
        (WebCore::InspectorConsoleAgent::didFinishXHRLoading):
        (WebCore::InspectorConsoleAgent::didReceiveResponse):
        (WebCore::InspectorConsoleAgent::didFailLoading):
            Use the new 'requestIdentifier' parameter on addMessageToConsole
            rather than replicating the behavior in each of these three methods.
        * inspector/InspectorConsoleAgent.h:
        (InspectorConsoleAgent):
            Add a 'requestIdentifier' parameter (defaulting to 0).
        * inspector/InspectorConsoleInstrumentation.h:
        (WebCore::InspectorInstrumentation::addMessageToConsole):
        * inspector/InspectorInstrumentation.cpp:
        (WebCore):
        (WebCore::InspectorInstrumentation::addMessageToConsoleImpl):
        * inspector/InspectorInstrumentation.h:
        (InspectorInstrumentation):
            Add a 'requestIdentifier' parameter (defaulting to 0), and pipe it
            through to lower levels of the stack.
        * page/Console.cpp:
        (WebCore::Console::addMessage):
        * page/Console.h:
        (Console):
            Add a 'requestIdentifier' parameter (defaulting to 0), and pipe it
            through to 'InspectorInstrumentation::addMessageToConsole'.
        * workers/WorkerContext.cpp:
        (WebCore::WorkerContext::addMessage):
        (WebCore::WorkerContext::addMessageToWorkerConsole):
        * workers/WorkerContext.h:
        (WorkerContext):
            Add a 'requestIdentifier' parameter (defaulting to 0), and pipe it
            through to 'InspectorInstrumentation::addMessageToConsole'.

2012-10-29  Anders Carlsson  <andersca@apple.com>

        String::createCFString should return a RetainPtr
        https://bugs.webkit.org/show_bug.cgi?id=100419

        Reviewed by Andreas Kling.

        Update callers of String::createCFString.

        * bridge/objc/objc_runtime.mm:
        (JSC::Bindings::callObjCFallbackObject):
        * html/HTMLMediaElement.cpp:
        (WebCore::createFileURLForApplicationCacheResource):
        * loader/archive/cf/LegacyWebArchive.cpp:
        (WebCore::LegacyWebArchive::createPropertyListRepresentation):
        * platform/LocalizedStrings.cpp:
        (WebCore::formatLocalizedString):
        (WebCore::contextMenuItemTagLookUpInDictionary):
        (WebCore::keygenKeychainItemName):
        (WebCore::imageTitle):
        * platform/RuntimeApplicationChecks.cpp:
        (WebCore::mainBundleIsEqualTo):
        * platform/cf/FileSystemCF.cpp:
        (WebCore::fileSystemRepresentation):
        (WebCore::pathAsURL):
        * platform/graphics/ca/win/PlatformCAAnimationWin.cpp:
        (PlatformCAAnimation::PlatformCAAnimation):
        * platform/graphics/ca/win/PlatformCALayerWin.cpp:
        (resubmitAllAnimations):
        (PlatformCALayer::addAnimationForKey):
        (PlatformCALayer::removeAnimationForKey):
        (PlatformCALayer::setName):
        * platform/graphics/ca/win/PlatformCALayerWinInternal.cpp:
        (PlatformCALayerWinInternal::updateTiles):
        * platform/graphics/cg/ImageBufferCG.cpp:
        (WebCore::utiFromMIMEType):
        * platform/graphics/cg/ImageSourceCGMac.mm:
        (WebCore::MIMETypeForImageSourceType):
        (WebCore::preferredExtensionForImageSourceType):
        * platform/mac/ClipboardMac.mm:
        (WebCore::cocoaTypeFromHTMLClipboardType):
        (WebCore::utiTypeFromCocoaType):
        * platform/mac/SSLKeyGeneratorMac.cpp:
        (WebCore::signedPublicKeyAndChallengeString):
        * platform/network/cf/AuthenticationCF.cpp:
        (WebCore::createCF):
        * platform/network/cf/CookieJarCFNet.cpp:
        (WebCore::setCookies):
        * platform/network/cf/DNSCFNet.cpp:
        (WebCore::DNSResolveQueue::platformResolve):
        * platform/network/cf/ResourceErrorCF.cpp:
        (WebCore::ResourceError::cfError):
        * platform/network/cf/ResourceHandleCFNet.cpp:
        (WebCore::setDefaultMIMEType):
        (WebCore::willSendRequest):
        (WebCore::ResourceHandle::didReceiveAuthenticationChallenge):
        (WebCore::ResourceHandle::setPrivateBrowsingEnabled):
        * platform/network/cf/ResourceRequestCFNet.cpp:
        (WebCore::setHeaderFields):
        (WebCore::ResourceRequest::doUpdatePlatformRequest):
        * platform/network/cf/ResourceResponseCFNet.cpp:
        (WebCore::ResourceResponse::cfURLResponse):
        * platform/network/cf/SocketStreamHandleCFNet.cpp:
        (WebCore::SocketStreamHandle::createStreams):
        (WebCore::SocketStreamHandle::addCONNECTCredentials):
        (WebCore::SocketStreamHandle::copyCFStreamDescription):
        * platform/network/mac/ResourceRequestMac.mm:
        (WebCore::ResourceRequest::doUpdatePlatformRequest):
        * platform/network/mac/WebCoreURLResponse.mm:
        (WebCore::adjustMIMETypeIfNecessary):
        * platform/text/cf/HyphenationCF.cpp:
        (WebCore::::createValueForKey):
        * platform/text/cf/StringCF.cpp:
        (WTF::String::createCFString):
        * platform/text/cf/StringImplCF.cpp:
        (WTF::StringImpl::createCFString):
        * platform/text/mac/StringImplMac.mm:
        (WTF::StringImpl::operator NSString *):
        * platform/text/mac/TextCodecMac.cpp:
        (WebCore::TextCodecMac::encode):
        * platform/win/SearchPopupMenuWin.cpp:
        (WebCore::autosaveKey):
        (WebCore::SearchPopupMenuWin::saveRecentSearches):

2012-10-30  Chris Fleizach  <cfleizach@apple.com>

        AX: Support embedded SVG objects in AX tree
        https://bugs.webkit.org/show_bug.cgi?id=97571

        Reviewed by Tim Horton.

        This patch allows an SVG image from another resource to be hooked into the AX
        hierarchy. This is done by creating an AX wrapper for the root SVG that holds onto
        its native parent image. The SVGChromeClient is then used to connect to this SVG resource.

        Test: accessibility/svg-remote-element.html

        * CMakeLists.txt:
        * GNUmakefile.list.am:
        * WebCore.gypi:
        * WebCore.vcproj/WebCore.vcproj:
        * WebCore.xcodeproj/project.pbxproj:
        * accessibility/AXObjectCache.cpp:
        (WebCore::createFromRenderer):
        * accessibility/AccessibilityAllInOne.cpp:
        * accessibility/AccessibilityObject.h:
        (WebCore::AccessibilityObject::isAccessibilitySVGRoot):
        (AccessibilityObject):
        * accessibility/AccessibilityRenderObject.cpp:
        (WebCore::AccessibilityRenderObject::detach):
        (WebCore::AccessibilityRenderObject::offsetBoundingBoxForRemoteSVGElement):
        (WebCore::AccessibilityRenderObject::boundingBoxRect):
        (WebCore::AccessibilityRenderObject::remoteSVGElementHitTest):
        (WebCore::AccessibilityRenderObject::elementAccessibilityHitTest):
        (WebCore::AccessibilityRenderObject::determineAccessibilityRole):
        (WebCore::AccessibilityRenderObject::isSVGImage):
        (WebCore::AccessibilityRenderObject::detachRemoteSVGRoot):
        (WebCore::AccessibilityRenderObject::remoteSVGRootElement):
        (WebCore::AccessibilityRenderObject::addRemoteSVGChildren):
        (WebCore::AccessibilityRenderObject::addChildren):
        * accessibility/AccessibilityRenderObject.h:
        (AccessibilityRenderObject):
        * accessibility/AccessibilitySVGRoot.cpp: Added.
        (WebCore::AccessibilitySVGRoot::AccessibilitySVGRoot):
        (WebCore::AccessibilitySVGRoot::~AccessibilitySVGRoot):
        (WebCore::AccessibilitySVGRoot::create):
        (WebCore::AccessibilitySVGRoot::parentObject):
        * accessibility/AccessibilitySVGRoot.h: Added.
        (AccessibilitySVGRoot): Class provides ability to wrap the SVG root of a remote accessibility element.
        (WebCore::AccessibilitySVGRoot::setParent):
        (WebCore::AccessibilitySVGRoot::isAccessibilitySVGRoot):
        (WebCore::toAccessibilitySVGRoot):
        * accessibility/mac/WebAccessibilityObjectWrapper.mm:
        (-[WebAccessibilityObjectWrapper position]): The position of AX elements within a remote SVG element needs to be handled 
        in a special manner.
        (createAccessibilityRoleMap):
        * loader/EmptyClients.h:
        (EmptyChromeClient): Expose isEmptyChromeClient() so Accessibility will know when to apply different policies for finding
        the accessibility bounding rect of elements.
        (WebCore::EmptyChromeClient::isEmptyChromeClient):
        * page/ChromeClient.h:
        (WebCore::ChromeClient::isEmptyChromeClient):
        (ChromeClient):
        * svg/graphics/SVGImage.cpp:
        * svg/graphics/SVGImageChromeClient.h: Added.
        (SVGImageChromeClient): Expose the SVGImageChromeClient so that Accessibility can reference its image.
        (WebCore::SVGImageChromeClient::SVGImageChromeClient):
        (WebCore::SVGImageChromeClient::isSVGImageChromeClient):
        (WebCore::SVGImageChromeClient::image):
        (WebCore::SVGImageChromeClient::chromeDestroyed):
        (WebCore::SVGImageChromeClient::invalidateContentsAndRootView):
        (WebCore::toSVGImageChromeClient):

2012-10-30  Dan Carney  <dcarney@google.com>

        add 7 bit strings capabilities to the v8 binding layer
        https://bugs.webkit.org/show_bug.cgi?id=91850

        Reviewed by Adam Barth.

        This change enables the v8 binding layer to make use of webkit's
        8 bit string capabilities. Using 8 bit strings leads to certain
        benchmark performance improvemnts as can be seen in
        https://bug-91850-attachments.webkit.org/attachment.cgi?id=163334.

        No new tests. Test coverage already extensive.

        * bindings/v8/V8PerIsolateData.cpp:
        (WebCore::V8PerIsolateData::visitExternalStrings):
        * bindings/v8/V8StringResource.cpp:
        (StringTraits):
        (WebCore::false):
        (WebCore):
        (WebCore::true):
        (WebCore::v8StringToWebCoreString):
        * bindings/v8/V8ValueCache.cpp:
        (WebCore::makeExternalString):
        (WebCore::WebCoreStringResourceBase::visitStrings):
        * bindings/v8/V8ValueCache.h:
        (WebCore::WebCoreStringResourceBase::WebCoreStringResourceBase):
        (WebCore::WebCoreStringResourceBase::~WebCoreStringResourceBase):
        (WebCore::WebCoreStringResourceBase::atomicString):
        (WebCoreStringResourceBase):
        (WebCore::WebCoreStringResourceBase::memoryConsumption):

2012-10-30  Christophe Dumez  <christophe.dumez@intel.com>

        [AC] Fix compilation warnings when enabling Accelerated Compositing
        https://bugs.webkit.org/show_bug.cgi?id=100741

        Reviewed by Kenneth Rohde Christiansen.

        Fix a few compilation warnings when building EFL port
        with accelerated compositing enabled.

        No new tests, no behavior change.

        * platform/graphics/surfaces/qt/GraphicsSurfaceGLX.cpp:
        (WebCore::GraphicsSurfacePrivate::GraphicsSurfacePrivate):
        (WebCore::resolveGLMethods):
        (WebCore::GraphicsSurface::platformCopyToGLTexture):
        (WebCore::GraphicsSurface::platformLock):
        * platform/graphics/texmap/TextureMapperGL.cpp:
        (WebCore::BitmapTextureGL::updateContents):

2012-10-30  No'am Rosenthal  <noam.rosenthal@nokia.com>

        [Qt] Animations jump when the page is suspended
        https://bugs.webkit.org/show_bug.cgi?id=100673

        Reviewed by Kenneth Rohde Christiansen.

        GraphicsLayerAnimations::pause() should accept time from start and not an offset.

        We need to support the "freeze" API before this can be reliably tested.
        See https://bugs.webkit.org/show_bug.cgi?id=100703.

        * platform/graphics/GraphicsLayerAnimation.cpp:
        (WebCore::GraphicsLayerAnimation::pause):

2012-10-30  Kondapally Kalyan  <kalyan.kondapally@intel.com>

        [Qt][EFL][AC] While Using WebGL, MiniBrowser segfaults on Refreshing the page.
        https://bugs.webkit.org/show_bug.cgi?id=100639.

        Reviewed by Kenneth Rohde Christiansen.

        TextureMapperSurfaceBackingStore can import textures from a GraphicSurface.
        In such cases GraphicsSurfaceGLX creates an XPixmap to read texture content
        from a given WindowId, but doesn't create any new window.
        However, OffScreenRootWindow always tries to unmap window (in its destructor) resulting in segfault.
        With this patch OffScreenRootWindow would check for a valid window before trying to unmap it.

        * platform/graphics/surfaces/qt/GraphicsSurfaceGLX.cpp:
        (WebCore::OffScreenRootWindow::~OffScreenRootWindow):

2012-10-30  Emil A Eklund  <eae@chromium.org>

        [subixel] Change LineWidth::shrinkAvailableWidthForNewFloatIfNeeded to not pixel snap
        https://bugs.webkit.org/show_bug.cgi?id=100742

        Reviewed by Levi Weintraub.

        As we no longer pixel snap values when computing the current width for a
        line we should not do it in shrinkAvailableWidthForNewFloatIfNeeded
        either.

        Test: fast/sub-pixel/float-wrap-zoom.html

        * rendering/RenderBlockLineLayout.cpp:
        (WebCore::LineWidth::LineWidth): Remove unnecessary ifdef.
        (WebCore::LineWidth::shrinkAvailableWidthForNewFloatIfNeeded): Use float values instead of pixel snapped/floored values as the line width calculations uses floats.

2012-10-30  Max Vujovic  <mvujovic@adobe.com>

        [CSS Shaders] Reject vertex shaders with custom attributes
        https://bugs.webkit.org/show_bug.cgi?id=98973

        Reviewed by Dean Jackson.

        Improved CSS Custom Filters shader validation. With this patch:
        (1) Shaders with custom attributes do not execute (e.g. attribute float my_attribute;).
        (2) Shaders with a_triangleCoord defined do not execute with an attached mesh.

        Most of the changes are from renaming CustomFilterOperation::MeshType to
        CustomFilterMeshType, and moving the enumeration to CustomFilterConstants.h. This avoids
        pulling in CustomFilterOperation for classes that only care about the mesh type.

        Note that in CSS Custom Filters, the a_triangleCoord attribute is only available in detached
        meshes. In detached meshes, no vertices are shared between triangles. Thus, each vertex
        belongs to a specific triangle, which a_triangleCoord identifies. In attached meshes,
        vertices can belong to many triangles, which a_triangleCoord cannot identify because it's
        only a vec3.

        Tests:
        Add two new checks to the test file:
            css3/filters/custom/invalid-custom-filter-attribute-types.html
        Add two new shaders:
            css3/filters/resources/invalid-custom-attribute.vs
            css3/filters/resources/invalid-a-triangle-coord-with-attached-mesh.vs

        * WebCore.xcodeproj/project.pbxproj:
            Update a broken reference to CustomFilterConstants.h in the Xcode project file.
        * css/CSSComputedStyleDeclaration.cpp:
        (WebCore::CSSComputedStyleDeclaration::valueForFilter):
            Replace CustomFilterOperation::MeshType with CustomFilterMeshType.
        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::createCustomFilterOperation): Ditto.
        * platform/graphics/filters/CustomFilterConstants.h:
            Add CustomFilterMeshType enum to share across the Custom Filters codebase, so that we
            don't have to include CustomFilterOperation just to access the old
            CustomFilterOperation::MeshType enum.
        * platform/graphics/filters/CustomFilterMesh.cpp:
        (WebCore::CustomFilterMesh::CustomFilterMesh):
            Replace CustomFilterOperation::MeshType with CustomFilterMeshType.
        * platform/graphics/filters/CustomFilterMesh.h:
        (WebCore::CustomFilterMesh::create): Ditto.
        (WebCore::CustomFilterMesh::meshType): Ditto.
        (CustomFilterMesh): Ditto.
        * platform/graphics/filters/CustomFilterMeshGenerator.cpp: Ditto.
        (WebCore::CustomFilterMeshGenerator::CustomFilterMeshGenerator): Ditto.
        (WebCore::CustomFilterMeshGenerator::dumpBuffers): Ditto.
        * platform/graphics/filters/CustomFilterMeshGenerator.h:
        (CustomFilterMeshGenerator): Ditto.
        (WebCore::CustomFilterMeshGenerator::floatsPerVertex): Ditto.
        (WebCore::CustomFilterMeshGenerator::verticesCount): Ditto.
        * platform/graphics/filters/CustomFilterOperation.cpp: 
        (WebCore::CustomFilterOperation::CustomFilterOperation): Ditto.
        * platform/graphics/filters/CustomFilterOperation.h:
        (WebCore::CustomFilterOperation::create): Ditto.
        (WebCore::CustomFilterOperation::meshType): Ditto.
        (CustomFilterOperation): Ditto.
        * platform/graphics/filters/CustomFilterProgram.cpp:
        (WebCore::CustomFilterProgram::CustomFilterProgram):
            Add a meshType constructor parameter because the program now needs to know the meshType
            to properly validate.
        (WebCore::CustomFilterProgram::programInfo):
            Pass meshType to CustomFilterProgram constructor.
        (WebCore::CustomFilterProgram::operator==):
            Check the meshType in the equals operator.
        * platform/graphics/filters/CustomFilterProgram.h:
            Make vertexShaderString() and fragmentShaderString() public so that we don't have to ask
            for a programInfo object just to get the shader strings in
            CoordinatedGraphicsArgumentCoders.cpp.
        * platform/graphics/filters/CustomFilterProgramInfo.cpp:
        (WebCore::CustomFilterProgramInfo::CustomFilterProgramInfo):
            Add a meshType constructor parameter.       
        (WebCore::CustomFilterProgramInfo::hash):
            Include the meshType in the validated program hash, since the same shader code can pass
            or fail validation based on the meshType.
        (WebCore::CustomFilterProgramInfo::operator==):
            Check the meshType in the equals operator.
        * platform/graphics/filters/CustomFilterProgramInfo.h:
        (CustomFilterProgramInfo):
            Update method prototype.
        (WebCore::CustomFilterProgramInfo::meshType):
            Add meshType getter.
        * platform/graphics/filters/CustomFilterValidatedProgram.cpp:
        (WebCore::CustomFilterValidatedProgram::validateSymbols):
            If the author defines attribute that is is not found in the built-in attribute map,
            reject the shader.
            If the author defines a_triangleCoord without a detached mesh type, reject the shader.
            Also, make this previously file-static function into a method of
            CustomFilterValidatedProgram because it now needs to access the m_meshType.
        * platform/graphics/filters/CustomFilterValidatedProgram.h:
        (CustomFilterValidatedProgram):
            Add a meshType constructor parameter because the program now needs to know the meshType
            to properly validate.
        * platform/graphics/filters/FECustomFilter.cpp:
        (WebCore::FECustomFilter::FECustomFilter):
            Replace CustomFilterOperation::MeshType with CustomFilterMeshType.
        (WebCore::FECustomFilter::create): Ditto.
        (WebCore::FECustomFilter::bindProgramAndBuffers): Ditto.
        (WebCore::FECustomFilter::unbindVertexAttributes): Ditto.
        * platform/graphics/filters/FECustomFilter.h:
        (FECustomFilter): Ditto.
        * rendering/style/StyleCustomFilterProgram.h:
        (WebCore::StyleCustomFilterProgram::create):
            Add a meshType constructor parameter.
        (WebCore::StyleCustomFilterProgram::StyleCustomFilterProgram): Ditto.

2012-10-30  Andrey Lushnikov  <lushnikov@google.com>

        Web Inspector: adds isOwnProperty to remote protocol
        https://bugs.webkit.org/show_bug.cgi?id=100664

        Reviewed by Pavel Feldman.

        Test: inspector/runtime/runtime-getProperties-isOwnProperty.html

        Adds requested 'isOwn' property to the 'PropertyDescriptor' class of the
        remote debugging protocol. 

        * inspector/InjectedScriptSource.js:
        (.):
        * inspector/Inspector.json:

2012-10-30  Zeno Albisser  <zeno@webkit.org>

        [Qt][Win] BitmapTextureGL::updateContents() broken after r132019.
        https://bugs.webkit.org/show_bug.cgi?id=100680

        When creating a temporary for swizzling the image data,
        the temporary will have the target size.
        Therefore no offset within the available image data
        shall be applied in this case.

        Reviewed by Noam Rosenthal.

        * platform/graphics/texmap/TextureMapperGL.cpp:
        (WebCore::BitmapTextureGL::updateContents):

2012-10-30  Kent Tamura  <tkent@chromium.org>

        Remove unused code for old input[type=date] UI
        https://bugs.webkit.org/show_bug.cgi?id=100734

        Reviewed by Hajime Morita.

        The old input[type=date] UI used in Google Chrome 20-23 (text field with
        a fixed placeholder) was replaced with ENABLE_INPUT_MULTIPLE_FIELDS_UI.

        No new tests because of no behavior changes.

        * html/DateInputType.cpp: Remove ENABLE_INPUT_TYPE_DATE_LEGACY_UI code path.
        * html/DateInputType.h: Ditto.

        * html/HTMLInputElement.cpp:
        (WebCore::HTMLInputElement::supportsPlaceholder):
        Remove fixed-placeholder feature.
        * html/HTMLInputElement.h:
        (HTMLInputElement): Ditto.
        * html/HTMLTextFormControlElement.h:
        (HTMLTextFormControlElement): isPlaceholderEmpty() is not needed to be virtual
        * html/InputType.cpp: Remove fixed-placeholder feature.
        * html/InputType.h: Ditto.
        * html/TextFieldInputType.cpp:
        (WebCore::TextFieldInputType::updatePlaceholderText): Ditto.

        * platform/text/PlatformLocale.h:
        (Locale): Remove dateFormatText.
        * platform/text/LocaleICU.cpp: Ditto.
        * platform/text/LocaleICU.h: Ditto.
        * platform/text/LocaleNone.cpp: Ditto.
        * platform/text/mac/LocaleMac.h: Ditto.
        * platform/text/mac/LocaleMac.mm: Ditto.
        * platform/text/win/LocaleWin.cpp: Ditto.
        * platform/text/win/LocaleWin.h: Ditto.
        * platform/LocalizedStrings.h:
        (WebCore): Remove unused functions; calendarTodayText,
        calendarClearText, dateFormatYearText, dateFormatMonthText,
        dateFormatDayInMonthText

2012-10-30  Kent Tamura  <tkent@chromium.org>

        Fix crash by calendar picker or suggestion picker
        https://bugs.webkit.org/show_bug.cgi?id=100728

        Reviewed by Hajime Morita.

        Change DateTimeChooser so that it is ref-coutned.

        Test: platform/chromium/fast/forms/calendar-picker/calendar-picker-type-change-onchange.html

        * platform/DateTimeChooser.h: Made DateTimeChooser RefCounted.
        * page/ChromeClient.h:
        (ChromeClient): openDateTimeChooser should return PassRefPtr<DateTimeChooser>.
        * loader/EmptyClients.h:
        (EmptyChromeClient): Follow the above change.
        * loader/EmptyClients.cpp:
        (WebCore::EmptyChromeClient::openDateTimeChooser): Ditto.

        * html/shadow/PickerIndicatorElement.h:
        (PickerIndicatorElement): Hold DateTimeChooser in RefPtr<DateTimeChooser>.
        * html/shadow/PickerIndicatorElement.cpp:
        (WebCore::PickerIndicatorElement::PickerIndicatorElement):
        Remove unnecessary initialization.

2012-10-30  Eugene Klyuchnikov  <eustas.bug@gmail.com>

        Web Inspector: Timeline: promote "cpu activity" out of experiment
        https://bugs.webkit.org/show_bug.cgi?id=100726

        Reviewed by Pavel Feldman.

        1. CPU actibity bars redesigned
        2. Experiment setting removed
        3. Feature setting added

        * English.lproj/localizedStrings.js: Updated setting label.
        * inspector/front-end/Settings.js: Replaced experiment with setting.
        * inspector/front-end/SettingsScreen.js: Added new setting.
        * inspector/front-end/TimelinePanel.js: Update cpu bars appearance.
        * inspector/front-end/timelinePanel.css: Ditto.

2012-10-30  Michelangelo De Simone  <michelangelo@webkit.org>

        [CSS Shaders] Change the default compositing mode and the default CSS value for <fragmentShader>
        https://bugs.webkit.org/show_bug.cgi?id=94020

        Reviewed by Dean Jackson.

        The default compositing mode has been changed from "normal source-over" to
        "normal source-atop". This applies to the default fragment shader that will
        kick in when there is no explicit fragment shader or mix function defined.

        This has required to update all the existing tests; the dummy empty fragment
        shader has also been removed because not needed.

        * css/CSSComputedStyleDeclaration.cpp:
        (WebCore::CSSComputedStyleDeclaration::valueForFilter): An existence check
        for the fragment shader has been added.
        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::createCustomFilterOperation): The default program
        has been updated: PROGRAM_TYPE_BLENDS_TEXTURE (compositing enabled) now is
        the default.
        * platform/graphics/filters/CustomFilterProgramInfo.h:
        (WebCore::CustomFilterProgramMixSettings::CustomFilterProgramMixSettings):
        New CustomFilterProgramMixSettings defaults to "source-atop" composite
        operator.

2012-10-30  Ádám Kallai  <kadam@inf.u-szeged.hu>

        [Qt][Mac] Unreviewed build fix.
        https://bugs.webkit.org/show_bug.cgi?id=100727.

        Speculative build fix after 132858. Include missing CoreFoundation/CoreFoundation.h header.

        * platform/text/cf/AtomicStringCF.cpp:

2012-10-30  Gabor Rapcsanyi  <rgabor@webkit.org>

        Optimize vclip for NEON in VectorMath
        https://bugs.webkit.org/show_bug.cgi?id=100737

        Reviewed by Zoltan Herczeg.

        Speed up vclip in VectorMath with NEON intrinsics.

        * platform/audio/VectorMath.cpp:
        (WebCore::VectorMath::vclip):

2012-10-30  Alexandru Chiculita  <achicu@adobe.com>

        [CSS Shaders] Software and composited filters should have a common path
        https://bugs.webkit.org/show_bug.cgi?id=100532

        Reviewed by Dean Jackson.

        Added computeFilterOperations as a common method between the software filters
        and hardware composited ones. The method rejects custom filters that are not
        loaded yet. In bug 100533 it will also convert the CustomFilterOperation to a 
        ValidatedCustomFilterOperation. That will help us keep the loading and verification 
        code for the custom filters common across all the ports.

        No new tests, just refactoring existing code.

        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::computeFilterOperations):
        (WebCore):
        (WebCore::RenderLayer::updateOrRemoveFilterEffect):
        * rendering/RenderLayer.h:
        (WebCore):
        (RenderLayer):
        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::updateFilters):

2012-10-30  Alexei Filippov  <alph@chromium.org>

        Web Inspector: Implement native memory snapshot grid view
        https://bugs.webkit.org/show_bug.cgi?id=100656

        Native memory snapshots are now shown as an expandable tree form
        using the grid control.

        Reviewed by Yury Semikhatsky.

        * inspector/front-end/NativeMemorySnapshotView.js:
        (WebInspector.NativeMemorySnapshotView):
        (WebInspector.NativeSnapshotDataGrid):
        (WebInspector.NativeSnapshotNode):
        (WebInspector.NativeSnapshotNode.prototype.createCell):
        (WebInspector.NativeSnapshotNode.prototype._createSizeCell):
        (WebInspector.NativeSnapshotNode.prototype._populate):
        (WebInspector.MemoryBlockViewProperties._initialize):
        (WebInspector.MemoryBlockViewProperties._forMemoryBlock):
        * inspector/front-end/dataGrid.css:
        (.data-grid td):
        * inspector/front-end/nativeMemoryProfiler.css:
        (.memory-bar-chart-bar):
        (.native-snapshot-view):
        (.native-snapshot-view.visible):
        (.native-snapshot-view .data-grid):
        (.native-snapshot-view .data-grid table):
        (.native-snapshot-view .data-grid div.size-text):
        (.native-snapshot-view .data-grid div.size-bar):
        (.native-snapshot-view .data-grid div.percent-text):

2012-10-30  Zoltan Nyul  <zoltan.nyul@intel.com>

        3d rotation with [0, 0, 0] direction vector should not be applied
        https://bugs.webkit.org/show_bug.cgi?id=100733

        Reviewed by Levi Weintraub.

        As stated in the specification (http://dev.w3.org/csswg/css3-3d-transforms/#transform-functions),
        a direction vector that cannot be normalized, such as [0, 0, 0], will cause the rotation to not be applied,
        but webkit applies it with [1, 0, 0] direction vector.

        Test: transforms/3d/general/3dtransform-values.html

        * platform/graphics/transforms/TransformationMatrix.cpp:
        (WebCore::TransformationMatrix::rotate3d):

2012-10-30  Yury Semikhatsky  <yurys@chromium.org>

        Memory instrumentation: report actual object address for CachedResourceClients
        https://bugs.webkit.org/show_bug.cgi?id=100659

        Reviewed by Alexander Pavlov.

        Skipped pointers to objects that are not allocated on the heap directly.

        To test this we need to compare addresses of objects traversed by the memory
        insrumentation with those allocated by the memory allocator. The latter set
        should include the former one.

        * css/StyleResolver.cpp:
        (WTF): skip pointers to RuleData structures as they are stored by value in RuleSet
        objects and should not be reported separately.
        * loader/cache/CachedResource.cpp:
        (WTF): do not report memory occupied by CachedResourceClients as objects implementing
        the interface may have address which differ from CachedResourceClient*. The clients
        should be reachable from their instrumented owners where we know exact type of the
        clients and hence can figure correct address.

2012-10-29  Shinya Kawanaka  <shinyak@chromium.org>

        [Refatoring] Remove ElementShadow::insertionPointFor
        https://bugs.webkit.org/show_bug.cgi?id=100625

        Reviewed by Hajime Morita.

        Now that ElementShadow::insertionPointFor does not do any special things, and it's only used in
        ComposedShadowTreeWalker. So we can remove it.

        No new tests, simple refactoring.

        * dom/ComposedShadowTreeWalker.cpp:
        (WebCore::resolveReprojection):
        (WebCore::AncestorChainWalker::parent):
        * dom/ElementShadow.cpp:
        * dom/ElementShadow.h:
        (ElementShadow):
        * dom/ShadowRoot.h: ShadowRoot has insertionPointFor declaration, but we don't have any implementation.
        We should remove it.

2012-10-29  Andy Estes  <aestes@apple.com>

        Fix a typo that caused SVG external resources to be blocked on
        platforms other than Chromium.

        * loader/cache/CachedResourceLoader.cpp:
        (WebCore::CachedResourceLoader::canRequest):

2012-10-29  Keishi Hattori  <keishi@webkit.org>

        NSLocale leaks in LocaleMac
        https://bugs.webkit.org/show_bug.cgi?id=97628

        Reviewed by Kent Tamura.

        We need to adopt the NSLocale object so it doesn't leak and
        determineLocale() should return a NSLocale without additional retain.

        No new tests.

        * platform/text/mac/LocaleMac.mm:
        (WebCore::determineLocale): Returns a RetainPtr<NSLocale>.
        (WebCore::Locale::create):
        (WebCore::LocaleMac::LocaleMac): m_locale should adopt the NSLocale object.
        (WebCore::LocaleMac::create): LocaleMac constructor takes NSLocale without additional retain.

2012-10-29  Charles Wei  <charles.wei@torchmobile.com.cn>

        [BlackBerry] Disable redirect to data scheme for potential fishing.
        https://bugs.webkit.org/show_bug.cgi?id=100713

        Reviewed by George Staikos.

        We will disable redirect to data scheme to avoid potential security concern, 
        described in klevjers.com/papers/phishing.pdf.


        * platform/network/blackberry/NetworkJob.cpp:
        (WebCore::NetworkJob::handleRedirect):

2012-10-29  Vincent Scheib  <scheib@chromium.org>

        Unreviewed, rolling out r132845.
        http://trac.webkit.org/changeset/132845
        https://bugs.webkit.org/show_bug.cgi?id=99975

        Broke chromium builds, linker errors from
        IDBBindingUtilitiesTest

        * Modules/indexeddb/IDBRequest.cpp:
        (WebCore::IDBRequest::IDBRequest):
        (WebCore::IDBRequest::onSuccess):
        (WebCore::IDBRequest::dispatchEvent):
        * Modules/indexeddb/IDBRequest.h:
        (IDBRequest):
        * bindings/v8/IDBBindingUtilities.cpp:
        (WebCore::createIDBKeyFromScriptValueAndKeyPath):
        (WebCore):
        (WebCore::deserializeIDBValue):
        (WebCore::injectIDBKeyIntoScriptValue):
        (WebCore::idbKeyToScriptValue):
        * bindings/v8/V8PerIsolateData.cpp:
        (WebCore::V8PerIsolateData::ensureAuxiliaryContext):
        (WebCore):
        * bindings/v8/V8PerIsolateData.h:
        (V8PerIsolateData):

2012-10-29  Anders Carlsson  <andersca@apple.com>

        Fix Windows build.

        * platform/network/cf/ResourceRequestCFNet.cpp:
        (WebCore::setHeaderFields):

2012-10-28  Mark Rowe  <mrowe@apple.com>

        Simplify Xcode configuration settings that used to vary between OS versions.

        Reviewed by Dan Bernstein.

        * Configurations/Base.xcconfig:
        * Configurations/DebugRelease.xcconfig:
        * Configurations/WebCore.xcconfig:

2012-10-28  Mark Rowe  <mrowe@apple.com>

        Remove references to unsupported OS and Xcode versions.

        Reviewed by Anders Carlsson.

        * Configurations/Base.xcconfig:
        * Configurations/CompilerVersion.xcconfig: Removed.
        * Configurations/DebugRelease.xcconfig:
        * Configurations/Version.xcconfig:
        * Configurations/WebCore.xcconfig:
        * DerivedSources.make:
        * WebCore.xcodeproj/project.pbxproj:

2012-10-29  Anders Carlsson  <andersca@apple.com>

        AtomicString(CFStringRef) shouldn't unconditionally create a StringImpl
        https://bugs.webkit.org/show_bug.cgi?id=100701

        Reviewed by Dan Bernstein.

        * WebCore.exp.in:
        Export AtomicString::add(CFStringRef).

        * Target.pri:
        * WebCore.gypi:
        * WebCore.vcproj/WebCore.vcproj:
        * WebCore.xcodeproj/project.pbxproj:
        Add AtomicStringCF.cpp 

        * platform/text/cf/AtomicStringCF.cpp: Added.
        (WTF::AtomicString::add):
        When trying to add the atomic string to the table, first try to get a Latin-1 pointer
        from the string. Second, try to get a Unicode pointer from the string.
        If that also fails, copy the string to a temporary unicode buffer and add it from there.

        * platform/text/cf/HyphenationCF.cpp:
        (WebCore::::createValueForKey):
        Update for AtomicString::createCFString being removed.

2012-10-25  Stephen Chenney  <schenney@chromium.org>

        feImage should not be allowed to self reference
        https://bugs.webkit.org/show_bug.cgi?id=94652

        Reviewed by Eric Seidel.

        Add cycle detection for SVG filter application, and also fix a problem
        with graphics context restore when filters are applied. This also
        converts the flags in FilterData to a state tracking system, as the
        number of flags was getting messy and only one flag is valid at any given time.

        Test: svg/filters/feImage-self-and-other-referencing.html

        * rendering/svg/RenderSVGResourceFilter.cpp: Convert to new FilterData
        state management and enable cycle detection.
        (WebCore):
        (WebCore::RenderSVGResourceFilter::removeClientFromCache): Change isBuilt and markedForRemoval flags to state enums.
        (WebCore::RenderSVGResourceFilter::applyResource): Change flags to state enums and detect cycles.
        (WebCore::RenderSVGResourceFilter::postApplyResource): Change flags to state and add handling
        for the various states.
        (WebCore::RenderSVGResourceFilter::primitiveAttributeChanged): Change isBuilt flag to state enums.
        * rendering/svg/RenderSVGResourceFilter.h:
        (WebCore::FilterData::FilterData):
        (FilterData): Convert to a state tracking system.
        * rendering/svg/RenderSVGRoot.cpp:
        (WebCore::RenderSVGRoot::paintReplaced): Add a block around the
        SVGRenderingContext so that it applies the filter and reverts the
        context before the calling method restores the context.

2012-10-29  Dan Bernstein  <mitz@apple.com>

        <rdar://problem/12592716> REGRESSION (r132545): With full-page accelerated drawing, a
        reproducible hang occurs at <http://www.cbsnews.com/stories/2010/01/24/ftn/main6136386.shtml>.

        Reviewed by Anders Carlsson.

        Work around <rdar://problem/12584492> by limiting the scope of the fix for <http://webkit.org/b/100413>.

        * platform/graphics/cg/GraphicsContextCG.cpp:
        (WebCore::GraphicsContext::clipOut): Reverted to using CGContextGetClipBoundingBox() rather
        than CGRectInfinite when the context is accelerated and has a transform that is not just
        a translation or a scale.

2012-10-29  Rob Buis  <rbuis@rim.com>

        [BlackBerry] Simplify AuthenticationChallengeManager::instance
        https://bugs.webkit.org/show_bug.cgi?id=100614

        Reviewed by Yong Li.
        Internally reviewed by Lyon Chen.

        Use a standard Singleton pattern here, this makes sure we create lazily.

        * platform/blackberry/AuthenticationChallengeManager.cpp:
        (WebCore):
        * platform/blackberry/AuthenticationChallengeManager.h:
        (AuthenticationChallengeManager):

2012-10-29  Adam Barth  <abarth@webkit.org>

        Block SVG external references pending a security review
        https://bugs.webkit.org/show_bug.cgi?id=100635

        Reviewed by Eric Seidel.

        We need to do a security review of loading external SVG references
        before we're sure that it is safe.

        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::createFilterOperations):
        * loader/cache/CachedResourceLoader.cpp:
        (WebCore::CachedResourceLoader::canRequest):

2012-10-29  Joshua Bell  <jsbell@chromium.org>

        IndexedDB: Crash on checking version of corrupt backing store
        https://bugs.webkit.org/show_bug.cgi?id=100692

        Reviewed by Tony Chang.

        If the backing store fails to open (due to corruption, non-writeable disk, etc)
        the subsequent schema version check dereferences a null pointer. Fix to only
        do the schema check if the database opened.

        Chromium tests will be included with crrev.com/11196029

        * Modules/indexeddb/IDBLevelDBBackingStore.cpp:
        (WebCore::IDBLevelDBBackingStore::open):

2012-10-29  Philip Rogers  <pdr@google.com>

        Let SVGElements have pending resources.
        https://bugs.webkit.org/show_bug.cgi?id=99694

        Reviewed by Eric Seidel.

        Our SVG pending resource tracking is used for handling dynamic id changes. For example,
        if an SVG element references an id that is not yet in the document (or has been removed),
        the SVG element will be 'pending' an id. When styled elements are inserted into
        the document, buildPendingResourcesIfNeeded() is called to force any pending elements
        to resolve their dependencies. Only SVGStyledElement targets can be referenced using
        this infrastructure, and that is not changed with this patch.

        Previously, only SVGStyledElements could have pending resources. Some examples of where
        this is violated are SVGAnimateElement and SVGMPathElement which are not a styled elements
        but which can have pending references (they can reference styled elements and
        paths, respectively). This patch changes the pending resource handling to allow
        any SVGElement to have pending resources.

        This patch is only a refactoring of code in preparation for WK99694 and does not
        affect existing functionality or tests.

        * svg/SVGDocumentExtensions.cpp:
        (WebCore::SVGDocumentExtensions::addPendingResource):
        (WebCore::SVGDocumentExtensions::isElementPendingResources):
        (WebCore::SVGDocumentExtensions::isElementPendingResource):
        (WebCore::SVGDocumentExtensions::removeElementFromPendingResources):
        (WebCore::SVGDocumentExtensions::removeElementFromPendingResourcesForRemoval):
        * svg/SVGDocumentExtensions.h:
        (WebCore):
        (SVGDocumentExtensions):
        * svg/SVGElement.cpp:
        (WebCore::SVGElement::~SVGElement):
        (WebCore::SVGElement::removedFrom):
        (WebCore::SVGElement::hasPendingResources):
        (WebCore):
        (WebCore::SVGElement::setHasPendingResources):
        (WebCore::SVGElement::clearHasPendingResourcesIfPossible):
        * svg/SVGElement.h:
        (SVGElement):
        (WebCore::SVGElement::buildPendingResource):
        * svg/SVGStyledElement.cpp:
        (WebCore):
        (WebCore::SVGStyledElement::buildPendingResourcesIfNeeded):
        (WebCore::SVGStyledElement::removedFrom):
        * svg/SVGStyledElement.h:
        (SVGStyledElement):
        (WebCore::SVGStyledElement::selfHasRelativeLengths):

2012-10-29  Dan Carney  <dcarney@google.com>

        Remove ensureAuxiliaryContext
        https://bugs.webkit.org/show_bug.cgi?id=99975

        Reviewed by Adam Barth.

        Removed auxilliaryContext as use if it is problematic in IDB.

        No new tests. No change in functionality.

        * Modules/indexeddb/IDBCursor.cpp:
        (WebCore::IDBCursor::update):
        (WebCore::IDBCursor::setValueReady):
        * Modules/indexeddb/IDBCursor.h:
        (IDBCursor):
        * Modules/indexeddb/IDBObjectStore.cpp:
        (WebCore::generateIndexKeysForValue):
        (WebCore::IDBObjectStore::put):
        (WebCore):
        * Modules/indexeddb/IDBRequest.cpp:
        (WebCore::IDBRequest::onSuccess):
        (WebCore::IDBRequest::dispatchEvent):
        * bindings/v8/IDBBindingUtilities.cpp:
        (WebCore::createIDBKeyFromScriptValueAndKeyPath):
        (WebCore::deserializeIDBValue):
        (WebCore::injectIDBKeyIntoScriptValue):
        * bindings/v8/IDBBindingUtilities.h:
        (WebCore):
        * bindings/v8/V8Binding.cpp:
        (WebCore::toV8Context):
        (WebCore):
        * bindings/v8/V8Binding.h:
        (WebCore):
        * bindings/v8/V8PerIsolateData.cpp:
        (WebCore):
        * bindings/v8/V8PerIsolateData.h:

2012-10-29  Alpha Lam  <hclam@chromium.org>

        [skia] Handle mask box image.
        https://bugs.webkit.org/show_bug.cgi?id=100570

        Reviewed by James Robinson.

        When drawing an image with source rectangle it should intersect with image rectangle.
        This should be the case for drawing single image and tiling an image.

        Test: fast/images/mask-box-image-crash.html

        * platform/graphics/skia/ImageSkia.cpp:
        (WebCore::Image::drawPattern):
        (WebCore::BitmapImage::draw):
        (WebCore::BitmapImageSingleFrameSkia::draw):

2012-10-29  Eric Carlson  <eric.carlson@apple.com>

        Support captions when PLUGIN_PROXY_FOR_VIDEO
        https://bugs.webkit.org/show_bug.cgi?id=100690

        Reviewed by Simon Fraser.

        When built with PLUGIN_PROXY_FOR_VIDEO, WebCore uses a plug-in for the media element's
        platform media engine. Update this code path so the shadow DOM elements used to display
        text tracks are created and configured correctly.

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::configureMediaControls): Create media controls if necessary.

        * rendering/RenderEmbeddedObject.cpp:
        (WebCore::RenderEmbeddedObject::layout): Set the position and size of the shadow DOM when the
            position of the embedded element changes.
        * rendering/RenderEmbeddedObject.h:

2012-10-29  Justin Novosad  <junov@google.com>

        [Chromium] flickering observed when copying 2D canvas to webGL texture
        https://bugs.webkit.org/show_bug.cgi?id=100691

        Reviewed by Stephen White.

        Added a flush to the webgl context after texture upload from an image
        buffer to ensure proper graphics context synchronization with respect
        to subsequent changes to the source image.

        Tests: fast/canvas/webgl/canvas-2d-webgl-texture.html

        * platform/graphics/skia/ImageBufferSkia.cpp:
        (WebCore::ImageBuffer::copyToPlatformTexture):

2012-10-29  Glenn Adams  <glenn@skynav.com>

        [CSSOM] Extraneous whitespace in CSSImportRule.cssText
        https://bugs.webkit.org/show_bug.cgi?id=100657

        Reviewed by Simon Fraser.

        Remove extraneous whitespace when serializing CSSImportRule.cssText when
        media list is empty.

        Test: cssom/cssimportrule-media.html

        * css/CSSImportRule.cpp:
        (WebCore::CSSImportRule::cssText):
        Don't append extra whitespace if mediaText is empty.

2012-10-29  Arnaud Renevier  <a.renevier@sisa.samsung.com>

        webview not redrawn as needed when accelerated compositing is enabled.
        https://bugs.webkit.org/show_bug.cgi?id=99109

        Reviewed by Martin Robinson.

        GL shared display is not in the gtk loop and therefore, its events are
        not captured by gtk. So, we use gdk default instead.

        No new tests, covered by existing tests.

        * platform/gtk/RedirectedXCompositeWindow.cpp:
        (WebCore::RedirectedXCompositeWindow::RedirectedXCompositeWindow):
        (WebCore::RedirectedXCompositeWindow::~RedirectedXCompositeWindow):
        (WebCore::RedirectedXCompositeWindow::resize):

2012-10-29  Pavel Feldman  <pfeldman@chromium.org>

        Web Inspector: bind redo to Ctrl+Y on non-mac platforms
        https://bugs.webkit.org/show_bug.cgi?id=100685

        Reviewed by Vsevolod Vlasov.

        * inspector/front-end/DefaultTextEditor.js:
        (WebInspector.DefaultTextEditor.prototype._registerShortcuts):

2012-10-29  Enrica Casucci  <enrica@apple.com>

        Add ENABLE_USERSELECT_ALL feature flag.
        https://bugs.webkit.org/show_bug.cgi?id=100559

        Reviewed by Eric Seidel.

        * Configurations/FeatureDefines.xcconfig:

2012-10-29  Alexandru Chiculita  <achicu@adobe.com>

        [CSS Shaders] Extract the CustomFilterParameterList to its own file
        https://bugs.webkit.org/show_bug.cgi?id=100548

        Reviewed by Dean Jackson.

        Moved all the CustomFilterParameterList related methods to their own file.
        Also made CustomFilterParameterList inherit from Vector instead of typedefing it,
        so that we can add a different operator== and a blend method to it.

        No new tests, just refactoring existing code.

        * CMakeLists.txt:
        * GNUmakefile.list.am:
        * Target.pri:
        * WebCore.gypi:
        * WebCore.xcodeproj/project.pbxproj:
        * css/StyleResolver.h:
        * platform/graphics/filters/CustomFilterOperation.cpp:
        (WebCore::CustomFilterOperation::CustomFilterOperation):
        (WebCore::CustomFilterOperation::blend):
        * platform/graphics/filters/CustomFilterOperation.h:
        (WebCore):
        (WebCore::CustomFilterOperation::operator==):
        * platform/graphics/filters/CustomFilterParameterList.cpp: Added.
        (WebCore):
        (WebCore::CustomFilterParameterList::operator==):
        (WebCore::CustomFilterParameterList::checkAlphabeticalOrder):
        (WebCore::CustomFilterParameterList::blend):
        * platform/graphics/filters/CustomFilterParameterList.h: Added.
        (WebCore):
        (CustomFilterParameterList):

2012-10-29  Brady Eidson  <beidson@apple.com>

        Try to fix 32-bit builds after my incompletely tested m_identifier change.

        Not reviewed.

        * loader/ResourceLoader.h:
        (WebCore::ResourceLoader::identifier): Revert my "unsigned long" -> "uint64_t" change in two places.

2012-10-29  Csaba Osztrogonác  <ossy@webkit.org>

        [Qt] Text with zero font size renders as X px sometimes, causing fast/text/zero-font-size-2.html to fail
        https://bugs.webkit.org/show_bug.cgi?id=100115

        Reviewed by Noam Rosenthal.

        * platform/graphics/qt/FontQt.cpp:
        (WebCore::Font::drawGlyphs):

2012-10-29  Huang Dongsung  <luxtella@company100.net>

        [TexMap] Make GraphicsLayerAnimation choose a proper timing function.
        https://bugs.webkit.org/show_bug.cgi?id=100623

        Reviewed by Noam Rosenthal.

        Currently, GraphicsLayerAnimation chooses a timing function in the wrong
        way. Other GraphicsLayers choose a timing function in the similar way to
        GraphicsLayerCA::timingFunctionForAnimationValue(). The way consists of
        the following steps.
        1. Try to query the timing function of the current keyframe animation value.
        2. If the timing function of #1 is null, try to query the timing function of Animation.
        3. If the timing function of #2 is null, return CubicBezierTimingFunction::defaultTimingFunction().

        This patch makes GraphicsLayerAnimation choose a timing function in the same way
        to other implementations.

        Covered by existing animations tests.

        * platform/graphics/GraphicsLayerAnimation.cpp:
        (WebCore::timingFunctionForAnimationValue):
        (WebCore::GraphicsLayerAnimation::apply):

2012-10-29  Patrick Dubroy  <dubroy@chromium.org>

        Web Inspector: Toolbar overflow appears outside window
        https://bugs.webkit.org/show_bug.cgi?id=100663

        Reviewed by Pavel Feldman.

        Since the search bar was removed from the toolbar, the overflow menu appears too far
        to the right, and is unreadable. Fixed this by aligning it relative to the right side
        of the window, rather than the left.

        * inspector/front-end/Toolbar.js:
        (WebInspector.ToolbarDropdown.prototype.show):
        * inspector/front-end/inspector.css:
        (#toolbar-dropdown .toolbar-label):

2012-10-29  Michelangelo De Simone  <michelangelo@webkit.org>

        [CSS Shaders] Implement CustomFilterArrayParameter::blend
        https://bugs.webkit.org/show_bug.cgi?id=96437

        Reviewed by Dean Jackson.

        This patch adds the missing code to blend values within
        an array() when using Custom Filters.

        Test: css3/filters/custom/custom-filter-array-blending.html

        * platform/graphics/filters/CustomFilterArrayParameter.h:
        (WebCore::CustomFilterArrayParameter::blend):

2012-10-29  Alexander Pavlov  <apavlov@chromium.org>

        Web Inspector: Drag and drop a URL in inspector is not working as expected
        https://bugs.webkit.org/show_bug.cgi?id=100527

        Reviewed by Yury Semikhatsky.

        Inhibit custom dragstart handling when the active element is A.

        * inspector/front-end/ElementsTreeOutline.js:
        (WebInspector.ElementsTreeOutline.prototype._ondragstart):

2012-10-29  Mike West  <mkwst@chromium.org>

        Web Inspector: Error/warning count is one pixel off.
        https://bugs.webkit.org/show_bug.cgi?id=100660

        Reviewed by Pavel Feldman.

        The error/warning count div had a top padding of 6. That was one pixel
        too many.

        * inspector/front-end/inspector.css:
        (#error-warning-count):

2012-10-29  Shinya Kawanaka  <shinyak@chromium.org> 

        [Refactoring] Use isActiveInsertionPoint() instead of isInsertionPoint()
        https://bugs.webkit.org/show_bug.cgi?id=100459

        Reviewed by Hajime Morita.

        Checking InsertionPoint and its activeness with two if-statement is error-prone. We would like to
        use a utility function which checks both at once.

        We rewrite some lines with such function.

        No new tests, simple refactoring.

        * dom/ComposedShadowTreeWalker.cpp:
        (WebCore::ComposedShadowTreeWalker::traverseNode):
        * html/shadow/ContentDistributor.cpp:
        (WebCore::ContentDistributor::populate):
        (WebCore::ContentDistributor::distribute):
        (WebCore::ContentDistributor::distributeNodeChildrenTo):
        * html/shadow/InsertionPoint.h:
        (WebCore::isInsertionPoint): Since our convention is the argument of this kind of function should not be null,
        we would like to make it similar to the other functions.
        (WebCore::toInsertionPoint):
        (WebCore::isLowerEncapsulationBoundary):

2012-10-29  Patrick Dubroy  <dubroy@chromium.org>

        Web Inspector: Fix vertical alignment in toolbar backgrounds and overflow button.
        https://bugs.webkit.org/show_bug.cgi?id=100373

        Reviewed by Pavel Feldman.

        Fix the background image for the selected toolbar item to be vertically centered.
        Make close button and toolbar overflow button vertically centered for any toolbar
        height.

        * inspector/front-end/Toolbar.js: Remove unused variable.
        * inspector/front-end/inspector.css:
        (.toolbar-item.toggleable):
        (body.compact .toolbar-item.toggleable):
        (.toolbar-item.toggleable.toggled-on):
        (body.compact .toolbar-label):
        (#toolbar-dropdown-arrow):
        (#close-button-left, #close-button-right):
        (.toolbar-item.close-left):
        * inspector/front-end/inspector.html:

2012-10-29  Eugene Klyuchnikov  <eustas.bug@gmail.com>

        Web Inspector: Timeline: Overview bars do not correspond to timeline bars
        https://bugs.webkit.org/show_bug.cgi?id=100500

        Reviewed by Yury Semikhatsky.

        Fix: do not shorten bars by nested records of the same category.

        * inspector/front-end/TimelineOverviewPane.js: Check added.

2012-10-29  Eugene Klyuchnikov  <eustas.bug@gmail.com>

        Web Inspector: Timeline: make cpu-monitoring feature available only on capable browsers
        https://bugs.webkit.org/show_bug.cgi?id=100530

        Reviewed by Yury Semikhatsky.

        Motivation: cpu-monitoring feature looks like a glitch,
        when it is not supported by browser.

        * inspector/Inspector.json: Added capability getter to protocol.
        * inspector/InspectorClient.h: Added capability getter.
        * inspector/InspectorTimelineAgent.cpp: Proxy to request to client.
        * inspector/InspectorTimelineAgent.h: Added capability getter.
        * inspector/front-end/Settings.js: Added capability field.
        * inspector/front-end/TimelinePanel.js: Check capability.
        * inspector/front-end/inspector.js: Forward capability value.

2012-10-29  Antti Koivisto  <antti@apple.com>

        Move seamless stylesheet collecting to DocumentStyleSheetCollection
        https://bugs.webkit.org/show_bug.cgi?id=100655

        Reviewed by Andreas Kling.

        Move the code from StyleResolver to DocumentStyleSheetCollection. StyleResolver should focus on resolving style.

        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::StyleResolver):
        
            Use standard create() pattern.

        (WebCore):
        * css/StyleResolver.h:
        (StyleResolver):
        * dom/Document.cpp:
        (WebCore::Document::Document):
        * dom/DocumentStyleSheetCollection.cpp:
        (WebCore::collectActiveCSSStyleSheetsFromSeamlessParents):
        
            Since parent activeAuthorStyleSheets() contains all seamlessly inherited sheets too, this does not need to
            iterate to ancestors anymore.

        (WebCore):
        (WebCore::DocumentStyleSheetCollection::updateActiveStyleSheets):
        * dom/DocumentStyleSheetCollection.h:
        (WebCore::DocumentStyleSheetCollection::create):
        (DocumentStyleSheetCollection):
        (WebCore::DocumentStyleSheetCollection::styleSheetsForStyleSheetList):
        (WebCore::DocumentStyleSheetCollection::activeAuthorStyleSheets):
        
            activeAuthorStyleSheets() now includes the stylesheets inherited from the seamless parent too.

        (WebCore::DocumentStyleSheetCollection::needsUpdateActiveStylesheetsOnStyleRecalc):

2012-10-29  Andreas Kling  <kling@webkit.org>

        Don't expose implementation details of StylePropertySet storage.
        <http://webkit.org/b/100644>

        Reviewed by Antti Koivisto.

        Add a StylePropertySet::PropertyReference class, now returned by propertyAt(index).
        This will allow us to refactor the internal storage of StylePropertySet without
        breaking its API.

        A PropertyReference is a simple inlinable wrapper around a StylePropertySet&/index pair.

        * css/CSSComputedStyleDeclaration.cpp:
        * css/CSSParser.cpp:
        * css/CSSParser.h:
        * css/SVGCSSParser.cpp:
        * css/StylePropertySet.cpp:
        (WebCore::StylePropertySet::asText):
        (WebCore::StylePropertySet::mergeAndOverrideOnConflict):
        (WebCore::StylePropertySet::findPropertyWithId):
        (WebCore::StylePropertySet::reportMemoryUsage):
        * css/StylePropertySet.h:
        (StylePropertySet):
        (PropertyReference):
        (WebCore::StylePropertySet::PropertyReference::PropertyReference):
        (WebCore::StylePropertySet::PropertyReference::id):
        (WebCore::StylePropertySet::PropertyReference::isImportant):
        (WebCore::StylePropertySet::PropertyReference::isInherited):
        (WebCore::StylePropertySet::PropertyReference::cssName):
        (WebCore::StylePropertySet::PropertyReference::cssText):
        (WebCore::StylePropertySet::PropertyReference::value):
        (WebCore::StylePropertySet::PropertyReference::propertyInternal):
        (WebCore::StylePropertySet::propertyAt):
        (WebCore::StylePropertySet::propertyAtInternal):
        (WebCore):
        * css/StyleResolver.cpp:
        (WebCore::attributeStylesEqual):
        (WebCore::StyleResolver::applyProperties):
        (WebCore::StyleResolver::resolveVariables):
        * editing/ApplyStyleCommand.cpp:
        * editing/EditingStyle.cpp:
        (WebCore::EditingStyle::mergeStyle):
        (WebCore::EditingStyle::mergeStyleFromRulesForSerialization):
        * editing/Editor.cpp:
        * editing/markup.cpp:
        * page/Frame.cpp:
        * svg/SVGFontFaceElement.cpp:

2012-10-29  Kent Tamura  <tkent@chromium.org>

        Move LocaleWin.{cpp,h} to platform/text/win/
        https://bugs.webkit.org/show_bug.cgi?id=100641

        Reviewed by Kentaro Hara.

        We have platform/text/win/ directory. Windows-specific files should be
        in it.
        Note that these files are used only in Chromium-win for now.

        No new tests. This doesn't change any behavior.

        * WebCore.gyp/WebCore.gyp: Fix path names.
        * WebCore.gypi: Ditto.
        * platform/text/win/LocaleWin.cpp: Renamed from Source/WebCore/platform/text/LocaleWin.cpp.
        * platform/text/win/LocaleWin.h: Renamed from Source/WebCore/platform/text/LocaleWin.h.

2012-10-29  Kent Tamura  <tkent@chromium.org>

        Rename Localizer to Locale
        https://bugs.webkit.org/show_bug.cgi?id=100634

        Reviewed by Kentaro Hara.

        - Rename Localizer class to Locale
        - Rename localizer with locale in variable names
        - Rename localizer with locale in function names

        No new tests. This doesn't make any behavior changes.

        * dom/Document.h:
        (WebCore): Declare Locale instead of Localizer.
        (Document):
        - Rename getCachedLocalizer to getCachedLocale.
        - Rename LocaleToLocalizerMap to LocaleIdentifierToLocaleMap.
        - Rename m_localizerCache to m_localeCache.
        * dom/Document.cpp:
        (WebCore::Document::getCachedLocale): Follow renamings.
        * dom/Element.h:
        (WebCore): Declare Locale instead of Localizer.
        (Element): Rename localizer() to locale().
        * dom/Element.cpp:
        (WebCore::Element::locale): Follow renamings.

        * html/BaseDateAndTimeInputType.cpp:
        (WebCore::BaseDateAndTimeInputType::localizeValue): Ditto.
        (WebCore::BaseDateAndTimeInputType::convertFromVisibleValue): Ditto.
        * html/BaseMultipleFieldsDateAndTimeInputType.cpp:
        (WebCore::BaseMultipleFieldsDateAndTimeInputType::updateInnerTextValue): Ditto.
        * html/DateInputType.cpp:
        (WebCore::DateInputType::fixedPlaceholder): Ditto.
        (WebCore::DateInputType::setupLayoutParameters): Ditto.
        * html/DateTimeInputType.cpp:
        (WebCore::DateTimeInputType::setupLayoutParameters): Ditto.
        * html/DateTimeLocalInputType.cpp:
        (WebCore::DateTimeLocalInputType::setupLayoutParameters): Ditto.
        * html/MonthInputType.cpp:
        (WebCore::MonthInputType::setupLayoutParameters): Ditto.
        * html/NumberInputType.cpp:
        (WebCore::NumberInputType::localizeValue): Ditto.
        (WebCore::NumberInputType::convertFromVisibleValue): Ditto.
        * html/TimeInputType.cpp:
        (WebCore::TimeInputType::localizeValue): Ditto.
        (WebCore::TimeInputType::setupLayoutParameters): Ditto.

        * html/shadow/DateTimeEditElement.h:
        (WebCore): Declare Locale instead of Localizer.
        (LayoutParameters): Rename localizer data member to locale.
        (WebCore::DateTimeEditElement::LayoutParameters::LayoutParameters): Follow renamings.
        * html/shadow/DateTimeEditElement.cpp:
        (WebCore::DateTimeEditBuilder::visitField): Ditto.
        * html/shadow/DateTimeNumericFieldElement.h:
        (DateTimeNumericFieldElement): Rename localizerForOwner to localeForOwner.
        * html/shadow/DateTimeNumericFieldElement.cpp:
        (WebCore::DateTimeNumericFieldElement::formatValue): Follow renamings.
        (WebCore::DateTimeNumericFieldElement::handleKeyboardEvent): Ditto.
        (WebCore::DateTimeNumericFieldElement::localeForOwner): Ditto.
        * page/PagePopupClient.h:
        (WebCore): Declare Locale instead of Localizer.
        (PagePopupClient): Rename localizer member function to locale.
        * page/PagePopupController.cpp:
        (WebCore::PagePopupController::localizeNumberString): Follow renamings.

        * platform/text/PlatformLocale.cpp: Rename the Localizer class to Locale.
        (DateTimeStringBuilder):
        (WebCore::DateTimeStringBuilder::DateTimeStringBuilder):
        (WebCore::Locale::~Locale):
        (WebCore::Locale::setLocaleData): Renamed from setLocalizerData.
        (WebCore::Locale::convertToLocalizedNumber):
        (WebCore::Locale::detectSignAndGetDigitRange):
        (WebCore::Locale::matchedDecimalSymbolIndex):
        (WebCore::Locale::convertFromLocalizedNumber):
        (WebCore::Locale::localizedDecimalSeparator):
        (WebCore::Locale::dateTimeFormatWithSeconds):
        (WebCore::Locale::dateTimeFormatWithoutSeconds):
        (WebCore::Locale::formatDateTime):
        * platform/text/PlatformLocale.h: Update the ifndef macro.
        (Locale): Renamed from Localizer. Also, renamed the followings:
         - initializeLocalizerData -> initializeLocaleData
         - setLocalizerData -> setLocaleData
         - m_hasLocalizerData -> m_hasLocaleData
        (WebCore::Locale::Locale):
        (WebCore::Locale::createDefault):
        * platform/text/LocaleICU.cpp: Follow renamings.
        * platform/text/LocaleICU.h: Ditto.
        * platform/text/LocaleNone.cpp: Ditto.
        * platform/text/LocaleWin.cpp: Ditto.
        * platform/text/LocaleWin.h: Ditto.
        * platform/text/mac/LocaleMac.h: Ditto.
        * platform/text/mac/LocaleMac.mm: Ditto.

2012-10-29  Mike West  <mkwst@chromium.org>

        Web Inspector: Error messages lines in console are 1px taller than regular messages
        https://bugs.webkit.org/show_bug.cgi?id=100521

        Reviewed by Pavel Feldman.

        The inspector is adding a 1px bottom border to list elements inside
        a disclosure list. This is unnecessary in the current layout; it's
        causing console messages with stack traces to be one pixel taller than
        other console messages, which this patch fixes.

        As a drive-by, this patch also adjusts the disclosure triangle's
        position to match.

        * inspector/front-end/inspector.css:
        (.outline-disclosure li):
        (.outline-disclosure li.parent::before):

2012-10-29  Mike West  <mkwst@chromium.org>

        Web Inspector: The bubble for repeated errors is misplaced.
        https://bugs.webkit.org/show_bug.cgi?id=100525

        Reviewed by Pavel Feldman.

        The repeated-message bubble is displayed as an inline-block element,
        which works well as long as no stack trace is present. If present, the
        message is wrapped in an 'ol' element displayed as a block, which pushes
        itself down to the next line.

        To avoid that issue, this patch switches the wrapper element to flexbox,
        glorious flexbox.

        * inspector/front-end/inspector.css:
        (.console-message .bubble):
        (.repeated-message .outline-disclosure):
        (.filter-all .console-log-level.repeated-message, .filter-logs .console-log-level.repeated-message):

2012-10-29  Alexander Pavlov  <apavlov@chromium.org>

        Web Inspector: [Styles] Handle non-parsedOk properties as inactive ones
        https://bugs.webkit.org/show_bug.cgi?id=100119

        Reviewed by Vsevolod Vlasov.

        Test: inspector/styles/inactive-properties.html

        * inspector/front-end/StylesSidebarPane.js:
        (WebInspector.StylesSidebarPane.createExclamationMark):
        (WebInspector.ComputedStylePropertiesSection.prototype.rebuildComputedTrace):
        * inspector/front-end/elementsPanel.css:
        (.styles-section.computed-style .properties li.not-parsed-ok):
        (.styles-section.computed-style .properties li.not-parsed-ok img.exclamation-mark):
        (.styles-section .properties .not-parsed-ok):

2012-10-29  Eric Seidel  <eric@webkit.org>

        Make rendering tables with <colgroups> twice as fast by avoiding walking the DOM for colgroups 4 times for each cell
        https://bugs.webkit.org/show_bug.cgi?id=100630

        Reviewed by Ojan Vafai.

        This is not a complete fix.  Our rendering of this large tables still takes 7.8 seconds
        on my retina MBP (down from 14.3s before this change).
        It's very expensive to walk the DOM each time we call RenderTable::colElement
        so this caches the RenderTableCol* in a vector for easier walking.
        We invalidate the cache any time a RenderTableCol is added or removed from the
        rendering sub-tree to avoid holding a bad pointer.

        * rendering/RenderTable.cpp:
        (WebCore::RenderTable::RenderTable):
        (WebCore::RenderTable::invalidateCachedColumns):
        (WebCore):
        (WebCore::RenderTable::addColumn):
        (WebCore::RenderTable::removeColumn):
        (WebCore::RenderTable::updateColumnCache):
        (WebCore::RenderTable::slowColElement):
        * rendering/RenderTable.h:
        (RenderTable):
        * rendering/RenderTableCol.cpp:
        (WebCore::RenderTableCol::insertedIntoTree):
        (WebCore):
        (WebCore::RenderTableCol::willBeRemovedFromTree):
        * rendering/RenderTableCol.h:

2012-10-28  Kent Tamura  <tkent@chromium.org>

        Rename Localizer.{cpp,h} to PlatformLocale.{cpp,h}
        https://bugs.webkit.org/show_bug.cgi?id=100627

        Reviewed by Yuta Kitamura.

        We'd like to rename Localizer class to Locale class. However we use
        PlatformLocale.cpp and PlatformLocale.h as their file names because
        <locale.h> exists in the C standard.  In this patch, we rename only file
        names. We're going to rename the class name later.

        No new tests. This doesn't make any behavior change.

        * platform/text/PlatformLocale.h: Renamed from Source/WebCore/platform/text/Localizer.h.
        * platform/text/PlatformLocale.cpp: Renamed from Source/WebCore/platform/text/Localizer.cpp.
        Follow the Localizer.h -> PlatformLocale.cpp renaming.

        * CMakeLists.txt: Follow the file name renaming.
        * GNUmakefile.list.am: Ditto.
        * Target.pri: Ditto.
        * WebCore.gypi: Ditto.
        * WebCore.vcproj/WebCore.vcproj: Ditto.
        * WebCore.xcodeproj/project.pbxproj: Ditto.
        * dom/Document.cpp: Ditto.
        * html/BaseDateAndTimeInputType.cpp: Ditto.
        * html/BaseMultipleFieldsDateAndTimeInputType.cpp: Ditto.
        * html/DateInputType.cpp: Ditto.
        * html/DateTimeInputType.cpp: Ditto.
        * html/DateTimeLocalInputType.cpp: Ditto.
        * html/MonthInputType.cpp: Ditto.
        * html/NumberInputType.cpp: Ditto.
        * html/TimeInputType.cpp: Ditto.
        * html/shadow/DateTimeEditElement.cpp: Ditto.
        * html/shadow/DateTimeNumericFieldElement.cpp: Ditto.
        * page/PagePopupController.cpp: Ditto.
        * platform/text/LocaleICU.h: Ditto.
        * platform/text/LocaleNone.cpp: Ditto.
        * platform/text/LocaleWin.h: Ditto.
        * platform/text/mac/LocaleMac.h: Ditto.

2012-10-28  Shinya Kawanaka  <shinyak@chromium.org>

        The shadow element is not reprojected to a nested ShadowRoot.
        https://bugs.webkit.org/show_bug.cgi?id=99228

        Reviewed by Dimitri Glazkov.

        We support shadow reprojection; elements distributed to <shadow> element can be reprojected to <content> now.

        First, we have a distribution vector for each InsertionPoint, even if InsertionPoint is a shadow insertion point.
        And we update a node-distribution map. Basically We're creating a map from node to InsertionPoint in ElementShadow.
        If a node can be distributed to several InsertionPoint (e.g. in case reprojection happens),
        the InsertionPoint in older ShadowDOM is chosen.

        We also fix ComposedShadowTreeWalker to consider shadow reprojection.

        Tests: fast/dom/shadow/composed-shadow-tree-walker-shadow-reprojection.html
               fast/dom/shadow/shadow-reprojection-click.html
               fast/dom/shadow/shadow-reprojection-dynamic.html
               fast/dom/shadow/shadow-reprojection-fallback.html
               fast/dom/shadow/shadow-reprojection.html
               fast/dom/shadow/shadow-reprojection2.html

        * css/StyleResolver.cpp:
        (WebCore::shouldResetStyleInheritance): Now context.insertionPoint() returns the final insertion point where
        a node is distributed. So we don't have to trace shadow insertion point anymore here.
        (WebCore::StyleResolver::styleForElement): Since a direct child of ShadowRoot can be distributed now. In that case,
        we don't have any parentElement. The parent node is a ShadowRoot in that case.
        * dom/ComposedShadowTreeWalker.cpp:
        (WebCore::nodeCanBeDistributed): If a node can be distributed, returns true.
        (WebCore):
        (WebCore::resolveReprojection): Resolves content-reprojection and shadow-reprojection both.
        (WebCore::ComposedShadowTreeWalker::traverseSiblingOrBackToInsertionPoint):
        (WebCore::ComposedShadowTreeWalker::traverseParent):
        (WebCore::ComposedShadowTreeWalker::traverseParentBackToYoungerShadowRootOrHost): A case ShadowRoot is assigned
        to some InsertionPoint should be handled with in traverseSiblingOrBackToInsertionPoint. So we remove it.
        (WebCore::AncestorChainWalker::parent): Now we have a case that a direct child of ShadowRoot can be distributed.
        In that case, we should not update m_distributedNode.
        * dom/ElementShadow.cpp:
        (WebCore::ElementShadow::insertionPointFor): Since we have a distribution vector for each InsertionPoint,
        we don't have a special case that a ShadowRoot is assigned to some InsertionPoint. Actually the existing code
        is not correct now due to shadow reprojection.
        * html/shadow/ContentDistributor.cpp:
        (WebCore::ContentDistributor::populate): Populate a POOL. If a node is InsertionPoint, we fill it with the
        distributed nodes.
        (WebCore):
        (WebCore::ContentDistributor::distribute): Since we want to make a distribution vector for each InsertionPoint,
        we have to resolve a shadow InsertionPoint
        (WebCore::ContentDistributor::distributeNodeChildrenTo):
        * html/shadow/ContentDistributor.h:
        (ContentDistributor):
        * html/shadow/HTMLShadowElement.h:
        (WebCore::toHTMLShadowElement):
        (WebCore):
        * html/shadow/InsertionPoint.h:
        (WebCore::parentNodeForDistribution):
        (WebCore::parentElementForDistribution):
        (WebCore):

2012-10-28  Kunihiko Sakamoto  <ksakamoto@chromium.org>

        Webkit adds a boundary to the Content-Type: text/plain POST header
        https://bugs.webkit.org/show_bug.cgi?id=100445

        Reviewed by Kent Tamura.

        Fixed a bug where an empty boundary parameter was added to Content-Type
        header when POSTing forms with enctype=text/plain.

        Test: http/tests/misc/form-post-textplain.html

        * loader/FormSubmission.cpp:
        (WebCore::FormSubmission::populateFrameLoadRequest): Add boundary parameter to
        Content-Type only when a boundary string is generated.

2012-10-28  Philip Rogers  <pdr@google.com>

        Cache calcMode() value for SVG animations.
        https://bugs.webkit.org/show_bug.cgi?id=99694

        Reviewed by Eric Seidel.

        This patch refactors SVGAnimationElement::calcMode() to return a cached value instead
        of recalculating its value on every call. On a simple test of 100 rectangles with 100
        animations each, calls to calcMode() account for 3% of the total animation. After this
        patch, calcMode() no longer appears in animation profiles at all.

        No new tests as this functionality is covered by existing tests.

        * svg/SVGAnimateMotionElement.cpp:
        (WebCore::SVGAnimateMotionElement::SVGAnimateMotionElement):

            The default calcMode for all animation types is linear except AnimateMotion,
            which defaults to CalcModePaced.
            See: http://www.w3.org/TR/SVG/single-page.html#animate-CalcModeAttribute

        * svg/SVGAnimationElement.cpp:
        (WebCore::SVGAnimationElement::SVGAnimationElement):
        (WebCore::SVGAnimationElement::isSupportedAttribute):
        (WebCore::SVGAnimationElement::parseAttribute):
        (WebCore::SVGAnimationElement::setCalcMode):
        * svg/SVGAnimationElement.h:
        (WebCore::SVGAnimationElement::calcMode):
        (WebCore::SVGAnimationElement::setCalcMode):
        (SVGAnimationElement):

2012-10-28  Dimitri Glazkov  <dglazkov@chromium.org>

        Get rid of StyleResolver state related to unknown pseudo-elements.
        https://bugs.webkit.org/show_bug.cgi?id=100582

        Reviewed by Eric Seidel.

        All of the state, related to unknown pseudo-elements is already understood at the time of collecting rules.
        We can just get rid of most of this code in StyleResolver.

        At the time of matching rules, we know for certain that only rules that contain unknown pseudo-elements,
        or are UA rules, or are explicitly invited by a TreeScope will match. So we can just return early in many cases.

        No change in behavior, covered by existing tests.

        * css/SelectorChecker.cpp:
        (WebCore::SelectorChecker::checkSelector): Removed now-unnecessary param.
        (WebCore::SelectorChecker::checkOneSelector): Ditto.
        * css/SelectorChecker.h:
        (SelectorChecker): Ditto.
        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::StyleResolver): Ditto.
        (MatchingUARulesScope): Moved class definition here, since we now use it in a different place.
        (WebCore::StyleResolver::collectMatchingRules): Changed the logic to stop matching rules that definitely won't match in a different scope.
        (WebCore::StyleResolver::collectMatchingRulesForList): Removed code that's now unnecesssary.
        (WebCore::StyleResolver::checkSelector): Removed now-unnecessary param.
        (WebCore::StyleResolver::checkRegionSelector): Removed weird dead code.
        * css/StyleResolver.h:
        (StyleResolver): Removed now-unnecessary member.

2012-10-28  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r132696.
        http://trac.webkit.org/changeset/132696
        https://bugs.webkit.org/show_bug.cgi?id=100609

        Needs a bit more clean-up on Chrome Web UI side. (Requested by
        dglazkov on #webkit).

        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::updateFirstLetter):
        * rendering/RenderListBox.h:
        * rendering/RenderObjectChildList.cpp:
        (WebCore::RenderObjectChildList::updateBeforeAfterContent):

2012-10-27  Alexey Proskuryakov  <ap@apple.com>

        All tests crash in WebKit1 mode
        https://bugs.webkit.org/show_bug.cgi?id=100602

        Reviewed by Sam Weinig.

        * platform/PlatformStrategies.cpp: (WebCore::setPlatformStrategies): Fix an incorrect
        assertion - if this function is called twice, it should be with the same strategy.

2012-10-27  Anders Carlsson  <andersca@apple.com>

        Fix AVFoundation build.

        * platform/graphics/avfoundation/objc/MediaPlayerPrivateAVFoundationObjC.mm:
        (WebCore::MediaPlayerPrivateAVFoundationObjC::addKey):

2012-10-27  David Barton  <dbarton@mathscribe.com>

        ASSERTION FAILED: m_next in LayoutState.cpp
        https://bugs.webkit.org/show_bug.cgi?id=99796

        Reviewed by Eric Seidel.

        Before RenderMathMLBlock::computeChildrenPreferredLogicalHeights calls child->layoutIfNeeded(),
        it must ensure a layoutState exists. We disable it in any case, since we are just calculating
        metrics here, and the final layout may well happen again.

        No new tests. I don't know how to create an automated test for this. The crashes users are
        seeing are flaky.

        * rendering/mathml/RenderMathMLBlock.cpp:
        (WebCore::RenderMathMLBlock::computeChildrenPreferredLogicalHeights):

2012-10-27  David Barton  <dbarton@mathscribe.com>

        [MathML] Improve some addChild methods
        https://bugs.webkit.org/show_bug.cgi?id=98791

        Reviewed by Eric Seidel.

        MathML addChild methods need to handle any anonymous renderers correctly. Actually, most MathML elements have a fixed
        number of children, so conformant javascript won't be doing arbitrary addChild and removeChild calls. However, we don't
        want any assertions to fail, and we do want addChild to work correctly when beforeChild == 0, to build up the original
        renderer, and then replaceChild at least should work correctly after that. We therefore clean up these routines before
        giving them to the chromium fuzzers.
        
        It's best to build the anonymous wrappers just once initially if possible, so empty wrappers aren't left in the render
        tree after later removeChild calls.

        Test: mathml/presentation/dynamic.html added for mfrac and msqrt. There are already tests for dynamically changing
        msub/sup elements, in mathml/presentation/m*-changed.xhtml.

        * rendering/mathml/RenderMathMLFraction.cpp:
        (WebCore::RenderMathMLFraction::addChild):
            - The two wrappers are built initially. Also, the old RenderMathMLBlock::addChild(row, beforeChild); doesn't really
              work because beforeChild is buried inside a wrapper. This new routine allows the numerator and denominator to be
              added initially, and then later replaced with replaceChild. It's not clear whether e.g. a plain removeChild of a
              numerator should move the remaining child from the denominator to the numerator or not, so we ignore that for now.
        * rendering/mathml/RenderMathMLRoot.cpp:
        (WebCore::RenderMathMLRoot::addChild):
            - A bit of bullet-proofing for the fuzzers.
        * rendering/mathml/RenderMathMLSubSup.cpp:
        (WebCore::RenderMathMLSubSup::addChild):
            - Like RenderMathMLFraction::addChild, we create the wrappers once initially, and then fill them dynamically.

2012-10-27  Levi Weintraub  <leviw@chromium.org>

        Background images can incorrectly repeat with sub-pixel layout
        https://bugs.webkit.org/show_bug.cgi?id=94622

        Reviewed by Emil A Eklund.

        Attempting to better match author expectations when painting tiled background images. When under
        the effects of zoom with sub-pixel layout enabled, the drawn size of a rendered element can
        differ depending on its location. This change looks at the size of the scaled tiled background
        image size, and either ceils or floors that value depending on if tiling that value will
        result in us being one pixel or less short of covering the background size. This is a heuristic,
        as sub-pixel/zooming isn't specced.

        Test: fast/sub-pixel/scaled-background-image.html

        * rendering/RenderBoxModelObject.cpp:
        (WebCore::applySubPixelHeuristicForTileSize):
        (WebCore):
        (WebCore::RenderBoxModelObject::calculateFillTileSize):

2012-10-27  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r132725.
        http://trac.webkit.org/changeset/132725
        https://bugs.webkit.org/show_bug.cgi?id=100596

        it broke linking on chromium debug bots (Requested by loislo
        on #webkit).

        * inspector/InspectorMemoryAgent.cpp:
        (WebCore::addPlatformComponentsInfo):
        (WebCore):
        (WebCore::InspectorMemoryAgent::getProcessMemoryDistribution):
        * platform/MemoryUsageSupport.cpp:
        (WebCore::MemoryUsageSupport::memoryUsageByComponents):
        * platform/MemoryUsageSupport.h:
        (ComponentInfo):
        (WebCore::MemoryUsageSupport::ComponentInfo::ComponentInfo):
        (MemoryUsageSupport):
        * platform/PlatformMemoryInstrumentation.cpp:
        (WebCore):
        * platform/PlatformMemoryInstrumentation.h:
        (PlatformMemoryTypes):
        * platform/chromium/MemoryUsageSupportChromium.cpp:
        (WebCore::MemoryUsageSupport::memoryUsageByComponents):
        * platform/qt/MemoryUsageSupportQt.cpp:
        (WebCore::MemoryUsageSupport::memoryUsageByComponents):

2012-10-27  Dan Bernstein  <mitz@apple.com>

        REAL_PLATFORM_NAME build setting is no longer needed
        https://bugs.webkit.org/show_bug.cgi?id=100587

        Reviewed by Mark Rowe.

        Removed the definition of REAL_PLATFORM_NAME and replaced references to it with references
        to PLATFORM_NAME.

        * Configurations/Base.xcconfig:
        * Configurations/CompilerVersion.xcconfig:
        * Configurations/DebugRelease.xcconfig:
        * Configurations/FeatureDefines.xcconfig:
        * Configurations/Version.xcconfig:
        * Configurations/WebCore.xcconfig:

2012-10-27  Tony Chang  <tony@chromium.org>

        Remove internals shouldDisplayTrackKind methods; these are also on internals.settings
        https://bugs.webkit.org/show_bug.cgi?id=100564

        Reviewed by Adam Barth.

        Remove duplicate methods from internals that was just forwarding on the call to internals.settings.
        Also fix a bug where we didn't reset these settings properly.

        No new tests, this is covered by existing media/track tests.

        * testing/InternalSettings.cpp:
        (WebCore::InternalSettings::Backup::Backup): Properly save display track settings.
        (WebCore::InternalSettings::Backup::restoreTo): Restore display track settings.
        * testing/InternalSettings.h:
        * testing/InternalSettings.idl: Use [Conditional=VIDEO_TRACK].
        * testing/Internals.cpp: Remove code.
        * testing/Internals.h: Remove code.
        * testing/Internals.idl: Remove code.

2012-10-26  Ilya Tikhonovsky  <loislo@chromium.org>

        Web Inspector: instrument chromium GlyphCache. It keeps ~2mb.
        https://bugs.webkit.org/show_bug.cgi?id=100515

        Reviewed by Yury Semikhatsky.

        I replaced old version with an abstract number with new one which precisely reports allocated SkGlyphCache objects and their sizes.

        * inspector/InspectorMemoryAgent.cpp:
        (WebCore::InspectorMemoryAgent::getProcessMemoryDistribution):
        * platform/MemoryUsageSupport.cpp:
        (WebCore::MemoryUsageSupport::reportMemoryUsage):
        * platform/MemoryUsageSupport.h:
        (MemoryUsageSupport):
        * platform/PlatformMemoryInstrumentation.cpp:
        (WebCore):
        * platform/PlatformMemoryInstrumentation.h:
        (PlatformMemoryTypes):
        * platform/chromium/MemoryUsageSupportChromium.cpp:
        (reportMemoryUsage):
        (WebCore::reportGlyphCache):
        (WebCore):
        (WebCore::MemoryUsageSupport::reportMemoryUsage):
        * platform/qt/MemoryUsageSupportQt.cpp:
        (WebCore::MemoryUsageSupport::reportMemoryUsage):

2012-10-26  Philip Rogers  <pdr@google.com>

        Prevent NaN offset values in ElementTimeControl.
        https://bugs.webkit.org/show_bug.cgi?id=100322

        Reviewed by Abhishek Arya.

        NaN values can cause ElementTimeControl to go back in time!
        If a value of NaN is passed to ElementTimeControl::beginElementAt(offset),
        subsequent sorting will cause an assert in SVGSMILElement::findInstanceTime
        because NaN values are not properly sorted. NaN SMILTime values
        should not be allowed at all, so this patch adds a check for them in
        ElementTimeControl's setters.
 
        This patch also adds preventative asserts to catch if SMILTime is ever
        initialized with NaN, or if addEndTime/addBeginTime are ever called
        with NaN values.

        Test: svg/custom/elementTimeControl-nan-crash.html

        * svg/SVGAnimationElement.cpp:
        (WebCore::SVGAnimationElement::beginElementAt):
        (WebCore::SVGAnimationElement::endElementAt):
        * svg/animation/SMILTime.h:
        (WebCore::SMILTime::SMILTime):
        * svg/animation/SVGSMILElement.cpp:
        (WebCore::SVGSMILElement::addBeginTime):
        (WebCore::SVGSMILElement::addEndTime):

2012-10-26  Charles Wei  <charles.wei@torchmobile.com.cn>

        [BlackBerry] Browser prematurely sends wrong credentials
        https://bugs.webkit.org/show_bug.cgi?id=100585

        Reviewed by Yong Li.

        Manually revert the patch for bug 96362, which causes regressions and the right patch has been
        submitted with patch for bug 100448. Since the auto-revert fails, we use this patch to manually
        revert.

        No new tests. The test is coverted by patch for 100448.

        * platform/network/blackberry/CredentialBackingStore.cpp:
        * platform/network/blackberry/CredentialBackingStore.h:
        (CredentialBackingStore):
        * platform/network/blackberry/NetworkManager.cpp:
        (WebCore::NetworkManager::startJob):

2012-10-26  Brady Eidson  <beidson@apple.com>

        Have NetworkProcess manage resource load scheduling.
        https://bugs.webkit.org/show_bug.cgi?id=100479

        Reviewed by Alexey Proskuryakov.

        Down in WebCore we need to virtualize a handful of ResourceLoadScheduler methods
        to be overridden by WebKit's implementation.

        No new tests (No change in Core behavior).

        * WebCore.exp.in:
        * WebCore.xcodeproj/project.pbxproj:

        * loader/ResourceLoadScheduler.cpp:
        (WebCore::resourceLoadScheduler): Gracefully handle LoaderStrategies wanting to return the default scheduler.
        (WebCore::ResourceLoadScheduler::scheduleLoad): Call notifyDidScheduleResourceRequest.
        (WebCore::ResourceLoadScheduler::notifyDidScheduleResourceRequest): Moved InspectorInstrumentation call
          here so derived classes can do it indirectly.
        (WebCore::ResourceLoadScheduler::startResourceLoader): To allow derived classes the ability to call
          ResourceLoader::start() which only ResourceLoadScheduler can do.

        * loader/ResourceLoadScheduler.h:
        (ResourceLoadScheduler): Virtualize some core public methods so they can be overridden.
        (WebCore::ResourceLoadScheduler::setSerialLoadingEnabled): Make virtual.
        (WebCore::ResourceLoadScheduler::isSuspendingPendingRequests): Make private as it's internal only.

        * loader/ResourceLoader.cpp:
        (WebCore::ResourceLoader::setIdentifier): Add this setter so outside clients can manually change the identifier.

        * loader/ResourceLoader.h:
        (WebCore::ResourceLoader::identifier): Change identifier to explicitly be uint64_t.
        (WebCore::ResourceLoader::request): Make public.
        (ResourceLoader):

2012-10-26  Chris Rogers  <crogers@google.com>

        Implement AudioBufferSourceNode .loopStart and .loopEnd attributes
        https://bugs.webkit.org/show_bug.cgi?id=100170

        Reviewed by Kenneth Russell.

        AudioBufferSourceNode currently only supports looping of an entire AudioBuffer.
        Sample-based synthesis is a very common technique which requires "internal" loop-points.
        For example, the first part of the sample data might represent the attack portion of
        a synthesized instrument, which then enters a loop portion.

        Tests: webaudio/audiobuffersource-loop-comprehensive.html
               webaudio/audiobuffersource-loop-points.html

        * Modules/webaudio/AudioBufferSourceNode.cpp:
        (WebCore::AudioBufferSourceNode::AudioBufferSourceNode):
        (WebCore::AudioBufferSourceNode::process):
        (WebCore::AudioBufferSourceNode::renderFromBuffer):
        * Modules/webaudio/AudioBufferSourceNode.h:
        (AudioBufferSourceNode):
        (WebCore::AudioBufferSourceNode::loopStart):
        (WebCore::AudioBufferSourceNode::loopEnd):
        (WebCore::AudioBufferSourceNode::setLoopStart):
        (WebCore::AudioBufferSourceNode::setLoopEnd):
        * Modules/webaudio/AudioBufferSourceNode.idl:

2012-10-26  Daniel Cheng  <dcheng@chromium.org>

        dragover's default action should prevent drop for file drags
        https://bugs.webkit.org/show_bug.cgi?id=79173

        Reviewed by Tony Chang.

        During a file drag, we need to keep track of whether or not the document has cancelled the
        dragover action. We should only send a drop event if the dragover event was cancelled; this
        matches the behavior of the spec, as well as IE, Gecko, and Opera. The relevant sections
        from the spec are the sections pertaining to dragover and drop events at:
        http://www.whatwg.org/specs/web-apps/current-work/#drag-and-drop-processing-model

        Test: fast/events/only-valid-drop-targets-receive-file-drop.html

        * page/DragController.cpp:
        (WebCore::DragController::performDrag):
        (WebCore::DragController::dragEnteredOrUpdated):
        (WebCore::DragController::tryDocumentDrag):
        * page/DragController.h:
        (DragController): Cleanup to repurpose a variable that doesn't need to be a member anymore
                          and remove the corresponding getter/setter.

2012-10-26  Nico Weber  <thakis@chromium.org>

        Fix a operator ordering bug in SVGSMILElement::calculateAnimationPercentAndRepeat
        https://bugs.webkit.org/show_bug.cgi?id=94756

        Reviewed by Dirk Schulze.

        The function has an early exit for !simpleDuration.value(), so
        !simpleDuration.value() always is 0 when passed as second parameter to
        fmod(), which means fmod() always returns NaN, which always evaluates
        to true. Simplify the code by removing that explicit check.

        No observable behavior change.

        Covered by existing svg tests.

        * svg/animation/SVGSMILElement.cpp:
        (WebCore::SVGSMILElement::calculateAnimationPercentAndRepeat):

2012-10-26  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r132695.
        http://trac.webkit.org/changeset/132695
        https://bugs.webkit.org/show_bug.cgi?id=100581

        caused 20+ test crashes on bots (Requested by estes on
        #webkit).

        * dom/ContainerNode.cpp:
        (WebCore::ContainerNode::suspendPostAttachCallbacks):
        (WebCore::ContainerNode::resumePostAttachCallbacks):
        * loader/MainResourceLoader.cpp:
        (WebCore::MainResourceLoader::loadNow):
        * loader/ResourceLoadScheduler.cpp:
        (WebCore::resourceLoadScheduler):
        * loader/ResourceLoadScheduler.h:
        * loader/ResourceLoader.cpp:
        (WebCore::ResourceLoader::releaseResources):
        (WebCore::ResourceLoader::willSendRequest):
        * loader/cache/CachedResource.cpp:
        (WebCore::CachedResource::load):
        * loader/cache/CachedResourceLoader.cpp:
        (WebCore::CachedResourceLoader::performPostLoadActions):

2012-10-26  Vincent Scheib  <scheib@chromium.org>

        Unreviewed, rolling out r132702.
        http://trac.webkit.org/changeset/132702
        https://bugs.webkit.org/show_bug.cgi?id=100322

        Compile error on Chromium Linux dbg builder (and others)

        * svg/SVGAnimationElement.cpp:
        (WebCore::SVGAnimationElement::beginElementAt):
        (WebCore::SVGAnimationElement::endElementAt):
        * svg/animation/SMILTime.h:
        (WebCore::SMILTime::SMILTime):
        * svg/animation/SVGSMILElement.cpp:
        (WebCore::SVGSMILElement::addBeginTime):
        (WebCore::SVGSMILElement::addEndTime):

2012-10-26  Philip Rogers  <pdr@google.com>

        Prevent NaN offset values in ElementTimeControl.
        https://bugs.webkit.org/show_bug.cgi?id=100322

        Reviewed by Abhishek Arya.

        NaN values can cause ElementTimeControl to go back in time!
        If a value of NaN is passed to ElementTimeControl::beginElementAt(offset),
        subsequent sorting will cause an assert in SVGSMILElement::findInstanceTime
        because NaN values are not properly sorted. NaN SMILTime values
        should not be allowed at all, so this patch adds a check for them in
        ElementTimeControl's setters.

        This patch also adds preventative asserts to catch if SMILTime is ever
        initialized with NaN, or if addEndTime/addBeginTime are ever called
        with NaN values.

        Test: svg/custom/elementTimeControl-nan-crash.html

        * svg/SVGAnimationElement.cpp:
        (WebCore::SVGAnimationElement::beginElementAt):
        (WebCore::SVGAnimationElement::endElementAt):
        * svg/animation/SMILTime.h:
        (WebCore::SMILTime::SMILTime):
        * svg/animation/SVGSMILElement.cpp:
        (WebCore::SVGSMILElement::addBeginTime):
        (WebCore::SVGSMILElement::addEndTime):

2012-10-26  Tony Chang  <tony@chromium.org>

        Move non-Settings Inspector methods from internals.settings to internals
        https://bugs.webkit.org/show_bug.cgi?id=100392

        Reviewed by Adam Barth.

        These methods don't have to do with the WebCore Settings object, so move them up to internals.
        I moved the reset code from InternalSettings to Internals.

        No new tests, this is just a rename. Existing tests should pass.

        * testing/InternalSettings.cpp:
        (WebCore::InternalSettings::Backup::Backup): Remove inspector methods.
        (WebCore::InternalSettings::Backup::restoreTo): Remove inspector methods.
        * testing/InternalSettings.h:
        * testing/InternalSettings.idl:
        * testing/Internals.cpp:
        (WebCore::Internals::resetToConsistentState): New method for resetting page state. Named after similar
        methods in WTR.
        (WebCore::Internals::setInspectorResourcesDataSizeLimits): Moved from InspectorSettings.
        (WebCore::Internals::setJavaScriptProfilingEnabled): Moved from InspectorSettings.
        * testing/Internals.h:
        * testing/Internals.idl:
        * testing/js/WebCoreTestSupport.cpp:
        (WebCoreTestSupport::resetInternalsObject): Reset state in Internals.
        * testing/v8/WebCoreTestSupport.cpp:
        (WebCoreTestSupport::resetInternalsObject): Reset state in Internals.

2012-10-26  Dominic Mazzoni  <dmazzoni@google.com>

        AX: Notification should be sent when accessibilityIsIgnored changes
        https://bugs.webkit.org/show_bug.cgi?id=99547

        Reviewed by Chris Fleizach.

        Adds a new flag in AccessibilityObject that keeps track of the most recent
        value of accessibilityIsIgnored(). After certain events such as an ARIA
        attribute change or content change, checks the new value of
        accessibilityIsIgnored() and posts a "children changed" notification on the
        parent node if it changed, making sure the parent recomputes its vector of
        (unignored) children.

        Also moves handling of attribute changes to AXObjectCache, and sends
        notifications for some attribute changes that were previously silent. On
        Chromium, all changes to an accessibility object's attributes should
        result in some notification.

        Some tests would have broken because an AccessibilityScrollView was created
        and holding a reference to a ScrollView for an iframe after it was deleted,
        so this change switches AccessibilityScrollView to hold a weak reference
        to ScrollView instead.

        Tests: platform/chromium/accessibility/is-ignored-change-sends-notification.html
               platform/chromium/accessibility/other-aria-attribute-change-sends-notification.html
               platform/chromium/accessibility/text-change-notification.html

        * accessibility/AXObjectCache.cpp:
        (WebCore::AXObjectCache::focusedUIElementForPage):
        (WebCore::AXObjectCache::getOrCreate):
        (WebCore::AXObjectCache::textChanged):
        (WebCore):
        (WebCore::AXObjectCache::childrenChanged):
        (WebCore::AXObjectCache::handleAriaRoleChanged):
        (WebCore::AXObjectCache::handleAttributeChanged):
        (WebCore::AXObjectCache::labelChanged):
        (WebCore::AXObjectCache::recomputeIsIgnored):
        * accessibility/AXObjectCache.h:
        (AXObjectCache):
        (WebCore::AXObjectCache::childrenChanged):
        (WebCore::AXObjectCache::textChanged):
        (WebCore::AXObjectCache::handleAttributeChanged):
        (WebCore::AXObjectCache::recomputeIsIgnored):
        * accessibility/AccessibilityNodeObject.cpp:
        (WebCore::AccessibilityNodeObject::insertChild):
        * accessibility/AccessibilityObject.cpp:
        (WebCore::AccessibilityObject::AccessibilityObject):
        (WebCore::AccessibilityObject::cachedIsIgnoredValue):
        (WebCore):
        (WebCore::AccessibilityObject::setCachedIsIgnoredValue):
        (WebCore::AccessibilityObject::notifyIfIgnoredValueChanged):
        * accessibility/AccessibilityObject.h:
        (WebCore::AccessibilityObject::textChanged):
        (AccessibilityObject):
        * accessibility/AccessibilityRenderObject.cpp:
        (WebCore::AccessibilityRenderObject::accessibilityIsIgnored):
        (WebCore::AccessibilityRenderObject::correspondingControlForLabelElement):
        (WebCore::AccessibilityRenderObject::textChanged):
        (WebCore::AccessibilityRenderObject::addHiddenChildren):
        (WebCore::AccessibilityRenderObject::addChildren):
        * accessibility/AccessibilityRenderObject.h:
        (AccessibilityRenderObject):
        * accessibility/AccessibilityScrollView.cpp:
        (WebCore::AccessibilityScrollView::~AccessibilityScrollView):
        (WebCore):
        (WebCore::AccessibilityScrollView::detach):
        (WebCore::AccessibilityScrollView::isAttachment):
        (WebCore::AccessibilityScrollView::widgetForAttachmentView):
        (WebCore::AccessibilityScrollView::updateScrollbars):
        (WebCore::AccessibilityScrollView::webAreaObject):
        (WebCore::AccessibilityScrollView::elementRect):
        (WebCore::AccessibilityScrollView::documentFrameView):
        (WebCore::AccessibilityScrollView::parentObject):
        (WebCore::AccessibilityScrollView::parentObjectIfExists):
        (WebCore::AccessibilityScrollView::getScrollableAreaIfScrollable):
        (WebCore::AccessibilityScrollView::scrollTo):
        * accessibility/AccessibilityScrollView.h:
        (WebCore::AccessibilityScrollView::scrollView):
        (AccessibilityScrollView):
        * accessibility/AccessibilityTable.cpp:
        (WebCore::AccessibilityTable::isDataTable):
        * accessibility/chromium/AXObjectCacheChromium.cpp:
        (WebCore::AXObjectCache::postPlatformNotification):
        * dom/Element.cpp:
        (WebCore::Element::attributeChanged):
        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::deleteLineBoxTree):
        (WebCore::RenderBlock::createAndAppendRootInlineBox):
        * rendering/RenderObject.cpp:
        (WebCore::RenderObject::styleWillChange):
        * rendering/RenderText.cpp:
        (WebCore::RenderText::setText):

2012-10-26  Joshua Bell  <jsbell@chromium.org>

        [WebKitIDL] Optional dictionary types should have default values of empty dictionary
        https://bugs.webkit.org/show_bug.cgi?id=100547

        Reviewed by Adam Barth.

        Per WebIDL, "Optional dictionary type arguments are always considered to have a default
        value of an empty dictionary." WebKitIDL already supported this via the extended attribute
        [Optional=DefaultIsUndefined] but make this the default for Dictionary.

        Binding test expectations updated.

        * Modules/filesystem/DirectoryEntry.h: Remove default parameters.
        (DirectoryEntry):
        * Modules/indexeddb/IDBDatabase.h: Remove overloads.
        (IDBDatabase):
        * Modules/indexeddb/IDBObjectStore.h: Remove overloads.
        (IDBObjectStore):
        * Modules/mediastream/RTCPeerConnection.idl: Remove DefaultIsUndefined annotations.
        * bindings/scripts/CodeGeneratorJS.pm: Special case for Optional Dictionary.
        (GenerateParametersCheck):
        * bindings/scripts/CodeGeneratorV8.pm: Ditto.
        (GenerateParametersCheck):
        * bindings/scripts/test/JS/JSTestObj.cpp:
        (WebCore::jsTestObjPrototypeFunctionOptionsObject): Updated expectation - no early call.
        * bindings/scripts/test/V8/V8TestObj.cpp:
        (WebCore::TestObjV8Internal::optionsObjectCallback): Ditto.

2012-10-26  Vincent Scheib  <scheib@chromium.org>

        Generated should not be supported for things with a shadow
        https://bugs.webkit.org/show_bug.cgi?id=98836

        Unreviewed rollout of rollout of http://trac.webkit.org/changeset/132269.
        Initial rollout was speculative and was shown not to be related to crashes.
        Change author: Elliott Sprehn  <esprehn@chromium.org>

        As far as CSS is concerned inputs and things with shadow content inside 
        shouldn't support pseudo elements like :before, :after or :first-letter.
        Neither Gecko or Presto supports it, and we only accidentally supported 
        it. 
 
        Until the spec tells us what to do we should disable support. This is 
        also neccesary because the new generated content implementation doesn't 
        support shadows. 

        Test: fast/forms/pseudo-elements.html

        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::updateFirstLetter):
        * rendering/RenderListBox.h:
        * rendering/RenderObjectChildList.cpp:
        (WebCore::RenderObjectChildList::updateBeforeAfterContent):

2012-10-26  Brady Eidson  <beidson@apple.com>

        Crash in WebProces at WebCore::ResourceLoadScheduler::crossOriginRedirectReceived + 78
        <rdar://problem/12575514> and https://bugs.webkit.org/show_bug.cgi?id=100554

        Reviewed by Alexey Proskuryakov.

        This was fallout from http://trac.webkit.org/changeset/132501 where I missed some of the 
        spots that call resourceLoadScheduler().

        As a result we were creating more than one ResourceLoadScheduler, allowing the host records 
        to get out of sync.

        The fix that also results in less #ifdefs scattered throughout the code is to use a single 
        choke point for all ResourceLoadScheduler access.

        No new tests 
        (No change of behavior for the default config, not testable at this time in the repro config)

        Add a single choke point for accessing the correct ResourceLoadScheduler:
        * loader/ResourceLoadScheduler.cpp:
        (WebCore::defaultResourceLoadScheduler): New private function that keeps the singleton default ResourceLoadScheduler.
        (WebCore::resourceLoadScheduler): Refactor this function to either ask the LoaderStrategy or call through to

        Revert back to using that single choke point everywhere:
        * dom/ContainerNode.cpp:
        (WebCore::ContainerNode::suspendPostAttachCallbacks):
        (WebCore::ContainerNode::resumePostAttachCallbacks):

        * loader/MainResourceLoader.cpp:
        (WebCore::MainResourceLoader::loadNow):

        * loader/ResourceLoader.cpp:
        (WebCore::ResourceLoader::releaseResources):
        (WebCore::ResourceLoader::willSendRequest):

        * loader/cache/CachedResource.cpp:
        (WebCore::CachedResource::load):

        * loader/cache/CachedResourceLoader.cpp:
        (WebCore::CachedResourceLoader::performPostLoadActions):

2012-10-26  Elliott Sprehn  <esprehn@chromium.org>

        Try to fix the windows build
        https://bugs.webkit.org/show_bug.cgi?id=100556

        Reviewed by Eric Seidel.

        Touch files by adding whitespace to try and make the windows
        build bot regenerate files.

        No new tests, just kick the bot.

        * dom/DOMAllInOne.cpp:
        * html/HTMLElementsAllInOne.cpp:
        * html/shadow/TextControlInnerElements.cpp:

2012-10-26  Rob Buis  <rbuis@rim.com>

        [BlackBerry] Platform Abstraction for WebKit Resource/Image Loading
        https://bugs.webkit.org/show_bug.cgi?id=100518

        PR 231732

        Reviewed by Yong Li.

        Use the new resource/image loading abstraction ResourceStore.

        * platform/graphics/blackberry/ImageBlackBerry.cpp:
        (WebCore::Image::loadPlatformResource):

2012-10-26  Bear Travis  <betravis@adobe.com>

        [CSS Exclusions] Block children have incorrect offset when shape-inside element lays out below other elements
        https://bugs.webkit.org/show_bug.cgi?id=98189

        Reviewed by Dirk Schulze.

        The initial code assumed that each block created a new layout state, such that
        LayoutState::layoutOffset would be specific to each block child of a shape-inside.
        Typically, however, block children of a shape-inside do not create a new layout state,
        and therefore we use the current element's offset instead.

        Test: fast/exclusions/shape-inside/shape-inside-subsequent-blocks.html

        * rendering/RenderBlockLineLayout.cpp:
        (WebCore::RenderBlock::layoutRunsAndFloatsInRange): Modified to use only logicalTop
        rather than LayoutState::layoutOffset::width/height and logicalTop.

2012-10-26  Elliott Sprehn  <esprehn@chromium.org>

        Remove setRenderStyle in favor of callbacks on HTMLOptionElement and HTMLOptGroupElement
        https://bugs.webkit.org/show_bug.cgi?id=100397

        Reviewed by Ojan Vafai.

        Use Node custom callbacks to support the non-renderer style caching for option
        and optgroup eliminating the need for setRenderStyle.

        setRenderStyle only existed to support HTMLOptionElement and HTMLOptGroupElement
        so they could store their RenderStyle even though they have no renderer. This
        means all style setting went through the virtual call to setRenderStyle, and it
        also hid the if statement protecting against null renderers meaning we end up
        checking if the renderer is null repeatedly in recalcStyle. This refactor cleans
        up recalcStyle to be more clear about what's going on.

        No new tests needed, this is just a refactor.

        * dom/Element.cpp:
        (WebCore::Element::pseudoStyleCacheIsInvalid):
        (WebCore::Element::recalcStyle):
        * dom/Node.cpp:
        (WebCore::Node::createRenderer):
        (WebCore::Node::setRenderStyle):
            Removed this method because it was only here to support HTMLOptionElement
            and HTMLOptGroupElement. Instead we can use node custom callbacks.
        * dom/Node.h:
        (WebCore::Node::nonRendererStyle): Renamed from nonRendererRenderStyle to match other style methods.
        * dom/NodeRenderStyle.h:
        (WebCore::Node::renderStyle):
        * html/HTMLOptGroupElement.cpp:
        (WebCore::HTMLOptGroupElement::HTMLOptGroupElement):
        (WebCore::HTMLOptGroupElement::attach): Reorder the logic to avoid calling styleForRenderer twice.
        (WebCore::HTMLOptGroupElement::updateNonRenderStyle): Updates the cached non-renderer style.
        (WebCore::HTMLOptGroupElement::nonRendererStyle):
        (WebCore::HTMLOptGroupElement::customStyleForRenderer):
        * html/HTMLOptGroupElement.h:
        * html/HTMLOptionElement.cpp:
        (WebCore::HTMLOptionElement::HTMLOptionElement):
        (WebCore::HTMLOptionElement::attach): Reorder the logic to avoid calling styleForRenderer twice.
        (WebCore::HTMLOptionElement::updateNonRenderStyle): Updates the cached non-renderer style.
        (WebCore::HTMLOptionElement::nonRendererStyle):
        (WebCore::HTMLOptionElement::customStyleForRenderer):
        (WebCore::HTMLOptionElement::didRecalcStyle): Requests the repaint of the select like setRenderStyle used to.
        * html/HTMLOptionElement.h:

2012-10-26  Dirk Schulze  <krit@webkit.org>

        -webkit-clip-path property should just reference clipPath
        https://bugs.webkit.org/show_bug.cgi?id=100531

        Reviewed by Eric Seidel.

        The -webkit-clip-path property should just reference clipPath. Added a check for that.

        Test: css3/masking/clip-path-reference-of-fake-clipPath.html

        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::paintLayerContents):

2012-10-26  Aaron Colwell  <acolwell@chromium.org>

        Remove the circular reference between TextTrack and TextTrackCue
        https://bugs.webkit.org/show_bug.cgi?id=100300

        Reviewed by Eric Carlson.

        Changed TextTrackCue.m_track to a normal pointer to break the circular
        reference that was keeping both objects from ever getting deleted.

        No new tests. This simply fixes a memory leak.

        * html/track/TextTrack.cpp:
        (WebCore::TextTrack::~TextTrack):
        * html/track/TextTrackCue.cpp:
        (WebCore::TextTrackCue::TextTrackCue):
        (WebCore::TextTrackCue::~TextTrackCue):
        (WebCore::TextTrackCue::track):
        (WebCore::TextTrackCue::setTrack):
        * html/track/TextTrackCue.h:
        (TextTrackCue):

2012-10-26  Vsevolod Vlasov  <vsevik@chromium.org>

        Web Inspector: Breakpoints are not managed correctly when editing uiSourceCode that was bound to ScriptFile after JavaScriptSourceFrame creation.
        https://bugs.webkit.org/show_bug.cgi?id=100535

        Reviewed by Pavel Feldman.

        Added SourceMappingChanged event to UISourceCode and made
        JavaScriptSourceFrame update ScriptFile events listeners on it.

        * inspector/front-end/JavaScriptSourceFrame.js:
        (WebInspector.JavaScriptSourceFrame):
        (WebInspector.JavaScriptSourceFrame.prototype._onSourceMappingChanged):
        (WebInspector.JavaScriptSourceFrame.prototype._updateScriptFile):
        * inspector/front-end/ResourceScriptMapping.js:
        (WebInspector.ResourceScriptMapping.prototype._bindUISourceCodeToScripts):
        * inspector/front-end/UISourceCode.js:
        (WebInspector.UISourceCode.prototype.setSourceMapping):

2012-10-26  Vincent Scheib  <scheib@chromium.org>

        Unreviewed, rolling out r132644.
        http://trac.webkit.org/changeset/132644
        https://bugs.webkit.org/show_bug.cgi?id=100497

        Causes webkit_unit_tests
        MemoryInstrumentationTest.ImageObserver to fail.

        * platform/network/ResourceRequestBase.cpp:
        (WebCore::ResourceRequestBase::reportMemoryUsage):
        * platform/network/ResourceRequestBase.h:
        (ResourceRequestBase):
        * platform/network/chromium/ResourceRequest.cpp:
        * platform/network/chromium/ResourceRequest.h:

2012-10-26  Zeno Albisser  <zeno@webkit.org>

        [Qt] MiniBrowser segfaults on exit after using WebGL.
        https://bugs.webkit.org/show_bug.cgi?id=100523

        The display connection must not be closed before
        destroying the offscreen window.
        Therefore opening the connection is moved to the
        getXWindow() function. And closing the connection
        is being moved to the destructor of the offscreen window.

        Reviewed by Kenneth Rohde Christiansen.


        * platform/graphics/surfaces/qt/GraphicsSurfaceGLX.cpp:
        (WebCore::OffScreenRootWindow::OffScreenRootWindow):
        (WebCore::OffScreenRootWindow::getXWindow):
        (OffScreenRootWindow):
        (WebCore::OffScreenRootWindow::display):
        (WebCore::OffScreenRootWindow::~OffScreenRootWindow):
        (WebCore):
        (WebCore::GraphicsSurfacePrivate::GraphicsSurfacePrivate):
        (WebCore::GraphicsSurfacePrivate::~GraphicsSurfacePrivate):
        (WebCore::GraphicsSurfacePrivate::createSurface):

2012-10-26  Parth Patel  <parpatel@rim.com>

        [BlackBerry] Extending existing ThreadUnsafe singletons in webkit to
        Generic ThreadUnsafe Singleton
        https://bugs.webkit.org/show_bug.cgi?id=100529

        Reviewed by Yong Li.

        No new tests added as there was no behavioural change.

        * platform/network/blackberry/NetworkManager.cpp:
        (WebCore):
        * platform/network/blackberry/NetworkManager.h:
        (NetworkManager):

2012-10-26  Mike West  <mkwst@chromium.org>

        Web Inspector: Fix log-type icon alignment.
        https://bugs.webkit.org/show_bug.cgi?id=100520

        Reviewed by Yury Semikhatsky.

        The icons are just a pixel or two off, and it's driving me nuts.

        * inspector/front-end/inspector.css:
        (.console-message::before, .console-user-command::before, #console-prompt::before, .console-group-title::before):
        (.console-warning-level::before):

2012-10-26  Erik Arvidsson  <arv@chromium.org>

        Replaceable attributes should also have readonly
        https://bugs.webkit.org/show_bug.cgi?id=91768

        Reviewed by Adam Barth.

        This updates the code generators for JSC and V8 to handle this case correctly.

        * Modules/intents/DOMWindowIntents.idl:
        * bindings/scripts/CodeGeneratorJS.pm:
        * bindings/scripts/CodeGeneratorV8.pm:
        * bindings/scripts/test/GObject/WebKitDOMTestObj.cpp:
        * bindings/scripts/test/ObjC/DOMTestObj.h:
        * bindings/scripts/test/ObjC/DOMTestObj.mm:
        * bindings/scripts/test/TestObj.idl:
        * bindings/scripts/test/V8/V8TestObj.cpp:
        * page/DOMWindow.idl:
        * workers/WorkerContext.idl:

2012-10-26  Nico Weber  <thakis@chromium.org>

        Clear m_orientation in FrameData::clear() for skia
        https://bugs.webkit.org/show_bug.cgi?id=100456

        Reviewed by Stephen White.

        clear() is only called by the FrameData destructor and for multi-image
        images in BitmapImage::destroyDecodedData(). Multi-frame images don't
        have exif data, so this patch should have no effect in practice. It
        makes the skia code match the CG code in BitmapImageCG.cpp though.

        * platform/graphics/skia/ImageSkia.cpp:
        (WebCore::FrameData::clear):

2012-10-26  Florin Malita  <fmalita@chromium.org>

        Crash on loading SVG filter resource on HTML element
        https://bugs.webkit.org/show_bug.cgi?id=100491

        Reviewed by Dirk Schulze.

        Skip non-filter elements referenced via -webkit-filter.

        Test: svg/filters/filter-reference-crash.html

        * rendering/RenderLayerFilterInfo.cpp:
        (WebCore::RenderLayerFilterInfo::updateReferenceFilterClients):

2012-10-26  Antti Koivisto  <antti@apple.com>

        Lots of time spent under DNSResolveQueue::platformProxyIsEnabledInSystemPreferences
        https://bugs.webkit.org/show_bug.cgi?id=100514

        Reviewed by Anders Carlsson.

        DNSResolveQueue::platformProxyIsEnabledInSystemPreferences gets called for every link in
        the document. The function is relatively slow.
        
        This patch caches the result of the last check for 5 seconds. Based on code comments
        prefetching is disabled with proxies due to regressing performance with some configurations.
        Proxy status changes rarely and a slight reaction delay shoudn't cause practical problems.

        * platform/network/DNSResolveQueue.cpp:
        (WebCore::DNSResolveQueue::DNSResolveQueue):
        
            Add constructor. Also fixes a bug, m_requestsInFlight was not initialized.
            
        (WebCore):
        (WebCore::DNSResolveQueue::isUsingProxy):
        (WebCore::DNSResolveQueue::add):
        (WebCore::DNSResolveQueue::fired):
        * platform/network/DNSResolveQueue.h:
        (DNSResolveQueue):

2012-10-26  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r132662.
        http://trac.webkit.org/changeset/132662
        https://bugs.webkit.org/show_bug.cgi?id=100528

        It is not necessary any more. (Requested by loislo on
        #webkit).

        * platform/qt/MemoryUsageSupportQt.cpp:
        (WebCore::MemoryUsageSupport::memoryUsageByComponents):
        (WebCore):

2012-10-26  Ilya Tikhonovsky  <loislo@chromium.org>

        Unreviewed build fix for Qt builders.

        * platform/qt/MemoryUsageSupportQt.cpp:

2012-10-26  Csaba Osztrogonác  <ossy@webkit.org>

        Unreviewed, rolling out r132658.
        http://trac.webkit.org/changeset/132658
        https://bugs.webkit.org/show_bug.cgi?id=100515

        It broke the Qt build

        * inspector/InspectorMemoryAgent.cpp:
        (WebCore::addPlatformComponentsInfo):
        (WebCore):
        (WebCore::InspectorMemoryAgent::getProcessMemoryDistribution):
        * platform/MemoryUsageSupport.cpp:
        (WebCore::MemoryUsageSupport::memoryUsageByComponents):
        * platform/MemoryUsageSupport.h:
        (ComponentInfo):
        (WebCore::MemoryUsageSupport::ComponentInfo::ComponentInfo):
        (MemoryUsageSupport):
        * platform/PlatformMemoryInstrumentation.cpp:
        (WebCore):
        * platform/PlatformMemoryInstrumentation.h:
        (PlatformMemoryTypes):
        * platform/chromium/MemoryUsageSupportChromium.cpp:
        (WebCore::MemoryUsageSupport::memoryUsageByComponents):

2012-10-26  Vsevolod Vlasov  <vsevik@chromium.org>

        Web Inspector: Some context menu items are duplicated on Resources and Sources panels.
        https://bugs.webkit.org/show_bug.cgi?id=100522

        Reviewed by Pavel Feldman.

        Method appendApplicableItems now receives event as a parameter.
        HandlerRegistry now makes sure that it is not called more than once for certain context menu event.

        * inspector/front-end/BreakpointsSidebarPane.js:
        (WebInspector.JavaScriptBreakpointsSidebarPane.prototype._emptyElementContextMenu):
        (WebInspector.JavaScriptBreakpointsSidebarPane.prototype._breakpointContextMenu):
        (WebInspector.XHRBreakpointsSidebarPane.prototype._emptyElementContextMenu):
        (WebInspector.XHRBreakpointsSidebarPane.prototype._contextMenu):
        * inspector/front-end/CallStackSidebarPane.js:
        (WebInspector.CallStackSidebarPane.Placard.prototype._placardContextMenu):
        * inspector/front-end/ConsoleView.js:
        * inspector/front-end/ContextMenu.js:
        (WebInspector.ContextMenu):
        (WebInspector.ContextMenu.prototype.show):
        (WebInspector.ContextMenu.prototype.appendApplicableItems):
        (WebInspector.ContextMenu.Provider.prototype.appendApplicableItems):
        * inspector/front-end/CookieItemsView.js:
        (WebInspector.CookieItemsView.prototype._contextMenu):
        * inspector/front-end/DOMBreakpointsSidebarPane.js:
        (WebInspector.DOMBreakpointsSidebarPane.prototype._contextMenu):
        * inspector/front-end/DataGrid.js:
        (WebInspector.DataGrid.prototype._contextMenuInDataTable):
        * inspector/front-end/DefaultTextEditor.js:
        (WebInspector.DefaultTextEditor.prototype._contextMenu):
        * inspector/front-end/ElementsPanel.js:
        (WebInspector.ElementsPanel.prototype._contextMenuEventFired.set get var):
        * inspector/front-end/ElementsPanelDescriptor.js:
        (WebInspector.ElementsPanelDescriptor.prototype.appendApplicableItems):
        * inspector/front-end/ElementsTreeOutline.js:
        (WebInspector.ElementsTreeOutline.prototype._contextMenuEventFired):
        * inspector/front-end/HandlerRegistry.js:
        (WebInspector.HandlerRegistry.prototype.appendApplicableItems):
        * inspector/front-end/ImageView.js:
        (WebInspector.ImageView.prototype._contextMenu):
        * inspector/front-end/NavigatorView.js:
        (WebInspector.NavigatorView.prototype.handleContextMenu):
        * inspector/front-end/NetworkPanel.js:
        (WebInspector.NetworkLogView.prototype._contextMenu):
        * inspector/front-end/NetworkPanelDescriptor.js:
        (WebInspector.NetworkPanelDescriptor.prototype.appendApplicableItems):
        * inspector/front-end/ObjectPropertiesSection.js:
        (WebInspector.ObjectPropertiesSection.prototype._contextMenuEventFired):
        (WebInspector.ObjectPropertyTreeElement.prototype._contextMenuFired):
        * inspector/front-end/ProfilesPanel.js:
        (WebInspector.ProfilesPanel.prototype._handleContextMenuEvent):
        (WebInspector.ProfileSidebarTreeElement.prototype.handleContextMenuEvent):
        * inspector/front-end/ResourcesPanel.js:
        (WebInspector.FrameResourceTreeElement.prototype._handleContextMenuEvent):
        (WebInspector.IndexedDBTreeElement.prototype._handleContextMenuEvent):
        (WebInspector.FileSystemListTreeElement.prototype._handleContextMenuEvent):
        (WebInspector.IDBDatabaseTreeElement.prototype._handleContextMenuEvent):
        * inspector/front-end/ScriptsNavigator.js:
        (WebInspector.SnippetsNavigatorView.prototype.handleContextMenu):
        * inspector/front-end/ScriptsPanel.js:
        (WebInspector.ScriptsPanel.prototype.appendApplicableItems):
        * inspector/front-end/ScriptsPanelDescriptor.js:
        (WebInspector.ScriptsPanelDescriptor.prototype.appendApplicableItems):
        * inspector/front-end/StylesSidebarPane.js:
        (WebInspector.StylesSidebarPane.prototype._contextMenuEventFired):
        * inspector/front-end/TabbedPane.js:
        (WebInspector.TabbedPaneTab.prototype._tabContextMenu):
        * inspector/front-end/TimelinePanel.js:
        (WebInspector.TimelinePanel.prototype._contextMenu):
        * inspector/front-end/WatchExpressionsSidebarPane.js:
        (WebInspector.WatchExpressionsSection.prototype._emptyElementContextMenu):
        (WebInspector.WatchExpressionTreeElement.prototype._contextMenu):

2012-10-26  Ilya Tikhonovsky  <loislo@chromium.org>

        Web Inspector: instrument chromium GlyphCache. It keeps ~2mb data on gmail.
        https://bugs.webkit.org/show_bug.cgi?id=100515

        Reviewed by Yury Semikhatsky.

        I replaced old version with an abstract number with new one which precisely reports allocated SkGlyphCache objects and their sizes.

        * inspector/InspectorMemoryAgent.cpp:
        (WebCore::InspectorMemoryAgent::getProcessMemoryDistribution):
        * platform/MemoryUsageSupport.cpp:
        (WebCore::MemoryUsageSupport::reportMemoryUsage):
        * platform/MemoryUsageSupport.h:
        (MemoryUsageSupport):
        * platform/PlatformMemoryInstrumentation.cpp:
        (WebCore):
        * platform/PlatformMemoryInstrumentation.h:
        (PlatformMemoryTypes):
        * platform/chromium/MemoryUsageSupportChromium.cpp:
        (reportMemoryUsage):
        (WebCore::reportGlyphCache):
        (WebCore):
        (WebCore::MemoryUsageSupport::reportMemoryUsage):

2012-10-26  Kent Tamura  <tkent@chromium.org>

        [Chromium] Build fix for r132650.
        https://bugs.webkit.org/show_bug.cgi?id=100482

        * platform/text/LocaleWin.cpp:
        (WebCore::LocaleWin::timeFormat):

2012-10-26  Yury Semikhatsky  <yurys@chromium.org>

        [v8] Memory instrumentation: don't count memory of WrapperTypeInfo
        https://bugs.webkit.org/show_bug.cgi?id=100517

        Reviewed by Alexander Pavlov.

        * bindings/v8/V8PerIsolateData.cpp: when estimating bindings memory size skip
        pointers to WrapperTypeInfo objects as they are static fields and belong to
        the data segment.
        (WTF):

2012-10-26  Kent Tamura  <tkent@chromium.org>

        Refactor Localizer-related classes.
        https://bugs.webkit.org/show_bug.cgi?id=100482

        Reviewed by Kentaro Hara.

        - Localizer has unused code
         Localizer should have function implementations only if they are used in
         multiple subclasses.
        - Some Localizer subclasses hide Localizer data members
        - Should use String::isNull to check initialization-or-not

        No new tests. This should not change any behavior.

        * platform/text/Localizer.h:
        (Localizer):
        - timeFormat, shortTimeFormat, and timeAMPMLabels should be pure virtual.
        - Remove m_localizedDateFormatText, m_localizedShortTimeFormatText, and
          m_timeAMPMLabels
        * platform/text/Localizer.cpp:
        Remove implementations of timeFormat, shortTimeFormat, and timeAMPMLabels.

        * platform/text/LocaleICU.h:
        (LocaleICU): Introduce m_timeFormatWithSeconds and m_timeFormatWithoutSeconds.
        * platform/text/LocaleICU.cpp:
        (WebCore::LocaleICU::initializeDateTimeFormat):
        Use new data members instead of Localizer data members.
        (WebCore::LocaleICU::dateFormat): Use isNull.

        * platform/text/LocaleNone.cpp:
        (LocaleNone): Add timeFormat, shortTimeFormat, timeAMPMLabels
        implementations, and m_timeAMPMLabels.
        (WebCore::LocaleNone::timeFormat): Returns the HTML time format.
        (WebCore::LocaleNone::shortTimeFormat): Returns the HTML time format.
        (WebCore::LocaleNone::timeAMPMLabels): Returns "AM" and "PM".

        * platform/text/LocaleWin.h:
        (LocaleWin): Add m_timeFormatWithSeconds.
        * platform/text/LocaleWin.cpp:
        (WebCore::LocaleWin::dateFormat): Use isNull.
        (WebCore::LocaleWin::timeFormat): Use m_timeFormatWithSeconds.

        * platform/text/mac/LocaleMac.h:
        (LocaleMac): Rename m_localized*TimeFormatText to m_timeFormatWith*Seconds.
        * platform/text/mac/LocaleMac.mm:
        (WebCore::LocaleMac::timeFormat): Follow the renaming.
        (WebCore::LocaleMac::shortTimeFormat): Ditto.

2012-10-26  Kent Tamura  <tkent@chromium.org>

        Crash in PagePopupController by events after WebPagePopupImpl::closePopup
        https://bugs.webkit.org/show_bug.cgi?id=100454

        Reviewed by Hajime Morita.

        No new tests. The bug is timing-dependent.

        * page/DOMWindowPagePopup.cpp:
        (WebCore::DOMWindowPagePopup::~DOMWindowPagePopup):
        Calls clearPagePopupClient for the associalated PagePopupController object.
        * page/PagePopupController.cpp:
        (WebCore::PagePopupController::setValueAndClosePopup):
        Do nothing if m_popupClient is 0.
        (WebCore::PagePopupController::localizeNumberString): Ditto.
        (WebCore::PagePopupController::clearPagePopupClient): Added.
        * page/PagePopupController.h:
        (PagePopupController): Declare clearPagePopupClient.

2012-10-25  Alexander Pavlov  <apavlov@chromium.org>

        Web Inspector: Bring device geolocation and orientation emulation from behind the experiment
        https://bugs.webkit.org/show_bug.cgi?id=100220

        Reviewed by Yury Semikhatsky.

        * inspector/front-end/Settings.js:
        (WebInspector.ExperimentsSettings):
        * inspector/front-end/SettingsScreen.js:
        (WebInspector.UserAgentSettingsTab):

2012-10-26  Yury Semikhatsky  <yurys@chromium.org>

        Memory instrumentation: report memory occupied by ResourceRequest instead of its base ResourceRequestBase
        https://bugs.webkit.org/show_bug.cgi?id=100497

        Reviewed by Alexander Pavlov.

        Added memory reporting method to Chromium implementation of ResourceRequest.

        * platform/network/ResourceRequestBase.cpp:
        (WebCore::ResourceRequestBase::reportMemoryUsageBase): Renamed reportMemoryUsage
        on ResourceRequestBase to reportMemoryUsageBase and made it protected. I'd
        rather make ResourceRequestBase::reportMemoryUsage virtual and override it
        in the descendant but ResourceRequestBase doesn't have any virtual methods
        and shouldn't be used directly (ResourceRequest should be used instead).
        * platform/network/ResourceRequestBase.h:
        (ResourceRequestBase):
        * platform/network/chromium/ResourceRequest.cpp:
        (WebCore::ResourceRequest::reportMemoryUsage):
        (WebCore):
        * platform/network/chromium/ResourceRequest.h:
        (ResourceRequest):

2012-10-26  Alexander Pavlov  <apavlov@chromium.org>

        Web Inspector: Remove the on-hover highlighting of console messages
        https://bugs.webkit.org/show_bug.cgi?id=100511

        Reviewed by Pavel Feldman.

        This clashes with the hovered element highlight in console messages.

        * inspector/front-end/inspector.css:
        (ol.watch-expressions > li.hovered):

2012-10-26  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r132612.
        http://trac.webkit.org/changeset/132612
        https://bugs.webkit.org/show_bug.cgi?id=100512

        Crashes fast/events/tabindex-focus-blur-all.html in debug mode
        (Requested by pfeldman on #webkit).

        * rendering/AutoTableLayout.cpp:
        (WebCore::AutoTableLayout::recalcColumn):
        * rendering/FixedTableLayout.cpp:
        (WebCore::FixedTableLayout::calcWidthArray):
        * rendering/RenderTable.cpp:
        (WebCore::RenderTable::layout):
        * rendering/RenderTableCol.cpp:
        (WebCore::RenderTableCol::styleDidChange):
        (WebCore::RenderTableCol::updateFromElement):
        (WebCore::RenderTableCol::computePreferredLogicalWidths):
        * rendering/RenderTableCol.h:
        (RenderTableCol):

2012-10-26  Pavel Feldman  <pfeldman@chromium.org>

        Web Inspector: fast return upon setting the same dock side.
        https://bugs.webkit.org/show_bug.cgi?id=100510

        Reviewed by Vsevolod Vlasov.

        Added fast return.

        * inspector/front-end/DockController.js:

2012-10-26  Simon Hausmann  <simon.hausmann@digia.com>

        Unreviewed trivial build fix: It's glXGetCurrentContext not glxGetCurrentContext :)

        * platform/graphics/surfaces/qt/GraphicsSurfaceGLX.cpp:
        (WebCore::GraphicsSurfacePrivate::GraphicsSurfacePrivate):

2012-10-26  Kenneth Rohde Christiansen  <kenneth@webkit.org>

        Printing should use use high resolution images when available
        https://bugs.webkit.org/show_bug.cgi?id=100488

        Reviewed by Antti Koivisto.

        The images loaded using -webkit-device-pixel-ratio depends on
        the display type (deviceScaleFactor) and thus affects which
        images are being used for printing. Printing should always
        use the higher resolution images (aka 'retina' images).

        Test: fast/media/mq-pixel-ratio-print.html

        * css/MediaQueryEvaluator.cpp:
        (WebCore::device_pixel_ratioMediaFeatureEval):

2012-10-26  Ilya Tikhonovsky  <loislo@chromium.org>

        Web Inspector: NMI instrument InspectorResourceAgent. it caches resources for the front-end.
        https://bugs.webkit.org/show_bug.cgi?id=100496

        Reviewed by Yury Semikhatsky.

        It is plain instrumentation for InspectorResourceAgent and NetworkResourceData which is used by the agent.

        * dom/WebCoreMemoryInstrumentation.cpp:
        (WebCore):
        * dom/WebCoreMemoryInstrumentation.h:
        (WebCoreMemoryTypes):
        * inspector/InspectorResourceAgent.cpp:
        (WebCore::InspectorResourceAgent::reportMemoryUsage):
        (WebCore):
        * inspector/InspectorResourceAgent.h:
        (InspectorResourceAgent):
        * inspector/NetworkResourcesData.cpp:
        (WebCore::XHRReplayData::reportMemoryUsage):
        (WebCore):
        (WebCore::NetworkResourcesData::ResourceData::reportMemoryUsage):
        (WebCore::NetworkResourcesData::reportMemoryUsage):
        * inspector/NetworkResourcesData.h:
        (XHRReplayData):
        (ResourceData):
        (NetworkResourcesData):

2012-10-26  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r132493.
        http://trac.webkit.org/changeset/132493
        https://bugs.webkit.org/show_bug.cgi?id=100509

        It didn't fix the tests on the bot as we had hoped. (Requested
        by drott on #webkit).

        * platform/network/cf/ResourceErrorCF.cpp:
        (WebCore::ResourceError::ResourceError):

2012-10-26  Zeno Albisser  <zeno@webkit.org>

        [Qt] Temporarily disable use of QXcbNativeInterface in GraphicsSurfaceGLX.
        https://bugs.webkit.org/show_bug.cgi?id=100493

        Once QXcbNativeInterface::nativeResourceForContext() can provide the
        GLXContext for an existing QOpenGLContext, this patch shall be reverted.

        Reviewed by Simon Hausmann.

        * platform/graphics/surfaces/qt/GraphicsSurfaceGLX.cpp:
        (WebCore::GraphicsSurfacePrivate::GraphicsSurfacePrivate):

2012-10-26  Zeno Albisser  <zeno@webkit.org>

        [Qt] Remove QOpenGL specific code from GraphicsSurfaceGLX.
        https://bugs.webkit.org/show_bug.cgi?id=100492

        This patch removes most of the QOpenGLContext related code
        from GraphicsSurfaceGLX. This allows sharing almost all
        GraphicsSurfaceGLX code with EFL, by relying on pure GLX.

        Reviewed by Kenneth Rohde Christiansen.

        * platform/graphics/surfaces/qt/GraphicsSurfaceGLX.cpp:
        (WebCore::OffScreenRootWindow::get):
        (WebCore::OffScreenRootWindow::~OffScreenRootWindow):
        (OffScreenRootWindow):
        (WebCore):
        (WebCore::GraphicsSurfacePrivate::GraphicsSurfacePrivate):
        (WebCore::GraphicsSurfacePrivate::createSurface):
        (WebCore::GraphicsSurfacePrivate::makeCurrent):
        (WebCore::GraphicsSurfacePrivate::doneCurrent):
        (WebCore::GraphicsSurfacePrivate::swapBuffers):
        (WebCore::GraphicsSurfacePrivate::copyFromTexture):
        (GraphicsSurfacePrivate):
        (WebCore::resolveGLMethods):

2012-10-26  Regina Chung  <heejin.r.chung@samsung.com>

        [EFL][WK2] Enable WebGL
        https://bugs.webkit.org/show_bug.cgi?id=97652

        Reviewed by Gyuyoung Kim.

        Implemented GraphicsSurface for EFL to enable WebGL for WebKit2.
        Depends on GLX since Evas doesn't provide the necessary functionality.

        No new tests. Covered by existing tests.

        * PlatformEfl.cmake:
        * platform/graphics/GraphicsContext3D.h:
        * platform/graphics/efl/GraphicsContext3DEfl.cpp:
        (WebCore::GraphicsContext3D::createGraphicsSurfaces):
        * platform/graphics/efl/GraphicsContext3DPrivate.cpp:
        (WebCore::GraphicsContext3DPrivate::GraphicsContext3DPrivate):
        (WebCore::GraphicsContext3DPrivate::~GraphicsContext3DPrivate):
        (WebCore):
        (WebCore::GraphicsContext3DPrivate::createGraphicsSurfaces):
        (WebCore::GraphicsContext3DPrivate::copyToGraphicsSurface):
        (WebCore::GraphicsContext3DPrivate::graphicsSurfaceToken):
        * platform/graphics/efl/GraphicsContext3DPrivate.h:
        (GraphicsContext3DPrivate):
        * platform/graphics/opengl/GraphicsContext3DOpenGLCommon.cpp:
        (WebCore::GraphicsContext3D::reshape):
        * platform/graphics/surfaces/efl: Added.
        * platform/graphics/surfaces/efl/GraphicsSurfaceEfl.cpp: Added.
        (WebCore):
        (WebCore::OffScreenRootWindow::get):
        (WebCore::OffScreenRootWindow::~OffScreenRootWindow):
        (WebCore::GraphicsSurfacePrivate::GraphicsSurfacePrivate):
        (WebCore::GraphicsSurfacePrivate::createSurface):
        (WebCore::GraphicsSurfacePrivate::makeCurrent):
        (WebCore::GraphicsSurfacePrivate::doneCurrent):
        (WebCore::GraphicsSurfacePrivate::swapBuffers):
        (WebCore::GraphicsSurface::platformBeginPaint):
        (WebCore::GraphicsSurface::createReadOnlyImage):
        * platform/graphics/surfaces/qt/GraphicsSurfaceGLX.cpp:
        * platform/graphics/surfaces/qt/GraphicsSurfaceGLX.h: Added.
        (WebCore):
        (OffScreenRootWindow):
        (WebCore::OffScreenRootWindow::OffScreenRootWindow):
        (GraphicsSurfacePrivate):
        (WebCore::GraphicsSurfacePrivate::~GraphicsSurfacePrivate):
        (WebCore::GraphicsSurfacePrivate::createPixmap):
        (WebCore::GraphicsSurfacePrivate::copyFromTexture):
        (WebCore::GraphicsSurfacePrivate::display):
        (WebCore::GraphicsSurfacePrivate::glxPixmap):
        (WebCore::GraphicsSurfacePrivate::size):
        (WebCore::GraphicsSurfacePrivate::glContext):
        (WebCore::resolveGLMethods):
        * platform/graphics/surfaces/qt/GraphicsSurfaceQt.cpp:
        (WebCore):
        (WebCore::OffScreenRootWindow::OffScreenRootWindow::get):
        (WebCore::OffScreenRootWindow::~OffScreenRootWindow):
        (WebCore::GraphicsSurfacePrivate::GraphicsSurfacePrivate):
        (WebCore::GraphicsSurfacePrivate::createSurface):
        (WebCore::GraphicsSurfacePrivate::makeCurrent):
        (WebCore::GraphicsSurfacePrivate::doneCurrent):
        (WebCore::GraphicsSurfacePrivate::swapBuffers):

2012-10-26  Alexander Pavlov  <apavlov@chromium.org>

        Web Inspector: [Overrides] Do not persist the User Agent "master switch"
        https://bugs.webkit.org/show_bug.cgi?id=100484

        Reviewed by Yury Semikhatsky.

        The User Agent override state is managed in the front-end, just like for other override-able parameters.

        * inspector/InspectorResourceAgent.cpp:
        (WebCore::InspectorResourceAgent::disable):
        * inspector/front-end/NetworkManager.js:
        (WebInspector.NetworkManager.get NetworkAgent):
        (WebInspector.NetworkManager):
        * inspector/front-end/SettingsScreen.js:
        (WebInspector.UserAgentSettingsTab.prototype._createUserAgentSelectRowElement.set checkboxClicked):
        (WebInspector.UserAgentSettingsTab.prototype._createUserAgentSelectRowElement):
        * inspector/front-end/UserAgentSupport.js:
        (WebInspector.UserAgentSupport):
        (WebInspector.UserAgentSupport.prototype.toggleUserAgentOverride):
        (WebInspector.UserAgentSupport.prototype._userAgentChanged):

2012-10-26  Takashi Sakamoto  <tasak@google.com>

        [Shadow]: removing styles in shadow dom subtree causes crash.
        https://bugs.webkit.org/show_bug.cgi?id=100455

        Reviewed by Hajime Morita.

        To quickly check whether shadow roots or elements have any scoped
        styles or not, elements have hasStyleScoped flag. If elements have
        any scoped styles, the styles are direct children of the element.
        The original code just sees how many chilren are scoped style or not.
        However styles in shadow dom subtree are registered with the shadow
        root but are not always direct children of shadow roots. So to check
        whether shadow roots have any scoped styles, modified to count
        number of styles registered with the shadow root.

        Test: fast/dom/shadow/remove-styles-in-shadow-crash.html

        * dom/Node.cpp:
        (WebCore::Node::registerScopedHTMLStyleChild):
        (WebCore::Node::unregisterScopedHTMLStyleChild):
        Made the above two method virtual. class ShadowRoot overrides these
        methods.
        (WebCore::Node::numberOfScopedHTMLStyleChildren):
        Moved HTMLStyleElement.cpp to Node.cpp, because the above two methods
        are moved into Node.cpp.
        * dom/Node.h:
        (Node):
        * dom/ShadowRoot.cpp:
        (WebCore::ShadowRoot::ShadowRoot):
        (WebCore::ShadowRoot::registerScopedHTMLStyleChild):
        (WebCore::ShadowRoot::unregisterScopedHTMLStyleChild):
        Modify to count how many styles are registered with the shadow root.
        The "counting" is done when styles are registered and unregistered
        with the shadow root, i.e. style element is inserted into document or
        removed from document. When unregister some style, there are no more
        styles registered with the shadow root. Set style scoped flag false.
        * dom/ShadowRoot.h:
        (ShadowRoot):
        * html/HTMLStyleElement.cpp:
        * html/HTMLStyleElement.h:
        (WebCore::HTMLStyleElement::isRegisteredAsScoped):
        Now isRegisteredAsScoped is used in Node.cpp, so removed inline and
        moved .cpp to .h.

2012-10-26  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r132589.
        http://trac.webkit.org/changeset/132589
        https://bugs.webkit.org/show_bug.cgi?id=100498

        Breaks font-face layout tests (Requested by pfeldman on
        #webkit).

        * css/CSSFontFaceSource.cpp:
        (WebCore::CSSFontFaceSource::getFontData):

2012-10-26  Takashi Sakamoto  <tasak@google.com>

        [Shadow DOM] Needs @host rule for ShadowDOM styling
        https://bugs.webkit.org/show_bug.cgi?id=88606

        Reviewed by Hajime Morita.

        Implemented @host-@rules according to the shadow dom spec:
        http://dvcs.w3.org/hg/webcomponents/raw-file/tip/spec/shadow/index.html#host-at-rule
        The design doc is:
        https://docs.google.com/document/d/1P2yorchF8lci2sccr-mVSRf2dtvjKeiuyQWzCB2bEA8/edit

        Test: fast/dom/shadow/athost-atrules.html

        * css/CSSGrammar.y.in:
        Added rules for parsing @host @-rules.
        * css/CSSParser.cpp:
        (WebCore::CSSParser::detectAtToken):
        Added a new token "@host".
        (WebCore::CSSParser::createHostRule):
        Added a new method to create an @host @-rule, which is invoked from
        (WebCore):
        * css/CSSParser.h:
        Added a declaration of the above new method: createHostRule.
        * css/CSSPropertySourceData.h:
        Added HOST_RULE to enum Type.
        * css/RuleSet.cpp:
        (WebCore::RuleData::RuleData):
        Modified multiple bool arguments into one argument. Now it
        uses combinations of values from enum AddRuleFlags.
        (WebCore::RuleSet::addRule):
        (WebCore::RuleSet::addRegionRule):
        (WebCore::RuleSet::addStyleRule):
        Updated according to the RuleData's change.
        Modified to Invoke increaseSpecificity if the given rule is @host
        @-rule.
        (WebCore::RuleSet::addRulesFromSheet):
        Invoked addHostRule if the given rule is @host @-rule.
        * css/RuleSet.h:
        (RuleData):
        (WebCore::RuleData::increaseSpecificity):
        Added a new method to increase selector's specificity. This method is
        used to make @host @-rules' specificity larger than normal author
        rules' specificity.
        (RuleSet):
        * css/StyleResolver.cpp:
        (WebCore::makeRuleSet):
        (WebCore::StyleResolver::addHostRule):
        A wrapper method to invoke StyleScopeResolver::addHostRule. The method
        is used to make only StyleResolver know an implementation detail about
        class StyleScopeResolver.
        (WebCore::StyleResolver::appendAuthorStylesheets):
        Updated according to the RuleData's change.
        (WebCore::StyleResolver::styleSharingCandidateMatchesHostRules):
        A new method to find matched host rules when an element is given.
        This method invokes
        StyleScopeResolver::styleSharingCandidateMatchesHostRules to find
        matched host rules.
        (WebCore):
        (WebCore::StyleResolver::matchHostRules):
        A new method to find matched host rules when an element is given.
        This method invokes StyleScopeResolver::matchHostRules to find
        matched host rules.
        (WebCore::StyleResolver::matchScopedAuthorRules):
        Modified to invoke matchHostRules.
        (WebCore::StyleResolver::locateSharedStyle):
        Disable sibling style cache if the given element is a shadow host and
        any @host @-rules are applied to the element.
        * css/StyleResolver.h:
        (WebCore::StyleResolver::ensureScopeResolver):
        If no scopeResolver is created, create and return the instance.
        If created, just return the instance.
        (StyleResolver):
        * css/StyleRule.cpp:
        (WebCore::StyleRuleBase::reportMemoryUsage):
        (WebCore::StyleRuleBase::destroy):
        (WebCore::StyleRuleBase::copy):
        (WebCore::StyleRuleBase::createCSSOMWrapper):
        (WebCore::StyleRuleHost::StyleRuleHost):
        Implemented class StyleRuleHost. The class is almost the same as
        StyleRuleBlock except type.
        (WebCore):
        * css/StyleRule.h:
        (WebCore::StyleRuleBase::isHostRule):
        (StyleRuleHost):
        (WebCore::StyleRuleHost::create):
        (WebCore::StyleRuleHost::copy):
        (WebCore):
        * css/StyleScopeResolver.cpp:
        (WebCore::StyleScopeResolver::ensureAtHostRuleSetFor):
        A new method to create a new RuleSet for the given shadow root.
        (WebCore):
        (WebCore::StyleScopeResolver::atHostRuleSetFor):
        A new private inline method to obtain @host @-rules declared in
        the given shadow root.
        (WebCore::StyleScopeResolver::addHostRule):
        Added a new method to register @host @-rules with shadow roots.
        (WebCore::StyleScopeResolver::styleSharingCandidateMatchesHostRules):
        A new method to find whether any @host @-rules are applied to
        the given host element.
        (WebCore::StyleScopeResolver::matchHostRules):
        A new method to find matched rules for the given host element.
        (WebCore::StyleScopeResolver::reportMemoryUsage):
        * css/StyleScopeResolver.h:
        (WebCore):
        (StyleScopeResolver):
        * css/StyleSheetContents.cpp:
        (WebCore::childRulesHaveFailedOrCanceledSubresources):

2012-10-26  Jaehun Lim  <ljaehun.lim@samsung.com>

        [CMAKE] Add TextAutosizer.cpp in WebCore/CMakeLists.txt
        https://bugs.webkit.org/show_bug.cgi?id=100476

        Reviewed by Kentaro Hara.

        ENABLE_TEXT_AUTOSIZING option is added in CMAKE,
        but the source file for that feature is omitted.

        No new tests. Covered by existing tests.

        * CMakeLists.txt:

2012-10-26  Julien Chaffraix  <jchaffraix@webkit.org>

        RenderTableCol::computePreferredLogicalWidths and RenderTableCol::layout should never be called
        https://bugs.webkit.org/show_bug.cgi?id=99861

        Reviewed by Ojan Vafai.

        RenderTableCol's computePreferredLogicalWidths and layout's only purpose were to clear the preferred logical
        widths dirty / layout flag so that we would properly propagate the information to our containing table. This
        led to clunky code where the table layout code had to forcefully call RenderTableCol::computePreferredLogicalWidths
        or else we would ignore the next layout hint on the <col> or <colgroup>.

        Tests: fast/table/col-span-change-relayout.html
               fast/table/simplified-layout-table.html

        * rendering/AutoTableLayout.cpp:
        (WebCore::AutoTableLayout::recalcColumn):
        * rendering/RenderTable.cpp:
        (WebCore::RenderTable::layout):
        Simplified the code now that we only need to iterate over the sections.

        * rendering/FixedTableLayout.cpp:
        (WebCore::FixedTableLayout::calcWidthArray):
        Removed call to computePreferredLogicalWidths.

        * rendering/RenderTableCol.cpp:
        (WebCore::RenderTableCol::styleDidChange):
        (WebCore::RenderTableCol::updateFromElement):
        Forward a layout hint to the table so that we properly recompute the cell's logical withs.

        (WebCore::RenderTableCol::computePreferredLogicalWidths):
        (WebCore::RenderTableCol::layout):
        Change our implementations of those 2 methods to be no-ops, while enforcing that they are
        never called when it was possible.

        (WebCore::RenderTableCol::propagateLayoutCueToTable):
        New helper function that forward any layout cue to the containing table, this works around
        us not clearing the flags which confuses RenderObject markContainingBlocksForLayout and
        invalidateContainerPreferredLogicalWidths.

        * rendering/RenderTableCol.h:
        Made the function that we are not expected to be called private.

2012-10-26  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r132601.
        http://trac.webkit.org/changeset/132601
        https://bugs.webkit.org/show_bug.cgi?id=100494

        It broke the Qt build (Requested by Ossy on #webkit).

        * PlatformEfl.cmake:
        * platform/graphics/GraphicsContext3D.h:
        * platform/graphics/efl/GraphicsContext3DEfl.cpp:
        (WebCore::GraphicsContext3D::createGraphicsSurfaces):
        * platform/graphics/efl/GraphicsContext3DPrivate.cpp:
        (WebCore::GraphicsContext3DPrivate::GraphicsContext3DPrivate):
        (WebCore::GraphicsContext3DPrivate::~GraphicsContext3DPrivate):
        (WebCore):
        * platform/graphics/efl/GraphicsContext3DPrivate.h:
        (GraphicsContext3DPrivate):
        * platform/graphics/opengl/GraphicsContext3DOpenGLCommon.cpp:
        (WebCore::GraphicsContext3D::reshape):
        * platform/graphics/surfaces/qt/GraphicsSurfaceGLX.cpp:
        (WebCore::OffScreenRootWindow::get):
        (WebCore::OffScreenRootWindow::~OffScreenRootWindow):
        (OffScreenRootWindow):
        (WebCore):
        (WebCore::GraphicsSurfacePrivate::GraphicsSurfacePrivate):
        (WebCore::GraphicsSurfacePrivate::createSurface):
        (WebCore::GraphicsSurfacePrivate::makeCurrent):
        (WebCore::GraphicsSurfacePrivate::doneCurrent):
        (WebCore::GraphicsSurfacePrivate::swapBuffers):
        (WebCore::GraphicsSurfacePrivate::copyFromTexture):
        (GraphicsSurfacePrivate):
        (WebCore::resolveGLMethods):

2012-10-26  Yury Semikhatsky  <yurys@chromium.org>

        Memory instrumentation: do not report memory occupied by v8::String
        https://bugs.webkit.org/show_bug.cgi?id=100487

        Reviewed by Alexander Pavlov.

        Pointers to v8::String are skipped when reporting memory usage of V8 bindings'
        string cache.

        * bindings/v8/V8Binding.cpp:
        (WTF):

2012-10-26  Mihnea Ovidenie  <mihnea@adobe.com>

        [CSSRegions] Add support for auto-height regions with region-breaks
        https://bugs.webkit.org/show_bug.cgi?id=99952

        Reviewed by David Hyatt.

        This patch takes region breaks into account when computing the height for auto logical height regions.
        When a region break is encountered before/after an element from within a flow thread and we are in the layout
        phase in which we lay out the flow threads in regions unconstrained, we use the region break to
        compute the region override logical content height if the region break fits inside an auto logical height region.
        A region break inside an auto logical height region determines the region override logical content height, taking
        min/max height into account.

        Tests: fast/regions/autoheight-allregions-nobreaks.html
               fast/regions/autoheight-allregions.html
               fast/regions/autoheight-breakafteralways-maxheight.html
               fast/regions/autoheight-breakbeforealways.html
               fast/regions/autoheight-firstregion-breakalways.html
               fast/regions/autoheight-lastregion-overflowauto-breaksignored.html
               fast/regions/autoheight-lastregion-overflowauto.html
               fast/regions/autoheight-middleregion.html
               fast/regions/autoheight-secondregion-breakoutside.html
               fast/regions/autoheight-secondregion.html
               fast/regions/autoheight-singleregion-breakafteralways-maxheight.html
               fast/regions/autoheight-singleregion-breakafteralways.html
               fast/regions/autoheight-singleregion-breakaftermargin.html
               fast/regions/autoheight-singleregion-breakbeforealways-minheight.html
               fast/regions/autoheight-singleregion-breakbeforealways.html
               fast/regions/autoheight-singleregion-multiplebreaks.html
               fast/regions/autoheight-singleregion-overflowauto-breaksignored.html
               fast/regions/autoheight-singleregion-overflowauto.html

        * rendering/RenderBlock.cpp: When encounter a region break before/after an element inside a flow thread,
        try to use it to determine the override logical content height for auto logical height regions.
        (WebCore::RenderBlock::applyBeforeBreak):
        (WebCore::RenderBlock::applyAfterBreak):
        * rendering/RenderFlowThread.cpp:
        (WebCore::RenderFlowThread::layout):
        (WebCore::RenderFlowThread::computeOverflowStateForRegions):
        Simulate a region break at the end of the flow thread content.
        (WebCore::RenderFlowThread::updateRegionsFlowThreadPortionRect):
        (WebCore::RenderFlowThread::clearOverrideLogicalContentHeightInRegions):
        Helper method used to clear the overrideLogicalContentHeight for auto logical height regions.
        (WebCore::RenderFlowThread::addForcedRegionBreak):
        Extend the method to process region breaks. The method returns true if at least one auto logical height region
        has its override logical content height computed.        
        * rendering/RenderFlowThread.h:
        * rendering/RenderRegion.cpp: Make these methods work with auto logical height regions.
        (WebCore::RenderRegion::pageLogicalHeight):
        (WebCore::RenderRegion::logicalHeightOfAllFlowThreadContent):

2012-10-26  Regina Chung  <heejin.r.chung@samsung.com>

        [EFL][WK2] Enable WebGL
        https://bugs.webkit.org/show_bug.cgi?id=97652

        Reviewed by Gyuyoung Kim.

        Implemented GraphicsSurface for EFL to enable WebGL for WebKit2.
        Depends on GLX since Evas doesn't provide the necessary functionality.

        No new tests. Covered by existing tests.

        * PlatformEfl.cmake:
        * platform/graphics/GraphicsContext3D.h:
        * platform/graphics/efl/GraphicsContext3DEfl.cpp:
        (WebCore::GraphicsContext3D::createGraphicsSurfaces):
        * platform/graphics/efl/GraphicsContext3DPrivate.cpp:
        (WebCore::GraphicsContext3DPrivate::GraphicsContext3DPrivate):
        (WebCore::GraphicsContext3DPrivate::~GraphicsContext3DPrivate):
        (WebCore):
        (WebCore::GraphicsContext3DPrivate::createGraphicsSurfaces):
        (WebCore::GraphicsContext3DPrivate::copyToGraphicsSurface):
        (WebCore::GraphicsContext3DPrivate::graphicsSurfaceToken):
        * platform/graphics/efl/GraphicsContext3DPrivate.h:
        (GraphicsContext3DPrivate):
        * platform/graphics/opengl/GraphicsContext3DOpenGLCommon.cpp:
        (WebCore::GraphicsContext3D::reshape):
        * platform/graphics/surfaces/efl: Added.
        * platform/graphics/surfaces/efl/GraphicsSurfaceEfl.cpp: Added.
        (WebCore):
        (WebCore::OffScreenRootWindow::get):
        (WebCore::OffScreenRootWindow::~OffScreenRootWindow):
        (WebCore::GraphicsSurfacePrivate::GraphicsSurfacePrivate):
        (WebCore::GraphicsSurfacePrivate::createSurface):
        (WebCore::GraphicsSurfacePrivate::makeCurrent):
        (WebCore::GraphicsSurfacePrivate::doneCurrent):
        (WebCore::GraphicsSurfacePrivate::swapBuffers):
        (WebCore::GraphicsSurface::platformBeginPaint):
        (WebCore::GraphicsSurface::createReadOnlyImage):
        * platform/graphics/surfaces/qt/GraphicsSurfaceGLX.cpp:
        * platform/graphics/surfaces/qt/GraphicsSurfaceGLX.h: Added.
        (WebCore):
        (OffScreenRootWindow):
        (WebCore::OffScreenRootWindow::OffScreenRootWindow):
        (GraphicsSurfacePrivate):
        (WebCore::GraphicsSurfacePrivate::~GraphicsSurfacePrivate):
        (WebCore::GraphicsSurfacePrivate::createPixmap):
        (WebCore::GraphicsSurfacePrivate::copyFromTexture):
        (WebCore::GraphicsSurfacePrivate::display):
        (WebCore::GraphicsSurfacePrivate::glxPixmap):
        (WebCore::GraphicsSurfacePrivate::size):
        (WebCore::GraphicsSurfacePrivate::glContext):
        (WebCore::resolveGLMethods):
        * platform/graphics/surfaces/qt/GraphicsSurfaceQt.cpp:
        (WebCore):
        (WebCore::OffScreenRootWindow::OffScreenRootWindow::get):
        (WebCore::OffScreenRootWindow::~OffScreenRootWindow):
        (WebCore::GraphicsSurfacePrivate::GraphicsSurfacePrivate):
        (WebCore::GraphicsSurfacePrivate::createSurface):
        (WebCore::GraphicsSurfacePrivate::makeCurrent):
        (WebCore::GraphicsSurfacePrivate::doneCurrent):
        (WebCore::GraphicsSurfacePrivate::swapBuffers):

2012-10-26  Thiago Marcos P. Santos  <thiago.santos@intel.com>

        Add feature flags for CSS Device Adaptation
        https://bugs.webkit.org/show_bug.cgi?id=95960

        Reviewed by Kenneth Rohde Christiansen.

        * Configurations/FeatureDefines.xcconfig:
        * GNUmakefile.am:
        * GNUmakefile.features.am:

2012-10-26  Li Yin  <li.yin@intel.com>

        fast/forms/file/input-file-write-files.html should cover correct setting value
        https://bugs.webkit.org/show_bug.cgi?id=100085

        Reviewed by Kentaro Hara.

        From Spec: http://dev.w3.org/html5/spec/single-page.html#dom-input-value-filename
        On setting, if the new value is the empty string, it must empty the list of selected
        files; otherwise, it must throw an InvalidStateError exception.

        Test: fast/forms/file/input-file-value.html

        * html/HTMLInputElement.cpp:
        (WebCore::HTMLInputElement::setValue):
        (WebCore):
        * html/HTMLInputElement.h:
        (HTMLInputElement):
        * html/HTMLInputElement.idl:

2012-10-26  Keishi Hattori  <keishi@webkit.org>

        Refactor calendar picker to remove _x/_y from DaysTable
        https://bugs.webkit.org/show_bug.cgi?id=100460

        Reviewed by Kent Tamura.

        _x/_y properties keep the coordinates for the selection but when we add
        week and month picking capabilities, the selection can't be expressed as
        a set of coordinates. This change will remove it.

        No new tests. Covered by calendar-picker-*.html tests.

        * Resources/pagepopups/calendarPicker.js:
        (DaysTable): Removed _x/_y properties.
        (DaysTable.prototype._hasSelection): Changed to refer to the DOM to see if we have a selection.
        (DaysTable.prototype.navigateToMonthAndKeepSelectionPosition): Lookup the selection position.
        (DaysTable.prototype.selectDate): Deselect first so we don't have two selections.
        (DaysTable.prototype._selectRangeContainingNode): Selects date/week/month containing the given day node.
        (DaysTable.prototype._selectRangeAtPosition): Selects date/week/month at the given position.
        (DaysTable.prototype._firstNodeInSelectedRange): Returns first selected day node.
        (DaysTable.prototype._deselect): Deselects all selections.
        (DaysTable.prototype._handleMouseOver): Use _selectRangeContainingNode so we don't have many places handling the selection.
        (DaysTable.prototype._handleMouseOut): Use _deselect.
        (DaysTable.prototype._handleKey): Lookup the selection position.
        (DaysTable.prototype.updateSelection): Use _selectRangeAtPosition.

2012-10-26  Ningxin Hu  <ningxin.hu@intel.com>

        FileReader abort case causes Chromium renderer crash
        https://bugs.webkit.org/show_bug.cgi?id=99142

        Reviewed by Kentaro Hara.

        Before dispatching load event, FileReader should check if it is
        in aborting.

        Test: manually launch fast/files/file-reader-abort.html in Chromium
        browser and compare the result with
        fast/files/file-reader-abort-expected.txt.

        * fileapi/FileReader.cpp:
        (WebCore::FileReader::didFinishLoading):

2012-10-26  Julien Chaffraix  <jchaffraix@webkit.org>

        Generate less repaint calls during subtree detaching
        https://bugs.webkit.org/show_bug.cgi?id=99741

        Reviewed by Eric Seidel.

        Following bug 98336, detach is now a subtree top-down operation. Because we
        track visual overflow from our children during layout for most cases, we can
        generate a repaint only on the subtree root.

        On http://dglazkov.github.com/performance-tests/redraw.html, this ups the FPS to
        26 fps from 22 fps on my MBP (+ 15%). On PerformanceTests/layout/subtree-detach.html,
        it decreases the time by 35%. This is due to being the best case and we now generate
        only one repaint per detach phase.

        Covered by existing pixels tests (including but not limited to repaint ones).

        * rendering/RenderObject.cpp:
        (WebCore::RenderObject::destroyAndCleanupAnonymousWrappers):
        Changed the function not to be recursive anymore to generate one painting for
        our root only. Added a FIXME about using our RenderLayer for repainting to avoid
        the cost of computing our absolute repaint rectangle.

        * rendering/RenderObjectChildList.cpp:
        (WebCore::RenderObjectChildList::removeChildNode):
        Removed the logic for repainting in the general case. However we still force a repaint
        if we have a RenderLayer as we don't track their overflow in some cases (e.g. positioned
        objects). This check is conservative and could be narrowed down (e.g overflow RenderLayers
        are properly accounted for in our clipppedOverflowRectForRepaint).

2012-10-26  Kenichi Ishibashi  <bashi@chromium.org>

        local(Helvetica) in src descriptor prevent fallback
        https://bugs.webkit.org/show_bug.cgi?id=100446

        Reviewed by Dan Bernstein.

        FontCache::getCachedFontData() has a mechanism that aliases a few pairs
        of font family names, so that if the family name specified in the font-family
        property is not available on the system, but the its alias is available,
        it will be used instead. This is appropriate for the font-family property,
        but not for font family names specified in the local() function of the src
        descriptor in a @font-face rule.

        This patch disables the mechanism while checking src descriptor of @font-face.

        No new tests. It's difficult to test the change because 'Helvetica' can
        be mapped any other font. For example, chromium DRT uses FontConfig to
        map Helvetica to Times New Roman. Other ports may map Helvetica to other
        fonts. We can't define the expected result.

        * css/CSSFontFaceSource.cpp:
        (WebCore::CSSFontFaceSource::getFontData):
        Call fontCache()->getCachedFontData() with checkingAlternateName = true.
        This disables aliasing font family names in FontCache.

2012-10-26  Eugene Klyuchnikov  <eustas.bug@gmail.com>

        Web Inspector: Doctype Audits panel code
        https://bugs.webkit.org/show_bug.cgi?id=100371

        Reviewed by Alexander Pavlov.

        This is a preparation step for ongoing refactoring.
        It is much easier to read doctyped code.

        * inspector/front-end/AuditRules.js:
        (WebInspector.AuditRules.MinimizeDnsLookupsRule.prototype.doRun):
        Replaced "undefined" with "null"
        * inspector/front-end/AuditsPanel.js:
        (WebInspector.AuditCategory.prototype.callbackWrapper):
        Removed callback parameter indirection.        
        (WebInspector.AuditRuleResult.prototype.addFormatted):
        Converted private instance function to scoped function.

2012-10-26  János Badics  <jbadics@inf.u-szeged.hu>

        [Qt]REGRESSION(r131428): cookies.db created on wrong place
        https://bugs.webkit.org/show_bug.cgi?id=99445

        Reviewed by Simon Hausmann.

        Added a slash to the path of cookies.db in CookieJarQt.cpp.

        * platform/qt/CookieJarQt.cpp:
        (WebCore::SharedCookieJarQt::SharedCookieJarQt):

2012-10-26  Adam Barth  <abarth@webkit.org>

        Unreviewed. This ASSERT is no longer correct (and fires on many tests.)

        * bindings/v8/V8DOMWrapper.h:
        (WebCore::V8DOMWrapper::setJSWrapperForDOMObject):

2012-10-26  Kent Tamura  <tkent@chromium.org>

        [Chromium-Win] Support shortTimeFormat
        https://bugs.webkit.org/show_bug.cgi?id=100471

        Reviewed by Kentaro Hara.

        No new tests. Covered by fast/forms/time-multiple-fields/ and
        WebKit/chromium/tests/LocaleWinTest.

        * platform/text/LocaleWin.cpp:
        (WebCore::LocaleWin::shortTimeFormat):
        Gets a format by LOCALE_SSHORTTIME. If it fails, remove "<delimiter>ss"
        from the format by LOCALE_STIMEFORMAT.
        * platform/text/LocaleWin.h:
        (LocaleWin): Declare m_timeFormatWithoutSeconds.

2012-10-26  Adam Barth  <abarth@webkit.org>

        Unreviewed. Update run-bindings-tests results after recent active DOM
        object changes.

        * bindings/scripts/test/V8/V8TestInterface.cpp:
        (WebCore::V8TestInterface::constructorCallback):
        (WebCore::V8TestInterface::wrapSlow):
        * bindings/scripts/test/V8/V8TestInterface.h:
        (WebCore::V8TestInterface::wrap):
        * bindings/scripts/test/V8/V8TestNamedConstructor.cpp:
        (WebCore::V8TestNamedConstructorConstructorCallback):
        (WebCore::V8TestNamedConstructor::wrapSlow):
        * bindings/scripts/test/V8/V8TestNamedConstructor.h:
        (WebCore::V8TestNamedConstructor::wrap):

2012-10-26  MORITA Hajime  <morrita@google.com>

        [V8] REGRESSION(132540) Assertion failure on V8DOMWrapper::setJSWrapperForDOMNode()
        https://bugs.webkit.org/show_bug.cgi?id=100462

        Reviewed by Adam Barth.

        Removed the no longer correct assertion statement.

        No new tests. Covered by breaking tests.

        * bindings/v8/V8DOMWrapper.cpp:
        (WebCore::V8DOMWrapper::setJSWrapperForDOMNode):

2012-10-25  Adam Barth  <abarth@webkit.org>

        [V8] WorkerContextExecutionProxy should use ScopedPersistent
        https://bugs.webkit.org/show_bug.cgi?id=100443

        Reviewed by Eric Seidel.

        This class was manually re-implementing the ScopedPersistent pattern.

        * bindings/v8/WorkerContextExecutionProxy.cpp:
        (WebCore::WorkerContextExecutionProxy::dispose):
        (WebCore::WorkerContextExecutionProxy::initializeIfNeeded):
        (WebCore::WorkerContextExecutionProxy::evaluate):
        * bindings/v8/WorkerContextExecutionProxy.h:
        (WebCore::WorkerContextExecutionProxy::context):
        (WorkerContextExecutionProxy):

2012-10-25  Peter Wang  <peter.wang@torchmobile.com.cn>

        A mistake in WebCore::JavaScriptCallFrame::evaluate which will cause assert failed
        https://bugs.webkit.org/show_bug.cgi?id=100347

        Reviewed by Mark Lam and Filip Pizlo.

        In worker context, calling "JSDOMWindowBase::commonJSGlobalData" will cause assert,
        since there is "ASSERT(isMainThread())" in "JSDOMWindowBase::commonJSGlobalData".

        No new test case, since no behaviour changed.

        * bindings/js/JavaScriptCallFrame.cpp:
        (WebCore::JavaScriptCallFrame::evaluate):

2012-10-25  Adam Barth  <abarth@webkit.org>

        [V8] We can merge the wrapper maps for DOM objects and active DOM objects
        https://bugs.webkit.org/show_bug.cgi?id=100432

        Reviewed by Eric Seidel.

        Now that we use the same object to visit both DOM objects and active
        DOM objects, there's no reason to keep them in separate hash maps.

        * bindings/scripts/CodeGeneratorV8.pm:
        (GetDomMapName):
        * bindings/v8/DOMDataStore.cpp:
        (WebCore::DOMDataStore::DOMDataStore):
        (WebCore::DOMDataStore::~DOMDataStore):
        (WebCore::DOMDataStore::reportMemoryUsage):
        * bindings/v8/DOMDataStore.h:
        (DOMDataStore):
        * bindings/v8/V8DOMMap.cpp:
        * bindings/v8/V8DOMMap.h:
        (NodeWrapperVisitor):
        (WebCore):
        * bindings/v8/V8DOMWrapper.h:
        (V8DOMWrapper):
        * bindings/v8/V8GCController.cpp:
        (WebCore::V8GCController::majorGCPrologue):
        * bindings/v8/custom/V8WebSocketCustom.cpp:
        (WebCore::V8WebSocket::constructorCallback):
        * bindings/v8/custom/V8XMLHttpRequestConstructor.cpp:
        (WebCore::V8XMLHttpRequest::constructorCallback):

2012-10-25  Charles Wei  <charles.wei@torchmobile.com.cn>

        [BlackBerry] User Challenged again after browser restart for HTTP/FTP sites already successfully authenticated.
        https://bugs.webkit.org/show_bug.cgi?id=100448

        Reviewed by George Staikos.

        Internally reviewed by Joe Mason.

        We didn't check the persistent Credential Storage for Credentials when challenged by the server.

        Manual Test: login to ftp://localhost on BlackBerry device, and restart the browser to login again.

        * platform/network/blackberry/NetworkJob.cpp:
        (WebCore::NetworkJob::sendRequestWithCredentials):

2012-10-25  Joshua Bell  <jsbell@chromium.org>

        IndexedDB: Add histogram statistics for backing store errors
        https://bugs.webkit.org/show_bug.cgi?id=98465

        Reviewed by Adam Barth.

        Define a macro for consistent asserting (during development), logging, and recording
        internal backing store errors via histograms. Define specific histogram values to
        track issues with opening backing stores to gather stats on corruption.

        No new tests - just the stats, ma'am, just the stats.

        * Modules/indexeddb/IDBLevelDBBackingStore.cpp:
        (WebCore):
        (WebCore::setUpMetadata):
        (WebCore::IDBLevelDBBackingStore::open):
        (WebCore::IDBLevelDBBackingStore::getIDBDatabaseMetaData):
        (WebCore::IDBLevelDBBackingStore::createIDBDatabaseMetaData):
        (WebCore::IDBLevelDBBackingStore::updateIDBDatabaseIntVersion):
        (WebCore::IDBLevelDBBackingStore::updateIDBDatabaseMetaData):
        (WebCore::deleteRange):
        (WebCore::IDBLevelDBBackingStore::getObjectStores):
        (WebCore::IDBLevelDBBackingStore::createObjectStore):
        (WebCore::IDBLevelDBBackingStore::putObjectStoreRecord):
        (WebCore::IDBLevelDBBackingStore::maybeUpdateKeyGeneratorCurrentNumber):
        (WebCore::IDBLevelDBBackingStore::forEachObjectStoreRecord):
        (WebCore::IDBLevelDBBackingStore::getIndexes):
        (WebCore::IDBLevelDBBackingStore::createIndex):
        (WebCore::IDBLevelDBBackingStore::deleteIndex):
        (WebCore::IDBLevelDBBackingStore::findKeyInIndex):

2012-10-25  Adam Barth  <abarth@webkit.org>

        [V8] We can merge ActiveDOMObjectPrologueVisitor with ObjectVisitor
        https://bugs.webkit.org/show_bug.cgi?id=100430

        Reviewed by Eric Seidel.

        There's no reason for these visitors to be separate objects anymore.

        * bindings/v8/V8GCController.cpp:
        (WebCore::ObjectVisitor::ObjectVisitor):
        (WebCore::ObjectVisitor::visitDOMWrapper):
        (WebCore::V8GCController::majorGCPrologue):

2012-10-25  Tony Chang  <tony@chromium.org>

        Remove unused static methods from DOMTimer.h
        https://bugs.webkit.org/show_bug.cgi?id=100427

        Reviewed by Kenneth Russell.

        Since these values got moved into Settings, these methods are no longer called.

        No new tests, removing dead code.

        * page/DOMTimer.h:
        (DOMTimer): Remove unused getters.

2012-10-25  Leo Yang  <leoyang@rim.com>

        [BlackBerry] Infinite redirect loop is not displayed to user
        https://bugs.webkit.org/show_bug.cgi?id=100420

        Reviewed by George Staikos.

        CNN.com is redirecting us infinitely with 302 http code and response body. We catch
        it my setting our extended error code as we defined. But we were not trying to notify
        error because we have received body. This was wrong. For extended http status code
        which is less than 0 we should display our own error page regardless there was data
        received from the server or not.

        Tested by manually loading CNN.com.

        * platform/network/blackberry/NetworkJob.cpp:
        (WebCore::NetworkJob::shouldNotifyClientFailed):

2012-10-25  Nico Weber  <thakis@chromium.org>

        Flip ImageOrientation coordinate system from lefthanded to righthanded
        https://bugs.webkit.org/show_bug.cgi?id=100414

        Reviewed by Eric Seidel.

        platform/graphics, noteably GraphicsContext uses a right-handed
        coordinate system (origin in the top left corner, x growing to the
        right, y to the bottom).  ImageOrientation was an outlier from
        and used a left-handed coordinate system.  This patch makes
        ImageOrientation match the rest of platform/graphics.

        This is a pure refactoring and has no observable effects.

        * platform/chromium/DragImageChromiumSkia.cpp:
        (WebCore::createDragImageFromImage):
        * platform/graphics/ImageOrientation.cpp:
        (WebCore::ImageOrientation::transformFromDefault):
        * platform/graphics/cg/GraphicsContextCG.cpp:
        (WebCore::GraphicsContext::drawNativeImage):
        * platform/graphics/skia/ImageSkia.cpp:
        (WebCore::BitmapImage::draw):
        * platform/mac/DragImageMac.mm:
        (WebCore::createDragImageFromImage):
        * rendering/RenderObject.cpp:
        (WebCore::RenderObject::shouldRespectImageOrientation):

2012-10-25  Keishi Hattori  <keishi@webkit.org>

        Hide popup while transitioning from the suggestion picker to the calendar picker
        https://bugs.webkit.org/show_bug.cgi?id=99537

        Reviewed by Kent Tamura.

        Right now you can see a squished calendar picker while transitioning
        from suggestion picker from calendar picker. This change will hide the
        popup before opening the calendar picker.

        No new tests.

        * Resources/pagepopups/pickerCommon.js: Hiding the window will also trigger a resize event so I created a separate event, didOpenPicker.
        (hideWindow): Resize the window to 1x1 because we can't resize to 0x0.
        * Resources/pagepopups/suggestionPicker.js:
        (SuggestionPicker.prototype.selectEntry): Hide the window first and then open the calendar picker.

2012-10-25  Anders Carlsson  <andersca@apple.com>

        Fix build.

        * page/mac/EventHandlerMac.mm:
        (WebCore::EventHandler::needsKeyboardEventDisambiguationQuirks):

2012-10-25  Anders Carlsson  <andersca@apple.com>

        Remove feed and feeds URL scheme workarounds
        https://bugs.webkit.org/show_bug.cgi?id=100442

        Reviewed by Dan Bernstein.

        * dom/DocumentEventQueue.cpp:
        (WebCore::DocumentEventQueue::enqueueOrDispatchScrollEvent):
        * page/mac/EventHandlerMac.mm:
        (WebCore::EventHandler::needsKeyboardEventDisambiguationQuirks):

2012-10-25  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r132514.
        http://trac.webkit.org/changeset/132514
        https://bugs.webkit.org/show_bug.cgi?id=100440

        "Broke chromium content_browsertests AccessibilityAriaMenu
        AccessibilityInputRange AccessibilityListMarkers" (Requested
        by scheib on #webkit).

        * accessibility/AXObjectCache.cpp:
        (WebCore::AXObjectCache::getOrCreate):
        (WebCore::AXObjectCache::contentChanged):
        (WebCore::AXObjectCache::childrenChanged):
        (WebCore::AXObjectCache::handleAriaRoleChanged):
        * accessibility/AXObjectCache.h:
        (AXObjectCache):
        (WebCore::AXObjectCache::contentChanged):
        * accessibility/AccessibilityObject.cpp:
        (WebCore::AccessibilityObject::AccessibilityObject):
        * accessibility/AccessibilityObject.h:
        (WebCore::AccessibilityObject::contentChanged):
        (AccessibilityObject):
        * accessibility/AccessibilityRenderObject.cpp:
        (WebCore::AccessibilityRenderObject::accessibilityIsIgnored):
        (WebCore::AccessibilityRenderObject::correspondingControlForLabelElement):
        (WebCore::AccessibilityRenderObject::contentChanged):
        * accessibility/AccessibilityRenderObject.h:
        (AccessibilityRenderObject):
        * accessibility/AccessibilityScrollView.cpp:
        (WebCore::AccessibilityScrollView::isAttachment):
        (WebCore::AccessibilityScrollView::widgetForAttachmentView):
        (WebCore::AccessibilityScrollView::updateScrollbars):
        (WebCore::AccessibilityScrollView::webAreaObject):
        (WebCore::AccessibilityScrollView::elementRect):
        (WebCore::AccessibilityScrollView::documentFrameView):
        (WebCore::AccessibilityScrollView::parentObject):
        (WebCore::AccessibilityScrollView::parentObjectIfExists):
        (WebCore::AccessibilityScrollView::getScrollableAreaIfScrollable):
        (WebCore::AccessibilityScrollView::scrollTo):
        * accessibility/AccessibilityScrollView.h:
        (WebCore::AccessibilityScrollView::scrollView):
        (AccessibilityScrollView):
        * accessibility/AccessibilityTable.cpp:
        (WebCore::AccessibilityTable::isDataTable):
        * accessibility/chromium/AXObjectCacheChromium.cpp:
        (WebCore::AXObjectCache::postPlatformNotification):
        * dom/Element.cpp:
        (WebCore::Element::attributeChanged):
        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::deleteLineBoxTree):
        (WebCore::RenderBlock::createAndAppendRootInlineBox):
        * rendering/RenderObject.cpp:
        (WebCore::RenderObject::styleWillChange):
        * rendering/RenderText.cpp:
        (WebCore::RenderText::setText):

2012-10-25  Dan Bernstein  <mitz@apple.com>

        <rdar://problem/12544626> [cg] RenderBlock::selectionGaps() is extremely slow when there are many floats
        https://bugs.webkit.org/show_bug.cgi?id=100413

        Reviewed by Anders Carlsson.

        RenderBlock::selectionGaps() calls GraphicsContext::clipOut(const IntRect&) for each float.
        Sped up the Core Graphics implementation of this function considerably by removing an
        unnecessary call to CGContextGetClipBoundingBox.

        * platform/graphics/cg/GraphicsContextCG.cpp:
        (WebCore::GraphicsContext::clipOut): Changed to use CGRectInfinite rather than the bounding
        box of the current clip.

2012-10-25  Tim Horton  <timothy_horton@apple.com>

        REGRESSION (132422): Tiles don't move when the Find dialog causes programmatic scrolls
        https://bugs.webkit.org/show_bug.cgi?id=100433
        <rdar://problem/12575582>

        Reviewed by Simon Fraser.

        Actually update GraphicsLayer positions from updateMainFrameScrollPosition if
        we're doing a programmatic scroll; otherwise programmatic scrolls while scrolling
        on the main thread will short-circuit and end up only updating the GraphicsLayer's
        notion of its current position, but never synchronizing that to the layer itself.

        No new tests, as this is currently untestable.

        * page/scrolling/ScrollingCoordinator.cpp:
        (WebCore::ScrollingCoordinator::updateMainFrameScrollPosition):

2012-10-25  Simon Fraser  <simon.fraser@apple.com>

        Tiled layers are missing content on zooming
        https://bugs.webkit.org/show_bug.cgi?id=100422

        Reviewed by Beth Dakin.

        Tiled layers using TileCaches were missing content after
        zooming. TileCache was confused in the presence of scaling;
        it unapplies the scale on the layer above the tiles (so the tiles
        live in screen space), and computed the tile coverage rect
        in these tile coordinates. This worked for the page tile cache,
        because its visibleRect was sent in pre-scaled. However, for
        tiled layer TileCaches this was wrong.
        
        Fix by scaling the tile coverage rect by m_scale before
        using it to compute which tiles to throw away and bring in.
        
        To fix the problem of the visibleRect being pre-scaled
        for the page tile cache, remove the setting of the visibleRect
        in RenderLayerCompositor::frameViewDidScroll(), and rely on 
        GraphicsLayerCA::updateVisibleRect() which computes the
        visible rect in the correct, layer coordinates.

        Test: compositing/tiling/tile-cache-zoomed.html

        * platform/graphics/ca/GraphicsLayerCA.cpp:
        (WebCore::GraphicsLayerCA::updateVisibleRect): Call setVisibleRect()
        for all tile cache layers, not just tiled layer ones, but only do
        the visible rect adjustment for those that are not the page tile cache.
        * platform/graphics/ca/mac/TileCache.mm:
        (WebCore::TileCache::revalidateTiles): Use a coverageRectInTileCoords rect,
        which is scaled to be in the same coordinate space as the tile grid.
        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::frameViewDidScroll): Remove the code
        that sets the setVisibleRect() on the TiledBacking.

2012-10-25  Adam Barth  <abarth@webkit.org>

        [V8] ActiveDOMNodes no longer require a separate wrapper map
        https://bugs.webkit.org/show_bug.cgi?id=100352

        Reviewed by Eric Seidel.

        There is no longer any reason to keep a separate DOM wrapper map for
        active DOM nodes. We can simply store them in the normal DOM node
        wrapper map (which is more efficient because it doesn't use a HashMap).

        * bindings/scripts/CodeGeneratorV8.pm:
        (GetDomMapName):
        * bindings/v8/DOMDataStore.cpp:
        (WebCore::DOMDataStore::DOMDataStore):
        (WebCore::DOMDataStore::~DOMDataStore):
        (WebCore::DOMDataStore::reportMemoryUsage):
        * bindings/v8/DOMDataStore.h:
        (DOMDataStore):
        * bindings/v8/IntrusiveDOMWrapperMap.h:
        * bindings/v8/V8DOMMap.cpp:
        * bindings/v8/V8DOMMap.h:
        (WebCore):
        * bindings/v8/V8DOMWrapper.cpp:
        * bindings/v8/V8DOMWrapper.h:
        (V8DOMWrapper):
        (WebCore::V8DOMWrapper::getCachedWrapper):

2012-10-25  Tony Chang  <tony@chromium.org>

        Unreviewed, fix the build on Mac.

        Putting the getter in the Settings.h caused the global variable to be inlined and needing it to be exported.
        Instead, put the implementation in the cpp file.

        * page/Settings.cpp:
        (WebCore::Settings::defaultMinDOMTimerInterval):
        (WebCore):
        (WebCore::Settings::defaultDOMTimerAlignmentInterval):
        * page/Settings.h:
        (Settings):

2012-10-25  Tony Chang  <tony@chromium.org>

        Move default DOM Timer values into Settings
        https://bugs.webkit.org/show_bug.cgi?id=100405

        Reviewed by Kenneth Russell.

        Move the global values for defaultMinDOMTimerInterval and defaultDOMTimerAlignmentInterval into
        the Settings object. This is more consistent with other global settings and allows us to remove
        the setters on the DOMTimer object.

        No new tests, this is a refactor.

        * page/DOMTimer.cpp: Remove globals.
        * page/DOMTimer.h:
        (WebCore::DOMTimer::defaultMinTimerInterval): Call through to Settings
        (WebCore::DOMTimer::defaultTimerAlignmentInterval): Call through to Settings.
        (DOMTimer): Remove setters.
        * page/Settings.cpp:
        (WebCore::Settings::setDefaultMinDOMTimerInterval): Use a global in Settings.
        (WebCore::Settings::setDefaultDOMTimerAlignmentInterval): Use a global in Settings.
        * page/Settings.h:
        (WebCore::Settings::defaultMinDOMTimerInterval): Inline the getter.
        (WebCore::Settings::defaultDOMTimerAlignmentInterval): Inline the getter.
        (Settings): Add globals.

2012-10-25  Simon Fraser  <simon.fraser@apple.com>

        Report the tile coverage rect in layer coords, and add some tests for tiled backing and zooming
        https://bugs.webkit.org/show_bug.cgi?id=100416

        Reviewed by Beth Dakin.

        The tileCoverageRect is computed in "tile" coordinates, which don't match
        the visibleRect coordinates. It's more useful when testing to see the
        tile coverage relative to the view bounds, so unapply the scale whem
        reporting tile coverage in tests.

        Tests: platform/mac/tiled-drawing/tiled-drawing-zoom-scrolled.html
               platform/mac/tiled-drawing/tiled-drawing-zoom.html

        * platform/graphics/ca/mac/TileCache.h:
        * platform/graphics/ca/mac/TileCache.mm:
        (WebCore::TileCache::tileCoverageRect):

2012-10-25  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r132269.
        http://trac.webkit.org/changeset/132269
        https://bugs.webkit.org/show_bug.cgi?id=100412

        "Speculative rollout of r132269 in hopes of fixing a
        mysterious recalcStyle crasher" (Requested by eseidel on
        #webkit).

        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::updateFirstLetter):
        * rendering/RenderListBox.h:
        * rendering/RenderObjectChildList.cpp:
        (WebCore::RenderObjectChildList::updateBeforeAfterContent):

2012-10-25  Stephen White  <senorblanco@chromium.org>

        Change ReferenceFilterOperations to reference (own) the data passed to
        them.
        https://bugs.webkit.org/show_bug.cgi?id=97715

        Reviewed by Nate Chapin.

        Covered by css3/filters/reference-filter-update-after-remove.html

        * css/CachedSVGDocumentReference.h: Added.
        (CachedSVGDocumentReference):
        New class which holds a CachedResourceHandle<CachedSVGDocument>, but
        can be placed in ReferenceFilterOperation's Data.  It also calls
        addClient() / removeClient(), in order to keep the CachedSVGDocument
        alive until the FilterEffectRenderer can get it.
        (WebCore::CachedSVGDocumentReference::CachedSVGDocumentReference):
        (WebCore::CachedSVGDocumentReference::~CachedSVGDocumentReference):
        (WebCore::CachedSVGDocumentReference::document):
        Accessor for the underlying document.
        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::loadPendingSVGDocuments):
        Wrap the CachedSVGDocument handle in a CachedSVGDocumentReference, and
        transfer ownership to the ReferenceFilterOperation.
        (WebCore::StyleResolver::createFilterOperations):
        Same as above.
        * platform/graphics/filters/FilterOperation.h:
        (Data):
        New base class for generic data which can be deleted polymorphically.
        (WebCore::FilterOperation::ReferenceFilterOperation::data):
        (WebCore::FilterOperation::ReferenceFilterOperation::setData):
        Use the above-mentioned Data class, instead of a void *.
        (WebCore::FilterOperation::ReferenceFilterOperation::ReferenceFilterOperation):
        Don't initialize data to null; OwnPtr will do that for us.
        * rendering/FilterEffectRenderer.cpp:
        (WebCore::FilterEffectRenderer::buildReferenceFilter):
        Extract the cached SVG document from the reference data.
        * rendering/RenderLayerFilterInfo.cpp:
        (WebCore::RenderLayerFilterInfo::updateReferenceFilterClients):
        Extract the cached SVG document from the reference data.

2012-10-25  Simon Fraser  <simon.fraser@apple.com>

        Incorrect tile size in the slow scrolling case
        https://bugs.webkit.org/show_bug.cgi?id=100411

        Reviewed by Beth Dakin.

        If we're in slow scrolling mode, we don't want to inflate the
        coverage rect based on scrollability. This ensures that the few
        big tiles we create have the correct size.

        * platform/graphics/ca/mac/TileCache.mm:
        (WebCore::TileCache::computeTileCoverageRect):

2012-10-25  Nico Weber  <thakis@chromium.org>

        Move ImageOrientation transform back in CG space (lower-left origin), adapt the skia code to work with that, turn on feature for chromium
        https://bugs.webkit.org/show_bug.cgi?id=100401

        Reviewed by Eric Seidel.

        This is an alternative fix for the regression caused by r132384 / bug
        100179. The bug exists because different pieces of code didn't agree
        which space the transformation returned by ImageOrientation was in.

        r132384 moved it from CG coordinates to skia coordinates, but didn't
        do it completetely. This CL reverts this part of r132384 so that the
        transformation is in CG coordinates again, and adapts the skia code to
        work in that space.

        Alternatively, https://bugs.webkit.org/show_bug.cgi?id=100319 woudl
        make the cg code work with the transform in skia coordinates.

        Covered by fast/images/exif-orientation.html

        * platform/chromium/DragImageChromiumSkia.cpp:
        (WebCore::createDragImageFromImage):
        * platform/graphics/ImageOrientation.cpp:
        (WebCore::ImageOrientation::transformFromDefault):
        * platform/graphics/ImageOrientation.h:
        (WebCore):
        (WebCore::ImageOrientation::usesWidthAsHeight):
        (WebCore::ImageOrientation::fromEXIFValue):
        (ImageOrientation):
        * platform/graphics/cg/GraphicsContextCG.cpp:
        (WebCore::GraphicsContext::drawNativeImage):
        * platform/graphics/skia/ImageSkia.cpp:
        (WebCore::BitmapImage::draw):
        * platform/mac/DragImageMac.mm:
        (WebCore::createDragImageFromImage):
        * rendering/RenderObject.cpp:
        (WebCore::RenderObject::shouldRespectImageOrientation):

2012-10-25  Simon Fraser  <simon.fraser@apple.com>

        Log the tile cache tile size in test output
        https://bugs.webkit.org/show_bug.cgi?id=100409

        Reviewed by Beth Dakin.

        When dumping tile cache information in tests, also dump the tile size.

        * platform/graphics/TiledBacking.h:
        * platform/graphics/ca/GraphicsLayerCA.cpp:
        (WebCore::GraphicsLayerCA::dumpAdditionalProperties):
        * platform/graphics/ca/mac/TileCache.h:

2012-10-25  Arnaud Renevier  <a.renevier@sisa.samsung.com>

        do not multiply/demultiply colors when alpha is 255
        https://bugs.webkit.org/show_bug.cgi?id=89246

        Reviewed by Kenneth Rohde Christiansen.

        Do not use colorFromPremultipliedARGB in getImageData nor
        premultipliedARGBFromColor in putByteArray. Avoiding object creation
        and function call make canvas.getImageData about 10% faster and
        canvas.putImageData about 30% faster.

        Also, we avoid multiplication/demultiplication computation when alpha
        is 255. Result is the same, but when there is no transparency,
        canvas.getImageData is about 4x faster, and canvas.putImageData is
        about 2x faster.

        No new tests. No change in behavior.

        * platform/graphics/cairo/ImageBufferCairo.cpp:
        (WebCore::getImageData):
        (WebCore::ImageBuffer::putByteArray):

2012-10-25  Nate Chapin  <japhet@chromium.org>

        Add a main resource type to the memory cache
        https://bugs.webkit.org/show_bug.cgi?id=99864

        Reviewed by Adam Barth.

        No new tests, no functionality change.

        * inspector/InspectorPageAgent.cpp:
        (WebCore::hasTextContent):
        (WebCore::InspectorPageAgent::cachedResourceType):
        * loader/SubresourceLoader.cpp:
        (WebCore::SubresourceLoader::willSendRequest):
        (WebCore::SubresourceLoader::didReceiveResponse):
        (WebCore::SubresourceLoader::didFail):
        * loader/cache/CachedRawResource.cpp:
        (WebCore::CachedRawResource::CachedRawResource):
        (WebCore::CachedRawResource::addAdditionalRequestHeaders):
        (WebCore):
        (WebCore::CachedRawResource::setShouldBufferData):
        (WebCore::CachedRawResource::loader):
        (WebCore::CachedRawResource::clear):
        * loader/cache/CachedRawResource.h:
        (WebCore):
        (CachedRawResource):
        * loader/cache/CachedResource.cpp:
        (WebCore::defaultPriorityForResourceType):
        (WebCore::cachedResourceTypeToTargetType):
        (WebCore::CachedResource::updateResourceRequest):
        (WebCore):
        * loader/cache/CachedResource.h:
        (WebCore::CachedResource::setResourceError):
        (WebCore::CachedResource::resourceError):
        (CachedResource):
        (WebCore::CachedResource::ignoreForRequestCount):
        * loader/cache/CachedResourceLoader.cpp:
        (WebCore::createResource):
        (WebCore::CachedResourceLoader::requestRawResource):
        (WebCore::CachedResourceLoader::checkInsecureContent):
        (WebCore::CachedResourceLoader::canRequest):
        (WebCore::CachedResourceLoader::determineRevalidationPolicy):
        * loader/cache/CachedResourceLoader.h:
        (CachedResourceLoader):
        * platform/network/ResourceLoadPriority.h:
        * platform/network/cf/ResourceRequestCFNet.h:
        (WebCore::toResourceLoadPriority):
        (WebCore::toHTTPPipeliningPriority):

2012-10-25  Ojan Vafai  <ojan@chromium.org>

        [V8] Add histograms to measure V8 work done during window close and navigation
        https://bugs.webkit.org/show_bug.cgi?id=100358

        Reviewed by Adam Barth.

        * bindings/v8/ScriptController.cpp:
        (WebCore::ScriptController::clearForClose):
        (WebCore::ScriptController::clearWindowShell):

2012-10-25  Antti Koivisto  <antti@apple.com>

        Avoid unnecessary style recalcs on id attribute mutation.
        https://bugs.webkit.org/show_bug.cgi?id=100395

        Reviewed by Andreas Kling.

        There is no need to invalidate element style on id attribute change if neither the old nor the new id were 
        mentioned in any stylesheet. This is similar to the optimization we already have for class attributes.
        
        Recalculating element style is expensive. It seems id attribute mutation is often used in scripts for purposes other than styling. 

        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::hasSelectorForId):
        (WebCore):
        * css/StyleResolver.h:
        * dom/Element.cpp:
        (WebCore::makeIdForStyleResolution):
        (WebCore):
        (WebCore::Element::attributeChanged):

2012-10-25  Dominic Mazzoni  <dmazzoni@google.com>

        AX: Notification should be sent when accessibilityIsIgnored changes
        https://bugs.webkit.org/show_bug.cgi?id=99547

        Reviewed by Chris Fleizach.

        Adds a new flag in AccessibilityObject that keeps track of the most recent
        value of accessibilityIsIgnored(). After certain events such as an ARIA
        attribute change or content change, checks the new value of
        accessibilityIsIgnored() and posts a "children changed" notification on the
        parent node if it changed, making sure the parent recomputes its vector of
        (unignored) children.

        Also moves handling of attribute changes to AXObjectCache, and sends
        notifications for some attribute changes that were previously silent. On
        Chromium, all changes to an accessibility object's attributes should
        result in some notification.

        Some tests would have broken because an AccessibilityScrollView was created
        and holding a reference to a ScrollView for an iframe after it was deleted,
        so this change switches AccessibilityScrollView to hold a weak reference
        to ScrollView instead.

        Tests: platform/chromium/accessibility/is-ignored-change-sends-notification.html
               platform/chromium/accessibility/other-aria-attribute-change-sends-notification.html
               platform/chromium/accessibility/text-change-notification.html

        * accessibility/AXObjectCache.cpp:
        (WebCore::AXObjectCache::focusedUIElementForPage):
        (WebCore::AXObjectCache::getOrCreate):
        (WebCore::AXObjectCache::textChanged):
        (WebCore):
        (WebCore::AXObjectCache::childrenChanged):
        (WebCore::AXObjectCache::handleAriaRoleChanged):
        (WebCore::AXObjectCache::handleAttributeChanged):
        (WebCore::AXObjectCache::labelChanged):
        (WebCore::AXObjectCache::recomputeIsIgnored):
        * accessibility/AXObjectCache.h:
        (AXObjectCache):
        (WebCore::AXObjectCache::childrenChanged):
        (WebCore::AXObjectCache::textChanged):
        (WebCore::AXObjectCache::handleAttributeChanged):
        (WebCore::AXObjectCache::recomputeIsIgnored):
        * accessibility/AccessibilityNodeObject.cpp:
        (WebCore::AccessibilityNodeObject::insertChild):
        * accessibility/AccessibilityObject.cpp:
        (WebCore::AccessibilityObject::AccessibilityObject):
        (WebCore::AccessibilityObject::cachedIsIgnoredValue):
        (WebCore):
        (WebCore::AccessibilityObject::setCachedIsIgnoredValue):
        (WebCore::AccessibilityObject::notifyIfIgnoredValueChanged):
        * accessibility/AccessibilityObject.h:
        (WebCore::AccessibilityObject::textChanged):
        (AccessibilityObject):
        * accessibility/AccessibilityRenderObject.cpp:
        (WebCore::AccessibilityRenderObject::accessibilityIsIgnored):
        (WebCore::AccessibilityRenderObject::correspondingControlForLabelElement):
        (WebCore::AccessibilityRenderObject::textChanged):
        (WebCore::AccessibilityRenderObject::addHiddenChildren):
        (WebCore::AccessibilityRenderObject::addChildren):
        * accessibility/AccessibilityRenderObject.h:
        (AccessibilityRenderObject):
        * accessibility/AccessibilityScrollView.cpp:
        (WebCore::AccessibilityScrollView::~AccessibilityScrollView):
        (WebCore):
        (WebCore::AccessibilityScrollView::detach):
        (WebCore::AccessibilityScrollView::isAttachment):
        (WebCore::AccessibilityScrollView::widgetForAttachmentView):
        (WebCore::AccessibilityScrollView::updateScrollbars):
        (WebCore::AccessibilityScrollView::webAreaObject):
        (WebCore::AccessibilityScrollView::elementRect):
        (WebCore::AccessibilityScrollView::documentFrameView):
        (WebCore::AccessibilityScrollView::parentObject):
        (WebCore::AccessibilityScrollView::parentObjectIfExists):
        (WebCore::AccessibilityScrollView::getScrollableAreaIfScrollable):
        (WebCore::AccessibilityScrollView::scrollTo):
        * accessibility/AccessibilityScrollView.h:
        (WebCore::AccessibilityScrollView::scrollView):
        (AccessibilityScrollView):
        * accessibility/AccessibilityTable.cpp:
        (WebCore::AccessibilityTable::isDataTable):
        * accessibility/chromium/AXObjectCacheChromium.cpp:
        (WebCore::AXObjectCache::postPlatformNotification):
        * dom/Element.cpp:
        (WebCore::Element::attributeChanged):
        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::deleteLineBoxTree):
        (WebCore::RenderBlock::createAndAppendRootInlineBox):
        * rendering/RenderObject.cpp:
        (WebCore::RenderObject::styleWillChange):
        * rendering/RenderText.cpp:
        (WebCore::RenderText::setText):

2012-10-25  Dominik Röttsches  <dominik.rottsches@intel.com>

        Conditionalize XHR timeout support
        https://bugs.webkit.org/show_bug.cgi?id=100356

        Reviewed by Adam Barth.

        Adding feature for XHR_TIMEOUT to disable it on ports that don't have
        network backend support for setTimeoutInterval.

        No new tests, covered by http/tests/xmlhttprequest/timeout/*

        * Configurations/FeatureDefines.xcconfig: Default ON on mac.
        * GNUmakefile.am:
        * GNUmakefile.features.am:
          Autotools support for the flag.
        * xml/XMLHttpRequest.cpp: #if ENABLE(XHR_TIMEOUT) wrapping
        (WebCore::XMLHttpRequest::XMLHttpRequest):
        (WebCore):
        (WebCore::XMLHttpRequest::open):
        (WebCore::XMLHttpRequest::createRequest):
        (WebCore::XMLHttpRequest::didFail):
        * xml/XMLHttpRequest.h: #if ENABLE(XHR_TIMEOUT) wrapping
        (XMLHttpRequest):
        * xml/XMLHttpRequest.idl: Conditional properties timeout and ontimeout (event handler).

2012-10-25  Tom Sepez  <tsepez@chromium.org>

        XSSAuditor must replace form action with about:blank when reflected action detected.
        https://bugs.webkit.org/show_bug.cgi?id=100280

        Reviewed by Daniel Bates.

        Changes empty string form-action replacement to about:blank.
        Existing form-action.html test modified to check this case.
        
        * html/parser/XSSAuditor.cpp:
        (WebCore::XSSAuditor::filterFormToken):

2012-10-25  Kevin Ellis  <kevers@chromium.org>

        Touch adjustment snaps to wrong target at a plugin boundary.
        https://bugs.webkit.org/show_bug.cgi?id=99938

        Reviewed by Antonio Gomes.

        Inidcate that an <embed> element can respond to
        mouse click events, since mouse events are forwarded
        to the plugin.  Fixes touch adjustment at a plugin
        boundary.  Prior to the patch a clickable element 
        adjacent to the plugin would capture synthetic mouse
        events from tap gestures that spanned the plugin
        boundary.

        Test: touchadjustment/plugin.html

        * html/HTMLEmbedElement.cpp:
        (WebCore::HTMLEmbedElement::willRespondToMouseClickEvents):
        (WebCore):
        * html/HTMLEmbedElement.h:

2012-10-25  Ojan Vafai  <ojan@chromium.org>

        Get rid of ScriptController::clearForNavigation
        https://bugs.webkit.org/show_bug.cgi?id=100390

        Reviewed by Adam Barth.

        Get rid of clearForNavigation and change resetIsolatedWorlds
        to reset so that it can also do the hintForCollectGarbage call.
        No new tests. No behavior change.

        * bindings/v8/ScriptController.cpp:
        (WebCore::ScriptController::reset):
        (WebCore::ScriptController::clearForClose):
        (WebCore::ScriptController::clearWindowShell):
        * bindings/v8/ScriptController.h:
        (ScriptController):

2012-10-25  Simon Fraser  <simon.fraser@apple.com>

        r132427 changed the tiling behavior of tiled layer TileCaches as well as the page tile cache
        https://bugs.webkit.org/show_bug.cgi?id=100323

        Reviewed by Anders Carlsson.

        r132427 assumed that TileCaches were only used for the page, and changed the tile
        size behavior of all non-page TileCaches.
        
        Fix by giving TiledBacking a new 'CoverageForSlowScrolling' flag which
        affects the tile size behavior.
        
        Consolidated the two places that set TileCoverage into one, and in the process
        reduced FrameView's direct communication with TiledBacking.

        No new tests because we can't test tile size via tests.

        * page/FrameView.cpp:
        (WebCore::FrameView::didMoveOnscreen): Rely on RenderLayerCompositor to
        call setIsInWindow() on the main page tile cache.
        (WebCore::FrameView::willMoveOffscreen): Ditto.
        (WebCore::FrameView::performPostLayoutTasks): Rather than explicitly tell
        the TiledBacking that it should do stuff, just tell the compositor that
        layout happened.
        * platform/graphics/TiledBacking.h: New CoverageForSlowScrolling flag.
        * platform/graphics/ca/mac/TileCache.mm:
        (WebCore::TileCache::tileSizeForCoverageRect): Only use one big tile
        if the CoverageForSlowScrolling flag is set.
        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::RenderLayerBacking): layer->isRootLayer()
        is equivalent to renderer()->isRenderView() and clearer.
        (WebCore::RenderLayerBacking::tiledBacking): Call adjustTileCacheCoverage().
        It would be nice to move the rest of this TiledBacking code from here somehow.
        (WebCore::RenderLayerBacking::adjustTileCacheCoverage): Update the TileCoverage
        flags, taking into account horizontal and vertical scrollability independently,
        and whether we're in slow scrolling mode.
        * rendering/RenderLayerBacking.h:
        (RenderLayerBacking):
        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::frameViewDidLayout): Have the page
        tiled backing update it's coverage flags.
        (WebCore::RenderLayerCompositor::pageTiledBacking): Utility function.
        (WebCore::RenderLayerCompositor::didMoveOnscreen): Moved from FrameView.
        (WebCore::RenderLayerCompositor::willMoveOffscreen): Ditto.
        * rendering/RenderLayerCompositor.h:
        (RenderLayerCompositor):

2012-10-25  Elliott Sprehn  <esprehn@chromium.org>

        Everything that sets RenderObject::m_style should go through setStyleInternal
        https://bugs.webkit.org/show_bug.cgi?id=100338

        Reviewed by Ojan Vafai.

        Whenever we set m_style in RenderObject go through setStyleInternal and make
        it inline. This gives a common place to put printfs and makes the code cleaner.

        No new tests, just a refactor.

        * rendering/RenderObject.cpp:
        (WebCore::RenderObject::createObject):
        (WebCore::RenderObject::setStyle):
        * rendering/RenderObject.h:
        (WebCore::RenderObject::setStyleInternal):

2012-10-25  Brady Eidson  <beidson@apple.com>

        Allow LoaderStrategy to override the ResourceLoadScheduler
        https://bugs.webkit.org/show_bug.cgi?id=100355

        Reviewed by Anders Carlsson.

        Allow LoaderStrategy to override the implementation of the ResourceLoadScheduler.
        Add a default implementation that just returns the current ResourceLoadScheduler.

        No new tests (No behavior change).

        Project file stuff:
        * CMakeLists.txt:
        * GNUmakefile.list.am:
        * Target.pri:
        * WebCore.exp.in:
        * WebCore.gypi:
        * WebCore.vcproj/WebCore.vcproj:
        * WebCore.xcodeproj/project.pbxproj:

        "Virtualize" ResourceLoadScheduler to expose build issues in preparation for future virtualization:
        * loader/ResourceLoadScheduler.cpp:
        (WebCore::ResourceLoadScheduler::~ResourceLoadScheduler):
        * loader/ResourceLoadScheduler.h:
        (ResourceLoadScheduler):

        Add the new method plus a default implementation:
         * loader/LoaderStrategy.cpp: 
        (WebCore::LoaderStrategy::resourceLoadScheduler):
        * loader/LoaderStrategy.h:

        When strategies are enabled, use the LoaderStrategy for this:
        * dom/ContainerNode.cpp:
        (WebCore::ContainerNode::suspendPostAttachCallbacks):
        (WebCore::ContainerNode::resumePostAttachCallbacks):

        * loader/MainResourceLoader.cpp:
        (WebCore::MainResourceLoader::loadNow):

        * loader/ResourceLoader.cpp:
        (WebCore::ResourceLoader::releaseResources):
        (WebCore::ResourceLoader::willSendRequest):

        * loader/cache/CachedResource.cpp:
        (WebCore::CachedResource::load):

        * loader/cache/CachedResourceLoader.cpp:
        (WebCore::CachedResourceLoader::performPostLoadActions):

2012-10-25  Yury Semikhatsky  <yurys@chromium.org>

        Web Inspector: inspector tests failing after r132454
        https://bugs.webkit.org/show_bug.cgi?id=100381

        Reviewed by Pavel Feldman.

        Added implementation for DOMNodeWrapperMap::reportMemoryUsage method,
        otherwise no actual pointer is reported which breaks instrumentation.

        * bindings/v8/IntrusiveDOMWrapperMap.h:

2012-10-25  Dominik Röttsches  <dominik.rottsches@intel.com>

        Init timeout flag in ResourceErrorCF
        https://bugs.webkit.org/show_bug.cgi?id=100349

        Reviewed by Alexey Proskuryakov.

        Initialize the timeout property to true if the network error was a timeout error.
        This is a speculative fix for the XHR timeout test cases failing on Apple Win -
        I can't verify this on a local machine.

        No new tests, covered by
        LayoutTests/http/tests/xmlhttprequest/timeout/*

        * platform/network/cf/ResourceErrorCF.cpp:
        (WebCore::ResourceError::ResourceError): Init m_timeout from error code.

2012-10-25  Kenneth Rohde Christiansen  <kenneth@webkit.org>

        'resolution' MQ: Printing should use use high resolution images when available
        https://bugs.webkit.org/show_bug.cgi?id=100382

        Reviewed by Antti Koivisto.

        Special case print to not use the dpi of the screen, but one of 300.

        Updated the resolution media query test to cover this.

        * css/MediaQueryEvaluator.cpp:
        (WebCore::resolutionMediaFeatureEval): Update compared decimal points
        to three, due to 300 / 96 being equal to 3.125.

2012-10-25  Kinuko Yasuda  <kinuko@chromium.org>

        [chromium] External FileSystem should use the root path returned by requestFileSystem
        https://bugs.webkit.org/show_bug.cgi?id=100372

        Reviewed by Kentaro Hara.

        External FileSystem should use the root path returned by
        requestFileSystem as other type is doing. Current implementation
        completely ignore the returned path.

        New tests are to be added in chromium (as the type is only available in chromeos and chrome extensions)

        * Modules/filesystem/chromium/DOMFileSystemChromium.cpp:
        (WebCore::DOMFileSystemBase::createFileSystemURL):

2012-10-25  Kevin Ellis  <kevers@chromium.org>

        Can't easily position the cursor on an empty line in a textarea with touch if touch adjustment is enabled
        https://bugs.webkit.org/show_bug.cgi?id=97576

        Reviewed by Antonio Gomes.

        Consolidate touch adjustment candidates that are
        editable.  Adjustment becomes coarse being based
        on the bounds of the outermost editable element.
        This fix allows tap positioning of the text caret
        on a blank line immediately above or below another
        element.

        Test: touchadjustment/editable-content.html

        * page/TouchAdjustment.cpp:
        (WebCore::TouchAdjustment::compileSubtargetList):
        (WebCore::TouchAdjustment::hybridDistanceFunction):

2012-10-25  Yury Semikhatsky  <yurys@chromium.org>

        Memory instrumentation: add reportMemoryUsage to ImageObserver interface
        https://bugs.webkit.org/show_bug.cgi?id=100091

        Reviewed by Pavel Feldman.

        Added reportMemoryUsage method to ImageObserver to make sure it is reported as
        appropriate descendant(with pointer adjusted due to offsets added by inheritance)
        rather than as a standalone memory block.

        * platform/graphics/ImageObserver.h:
        (ImageObserver):

2012-10-25  Alexander Pavlov  <apavlov@chromium.org>

        Web Inspector: [Overrides] Add latitude and longitude labels for the geolocation fields
        https://bugs.webkit.org/show_bug.cgi?id=100375

        Reviewed by Yury Semikhatsky.

        No new tests, a UI change.

        * English.lproj/localizedStrings.js:
        * inspector/front-end/SettingsScreen.js:
        (WebInspector.UserAgentSettingsTab.prototype._createGeolocationOverrideElement):

2012-10-25  Mikhail Pozdnyakov  <mikhail.pozdnyakov@intel.com>

        Add setMediaTypeOverride to window.internals.settings
        https://bugs.webkit.org/show_bug.cgi?id=100249

        Reviewed by Kenneth Rohde Christiansen.

        Added setMediaTypeOverride to window.internals.settings.

        Test: fast/media/print-restores-previous-mediatype.html

        * WebCore.exp.in: Exported WebCore::Settings::setMediaTypeOverride(WTF::String const&) for MAC.
        * page/Settings.cpp:
        (WebCore::Settings::Settings):
        (WebCore::Settings::setMediaTypeOverride):
        (WebCore):
        * page/Settings.h:
        (Settings):
        (WebCore::Settings::mediaTypeOverride):
        * testing/InternalSettings.cpp:
        (WebCore::InternalSettings::Backup::Backup):
        (WebCore::InternalSettings::Backup::restoreTo):
        (WebCore::InternalSettings::setMediaTypeOverride):
        (WebCore):
        * testing/InternalSettings.h:
        (Backup):
        (InternalSettings):
        * testing/InternalSettings.idl:

2012-10-22  Mikhail Naganov  <mnaganov@chromium.org>

        [Chromium] Add supportMultipleWindows setting, needed for Android
        https://bugs.webkit.org/show_bug.cgi?id=99716

        Reviewed by Adam Barth.

        Add supportMultipleWindows settings for reusing the same view when
        opening popups. This is required for emulating the behavior of
        Android WebView. Adding into WebCore, as other ports might want to
        use this setting in the future.

        Tests: fast/dom/HTMLAnchorElement/anchor-no-multiple-windows.html
               fast/dom/Window/window-open-no-multiple-windows.html
               fast/forms/post-popup-no-multiple-windows.html

        * loader/FrameLoader.cpp:
        (WebCore::createWindow):
        * page/ContextMenuController.cpp:
        (WebCore::openNewWindow):
        * page/Settings.cpp:
        (WebCore::Settings::Settings):
        (WebCore::Settings::setSupportsMultipleWindows):
        (WebCore):
        * page/Settings.h:
        (Settings):
        (WebCore::Settings::supportsMultipleWindows):

2012-10-25  Alexander Pavlov  <apavlov@chromium.org>

        Unreviewed, fix Web Inspector frontend compilability

        * inspector/front-end/ElementsTreeOutline.js:
        (WebInspector.ElementsTreeOutline.prototype._ondragstart):
        * inspector/front-end/StylesSidebarPane.js:
        (WebInspector.StylePropertiesSection.prototype._handleEmptySpaceClick):
        (WebInspector.StylePropertyTreeElement.prototype):

2012-10-23  Alexander Pavlov  <apavlov@chromium.org>

        Web Inspector: Drag and drop property value from Inspector is not working as expected
        https://bugs.webkit.org/show_bug.cgi?id=100040

        Reviewed by Vsevolod Vlasov.

        Do not start a custom drag for a tree element if there is a non-collapsed selection in the Inspector.

        * inspector/front-end/ElementsTreeOutline.js:
        (WebInspector.ElementsTreeOutline.prototype._ondragstart):

2012-10-25  Ilya Tikhonovsky  <loislo@chromium.org>

        Web Inspector: NMI instrument InspectorDebuggerAgent. It uses a lot of memory on heavy js sites because it keeps all the scripts in a map.
        https://bugs.webkit.org/show_bug.cgi?id=100340

        Reviewed by Yury Semikhatsky.

        * dom/WebCoreMemoryInstrumentation.cpp:
        (WebCore):
        * dom/WebCoreMemoryInstrumentation.h:
        (WebCoreMemoryTypes):
        * inspector/InspectorDebuggerAgent.cpp:
        (WebCore::InspectorDebuggerAgent::reportMemoryUsage):
        (WebCore):
        (WebCore::ScriptDebugListener::Script::reportMemoryUsage):
        * inspector/InspectorDebuggerAgent.h:
        (InspectorDebuggerAgent):
        * inspector/ScriptDebugListener.h:
        (Script):

2012-10-25  Adam Barth  <abarth@webkit.org>

        [V8] We can handle ActiveDOMNodes and DOMNodes in the same GC visitor
        https://bugs.webkit.org/show_bug.cgi?id=100351

        Reviewed by Eric Seidel.

        There is no reason to handle active DOM nodes in a separate pass from
        regular DOM nodes anymore.

        * bindings/v8/V8DOMMap.cpp:
        * bindings/v8/V8DOMMap.h:
        (WebCore):
        * bindings/v8/V8GCController.cpp:
        (WebCore::ActiveDOMObjectPrologueVisitor::visitDOMWrapper):
        (WebCore::NodeVisitor::NodeVisitor):
        (NodeVisitor):
        (WebCore::NodeVisitor::visitNodeWrapper):
        (WebCore::V8GCController::majorGCPrologue):

2012-10-25  Alexander Pavlov  <apavlov@chromium.org>

        Web Inspector: Improper out-of-order call on a rule that is being removed from the stylesheet.
        https://bugs.webkit.org/show_bug.cgi?id=100357

        Reviewed by Vsevolod Vlasov.

        * inspector/InspectorStyleSheet.cpp:
        (WebCore::InspectorStyleSheet::deleteRule):

2012-10-25  Adam Barth  <abarth@webkit.org>

        [V8] DOMDataStoreHandle serves no purpose and can be removed
        https://bugs.webkit.org/show_bug.cgi?id=100333

        Reviewed by Eric Seidel.

        After https://bugs.webkit.org/show_bug.cgi?id=100316,
        DOMDataStoreHandle is just a glorified OwnPtr.

        * bindings/v8/DOMWrapperWorld.h:
        (WebCore::DOMWrapperWorld::domDataStore):
        (DOMWrapperWorld):
        (WebCore::DOMWrapperWorld::DOMWrapperWorld):
        * bindings/v8/V8DOMMap.cpp:
        * bindings/v8/V8DOMMap.h:

2012-10-25  Elliott Sprehn  <esprehn@chromium.org>

        Remove dead Node::isBlockFlowOrBlockTable
        https://bugs.webkit.org/show_bug.cgi?id=100336

        Reviewed by Eric Seidel.

        Nothing uses Node::isBlockFlowOrBlockTable anymore so remove it.

        No new tests needed, just removing dead code.

        * dom/Node.cpp:
        * dom/Node.h:
        (Node):

2012-10-25  Eugene Klyuchnikov  <eustas.bug@gmail.com>

        Web Inspector: Fix "check-inspector-strings" script and fix localized strings.
        https://bugs.webkit.org/show_bug.cgi?id=100090

        Reviewed by Vsevolod Vlasov.

        Fixed localized strings table.

        * English.lproj/localizedStrings.js: Added missing, removed orhans.
        * inspector/front-end/CSSNamedFlowView.js: Removed tailing whitespaces.
        * inspector/front-end/NativeMemorySnapshotView.js:
        Removed double localization.

2012-10-25  Adam Barth  <abarth@webkit.org>

        [V8] We can merge DOMDataStore, ScopedDOMDataStore, and StaticDOMDataStore into one class
        https://bugs.webkit.org/show_bug.cgi?id=100316

        Reviewed by Eric Seidel.

        Prior to this patch, DOMDataStore had two subclasses,
        ScopedDOMDataStore and StaticDOMDataStore, which used slighly different
        wrapper map base classes and had different lifetimes. This patch
        unifies all these classes into DOMDataStore itself. This makes this
        code much more straightforward.

        * WebCore.gypi:
        * bindings/v8/DOMDataStore.cpp:
        (WebCore::DOMDataStore::DOMDataStore):
        (WebCore::DOMDataStore::~DOMDataStore):
        (WebCore::DOMDataStore::current):
        (WebCore::DOMDataStore::reportMemoryUsage):
        * bindings/v8/DOMDataStore.h:
        (DOMDataStore):
        (WebCore::DOMDataStore::domNodeMap):
        (WebCore::DOMDataStore::activeDomNodeMap):
        (WebCore::DOMDataStore::domObjectMap):
        (WebCore::DOMDataStore::activeDomObjectMap):
        * bindings/v8/ScopedDOMDataStore.cpp: Removed.
        * bindings/v8/ScopedDOMDataStore.h: Removed.
        * bindings/v8/SerializedScriptValue.cpp:
        (WebCore::neuterBinding):
        * bindings/v8/StaticDOMDataStore.cpp: Removed.
        * bindings/v8/StaticDOMDataStore.h: Removed.
        * bindings/v8/V8DOMMap.cpp:
        (WebCore::DOMDataStoreHandle::DOMDataStoreHandle):
        (WebCore::DOMDataStoreHandle::~DOMDataStoreHandle):
        (WebCore::visitActiveDOMNodes):
        (WebCore::visitDOMObjects):
        (WebCore::visitActiveDOMObjects):
        * bindings/v8/V8DOMMap.h:
        (WebCore):
        * bindings/v8/V8PerIsolateData.h:
        (V8PerIsolateData):
        * bindings/v8/WorkerScriptController.cpp:
        (WebCore::WorkerScriptController::WorkerScriptController):
        (WebCore::WorkerScriptController::~WorkerScriptController):
        * bindings/v8/WorkerScriptController.h:
        (WorkerScriptController):

2012-10-24  Kent Tamura  <tkent@chromium.org>

        Minimize CSS rulesets for multiple-fields input
        https://bugs.webkit.org/show_bug.cgi?id=100198

        Reviewed by Kentaro Hara.

        - Unify rulesets for input::-webkit-datetime-edit-*-field.
         input::-webkit-datetime-edit-*-field had identical ruleset.

        - Move some rulesets near to related rulesets.
         Move -webkit-datetime-edit-*-field:focus nearby the new unified ruleset.
         Move input::-webkit-datetime-edit-second-field[readonly] nearby
        input::-webkit-datetime-edit-minute-field[readonly].

        No new tests. This shouldn't make any behavior change.

        * css/html.css:
        (input::-webkit-datetime-edit-year-field):
        (input::-webkit-datetime-edit-year-field:focus):
        (input::-webkit-datetime-edit-second-field[readonly]):

2012-10-24  Kent Tamura  <tkent@chromium.org>

        REGRESSION(r132291): Crash in BaseMultipleFieldsDateAndTimeInputType
        https://bugs.webkit.org/show_bug.cgi?id=100326

        Reviewed by Eric Seidel.

        Test: fast/forms/time-multiple-fields/time-multiple-fields-change-type.html

        * html/BaseMultipleFieldsDateAndTimeInputType.cpp:
        (WebCore::BaseMultipleFieldsDateAndTimeInputType::destroyShadowSubtree):
        We need to disconnect m_spinButtonElement before destructing the UA shadow tree.

2012-10-24  Adam Barth  <abarth@webkit.org>

        [V8] DOMData is no longer needed
        https://bugs.webkit.org/show_bug.cgi?id=100313

        Reviewed by Eric Seidel.

        This class serves no purpose anymore and can be deleted.

        * WebCore.gypi:
        * bindings/v8/DOMData.cpp: Removed.
        * bindings/v8/DOMData.h: Removed.
        * bindings/v8/DOMDataStore.cpp:
        (WebCore::DOMDataStore::current):
        * bindings/v8/DOMDataStore.h:
        (WebCore):
        (DOMDataStore):
        * bindings/v8/SerializedScriptValue.cpp:
        (WebCore::neuterBinding):
        * bindings/v8/V8DOMMap.cpp:
        (WebCore::getDOMNodeMap):
        (WebCore::getActiveDOMNodeMap):
        (WebCore::getDOMObjectMap):
        (WebCore::getActiveDOMObjectMap):
        (WebCore::removeAllDOMObjects):
        (WebCore::visitActiveDOMNodes):
        (WebCore::visitDOMObjects):
        (WebCore::visitActiveDOMObjects):

2012-10-24  Kent Tamura  <tkent@chromium.org>

        Sort an Xcode project file.

        * WebCore.xcodeproj/project.pbxproj: Sorted.

2012-10-24  Adam Barth  <abarth@webkit.org>

        [V8] AbstractWeakReferenceMap is unnecessarily general and complex
        https://bugs.webkit.org/show_bug.cgi?id=100175

        Reviewed by Eric Seidel.

        Before this patch, AbstractWeakReferenceMap served two masters:

        1) DOM wrappers
        2) NPV8 function templates

        These two uses cases pushed AbstractWeakReferenceMap to be more general
        and complex that needed. This patch separates these two uses cases into
        two separate classes. V8NPTemplateMap is all of 40 lines of code. It's
        not worth complicating the DOM wrapper code path to share that tiny
        amount of code.

        The other thing this patch does is store a pointer to the DOM wrapper
        map as the weak callback context object. That means we no longer need
        to search through all the wrapper maps in order to find the map that
        contains this particular DOM wrapper.

        * WebCore.gypi:
        * bindings/v8/DOMData.cpp:
        * bindings/v8/DOMData.h:
        (DOMData):
        * bindings/v8/DOMDataStore.cpp:
            - Delete all these complicated weak callback functions. The weak
              callback functions are now an order of magnitude simpler and
              declared as private member functions on the wrapper map.
        * bindings/v8/DOMDataStore.h:
        (WebCore::DOMDataStore::domNodeMap):
        (WebCore::DOMDataStore::activeDomNodeMap):
        (DOMDataStore):
            - We now have a consistent type to use for all these wrapper maps.
              Both the hash map and the intrusive map derive from
              DOMWrapperMap (with a single template parameter).
        * bindings/v8/DOMWrapperMap.h: Added.
        (WebCore):
        (DOMWrapperVisitor):
            - The visitor is no longer an inner class. It's just a top-level
              class that does the same thing.
        (DOMWrapperMap):
            - The abstract interface for DOMWrapperMap has about half as many
              functions as the old AbstractWeakReferenceMap because the two use
              cases are disentangled.
        (WebCore::DOMWrapperMap::~DOMWrapperMap):
        (DOMWrapperHashMap):
            - This is a concrete instance of DOMWrapperMap that uses a hash map.
        (WebCore::DOMWrapperHashMap::DOMWrapperHashMap):
        (WebCore::DOMWrapperHashMap::remove):
        (WebCore::DOMWrapperHashMap::defaultWeakCallback):
            - Notice that the context parameter now points to the hashmap
              itself rather than to the native object. Now that we don't need
              to handle the NPAPI case, we can recover the native object from
              the wrapper using toNative. The assert in set() ensures that this
              always works.
        * bindings/v8/DOMWrapperWorld.h:
        * bindings/v8/IntrusiveDOMWrapperMap.h:
            - These classes are now simplified because they need to implement
              fewer functions.
        (WebCore::DOMNodeWrapperMap::weakCallback):
            - For this weak callback, we still use the native object as the
              context parameter. We could also recover the native object from
              the wrapper, which means this context parameter is available to
              do other work.
        * bindings/v8/ScopedDOMDataStore.cpp:
        (WebCore::ScopedDOMDataStore::ScopedDOMDataStore):
            - This code no longer needs to have knowledge of which weak
              callbacks these objects use.
        (WebCore::ScopedDOMDataStore::~ScopedDOMDataStore):
            - We need to clear the maps before deleting them because there are
              still JavaScript objects that have references to the map in their
              weak callback parameter. Previously, we handled this case because
              we would search all the wrapper maps and fail to find the wrapper.
        * bindings/v8/ScriptProfiler.cpp:
        (WebCore::ScriptProfiler::visitExternalArrays):
        * bindings/v8/StaticDOMDataStore.cpp:
            - This code no longer needs to have knowledge of which weak
              callback these maps use.
        * bindings/v8/StaticDOMDataStore.h:
        (StaticDOMDataStore):
        * bindings/v8/V8DOMMap.cpp:
        (WebCore::getDOMNodeMap):
        (WebCore::getActiveDOMNodeMap):
        (WebCore::removeAllDOMObjects):
            - Rather than using some complicated visitor pattern, we can now
              just call clear() directly on the maps to remove all the objects.
        (WebCore::visitActiveDOMNodes):
        (WebCore::visitDOMObjects):
        (WebCore::visitActiveDOMObjects):
        * bindings/v8/V8DOMMap.h:
        (WebCore):
            - Delete the old versions of these classes.
        (DOMDataStoreHandle):
            - Style nit: one-argument constructors should be marked explicit.
        * bindings/v8/V8DOMWrapper.cpp:
        (WebCore::V8DOMWrapper::domWrapperType):
            - I moved this logic into WrapperTypeInfo.h to avoid a circular
              header dependency.
        * bindings/v8/V8DOMWrapper.h:
        (WebCore::V8DOMWrapper::getCachedWrapper):
        * bindings/v8/V8GCController.cpp:
            - EnsureWeakDOMNodeVisitor is no longer used (or needed since we no
              longer clear the weak callbacks in V8GCController).
        * bindings/v8/V8NPObject.cpp:
        (V8NPTemplateMap):
            - staticTemplateMap is no longer an instance of WeakReferenceMap.
              Instead, this patch just implements the functionality we need
              here directly.
        (WebCore::V8NPTemplateMap::get):
        (WebCore::V8NPTemplateMap::set):
        (WebCore::V8NPTemplateMap::sharedInstance):
        (WebCore::V8NPTemplateMap::weakCallback):
        (WebCore::V8NPTemplateMap::dispose):
        (WebCore::npObjectGetProperty):
        (WebCore):
        (WebCore::staticNPObjectMap):
        (WebCore::weakNPObjectCallback):
            - DOMWrapperMap no longer exposes a "forget" function. Instead, we
              just use the more basic "remove" and "Dispose" operations to do
              the same thing. This is possible now because we no longer have
              "removeIfPossible" to support searching all the wrapper maps for
              the one that has the right wrapper.
        (WebCore::createV8ObjectForNPObject):
            - DOMWrapperMap No longer has a "contains" function. Instead, we
              use get, which actually makes this code more efficient because we
              only do one hash map lookup.
        (WebCore::forgetV8ObjectForNPObject):
            - The changes here are a combination of the two sorts of changes
              above.
        * bindings/v8/WrapperTypeInfo.h:
        (WebCore::toNative):
        (WebCore::toWrapperTypeInfo):
            - The patch moves these functions into this header to avoid a
              circular header dependency.

2012-10-24  Arnaud Renevier  <a.renevier@sisa.samsung.com>

        [cairo] unneeded FloatRect object creation in BitmapImage::draw
        https://bugs.webkit.org/show_bug.cgi?id=100298

        Reviewed by Martin Robinson.

        Do not copy FloatRect arguments src and dst to local variables.
        Instead, use src and dst directly.

        No new tests. No change in behavior.

        * platform/graphics/cairo/BitmapImageCairo.cpp:
        (WebCore::BitmapImage::draw):

2012-10-24  Seokju Kwon  <seokju.kwon@samsung.com>

        [SOUP] Provide logging for SocketStreamHandleSoup
        https://bugs.webkit.org/show_bug.cgi?id=100215

        Reviewed by Alexey Proskuryakov.

        Add logging to SocketStreamHandleSoup to facilitate debugging.

        * platform/network/soup/SocketStreamHandleSoup.cpp:
        (WebCore::SocketStreamHandle::SocketStreamHandle):
        (WebCore::SocketStreamHandle::~SocketStreamHandle):
        (WebCore::SocketStreamHandle::platformSend):
        (WebCore::SocketStreamHandle::platformClose):

2012-10-24  Nico Weber  <thakis@chromium.org>

        Pass on exif orientation from ImageSource when using the open-source image decoders
        https://bugs.webkit.org/show_bug.cgi?id=100164

        Reviewed by Eric Seidel.

        The orientation is honored always for image documents, and optionally
        for <img> elements if shouldRespectImageOrientation is set (off by
        default). However, the feature needs port-specific modifications to
        GraphicsContext (without this, webcore will use the rotated bounds but
        draw the image as if it hadn't be rotated, resulting in squished
        pixels), and most ports don't implement these yet -- so put
        turning this on for image documents behind a port-specific #ifdef.

        No observable behavior change. Once it's hooked up, it will be tested
        by fast/images/exif-orientation.html.

        * platform/graphics/ImageSource.cpp:
        (WebCore::ImageSource::size):
        (WebCore::ImageSource::frameSizeAtIndex):
        (WebCore::ImageSource::orientationAtIndex):
        * platform/graphics/chromium/DeferredImageDecoder.cpp:
        (WebCore::DeferredImageDecoder::orientation):
        (WebCore):
        * platform/graphics/chromium/DeferredImageDecoder.h:
        (DeferredImageDecoder):
        * platform/image-decoders/jpeg/JPEGImageDecoder.cpp:
        (WebCore::readImageOrientation):
        * rendering/RenderObject.cpp:
        (WebCore::RenderObject::shouldRespectImageOrientation):

2012-10-24  Beth Dakin  <bdakin@apple.com>

        https://bugs.webkit.org/show_bug.cgi?id=100169
        We should make TileCache tiles the size of the tile coverage rect 
        when we can't do fast scrolling
        -and-
        <rdar://problem/12505021>

        Reviewed by Simon Fraser.

        Some websites that don't do fast scrolling still scroll slower than 
        they do with tiled drawing disabled. 
        https://bugs.webkit.org/show_bug.cgi?id=99768 addressed some of this 
        performance problem, but there is still more ground to make up. This 
        patch addresses the remaining issue by making tiles the size of the 
        window when we can't do fast scrolling. 

        The constructor and create function no longer take a size parameter. 
        That's all fully controlled within TileCache now. m_tileSize is no 
        longer const.
        * platform/graphics/ca/mac/TileCache.h:

        Store the current default size as constants so that we can access it 
        in both the constructor and adjustTileSizeForCoverageRect().
        * platform/graphics/ca/mac/TileCache.mm:
        (WebCore::TileCache::TileCache):

        This new function will set m_tileSize to the size of the tile 
        coverage rect if the tile coverage is limited to the visible area. 
        Otherwise, the tiles are set to be the default size.
        (WebCore::TileCache::adjustTileSizeForCoverageRect):
        
        Call adjustTileSizeForCoverageRect().
        (WebCore::TileCache::revalidateTiles):

        No need to send in a size anymore.
        * platform/graphics/ca/mac/WebTileCacheLayer.h:
        (WebCore):

2012-10-24  David Barton  <dbarton@mathscribe.com>

        MathML tests trigger font cache assertions in debug bots
        https://bugs.webkit.org/show_bug.cgi?id=100268

        Reviewed by Eric Seidel.

        Add a FontCachePurgePreventer to fix this.

        Tested by existing tests.

        * rendering/mathml/RenderMathMLOperator.cpp:
        (WebCore::RenderMathMLOperator::updateFromElement):

2012-10-24  Tim Horton  <timothy_horton@apple.com>

        Update main frame scroll position immediately for programmatic scrolls
        https://bugs.webkit.org/show_bug.cgi?id=98074

        Reviewed by Simon Fraser.

        Immediately update the main frame scroll position after a programmatic scroll,
        so that performing a scrollBy or scrollTo will be instantly reflected in
        all of the scroll offset accessors.

        No new tests; this will be tested by many scrolling tests once WebKitTestRunner
        can use threaded scrolling.

        * page/scrolling/ScrollingCoordinator.cpp:
        (WebCore::ScrollingCoordinator::requestScrollPositionUpdate):

2012-10-24  Mihai Parparita  <mihaip@chromium.org>

        [Chromium] Allow pushState and related history APIs to be disabled per context
        https://bugs.webkit.org/show_bug.cgi?id=99780

        Reviewed by Adam Barth.

        Chrome Apps do not support the history API (or navigation in general).
        Since pushState is generally feature detected, it's cleanest to disable
        it via a V8 per-context feature, so that applications can have the
        appropriate fallback behavior (other history APIs are re-mapped to throw
        exceptions, since history.back() and the link are not feature detected).

        * dom/ContextFeatures.cpp:
        (WebCore::ContextFeatures::pushStateEnabled):
        (WebCore):
        * dom/ContextFeatures.h:
        * dom/Document.cpp:
        (WebCore::Document::enqueuePopstateEvent):
        * page/History.idl:

2012-10-24  Tommy Widenflycht  <tommyw@google.com>

        MediaStream API: Make sure all events are dispatched asynchronously
        https://bugs.webkit.org/show_bug.cgi?id=100286

        Reviewed by Adam Barth.

        This is necessary to safeguard against if the UA uses synchronous UA->WebKit calls,
        and the web application calls methods on the RTCPeerConnection in the event callbacks.

        Test: fast/mediastream/RTCPeerConnection-events.html
        Also tested by the chromium webrtc fuzz tests.

        * Modules/mediastream/RTCPeerConnection.cpp:
        (WebCore::RTCPeerConnection::RTCPeerConnection):
        (WebCore::RTCPeerConnection::negotiationNeeded):
        (WebCore::RTCPeerConnection::didGenerateIceCandidate):
        (WebCore::RTCPeerConnection::didAddRemoteStream):
        (WebCore::RTCPeerConnection::didRemoveRemoteStream):
        (WebCore::RTCPeerConnection::didAddRemoteDataChannel):
        (WebCore::RTCPeerConnection::changeReadyState):
        (WebCore::RTCPeerConnection::changeIceState):
        (WebCore):
        (WebCore::RTCPeerConnection::scheduleDispatchEvent):
        (WebCore::RTCPeerConnection::scheduledEventTimerFired):
        * Modules/mediastream/RTCPeerConnection.h:
        (RTCPeerConnection):

2012-10-24  Mark Pilgrim  <pilgrim@chromium.org>

        [Chromium] Remove screen-related functions from PlatformSupport
        https://bugs.webkit.org/show_bug.cgi?id=97474

        Reviewed by Adam Barth.

        Screen-related functions like screenHorizontalDPI that
        used to be on PlatformSupport are now accessed through a new
        PlatformPageClient attached to Widget in WebCore-land, which is
        implemented by ChromeClientImpl in WebKit-land, which proxies
        calls to WebWidgetClient, which is actually implemented in
        Chromium-land.

        * WebCore.gypi:
        * platform/Widget.h:
        * platform/chromium/PageClientChromium.h: Copied from Source/WebCore/platform/chromium/PlatformWidget.h.
        (PageClientChromium):
        * platform/chromium/PlatformScreenChromium.cpp:
        (WebCore::toPlatformPageClient):
        (WebCore):
        (WebCore::screenHorizontalDPI):
        (WebCore::screenVerticalDPI):
        (WebCore::screenDepth):
        (WebCore::screenDepthPerComponent):
        (WebCore::screenIsMonochrome):
        (WebCore::screenRect):
        (WebCore::screenAvailableRect):
        * platform/chromium/PlatformSupport.h:
        (PlatformSupport):

2012-10-24  Adam Barth  <abarth@webkit.org>

        [V8] WorkerContextExecutionProxy doesn't need to track events
        https://bugs.webkit.org/show_bug.cgi?id=100295

        Reviewed by Eric Seidel.

        This code was added when this code was originally upstreamed as part of
        the Chromium port. There doesn't appear to be any reason why
        WorkerContextExecutionProxy needs to keep a Vector of raw event
        pointers. Those points are likely to become dangling, making the rest
        of what this code does very sketchy.

        * bindings/v8/V8WorkerContextEventListener.cpp:
        (WebCore::V8WorkerContextEventListener::callListenerFunction):
        * bindings/v8/WorkerContextExecutionProxy.cpp:
        (WebCore::WorkerContextExecutionProxy::dispose):
        * bindings/v8/WorkerContextExecutionProxy.h:
        (WebCore::WorkerContextExecutionState::WorkerContextExecutionState):
        (WorkerContextExecutionProxy):

2012-10-24  Max Vujovic  <mvujovic@adobe.com>

        [CSS Shaders] The mesh should be specified using <column, row> order
        https://bugs.webkit.org/show_bug.cgi?id=96285

        Reviewed by Dean Jackson.

        Change StyleResolver and CSSComputedStyleDeclaration to handle the mesh parameters in
        column, row order.

        Test: css3/filters/custom/custom-filter-mesh-column-row-order.html

        * css/CSSComputedStyleDeclaration.cpp:
        (WebCore::CSSComputedStyleDeclaration::valueForFilter):
            Append the number of columns before the number of rows in the meshParameters
            CSSValueList.
        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::createCustomFilterOperation):
            Store the second mesh parameter in meshRows instead of meshColumns.

2012-10-24  Jae Hyun Park  <jae.park@company100.net>

        loaderRunLoop() should use synchronization instead of while loop
        https://bugs.webkit.org/show_bug.cgi?id=55402

        Reviewed by Alexey Proskuryakov.

        Originally, loaderRunLoop() sleeps until a thread has started and set
        the loaderRunLoopObject static variable. This patch uses
        ThreadCondition to synchronize instead of a while loop.

        No new tests (No behavior change).

        * platform/network/cf/LoaderRunLoopCF.cpp:
        (WebCore::runLoaderThread):
        (WebCore::loaderRunLoop):
        * platform/network/cf/LoaderRunLoopCF.h:
        (WebCore):

2012-10-24  Sailesh Agrawal  <sail@chromium.org>

        Incorrect keycodes for numpad /, -, +, .
        https://bugs.webkit.org/show_bug.cgi?id=99188

        Reviewed by Tony Chang.

        In r57951 we switched to mapping keys by character code.
        This regressed the numpad keys which no longer match the Windows virtual key codes.
        This CL fixes this by never mapping numpad keys by character code.

        Test: platform/mac/fast/events/numpad-keycode-mapping.html

        * platform/mac/PlatformEventFactoryMac.mm:
        (WebCore::windowsKeyCodeForKeyEvent):

2012-10-24  Simon Fraser  <simon.fraser@apple.com>

        Null-check the RenderView in ocument::windowScreenDidChange to fix a crash when saving PDFs
        https://bugs.webkit.org/show_bug.cgi?id=100141
        <rdar://problem/12559147>

        Reviewed by Tim Horton.

        For PDF documents the RenderView is null, so null-check it to avoid a crash
        when saving PDFs.

        * dom/Document.cpp:
        (WebCore::Document::windowScreenDidChange):

2012-10-24  Terry Anderson  <tdanderson@chromium.org>

        Handle two-finger tap gestures in the same way as long-press gestures
        https://bugs.webkit.org/show_bug.cgi?id=99947

        Reviewed by Adam Barth.

        Currently a long-press gesture is used to dispatch a context menu (for platforms 
        defining CONTEXT_MENUS) or to select text (for Android). Additionally, for platforms 
        defining TOUCH_ADJUSTMENT, gesture target fuzzing is performed on the location and 
        touch area of the long-press gesture.

        This CL will cause two-finger tap gestures to be handled in the same way as long-press 
        gestures. The location and touch area of a two-finger tap gesture will correspond to 
        the location and touch area of the first finger down; the location/area of the second 
        finger will be ignored.

        Test: touchadjustment/touch-links-two-finger-tap.html

        * page/EventHandler.cpp:
        (WebCore::EventHandler::handleGestureLongPress):
        (WebCore):
        (WebCore::EventHandler::handleGestureForTextSelectionOrContextMenu):
        (WebCore::EventHandler::handleGestureTwoFingerTap):
        (WebCore::EventHandler::adjustGesturePosition):
        * page/EventHandler.h:
        (EventHandler):

2012-10-24  Chris Fleizach  <cfleizach@apple.com>

        AX:When aria-label is used, the text under an element is still appearing as the AXTitle
        https://bugs.webkit.org/show_bug.cgi?id=98167

        Reviewed by Beth Dakin.

        According to WAI-ARIA text computation, the presence of aria-label and alternative text
        should override the visible text within an element.

        Test: platform/mac/accessibility/aria-label-overrides-visible-text.html

        * accessibility/mac/WebAccessibilityObjectWrapper.mm:
        (-[WebAccessibilityObjectWrapper accessibilityTitle]):

2012-10-24  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r132303 and r132312.
        http://trac.webkit.org/changeset/132303
        http://trac.webkit.org/changeset/132312
        https://bugs.webkit.org/show_bug.cgi?id=100287

        Triggering crashes on many popular websites (Requested by
        leviw|gardening on #webkit).

        * css/CSSGrammar.y.in:
        * css/CSSParser.cpp:
        (WebCore::CSSParser::detectAtToken):
        * css/CSSParser.h:
        * css/CSSPropertySourceData.h:
        * css/RuleSet.cpp:
        (WebCore::RuleData::RuleData):
        (WebCore::RuleSet::addRule):
        (WebCore::RuleSet::addRegionRule):
        (WebCore::RuleSet::addRulesFromSheet):
        (WebCore::RuleSet::addStyleRule):
        * css/RuleSet.h:
        (RuleData):
        (RuleSet):
        * css/StyleResolver.cpp:
        (WebCore::makeRuleSet):
        (WebCore::StyleResolver::appendAuthorStyleSheets):
        (WebCore::StyleResolver::matchScopedAuthorRules):
        (WebCore::StyleResolver::locateSharedStyle):
        * css/StyleResolver.h:
        (StyleResolver):
        * css/StyleRule.cpp:
        (WebCore::StyleRuleBase::reportMemoryUsage):
        (WebCore::StyleRuleBase::destroy):
        (WebCore::StyleRuleBase::copy):
        (WebCore::StyleRuleBase::createCSSOMWrapper):
        * css/StyleRule.h:
        * css/StyleScopeResolver.cpp:
        (WebCore::StyleScopeResolver::reportMemoryUsage):
        * css/StyleScopeResolver.h:
        (WebCore):
        (StyleScopeResolver):
        * css/StyleSheetContents.cpp:
        (WebCore::childRulesHaveFailedOrCanceledSubresources):

2012-10-24  Joshua Bell  <jsbell@chromium.org>

        IndexedDB: Cursor property value identities should be preserved
        https://bugs.webkit.org/show_bug.cgi?id=100051

        Reviewed by Tony Chang.

        Some W3C test submissions point out that subsequent accesses to cursor properties should
        yield the same value until the cursor advances. We handled this with custom binding code for
        IDBCursor.value but not IDBCursor.key or IDBCursor.primaryKey. The custom value code is
        being removed in webkit.org/b/100034 in favor of returning ScriptValue and the same fix can
        be applied to key/primaryKey.

        Test: storage/indexeddb/cursor-properties.html

        * Modules/indexeddb/IDBCursor.cpp: Compute/store/serve up ScriptValues instead of IDBKeys
        (WebCore::IDBCursor::key):
        (WebCore::IDBCursor::primaryKey):
        (WebCore::IDBCursor::setValueReady):
        * Modules/indexeddb/IDBCursor.h:
        (IDBCursor):
        (WebCore::IDBCursor::idbPrimaryKey): Expose this for callers that need access to the IDBKey
        * Modules/indexeddb/IDBCursor.idl:
        * Modules/indexeddb/IDBObjectStore.cpp: ... like this one.
        (WebCore):
        * Modules/indexeddb/IDBRequest.cpp:
        (WebCore::IDBRequest::dispatchEvent): Pass along script context, for the conversion.
        * bindings/v8/IDBBindingUtilities.cpp:
        (WebCore::idbKeyToScriptValue): New method for explicit conversion.
        (WebCore):
        * bindings/v8/IDBBindingUtilities.h:
        (WebCore):

2012-10-24  Ami Fischman  <fischman@chromium.org>

        call to setNeedsLayout during RenderVideo::paintReplaced
        https://bugs.webkit.org/show_bug.cgi?id=100265

        Reviewed by Eric Carlson.

        Removed unnecessary call and added new defensive guards to catch erroneous setNeedsLayout() calls
        during paints earlier (so the offending calls are in the emitted stacktrace).

        No new tests - new defensive checks are triggered by existing tests.

        * page/FrameView.cpp:
        (WebCore::FrameView::paintContents): forbid setNeedsLayout() during painting
        * rendering/RenderObject.cpp:
        (WebCore):
        (WebCore::RenderObject::SetLayoutNeededForbiddenScope::SetLayoutNeededForbiddenScope):
        (WebCore::RenderObject::SetLayoutNeededForbiddenScope::~SetLayoutNeededForbiddenScope):
        * rendering/RenderObject.h:
        (RenderObject):
        (SetLayoutNeededForbiddenScope): added helper class for forbidding setNeedsLayout() in a scope.
        * rendering/RenderVideo.cpp:
        (WebCore::RenderVideo::paintReplaced): drop the offending & unnecessary call to updatePlayer().

2012-10-24  Adam Barth  <abarth@webkit.org>

        [V8] ActiveDOMObjectEpilogueVisitor is unnecessary and can be deleted
        https://bugs.webkit.org/show_bug.cgi?id=100208

        Reviewed by Eric Seidel.

        Rather than clearing and re-establishing the weak callback for
        ActiveDOMObjects during every GC, this patch puts all the
        ActiveDOMObjects with pending activity into an object group with a live
        object, causing them not to be garbage collected.

        In addition to simplifying this code, this patch makes the patch in
        https://bugs.webkit.org/show_bug.cgi?id=100175 much easier because
        V8GCController no longer needs to know how to configure the weak
        callbacks for these objects.

        * bindings/v8/V8GCController.cpp:
        (WebCore::ActiveDOMObjectPrologueVisitor::ActiveDOMObjectPrologueVisitor):
        (ActiveDOMObjectPrologueVisitor):
        (WebCore::ActiveDOMObjectPrologueVisitor::visitDOMWrapper):
        (WebCore::V8GCController::majorGCPrologue):
        (WebCore::V8GCController::majorGCEpilogue):
        * bindings/v8/V8PerIsolateData.cpp:
        (WebCore::V8PerIsolateData::V8PerIsolateData):
        * bindings/v8/V8PerIsolateData.h:
        (WebCore::V8PerIsolateData::liveRoot):
        (V8PerIsolateData):

2012-10-24  Brady Eidson  <beidson@apple.com>

        Add a strategy for loader customization.
        https://bugs.webkit.org/show_bug.cgi?id=100278

        Reviewed by Alexey Proskuryakov.

        It's empty for now and does nothing, just like the goggles.

        * WebCore.gypi:
        * WebCore.vcproj/WebCore.vcproj:
        * WebCore.xcodeproj/project.pbxproj:
        * platform/PlatformStrategies.h:
        (WebCore::PlatformStrategies::loaderStrategy):
        (PlatformStrategies):
        (WebCore::PlatformStrategies::PlatformStrategies):

2012-10-24  Tony Chang  <tony@chromium.org>

        Setting width of a flexitem causes the adjacent flex item to be displayed poorly.
        https://bugs.webkit.org/show_bug.cgi?id=99925

        Reviewed by Ojan Vafai.

        Make sure that we always repaint when moving a child. This is similar to what RenderDeprecatedFlexibleBox does.

        Test: css3/flexbox/repaint-during-resize-no-flex.html

        * rendering/RenderFlexibleBox.cpp:
        (WebCore::RenderFlexibleBox::setFlowAwareLocationForChild): Move logic for repaining into the helper method
        for setting the location of a child.
        (WebCore::RenderFlexibleBox::layoutColumnReverse): Remove code for repaint since it's now in setFlowAwareLocationForChild.
        (WebCore::RenderFlexibleBox::adjustAlignmentForChild): Remove code for repaint since it's now in setFlowAwareLocationForChild.

2012-10-24  Simon Fraser  <simon.fraser@apple.com>

        Fix CALayer hiearchy when combining tiling with preserve-3d
        https://bugs.webkit.org/show_bug.cgi?id=100205

        Reviewed by Dean Jackson.

        When an element has "transform-style: preserve-3d", its GraphicsLayerCA has a
        m_structuralLayer which is a CATransformLayer. The primary CALayer which contains rendered
        content becomes a sublayer of the CATransformLayer. If the element has backface-visibility:hidden,
        it is the primary layer that is set to be single-sided.
        
        In r131940 we started to use TileCaches in place of CATiledLayer. TileCaches work via
        "customSublayers" returned from the PlatformCALayer, where the custom sublayer is 
        the tile cache container layer. However, the custom sublayers were being added as
        children of the structural (CATransformLayer) layer, not of the primary (CALayer) layer,
        thus they were not affected by the doubleSided property.
        
        This change cleans up the confusing code in GraphicsLayerCA::updateSublayerList()
        by maintaining two vectors of PlatformCALayers, one for sublayers of the structural
        layer, and one for sublayers of the primary layer. It adds custom sublayers to
        the latter list, so now the tile cache container layer becomes a sublayer of
        the primary layer, so is affected by that layer's doubleSided property.

        Test: compositing/tiling/backface-preserve-3d-tiled.html

        * platform/graphics/ca/GraphicsLayerCA.cpp:
        (WebCore::GraphicsLayerCA::updateSublayerList):

2012-10-23  Zhenyao Mo  <zmo@google.com>

        Update mozilla's CheckedInt.h to the latest version
        https://bugs.webkit.org/show_bug.cgi?id=100177

        Reviewed by Kenneth Russell.

        * html/canvas/CheckedInt.h: Sync with mozilla's copy with minumum modifications.
        (detail):
        (IsSupportedPass2):
        (IsSupported):
        (UnsignedType):
        (IsSigned):
        (TwiceBiggerType):
        (PositionOfSignBit):
        (MinValue):
        (MaxValue):
        (WebCore::detail::HasSignBit):
        (WebCore::detail::BinaryComplement):
        (WebCore::detail::IsInRange):
        (WebCore::detail::IsAddValid):
        (WebCore::detail::IsSubValid):
        (WebCore::detail::IsMulValid):
        (WebCore::detail::IsDivValid):
        (WebCore::detail::OppositeIfSignedImpl::run):
        (WebCore::detail::OppositeIfSigned):
        (WebCore):
        (CheckedInt):
        (WebCore::CheckedInt::CheckedInt):
        (WebCore::CheckedInt::value):
        (WebCore::CheckedInt::isValid):
        (WebCore::CheckedInt::operator -):
        (WebCore::CheckedInt::operator ==):
        (WebCore::CheckedInt::operator++):
        (WebCore::CheckedInt::operator--):
        (CastToCheckedIntImpl):
        (WebCore::detail::CastToCheckedIntImpl::run):
        (WebCore::castToCheckedInt):
        (WebCore::operator ==):
        * html/canvas/DataView.cpp: change valid() to isValid().
        (WebCore::DataView::create):
        * html/canvas/WebGLBuffer.cpp: Ditto.
        (WebCore::WebGLBuffer::associateBufferDataImpl):
        (WebCore::WebGLBuffer::associateBufferSubDataImpl):
        * html/canvas/WebGLRenderingContext.cpp: Ditto.
        (WebCore):
        (WebCore::WebGLRenderingContext::drawArrays):
        * platform/graphics/GraphicsContext3D.cpp: Ditto.
        (WebCore::GraphicsContext3D::computeImageSizeInBytes):

2012-10-24  Noam Rosenthal  <noam.rosenthal@nokia.com>

        [Qt-on-Mac] GraphicsSurfaces should not create a global IOSurface handle
        https://bugs.webkit.org/show_bug.cgi?id=89885

        Reviewed by Kenneth Rohde Christiansen.

        Use mach_port instead of global tokens for IOSurfaces.
        Global IOSurfaces are accessible from other processes using their handle, while mach_ports
        can only be shared directly via IPC.

        Tested by existing WebGL tests.

        * platform/graphics/surfaces/GraphicsSurfaceToken.h:
        (GraphicsSurfaceToken):
        * platform/graphics/surfaces/mac/GraphicsSurfaceMac.cpp:
        (WebCore::GraphicsSurfacePrivate::GraphicsSurfacePrivate):
        (WebCore::GraphicsSurfacePrivate::~GraphicsSurfacePrivate):

2012-10-24  Rick Byers  <rbyers@chromium.org>

        image-set doesn't round-trip properly with cssText
        https://bugs.webkit.org/show_bug.cgi?id=99725

        Reviewed by Beth Dakin.

        Fix serialization of -webkit-image-set rules to use the same format as
        is used for parsing.

        Test: fast/css/image-set-setting.html

        * css/CSSImageSetValue.cpp:
        (WebCore::CSSImageSetValue::customCssText):
        * css/CSSValueList.h:
        (WebCore::CSSValueList::item): Add const overload

2012-10-24  Jonathan Feldstein  <jfeldstein@rim.com>

        BlackBerry fix for webgl-depth-texture.html
        https://bugs.webkit.org/show_bug.cgi?id=100258

        Reviewed by Yong Li.

        Removed a platform specific define that is unnecessary.

        * platform/graphics/GraphicsContext3D.cpp:
        (WebCore::GraphicsContext3D::computeFormatAndTypeParameters):

2012-10-24  Nico Weber  <thakis@chromium.org>

        Honor image orientation in GraphicsContextSkia
        https://bugs.webkit.org/show_bug.cgi?id=100179

        Reviewed by Stephen White.

        Also fix a bug in ImageOrientation.h: Some of the values were
        switched. They now match the description in the exif spec at
        http://www.exif.org/Exif2-2.PDF page 18, and the notes at
        http://www.sno.phy.queensu.ca/~phil/exiftool/TagNames/EXIF.html and
        the picture at http://www.80sidea.com/archives/2316.

        They showed up correctly in Safari because the orientation transform
        was done after flipping Y. Let the flipping happen later. I verified
        that flipping transformation order and fixing the exif enum cancelled
        each other out, so this has no effect on the apple port.

        Not hooked up yet, so no observable difference.

        * platform/graphics/BitmapImage.h:
        * platform/graphics/ImageOrientation.h:
        (WebCore::ImageOrientation::usesWidthAsHeight):
        (WebCore::ImageOrientation::fromEXIFValue):
        * platform/graphics/cg/GraphicsContextCG.cpp:
        (WebCore::GraphicsContext::drawNativeImage):
        * platform/graphics/skia/ImageSkia.cpp:
        (WebCore::paintSkBitmap):
        (WebCore::BitmapImage::draw):
        (WebCore):

2012-10-24  Alexey Proskuryakov  <ap@apple.com>

        Fixed Windows path for SharedWorkerStrategy.h - it's in workers/, not platform/.

        * WebCore.vcproj/WebCore.vcproj:

2012-10-24  Chris Fleizach  <cfleizach@apple.com>

        AX: WebKit exposes abstract ARIA role range as AXSlider; should be generic AXGroup
        https://bugs.webkit.org/show_bug.cgi?id=100204

        Reviewed by Beth Dakin.

        Remove the "range" role as a valid ARIA role.

        Test: platform/mac/accessibility/aria-slider-value.html

        * accessibility/AccessibilityObject.cpp:
        (WebCore::createARIARoleMap):

2012-10-24  Florin Malita  <fmalita@chromium.org>

        [Chromium] SVG repaint issues
        https://bugs.webkit.org/show_bug.cgi?id=99874

        Reviewed by Levi Weintraub.

        RenderSVGRoot::paintReplaced() converts the container offsets to a relative transform,
        but in doing so it ends up accumulating subpixel rounding deltas twice: first for 
        adjustedPaintOffset and second in localToParentTransform(). If coordinates are on
        half-pixel boundaries, the 2x rounding delta yields a full pixel drift and we end up
        painting at the wrong location.

        This can be avoided by using localToBorderBoxTransform() directly, which (unlike
        localToParentTransform()) doesn't perform rounding.

        No new tests: existing pixel results cover this change after rebaseline.

        * rendering/svg/RenderSVGRoot.cpp:
        (WebCore::RenderSVGRoot::paintReplaced):

2012-10-24  Levi Weintraub  <leviw@chromium.org>

        Fixing the Chromium build after typo in r132367.

        * WebCore.gypi:

2012-10-24  Nico Weber  <thakis@chromium.org>

        [chromium] Respect image orientation in image dragging code
        https://bugs.webkit.org/show_bug.cgi?id=100200

        Reviewed by Tony Chang.

        Based on the corresponding code in DragImageMac.mm.  The image
        rotation code isn't hooked up yet, so no observable effect for now.

        * platform/chromium/DragImageChromiumSkia.cpp:
        (WebCore::createDragImageFromImage):

2012-10-24  Michael Saboff  <msaboff@apple.com>

        Code cleanup after r132165
        https://bugs.webkit.org/show_bug.cgi?id=100135

        Reviewed by Geoffrey Garen.

        Fixed up some unneccesary and inefficient constructs in MarkupTokenBase.h.

        Code clean up without functional changes, therefore no new tests.

        * xml/parser/MarkupTokenBase.h:
        (WebCore::MarkupTokenBase::beginEndTag): Changed argument to be const Vector<LChar, 32>&.
        (WebCore::MarkupTokenBase::appendToCharacter): Changed argument to be const Vector<LChar, 32>&.
        (WebCore::MarkupTokenBase::appendToName): Elimintated inline.
        (WebCore::MarkupTokenBase::name): Elimintated inline.
        (WebCore::MarkupTokenBase::nameString): Elimintated inline.

2012-10-24  Toni Barzic  <tbarzic@chromium.org>

        Crash when trying to write exception message to null console
        https://bugs.webkit.org/show_bug.cgi?id=99658

        Reviewed by Adam Barth.

        DOMWindow::console may return NULL, so we should do a NULL check before adding message to it.
        This may happen e.g. if a worker throws an exception just as the document is being replaced in the view.
        The exception task could be processes after current window in the frame changes, and console in the document window is nulled.

        Test: fast/workers/worker-exception-during-navigation.html

        * dom/Document.cpp:
        (WebCore::Document::addMessage):

2012-10-24  Cosmin Truta  <ctruta@rim.com>

        Incorrect conditional use of LogFTP
        https://bugs.webkit.org/show_bug.cgi?id=100260

        Reviewed by Alexey Proskuryakov.

        Use LogFTP if !LOG_DISABLED, to allow toggling ASSERTIONS_DISABLED_DEFAULT
        without breaking the build.

        * html/FTPDirectoryDocument.cpp:
        (WebCore::FTPDirectoryDocument::FTPDirectoryDocument):

2012-10-23  Alexey Proskuryakov  <ap@apple.com>

        Add a strategy for shared workers
        https://bugs.webkit.org/show_bug.cgi?id=100165

        Reviewed by Brady Eidson.

        Also a little bit of alphabetization.

        * WebCore.gypi:
        * WebCore.vcproj/WebCore.vcproj:
        * WebCore.xcodeproj/project.pbxproj:
        * platform/PlatformStrategies.h:
        * workers/SharedWorkerStrategy.h: Added.

2012-10-24  David Barton  <dbarton@mathscribe.com>

        [MathML] Timeouts on linux after r132264
        https://bugs.webkit.org/show_bug.cgi?id=100202

        Reviewed by Eric Seidel.

        When building a stretched operator, such as a large parenthesis or bracket, we need to
        check that the extension glyph's height is > 0, to avoid an infinite loop. The 0 height
        can occur if the glyph is missing on the host system.

        Tested by existing tests.

        * rendering/mathml/RenderMathMLOperator.cpp:
        (WebCore::RenderMathMLOperator::updateFromElement):

2012-10-24  Parth Patel  <parpatel@rim.com>

        [BlackBerry] Extending existing ThreadUnsafe singletons in webkit to
        Generic ThreadUnsafe Singleton
        https://bugs.webkit.org/show_bug.cgi?id=100145

        Reviewed by Rob Buis.

        Extending the singletons to generic singleton and changing
        getInstance() in IconDatabaseClientBlackBerry to instance()
        to match the generic singleton template.

        Reviewed Internally by Yong Li.

        Tests are not modified and added as there was no behavioural change.

        * platform/blackberry/SharedTimerBlackBerry.cpp:
        (SharedTimerBlackBerry):
        (WebCore):

2012-10-24  Ilya Tikhonovsky  <loislo@chromium.org>

        Web Inspector: NMI add instrumentation for ResourceBuffer. It gives us 10mb on gmail
        https://bugs.webkit.org/show_bug.cgi?id=100254

        Reviewed by Yury Semikhatsky.

        * loader/ResourceBuffer.cpp:
        (WebCore::ResourceBuffer::reportMemoryUsage):
        (WebCore):
        * loader/ResourceBuffer.h:
        (ResourceBuffer):

2012-10-24  Eric Carlson  <eric.carlson@apple.com>

        Allow ports to override text track rendering style
        https://bugs.webkit.org/show_bug.cgi?id=97800
        <rdar://problem/12044964>

        Unreviewed Build fix.
        
        CGFloat is already a float in a 32-bit build so narrowPrecisionToFloat() is unnecessary

        * page/CaptionUserPreferencesMac.mm:
        (WebCore::CaptionUserPreferencesMac::captionFontSizeScale):

2012-10-24  Eric Carlson  <eric.carlson@apple.com>

        Allow ports to override text track rendering style
        https://bugs.webkit.org/show_bug.cgi?id=97800
        <rdar://problem/12044964>

        Reviewed by Maciej Stachowiak.

        * WebCore.exp.in: Export new WebkitSystemInterface functions.
        * WebCore.xcodeproj/project.pbxproj: Add CaptionUserPreferences.h, CaptionUserPreferencesMac.mm,
            and CaptionUserPreferencesMac.h.

        * css/mediaControls.css: Rearrange the caption CSS so it is possible to style the cue window,
            background, and text independently.

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::HTMLMediaElement): Initialize m_disableCaptions with theme->userPrefersCaptions().
        (WebCore::HTMLMediaElement::attach): Register for caption preferences change callbacks.
        (WebCore::HTMLMediaElement::detach): Unregister for caption preferences change callbacks.
        (WebCore::HTMLMediaElement::userPrefersCaptions): Return theme->userPrefersCaptions().
        (WebCore::HTMLMediaElement::userIsInterestedInThisTrackKind): Consider userPrefersCaptions().
        (WebCore::HTMLMediaElement::setClosedCaptionsVisible): Move the code that marks all tracks as
            un-configured to markCaptionAndSubtitleTracksAsUnconfigured so it can be reused.
        (WebCore::HTMLMediaElement::captionPreferencesChanged): New, force a reevaluation of all text tracks.
        (WebCore::HTMLMediaElement::markCaptionAndSubtitleTracksAsUnconfigured): New, code moved from 
            setClosedCaptionsVisible
        * html/HTMLMediaElement.h: Inherit from CaptionPreferencesChangedListener.

        * html/shadow/MediaControlElements.cpp:
        (WebCore::MediaControlTextTrackContainerElement::updateSizes): Get rid of unnecessary member
            variable. Get caption font scale from theme instead of hard coding.
        * html/shadow/MediaControlElements.h:

        * html/track/TextTrack.cpp:
        (WebCore::TextTrack::TextTrack): Change attributes from String to AtomicString.
        (WebCore::TextTrack::isValidKindKeyword): Ditto.
        (WebCore::TextTrack::setKind): Ditto.
        (WebCore::TextTrack::setMode): Ditto.
        (WebCore::TextTrack::mode): Ditto.
        * html/track/TextTrack.h:
        (WebCore::TextTrack::create): Ditto.
        (WebCore::TextTrack::kind): Ditto.
        (WebCore::TextTrack::label): Ditto.
        (WebCore::TextTrack::setLabel): Ditto.
        (WebCore::TextTrack::language): Ditto.
        (WebCore::TextTrack::setLanguage): Ditto.

        * html/track/TextTrackCue.cpp:
        (WebCore::TextTrackCueBox::TextTrackCueBox): Set the shadow pseudo id.
        (WebCore::TextTrackCueBox::textTrackCueBoxShadowPseudoId): New, class method to return the 
            shadow pseudo id so it can be used elsewhere.
        (WebCore::TextTrackCueBox::shadowPseudoId): Call textTrackCueBoxShadowPseudoId.
        (WebCore::TextTrackCue::pastNodesShadowPseudoId): New, class method to return the 
            shadow pseudo id so it can be used elsewhere.
        (WebCore::TextTrackCue::futureNodesShadowPseudoId): Ditto.
        (WebCore::TextTrackCue::updateDisplayTree):
        * html/track/TextTrackCue.h:

        * page/CaptionUserPreferences.h: Added.
        * page/CaptionUserPreferencesMac.h: Added.
        * page/CaptionUserPreferencesMac.mm: Added.
        (WebCore::userCaptionPreferencesChangedNotificationCallback):
        (WebCore::CaptionUserPreferencesMac::CaptionUserPreferencesMac):
        (WebCore::CaptionUserPreferencesMac::~CaptionUserPreferencesMac):
        (WebCore::CaptionUserPreferencesMac::userHasCaptionPreferences): New, passthrough to WKSI function.
        (WebCore::CaptionUserPreferencesMac::userPrefersCaptions): Ditto.
        (WebCore::CaptionUserPreferencesMac::captionsWindowColor): Return Color with user's caption window color preference.
        (WebCore::CaptionUserPreferencesMac::captionsBackgroundColor): Return Color with user's caption 
            background color preference.
        (WebCore::CaptionUserPreferencesMac::captionsTextColor): Return Color with user's caption text color preference.
        (WebCore::CaptionUserPreferencesMac::captionsEdgeColorForTextColor): Return Color for text edge effect.
        (WebCore::CaptionUserPreferencesMac::cssPropertyWithTextEdgeColor): Return String with CSS to set a text-shadow
            or webkit-text-stroke property.
        (WebCore::CaptionUserPreferencesMac::cssColorProperty): Return a String with css to set a property 
            with a color value.
        (WebCore::CaptionUserPreferencesMac::captionsTextEdgeStyle): Return a String with css to style caption 
            text with the user's preferred text edge stye.
        (WebCore::CaptionUserPreferencesMac::captionsDefaultFont): Return a String with css to style caption
            text with the user's preferred font.
        (WebCore::CaptionUserPreferencesMac::captionsStyleSheetOverride): Return a String with css to style captions
            with the user's preferred style.
        (WebCore::CaptionUserPreferencesMac::captionFontSizeScale): Return the user's preferred caption font scale.
        (WebCore::CaptionUserPreferencesMac::captionPreferencesChanged): Notify listeners of caption preference change.
        (WebCore::CaptionUserPreferencesMac::registerForCaptionPreferencesChangedCallbacks): Add a caption preferences 
            changes listener.
        (WebCore::CaptionUserPreferencesMac::unregisterForCaptionPreferencesChangedCallbacks): Remove a caption preferences
            changes listener.
        (WebCore::CaptionUserPreferencesMac::updateCaptionStyleSheetOveride): New, if theme has a captions style sheet override,
            inject it into the current page group, otherwise remove injected sheet.

        * page/PageGroup.cpp:
        (WebCore::PageGroup::captionPreferences):
        (WebCore::PageGroup::registerForCaptionPreferencesChangedCallbacks): New, passthrough to platform specific function
            of the same name.
        (WebCore::PageGroup::unregisterForCaptionPreferencesChangedCallbacks): Ditto.
        (WebCore::PageGroup::userPrefersCaptions): Ditto.
        (WebCore::PageGroup::userHasCaptionPreferences): Ditto.
        (WebCore::PageGroup::captionFontSizeScale): Ditto.
        * page/PageGroup.h:

        * platform/mac/WebCoreSystemInterface.h: Updated.
        * platform/mac/WebCoreSystemInterface.mm: Ditto.

2012-10-24  Vsevolod Vlasov  <vsevik@chromium.org>

        Web Inspector: Introduce workspace provider as a content providing backend for project.
        https://bugs.webkit.org/show_bug.cgi?id=100244

        Reviewed by Pavel Feldman.

        Introduced WorkspaceProvider interface as a content providing backend for project.
        Added NetworkWorkspaceProvider as a network based (default) implementation.

        * WebCore.gypi:
        * WebCore.vcproj/WebCore.vcproj:
        * inspector/compile-front-end.py:
        * inspector/front-end/CompilerScriptMapping.js:
        (WebInspector.CompilerScriptMapping):
        * inspector/front-end/DebuggerScriptMapping.js:
        (WebInspector.DebuggerScriptMapping):
        * inspector/front-end/NetworkUISourceCodeProvider.js:
        (WebInspector.NetworkUISourceCodeProvider):
        (WebInspector.NetworkUISourceCodeProvider.prototype._parsedScriptSource):
        (WebInspector.NetworkUISourceCodeProvider.prototype._resourceAdded):
        (WebInspector.NetworkUISourceCodeProvider.prototype._addFile):
        * inspector/front-end/NetworkWorkspaceProvider.js: Added.
        (WebInspector.NetworkWorkspaceProvider):
        (WebInspector.NetworkWorkspaceProvider.prototype.requestFileContent):
        (WebInspector.NetworkWorkspaceProvider.prototype.setFileContent):
        (WebInspector.NetworkWorkspaceProvider.prototype.searchInFileContent):
        (WebInspector.NetworkWorkspaceProvider.prototype.addFile):
        (WebInspector.NetworkWorkspaceProvider.prototype.removeFile):
        (WebInspector.NetworkWorkspaceProvider.prototype.reset):
        * inspector/front-end/SASSSourceMapping.js:
        (WebInspector.SASSSourceMapping):
        (_bindUISourceCode):
        * inspector/front-end/ScriptSnippetModel.js:
        (WebInspector.ScriptSnippetModel):
        (WebInspector.ScriptSnippetModel.prototype._addScriptSnippet):
        * inspector/front-end/WebKit.qrc:
        * inspector/front-end/Workspace.js:
        (WebInspector.FileDescriptor):
        (WebInspector.WorkspaceProvider):
        (WebInspector.WorkspaceProvider.prototype.requestFileContent):
        (WebInspector.WorkspaceProvider.prototype.searchInFileContent):
        (WebInspector.WorkspaceProvider.prototype.addEventListener):
        (WebInspector.WorkspaceProvider.prototype.removeEventListener):
        (WebInspector.Project):
        (WebInspector.Project.prototype.reset):
        (WebInspector.Project.prototype._fileAdded):
        (WebInspector.Project.prototype._fileRemoved):
        (WebInspector.Project.prototype.requestFileContent):
        (WebInspector.Project.prototype.searchInFileContent):
        (WebInspector.Workspace):
        (WebInspector.Workspace.prototype.addProject):
        (WebInspector.Workspace.prototype.project):
        * inspector/front-end/inspector.html:
        * inspector/front-end/inspector.js:

2012-10-24  Nikita Vasilyev  <me@elv1s.ru>

        Web Inspector: Styles pane: Don't select whole value when I select just a part
        https://bugs.webkit.org/show_bug.cgi?id=100242

        Reviewed by Alexander Pavlov.

        * inspector/front-end/StylesSidebarPane.js:
        (WebInspector.StylePropertiesSection.prototype._handleEmptySpaceClick):
        (WebInspector.StylePropertyTreeElement.prototype):

2012-10-24  Vsevolod Vlasov  <vsevik@chromium.org>

        Web Inspector: UiSourceCode should rely on the workspace as a content provider.
        https://bugs.webkit.org/show_bug.cgi?id=100216

        Reviewed by Pavel Feldman.

        Workspace is now passed to UISourceCode to be used as a content provider.
        Content providers are now stored in the workspace/project.
        Next step would be to move content providers to workspace providers.

        * inspector/front-end/BreakpointManager.js:
        (WebInspector.BreakpointManager.breakpointStorageId):
        * inspector/front-end/UISourceCode.js:
        (WebInspector.UISourceCode):
        (WebInspector.UISourceCode.prototype.contentType):
        (WebInspector.UISourceCode.prototype.requestContent):
        (WebInspector.UISourceCode.prototype.requestOriginalContent):
        (WebInspector.UISourceCode.prototype._commitContent):
        (WebInspector.UISourceCode.prototype.searchInContent):
        * inspector/front-end/Workspace.js:
        (WebInspector.WorkspaceController.prototype._mainFrameNavigated):
        (WebInspector.Project):
        (WebInspector.Project.prototype.addUISourceCode):
        (WebInspector.Project.prototype.removeUISourceCode):
        (WebInspector.Project.prototype.uiSourceCodes):
        (WebInspector.Project.prototype.requestFileContent):
        (WebInspector.Project.prototype.searchInFileContent):
        (WebInspector.Workspace):
        (WebInspector.Workspace.prototype.addTemporaryUISourceCode):
        (WebInspector.Workspace.prototype.removeTemporaryUISourceCode):
        (WebInspector.Workspace.prototype.reset):

2012-10-24  Zeno Albisser  <zeno@webkit.org>

        Implement GraphicsSurface for Windows.
        https://bugs.webkit.org/show_bug.cgi?id=98147

        Reviewed by Kenneth Rohde Christiansen.

        * Target.pri:
            Include GraphicsSurfaceWin.cpp in SOURCES on Windows.
        * platform/graphics/surfaces/GraphicsSurface.h:
            Add typedef for PlatformGraphicsSurface on Windows.
        * platform/graphics/surfaces/GraphicsSurfaceToken.h:
            Add typedef for BufferHandle on Windows.
        (GraphicsSurfaceToken):
        * platform/graphics/surfaces/win/GraphicsSurfaceWin.cpp: Added.
            The GraphicsSurface implementation on Windows relies on the
            availability of ANGLE and the EGL_ANGLE_query_surface_pointer extension.
            For Qt this requirements are implicitly satisfied, when Qt is built
            on Windows and QT_CONFIG contains OpenGLES2.
            The GraphicsSurface then renders a given texture onto an offscreen
            pixel buffer surface, queries the surface pointer using the
            EGL_ANGLE_query_surface_pointer extension, and transmits the received
            surface pointer (share handle) over IPC.
            On the UIProcess side, the surface pointer can then be resolved
            using eglCreatePbufferFromClientBuffer.
        (WebCore):
        (WebCore::loadShader):
            Initialize the shaders needed for drawing onto the GraphicsSurface.
        (GraphicsSurfacePrivate):
        (WebCore::GraphicsSurfacePrivate::GraphicsSurfacePrivate):
            In case of the instance being on the WebProcess side,
            create an EGLContext that shares the texture objects with the provided
            share context. Also create two pixel buffer surfaces, one as front- and
            one as backbuffer.
            Query the surface pointers for the pixel buffer surfaces and initialize
            the GraphicsSurfaceToken that can be passed over IPC later.
        (WebCore::GraphicsSurfacePrivate::~GraphicsSurfacePrivate):
            Release all aquired resources and destroy the pixel buffer surfaces.
            Also close the EGL-Display connection.
        (WebCore::GraphicsSurfacePrivate::copyFromTexture):
            Make the belonging context current on the back buffer surface
            and use drawTexture() to draw the provided texture onto the GraphicsSurface.
        (WebCore::GraphicsSurfacePrivate::makeCurrent):
            Save the previously current context, then make the context belonging
            to the GraphicsSurface current.
        (WebCore::GraphicsSurfacePrivate::doneCurrent):
            Restore the context that was current before calling makeCurrent().
        (WebCore::GraphicsSurfacePrivate::swapBuffers):
            Swap front and back buffer surfaces and handles.
        (WebCore::GraphicsSurfacePrivate::token):
        (WebCore::GraphicsSurfacePrivate::frontBufferTextureID):
            This function is meant to be called from the UIProcess side.
            If no front buffer surface has been created before for the current
            front buffer handle, one will be created.
            Then eglBindTexImage will be used to actually bind the current
            front buffer surface to a texture as a source for drawing.
        (WebCore::GraphicsSurfacePrivate::initialFrontBufferShareHandle):
        (WebCore::GraphicsSurfacePrivate::frontBufferShareHandle):
        (WebCore::GraphicsSurfacePrivate::backBufferShareHandle):
        (WebCore::GraphicsSurfacePrivate::releaseFrontBufferTexture):
            Free the resources related to the front buffer surface.
            On the UIProcess side we never actually bind the back buffer.
        (WebCore::GraphicsSurfacePrivate::initializeShaderProgram):
            Initialize and link the shader programs necessary for drawing
            onto the GraphicsSurface.
        (WebCore::GraphicsSurfacePrivate::createSurfaceFromShareHandle):
            Creates a single pixel buffer surface from a share Handle.
            This function will be called on the UIProcess side,
            for the front buffer handle, whenever the buffers have been swapped.
        (WebCore::GraphicsSurfacePrivate::drawTexture):
            The WebProcess uses this function to draw a given
            texture onto the GraphicsSurface's back buffer.
        (WebCore::GraphicsSurface::platformExport):
        (WebCore::GraphicsSurface::platformGetTextureID):
        (WebCore::GraphicsSurface::platformCopyToGLTexture):
        (WebCore::GraphicsSurface::platformCopyFromTexture):
        (WebCore::GraphicsSurface::platformPaintToTextureMapper):
            Uses TextureMapperGL::drawTexture() to draw the front buffer texture
            to the TextureMapper on the UIProcess side.
        (WebCore::GraphicsSurface::platformFrontBuffer):
        (WebCore::GraphicsSurface::platformSwapBuffers):
        (WebCore::GraphicsSurface::platformCreate):
        (WebCore::GraphicsSurface::platformImport):
        (WebCore::GraphicsSurface::platformLock):
        (WebCore::GraphicsSurface::platformUnlock):
        (WebCore::GraphicsSurface::platformDestroy):

2012-09-27  Yury Semikhatsky  <yurys@chromium.org>

        Web Inspector: provide memory instrumentation for ListHashSet
        https://bugs.webkit.org/show_bug.cgi?id=97786

        Reviewed by Vsevolod Vlasov.

        Switched existing usages of addListHashSet to the generic instrumentation mechanism
        as it should work just just fine now that there is a memory instrumentation of
        ListHashSet.

        * dom/DocumentEventQueue.cpp:
        * dom/DocumentStyleSheetCollection.cpp:
        (WebCore::DocumentStyleSheetCollection::reportMemoryUsage):
        * loader/cache/CachedResourceLoader.cpp:
        (WebCore::CachedResourceLoader::reportMemoryUsage):

2012-10-24  Charles Wei  <charles.wei@torchmobile.com.cn>

        [BlackBerry] Credentials not re-used for a redirected request to the same domain
        https://bugs.webkit.org/show_bug.cgi?id=100193

        Reviewed by George Staikos.

        We should store the credentials in the redirection response handler, if the request is challenged.
        Because the redirect response suggests the authentication succeeds. 

        Test: http://browsertest01.rim.net/authbasic

        * platform/network/blackberry/NetworkJob.cpp:
        (WebCore::NetworkJob::handleRedirect):

2012-10-24  Alexander Pavlov  <apavlov@chromium.org>

        Web Inspector: Implement CSS reload upon related SASS resource saving
        https://bugs.webkit.org/show_bug.cgi?id=98024

        Reviewed by Vsevolod Vlasov.

        SASS-generated debug info in CSS is parsed to find out which SASS files contributed to this stylesheet.
        Upon SASS file save in the Sources panel, all affected external CSS stylesheets are reloaded to update
        the page styles (presuming that SASS is running in the "watch" mode during the development cycle).

        * English.lproj/localizedStrings.js:
        * inspector/front-end/SASSSourceMapping.js:
        (WebInspector.SASSSourceMapping):
        (WebInspector.SASSSourceMapping.prototype._fileSaveFinished.callback):
        (WebInspector.SASSSourceMapping.prototype._reloadCSS):
        (_bindUISourceCode):
        (_addCSSURLforSASSURL):
        * inspector/front-end/Settings.js:
        * inspector/front-end/SettingsScreen.js:
        (WebInspector.GenericSettingsTab):

2012-10-23  Yury Semikhatsky  <yurys@chromium.org>

        Memory instrumentation: don't count agent-specific front-ends separately
        https://bugs.webkit.org/show_bug.cgi?id=100087

        Reviewed by Alexander Pavlov.

        Pointers to domain-specific inspector front-end interfaces are reported as
        weak pointers instead of members to avoid double-counting.

        Test by comparing set of reported instrumented objects with the set of objects
        allocated by tcmalloc.

        * inspector/InspectorDOMStorageAgent.cpp:
        (WebCore::InspectorDOMStorageAgent::reportMemoryUsage):
        * inspector/InspectorDOMStorageResource.cpp:
        (WebCore::InspectorDOMStorageResource::reportMemoryUsage):
        * inspector/InspectorProfilerAgent.cpp:
        (WebCore::InspectorProfilerAgent::reportMemoryUsage):

2012-10-23  Christophe Dumez  <christophe.dumez@intel.com>

        Regression(r132303) Broke debug build when SHADOW_DOM is enabled but STYLE_SCOPED is disabled
        https://bugs.webkit.org/show_bug.cgi?id=100203

        Unreviewed Build fix.

        Fix compilation error in StyleResolver.h when SHADOW_DOM flag is
        set and STYLE_SCOPED is not.

        No new tests, no behavior change.

        * css/StyleResolver.h:
        (WebCore::StyleResolver::ensureScopeResolver):

2012-10-23  Andreas Kling  <kling@webkit.org>

        Remove specialized hash traits for GlyphPages.
        <http://webkit.org/b/100185>

        Reviewed by Dan Bernstein.

        Now that the default minimum table size has been lowered for all tables, there's no need
        for this specialization anymore.

        * platform/graphics/FontFallbackList.h:
        (FontFallbackList):

2012-10-23  Kent Tamura  <tkent@chromium.org>

        Multiple fields input UI: Don't use CSS properties for physical direction
        https://bugs.webkit.org/show_bug.cgi?id=100195

        Reviewed by Kentaro Hara.

        CSS declarations such as "padding: 0 0 0 1px;" "margin-left: 0.2em;" are
        not direction-neutral, and makes unexpected appearance in RTL. We should
        use -webkit-padding-start or -webkit-margin-start.

        No new tests. Covered by date-multiple-fields-appearance-l10n.html and
        month-multiple-fields-appearance-l10n.html

        * css/html.css:
        (input[type="date"]): Use padding:0 and -webkit-padding-start:1px;
        (input[type="datetime"]): Ditto.
        (input[type="datetime-local"]): Ditto.
        (input[type="month"]): Ditto.
        (input[type="time"]): Ditto.
        (input[type="week"]): Ditto.
        (input[type="week"]::-webkit-inner-spin-button):
        Use -webkit-margin-start. Also use an integral pixel size instead of
        avoid a fractional relative size to avoid subpixel layout rounding.

2012-10-23  Dan Bernstein  <mitz@apple.com>

        The font cache evicts inactive font data too aggressively when not under memory pressure
        https://bugs.webkit.org/show_bug.cgi?id=100194

        Reviewed by Sam Weinig.

        Increasing the number of inactive font data objects the cache may hold increases the hit
        rate, leading to improved page load performance. When memory pressure is detected,
        MemoryPressureHandler evicts all inactive objects, regardless of the limits we are
        increasing here.

        * platform/graphics/FontCache.cpp:
        (WebCore): Increased the maximum number of inactive font data objects in the cache from 50
        to 225, and the number of objects to evict once the limit is met from 20 to 25.

2012-10-23  Takashi Sakamoto  <tasak@google.com>

        [Shadow DOM] Needs @host rule for ShadowDOM styling
        https://bugs.webkit.org/show_bug.cgi?id=88606

        Reviewed by Hajime Morita.

        Implemented @host-@rules according to the shadow dom spec:
        http://dvcs.w3.org/hg/webcomponents/raw-file/tip/spec/shadow/index.html#host-at-rule
        The design doc is:
        https://docs.google.com/document/d/1P2yorchF8lci2sccr-mVSRf2dtvjKeiuyQWzCB2bEA8/edit

        Test: fast/dom/shadow/athost-atrules.html

        * css/CSSGrammar.y.in:
        Added rules for parsing @host @-rules.
        * css/CSSParser.cpp:
        (WebCore::CSSParser::detectAtToken):
        Added a new token "@host".
        (WebCore::CSSParser::createHostRule):
        Added a new method to create an @host @-rule, which is invoked from
        (WebCore):
        * css/CSSParser.h:
        Added a declaration of the above new method: createHostRule.
        * css/CSSPropertySourceData.h:
        Added HOST_RULE to enum Type.
        * css/RuleSet.cpp:
        (WebCore::RuleData::RuleData):
        Modified multiple bool arguments into one argument. Now it
        uses combinations of values from enum AddRuleFlags.
        (WebCore::RuleSet::addRule):
        (WebCore::RuleSet::addRegionRule):
        (WebCore::RuleSet::addStyleRule):
        Updated according to the RuleData's change.
        Modified to Invoke increaseSpecificity if the given rule is @host
        @-rule.
        (WebCore::RuleSet::addRulesFromSheet):
        Invoked addHostRule if the given rule is @host @-rule.
        * css/RuleSet.h:
        (RuleData):
        (WebCore::RuleData::increaseSpecificity):
        Added a new method to increase selector's specificity. This method is
        used to make @host @-rules' specificity larger than normal author
        rules' specificity.
        (RuleSet):
        * css/StyleResolver.cpp:
        (WebCore::makeRuleSet):
        (WebCore::StyleResolver::addHostRule):
        A wrapper method to invoke StyleScopeResolver::addHostRule. The method
        is used to make only StyleResolver know an implementation detail about
        class StyleScopeResolver.
        (WebCore::StyleResolver::appendAuthorStylesheets):
        Updated according to the RuleData's change.
        (WebCore::StyleResolver::styleSharingCandidateMatchesHostRules):
        A new method to find matched host rules when an element is given.
        This method invokes
        StyleScopeResolver::styleSharingCandidateMatchesHostRules to find
        matched host rules.
        (WebCore):
        (WebCore::StyleResolver::matchHostRules):
        A new method to find matched host rules when an element is given.
        This method invokes StyleScopeResolver::matchHostRules to find
        matched host rules.
        (WebCore::StyleResolver::matchScopedAuthorRules):
        Modified to invoke matchHostRules.
        (WebCore::StyleResolver::locateSharedStyle):
        Disable sibling style cache if the given element is a shadow host and
        any @host @-rules are applied to the element.
        * css/StyleResolver.h:
        (WebCore::StyleResolver::ensureScopeResolver):
        If no scopeResolver is created, create and return the instance.
        If created, just return the instance.
        (StyleResolver):
        * css/StyleRule.cpp:
        (WebCore::StyleRuleBase::reportMemoryUsage):
        (WebCore::StyleRuleBase::destroy):
        (WebCore::StyleRuleBase::copy):
        (WebCore::StyleRuleBase::createCSSOMWrapper):
        (WebCore::StyleRuleHost::StyleRuleHost):
        Implemented class StyleRuleHost. The class is almost the same as
        StyleRuleBlock except type.
        (WebCore):
        * css/StyleRule.h:
        (WebCore::StyleRuleBase::isHostRule):
        (StyleRuleHost):
        (WebCore::StyleRuleHost::create):
        (WebCore::StyleRuleHost::copy):
        (WebCore):
        * css/StyleScopeResolver.cpp:
        (WebCore::StyleScopeResolver::ensureAtHostRuleSetFor):
        A new method to create a new RuleSet for the given shadow root.
        (WebCore):
        (WebCore::StyleScopeResolver::atHostRuleSetFor):
        A new private inline method to obtain @host @-rules declared in
        the given shadow root.
        (WebCore::StyleScopeResolver::addHostRule):
        Added a new method to register @host @-rules with shadow roots.
        (WebCore::StyleScopeResolver::styleSharingCandidateMatchesHostRules):
        A new method to find whether any @host @-rules are applied to
        the given host element.
        (WebCore::StyleScopeResolver::matchHostRules):
        A new method to find matched rules for the given host element.
        (WebCore::StyleScopeResolver::reportMemoryUsage):
        * css/StyleScopeResolver.h:
        (WebCore):
        (StyleScopeResolver):
        * css/StyleSheetContents.cpp:
        (WebCore::childRulesHaveFailedOrCanceledSubresources):

2012-10-23  Andreas Kling  <kling@webkit.org>

        REGRESSION(r130643): ASSERTION FAILED: result.iterator != end() below PluginDatabase::add
        <http://webkit.org/b/100065>

        Reviewed by Anders Carlsson.

        Restore the pre-r130643 hash table size for PluginDatabase to prevent these easily reproducible
        collisions. This will need a proper fix at some point.

        * plugins/PluginDatabase.h:
        * plugins/PluginPackage.h:
        (PluginPackageHashTraits):

2012-10-23  Simon Fraser  <simon.fraser@apple.com>

        Allow tests to run with a tile cache, and optionally dump the tile cache via layerTreeAsText()
        https://bugs.webkit.org/show_bug.cgi?id=100159

        Reviewed by Tim Horton.

        Add a LAYER_TREE_INCLUDES_PAGE_TILE_CACHE flag for layerTreeAsText(), and plumb it
        through to GraphicsLayerCA, which dumps the TiledBacking tile coverage rect.

        Test: platform/mac/tiled-drawing/use-tiled-drawing.html

        * page/Frame.h:
        * platform/graphics/GraphicsLayer.cpp:
        (showGraphicsLayerTree):
        * platform/graphics/GraphicsLayer.h:
        (WebCore::GraphicsLayer::tiledBacking):
        * platform/graphics/TiledBacking.h:
        * platform/graphics/ca/GraphicsLayerCA.cpp:
        (WebCore::GraphicsLayerCA::tiledBacking):
        (WebCore::GraphicsLayerCA::dumpAdditionalProperties):
        * platform/graphics/ca/GraphicsLayerCA.h:
        (GraphicsLayerCA):
        * platform/graphics/ca/mac/TileCache.h:
        (WebCore::TileCache::tileCoverageRect):
        (TileCache):
        * platform/graphics/ca/mac/TileCache.mm:
        (WebCore::TileCache::computeTileCoverageRect):
        (WebCore::TileCache::revalidateTiles):
        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::layerTreeAsText):
        * testing/Internals.cpp:
        (WebCore::Internals::layerTreeAsText):
        * testing/Internals.h:
        * testing/Internals.idl:

2012-10-23  Simon Fraser  <simon.fraser@apple.com>

        Flush pending GraphicsLayer changes when reattaching compositing layers if necessary
        https://bugs.webkit.org/show_bug.cgi?id=100187
        <rdar://problem/12546770>

        Reviewed by Dan Bernstein.

        Fix a regression from r131940. That revision changed RenderLayerCompositor::flushPendingLayerChanges()
        to bail if the root layer is unattached, which indicates that we're in the page cache, or in a
        background tab. However, that dropped the layer flush on the floor, so that any subsequent changes
        to GraphicsLayerCAs would just pile up and never get flushed. This was most evident on pages
        that require frequent flushing, such as those running animated GIFs.
        
        Fix by setting a flag in flushPendingLayerChanges() if we're unattached. Consult the flag
        when re-attaching the root layer, and if it's set, flush the GraphicsLayers.
        
        Not testable because we can't test detaching and re-adding web views in DRT/WTR.

        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::RenderLayerCompositor): Initialize m_shouldFlushOnReattach to false.
        (WebCore::RenderLayerCompositor::flushPendingLayerChanges): If the root layer attachment
        is RootLayerUnattached, set the m_shouldFlushOnReattach flag before returning.
        (WebCore::RenderLayerCompositor::attachRootLayer): If m_shouldFlushOnReattach, flush the layers,
        saying that we're the flush root.
        * rendering/RenderLayerCompositor.h:
        (RenderLayerCompositor): Add m_shouldFlushOnReattach flag.

2012-10-23  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r132276.
        http://trac.webkit.org/changeset/132276
        https://bugs.webkit.org/show_bug.cgi?id=100189

        It broke the Qt-WK2 build intentionally (Requested by
        Ossy_night on #webkit).

        * page/Frame.h:
        * platform/graphics/GraphicsLayer.cpp:
        (showGraphicsLayerTree):
        * platform/graphics/GraphicsLayer.h:
        (WebCore::GraphicsLayer::tiledBacking):
        * platform/graphics/TiledBacking.h:
        * platform/graphics/ca/GraphicsLayerCA.cpp:
        (WebCore::GraphicsLayerCA::tiledBacking):
        (WebCore::GraphicsLayerCA::dumpAdditionalProperties):
        * platform/graphics/ca/GraphicsLayerCA.h:
        (GraphicsLayerCA):
        * platform/graphics/ca/mac/TileCache.h:
        * platform/graphics/ca/mac/TileCache.mm:
        (WebCore::TileCache::tileCoverageRect):
        (WebCore::TileCache::revalidateTiles):
        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::layerTreeAsText):
        * testing/Internals.cpp:
        (WebCore::Internals::layerTreeAsText):
        * testing/Internals.h:
        * testing/Internals.idl:

2012-10-23  Philip Rogers  <pdr@google.com>

        Add extra check for data() in PageSerializer.
        https://bugs.webkit.org/show_bug.cgi?id=99102

        Reviewed by Eric Seidel.

        The image returned from imageForRenderer() does not contain the raw SVG data
        so this patch adds a check for image->image()->data() before writing SVG
        in PageSerializer::addImageToResources.

        Covered by existing test WebPageNewSerializeTest.SVGImageDontCrash.

        * page/PageSerializer.cpp:
        (WebCore::PageSerializer::addImageToResources):

2012-10-23  Kent Tamura  <tkent@chromium.org>

        Move appendAsLDMLLiteral in LocaleWin.cpp to a common place
        https://bugs.webkit.org/show_bug.cgi?id=100129

        Reviewed by Kentaro Hara.

        We're going to use appendAsLDMLLiteral in other code, and it is
        related to DateTimeFormat class.  So we move it to DateTimeFormat
        class as quoteAndAppendLiteral.

        No new tests because of no behavior change.

        * platform/text/DateTimeFormat.cpp:
        (WebCore::DateTimeFormat::quoteAndAppendLiteral):
        Moved from LocaleWin.cpp
        * platform/text/DateTimeFormat.h:
        Declare StringBuilder by wtf/Forward.h. It also declares String.
        (DateTimeFormat): Declare quoteAndAppendLiteral.
        * platform/text/LocaleWin.cpp:
        (WebCore): Move appendLDMLLiteral to DateTimeFormat.
        (WebCore::convertWindowsDateFormatToLDML):
        Follow the moving.

2012-10-23  Kent Tamura  <tkent@chromium.org>

        REGRESSION(r131421): Text baseline is not aligned in some locales
        https://bugs.webkit.org/show_bug.cgi?id=100088

        Reviewed by Hajime Morita.

        Before this patch, the element with ::-webkit-datetime-edit had
        -webkit-align-items:center. It was incorrect at all because it
        ignores baselines of each of inner fields. We need to change it to
        -webkit-align-items:baseline, or stop using -webkit-flex.

        However -webkit-align-items:baseline doesn't work because a spin
        button element in the element doesn't have the baseline. If we
        specified -webkit-align-items:baseline, the spin button would
        shift up.

        So, we change the element structure for multiple fields input
        elements. Before this patch, the structure was:

        input
          |
           - ::-webkit-date-and-time-container (flex cotainer)
             |
             |- ::-webkit-datetime-edit (has flexibility in date-and-time-container, also this is a flex container)
             |  |- ::-webkit-datetime-edit-foo
             |  |      :
             |  |
             |  |- ::-webkit-date-time-edit-gap  (has flexibility in datetime-edit)
             |   - ::-webkit-inne-spin-button
              - ::-webkit-calendar-picker-indicator

        After the patch, the structure will be:

        input
          |
           - ::-webkit-date-and-time-container (flexible box)
             |
             |- ::-webkit-datetime-edit (has flexibility in date-and-time-container)
             |  |- ::-webkit-datetime-edit-foo
             |  |      :
             |  |
             |
             |- ::-webkit-inne-spin-button
              - ::-webkit-calendar-picker-indicator

        Because the spin button owner is date-and-time-container, we don't
        need to make the datetime-edit element a flex container.

        Also, we had rounding error by subpixel layout. To avoid it, we
        stop using fractional paddings.

        In order to implement this, we need to change the SpinButtonOwner
        interface provider from DateTimeEditElement to
        BaseMultipleFieldsDateAndTimeInputType.

        No new tests. Covered by month-multiple-fields-appearance-l10n.html.

        * css/html.css:
        (input::-webkit-datetime-edit): Stop making this a flex
        container. Inner fields in this use the single baseline.
        (input::-webkit-datetime-edit-ampm-field):
        Don't use fractional paddings to avoid rounding erros of subpixel
        layout.  Use integral margin instead to avoid overwrap of focus
        ring and background-color of the field.
        (input::-webkit-datetime-edit-day-field): Ditto.
        (input::-webkit-datetime-edit-hour-field): Ditto.
        (input::-webkit-datetime-edit-millisecond-field): Ditto.
        (input::-webkit-datetime-edit-minute-field): Ditto.
        (input::-webkit-datetime-edit-month-field): Ditto.
        (input::-webkit-datetime-edit-second-field): Ditto.
        (input::-webkit-datetime-edit-week-field): Ditto.
        (input::-webkit-datetime-edit-year-field): Ditto.
        (input::-webkit-date-and-time-container): Ditto.

        * html/BaseMultipleFieldsDateAndTimeInputType.h:
        (BaseMultipleFieldsDateAndTimeInputType): Overrides
        SpinButtonOwner functions, and add m_spinButtonElement.
        * html/BaseMultipleFieldsDateAndTimeInputType.cpp:
        (WebCore::BaseMultipleFieldsDateAndTimeInputType::focusAndSelectSpinButtonOwner):
        Just delegate to DateTimeEditElement::focusIfNoFocus.
        (WebCore::BaseMultipleFieldsDateAndTimeInputType::shouldSpinButtonRespondToMouseEvents):
        Moved from DateTimeEditElement::shouldSpinButtonRespondToMouseEvents.
        (WebCore::BaseMultipleFieldsDateAndTimeInputType::shouldSpinButtonRespondToWheelEvents):
        Moved from DateTimeEditElement::shouldSpinButtonRespondToWheelEvents.
        (WebCore::BaseMultipleFieldsDateAndTimeInputType::spinButtonStepDown):
        Delegate to DateTimeEditElement::stepDown.
        (WebCore::BaseMultipleFieldsDateAndTimeInputType::spinButtonStepUp):
        Delegate to DateTimeEditElement::stepUp.
        (WebCore::BaseMultipleFieldsDateAndTimeInputType::BaseMultipleFieldsDateAndTimeInputType):
        Initialize m_spinButtonElement.
        (WebCore::BaseMultipleFieldsDateAndTimeInputType::~BaseMultipleFieldsDateAndTimeInputType):
        Reset SpinButtonOwner for m_spinButtonElement like the old code of ~DateTimeEditElement.
        (WebCore::BaseMultipleFieldsDateAndTimeInputType::createShadowSubtree):
        Put a SpinButtonElement between the DateTimeEditElement and the PickerIndicatorElement.
        (WebCore::BaseMultipleFieldsDateAndTimeInputType::forwardEvent):
        Take care of SpinButtonElement.
        (WebCore::BaseMultipleFieldsDateAndTimeInputType::disabledAttributeChanged):
        Release capture of SpinButtonElement. This corresponds to the old
        code of DateTimeEditElement::updateUIState.
        (WebCore::BaseMultipleFieldsDateAndTimeInputType::readonlyAttributeChanged): Ditto.

        * html/TextFieldInputType.h:
        Make SpinButtonElement::SpinButtonOwner protected to allow overriding.

        * html/shadow/DateTimeEditElement.h:
        (DateTimeEditElement): Remove SpniButtonOwner implementation,
        m_spinButton, and rename some functions.
        * html/shadow/DateTimeEditElement.cpp:
        (WebCore::DateTimeEditElement::DateTimeEditElement):
        Remove m_spinButton.
        (WebCore::DateTimeEditElement::~DateTimeEditElement): Ditto.
        (WebCore::DateTimeEditElement::focusIfNoFocus):
        Renamed from focusAndSelectSpinButtonOwner. This is called
        BaseMultipleFieldsDateAndTimeInputType::focusAndSelectSpinButtonOwner.
        (WebCore::DateTimeEditElement::layout):
        Remove creation code for -webkit-datetime-edit-gap and SpinButtonElement.
        (WebCore::DateTimeEditElement::defaultEventHandler):
        Move the code for m_spinButton to
        BaseMultipleFieldsDateAndTimeInputType::forwardEvent.
        (WebCore::DateTimeEditElement::hasFocusedField): A helper for
        BaseMultipleFieldsDateAndTimeInputType::shouldSpinButtonRespondToWheelEvents.
        (WebCore::DateTimeEditElement::stepDown): A helper for
        BaseMultipleFieldsDateAndTimeInputType::spinButtonStepDown.
        (WebCore::DateTimeEditElement::stepUp): A helper for
        BaseMultipleFieldsDateAndTimeInputType::spinButtonStepUp.
        (WebCore::DateTimeEditElement::updateUIState): Move the code to
        BaseMultipleFieldsDateAndTimeInputType::disabledAttributeChanged
        and readonlyAttributeChanged.

2012-10-23  Andreas Kling  <kling@webkit.org>

        Shrink immutable ElementAttributeData and StylePropertySet by one pointer each.
        <http://webkit.org/b/100123>

        Reviewed by Anders Carlsson.

        Remove one pointer of unintentional padding in the immutable versions of these objects.
        583kB progression on Membuster3.

        * css/StylePropertySet.cpp:
        (WebCore::immutableStylePropertySetSize):
        * dom/ElementAttributeData.cpp:
        (WebCore::immutableElementAttributeDataSize):

2012-10-23  Nate Chapin  <japhet@chromium.org>

        Crash in WebCore::SubresourceLoader::willSendRequest.
        https://bugs.webkit.org/show_bug.cgi?id=100147

        Reviewed by Abhishek Arya.

        No new tests. There is a test case that should cover this, but it doesn't
        work correctly on many platforms due to its use of testRunner.addURLToRedirect().
        See http/tests/loading/cross-origin-XHR-willLoadRequest.html.
        Tested manually on http://www.nick.co.uk/shows/spongebob

        * loader/SubresourceLoader.cpp:
        (WebCore::SubresourceLoader::willSendRequest):

2012-10-23  Martin Robinson  <mrobinson@igalia.com>

        [GTK][Soup] Implement the default authentication dialog via WebCoreSupport
        https://bugs.webkit.org/show_bug.cgi?id=99351

        Reviewed by Carlos Garcia Campos.

        Instead of connecting to the SoupSession::authenticate signal in the API layer
        via a SoupSessionFeature, route the message through the typical WebCore authentication
        mechanism. This is a step on the path to having full-blown support for authentication
        in the API allowing for custom authentication dialogs and behavior in clients.

        No new tests. This should not change behavior.

        * GNUmakefile.list.am: Add the new implementation file for the AuthenticationChallenge.
        * loader/ResourceLoader.cpp:
        (WebCore::ResourceLoader::didReceiveAuthenticationChallenge): Include GTK+ here as well.
        * platform/gtk/GtkAuthenticationDialog.cpp: Instead of carrying a raw pointer to a SoupAuth
        carry a GRefPtr which will allow the dialog to be used even after the AuthenticationChallenge
        is destroyed.
        * platform/gtk/GtkAuthenticationDialog.h: ditto.
        * platform/network/ResourceHandle.h: Add a didReceiveAuthenticationChallenge method.
        * platform/network/ResourceHandleInternal.h:
        (ResourceHandleInternal): Remove the getter for the initiating page ID.
        * platform/network/soup/AuthenticationChallenge.h: Added an implementation of AuthenticationChallenge
        that takes a bit of data from the handle including SoupMessage, SoupAuth, and SoupSession.
        * platform/network/soup/AuthenticationChallengeSoup.cpp: Added. Ditto.
        * platform/network/soup/ResourceError.h:
        (ResourceError): Added a factory for authentication errors.
        * platform/network/soup/ResourceErrorSoup.cpp: Ditto.
        * platform/network/soup/ResourceHandleSoup.cpp:
        (WebCore::setSoupRequestInitiaingPageID): Just get the page directly from the NetworkingContext.
        (WebCore::createSoupMessageForHandleAndRequest): Always set the "handle" data on the message.
        It's always used now.
        (WebCore::ResourceHandle::start): Get the initiating page ID directly from the NetworkingContext.
        (WebCore::ResourceHandle::didReceiveAuthenticationChallenge): Added this method which routes
        the authentication challenge to the client.
        (WebCore::ResourceHandle::receivedRequestToContinueWithoutCredential): Added a stub for this method.
        (WebCore::ResourceHandle::loadResourceSynchronously): Don't pass the session to the loader.
        (WebCore::authenicateCallback): Added.
        (WebCore::ResourceHandle::defaultSession): Connect the authenticate callback.

2012-10-23  Adam Barth  <abarth@webkit.org>

        [V8] Simplify GCEpilogueVisitor along the same lines as GCPrologueVisitor
        https://bugs.webkit.org/show_bug.cgi?id=100157

        Reviewed by Eric Seidel.

        This patch removes the traits template parameter from GCEpilogueVisitor
        and makes it mirror GCPrologueVisitor again.

        * bindings/v8/V8GCController.cpp:
        (WebCore):
        (ActiveDOMObjectEpilogueVisitor):
        (WebCore::ActiveDOMObjectEpilogueVisitor::ActiveDOMObjectEpilogueVisitor):
        (WebCore::ActiveDOMObjectEpilogueVisitor::visitDOMWrapper):
        (WebCore::V8GCController::majorGCEpilogue):

2012-10-23  Varun Jain  <varunjain@chromium.org>

        Context menu generated from touch gestures on textareas has
        context of the cursor position instead of the position where the event occurs.
        https://bugs.webkit.org/show_bug.cgi?id=99520

        Reviewed by Kenneth Rohde Christiansen.

        Send a synthetic mouse down event for context menu-summoning-gesture events so
        that textareas can correctly set cursors before receiving the context menu event.

        Test: fast/events/touch/gesture/right-click-gestures-set-cursor-at-correct-position.html

        * page/EventHandler.cpp:
        (WebCore::EventHandler::handleGestureEvent):
        (WebCore::EventHandler::handleGestureTwoFingerTap):
        (WebCore):
        (WebCore::EventHandler::sendContextMenuEventForGesture):
        * page/EventHandler.h:
        (EventHandler):

2012-10-23  Andy Estes  <aestes@apple.com>

        [WebKit2 API] Add properties to get textRects from a WKDOMRange or WKDOMNode
        https://bugs.webkit.org/show_bug.cgi?id=100162

        Reviewed by Sam Weinig.

        * WebCore.exp.in: Exported symbols needed by WebKit2.
        * bindings/objc/DOM.mm:
        (-[DOMNode textRects]): Moved some logic into Node::textRects()
        (everything but the call to updateLayoutIgnorePendingStylesheets()).
        * dom/Node.cpp:
        (WebCore::Node::textRects):
        * dom/Node.h:

2012-10-23  Adam Barth  <abarth@webkit.org>

        [V8] Remove unused function from DOM wrapper visitor
        https://bugs.webkit.org/show_bug.cgi?id=100163

        Reviewed by Eric Seidel.

        No one overrides these virtual functions. They were added in
        http://trac.webkit.org/changeset/73491, but we don't use them in the GC
        controller anymore.

        * bindings/v8/V8DOMMap.h:
        (WebCore::WeakReferenceMap::visit):

2012-10-23  Aaron Colwell  <acolwell@chromium.org>

        Clear m_mediaSource reference when the MediaSource is closed
        https://bugs.webkit.org/show_bug.cgi?id=100047

        Reviewed by Eric Carlson.

        The m_mediaSource object shouldn't be accessed after the object
        transitions to closed so this change simply clears the reference
        when that transition happens.

        No new tests because the change isn't visible to JavaScript.

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::loadResource): Removed a closed transition that is actually dead code.
        (WebCore::HTMLMediaElement::setSourceState): Clear the m_mediaSource reference on closed transition.

2012-10-23  Simon Fraser  <simon.fraser@apple.com>

        Allow tests to run with a tile cache, and optionally dump the tile cache via layerTreeAsText()
        https://bugs.webkit.org/show_bug.cgi?id=100159

        Reviewed by Tim Horton.

        Add a LAYER_TREE_INCLUDES_PAGE_TILE_CACHE flag for layerTreeAsText(), and plumb it
        through to GraphicsLayerCA, which dumps the TiledBacking tile coverage rect.

        Test: platform/mac/tiled-drawing/use-tiled-drawing.html

        * page/Frame.h:
        * platform/graphics/GraphicsLayer.cpp:
        (showGraphicsLayerTree):
        * platform/graphics/GraphicsLayer.h:
        (WebCore::GraphicsLayer::tiledBacking):
        * platform/graphics/TiledBacking.h:
        * platform/graphics/ca/GraphicsLayerCA.cpp:
        (WebCore::GraphicsLayerCA::tiledBacking):
        (WebCore::GraphicsLayerCA::dumpAdditionalProperties):
        * platform/graphics/ca/GraphicsLayerCA.h:
        (GraphicsLayerCA):
        * platform/graphics/ca/mac/TileCache.h:
        (WebCore::TileCache::tileCoverageRect):
        (TileCache):
        * platform/graphics/ca/mac/TileCache.mm:
        (WebCore::TileCache::computeTileCoverageRect):
        (WebCore::TileCache::revalidateTiles):
        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::layerTreeAsText):
        * testing/Internals.cpp:
        (WebCore::Internals::layerTreeAsText):
        * testing/Internals.h:
        * testing/Internals.idl:

2012-10-23  No'am Rosenthal  <noam.rosenthal@nokia.com>

        Coordinated Graphics: Enable threaded/IPC animations
        https://bugs.webkit.org/show_bug.cgi?id=93146

        Reviewed by Kenneth Rohde Christiansen.

        Add enablers to TextureMapper and GraphicsLayerAnimation so that they could be used
        across processes with IPC. Added some public accessors to GraphicsLayerAnimation,
        and allowed a GraphicsLayerTextureMapper to receive a full list of animations.

        Covered by existing animation and compositing tests.

        * platform/graphics/GraphicsLayerAnimation.cpp:
        (WebCore::GraphicsLayerAnimation::GraphicsLayerAnimation):
            Initialize the animation with the startTime instead of the offset.

        (WebCore::GraphicsLayerAnimations::getActiveAnimations):
        * platform/graphics/GraphicsLayerAnimation.h:
        (WebCore::GraphicsLayerAnimation::setState):
            Allow setting the pause time as well.

        (WebCore::GraphicsLayerAnimation::boxSize):
        (WebCore::GraphicsLayerAnimation::startTime):
        (WebCore::GraphicsLayerAnimation::pauseTime):
        (WebCore::GraphicsLayerAnimation::animation):
        (WebCore::GraphicsLayerAnimation::keyframes):
        (WebCore::GraphicsLayerAnimation::listsMatch):
        (WebCore::GraphicsLayerAnimations::size):
        (WebCore::GraphicsLayerAnimations::animations):
            Add public accessors to GraphicsLayerAnimation properties.

        (GraphicsLayerAnimation):
        (GraphicsLayerAnimations):
        * platform/graphics/texmap/GraphicsLayerTextureMapper.cpp:
        (WebCore::GraphicsLayerTextureMapper::addAnimation):
        (WebCore::GraphicsLayerTextureMapper::setAnimations):
            Allow replacing the entire list of animations.

        (WebCore):
        * platform/graphics/texmap/GraphicsLayerTextureMapper.h:
        (GraphicsLayerTextureMapper):
        * platform/graphics/texmap/TextureMapperLayer.cpp:
        (WebCore::TextureMapperLayer::applyAnimationsRecursively):
        (WebCore):
        * platform/graphics/texmap/TextureMapperLayer.h:
        (TextureMapperLayer):

2012-10-23  Chris Rogers  <crogers@google.com>

        Change setTargetValueAtTime() to setTargetAtTime()
        https://bugs.webkit.org/show_bug.cgi?id=100153

        Reviewed by Adam Barth.

        The AudioParam method name has changed due to Web Audio API spec review.
        Keep legacy support for the old name.

        Test: webaudio/audioparam-setTargetAtTime.html

        * Modules/webaudio/AudioParam.h:
        (WebCore::AudioParam::setTargetAtTime):
        * Modules/webaudio/AudioParam.idl:
        * Modules/webaudio/AudioParamTimeline.cpp:
        (WebCore::AudioParamTimeline::setTargetAtTime):
        (WebCore::AudioParamTimeline::valuesForTimeRangeImpl):
        * Modules/webaudio/AudioParamTimeline.h:
        (AudioParamTimeline):

2012-10-23  Benjamin Poulain  <benjamin@webkit.org>

        [Mac] Remove extraneous conversion to String->NSString
        https://bugs.webkit.org/show_bug.cgi?id=100044

        Reviewed by Darin Adler.

        Improve some unfortunate use of String->NSString.

        * accessibility/mac/AXObjectCacheMac.mm:
        (WebCore::AXObjectCache::postPlatformNotification): The variable macNotification is ultimately
        needed as NSString, and all its value are or can be NSString.
        Convert the last 3 char* values to NSString literal and use NSString* all the way.

        * loader/mac/LoaderNSURLExtras.h:
        * loader/mac/LoaderNSURLExtras.mm:
        (suggestedFilenameWithMIMEType):
        We converted the String to NSString to pass to suggestedFilenameWithMIMEType. There is no need
        for the string to be a NSSTring there, we can leave it in its original type.

        The case checking for a nil MIMEType was dead code because the implicit conversion never returns nil.

        * platform/mac/DragImageMac.mm:
        (WebCore::createDragImageForLink):
        Use String's nsStringNilIfEmpty().

        * platform/mac/HTMLConverter.mm:
        (-[WebHTMLConverter _addAttachmentForElement:URL:needsParagraph:usePlaceholder:]):
        Fix the coding style. Do the conversion to NSString only when needed.

2012-10-23  Roger Fong  <roger_fong@apple.com>

        [Win] Popup menus positioning needs to take multiple monitors into account.
        https://bugs.webkit.org/show_bug.cgi?id=100158

        Reviewed by Timothy Horton.

        Add screen.x() to repositioning check to account for position of current monitor.

        * platform/win/PopupMenuWin.cpp:
        (WebCore::PopupMenuWin::calculatePositionAndSize):

2012-10-23  Huang Dongsung  <luxtella@company100.net>

        [CSS Shaders] Set FilterOperations on GraphicsLayer after the program of CSS Shaders is loaded.
        https://bugs.webkit.org/show_bug.cgi?id=99908

        Reviewed by Dean Jackson.

        CSS Shaders can not render anything until the program is loaded. If there is
        partial loaded shaders program, whole FilterOperations chain can not render
        anything. It occurs a flash. So We have to wait until the program is loaded, to
        prevent a flash as RenderLayerBacking::updateImageContents() waits until an
        image is fully loaded.

        No new tests, CSS Shaders on Accelerated Compositing are not activated yet.

        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::updateFilters):

2012-10-23  Elliott Sprehn  <esprehn@chromium.org>

        Generated should not be supported for things with a shadow
        https://bugs.webkit.org/show_bug.cgi?id=98836

        Reviewed by Dimitri Glazkov.

        As far as CSS is concerned inputs and things with shadow content inside
        shouldn't support pseudo elements like :before, :after or :first-letter.
        Neither Gecko or Presto supports it, and we only accidentally supported
        it.

        Until the spec tells us what to do we should disable support. This is
        also neccesary because the new generated content implementation doesn't
        support shadows.

        Test: fast/forms/pseudo-elements.html

        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::updateFirstLetter):
        * rendering/RenderListBox.h: Added missing canHaveGeneratedChildren() that returns false.
        * rendering/RenderObjectChildList.cpp:
        (WebCore::RenderObjectChildList::updateBeforeAfterContent):

2012-10-23  Huang Dongsung  <luxtella@company100.net>

        [CSS Shaders] Implement overlay, color-dodge, color-burn, hard-light, soft-light blend modes.
        https://bugs.webkit.org/show_bug.cgi?id=98504

        Reviewed by Dean Jackson.

        Add expressions for the aforementioned blend modes. The expressions are lifted
        directly from the CSS Compositing and Blending spec [1]. WebKit adds these
        blending expressions to the author's shader.

        [1]: https://dvcs.w3.org/hg/FXTF/rawfile/tip/compositing/index.html#blendingnormal

        Test: css3/filters/custom/custom-filter-blend-modes.html

        * platform/graphics/filters/CustomFilterValidatedProgram.cpp:
        (WebCore::CustomFilterValidatedProgram::rewriteMixFragmentShader):
        (WebCore::CustomFilterValidatedProgram::blendFunctionString):

2012-10-23  Huang Dongsung  <luxtella@company100.net>

        [CSS Shaders] Implement all composite operators except destination and lighter.
        https://bugs.webkit.org/show_bug.cgi?id=97859

        Reviewed by Dean Jackson.

        Add expressions for all composite operators except destination and
        lighter. The expressions are lifted directly from the CSS Compositing
        and Blending spec [1]. WebKit adds these compositing expressions to the
        author's shader.

        [1]: https://dvcs.w3.org/hg/FXTF/rawfile/tip/compositing/index.html#advancedcompositing

        Test: css3/filters/custom/custom-filter-composite-operators.html

        * platform/graphics/filters/CustomFilterCompiledProgram.cpp:
        (WebCore::CustomFilterCompiledProgram::initializeParameterLocations):
            Remove ASSERTION checking if glGetUniformLocation returns negative,
            because ASSERTION can fail with clear and copy composite operations.
            Clear and copy composite operations do not need "css_u_texture"
            representing the DOM element texture. If the driver compiler is
            smart, "css_u_texture" is not regarded as an active uniform, so
            glGetuniformLocation returns -1. glGetAttribLocation ditto.
        * platform/graphics/filters/CustomFilterValidatedProgram.cpp:
        (WebCore::CustomFilterValidatedProgram::compiledProgram):
            Move the above ASSERTION in CustomFilterCompiledProgram to here.
            ASSERTION checks if m_samplerLocation is not -1 when the author
            shader needs an input texture.
        (WebCore::CustomFilterValidatedProgram::needsInputTexture):
        (WebCore):
        (WebCore::CustomFilterValidatedProgram::compositeFunctionString):
        * platform/graphics/filters/CustomFilterValidatedProgram.h:
        (CustomFilterValidatedProgram):

2012-10-23  Max Vujovic  <mvujovic@adobe.com>

        [CSS Shaders] Changing the blend mode in CSS doesn't update the custom filter rendering
        https://bugs.webkit.org/show_bug.cgi?id=99887

        Reviewed by Dirk Schulze.

        Before this patch, WebKit would not recompute an element's style when just its custom filter
        blend mode changed.

        For example, suppose an element initially has the style:
        -webkit-filter: custom(none mix(url(shader.fs) multiply source-atop));

        Then, we change the blend mode from "multiply" to "normal":
        -webkit-filter: custom(none mix(url(shader.fs) normal source-atop));

        WebKit now detects this change and recomputes the style.

        CustomFilterProgram now has an equals operator that considers the program type and the mix
        settings. The mix settings contain the blend mode.

        Test: css3/filters/custom/custom-filter-change-blend-mode.html

        * platform/graphics/filters/CustomFilterProgram.cpp:
        (WebCore::CustomFilterProgram::operator==):
            Previously, the equals operator was pure virtual in CustomFilterProgram. Now,
            CustomFilterProgram implements it and compares the program type and mix settings, if
            appropriate.
        (WebCore):
        * platform/graphics/filters/CustomFilterProgram.h:
        * platform/graphics/filters/CustomFilterProgramInfo.cpp:
        (WebCore::CustomFilterProgramInfo::hash):
            Refactor a repeated condition into a boolean to improve readability.
        (WebCore::CustomFilterProgramInfo::operator==):
            Refactor repeated conditions to improve readability. Reorder the conditions so the less
            expensive ones occur first.
        * rendering/style/StyleCustomFilterProgram.h:
        (WebCore::StyleCustomFilterProgram::operator==):
            Call the base class's equals operator.

2012-10-23  David Barton  <dbarton@mathscribe.com>

        [MathML] Symbol font uses greek letters for roman ones on linux and Windows
        https://bugs.webkit.org/show_bug.cgi?id=99921

        Reviewed by Eric Seidel.

        For parts of stretched parentheses and brackets, mathml.css currently uses the Symbol font,
        which on linux and Windows has greek letters at roman code points. To fix this, we switch
        to the STIXSizeOneSym font when available. However, this can cause vertical gaps between
        glyph parts, because of hard-coded constants in RenderMathMLOperator.cpp. We eliminate all
        these constants. We also shift glyphs upward by 1px and truncate them to avoid the gaps.

        Tested by existing tests, and one test added to LayoutTests/mathml/presentation/mo.xhtml.

        * css/mathml.css:
        (math, mfenced > *):
            - Set font-family for mn, mi, etc.
        (mo, mfenced):
            - Set font-family for mo and anonymous operators, including extension glyphs for
              stretched operators like parentheses and brackets.
        (math):
        * rendering/mathml/RenderMathMLOperator.cpp:
        (WebCore):
            - Change 0x23d0 to 0x23aa for STIX & Cambria Math fonts.
        (WebCore::RenderMathMLOperator::glyphHeightForCharacter):
        (WebCore::RenderMathMLOperator::updateFromElement):
        (WebCore::RenderMathMLOperator::createStackableStyle):
            - Eliminate unused lineHeight and topRelative parameters, and the hard-coded font size
              of 14.
        (WebCore::RenderMathMLOperator::createGlyph):
            - Eliminate unused lineHeight and topRelative parameters.
        * rendering/mathml/RenderMathMLOperator.h:
        (RenderMathMLOperator):

2012-10-23  Benjamin Poulain  <benjamin@webkit.org>

        WTFURL: Implement KURL::setPort()
        https://bugs.webkit.org/show_bug.cgi?id=99898

        Reviewed by Adam Barth.

        * platform/KURLWTFURL.cpp:
        (WebCore::KURL::setPort):

2012-10-23  Nico Weber  <thakis@chromium.org>

        In the open-source jpeg decoder, read image orientation from the exif data
        https://bugs.webkit.org/show_bug.cgi?id=100144

        Reviewed by Eric Seidel.

        This will be used to implement the shouldRespectImageOrientation
        setting (see bug 19688). Currently this isn't hooked up anywhere, so
        it has no observable effect for now.

        Once it's hooked up, it will be tested by
        fast/images/exif-orientation.html

        * platform/graphics/BitmapImage.h:
        * platform/image-decoders/ImageDecoder.h:
        (WebCore::ImageDecoder::orientation):
        (ImageDecoder):
        * platform/image-decoders/jpeg/JPEGImageDecoder.cpp:
        (WebCore::readUint16):
        (WebCore):
        (WebCore::readUint32):
        (WebCore::checkExifHeader):
        (WebCore::readImageOrientation):
        (WebCore::JPEGImageReader::JPEGImageReader):
        (WebCore::JPEGImageReader::decode):
        * platform/image-decoders/jpeg/JPEGImageDecoder.h:
        (WebCore::JPEGImageDecoder::setOrientation):

2012-10-23  Chris Rogers  <crogers@google.com>

        Fix thread safety issue in AudioParamTimeline
        https://bugs.webkit.org/show_bug.cgi?id=100154

        Reviewed by Kenneth Russell.

        Add appropriate locking in AudioParamTimeline::valueForContextTime()

        * Modules/webaudio/AudioParamTimeline.cpp:
        (WebCore::AudioParamTimeline::valueForContextTime):

2012-10-23  Alec Flett  <alecflett@chromium.org>

        IndexedDB: refactor backend to use IDB*Metadata
        https://bugs.webkit.org/show_bug.cgi?id=100055

        Reviewed by Tony Chang.

        This further encapsulates the static data in
        IDBObjectStoreBackendImpl and IDBIndexBackendImp into their
        respective IDB*Metadata structs, in preparation for
        https://bugs.webkit.org/show_bug.cgi?id=99774.

        No new tests as this is purely a refactor.

        * Modules/indexeddb/IDBBackingStore.h:
        (IDBBackingStore):
        * Modules/indexeddb/IDBDatabaseBackendImpl.cpp:
        (WebCore::IDBDatabaseBackendImpl::createObjectStore):
        (WebCore::IDBDatabaseBackendImpl::loadObjectStores):
        * Modules/indexeddb/IDBIndexBackendImpl.cpp:
        (WebCore::IDBIndexBackendImpl::IDBIndexBackendImpl):
        (WebCore::IDBIndexBackendImpl::metadata):
        * Modules/indexeddb/IDBIndexBackendImpl.h:
        (WebCore::IDBIndexBackendImpl::create):
        (WebCore::IDBIndexBackendImpl::id):
        (WebCore::IDBIndexBackendImpl::setId):
        (WebCore::IDBIndexBackendImpl::hasValidId):
        (WebCore::IDBIndexBackendImpl::name):
        (WebCore::IDBIndexBackendImpl::keyPath):
        (WebCore::IDBIndexBackendImpl::unique):
        (WebCore::IDBIndexBackendImpl::multiEntry):
        (IDBIndexBackendImpl):
        * Modules/indexeddb/IDBLevelDBBackingStore.cpp:
        (WebCore::IDBLevelDBBackingStore::getObjectStores):
        (WebCore::IDBLevelDBBackingStore::getIndexes):
        * Modules/indexeddb/IDBLevelDBBackingStore.h:
        (IDBLevelDBBackingStore):
        * Modules/indexeddb/IDBMetadata.h:
        (WebCore::IDBObjectStoreMetadata::IDBObjectStoreMetadata):
        * Modules/indexeddb/IDBObjectStoreBackendImpl.cpp:
        (WebCore::IDBObjectStoreBackendImpl::IDBObjectStoreBackendImpl):
        (WebCore::IDBObjectStoreBackendImpl::metadata):
        (WebCore::IDBObjectStoreBackendImpl::setIndexKeys):
        (WebCore::IDBObjectStoreBackendImpl::putInternal):
        (WebCore::IDBObjectStoreBackendImpl::createIndex):
        (WebCore::IDBObjectStoreBackendImpl::loadIndexes):
        * Modules/indexeddb/IDBObjectStoreBackendImpl.h:
        (WebCore::IDBObjectStoreBackendImpl::create):
        (WebCore::IDBObjectStoreBackendImpl::id):
        (WebCore::IDBObjectStoreBackendImpl::setId):
        (WebCore::IDBObjectStoreBackendImpl::name):
        (WebCore::IDBObjectStoreBackendImpl::keyPath):
        (WebCore::IDBObjectStoreBackendImpl::autoIncrement):
        (IDBObjectStoreBackendImpl):

2012-10-19  Roger Fong  <roger_fong@apple.com>

        [WebGL] conformance/textures/texture-size.html is failing on Apple Mountain Lion
        https://bugs.webkit.org/show_bug.cgi?id=94041

        Reviewed by Dean Jackson.

        When binding a texture to GL_TEXTURE_2D when GL_ACTIVE_TEXTURE is 0, we set m_boundTexture0 to the texture unit. 
        However when we delete the texture, we need to be setting m_boundTexture0 to 0.
        Otherwise when we draw to the screen we bind m_boundTexture0 in the prepareTexture() method and since the associated texture 
        has already been deleted we end up in an error state.

        Tested using Khronos WebGL conformance suite:
        conformance/textures/texture-size.html

        * platform/graphics/opengl/GraphicsContext3DOpenGLCommon.cpp:
        (WebCore::GraphicsContext3D::deleteTexture):

2012-10-22  Dirk Schulze  <krit@webkit.org>

        BasicShapePolygon::path takes width instead of height for boundary calculation
        https://bugs.webkit.org/show_bug.cgi?id=99919

        Reviewed by Darin Adler.

        The 'y' parameters of polygon were calculated by the with of the bounding box of the object.
        This caused problems on percentage values for point positions. 
        Changed it to the height of the bounding box.

        Test: css3/masking/clip-path-polygon-percentage.html

        * rendering/style/BasicShapes.cpp:
        (WebCore::BasicShapePolygon::path):

2012-10-23  Dominik Röttsches  <dominik.rottsches@intel.com>

        Add timeout support to XMLHttpRequest
        https://bugs.webkit.org/show_bug.cgi?id=74802

        Reviewed by Nate Chapin.

        An implementation of XHR2 timeouts by using ResourceRequest's setTimeoutInterval.
        This made several changes necessary in CachedResource and SubresourceLoader in order
        to distinguish and forward the timeout case from there.

        The case of late updates to the timeout property, changing the timeout value after send()
        is not supported yet and handled separately in bug 98156.

        XHR2 timeout tests were initially written by Mozilla's Alex Vincent's. He granted
        permission to reuse them under PD/BSD license
        in https://bugzilla.mozilla.org/show_bug.cgi?id=525816#c86 - big thanks!
        I adapted them for W3C testharness.js and split them into groups with shorter test running time
        so that they can be used as WebKit layout tests.

        Tests: http/tests/xmlhttprequest/timeout/xmlhttprequest-timeout-aborted.html
               http/tests/xmlhttprequest/timeout/xmlhttprequest-timeout-abortedonmain.html
               http/tests/xmlhttprequest/timeout/xmlhttprequest-timeout-overridesexpires.html
               http/tests/xmlhttprequest/timeout/xmlhttprequest-timeout-simple.html
               http/tests/xmlhttprequest/timeout/xmlhttprequest-timeout-synconmain.html
               http/tests/xmlhttprequest/timeout/xmlhttprequest-timeout-twice.html
               http/tests/xmlhttprequest/timeout/xmlhttprequest-timeout-worker-aborted.html
               http/tests/xmlhttprequest/timeout/xmlhttprequest-timeout-worker-overridesexpires.html
               http/tests/xmlhttprequest/timeout/xmlhttprequest-timeout-worker-simple.html
               http/tests/xmlhttprequest/timeout/xmlhttprequest-timeout-worker-synconworker.html
               http/tests/xmlhttprequest/timeout/xmlhttprequest-timeout-worker-twice.html

        * loader/DocumentThreadableLoader.cpp:
        (WebCore::DocumentThreadableLoader::notifyFinished): Forward information about timeout case.
        * loader/SubresourceLoader.cpp:
        (WebCore::SubresourceLoader::didFail): Distinguish timeout case when informing client.
        * loader/cache/CachedResource.h: Distinguishing timeout case for errors.
        (WebCore::CachedResource::errorOccurred):
        (WebCore::CachedResource::loadFailedOrCanceled):
        (WebCore::CachedResource::timedOut):
        * xml/XMLHttpRequest.cpp:
        (WebCore::XMLHttpRequest::XMLHttpRequest): Initializing m_timeout value to zero.
        (WebCore::XMLHttpRequest::setTimeout): Setter function, possibly raising JS exception.
        (WebCore):
        (WebCore::XMLHttpRequest::open): Open call may raise exception for synchronous requests when timeout value is set.
        (WebCore::XMLHttpRequest::createRequest): Assigning timeout value to ResourceRequest.
        (WebCore::XMLHttpRequest::didFail): Handling timeout case separately.
        (WebCore::XMLHttpRequest::didTimeout): Timeout case state transisition and event firing as spec'ed.
        * xml/XMLHttpRequest.h: New event listener, member and callback for handling timeout.
        (WebCore::XMLHttpRequest::timeout):
        (XMLHttpRequest):
        * xml/XMLHttpRequest.idl: New event listener and property added.
        * xml/XMLHttpRequestException.cpp:
        * xml/XMLHttpRequestException.h: Added an exception value for the timeout case.


2012-10-23  Christophe Dumez  <christophe.dumez@intel.com>

        Possible assertion hit in WebCore::HTMLSelectElement::updateListBoxSelection()
        https://bugs.webkit.org/show_bug.cgi?id=99967

        Reviewed by Tony Chang.

        Fix assertion hit in WebCore::HTMLSelectElement::updateListBoxSelection() when
        pressing the left mouse button outside a multiselect and then moving the cursor
        over the multiselect element while holding the button down.

        The issue is that the HTMLSelectElement handler for the mouse move event does
        not check if there is a selection before trying to extend the selection.

        Test: fast/dom/HTMLSelectElement/select-selectedIndex-noAnchorIndex-crash.html

        * html/HTMLSelectElement.cpp:
        (WebCore::HTMLSelectElement::listBoxDefaultEventHandler):

2012-10-23  Adam Barth  <abarth@webkit.org>

        [V8] ScriptWrappable should hold the wrapper handle directly (Dromaeo/dom-modify and dom-traverse get ~2.5% faster)
        https://bugs.webkit.org/show_bug.cgi?id=97974

        Reviewed by Eric Seidel.

        Previously, we stored a pointer to a handle to a wrapper in Node. That
        is an extra layer of indirection that slows down finding the wrapper
        for the node. A handle is just a pointer, so we might as we just store
        the handle in the Node directly. That speeds up dom-modify and
        dom-traverse by about 2.5%.

        This change also lets us get rid of the ChunkedTable we were using to
        store all the wrappers because they're now stored in the Nodes
        directly.

        * bindings/scripts/CodeGeneratorV8.pm:
        (GenerateHeader):
        * bindings/v8/IntrusiveDOMWrapperMap.h:
        (WebCore::IntrusiveDOMWrapperMap::IntrusiveDOMWrapperMap):
        (WebCore::IntrusiveDOMWrapperMap::get):
        (WebCore::IntrusiveDOMWrapperMap::set):
        (WebCore::IntrusiveDOMWrapperMap::contains):
        (WebCore::IntrusiveDOMWrapperMap::visit):
        (WebCore::IntrusiveDOMWrapperMap::removeIfPresent):
        (WebCore::IntrusiveDOMWrapperMap::clear):
        * bindings/v8/ScriptWrappable.h:
        (WebCore::ScriptWrappable::ScriptWrappable):
        (WebCore::ScriptWrappable::wrapper):
        (WebCore::ScriptWrappable::setWrapper):
        (WebCore::ScriptWrappable::disposeWrapper):
        (WebCore::ScriptWrappable::reportMemoryUsage):
        (ScriptWrappable):
        * bindings/v8/V8DOMWrapper.h:
        (WebCore::V8DOMWrapper::getCachedWrapper):

2012-10-23  Kentaro Hara  <haraken@chromium.org>

        [V8] Replace SetGlobalGCPrologueCallback() with AddGCPrologueCallback()
        https://bugs.webkit.org/show_bug.cgi?id=100140

        Reviewed by Adam Barth.

        SetGlobalGCPrologueCallback() and SetGlobalGCEpilogueCallback()
        are deprecated (See http://code.google.com/codesearch#OAMlx_jo-ck/src/v8/include/v8.h&exact_package=chromium&q=v8.h&type=cs&l=3149)
        Instead we should use AddGCPrologueCallback()
        and AddGCEpilogueCallback().

        No tests. No change in behavior.

        * bindings/v8/V8DOMWindowShell.cpp:
        (WebCore::initializeV8IfNeeded):
        * bindings/v8/V8GCController.cpp:
        (WebCore::V8GCController::gcPrologue):
        (WebCore):
        (WebCore::V8GCController::minorGCPrologue):
        (WebCore::V8GCController::majorGCPrologue):
        (WebCore::V8GCController::gcEpilogue):
        (WebCore::V8GCController::minorGCEpilogue):
        (WebCore::V8GCController::majorGCEpilogue):
        * bindings/v8/V8GCController.h:
        (V8GCController):
        * bindings/v8/WorkerContextExecutionProxy.cpp:
        (WebCore::WorkerContextExecutionProxy::initIsolate):

2012-10-23  Adam Barth  <abarth@webkit.org>

        [V8] Enumerate Nodes via the V8 heap rather than via a list in WebCore
        https://bugs.webkit.org/show_bug.cgi?id=100033

        Reviewed by Eric Seidel.

        This patch changes how we enumerate nodes during garbage collection.
        After this patch, we use V8's list of open handles to enumerate node
        wrappers rather than using a separate list that we maintain in WebCore
        for this purpose. A future patch will remove the list in WebCore for a
        DOM performance gain.

        * bindings/js/ScriptProfiler.h:
        (WebCore):
        (WebCore::ScriptProfiler::visitNodeWrappers):
        * bindings/scripts/CodeGeneratorV8.pm:
        (GenerateToV8Converters):
        * bindings/scripts/test/V8/V8TestNode.cpp:
        (WebCore::V8TestNode::wrapSlow):
        * bindings/v8/IntrusiveDOMWrapperMap.h:
        (WebCore::IntrusiveDOMWrapperMap::set):
        * bindings/v8/ScriptProfiler.cpp:
        (WebCore::ScriptProfiler::visitNodeWrappers):
        * bindings/v8/ScriptProfiler.h:
        (WebCore):
        (ScriptProfiler):
        * bindings/v8/V8DOMMap.cpp:
        (WebCore::NodeWrapperVisitor::~NodeWrapperVisitor):
        (WebCore):
        (WebCore::visitAllDOMNodes):
        * bindings/v8/V8DOMMap.h:
        (WebCore):
        (NodeWrapperVisitor):
        * bindings/v8/V8DOMWrapper.cpp:
        (WebCore::V8DOMWrapper::setJSWrapperForDOMNode):
        (WebCore::V8DOMWrapper::setJSWrapperForActiveDOMNode):
        * bindings/v8/V8GCController.cpp:
        (WebCore::NodeVisitor::visitNodeWrapper):
        (WebCore::V8GCController::gcPrologue):
        (WebCore::V8GCController::gcEpilogue):
        * inspector/BindingVisitors.h:
        (WebCore::WrappedNodeVisitor::~WrappedNodeVisitor):
        * inspector/InspectorMemoryAgent.cpp:
        (WebCore):

2012-10-22  Andrey Kosyakov  <caseq@chromium.org>

        Web Inspector: paint rectangles are incorrectly shown in case subframes are present
        https://bugs.webkit.org/show_bug.cgi?id=99849

        Reviewed by Pavel Feldman.

        Move GraphicsContext and paint rectangle from willPaint() to didPaint(), so we don't have
        to store them as a state of InspectorPageAgent

        * inspector/InspectorInstrumentation.cpp:
        (WebCore):
        (WebCore::InspectorInstrumentation::willPaintImpl):
        (WebCore::InspectorInstrumentation::didPaintImpl):
        * inspector/InspectorInstrumentation.h:
        (InspectorInstrumentation):
        (WebCore::InspectorInstrumentation::willPaint):
        (WebCore::InspectorInstrumentation::didPaint):
        * inspector/InspectorPageAgent.cpp:
        (WebCore::InspectorPageAgent::didPaint):
        * inspector/InspectorPageAgent.h:
        * inspector/InspectorTimelineAgent.cpp:
        (WebCore::InspectorTimelineAgent::willPaint):
        (WebCore::InspectorTimelineAgent::didPaint):
        * inspector/InspectorTimelineAgent.h:
        (InspectorTimelineAgent):
        * inspector/TimelineRecordFactory.cpp:
        * inspector/TimelineRecordFactory.h:
        (TimelineRecordFactory):
        * page/FrameView.cpp:
        (WebCore::FrameView::paintContents):
        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::paintContents):

2012-10-23  Pavel Feldman  <pfeldman@chromium.org>

        Web Inspector: array grouping does not work for arrays with exactly 10000 elements.
        https://bugs.webkit.org/show_bug.cgi?id=100131

        Reviewed by Vsevolod Vlasov.

        Using ceil() - 1 instead of floor() in bucket size calculation.

        * inspector/front-end/ObjectPropertiesSection.js:

2012-10-23  Shinya Kawanaka  <shinyak@chromium.org>

        The order of resolving distribution in tree composition is wrong.
        https://bugs.webkit.org/show_bug.cgi?id=99552

        Reviewed by Dimitri Glazkov.

        According to the current ShadowDOM spec, we have to resolve <content> first, then resolve <shadow>.
        However, the order of resolution is now the mixed tree order of <content> and <shadow>.

        Test: fast/dom/shadow/content-reprojection-order.html

        * html/shadow/ContentDistributor.cpp:
        (WebCore::ContentDistributor::distribute): We should resolve <content> before <shadow>.
        Only the first active shadow insertion point can select the rest of contents.
        * html/shadow/HTMLContentElement.h:
        (HTMLContentElement):
        * html/shadow/HTMLShadowElement.cpp:
        * html/shadow/HTMLShadowElement.h:
        (WebCore::isHTMLShadowElement):
        (WebCore):
        (WebCore::toHTMLShadowElement):
        * html/shadow/InsertionPoint.h:
        (InsertionPoint): We don't need doesSelectFromHostChildren() anymore.

2012-10-23  Vsevolod Vlasov  <vsevik@chromium.org>

        Web Inspector: Move UISourceCode creation out of mappings to workspace.
        https://bugs.webkit.org/show_bug.cgi?id=100092

        Reviewed by Pavel Feldman.

        Moved uiSourceCode constructor calls out of mappings to workspace.

        * inspector/front-end/CompilerScriptMapping.js:
        * inspector/front-end/NetworkUISourceCodeProvider.js:
        (WebInspector.NetworkUISourceCodeProvider.prototype._parsedScriptSource):
        (WebInspector.NetworkUISourceCodeProvider.prototype._addUISourceCode):
        * inspector/front-end/ResourceScriptMapping.js:
        (WebInspector.ResourceScriptMapping.prototype._deleteOriginalUISourceCodeForScripts):
        (WebInspector.ResourceScriptMapping.prototype._deleteTemporaryUISourceCodeForScripts):
        (WebInspector.ResourceScriptMapping.prototype._bindUISourceCodeToScripts):
        (WebInspector.ResourceScriptMapping.prototype._createUISourceCode):
        (WebInspector.ResourceScriptMapping.prototype._getOrCreateTemporaryUISourceCode):
        (WebInspector.ResourceScriptMapping.prototype._getOrCreateOriginalUISourceCode):
        * inspector/front-end/SASSSourceMapping.js:
        (_bindUISourceCode):
        * inspector/front-end/ScriptSnippetModel.js:
        (WebInspector.ScriptSnippetModel.prototype._addScriptSnippet):
        (WebInspector.ScriptSnippetModel.prototype._createUISourceCodeForScript):
        * inspector/front-end/Workspace.js:
        (WebInspector.Project.prototype.addUISourceCode):
        (WebInspector.Project.prototype.removeUISourceCode):
        (WebInspector.Workspace.prototype.addTemporaryUISourceCode):
        (WebInspector.Workspace.prototype.removeTemporaryUISourceCode):

2012-10-23  Emil A Eklund  <eae@chromium.org>

        Remove unnecessary m_layoutDelta[XY]Saturated initialization
        https://bugs.webkit.org/show_bug.cgi?id=100018

        Reviewed by Julien Chaffraix.
        
        Remove unnecessary initialization from LayoutState constructor
        added in r132105.

        No new tests, no change in functionality.

        * rendering/LayoutState.cpp:
        (WebCore::LayoutState::LayoutState):

2012-10-23  Zeno Albisser  <zeno@webkit.org>

        [Texmap] Fix drawTextureRectangleARB after r131485.
        https://bugs.webkit.org/show_bug.cgi?id=100133

        Consistently rename u_textureSize to u_samplerSize.

        Reviewed by Noam Rosenthal.

        * platform/graphics/texmap/TextureMapperGL.cpp:
        (WebCore::TextureMapperGL::drawTextureRectangleARB):
        * platform/graphics/texmap/TextureMapperShaderManager.cpp:
        (WebCore::getShaderSpec):
        * platform/graphics/texmap/TextureMapperShaderManager.h:
        (TextureMapperShaderProgram):

2012-10-23  Mike West  <mkwst@chromium.org>

        Web Inspector: 'data:' URLs should be properly trimmed for readability.
        https://bugs.webkit.org/show_bug.cgi?id=100083

        Reviewed by Pavel Feldman.

        We recently landed a patch to trim the middle out of long URLs in
        console messages in order to improve readability. That patch didn't
        effect 'data:' URLs, as they didn't match the regex in the linkifier.
        This patch ensures that 'data:' URLs are properly trimmed down to
        size.

        This problem came to light while resolving a different, smaller issue:
        'image/jpg' wasn't whitelisted as an image MIME type. That trivial fix
        is included in this patch.

        Test: http/tests/inspector/network/image-as-text-loading-data-url.html

        * inspector/front-end/NetworkManager.js:
        (WebInspector.NetworkManager):
            Adds 'image/jpg' as a valid image type.
        * inspector/front-end/ResourceUtils.js:
        (WebInspector.linkifyStringAsFragmentWithCustomLinkifier):
            Supports 'data:' URLs in the linkifier's regex.

2012-10-23  Mike West  <mkwst@chromium.org>

        Web Inspector: Floated anchor element sometimes overlaps following content.
        https://bugs.webkit.org/show_bug.cgi?id=100105

        Reviewed by Pavel Feldman.

        This patch ensures that each console message clears the
        potentially-overlapping floated anchor element.

        * inspector/front-end/inspector.css:
        (#console-prompt):
        (.console-message, .console-user-command):
            Clear the float, and flip the border from the bottom of the
            message to the top. Do the same for the prompt.
        (.console-message:first-child):
            Ensure that the first message doesn't have a top border.

2012-10-23  Alexander Pavlov  <apavlov@chromium.org>

        Web Inspector: Crash when adding a keyframes rule in the Styles pane
        https://bugs.webkit.org/show_bug.cgi?id=99826

        Reviewed by Pavel Feldman.

        The client-supplied selector text is first parsed to make sure it results in a valid style rule selector.

        Test: inspector/styles/add-new-rule-invalid-selector.html

        * inspector/InspectorStyleSheet.cpp:
        (WebCore::createCSSParser):
        (WebCore):
        (WebCore::InspectorStyle::setPropertyText):
        (WebCore::checkStyleRuleSelector):
        (WebCore::InspectorStyleSheet::addRule):
        (WebCore::InspectorStyleSheet::ensureSourceData):
        (WebCore::InspectorStyleSheetForInlineStyle::getStyleAttributeRanges):

2012-10-15  Kenneth Rohde Christiansen  <kenneth@webkit.org>

        Add support for resolution media query
        https://bugs.webkit.org/show_bug.cgi?id=99077

        Reviewed by Antti Koivisto.

        Add support for 'resolution' media query feature.

        Background info:
        http://www.w3.org/blog/CSS/2012/06/14/unprefix-webkit-device-pixel-ratio

        Related spec links:
        http://www.w3.org/TR/css3-mediaqueries/#resolution (recommendation)
        http://www.w3.org/TR/css3-values/#resolution (candidate recommentation)

        Add infrastructure to make it testable.

        Test: fast/media/mq-resolution.html

        * css/CSSParser.cpp:
        (WebCore::CSSParser::validUnit):
        (WebCore::CSSParser::createPrimitiveNumericValue):
        (WebCore::CSSParser::parseValidPrimitive):
        (WebCore::CSSParser::detectNumberToken):
        * css/CSSParser.h:
        * css/CSSPrimitiveValue.cpp:
        (WebCore::isValidCSSUnitTypeForDoubleConversion):
        (WebCore::unitCategory):
        (WebCore::CSSPrimitiveValue::canonicalUnitTypeForCategory):
        (WebCore::CSSPrimitiveValue::customCssText):
        (WebCore::CSSPrimitiveValue::cloneForCSSOM):
        * css/CSSPrimitiveValue.h:

            Enable dpi, dpcm and dppx units when RESOLUTION_MEDIA_QUERY
            is enabled.

        * WebCore.exp.in:

            Export the WebCore::Settings setting.

        * css/CSSPrimitiveValue.h:
        (WebCore::CSSPrimitiveValue::isDotsPerInch):
        (WebCore::CSSPrimitiveValue::isDotsPerPixel):
        (WebCore::CSSPrimitiveValue::isDotsPerCentimeter):
        (CSSPrimitiveValue):

            Add function for checking the recently added density types.

        * css/MediaFeatureNames.h:
        (MediaFeatureNames):

            Add support for resolution, min-resolution and max-resolution.

        * css/MediaQueryEvaluator.cpp:
        (WebCore::compareResolution): Add methods for comparing resolutions.
        (WebCore):
        (WebCore::resolutionMediaFeatureEval):
        (WebCore::min_resolutionMediaFeatureEval):
        (WebCore::max_resolutionMediaFeatureEval):

            Implement the resolution method evaluation.

        * css/MediaQueryExp.cpp:
        (WebCore::featureWithValidPositiveDensity):
        (WebCore):
        (WebCore::featureWithoutValue):
        (WebCore::MediaQueryExp::MediaQueryExp):

            Hook up resolution with the right pre-checks.

       * page/Screen.cpp:
        (WebCore::Screen::horizontalDPI):
        (WebCore::Screen::verticalDPI):

            Check whether an override exists, and if so, uses it.
            If not calculate the value given the device scale factor.

        * page/Settings.cpp:
        (WebCore::Settings::setResolutionOverride):
        (WebCore):
        * page/Settings.h:
        (Settings):
        (WebCore::Settings::resolutionOverride):

            Add a resolution override to settings.

        * testing/InternalSettings.cpp:
        (WebCore::InternalSettings::Backup::Backup):
        (WebCore::InternalSettings::Backup::restoreTo):
        (WebCore::InternalSettings::setResolutionOverride):
        (WebCore):
        * testing/InternalSettings.h:
        (Backup):
        (InternalSettings):
        * testing/InternalSettings.idl:

            Add a new setResolutionOverride method to internals.settings.

2012-10-23  Filip Spacek  <fspacek@rim.com>

        [BlackBerry] Improve the use of stencil buffer during compositing
        https://bugs.webkit.org/show_bug.cgi?id=100020

        We always want to scissor so remove the define.
        Only turn stenciling on if needed.

        Reviewed by Rob Buis.

        Reviewed internally by Arvid Nilsson.

        * platform/graphics/blackberry/LayerRenderer.cpp:
        (WebCore::LayerRenderer::setViewport):
        (WebCore::LayerRenderer::compositeLayers):
        (WebCore::LayerRenderer::drawLayersOnSurfaces):
        (WebCore::LayerRenderer::compositeLayersRecursive):
        (WebCore::LayerRenderer::updateScissorIfNeeded):

2012-10-23  'Pavel Feldman'  <pfeldman@chromium.org>

        Not reviewed: kick out non-chromium files from WebCore.gypi.

        * WebCore.gypi:

2012-10-23  Alexander Shalamov  <alexander.shalamov@intel.com>

        [EFL][WK2] ecore_x should be initialised in WebProcess to avoid re-initialization by PlatformScreenEfl utilities and systemBeep() function
        https://bugs.webkit.org/show_bug.cgi?id=100110

        Reviewed by Kenneth Rohde Christiansen.

        Removed initialization of ecore_x, since it is initialized when process starts.

        test: fast/media/*

        * platform/efl/PlatformScreenEfl.cpp:
        (WebCore::screenDepth):
        (WebCore::screenRect):
        * platform/efl/SoundEfl.cpp:
        (WebCore::systemBeep):

2012-10-23  Adam Klein  <adamk@chromium.org>

        Always parse pasted fragments as HTML even on XHTML pages
        https://bugs.webkit.org/show_bug.cgi?id=99880

        Reviewed by Ojan Vafai.

        When pasting HTML into a page, using the XML parser is unlikely
        to work correctly, as the contents of the clipboard are unlikely
        to be properly-formed XHTML. Thus, for the pasting case, it's always
        better to use HTML parsing, which will properly parse either HTML
        (which is what's usually in the clipboard) or XHTML (which is
        sometimes there as well).

        The Mac port previously worked around this problem by falling back to plain text
        when parsing failed, but switching to HTML seems like a clear improvement.

        This also fixes a crash in Chromium (see http://webkit.org/b/99607
        and http://crbug.com/136218); it erroneously assumed that createFragmentFromMarkup()
        would never return null. This patch makes that true.

        * editing/markup.cpp:
        (WebCore::createFragmentFromMarkup): Don't delegate to createContextualFragment:
        we already know our context element is safe (i.e., it's <body>),
        and we want to force HTML (not XML) parsing.

2012-10-23  Allan Sandfeld Jensen  <allan.jensen@digia.com>

        [Qt] REGRESSION (r130851): fast/text/word-space-with-kerning.html fails
        https://bugs.webkit.org/show_bug.cgi?id=98876

        Reviewed by Simon Hausmann.

        Do not add word-spacing for leading space. This matches what simple path font-width does.

        Tested by existing tests.

        * platform/graphics/qt/FontQt.cpp:
        (WebCore::Font::floatWidthForComplexText):

2012-10-23  Alexander Pavlov  <apavlov@chromium.org>

        Web Inspector: Incorrect resolution of relative URLs containing a scheme in query parameters
        https://bugs.webkit.org/show_bug.cgi?id=100084

        Reviewed by Vsevolod Vlasov.

        Use the RFC 3986 grammar for the URL scheme.

        * inspector/front-end/ParsedURL.js:
        (WebInspector.ParsedURL):

2012-10-23  Eugene Klyuchnikov  <eustas.bug@gmail.com>

        Web Inspector: Elaborate source panel sidebar context menus.
        https://bugs.webkit.org/show_bug.cgi?id=99980

        Reviewed by Vsevolod Vlasov.

        - Watches: add "Add watch expression" item to items and empty element
        - Watches: hide "Remove watch expression" from editing prompt context menu
        - Watches: add titles to header buttons
        - XHR Breakpoints: add "Add Breakpoint" item to items and empty element
        - XHR Breakpoints: add "Remove all breakpoints" item to items (when >1)
        - XHR Breakpoints: add title to header button
        - JS Breakpoints: hide "Remove/(De)Activate breakpoints" when only 1 item present
        - JS Breakpoints: add "(De)Activate breakpoints" to empty element context menu

        * English.lproj/localizedStrings.js: Added corresponding strings.
        * inspector/front-end/BreakpointsSidebarPane.js: Adjusted context menu.
        (WebInspector.XHRBreakpointsSidebarPane): Ditto.
        * inspector/front-end/ObjectPropertiesSection.js: Added "isEditing()"
        * inspector/front-end/WatchExpressionsSidebarPane.js: Adjusted context menu.

2012-10-23  Kent Tamura  <tkent@chromium.org>

        Update binding test results for r132194
        https://bugs.webkit.org/show_bug.cgi?id=100097

        * bindings/scripts/test/V8/V8TestObj.cpp:
        (WebCore::V8TestObj::installPerContextProperties):

2012-10-23  Alexander Pavlov  <apavlov@chromium.org>

        Web Inspector: Sass can only resolve same folder paths
        https://bugs.webkit.org/show_bug.cgi?id=99259

        Reviewed by Vsevolod Vlasov.

        The actual reason is that the rule source location linkifier tries to linkify a resource (*.scss), which does not exist,
        and falls back to just stripping the main page URL prefix from the rule location URL. This change introduces LiveLocations
        for CSSRule locations and makes sure they are linkified using uiSourceCode's parsedURL.displayName.

        * inspector/front-end/CSSStyleModel.js:
        (WebInspector.CSSStyleModel): Introduced LiveLocation management for CSSRules.
        (WebInspector.CSSStyleModel.prototype.setSourceMapping):
        (WebInspector.CSSStyleModel.prototype._updateLocations):
        (WebInspector.CSSStyleModel.prototype.createLiveLocation):
        (WebInspector.CSSStyleModel.prototype.updateLocations):
        (WebInspector.CSSStyleModel.LiveLocation): A LiveLocation for the CSS domain.
        (WebInspector.CSSStyleModel.LiveLocation.prototype.uiLocation):
        (WebInspector.CSSStyleModel.LiveLocation.prototype.dispose):
        * inspector/front-end/Linkifier.js:
        (WebInspector.Linkifier.prototype.linkifyCSSRuleLocation): CSSRule LiveLocation-based link builder.
        (WebInspector.Linkifier.DefaultFormatter.prototype.formatLiveAnchor): Add a title for anchors.
        (WebInspector.Linkifier.DefaultCSSFormatter): Formatter for CSS location links.
        (WebInspector.Linkifier.DefaultCSSFormatter.prototype.formatLiveAnchor):
        * inspector/front-end/ResourceUtils.js:
        (WebInspector.displayNameForURL): Use parsedURL.displayName if uiSourceCode is present for the specified URL.
        * inspector/front-end/SASSSourceMapping.js:
        * inspector/front-end/StylesSidebarPane.js:
        (WebInspector.StylesSidebarPane):
        (WebInspector.StylesSidebarPane.prototype._innerRebuildUpdate):
        * inspector/front-end/inspector.html:

2012-10-23  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r132149.
        http://trac.webkit.org/changeset/132149
        https://bugs.webkit.org/show_bug.cgi?id=100098

        Breaks inspector profiler tests in debug mode. (Requested by
        pfeldman1 on #webkit).

        * rendering/AutoTableLayout.cpp:
        (WebCore::AutoTableLayout::recalcColumn):
        * rendering/FixedTableLayout.cpp:
        (WebCore::FixedTableLayout::calcWidthArray):
        * rendering/RenderTable.cpp:
        (WebCore::RenderTable::layout):
        * rendering/RenderTableCol.cpp:
        (WebCore::RenderTableCol::styleDidChange):
        (WebCore::RenderTableCol::updateFromElement):
        (WebCore::RenderTableCol::computePreferredLogicalWidths):
        * rendering/RenderTableCol.h:
        (RenderTableCol):

2012-10-23  Simon Hausmann  <simon.hausmann@digia.com>

        Unreviewed trivial Qt build fix: Fix build without USE_3D_GRAPHICS

        Move the #if USE(GRAPHICS_SURFACE) up to protect the inclusion of
        GraphicsContext3D.h to be done only if we use the surface.

        * platform/graphics/surfaces/GraphicsSurface.h:

2012-10-23  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r132033.
        http://trac.webkit.org/changeset/132033
        https://bugs.webkit.org/show_bug.cgi?id=100097

        Broke calendar picker (Requested by tkent on #webkit).

        * bindings/scripts/CodeGeneratorV8.pm:
        (GenerateImplementation):

2012-10-23  Andras Becsi  <andras.becsi@digia.com>

        Remove devicePixelRatio from ViewportAttributes
        https://bugs.webkit.org/show_bug.cgi?id=99845

        Reviewed by Adam Barth.

        Since r121555 the devicePixelRatio is not calculated any more
        and the scale factor is stored in Page::m_deviceScaleFactor,
        thus it can be removed from ViewportAttributes to reduce
        redundancy and unnecessary client code.
        Use a new parameter in viewport calculation functions using
        the visible viewport size (instead of passing the adjusted
        viewport size) so that after this change clients do not end
        up using the unadjusted viewport size for calculations.

        No behavioural change, no new tests needed.

        * WebCore.exp.in:
        * dom/ViewportArguments.cpp:
        (WebCore::computeViewportAttributes):
        (WebCore::computeMinimumScaleFactorForContentContained):
        Add the devicePixelRatio as a parameter.
        (WebCore::restrictMinimumScaleFactorToViewportSize): Ditto.
        * dom/ViewportArguments.h:
        (ViewportAttributes):
        (WebCore):
        * testing/InternalSettings.cpp:
        (WebCore::InternalSettings::configurationForViewport):

2012-10-23  Kent Tamura  <tkent@chromium.org>

        Support full month names in DateTimeEditElement, and use them in input[type=month] by default
        https://bugs.webkit.org/show_bug.cgi?id=100060

        Reviewed by Kentaro Hara.

        According to https://plus.google.com/104770450049736549185/posts/4zsoeHoa7SM
        no one wants to show abbreviated month names for input[type=month].
        This change add support for full month names in DateTimeEditELement, and
        LocaleICU and LocaleMac retun month formats with full month names. Note
        that LocaleWin::monthFormat returns formats for full month names.

        No new tests. Covered by fast/forms/month-multiple-fields/month-multiple-fields-appearance-*.html

        * html/shadow/DateTimeEditElement.cpp:
        (WebCore::DateTimeEditBuilder::visitField):
        If count is 4, use Localizer::monthLabels or standAloneMonthLabels.
        * platform/text/LocaleICU.cpp:
        (WebCore::LocaleICU::monthFormat):
        Returns a format for full month names.
        * platform/text/mac/LocaleMac.mm:
        (WebCore::LocaleMac::monthFormat): Ditto.

2012-10-23  Mike West  <mkwst@chromium.org>

        Viewport errors should be slightly friendlier with regard to ';'.
        https://bugs.webkit.org/show_bug.cgi?id=100003

        Reviewed by Adam Barth.

        This patch scans viewport values that cause errors for ';'. If found,
        a quick message is appended to the error, noting that semicolons are
        not valid separators in viewport contents, and that commas would be
        the proper substitute.

        No functional changes, just a better error message.

        * dom/ViewportArguments.cpp:
        (WebCore::reportViewportWarning):

2012-10-23  Timothy Hatcher  <timothy@apple.com>

        Docking/undocking the Web Inspector does not work correctly in Safari.

        The "docked" and "bottom" strings need quoted instead of being passed as identifiers.

        https://bugs.webkit.org/show_bug.cgi?id=100080

        Reviewed by Yury Semikhatsky.

        * inspector/InspectorFrontendClientLocal.cpp:
        (WebCore::InspectorFrontendClientLocal::setAttachedWindow): Put quotes around the %s.

2012-10-23  Sudarsana Nagineni  <sudarsana.nagineni@intel.com>

        [EFL][WK2] Compilation warning in GraphicsContext3DPrivate.cpp when AC is enabled
        https://bugs.webkit.org/show_bug.cgi?id=99723

        Reviewed by Kenneth Rohde Christiansen.

        Fix compilation warning in GraphicsContext3DPrivate.cpp when AC is
        enabled.

        No new tests, no change in behavior.

        * platform/graphics/efl/GraphicsContext3DPrivate.cpp:
        (WebCore::GraphicsContext3DPrivate::createSurface):

2012-10-23  Dan Carney  <dcarney@google.com>

        When blocking localStorage, Firefox throws a security exception on access, and maybe so should we
        https://bugs.webkit.org/show_bug.cgi?id=63257

        Reviewed by Jochen Eisinger.

        Throw security exception when local storage is accessed
        under certain circumstances to match firefox.

        No new tests. Existing tests modified.

        * bindings/js/JSStorageCustom.cpp:
        (WebCore::JSStorage::canGetItemsForName):
        (WebCore::JSStorage::nameGetter):
        (WebCore::JSStorage::deleteProperty):
        (WebCore::JSStorage::getOwnPropertyNames):
        * bindings/v8/custom/V8StorageCustom.cpp:
        (WebCore):
        (WebCore::setDOMException):
        (WebCore::V8Storage::namedPropertyEnumerator):
        (WebCore::storageGetter):
        (WebCore::V8Storage::namedPropertyQuery):
        (WebCore::storageDeleter):
        * inspector/InspectorDOMStorageAgent.cpp:
        (WebCore::InspectorDOMStorageAgent::getDOMStorageEntries):
        (WebCore::InspectorDOMStorageAgent::removeDOMStorageItem):
        * page/DOMWindow.cpp:
        (WebCore::DOMWindow::sessionStorage):
        (WebCore::DOMWindow::localStorage):
        * storage/Storage.cpp:
        * storage/Storage.h:
        (WebCore):
        (WebCore::Storage::length):
        (WebCore::Storage::key):
        (WebCore::Storage::getItem):
        (WebCore::Storage::setItem):
        (WebCore::Storage::removeItem):
        (WebCore::Storage::clear):
        (WebCore::Storage::contains):
        * storage/Storage.idl:
        * storage/StorageArea.h:
        (StorageArea):
        * storage/StorageAreaImpl.cpp:
        (WebCore::StorageAreaImpl::canAccessStorage): Checks whether access to storage is a security violation.
        (WebCore):
        (WebCore::StorageAreaImpl::disabledByPrivateBrowsingInFrame):
        (WebCore::StorageAreaImpl::length):
        (WebCore::StorageAreaImpl::key):
        (WebCore::StorageAreaImpl::getItem):
        (WebCore::StorageAreaImpl::setItem):
        (WebCore::StorageAreaImpl::removeItem):
        (WebCore::StorageAreaImpl::clear):
        (WebCore::StorageAreaImpl::contains):
        * storage/StorageAreaImpl.h:
        (StorageAreaImpl):

2012-10-22  Joshua Bell  <jsbell@chromium.org>

        IndexedDB: Remove custom binding code for IDBCursor.value
        https://bugs.webkit.org/show_bug.cgi?id=100034

        Reviewed by Kentaro Hara.

        Now that we're using ScriptValue instead of SerializedScriptValue we can just expose
        IDBCursor.value as an |any| (IDL) or |ScriptValue| (C++) to maintain the specified
        semantics that the object identity is retained across accesses.

        Test: storage/indexeddb/cursor-value.html

        * Modules/indexeddb/IDBCursor.cpp: Remove "dirty" tracking.
        (WebCore::IDBCursor::IDBCursor):
        (WebCore::IDBCursor::value):
        (WebCore::IDBCursor::setValueReady):
        * Modules/indexeddb/IDBCursor.h: IDBAny -> ScriptValue
        (IDBCursor):
        * Modules/indexeddb/IDBCursorWithValue.idl: IDBAny -> any
        * Modules/indexeddb/IDBObjectStore.cpp: No need to route through IDBAny to get ScriptValue.
        (WebCore):
        * UseV8.cmake: Remove references to IDBCustomBindings.cpp
        * WebCore.gypi: Ditto.
        * WebCore.vcproj/WebCore.vcproj: Ditto.
        * bindings/v8/IDBCustomBindings.cpp: Removed.

2012-10-22  Dan Bernstein  <mitz@apple.com>

        Font’s fast code path is used for partial runs with kerning and ligatures, but shouldn’t be
        https://bugs.webkit.org/show_bug.cgi?id=100068

        Reviewed by Sam Weinig.

        As described in <http://webkit.org/b/100050>, the fast code path doesn’t handle partial runs
        correctly when kerning or ligatures are enabled. Since the partial-run case is uncommon,
        for now just use the complex code path in this case.

        * platform/graphics/Font.cpp:
        (WebCore::Font::drawText): Changed to use the complex path for partial runs if there are any
        typesetting features.
        (WebCore::Font::drawEmphasisMarks): Ditto.
        (WebCore::Font::selectionRectForText): Ditto.
        (WebCore::Font::offsetForPosition): Changed to use the complex path if there are any
        typesetting features.

2012-10-22  Peter Wang  <peter.wang@torchmobile.com.cn>

        [BlackBerry] Missing some cookies in HTTP response header when set several cookies in one "Set-Cookie" header.
        https://bugs.webkit.org/show_bug.cgi?id=99950

        Reviewed by George Staikos.

        In "NetworkJob::handleNotifyHeaderReceived", if there are several "Set-Cookie" headers, 
        we should combine the following ones with the first.

        No new test case.

        * platform/network/blackberry/NetworkJob.cpp:
        (WebCore::NetworkJob::handleNotifyHeaderReceived):

2012-10-22  MORITA Hajime  <morrita@google.com>

        Assertion failed at WebCore::toInsertionPoint / WebCore::ContentDistributor::distribute
        https://bugs.webkit.org/show_bug.cgi?id=100038

        Reviewed by Kent Tamura.

        isHTMLContentElement() assumes that the content element always has
        a tag name "content" but it doesn't when Shadow DOM feature is
        disabled. This fix let the function see the correct tag name.

        Test: fast/dom/shadow/insertion-points-with-shadow-disabled.html

        * html/shadow/HTMLContentElement.cpp:
        (WebCore::HTMLContentElement::contentTagName):
        * html/shadow/HTMLContentElement.h:
        (HTMLContentElement):
        (WebCore::isHTMLContentElement):

2012-10-22  Shinya Kawanaka  <shinyak@chromium.org>

        [Shadow] Fallback content should also be reprojection.
        https://bugs.webkit.org/show_bug.cgi?id=99750

        Reviewed by Dimitri Glazkov.

        Fallback content of InsertionPoint should be reprojected. The existing assumption that
        only the direct child of host element can be distributed to InsertionPoint does not hold anymore.
        So, if the parent of an element is InsertionPoint which should show fallback element, we have to
        check the grand parent of the element instead of the element.

        Tests: fast/dom/shadow/content-reprojection-fallback-reprojection.html
               fast/dom/shadow/content-reprojection-fallback.html

        * css/StyleResolver.cpp:
        (WebCore::shouldResetStyleInheritance): Checks the grandparent of the element if the parent is
        an InsertionPoint which uses fallback content.
        * dom/ComposedShadowTreeWalker.cpp:
        (WebCore::shadowOfParentForDistribution):
        (WebCore):
        (WebCore::resolveReprojection):
        (WebCore::ComposedShadowTreeWalker::traverseParent):
        * html/shadow/InsertionPoint.cpp:
        (WebCore::InsertionPoint::shouldUseFallbackElements): True if the InsertionPoint should use fallback content.
        (WebCore):
        * html/shadow/InsertionPoint.h:
        (WebCore::parentElementForDistribution): Returns the grandparent element if the parent is InsertionPoint which uses
        fallback content. Returns parent element otherwise.
        (WebCore):

2012-10-22  Keishi Hattori  <keishi@webkit.org>

        Label position is wrong in the suggestion picker when all the suggestions have labels
        https://bugs.webkit.org/show_bug.cgi?id=99965

        Reviewed by Kent Tamura.

        Somehow the scrollbar was appearing and so the label element was being wrapped to the next line.

        No new tests. Can't reproduce in layout test.

        * Resources/pagepopups/suggestionPicker.css:
        (.suggestion-list):
        * Resources/pagepopups/suggestionPicker.js:
        (SuggestionPicker.prototype._fixWindowSize): Explicitly show the scroll bar.

2012-10-22  MORITA Hajime  <morrita@google.com>

        [Chromium] Needs to track ShadowRoot usage
        https://bugs.webkit.org/show_bug.cgi?id=99955

        Reviewed by Dimitri Glazkov.

        Added an UMA instrumentation.

        * dom/ShadowRoot.cpp:
        (WebCore::determineUsageType):
        (WebCore):
        (WebCore::ShadowRoot::create):

2012-10-22  Kent Tamura  <tkent@chromium.org>

        Introduce Localizer::standAloneMonthLabels
        https://bugs.webkit.org/show_bug.cgi?id=99963

        Reviewed by Kentaro Hara.

        We realized full month names and full stand-alone month names were
        necessary for input[type=month] UI. We change the compile-flag for
        Localizer::monthLabels from "ENABLE(CALENDAR_PICKER)" to
        "ENABLE(CALENDAR_PICKER) || ENABLE(INPUT_MULTIPLE_FIELDS_UI)," and
        introduce Localizer::standAloneMonthLabels.

        Tests: Add some test cases to Source/WebKit/chromium/LocaleMacTest.cpp
        and LocalizedDateICUTest.cpp.

        * platform/text/Localizer.h:
        (Localizer):
        - Add pure virtual standAloneMonthLabels.
        - Change the condition for monthLabels.

        * platform/text/LocaleNone.cpp:
        (LocaleNone): Declare monthLabels, standAloneMonthLabels, and m_monthLabels.
        (WebCore::LocaleNone::monthLabels):
        Added. It always returns English month names.
        (WebCore::LocaleNone::standAloneMonthLabels):
        Added. Just calls monthLabels.

        * platform/text/LocaleWin.h:
        (LocaleWin):
        Declare standAloneMonthLabels, and change the condition for monthLabels.
        * platform/text/LocaleWin.cpp:
        (WebCore): Change the condition for monthLabels.
        (WebCore::LocaleWin::standAloneMonthLabels):
        Added. Just calls monthLabels.

        * platform/text/mac/LocaleMac.h:
        (LocaleMac):
        - Add standAloneMonthLabels and m_standAloneMonthLabels
        - Change the condition for monthLabels and m_monthLabels.
        * platform/text/mac/LocaleMac.mm:
        (WebCore): Change the condition for monthLabels.
        (WebCore::LocaleMac::standAloneMonthLabels):
        Added. Get the information with NSDateFormatter::standaloneMonthSymbols.

        * platform/text/LocaleICU.h:
        (LocaleICU):
        - Add standAloneMonthLabels and m_standAloneMonthLabels
        - Change the condition for monthLabels and m_monthLabels.
        * platform/text/LocaleICU.cpp:
        (WebCore::LocaleICU::initializeCalendar):
        Remove m_monthLabels initialization in order to avoid dependecy from monthLabels.
        (WebCore):
        (WebCore::createFallbackMonthLabels): Change the compile condition.
        (WebCore::LocaleICU::monthLabels):
        - Change the compile condition.
        - Don't depend on initializeCalendar to make the code for
        ENABLE(INPUT_MULTIPLE_FIELDS_UI) && !ENABLE(CALENDAR_PICKER) minimal.
        (WebCore::LocaleICU::standAloneMonthLabels):
        Added. The code is similar to shortStandAloneMonthLabels.

2012-10-22  Shinya Kawanaka  <shinyak@chromium.org>

        Refactoring around ContainerNode::attachChildren
        https://bugs.webkit.org/show_bug.cgi?id=99968

        Reviewed by Hajime Morita.

        Since ContainerNode::attach() is now equivalent to ContainerNode::attachChildren() + Node::attach(), we should call
        ContainerNode::attach() instead of calling them.

        No new tests, no change in behavior.

        * dom/ContainerNode.h:
        (ContainerNode):
        * dom/Element.cpp:
        (WebCore::Element::attach):
        * dom/ShadowRoot.cpp:
        (WebCore::ShadowRoot::attach):

2012-10-22  Michael Saboff  <msaboff@apple.com>

        HTML Parser should produce 8 bit strings for doctype, comment and tagName tokens
        https://bugs.webkit.org/show_bug.cgi?id=99889

        Reviewed by Geoffrey Garen.

        Added 8 bit check for accumulating all token data in MarkupTokenBase.  Added code to convert
        "name" token data directly to a string (8 or 16 as appropriate).  Changed to accumulate
        m_bufferedEndTagName as LChar's.

        No new tests, covered by existing tests.

        * html/parser/HTMLToken.h:
        (HTMLToken):
        * html/parser/HTMLTokenizer.cpp:
        (WebCore::HTMLTokenizer::nextToken):
        (WebCore::HTMLTokenizer::addToPossibleEndTag):
        (WebCore::HTMLTokenizer::isAppropriateEndTag):
        * html/parser/HTMLTokenizer.h:
        (HTMLTokenizer):
        * html/parser/HTMLTreeBuilder.cpp:
        (WebCore::HTMLTreeBuilder::ExternalCharacterTokenBuffer::takeLeading):
        * xml/parser/MarkupTokenBase.h:
        (WebCore::MarkupTokenBase::beginStartTag):
        (WebCore::MarkupTokenBase::beginEndTag):
        (MarkupTokenBase):
        (WebCore::MarkupTokenBase::beginDOCTYPE):
        (WebCore::MarkupTokenBase::appendToComment):
        (WebCore::MarkupTokenBase::appendToName):
        (WebCore::MarkupTokenBase::nameString):
        (WebCore::AtomicMarkupTokenBase::AtomicMarkupTokenBase):

2012-10-22  Tony Chang  <tony@chromium.org>

        margin-top/bottom has no effect for child nodes of flex items
        https://bugs.webkit.org/show_bug.cgi?id=99923

        Reviewed by Ojan Vafai.

        Flexitems, like table cells, shouldn't collapse margins.

        Test: css3/flexbox/flexitem-no-margin-collapsing.html

        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::MarginInfo::MarginInfo): Check to see if the parent is a flexible box.
        We should always have a parent if we make it this far in the check.

2012-10-22  Marja Hölttä  <marja@chromium.org>

        Refactor CachedResourceLoader: add CachedResourceRequest
        https://bugs.webkit.org/show_bug.cgi?id=99736

        Reviewed by Adam Barth.

        For fixing bugs 84883 and 92761,
        CachedResourceLoader::requestResource should take as parameter
        information about who initiated the request. But the parameter
        list was already long. This gathers all the parameters into a
        separate class, CachedResourceRequest. The next step is to add
        information about who initiated the request into
        CachedResourceRequest.

        No new tests because no changes in functionality, just moving code
        around.

        * CMakeLists.txt:
        * GNUmakefile.list.am:
        * Target.pri:
        * WebCore.gypi:
        * WebCore.vcproj/WebCore.vcproj:
        * WebCore.xcodeproj/project.pbxproj:
        * css/CSSFontFaceSrcValue.cpp:
        (WebCore::CSSFontFaceSrcValue::cachedFont):
        * css/CSSImageSetValue.cpp:
        (WebCore::CSSImageSetValue::cachedImageSet):
        * css/CSSImageValue.cpp:
        (WebCore::CSSImageValue::cachedImage):
        * css/StyleRuleImport.cpp:
        (WebCore::StyleRuleImport::requestStyleSheet):
        * css/WebKitCSSSVGDocumentValue.cpp:
        (WebCore::WebKitCSSSVGDocumentValue::load):
        * css/WebKitCSSShaderValue.cpp:
        (WebCore::WebKitCSSShaderValue::cachedShader):
        * dom/ProcessingInstruction.cpp:
        (WebCore::ProcessingInstruction::checkStyleSheet):
        * dom/ScriptElement.cpp:
        (WebCore::ScriptElement::requestScript):
        * html/HTMLLinkElement.cpp:
        (WebCore::HTMLLinkElement::process):
        * loader/DocumentThreadableLoader.cpp:
        (WebCore::DocumentThreadableLoader::loadRequest):
        * loader/ImageLoader.cpp:
        (WebCore::ImageLoader::updateFromElement):
        * loader/LinkLoader.cpp:
        (WebCore::LinkLoader::loadLink):
        * loader/TextTrackLoader.cpp:
        (WebCore::TextTrackLoader::load):
        * loader/cache/CachedResourceLoader.cpp:
        (WebCore::CachedResourceLoader::requestImage):
        (WebCore::CachedResourceLoader::requestFont):
        (WebCore::CachedResourceLoader::requestTextTrack):
        (WebCore::CachedResourceLoader::requestShader):
        (WebCore::CachedResourceLoader::requestCSSStyleSheet):
        (WebCore::CachedResourceLoader::requestUserCSSStyleSheet):
        (WebCore::CachedResourceLoader::requestScript):
        (WebCore::CachedResourceLoader::requestXSLStyleSheet):
        (WebCore::CachedResourceLoader::requestSVGDocument):
        (WebCore::CachedResourceLoader::requestLinkResource):
        (WebCore::CachedResourceLoader::requestRawResource):
        (WebCore::CachedResourceLoader::requestResource):
        (WebCore::CachedResourceLoader::requestPreload):
        (WebCore::CachedResourceLoader::defaultCachedResourceOptions):
        (WebCore):
        * loader/cache/CachedResourceLoader.h:
        (WebCore):
        (CachedResourceLoader):
        * loader/cache/CachedResourceRequest.cpp: Added.
        (WebCore):
        (WebCore::CachedResourceRequest::CachedResourceRequest):
        * loader/cache/CachedResourceRequest.h: Added.
        (WebCore):
        (CachedResourceRequest):
        (WebCore::CachedResourceRequest::mutableResourceRequest):
        (WebCore::CachedResourceRequest::resourceRequest):
        (WebCore::CachedResourceRequest::charset):
        (WebCore::CachedResourceRequest::setCharset):
        (WebCore::CachedResourceRequest::options):
        (WebCore::CachedResourceRequest::priority):
        (WebCore::CachedResourceRequest::forPreload):
        (WebCore::CachedResourceRequest::setForPreload):
        (WebCore::CachedResourceRequest::defer):
        (WebCore::CachedResourceRequest::setDefer):
        * loader/icon/IconLoader.cpp:
        (WebCore::IconLoader::startLoading):
        * svg/SVGFEImageElement.cpp:
        (WebCore::SVGFEImageElement::requestImageResource):
        * svg/SVGFontFaceUriElement.cpp:
        (WebCore::SVGFontFaceUriElement::loadFont):
        * svg/SVGUseElement.cpp:
        (WebCore::SVGUseElement::svgAttributeChanged):
        * xml/XSLImportRule.cpp:
        (WebCore::XSLImportRule::loadSheet):

2012-10-22  Adam Barth  <abarth@webkit.org>

        [V8] ASSERT that removeAllDOMObjects() is called only on worker threads
        https://bugs.webkit.org/show_bug.cgi?id=100046

        Reviewed by Eric Seidel.

        This function is called only on worker threads. We should ASSERT that
        fact and remove the dead code that tries to handle the main thread
        case.

        * bindings/v8/V8DOMMap.cpp:
        (WebCore::removeAllDOMObjects):

2012-10-22  Adam Barth  <abarth@webkit.org>

        [V8] We should call the faster v8::Integer::New APIs
        https://bugs.webkit.org/show_bug.cgi?id=100016

        Reviewed by Eric Seidel.

        In working to remove the integer cache, I added some faster APIs for
        creating v8::Integers. These APIs are faster than the old APIs, but not
        quite fast enough to replace the integer cache. We should still use
        them when we miss the integer cache.

        I've also included a small refactoring to V8PerIsolateData to make it
        clearer when we're calling v8::Isolate::GetCurrent().

        * bindings/v8/DOMData.cpp:
        (WebCore::DOMData::getCurrentStore):
        * bindings/v8/V8Binding.h:
        (WebCore::v8ExternalString):
        (WebCore::v8Integer):
        (WebCore::v8UnsignedInteger):
        * bindings/v8/V8PerIsolateData.h:
        (WebCore::V8PerIsolateData::current):
        (WebCore::V8PerIsolateData::from):
        * bindings/v8/V8ValueCache.cpp:
        (WebCore::StringCache::v8ExternalStringSlow):
        (WebCore::IntegerCache::createSmallIntegers):
        * bindings/v8/V8ValueCache.h:
        (WebCore::IntegerCache::v8Integer):
        (WebCore::IntegerCache::v8UnsignedInteger):
        (IntegerCache):
        * bindings/v8/custom/V8HTMLCanvasElementCustom.cpp:
        (WebCore::V8HTMLCanvasElement::getContextCallback):

2012-10-22  Julien Chaffraix  <jchaffraix@webkit.org>

        RenderTableCol::computePreferredLogicalWidths and RenderTableCol::layout should never be called
        https://bugs.webkit.org/show_bug.cgi?id=99861

        Reviewed by Ojan Vafai.

        RenderTableCol's computePreferredLogicalWidths and layout's only purpose were to clear the preferred logical
        widths dirty / layout flag so that we would properly propagate the information to our containing table. This
        led to clunky code where the table layout code had to forcefully call RenderTableCol::computePreferredLogicalWidths
        or else we would ignore the next layout hint on the <col> or <colgroup>.

        Test: fast/table/col-span-change-relayout.html

        * rendering/AutoTableLayout.cpp:
        (WebCore::AutoTableLayout::recalcColumn):
        * rendering/RenderTable.cpp:
        (WebCore::RenderTable::layout):
        Simplified the code now that we only need to iterate over the sections.

        * rendering/FixedTableLayout.cpp:
        (WebCore::FixedTableLayout::calcWidthArray):
        Removed call to computePreferredLogicalWidths.

        * rendering/RenderTableCol.cpp:
        (WebCore::RenderTableCol::styleDidChange):
        (WebCore::RenderTableCol::updateFromElement):
        Forward a layout hint to the table so that we properly recompute the cell's logical withs.

        (WebCore::RenderTableCol::computePreferredLogicalWidths):
        (WebCore::RenderTableCol::layout):
        Change our implementations of those 2 methods to be no-ops, while enforcing that they are
        never called.

        (WebCore::RenderTableCol::propagateLayoutCueToTable):
        New helper function that forward any layout cue to the containing table, this works around
        us not clearing the flags which confuses RenderObject markContainingBlocksForLayout and
        invalidateContainerPreferredLogicalWidths.

        * rendering/RenderTableCol.h:
        Made the function that we are not expected to be called private.

2012-10-22  Pan Deng  <pan.deng@intel.com>

        [User Timing]Integrate with Perforamnce Timeline.
        https://bugs.webkit.org/show_bug.cgi?id=91072.

        Reviewed by Tony Gentilcore.

        This patch expose user timing entries via performance timeline interface. JavaScriptCore custom binding will be another patch

        No new tests, user timing test cases have been landed.

        * page/Performance.cpp:
        (WebCore::Performance::Performance):
        (WebCore::Performance::webkitGetEntries):
        (WebCore::Performance::webkitGetEntriesByType):
        (WebCore::Performance::webkitGetEntriesByName):
        * page/PerformanceEntry.h:
        (WebCore::PerformanceEntry::startTimeCompareLessThan):
        (PerformanceEntry):
        * page/PerformanceEntryList.cpp:
        (WebCore::PerformanceEntryList::sort):
        (WebCore):
        * page/PerformanceEntryList.h:
        (PerformanceEntryList):
        * page/PerformanceUserTiming.cpp:
        (WebCore::convertToEntrySequence):
        (WebCore):
        (WebCore::getEntrySequenceByName):
        (WebCore::UserTiming::getMarks):
        (WebCore::UserTiming::getMeasures):
        * page/PerformanceUserTiming.h:
        (UserTiming):

2012-10-22  Pan Deng  <pan.deng@intel.com>

        Modify obsolete code in User Timing
        https://bugs.webkit.org/show_bug.cgi?id=99851

        Reviewed by Tony Gentilcore.

        Modify user timing implementation as PlatformString.h, prefix of webkitNow is removed, etc.

        No new tests.

        * page/PerformanceUserTiming.cpp:
        (WebCore::insertPerformanceEntry):
        (WebCore::UserTiming::mark):
        (WebCore::UserTiming::measure):
        * page/PerformanceUserTiming.h:

2012-10-22  Mark Lam  <mark.lam@apple.com>

        Change stack recursion checks to be based on stack availability.
        https://bugs.webkit.org/show_bug.cgi?id=99872.

        Reviewed by Filip Pizlo and Geoffrey Garen.

        Removed the use of ThreadStackType. Enabled the reserved JSStack space
        for error processing before doing work in reportException().

        * bindings/js/JSDOMBinding.cpp:
        (WebCore::reportException):
        * bindings/js/JSDOMWindowBase.cpp:
        (WebCore::JSDOMWindowBase::commonJSGlobalData):
        * bindings/js/WorkerScriptController.cpp:
        (WebCore::WorkerScriptController::WorkerScriptController):

2012-10-22  Andreas Kling  <kling@webkit.org>

        REGRESSION(r131104): Heap-use-after-free in WebCore::Element::attributeChanged
        <http://webkit.org/b/99937>

        Reviewed by Anders Carlsson.

        Setting the "type" attribute on an HTMLInputElement that has no "value" attribute set will cause the
        input type changing mechanism to write a value attribute onto the element. This happens in
        HTMLInputElement::updateType(), below parseAttribute().

        It's done via Element::setAttribute(), so we end up re-entering Element::setAttributeInternal()
        where the 'existingAttribute' pointer may now be invalid if adding the "value" attribute caused
        a reallocation in the ElementAttributeData's underlying Vector<Attribute>.

        To make it harder to introduce this kind of bug in the future, I changed almost all functions that take
        a "const Attribute&" to take a QualifiedName/AtomicString couple instead (the idea being that the 
        fewer references into the attribute store we have, the better.)

        Test: fast/html/input-type-change-crash.html

        * dom/Attr.cpp:
        (WebCore::Attr::setValue):
        (WebCore::Attr::childrenChanged):
        * dom/Element.cpp:
        (WebCore::Element::setAttributeInternal):
        (WebCore::Element::attributeChanged):
        (WebCore::Element::parserSetAttributes):
        (WebCore::Element::addAttributeInternal):
        (WebCore::Element::didAddAttribute):
        (WebCore::Element::didModifyAttribute):
        (WebCore::Element::didRemoveAttribute):
        * dom/Element.h:
        (Element):
        * dom/ElementAttributeData.cpp:
        (WebCore::ElementAttributeData::cloneDataFrom):
        * dom/StyledElement.cpp:
        (WebCore::StyledElement::attributeChanged):
        * dom/StyledElement.h:
        * html/HTMLInputElement.cpp:
        (WebCore::HTMLInputElement::updateType):
        * svg/SVGElement.cpp:
        (WebCore::SVGElement::attributeChanged):
        * svg/SVGElement.h:
        (SVGElement):

2012-10-22  Joshua Bell  <jsbell@chromium.org>

        IndexedDB: Bounds check for IDBCursor.advance() incorrect
        https://bugs.webkit.org/show_bug.cgi?id=100014

        Reviewed by Tony Chang.

        Fix introduced by trac.webkit.org/changeset/131658 restricted cursor.advance()'s argument
        as [EnforceRange] unsigned long long, but it's typed as [EnforceRange] unsigned long; the
        useless comparison was caught by a clang check.

        In lieu of webkit.org/b/96798 make it long long and correct the range check.

        Test: storage/indexeddb/cursor-advance.html

        * Modules/indexeddb/IDBCursor.cpp:
        (WebCore::IDBCursor::advance):
        * Modules/indexeddb/IDBCursor.h:
        (IDBCursor):
        * Modules/indexeddb/IDBCursor.idl:

2012-10-22  Tony Chang  <tony@chromium.org>

        WebKit does not support 'flex-wrap: nowrap'
        https://bugs.webkit.org/show_bug.cgi?id=99924

        Reviewed by Ojan Vafai.

        The spec changed back from using none to nowrap for the single-line
        flexbox case.
        http://dev.w3.org/csswg/css3-flexbox/#flex-wrap-property

        No new tests, covered by css3/flexbox/css-properties.html and others.

        * css/CSSParser.cpp:
        (WebCore::isValidKeywordPropertyAndValue):
        * css/CSSPrimitiveValueMappings.h:
        (WebCore::CSSPrimitiveValue::CSSPrimitiveValue):
        (WebCore::CSSPrimitiveValue::operator EFlexWrap):
        * css/CSSValueKeywords.in:
        * rendering/RenderBox.cpp:
        (WebCore::isStretchingColumnFlexItem):
        (WebCore::RenderBox::sizesLogicalWidthToFitContent):
        * rendering/RenderFlexibleBox.cpp:
        (WebCore::RenderFlexibleBox::isMultiline):
        * rendering/style/RenderStyle.h:
        * rendering/style/RenderStyleConstants.h:

2012-10-22  Mike West  <mkwst@chromium.org>

        'image/pjpeg' should be treated as an image by Web Inspector.
        https://bugs.webkit.org/show_bug.cgi?id=100001

        Reviewed by Pavel Feldman.

        It's not exactly a "real" MIME type, but it's in use.

        * inspector/front-end/NetworkManager.js:
        (WebInspector.NetworkManager):
            Adding 'image/pjpeg' as an image MIME type.

2012-10-22  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r132119.
        http://trac.webkit.org/changeset/132119
        https://bugs.webkit.org/show_bug.cgi?id=100019

        Fails its own test on Mac platforms. (Requested by leviw on
        #webkit).

        * page/EventHandler.cpp:
        (WebCore::EventHandler::handleGestureEvent):
        (WebCore::EventHandler::sendContextMenuEventForGesture):
        * page/EventHandler.h:
        (EventHandler):

2012-10-22  Hans Muller  <hmuller@adobe.com>

        [CSS Exclusions] Points on the bottom and right edges of an exclusion shape should be classified as "outside"
        https://bugs.webkit.org/show_bug.cgi?id=98967

        Reviewed by Dirk Schulze.

        Changed the way lines are represented in the ExclusionShapeInsideInfo and ExclusionShape classes
        so that they're consistent with the rendering code that depends on them.  Lines are now defined
        by logicalTop, logicalHeight, instead of logicalTop,logicalBottom.  This a clean-up, not a change
        in functionality. It's already covered by the existing fast/exclusions LayoutTests.

        Test: fast/exclusions/shape-inside/shape-inside-bottom-edge.html

        * rendering/ExclusionPolygon.cpp:
        (WebCore::ExclusionPolygon::getExcludedIntervals):
        (WebCore::ExclusionPolygon::getIncludedIntervals):
        * rendering/ExclusionPolygon.h:
        * rendering/ExclusionRectangle.cpp:
        (WebCore::ExclusionRectangle::getExcludedIntervals):
        (WebCore::ExclusionRectangle::getIncludedIntervals):
        * rendering/ExclusionRectangle.h:
        * rendering/ExclusionShape.h:
        (LineSegment): Moved the struct fields below the constructor per webkit style.
        (ExclusionShape):
        (WebCore::ExclusionShape::minYForLogicalLine):
        (WebCore::ExclusionShape::maxYForLogicalLine):
        * rendering/ExclusionShapeInsideInfo.cpp:
        (WebCore::ExclusionShapeInsideInfo::computeSegmentsForLine):
        * rendering/ExclusionShapeInsideInfo.h:
        (ExclusionShapeInsideInfo):
        (WebCore::ExclusionShapeInsideInfo::lineOverlapsShapeBounds): Changed the test to not include
            lines whose logicalTop is equal to the shape's top+height.
        * rendering/RenderBlockLineLayout.cpp:
        (WebCore::RenderBlock::layoutRunsAndFloatsInRange):

2012-10-22  Chris Rogers  <crogers@google.com>

        Update some AudioContext create() method names to latest Web Audio spec
        https://bugs.webkit.org/show_bug.cgi?id=99888

        Reviewed by Adam Barth.

        The following AudioContext method names are being changed, with legacy support for the old names:
        createGainNode -> createGain
        createDelayNode -> createDelay
        createJavaScriptNode -> createScriptProcessor

        For details:
        https://www.w3.org/Bugs/Public/show_bug.cgi?id=18332

        Tests changed: webaudio/delaynode.html, webaudio/gain.html, webaudio/javascriptaudionode.html
        to test coverage of the new names.

        * Modules/webaudio/AudioBufferSourceNode.idl:
        * Modules/webaudio/AudioContext.cpp:
        (WebCore::AudioContext::createScriptProcessor):
        (WebCore::AudioContext::createGain):
        (WebCore::AudioContext::createDelay):
        * Modules/webaudio/AudioContext.h:
        (AudioContext):
        * Modules/webaudio/AudioContext.idl:
        * page/FeatureObserver.h:

2012-10-22  Varun Jain  <varunjain@chromium.org>

        Context menu generated from touch gestures on textareas has
        context of the cursor position instead of the position where the event occurs.
        https://bugs.webkit.org/show_bug.cgi?id=99520

        Reviewed by Kenneth Rohde Christiansen.

        Send a synthetic mouse down event for context menu-summoning-gesture events so
        that textareas can correctly set cursors before receiving the context menu event.

        Test: fast/events/touch/gesture/right-click-gestures-set-cursor-at-correct-position.html

        * page/EventHandler.cpp:
        (WebCore::EventHandler::handleGestureEvent):
        (WebCore::EventHandler::handleGestureTwoFingerTap):
        (WebCore):
        (WebCore::EventHandler::sendContextMenuEventForGesture):
        * page/EventHandler.h:
        (EventHandler):

2012-10-22  Zeno Albisser  <zeno@webkit.org>

        TextureMapperSurfaceBackingStore should check if GraphicsSurface is valid.
        https://bugs.webkit.org/show_bug.cgi?id=100002

        Reviewed by Kenneth Rohde Christiansen.

        * platform/graphics/texmap/TextureMapperBackingStore.cpp:
        (WebCore::TextureMapperSurfaceBackingStore::setGraphicsSurface):
            Check if a surface has been created before accessing the pointer.
        (WebCore::TextureMapperSurfaceBackingStore::paintToTextureMapper):
            Check if m_graphicsSurface is a valid pointer before dereferencing it.

2012-10-22  Michael Saboff  <msaboff@apple.com>

        r131955 is has improper function call in LinkHashChromium.cpp
        https://bugs.webkit.org/show_bug.cgi?id=100008

        Reviewed by Alexey Proskuryakov.

        Followup fix to r131955 for chromium platform.  Added call to 
        (const UChar*, unsigned) version of visitedLinkHash from String& version.

        * platform/chromium/LinkHashChromium.cpp:
        (WebCore::visitedLinkHash):

2012-10-22  Aaron Colwell  <acolwell@chromium.org>

        webkitsourceopen event doesn't always fire
        https://bugs.webkit.org/show_bug.cgi?id=99868

        Reviewed by Adam Barth.

        Changed MediaSource to derive from ActiveDOMObject so that event listeners
        will still fire even if all references to the object go out of scope.

        Test: http/tests/media/media-source/video-media-source-garbage-collection-before-sourceopen.html

        * Modules/mediasource/MediaSource.cpp:
        (WebCore::MediaSource::create):
        (WebCore::MediaSource::MediaSource):
        (WebCore::MediaSource::scriptExecutionContext):
        (WebCore):
        (WebCore::MediaSource::hasPendingActivity):
        (WebCore::MediaSource::stop): Clears m_player & m_asyncEventQueue so they don't indicate pending activity anymore.
        * Modules/mediasource/MediaSource.h:
        (MediaSource):
        * Modules/mediasource/MediaSource.idl:
        * Modules/mediasource/MediaSourceRegistry.cpp:
        (WebCore::MediaSourceRegistry::registerMediaSourceURL): Added setPendingActivity() call so the MediaSource object stays active while in the registry.
        (WebCore::MediaSourceRegistry::unregisterMediaSourceURL): Added unsetPendingActivity() call so the MediaSource object can become inactive after being removed from the registry.

2012-10-22  Adam Barth  <abarth@webkit.org>

        [V8] Vastly simplify V8GCController's NodeVisitor
        https://bugs.webkit.org/show_bug.cgi?id=99884

        Reviewed by Kentaro Hara.

        NodeVisitor was vastly more complicated than necessary.

        This patch improve performance on these new gc benchmarks:

        gc-forest: 1.14% better
        gc-mini-tree: 5.09% better
        gc-tree: 4.60% better

        * bindings/v8/V8GCController.cpp:
        (WebCore::ObjectVisitor::visitDOMWrapper):
        (WebCore::addImplicitReferencesForNodeWithEventListeners):
        (WebCore::rootForGC):
        (WebCore::NodeVisitor::visitDOMWrapper):
        (WebCore::NodeVisitor::applyGrouping):
        (NodeVisitor):

2012-10-22  Emil A Eklund  <eae@chromium.org>

        Change baselinePosition and maxAscent/maxDescent to int
        https://bugs.webkit.org/show_bug.cgi?id=99767

        Reviewed by Levi Weintraub.

        Currently baselinePostion, maxAscent and maxDescent are
        LayoutUnits while ascent, descent and m_lineHeight are ints.
        This can lead to subtle alignment and rounding problems.

        Change baselinePosition and maxAscent/maxDescent to int to avoid
        these issues.

        Test: fast/sub-pixel/replaced-element-baseline.html

        * editing/FrameSelection.cpp:
        (WebCore::repaintRectForCaret):
        Inflate Y dimension just like we do for X to ensure that the
        repaint rect fully contains the caret.

        * rendering/InlineBox.cpp:
        (WebCore::InlineBox::baselinePosition):
        * rendering/InlineBox.h:
        (InlineBox):
        * rendering/InlineFlowBox.cpp:
        (WebCore::InlineFlowBox::adjustMaxAscentAndDescent):
        (WebCore::InlineFlowBox::computeLogicalBoxHeights):
        (WebCore::InlineFlowBox::placeBoxesInBlockDirection):
        Change maxAscent/maxDescent to int to match ascent/descent.
        
        * rendering/InlineFlowBox.h:
        (InlineFlowBox):
        * rendering/InlineTextBox.cpp:
        (WebCore::InlineTextBox::baselinePosition):
        * rendering/InlineTextBox.h:
        (InlineTextBox):
        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::baselinePosition):
        (WebCore::RenderBlock::firstLineBoxBaseline):
        (WebCore::RenderBlock::lastLineBoxBaseline):
        * rendering/RenderBlock.h:
        (RenderBlock):
        * rendering/RenderBox.cpp:
        (WebCore::RenderBox::baselinePosition):
        * rendering/RenderBox.h:
        (WebCore::RenderBox::firstLineBoxBaseline):
        (WebCore::RenderBox::lastLineBoxBaseline):
        (RenderBox):
        * rendering/RenderBoxModelObject.h:
        (RenderBoxModelObject):
        * rendering/RenderFlexibleBox.cpp:
        (WebCore::RenderFlexibleBox::baselinePosition):
        (WebCore::RenderFlexibleBox::firstLineBoxBaseline):
        * rendering/RenderFlexibleBox.h:
        * rendering/RenderInline.cpp:
        (WebCore::RenderInline::baselinePosition):
        * rendering/RenderInline.h:
        (RenderInline):
        * rendering/RenderListBox.cpp:
        (WebCore::RenderListBox::baselinePosition):
        * rendering/RenderListBox.h:
        (RenderListBox):
        * rendering/RenderListMarker.cpp:
        (WebCore::RenderListMarker::baselinePosition):
        * rendering/RenderListMarker.h:
        (RenderListMarker):
        * rendering/RenderSlider.cpp:
        (WebCore::RenderSlider::baselinePosition):
        * rendering/RenderSlider.h:
        (RenderSlider):
        * rendering/RenderTable.cpp:
        (WebCore::RenderTable::baselinePosition):
        (WebCore::RenderTable::lastLineBoxBaseline):
        (WebCore::RenderTable::firstLineBoxBaseline):
        * rendering/RenderTable.h:
        (RenderTable):
        * rendering/RenderTableSection.cpp:
        (WebCore::RenderTableSection::firstLineBoxBaseline):
        * rendering/RenderTableSection.h:
        (RenderTableSection):
        * rendering/RenderTextControlMultiLine.cpp:
        (WebCore::RenderTextControlMultiLine::baselinePosition):
        * rendering/RenderTextControlMultiLine.h:
        (RenderTextControlMultiLine):
        * rendering/RenderTheme.cpp:
        (WebCore::RenderTheme::baselinePosition):
        * rendering/RenderTheme.h:
        (RenderTheme):
        * rendering/RenderThemeSafari.cpp:
        (WebCore::RenderThemeSafari::baselinePosition):
        * rendering/RenderThemeSafari.h:
        (RenderThemeSafari):
        * rendering/RootInlineBox.cpp:
        (WebCore::RootInlineBox::baselinePosition):
        (WebCore::RootInlineBox::alignBoxesInBlockDirection):
        * rendering/RootInlineBox.h:
        (RootInlineBox):
        * rendering/mathml/RenderMathMLBlock.cpp:
        (WebCore::RenderMathMLBlock::baselinePosition):
        (WebCore::RenderMathMLTable::firstLineBoxBaseline):
        * rendering/mathml/RenderMathMLBlock.h:
        (RenderMathMLBlock):
        (RenderMathMLTable):
        * rendering/mathml/RenderMathMLFraction.cpp:
        (WebCore::RenderMathMLFraction::firstLineBoxBaseline):
        * rendering/mathml/RenderMathMLFraction.h:
        (RenderMathMLFraction):
        * rendering/mathml/RenderMathMLOperator.cpp:
        (WebCore::RenderMathMLOperator::firstLineBoxBaseline):
        * rendering/mathml/RenderMathMLOperator.h:
        * rendering/mathml/RenderMathMLUnderOver.cpp:
        (WebCore::RenderMathMLUnderOver::firstLineBoxBaseline):
        * rendering/mathml/RenderMathMLUnderOver.h:
        (RenderMathMLUnderOver):

2012-10-22  Emil A Eklund  <eae@chromium.org>

        Modify LayoutState ASSERTS to support SATURATED_LAYOUT_ARITHMETIC
        https://bugs.webkit.org/show_bug.cgi?id=98692

        Reviewed by Dan Bernstein.

        We currently overflow/wrap when computing the delta in
        RenderBlock::setLogicalTopForChild in cases where we have an
        element with a width or height exceeding maxLayoutUnit. When
        the delta is later added back in RenderBlock::layoutBlockChild
        the number wraps again getting us back to the correct value.

        With SATURATED_LAYOUT_ARITHMETIC enabled the values no longer
        wraps, which seems like the correct thing to do however this
        causes the compare to fail for obvious reasons. By accounting
        for this we can keep the asserts (which have proven very
        helpful) even when SATURATED_LAYOUT_ARITHMETIC is turned on.

        No new tests, covered by existing tests.

        * rendering/LayoutState.cpp:
        (WebCore::LayoutState::LayoutState):
        * rendering/LayoutState.h:
        (WebCore::LayoutState::LayoutState):
        (LayoutState):
        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::layoutBlockChild):
        * rendering/RenderView.cpp:
        (WebCore::RenderView::layout):
        * rendering/RenderView.h:
        (WebCore::RenderView::addLayoutDelta):
        (RenderView):
        (WebCore::RenderView::layoutDeltaMatches):

2012-10-22  Tony Chang  <tony@chromium.org>

        Fix some baseline flexbox alignment
        https://bugs.webkit.org/show_bug.cgi?id=99879

        Reviewed by Ojan Vafai.

        Fix a bug where we weren't handling margin properly on inline-flexbox.
        Fix a bug where we weren't getting the edge of the content box properly when synthesizing
        a baseline.

        Test: css3/flexbox/flexbox-baseline-margins.html

        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::baselinePosition):
        (WebCore::RenderBlock::inlineBlockBaseline): Add a new method that is used when calculating an inline-block's
        baseline. Previously we would use lastLineBoxBaseline.
        (WebCore::RenderBlock::lastLineBoxBaseline): Pass in direction and when searching children, use inlineBlockBaseline.
        * rendering/RenderBlock.h:
        (RenderBlock): Make lastLineBoxBaseline non-virtual.
        * rendering/RenderBox.h:
        (WebCore::RenderBox::inlineBlockBaseline): Replace lastLineBoxBaseline with inlineBlockBaseline.
        * rendering/RenderFlexibleBox.cpp:
        (WebCore::synthesizedBaselineFromContentBox): Helper method for getting the baseline from the content box.
        (WebCore::RenderFlexibleBox::baselinePosition): Always include the margin. This fixes the inline-flexbox case.
        (WebCore::RenderFlexibleBox::firstLineBoxBaseline): Fix a case where we didn't synthesize a baseline.  Returning -1 means there is no baseline, but we can
        synthesize a baseline if we have a flexitem without text.
        (WebCore::RenderFlexibleBox::inlineBlockBaseline):
        * rendering/RenderFlexibleBox.h:
        * rendering/RenderTable.cpp: Replace lastLineBoxBaseline with inlineBlockBaseline.
        (WebCore::RenderTable::inlineBlockBaseline): Try to make comment more direct.
        * rendering/RenderTable.h:
        (RenderTable): Replace lastLineBoxBaseline with inlineBlockBaseline.

2012-10-22  Levi Weintraub  <leviw@chromium.org>

        Unreviewed Chromium build fix following r132074.

        * WebCore.gypi:

2012-10-22  Mario Sanchez Prada  <msanchez@igalia.com>

        [GTK] Don't use deprecated AccessibilityObject methods after r99502
        https://bugs.webkit.org/show_bug.cgi?id=99985

        Reviewed by Chris Fleizach.

        Update callers for AccessibilityObject's title() and
        accessibilityDescription() so they now use AccessibilityText.

        * accessibility/gtk/WebKitAccessibleUtil.cpp:
        (titleTagShouldBeUsedInDescriptionField): Internal helper function.
        (accessibilityTitle): New helper function, returns an String with
        the title for a AccessibilityObject, using AccessibleText.
        (accessibilityDescription): New helper function, returns an String with
        the description for a AccessibilityObject, using AccessibleText.
        * accessibility/gtk/WebKitAccessibleUtil.h: Added public
        declarations for accessibilityTitle and accessibilityDescription.

        * accessibility/gtk/WebKitAccessibleWrapperAtk.cpp:
        (webkitAccessibleGetName): Use new helpers for retrieving the title.
        (webkitAccessibleGetDescription): Use new helpers for retrieving
        the title and description.

        * accessibility/gtk/WebKitAccessibleInterfaceImage.cpp:
        (webkitAccessibleImageGetImageDescription): Use new helpers for
        retrieving the title.

2012-10-16  Andrey Kosyakov  <caseq@chromium.org>

        Web Inspector: add timeline instrumentation for scrolling of a layer
        https://bugs.webkit.org/show_bug.cgi?id=99461

        Reviewed by Pavel Feldman.

        - added timeline instrumentation for scrolling of a layer;
        - added TRACE_EVENT for ScrollableArea::scrollPositionChanged()

        * inspector/InspectorInstrumentation.cpp:
        (WebCore):
        (WebCore::InspectorInstrumentation::willScrollLayerImpl):
        (WebCore::InspectorInstrumentation::didScrollLayerImpl):
        * inspector/InspectorInstrumentation.h:
        (InspectorInstrumentation):
        (WebCore::InspectorInstrumentation::willScrollLayer):
        (WebCore):
        (WebCore::InspectorInstrumentation::didScrollLayer):
        * inspector/InspectorTimelineAgent.cpp:
        (TimelineRecordType):
        (WebCore::InspectorTimelineAgent::willScroll):
        (WebCore):
        (WebCore::InspectorTimelineAgent::didScroll):
        * inspector/InspectorTimelineAgent.h:
        (InspectorTimelineAgent):
        * inspector/front-end/TimelineModel.js:
        * inspector/front-end/TimelinePresentationModel.js:
        (WebInspector.TimelinePresentationModel._initRecordStyles):
        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::scrollTo):
        * platform/ScrollableArea.cpp:
        (WebCore::ScrollableArea::scrollPositionChanged):

2012-10-22  Jan Keromnes  <janx@linux.com>

        Moved cmdevtools.js to folder cm/

        Web Inspector: Move file `cmdevtools.css` to `cm/`
        https://bugs.webkit.org/show_bug.cgi?id=99956

        Reviewed by Pavel Feldman.

        The file cmdevtools.js belongs to the CodeMirror editor experiment in cm/.

        * WebCore.gypi:
        * WebCore.vcproj/WebCore.vcproj:
        * inspector/front-end/WebKit.qrc:
        * inspector/front-end/cm/cmdevtools.css: Renamed from Source/WebCore/inspector/front-end/cmdevtools.css.
        (.CodeMirror):
        (.CodeMirror-scroll):
        (.cm-highlight):
        (@-webkit-keyframes fadeout):
        (to):
        (.cm-breakpoint):
        (.cm-breakpoint-disabled):
        (.cm-breakpoint-conditional):
        (.cm-execution-line):
        (.cm-s-web-inspector-js span.cm-keyword):
        (.cm-s-web-inspector-js span.cm-number):
        (.cm-s-web-inspector-js span.cm-comment):
        (.cm-s-web-inspector-js span.cm-string):
        (.cm-s-web-inspector-js span.cm-string-2):
        (.cm-s-web-inspector-css span.cm-keyword):
        (.cm-s-web-inspector-css span.cm-number):
        (.cm-s-web-inspector-css span.cm-comment):
        (.cm-s-web-inspector-css span.cm-string):
        (.cm-s-web-inspector-css span.cm-string-2):
        (.cm-s-web-inspector-css span.cm-link):
        (.cm-s-web-inspector-css span.cm-variable):
        (.cm-s-web-inspector-html span.cm-meta):
        (.cm-s-web-inspector-html span.cm-comment):
        (.cm-s-web-inspector-html span.cm-string):
        (.cm-s-web-inspector-html span.cm-tag):
        (.cm-s-web-inspector-html span.cm-attribute):
        (.cm-s-web-inspector-html span.cm-link):
        (.webkit-html-message-bubble):
        (.webkit-html-warning-message):
        (.webkit-html-error-message):
        (.webkit-html-message-line):
        (.webkit-html-message-line-hover):

2012-10-22  Vsevolod Vlasov  <vsevik@chromium.org>

        Web Inspector: Prepare mappings to moving uiSourceCodes creation out of them to workspace.
        https://bugs.webkit.org/show_bug.cgi?id=99997

        Reviewed by Pavel Feldman.

        Source mappings could now store a link to temporary uiSourceCodes only.
        Otherwise it should retrieve uiSourceCodes from workspace by URL.
        Original uiSourceCodes are now temporary in CompilerScriptMapping.

        * inspector/front-end/CompilerScriptMapping.js:
        (WebInspector.CompilerScriptMapping):
        (WebInspector.CompilerScriptMapping.prototype.rawLocationToUILocation):
        (WebInspector.CompilerScriptMapping.prototype.loadSourceMapForScript):
        (WebInspector.CompilerScriptMapping.prototype._reset):
        * inspector/front-end/NetworkUISourceCodeProvider.js:
        (WebInspector.NetworkUISourceCodeProvider):
        (WebInspector.NetworkUISourceCodeProvider.prototype._parsedScriptSource):
        (WebInspector.NetworkUISourceCodeProvider.prototype._resourceAdded):
        (WebInspector.NetworkUISourceCodeProvider.prototype._addUISourceCode):
        (WebInspector.NetworkUISourceCodeProvider.prototype._projectWillReset):
        * inspector/front-end/SASSSourceMapping.js:
        (WebInspector.SASSSourceMapping):
        (_bindUISourceCode):
        (_reset):

2012-10-22  Nicolas Dufresne <nicolas.dufresne@collabora.com>

        Gstreamer 1.0 not working
        https://bugs.webkit.org/show_bug.cgi?id=99852

        Reviewed by Philippe Normand.

        There was a series of trivial issue, g_object_is_floating() was called
        on type GstCaps (which is not a GObject), webkitGstGetPadCaps() was
        returning non-fixed caps and GST_MESSAGE_DURATION has been renamed
        to GST_MESSAGE_DURATION_CHANGED.

        Most failing test passes now.

        * platform/graphics/gstreamer/GRefPtrGStreamer.cpp:
        (WTF::adoptGRef):
        * platform/graphics/gstreamer/GStreamerVersioning.cpp:
        (webkitGstGetPadCaps):
        * platform/graphics/gstreamer/MediaPlayerPrivateGStreamer.cpp:
        (WebCore::MediaPlayerPrivateGStreamer::handleMessage):

2012-10-22  Vsevolod Vlasov  <vsevik@chromium.org>

        Web Inspector: Treat dynamic anonymous scripts as other anonymous and fix anonymous script editing and breakpoints.
        https://bugs.webkit.org/show_bug.cgi?id=99989

        Reviewed by Pavel Feldman.

        Dynamic anonymous scripts are now mapped to anonymous temporary uiSourceCodes.
        ResourceScriptMapping now supports two types of temporary uiSourceCodes:
         - original uiSourceCodes represent scripts while main uiSourceCodes are diverged;
         - temporary uiSourceCodes represent scripts for which resources are not yet loaded.

        * inspector/front-end/BreakpointManager.js:
        (WebInspector.BreakpointManager.breakpointStorageId):
        (WebInspector.BreakpointManager.Storage.prototype._updateBreakpoint):
        * inspector/front-end/NetworkUISourceCodeProvider.js:
        (WebInspector.NetworkUISourceCodeProvider.prototype._parsedScriptSource):
        * inspector/front-end/ResourceScriptMapping.js:
        (WebInspector.ResourceScriptMapping):
        (WebInspector.ResourceScriptMapping.prototype.rawLocationToUILocation):
        (WebInspector.ResourceScriptMapping.prototype._hasMergedToVM):
        (WebInspector.ResourceScriptMapping.prototype.addScript):
        (WebInspector.ResourceScriptMapping.prototype._deleteOriginalUISourceCodeForScripts):
        (WebInspector.ResourceScriptMapping.prototype._deleteTemporaryUISourceCodeForScripts):
        (WebInspector.ResourceScriptMapping.prototype._bindUISourceCodeToScripts):
        (WebInspector.ResourceScriptMapping.prototype._createUISourceCode):
        (WebInspector.ResourceScriptMapping.prototype._getOrCreateTemporaryUISourceCode):
        (WebInspector.ResourceScriptMapping.prototype._getOrCreateOriginalUISourceCode):
        (WebInspector.ResourceScriptMapping.prototype._uiSourceCodeAddedToWorkspace):
        (WebInspector.ResourceScriptMapping.prototype._scriptsForUISourceCode.get if):
        (WebInspector.ResourceScriptMapping.prototype._reset):

2012-10-22  Bruno de Oliveira Abinader  <bruno.abinader@basyskom.com>

        [css3-text] Add rendering support for -webkit-text-decoration-style
        https://bugs.webkit.org/show_bug.cgi?id=94094

        Reviewed by Julien Chaffraix.

        This patch implements the "text-decoration-style" property rendering as
        specified in CSS3 working draft, with "-webkit-" prefix. The specification can
        be found here: http://dev.w3.org/csswg/css3-text/#text-decoration-style

        Additionally, Mozilla implementation details can be found here:
        https://developer.mozilla.org/en/CSS/text-decoration-style

        Tests: fast/css3-text/css3-text-decoration/repaint/repaint-text-decoration-style.html
               fast/css3-text/css3-text-decoration/text-decoration-style.html

        * platform/graphics/GraphicsContext.h:
        * platform/graphics/cairo/GraphicsContextCairo.cpp:
        (WebCore::GraphicsContext::setPlatformStrokeStyle):
        * platform/graphics/cg/GraphicsContextCG.cpp:
        (WebCore::GraphicsContext::drawLine):
        * platform/graphics/qt/GraphicsContextQt.cpp:
        (WebCore::toQPenStyle):
        (WebCore::GraphicsContext::drawLine):
        * platform/graphics/skia/PlatformContextSkia.cpp:
        (WebCore::PlatformContextSkia::setupPaintForStroking):
        * platform/graphics/wince/GraphicsContextWinCE.cpp:
        (WebCore::createPen):
        * platform/graphics/wx/GraphicsContextWx.cpp:
        (WebCore::strokeStyleToWxPenStyle):
        Added 'DoubleStroke' and 'WavyStroke' to StrokeStyle enum and updated
        platform-specific stroke handling. Some styles requires
        platform-specific implementation (handled in bug 92868).
        * rendering/InlineTextBox.cpp:
        (WebCore::InlineTextBox::paint):
        (WebCore::textDecorationStyleToStrokeStyle): Added static function that
        translates text decoration to stroke styles.
        (WebCore::InlineTextBox::paintDecoration): Text decoration style does
        not specify a property for line thickness (like border-width does for
        border style), so we statically set it to 1 for now. The 'double' style
        implementation simply adds a parallel line (depending if it is
        underline, overline or line-through) and the space between lines follows
        the approach used by border's 'double' style.
        * rendering/InlineTextBox.h:
        (InlineTextBox):
        * rendering/style/RenderStyle.h:
        * rendering/style/RenderStyleConstants.h:
        Added text decoration style rendering support to
        InlineTextBox::paintDecoration().

2012-10-22  Allan Sandfeld Jensen  <allan.jensen@digia.com>

        [Qt] Use the DNS resolve queue
        https://bugs.webkit.org/show_bug.cgi?id=99994

        Reviewed by Simon Hausmann.

        Use the DNS resolve queue, to ensure we can prefetch more than just the first 10 hostname encountered
        during parsing. It also ensure each hostname is only appears once in the queue.

        * Target.pri:
        * platform/network/qt/DNSQt.cpp: Added.
        (DnsPrefetchHelper):
        (WebCore::DnsPrefetchHelper::DnsPrefetchHelper):
        (WebCore::DnsPrefetchHelper::lookup):
        (WebCore::DnsPrefetchHelper::lookedUp):
        (WebCore::prefetchDNS):
        (WebCore::DNSResolveQueue::platformProxyIsEnabledInSystemPreferences):
        (WebCore::DNSResolveQueue::platformResolve):
        * platform/network/qt/DnsPrefetchHelper.cpp: Removed.
        * platform/network/qt/DnsPrefetchHelper.h: Removed.
        (DnsPrefetchHelper):

2012-10-22  Erik Arvidsson  <arv@chromium.org>

        HTMLBaseElement href attribute binding returns wrong URL
        https://bugs.webkit.org/show_bug.cgi?id=98184

        Reviewed by Ojan Vafai.

        Resolve the href attribute binding relative to the document URL instead of resolving it to the
        base element itself. If there is no href attribute this should return the fallback base URL.

        http://www.whatwg.org/specs/web-apps/current-work/multipage/semantics.html#the-base-element

        Tests: fast/dom/HTMLAnchorElement/set-href-attribute-rebase.html
               fast/dom/HTMLBaseElement/href-attribute-resolves-with-respect-to-document.html

        * html/HTMLBaseElement.cpp:
        (WebCore::HTMLBaseElement::href): Don't use completeURL. Resolve href based on document's URL instead
        of the generic [Reflect, URL] binding.
        (WebCore::HTMLBaseElement::setHref): Just sets the attribute.
        * html/HTMLBaseElement.h:
        * html/HTMLBaseElement.idl: We can no longer use [Reflect, URL]

2012-10-22  Vsevolod Vlasov  <vsevik@chromium.org>

        Web Inspector: Revisions should not be restored and persisted for anonymous uiSourceCodes.
        https://bugs.webkit.org/show_bug.cgi?id=99991

        Reviewed by Alexander Pavlov.

        * inspector/front-end/UISourceCode.js:
        (WebInspector.UISourceCode):

2012-10-22  Florin Malita  <fmalita@chromium.org>

        Incorrect embedded SVG image sizing on first load
        https://bugs.webkit.org/show_bug.cgi?id=99489

        Reviewed by Nikolas Zimmermann.

        RenderSVGImage::updateImageViewport() must be called after the image loader is finished,
        to ensure that a SVGImageCache::SizeAndScalesMap entry is created even if layout has
        already been performed.

        Test: svg/custom/svg-image-initial-size.html

        * rendering/svg/RenderSVGImage.cpp:
        (WebCore::RenderSVGImage::imageChanged):

2012-10-22  Keishi Hattori  <keishi@webkit.org>

        Remove monthFormatInLDML
        https://bugs.webkit.org/show_bug.cgi?id=99971

        Reviewed by Kent Tamura.

        Removing monthFormatInLDML from localized strings because Localizer class now provides the same functionality.

        No new tests. Just removing unused code.

        * platform/LocalizedStrings.h:
        (WebCore):

2012-10-22  Zan Dobersek  <zandobersek@gmail.com>

        [GTK] Enable Microdata DOM API
        https://bugs.webkit.org/show_bug.cgi?id=99033

        Reviewed by Martin Robinson.

        Enable the Microdata DOM API, but still disable it when the unstable
        features should be disabled (for instance in release builds).

        No new tests - related tests are being unskipped and are expected to pass.

        * GNUmakefile.am:
        * GNUmakefile.features.am:
        * bindings/gobject/GNUmakefile.am: Add the required files so the Microdata
        API GObject bindings are generated and built.

2012-10-22  Zan Dobersek  <zandobersek@gmail.com>

        [GTK] Enable CSP 1.1
        https://bugs.webkit.org/show_bug.cgi?id=99064

        Reviewed by Martin Robinson.

        Enable CSP 1.1 in development builds but keep it disabled when the
        unstable features should not be enabled (like in stable releases).

        No new tests - they already exist and will be unskipped.

        * GNUmakefile.am:
        * GNUmakefile.features.am:

2012-10-22  Jocelyn Turcotte  <jocelyn.turcotte@digia.com>

        [Qt] Fix "ASSERTION FAILED: !document->inPageCache()" when loading a page
        https://bugs.webkit.org/show_bug.cgi?id=98514

        Reviewed by Kenneth Rohde Christiansen.

        The problem is that we call setFixedVisibleContentRect, which triggers
        a layout, after the document has been put in the page cache and before
        the load has been actually committed.

        This applies the same trick as with setFixedLayoutSize by passing the rect
        in Frame::createView and calling setFixedVisibleContentRect before the
        new FrameView gets attached to the Frame/Document to prevent the layout.

        * WebCore.exp.in:
        * page/Frame.cpp:
        (WebCore::Frame::createView): Give a default value to the fixedLayoutSize and
        useFixedLayout arguments as well since they are used exceptionally.
        * page/Frame.h:
        (Frame):

2012-10-22  Allan Sandfeld Jensen  <allan.jensen@digia.com>

        [Qt] Handle GET of blob URLs.
        https://bugs.webkit.org/show_bug.cgi?id=99053

        Reviewed by Simon Hausmann.

        Let BlobResourceHandle handle Blob request internally.

        * platform/network/qt/ResourceHandleQt.cpp:
        (WebCore::ResourceHandle::loadResourceSynchronously):

2012-10-22  Kenichi Ishibashi  <bashi@chromium.org>

        HarfBuzzShaper::shape() should return false when it adds no glyph to GlyphBuffer
        https://bugs.webkit.org/show_bug.cgi?id=99966

        Reviewed by Kent Tamura.

        If no glyph is added to GlyphBuffer, HarfBuzzShaper::shape() returns false.

        No new tests. Confirmed the fix by using Address Sanitizer.

        * platform/graphics/harfbuzz/ng/HarfBuzzShaper.cpp:
        (WebCore::HarfBuzzShaper::shape):
        (WebCore::HarfBuzzShaper::fillGlyphBuffer): Returns false when glyphBuffer.size() == 0
        * platform/graphics/harfbuzz/ng/HarfBuzzShaper.h:
        (HarfBuzzShaper):

2012-10-22  Shinya Kawanaka  <shinyak@chromium.org>

        [Shadow] ASSERT triggered when we try reprojecting fallback elements.
        https://bugs.webkit.org/show_bug.cgi?id=99815

        Reviewed by Hajime Morita.

        When fallback elements of InsertionPoint is reprojected, they were attached twice.
        We have to skip attaching them if they are attached. We also add a few ASSERT not to
        allow attaching twice if not necessary.

        We have confirmed that this patch does not regress the performance. The summary of the
        performance test is the following:

        Dromaeo/dom-modify.html [runs/s]:
                               median stdev    min    max
           without this patch:   3928   184   3655   4361
           with this patch   :   3925   178   3652   4350

        Parser/html5-full-render.html [s]:
                               median stdev    min    max
           without this patch:   3821    17   3811   3850
           with this patch   :   3838   4.4   3833   3844

        Test: fast/dom/shadow/content-reprojection-fallback-crash.html

        * dom/ContainerNode.cpp:
        (WebCore):
        (WebCore::childAttachedAllowedWhenAttachingChildren): If true, children of this node might
        be attached in advance because of ShadowDOM attaching process.
        * dom/ContainerNode.h:
        (ContainerNode):
        (WebCore):
        (WebCore::ContainerNode::attachChildren):
        * dom/Element.cpp:
        (WebCore::Element::attach):
        * dom/ShadowRoot.cpp:
        (WebCore::ShadowRoot::attach):

2012-10-22  Pavel Feldman  <pfeldman@chromium.org>

        Web Inspector: merge "docked" state into the "dock side" enum.
        https://bugs.webkit.org/show_bug.cgi?id=99717

        Reviewed by Vsevolod Vlasov.

        Otherwise, it is hard to manage these inter-dependent flags.

        * WebCore.exp.in:
        * inspector/InspectorFrontendClient.h:
        (InspectorFrontendClient):
        * inspector/InspectorFrontendClientLocal.cpp:
        (WebCore::InspectorFrontendClientLocal::requestSetDockSide):
        (WebCore::InspectorFrontendClientLocal::setAttachedWindow):
        * inspector/InspectorFrontendClientLocal.h:
        (InspectorFrontendClientLocal):
        * inspector/InspectorFrontendHost.cpp:
        (WebCore::InspectorFrontendHost::requestSetDockSide):
        * inspector/InspectorFrontendHost.h:
        (InspectorFrontendHost):
        * inspector/InspectorFrontendHost.idl:
        * inspector/front-end/DockController.js:
        (WebInspector.DockController):
        (WebInspector.DockController.prototype._updateUI.get sides):
        (WebInspector.DockController.prototype._updateUI):
        (WebInspector.DockController.prototype._toggleDockState):
        * inspector/front-end/InspectorFrontendAPI.js:
        (InspectorFrontendAPI.setAttachedWindow):
        (InspectorFrontendAPI.setDockSide):
        * inspector/front-end/InspectorFrontendHostStub.js:
        (.WebInspector.InspectorFrontendHostStub.prototype.requestSetDockSide):
        * inspector/front-end/externs.js:

2012-10-22  MORITA Hajime  <morrita@google.com>

        Unreviewed follow up to update test result after r132033.

        * bindings/scripts/test/V8/V8TestObj.cpp:
        (WebCore::V8TestObj::installPerContextProperties):

2012-10-21  MORITA Hajime  <morrita@google.com>

        [V8] V8EnablePerContext shouldn't require document() accessor to the native object.
        https://bugs.webkit.org/show_bug.cgi?id=99954

        Reviewed by Kentaro Hara.

        It now refers ScriptExecutionContext of the creation context instead of document() of
        wrapped object.

        No new tests. No behavior change at this time.

        * bindings/scripts/CodeGeneratorV8.pm:
        (GenerateImplementation):

2012-10-21  Kent Tamura  <tkent@chromium.org>

        Page popup: Fix crash by events after closing
        https://bugs.webkit.org/show_bug.cgi?id=99951

        Reviewed by Hajime Morita.

        WebCore should provide a way to uninstall a DOMWindowPagePopup supplement.

        No new tests. The bug is timing-dependent.

        * page/DOMWindowPagePopup.cpp:
        (WebCore::DOMWindowPagePopup::uninstall):
        Added. Calls Supplementable::removeSupplement.
        * page/DOMWindowPagePopup.h:
        (DOMWindowPagePopup): Declare uninstall.
        * platform/Supplementable.h:
        (WebCore::Supplementable::removeSupplement): Added.

2012-10-21  Keishi Hattori  <keishi@webkit.org>

        Refactor picker tests to fix flakiness and share code
        https://bugs.webkit.org/show_bug.cgi?id=99671

        Reviewed by Kent Tamura.

        Disable transitions until the picker is fully ready. This should fix flakiness.

        No new tests.

        * Resources/pagepopups/calendarPicker.css:
        (.preparing .unavailable): Disable transitions.
        (.preparing .available): Disable transitions.
        * Resources/pagepopups/calendarPicker.js:
        (CalendarPicker): Set "preparing" class.
        (CalendarPicker.prototype._handleWindowResize): Remove the "preparing" class when the window finishes resizing.

2012-10-21  Shinya Kawanaka  <shinyak@chromium.org>

        Web Inspector: Shadow DOM: Node removal doesn't reflect.
        https://bugs.webkit.org/show_bug.cgi?id=99567

        Reviewed by Pavel Feldman.

        We have to call InspectorInstrumentation::willRemoveDOMNode() even if a node is in a shadow tree.
        Otherwise, node won't be removed from the inspector.

        Test: inspector/elements/update-shadowdom.html

        * dom/ContainerNode.cpp:
        (WebCore::dispatchChildRemovalEvents):

2012-10-21  Andreas Kling  <kling@webkit.org>

        Remove Page::javaScriptURLsAreAllowed setting.
        <http://webkit.org/b/99944>

        Reviewed by Anders Carlsson.

        This setting was exposed through internal WebView API in Apple's WebKit1.
        There are no longer any clients of that API.

        This is a step towards preventing elements from modifying their own attributes
        below attributeChanged().

        * WebCore.exp.in:
        * WebCore.order:
        * bindings/ScriptControllerBase.cpp:
        (WebCore::ScriptController::executeIfJavaScriptURL):
        * html/HTMLAnchorElement.cpp:
        (WebCore::HTMLAnchorElement::parseAttribute):
        * page/Page.cpp:
        (WebCore::Page::Page):
        * page/Page.h:
        (Page):

2012-10-21  Hyungchan Kim  <hyungchan2.kim@lge.com>

        Add a separate flag for rgb swizzling whether it can be modified or not
        https://bugs.webkit.org/show_bug.cgi?id=98728

        BitmapTexture swizzles the source image if the OpenGL driver
        doesn't support the BGRA extension.
        In case of directly composited images, the source image should not
        be modified.

        http://www.satine.org/research/webkit/snowleopard/snowstack.html

        Reviewed by Noam Rosenthal.

        No new tests as this is only testable on specific hardware and
        currently not avaiable in the bots.

        * platform/graphics/texmap/TextureMapper.h:
        (BitmapTexture):
        * platform/graphics/texmap/TextureMapperBackingStore.cpp:
        (WebCore::TextureMapperTile::updateContents):
        (WebCore::TextureMapperTiledBackingStore::updateContentsFromImageIfNeeded):
        (WebCore::TextureMapperTiledBackingStore::updateContents):
        * platform/graphics/texmap/TextureMapperBackingStore.h:
        (TextureMapperTile):
        (TextureMapperTiledBackingStore):
        (WebCore::TextureMapperTiledBackingStore::updateContents):
        * platform/graphics/texmap/TextureMapperGL.cpp:
        (WebCore::TextureMapperGL::drawRepaintCounter):
        (WebCore::BitmapTextureGL::updateContents):
        * platform/graphics/texmap/TextureMapperGL.h:
        (BitmapTextureGL):
        * platform/graphics/texmap/TextureMapperImageBuffer.cpp:
        (WebCore::BitmapTextureImageBuffer::updateContents):
        * platform/graphics/texmap/TextureMapperImageBuffer.h:
        (BitmapTextureImageBuffer):
        * platform/graphics/texmap/TextureMapperLayer.cpp:
        (WebCore::TextureMapperLayer::updateBackingStore):

2012-10-21  Antti Koivisto  <antti@apple.com>

        Factor stylesheet invalidation analysis code into a class
        https://bugs.webkit.org/show_bug.cgi?id=99933

        Reviewed by Sam Weinig.

        Currently the stylesheet analysis code is all over the place. It should be factored into a class to make
        further progress easier.

        The patch adds StyleInvalidationAnalysis class and moves a bunch of code from SelectorChecker, StyleResolver
        and DocumentStyleSheetCollection there. No functional changes.

        * CMakeLists.txt:
        * GNUmakefile.list.am:
        * Target.pri:
        * WebCore.gypi:
        * WebCore.vcproj/WebCore.vcproj:
        * WebCore.xcodeproj/project.pbxproj:
        * css/SelectorChecker.cpp:
        (WebCore):
        * css/SelectorChecker.h:
        (WebCore):
        * css/StyleInvalidationAnalysis.cpp: Added.
        (WebCore):
        (WebCore::StyleInvalidationAnalysis::StyleInvalidationAnalysis):
        (WebCore::StyleInvalidationAnalysis::create):
        (WebCore::determineSelectorScopes):
        (WebCore::StyleInvalidationAnalysis::analyzeStyleSheet):
        (WebCore::elementMatchesSelectorScopes):
        (WebCore::StyleInvalidationAnalysis::invalidateStyle):
        * css/StyleInvalidationAnalysis.h: Added.
        (WebCore):
        (StyleInvalidationAnalysis):
        (WebCore::StyleInvalidationAnalysis::dirtiesAllStyle):
        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::checkRegionSelector):
        * css/StyleResolver.h:
        (StyleResolver):
        * dom/DocumentStyleSheetCollection.cpp:
        (WebCore):
        (WebCore::DocumentStyleSheetCollection::analyzeStyleSheetChange):
        * dom/DocumentStyleSheetCollection.h:
        (DocumentStyleSheetCollection):

2012-10-08  Robert Hogan  <robert@webkit.org>

        In some float situations, the original layout is wrong and only corrects itself on repaint
        https://bugs.webkit.org/show_bug.cgi?id=18939

        Reviewed by Levi Weintraub.

        A <br> that follows collapsing spaces and has clearance set always needs to get a run and a linebox of its own.
        This allows the line below it to check for clearance from the <br> if it gets dirtied but the line with the <br>
        does not.

        Test: fast/block/br-with-clearance-after-collapsing-space.html

        * rendering/RenderBlockLineLayout.cpp:
        (WebCore::RenderBlock::LineBreaker::nextLineBreak):

2012-10-08  Robert Hogan  <robert@webkit.org>

        floated element with negative margin causes text wrap bug
        https://bugs.webkit.org/show_bug.cgi?id=94825

        Reviewed by Levi Weintraub.

        Avoid over-estimating the available width on the line by ensuring that the offset taken to avoid
        floats on the line is at least as much as the offset given by border, margin and padding. This only
        happens when a negative margin on the float brings its edge back before the offset
        given by the border, margin and padding of its parents.

        Test: fast/block/float/float-on-line-obeys-container-padding.html

        * rendering/RenderBlockLineLayout.cpp:
        (WebCore::LineWidth::shrinkAvailableWidthForNewFloatIfNeeded):

2012-10-20  Martin Robinson  <mrobinson@igalia.com>

        Fix 'make dist' for the GTK+ port

        * GNUmakefile.am: Add missing files to the source list.
        * GNUmakefile.list.am: Ditto.

2012-10-20  Dan Bernstein  <mitz@apple.com>

        <rdar://problem/12512710> [mac] Text with zero font size renders as 12px sometimes
        https://bugs.webkit.org/show_bug.cgi?id=99918

        Reviewed by Geoff Garen.

        -[NSFont fontWithName:size:] returns an NSFont of size 12 (the default User Font size) when
        asked for size 0, and this is what Font::drawGlyphs uses to draw the text.

        Test: fast/text/zero-font-size-2.html

        * platform/graphics/mac/FontMac.mm:
        (WebCore::Font::drawGlyphs): Added an early return if the size is zero.

2012-10-20  Andreas Kling  <kling@webkit.org>

        Clean up QualifiedName-as-hash-key scenario.
        <http://webkit.org/b/99394>

        Reviewed by Anders Carlsson.

        Cache the hash on QualifiedNameImpl after the first time it's computed.
        This grows QualifiedNameImpl by 4 bytes on 32-bit (no change on 64-bit due to base class padding)
        which I believe is fine, since QualifiedName is a shared object.

        Add a global nullQName() function that returns a QualifiedName(nullAtom, nullAtom, nullAtom)
        and use this to implement HashTraits<QualifiedName>::emptyValue(). The old implementation would
        create a new QualifiedName(nullAtom, nullAtom, nullAtom) each time, which had to be hashed,
        added to  the global QualifiedName cache, etc.

        Finally, don't have SVGAttributeHashTranslator create a temporary QualifiedName just to compute
        the hash of a (namespace, prefix, localName) tuple, use QualifiedNameComponents and hashComponents()
        directly instead.

        Altogether this shaves ~100ms off of the RoboHornet svgresize.html benchmark on my MBP.

        * dom/QualifiedName.cpp:
        (WebCore::nullQName):
        (WebCore::QualifiedName::QualifiedNameImpl::computeHash):
        * dom/QualifiedName.h:
        (QualifiedNameImpl):
        (WebCore::QualifiedName::QualifiedNameImpl::QualifiedNameImpl):
        (WebCore::QualifiedNameHash::hash):
        * svg/SVGElement.h:
        (WebCore::SVGAttributeHashTranslator::hash):

2012-10-20  Yael Aharon  <yael.aharon@intel.com>

        [EFL][AC] Build fix after r131933
        https://bugs.webkit.org/show_bug.cgi?id=99901

        Reviewed by Kentaro Hara.

        Add ArrayBoundsClamper.cpp to WebCore/CMakeLists.txt.

        No new tests.

        * CMakeLists.txt:

2012-10-19  Adam Barth  <abarth@webkit.org>

        [V8] V8DOMWrapper should avoid using its document parameter (so we can remove it soon)
        https://bugs.webkit.org/show_bug.cgi?id=99876

        Reviewed by Kentaro Hara.

        We want to remove the document parameter to instantiateV8Object. There
        isn't always a Document available, so it doesn't make sense to pass it
        as a parameter. We're just waiting for a V8 API change so we can still
        construct Node wrappers quickly.

        This patch removes a use of the document that snuck in. Rather than
        passing the ScriptExecutionContext around, we get it from the
        CreationContext of the prototype object (and only when we actually need
        it).

        * Modules/notifications/NotificationCenter.cpp:
        * Modules/notifications/NotificationCenter.h:
        (NotificationCenter):
        * bindings/scripts/CodeGeneratorV8.pm:
        (GenerateHeader):
        (GenerateConstructorGetter):
        (GenerateImplementation):
        (GenerateToV8Converters):
        * bindings/v8/V8DOMWindowShell.cpp:
        (WebCore::V8DOMWindowShell::installDOMWindow):
        * bindings/v8/V8DOMWrapper.cpp:
        (WebCore::V8DOMWrapper::instantiateV8Object):
        * bindings/v8/V8PerContextData.cpp:
        (WebCore::V8PerContextData::createWrapperFromCacheSlowCase):
        (WebCore::V8PerContextData::constructorForTypeSlowCase):
        * bindings/v8/V8PerContextData.h:
        (WebCore::V8PerContextData::createWrapperFromCache):
        (WebCore::V8PerContextData::constructorForType):
        (V8PerContextData):
        * bindings/v8/WorkerContextExecutionProxy.cpp:
        (WebCore::WorkerContextExecutionProxy::initializeIfNeeded):
        * bindings/v8/WrapperTypeInfo.h:
        (WebCore):
        (WebCore::WrapperTypeInfo::installPerContextPrototypeProperties):

2012-10-19  Florin Malita  <fmalita@chromium.org>

        Incorrect pattern scaling
        https://bugs.webkit.org/show_bug.cgi?id=99870

        Reviewed by Dirk Schulze.

        The pattern space transform scale should reflect the tile_size(user space)
        to tile_image_size ratio, instead of tile_size to absolute_tile_size.

        Test: svg/custom/pattern-scaling.svg

        * rendering/svg/RenderSVGResourcePattern.cpp:
        (WebCore::RenderSVGResourcePattern::applyResource):

2012-10-19  Tony Chang  <tony@chromium.org>

        RenderFlexibleBox::preferredMainAxisContentExtentForChild can return a negative value
        https://bugs.webkit.org/show_bug.cgi?id=97827

        Reviewed by Ojan Vafai.

        I'm pretty sure this isn't possible (logicalHeight and maxPreferredLogicalWidth should always include
        border and padding), so just add an assert.

        No new tests, the assert is for code clarity.

        * rendering/RenderFlexibleBox.cpp:
        (WebCore::RenderFlexibleBox::preferredMainAxisContentExtentForChild):

2012-10-19  Tony Chang  <tony@chromium.org>

        Replace calls to updateLogicalHeight with calls to computeLogicalHeight
        https://bugs.webkit.org/show_bug.cgi?id=99883

        Reviewed by Ojan Vafai.

        In RenderBox and RenderBlock, switch to using computeLogicalHeight instead of
        saving the old height, calling update logical height, then restoring the old height.

        No new tests, this is just a refactoring.

        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::computeBlockPreferredLogicalWidths): Simple replace.
        * rendering/RenderBox.cpp:
        (WebCore::RenderBox::computePercentageLogicalHeight): Adjust for content height.
        (WebCore::RenderBox::computeReplacedLogicalHeightUsing): Adjust for content height.
        (WebCore::RenderBox::availableLogicalHeightUsing): Adjust for content height.

2012-10-19  Pablo Flouret  <pablof@motorola.com>

        Implement setRangeText() on text controls
        https://bugs.webkit.org/show_bug.cgi?id=91907

        Reviewed by Kent Tamura.

        setRangeText() replaces a range of text with some other text, and
        adjusts the existing selection according to its parameters.

        Spec: http://www.whatwg.org/specs/web-apps/current-work/multipage/association-of-controls-and-forms.html#dom-textarea/input-setrangetext

        Tests: fast/forms/color/color-setrangetext.html
               fast/forms/date/date-setrangetext.html
               fast/forms/datetime/datetime-setrangetext.html
               fast/forms/datetimelocal/datetimelocal-setrangetext.html
               fast/forms/file/file-setrangetext.html
               fast/forms/hidden/hidden-setrangetext.html
               fast/forms/image/image-setrangetext.html
               fast/forms/month/month-setrangetext.html
               fast/forms/number/number-setrangetext.html
               fast/forms/range/range-setrangetext.html
               fast/forms/search/search-setrangetext.html
               fast/forms/setrangetext.html
               fast/forms/textarea/textarea-setrangetext.html
               fast/forms/time/time-setrangetext.html
               fast/forms/week/week-setrangetext.html


        * bindings/scripts/CodeGeneratorGObject.pm:
        (SkipFunction):
            The GObject generator doesn't support function overloads, so skip the
            version of setRangeText() that has only one argument, its behavior
            can be emulated with the four-argument version.

        * html/InputType.cpp:
        (WebCore::InputType::supportsSelectionAPI):
        (WebCore):
        * html/InputType.h:
        (InputType):
            Add supportsSelectionAPI() which indicates whether the various
            selection api functions like setRangeText, setSelectionRange, etc.
            are supported by this input element.

        * html/BaseTextInputType.cpp:
        (WebCore::BaseTextInputType::supportsSelectionAPI):
        (WebCore):
        * html/BaseTextInputType.h:
        (BaseTextInputType):
            Text-based input types support the selection APIs.

        * html/EmailInputType.cpp:
        (WebCore::EmailInputType::supportsSelectionAPI):
        (WebCore):
        * html/EmailInputType.h:
        (EmailInputType):
            Email inputs don't support the selection APIs.

        * html/HTMLInputElement.cpp:
        (WebCore::HTMLInputElement::setRangeText):
        * html/HTMLInputElement.h:
        (HTMLInputElement):
            Add a setRangeText override which checks if it should apply to the
            input type, and calls the actual implementation on the parent class.
        * html/HTMLInputElement.idl:
        * html/HTMLTextAreaElement.idl:

        * html/HTMLTextFormControlElement.cpp:
        (WebCore::HTMLTextFormControlElement::setRangeText):
        * html/HTMLTextFormControlElement.h:
        (HTMLTextFormControlElement):
            setRangeText implementation.


2012-10-19  Luke Macpherson   <macpherson@chromium.org>

        Remove HANDLE_INHERIT_AND_INITIAL_AND_PRIMITIVE macro in StyleResolver.
        https://bugs.webkit.org/show_bug.cgi?id=99782

        Reviewed by Sam Weinig.

        Removes last usage of HANDLE_INHERIT_AND_INITIAL_AND_PRIMITIVE macro, so that in future there will be no temptation
        to use it instead of adding a line to StyleBuilder.
        Also removes redundant checks for inital and inherit (HANDLE_INHERIT_AND_INTIAL already returns in those cases).
        I don't want to move this code into StyleBuilder until the FIXME that is already there is fixed.

        Covered by many existing writing mode tests (eg. fast/html/details-writing-mode.html)

        * css/StyleResolver.cpp:
        (WebCore):
        (WebCore::StyleResolver::applyProperty):

2012-10-19  Joshua Bell  <jsbell@chromium.org>

        IndexedDB: Hidden indexing events are visible to script via bubbling/capture
        https://bugs.webkit.org/show_bug.cgi?id=96566

        Reviewed by Tony Chang.

        Stop propagation of error events fired at internal indexing requests as a result of
        aborting, as they should not be visible to scripts.

        Test: storage/indexeddb/index-population.html

        * Modules/indexeddb/IDBObjectStore.cpp:
        (WebCore::IDBObjectStore::createIndex):
        * Modules/indexeddb/IDBRequest.cpp:
        (WebCore::IDBRequest::IDBRequest):
        (WebCore::IDBRequest::dispatchEvent):
        * Modules/indexeddb/IDBRequest.h:
        (WebCore::IDBRequest::preventPropagation):
        (IDBRequest):

2012-10-19  Simon Fraser  <simon.fraser@apple.com>

        Remove .get() calls in assertions as suggested by Darin Adler.
        
        * platform/graphics/ca/mac/PlatformCALayerMac.mm:
        (PlatformCALayer::appendSublayer):
        (PlatformCALayer::insertSublayer):
        (PlatformCALayer::replaceSublayer):

2012-10-19  Simon Fraser  <simon.fraser@apple.com>

        Fix a hang when combining tile cache layers with preserve-3d or reflections
        https://bugs.webkit.org/show_bug.cgi?id=99890
        <rdar://problem/12539560>

        Reviewed by Dean Jackson.

        The new tile cache code added an updateSublayers() call when switching to/from
        tiled layers. This confused later sublayer rebuilding, causing us to attempt to
        add a layer as a child of itself, causing a hang in CA.
        
        Fix by removing all the explicit calls to updateFoo when updating the structural
        layer and switching to/from tiled layers. Instead, we set dirty flags, and rely
        on the fact that these flag-dirtying functions get called before the later functions
        that process those dirty flags. This is assured by some reordering of the update
        function calls.
        
        A final wrinkle is that ensureStructuralLayer() can change the layer that our
        parent GraphicsLayer put in its sublayer list. Rather than diddle with that sublayer
        list directly like we used to, just call noteSublayersChanged() on the parent, and have
        commitLayerChangesAfterSublayers() check the ChildrenChanged and do a second update
        of sublayers if necessary (we clear the flag in commitLayerChangesBeforeSublayers(), so
        only do this work if a sublayer requested it).
        
        Tests: compositing/tiling/preserve3d-tiled.html
               compositing/tiling/reflected-tiled.html

        * platform/graphics/ca/GraphicsLayerCA.cpp:
        (WebCore::GraphicsLayerCA::commitLayerChangesBeforeSublayers):
        (WebCore::GraphicsLayerCA::commitLayerChangesAfterSublayers):
        (WebCore::GraphicsLayerCA::ensureStructuralLayer):
        (WebCore::GraphicsLayerCA::swapFromOrToTiledLayer):
        * platform/graphics/ca/mac/PlatformCALayerMac.mm:
        (PlatformCALayer::appendSublayer): Add assertion about adding a layer to itself.
        (PlatformCALayer::insertSublayer): Ditto.
        (PlatformCALayer::replaceSublayer): Ditto.

2012-10-19  Chris Fleizach  <cfleizach@apple.com>

        AX: aria-hidden=false does not work as expected
        https://bugs.webkit.org/show_bug.cgi?id=98787

        Reviewed by Beth Dakin.

        ARIA requires that aria-hidden=false override an element's native visibility and include that
        node in the AX hierarchy.

        To accomplish this we have to allow invisible items to be included, as well as items that
        have no renderers associated with them.

        Test: accessibility/aria-hidden-negates-no-visibility.html

        * accessibility/AXObjectCache.cpp:
        (WebCore::AXObjectCache::getOrCreate):
        * accessibility/AccessibilityARIAGrid.cpp:
        (WebCore::AccessibilityARIAGrid::addTableCellChild):
        (WebCore::AccessibilityARIAGrid::addChildren):
        * accessibility/AccessibilityARIAGrid.h:
        (AccessibilityARIAGrid):
        * accessibility/AccessibilityNodeObject.cpp:
        (WebCore):
       (WebCore::AccessibilityNodeObject::boundingBoxRect):
        (WebCore::AccessibilityNodeObject::insertChild):
        (WebCore::AccessibilityNodeObject::addChild):
        (WebCore::AccessibilityNodeObject::addChildren):
        (WebCore::AccessibilityNodeObject::textUnderElement):
        * accessibility/AccessibilityNodeObject.h:
        (AccessibilityNodeObject):
        * accessibility/AccessibilityObject.cpp:
        (WebCore::AccessibilityObject::textIteratorBehaviorForTextRange):
        (WebCore):
        * accessibility/AccessibilityObject.h:
        (AccessibilityObject):
        (WebCore::AccessibilityObject::addChild):
        (WebCore::AccessibilityObject::insertChild):
        * accessibility/AccessibilityRenderObject.cpp:
        (WebCore):
        (WebCore::AccessibilityRenderObject::accessibilityIsIgnoredBase):
        (WebCore::AccessibilityRenderObject::addHiddenChildren):
        (WebCore::AccessibilityRenderObject::addChildren):
        * accessibility/AccessibilityRenderObject.h:
        (AccessibilityRenderObject):

2012-10-19  Michael Saboff  <msaboff@apple.com>

        Add String version of visitedLinkHash() to properly handle 8-bit URL Strings.
        https://bugs.webkit.org/show_bug.cgi?id=99735

        Reviewed by Filip Pizlo.

        Added String version of visitedLinkHash().  Made speculative addition of visitedLinkHash()
        to chromium platform version of LinkHashChromium.cpp.
        Changed calls in the form of visitedLinkHash(string.characters(), string.length()) to use the
        new form.

        No changes to functionality, so no new tests.

        * WebCore.exp.in:
        * loader/HistoryController.cpp:
        (WebCore::addVisitedLink):
        * page/PageGroup.cpp:
        (WebCore::PageGroup::addVisitedLink):
        * platform/LinkHash.cpp:
        (WebCore::visitedLinkHashInline):
        (WebCore::visitedLinkHash):
        * platform/LinkHash.h:
        * platform/chromium/LinkHashChromium.cpp:
        (WebCore::visitedLinkHash):

2012-10-19  Michael Saboff  <msaboff@apple.com>

        String(CFStringRef) should try to converting to an 8 bit string before converting to  16 bit string
        https://bugs.webkit.org/show_bug.cgi?id=99794

        Reviewed by Filip Pizlo.

        Try getting a Latin1 byte string before getting a UTF16 (UChar*) string.

        No new test, added 8 bit path.

        * platform/text/cf/StringCF.cpp:
        (WTF::String::String):

2012-10-19  Dima Gorbik  <dgorbik@apple.com>

        Page should be removed from the cache right after restore was called.
        https://bugs.webkit.org/show_bug.cgi?id=99737

        Reviewed by Brady Eidson.

        The pageCache was inconsistent after the restoration for a period of time because the cachedFrame is being nulled,
        but the page is still in the Cache. Now the page is being removed from the cache right after the restoration.
        This issue was spotted in a custom built application using WebKit and unfortunately there is no way to test this
        behavior in LayoutTests. All the current tests that exercise the page cache do pass.

        No new tests.

        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::commitProvisionalLoad):

2012-10-19  Max Vujovic  <mvujovic@adobe.com>

        [WebGL] getUniformLocation fails for uniform array name without array brackets
        https://bugs.webkit.org/show_bug.cgi?id=99854

        Reviewed by Dean Jackson.

        Before this patch, gl.getUniformLocation(program, "array[0]") would return the array
        location, but gl.getUniformLocation(program, "array") would not. Now, the latter also
        returns the array location.

        In the process of adding a check to the following Khronos WebGL conformance test:
        conformance/glsl/misc/glsl-long-variable-names.html

        * platform/graphics/ANGLEWebKitBridge.cpp:
        (WebCore::getSymbolInfo):
            Before, we used to check that the symbol size was greater than one to determine that the
            symbol was an array. However, this doesn't identify arrays of length one. Now, we check
            if the symbol name ends in "[0]", since ANGLE appends this suffix to array symbol
            names.
            If the symbol is an array, we strip off the "[0]" and add a symbol with just the base
            name. We set the isArray flag on the symbol, so we don't lose the information that it is
            an array.
            Then, we create symbols for each array element like before. However, instead of
            replacing the "0" in array[0]" with each index, we take the base name "array" and
            append array brackets containing each index (e.g. "array" + "[7]").
        * platform/graphics/ANGLEWebKitBridge.h:
        (ANGLEShaderSymbol):
            Add isArray boolean to ANGLEShaderSymbol. Since array symbols don't end in "[0]"
            anymore, this is the only way to identify arrays.

2012-10-19  Csaba Osztrogonác  <ossy@webkit.org>

        Unreviewed, rolling out r131915.
        http://trac.webkit.org/changeset/131915
        https://bugs.webkit.org/show_bug.cgi?id=98787

        It broke the build on platforms with \!HAVE(ACCESSIBILITY)

        * accessibility/AXObjectCache.cpp:
        (WebCore::AXObjectCache::getOrCreate):
        (WebCore::AXObjectCache::nodeIsTextControl):
        * accessibility/AXObjectCache.h:
        (WebCore):
        * accessibility/AccessibilityARIAGrid.cpp:
        (WebCore::AccessibilityARIAGrid::addChild):
        (WebCore::AccessibilityARIAGrid::addChildren):
        * accessibility/AccessibilityARIAGrid.h:
        (AccessibilityARIAGrid):
        * accessibility/AccessibilityNodeObject.cpp:
        (WebCore::AccessibilityNodeObject::elementRect):
        (WebCore::AccessibilityNodeObject::addChildren):
        (WebCore::AccessibilityNodeObject::textUnderElement):
        * accessibility/AccessibilityNodeObject.h:
        (AccessibilityNodeObject):
        * accessibility/AccessibilityObject.cpp:
        * accessibility/AccessibilityObject.h:
        (AccessibilityObject):
        * accessibility/AccessibilityRenderObject.cpp:
        (WebCore::textIteratorBehaviorForTextRange):
        (WebCore):
        (WebCore::AccessibilityRenderObject::accessibilityIsIgnoredBase):
        (WebCore::AccessibilityRenderObject::addChildren):
        * accessibility/AccessibilityRenderObject.h:
        (AccessibilityRenderObject):

2012-10-19  Tony Chang  <tony@chromium.org>

        Unreviewed, rolling out r131936.
        http://trac.webkit.org/changeset/131936
        https://bugs.webkit.org/show_bug.cgi?id=99717

        Broke the clang build

        * WebCore.exp.in:
        * inspector/InspectorFrontendClient.h:
        (InspectorFrontendClient):
        * inspector/InspectorFrontendClientLocal.cpp:
        (WebCore::InspectorFrontendClientLocal::requestAttachWindow):
        (WebCore):
        (WebCore::InspectorFrontendClientLocal::requestDetachWindow):
        (WebCore::InspectorFrontendClientLocal::setAttachedWindow):
        * inspector/InspectorFrontendClientLocal.h:
        (InspectorFrontendClientLocal):
        (WebCore::InspectorFrontendClientLocal::requestSetDockSide):
        * inspector/InspectorFrontendHost.cpp:
        (WebCore::InspectorFrontendHost::requestAttachWindow):
        (WebCore):
        (WebCore::InspectorFrontendHost::requestDetachWindow):
        (WebCore::InspectorFrontendHost::requestSetDockSide):
        * inspector/InspectorFrontendHost.h:
        (InspectorFrontendHost):
        * inspector/InspectorFrontendHost.idl:
        * inspector/front-end/DockController.js:
        (WebInspector.DockController):
        (WebInspector.DockController.prototype.setDocked):
        (WebInspector.DockController.prototype._innerSetDocked.set if):
        (WebInspector.DockController.prototype._innerSetDocked):
        (WebInspector.DockController.prototype._updateUI.get states):
        (WebInspector.DockController.prototype._updateUI):
        (WebInspector.DockController.prototype._toggleDockState):
        * inspector/front-end/InspectorFrontendAPI.js:
        (InspectorFrontendAPI.setAttachedWindow):
        (InspectorFrontendAPI.setDockSide):
        * inspector/front-end/InspectorFrontendHostStub.js:
        (.WebInspector.InspectorFrontendHostStub.prototype.requestAttachWindow):
        (.WebInspector.InspectorFrontendHostStub.prototype.requestDetachWindow):
        (.WebInspector.InspectorFrontendHostStub.prototype.requestSetDockSide):
        * inspector/front-end/externs.js:
        (InspectorFrontendHostAPI.prototype.requestAttachWindow):
        (InspectorFrontendHostAPI.prototype.requestDetachWindow):

2012-10-09  Martin Robinson  <mrobinson@igalia.com>

        REGRESSION (r130699): 5 various fast/ tests started failing
        https://bugs.webkit.org/show_bug.cgi?id=98729

        Reviewed by Xan Lopez.

        Do not try to remove the URL fragment for data URLs. This will likely
        just corrupt the URL.

        No new tests. This unskips some previously failing tests.

        * platform/network/soup/ResourceRequestSoup.cpp:
        (WebCore::ResourceRequest::urlStringForSoup): Do nothing for data URLs.

2012-10-19  Simon Fraser  <simon.fraser@apple.com>

        Use tile caches in place of CATiledLayer
        https://bugs.webkit.org/show_bug.cgi?id=99806
        <rdar://problem/6474145>

        Reviewed by Tim Horton.

        Have GraphicsLayerCA use TileCaches instead of CATiledLayer now for
        layers that exceed the 2000px size threshold.

        * platform/graphics/TiledBacking.h:
        (TiledBacking): Have normal getter and setter for the visible rect.
        * platform/graphics/ca/GraphicsLayerCA.cpp:
        (WebCore::GraphicsLayerCA::flushCompositingStateForThisLayerOnly): We need
        to pass in an old visibleRect to commitLayerChangesBeforeSublayers(). Just use
        our current visible rect, which result in no tile area work.
        (WebCore::GraphicsLayerCA::computeVisibleRect): Make this const and have it
        return the rect, for clarity.
        (WebCore::GraphicsLayerCA::recursiveCommitChanges): Keep track of the old
        visible rect, and use the change flags mechanism to ensure that we recompute
        tile areas later.
        When calling commitLayerChangesBeforeSublayers() on the mask layer, just pass
        its own visible rect as the old visible rect.
        (WebCore::GraphicsLayerCA::commitLayerChangesBeforeSublayers): Pass in the
        oldVisibleRect so that updateVisibleRect() can use this to see how the
        visibleRect is changing.
        (WebCore::GraphicsLayerCA::adjustTiledLayerVisibleRect): This member function
        compares the old and new visible rects, and extends the tile coverage area
        in directions where more content is being exposed. It takes care to avoid
        "jitter" in the visible rect deltas causing edge tiles to get created then
        destroyed by keeping any extra padding that already exists in a direction
        where more content is being exposed.
        (WebCore::GraphicsLayerCA::updateVisibleRect): Call adjustTiledLayerVisibleRect()
        and use the result to update the TiledBacking's visibleRect.
        (WebCore::GraphicsLayerCA::swapFromOrToTiledLayer): Create layers of type
        LayerTypeTileCacheLayer instead of LayerTypeWebTiledLayer. Because tile
        cache layers involve adding an extra layer to the hierarchy (the tile container),
        we call updateSublayerList() when changing layer type.
        * platform/graphics/ca/GraphicsLayerCA.h: New m_sizeAtLastVisibleRectUpdate member
        that is used to prevent the adjustTiledLayerVisibleRect() logic being confused by
        size changes.
        (WebCore::GraphicsLayerCA::visibleRect):
        * platform/graphics/ca/mac/TileCache.h: Have normal getter and setter for the visible rect.
        * platform/graphics/ca/mac/TileCache.mm:
        (WebCore::TileCache::setVisibleRect): Renamed to setVisibleRect().
        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::flushPendingLayerChanges): Avoid doing work
        for pages in the page cache, for which the root layer is unattached.
        (WebCore::RenderLayerCompositor::frameViewDidScroll): visibleRectChanged() was renamed
        to setVisibleRect().

2012-10-19  Beth Dakin  <bdakin@apple.com>

        https://bugs.webkit.org/show_bug.cgi?id=99768
        We should limit the tile cache coverage when a page can't take 
        advantage of fast tile scrolling anyway

        Reviewed by Simon Fraser.

        When sites can't use fast-scrolling, there is no need to inflate the 
        tile cache. In fact, we get a performance boost by keeping it small 
        on painting-intensive sites. 

        Instead of just looking a whether or not the FrameView 
        canHaveScrollbar(), consult 
        shouldUpdateScrollLayerPositionOnMainThread().
        * page/FrameView.cpp:
        (WebCore::FrameView::performPostLayoutTasks):
        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::RenderLayerBacking):
        
        Expose shouldUpdateScrollLayerPositionOnMainThread().
        * page/scrolling/ScrollingCoordinator.cpp:
        (WebCore::ScrollingCoordinator::hasNonLayerFixedObjects):
        (WebCore::ScrollingCoordinator::shouldUpdateScrollLayerPositionOnMainThread):
        (WebCore):
        (WebCore::ScrollingCoordinator::updateShouldUpdateScrollLayerPositionOnMainThread):
        * page/scrolling/ScrollingCoordinator.h:
        (ScrollingCoordinator):

        Bug fix. Should be bitwise and.
        * platform/graphics/ca/mac/TileCache.mm:
        (WebCore::TileCache::tileCoverageRect):

2012-10-19  Mark Lam  <mark.lam@apple.com>

        Added WTF::StackStats mechanism.
        https://bugs.webkit.org/show_bug.cgi?id=99805.

        Reviewed by Geoffrey Garen.

        Added StackStats probes in layout methods.

        * dom/Document.cpp:
        (WebCore::Document::updateLayout):
        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::layout):
        * rendering/RenderBox.cpp:
        (WebCore::RenderBox::layout):
        * rendering/RenderDialog.cpp:
        (WebCore::RenderDialog::layout):
        * rendering/RenderEmbeddedObject.cpp:
        (WebCore::RenderEmbeddedObject::layout):
        * rendering/RenderFlowThread.cpp:
        (WebCore::RenderFlowThread::layout):
        * rendering/RenderFrameSet.cpp:
        (WebCore::RenderFrameSet::layout):
        * rendering/RenderIFrame.cpp:
        (WebCore::RenderIFrame::layout):
        * rendering/RenderImage.cpp:
        (WebCore::RenderImage::layout):
        * rendering/RenderListBox.cpp:
        (WebCore::RenderListBox::layout):
        * rendering/RenderListItem.cpp:
        (WebCore::RenderListItem::layout):
        * rendering/RenderListMarker.cpp:
        (WebCore::RenderListMarker::layout):
        * rendering/RenderMedia.cpp:
        (WebCore::RenderMedia::layout):
        * rendering/RenderObject.cpp:
        (WebCore::RenderObject::layout):
        * rendering/RenderObject.h:
        * rendering/RenderRegion.cpp:
        (WebCore::RenderRegion::layout):
        * rendering/RenderReplaced.cpp:
        (WebCore::RenderReplaced::layout):
        * rendering/RenderReplica.cpp:
        (WebCore::RenderReplica::layout):
        * rendering/RenderRubyRun.cpp:
        (WebCore::RenderRubyRun::layoutSpecialExcludedChild):
        * rendering/RenderScrollbarPart.cpp:
        (WebCore::RenderScrollbarPart::layout):
        * rendering/RenderSlider.cpp:
        (WebCore::RenderSlider::layout):
        * rendering/RenderTable.cpp:
        (WebCore::RenderTable::layout):
        * rendering/RenderTableCell.cpp:
        (WebCore::RenderTableCell::layout):
        * rendering/RenderTableRow.cpp:
        (WebCore::RenderTableRow::layout):
        * rendering/RenderTableSection.cpp:
        (WebCore::RenderTableSection::layout):
        * rendering/RenderTextControlSingleLine.cpp:
        (WebCore::RenderTextControlSingleLine::layout):
        * rendering/RenderTextTrackCue.cpp:
        (WebCore::RenderTextTrackCue::layout):
        * rendering/RenderVideo.cpp:
        (WebCore::RenderVideo::layout):
        * rendering/RenderView.cpp:
        (WebCore::RenderView::layout):
        * rendering/RenderWidget.cpp:
        (WebCore::RenderWidget::layout):
        * rendering/svg/RenderSVGContainer.cpp:
        (WebCore::RenderSVGContainer::layout):
        * rendering/svg/RenderSVGForeignObject.cpp:
        (WebCore::RenderSVGForeignObject::layout):
        * rendering/svg/RenderSVGGradientStop.cpp:
        (WebCore::RenderSVGGradientStop::layout):
        * rendering/svg/RenderSVGHiddenContainer.cpp:
        (WebCore::RenderSVGHiddenContainer::layout):
        * rendering/svg/RenderSVGImage.cpp:
        (WebCore::RenderSVGImage::layout):
        * rendering/svg/RenderSVGResourceContainer.cpp:
        (WebCore::RenderSVGResourceContainer::layout):
        * rendering/svg/RenderSVGResourceMarker.cpp:
        (WebCore::RenderSVGResourceMarker::layout):
        * rendering/svg/RenderSVGRoot.cpp:
        (WebCore::RenderSVGRoot::layout):
        * rendering/svg/RenderSVGShape.cpp:
        (WebCore::RenderSVGShape::layout):
        * rendering/svg/RenderSVGText.cpp:
        (WebCore::RenderSVGText::layout):

2012-10-19  Pavel Feldman  <pfeldman@chromium.org>

        Web Inspector: merge "docked" state into the "dock side" enum.
        https://bugs.webkit.org/show_bug.cgi?id=99717

        Reviewed by Vsevolod Vlasov.

        Otherwise, it is hard to manage these inter-dependent flags.

        * inspector/InspectorFrontendClient.h:
        (InspectorFrontendClient):
        * inspector/InspectorFrontendClientLocal.cpp:
        (WebCore::InspectorFrontendClientLocal::requestSetDockSide):
        (WebCore::InspectorFrontendClientLocal::setAttachedWindow):
        * inspector/InspectorFrontendClientLocal.h:
        (InspectorFrontendClientLocal):
        * inspector/InspectorFrontendHost.cpp:
        (WebCore::InspectorFrontendHost::requestSetDockSide):
        * inspector/InspectorFrontendHost.h:
        (InspectorFrontendHost):
        * inspector/InspectorFrontendHost.idl:
        * inspector/front-end/DockController.js:
        (WebInspector.DockController):
        (WebInspector.DockController.prototype._updateUI.get sides):
        (WebInspector.DockController.prototype._updateUI):
        (WebInspector.DockController.prototype._toggleDockState):
        * inspector/front-end/InspectorFrontendAPI.js:
        (InspectorFrontendAPI.setAttachedWindow):
        * inspector/front-end/InspectorFrontendHostStub.js:
        (.WebInspector.InspectorFrontendHostStub.prototype.requestSetDockSide):

2012-10-19  Joshua Bell  <jsbell@chromium.org>

        [V8] IndexedDB: Crash when lazy-indexing Date keys
        https://bugs.webkit.org/show_bug.cgi?id=99860

        Reviewed by Adam Barth.

        Missing a scope/context needed when digging values out of Date objects
        in an indexing callback.

        Test: storage/indexeddb/lazy-index-types.html

        * bindings/v8/IDBBindingUtilities.cpp:
        (WebCore::createIDBKeyFromScriptValueAndKeyPath):

2012-10-18  Dean Jackson  <dino@apple.com>

        Shader translator needs option to clamp uniform array accesses in vertex shaders
        https://bugs.webkit.org/show_bug.cgi?id=98977
        https://code.google.com/p/angleproject/issues/detail?id=49

        Reviewed by Alok Priyadarshi and Ken Russell.

        WebGL forbids out-of-bounds array access in shaders. Rewrite any shaders to
        ensure that non-direct array indexing is clamped to the bounds of the array.

        Test: fast/canvas/webgl/array-bounds-clamping.html

        * platform/graphics/ANGLEWebKitBridge.cpp:
        (WebCore::ANGLEWebKitBridge::compileShaderSource): Pass new compiler option SH_CLAMP_INDIRECT_ARRAY_BOUNDS

2012-10-19  Justin Novosad  <junov@chromium.org>

        [Chromium] Reduce memory footprint of canvas pattern object with deferred rendering
        https://bugs.webkit.org/show_bug.cgi?id=99856

        Reviewed by Stephen White.

        Marking internal bitmap copy as immutable to prevent it from being
        unnecessarily duplicated in skia by SkBitmapHeap.

        No new tests: code path already well covered by existing layout tests 
        fast/canvas/canvas-pattern-*

        * platform/graphics/skia/PatternSkia.cpp:
        (WebCore::Pattern::platformPattern):

2012-10-19  Antti Koivisto  <antti@apple.com>

        Maintain a list of active CSS stylesheets
        https://bugs.webkit.org/show_bug.cgi?id=99843

        Reviewed by Andreas Kling.

        Currently we maintain a per-document list of stylesheets that matches what is returned by the StyleSheetList DOM API. 
        This list contains both CSS and XSLT stylesheets which internally have basically nothing in common. Maintaining 
        a list of active CSS stylesheets separately simplifies code in number of places.

        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::StyleResolver):
        (WebCore::StyleResolver::addStylesheetsFromSeamlessParents):
        (WebCore::StyleResolver::appendAuthorStyleSheets):
        (WebCore::collectCSSOMWrappers):
        * css/StyleResolver.h:
        (StyleResolver):
        * css/StyleSheetList.cpp:
        (WebCore::StyleSheetList::styleSheets):
        (WebCore::StyleSheetList::detachFromDocument):
        * dom/Document.cpp:
        (WebCore::Document::setCompatibilityMode):
        * dom/DocumentStyleSheetCollection.cpp:
        (WebCore::DocumentStyleSheetCollection::analyzeStyleSheetChange):
        (WebCore::styleSheetsUseRemUnits):
        (WebCore::filterEnabledCSSStyleSheets):
        (WebCore):
        (WebCore::DocumentStyleSheetCollection::updateActiveStyleSheets):
        (WebCore::DocumentStyleSheetCollection::reportMemoryUsage):
        * dom/DocumentStyleSheetCollection.h:
        (WebCore::DocumentStyleSheetCollection::styleSheetsForStyleSheetList):
        (DocumentStyleSheetCollection):
        (WebCore::DocumentStyleSheetCollection::activeAuthorStyleSheets):

2012-09-08  Alpha Lam  <hclam@chromium.org>

        [chromium] Implement deferred image decoding
        https://bugs.webkit.org/show_bug.cgi?id=94240

        Reviewed by Stephen White.

        Objectives:

        To record image decoding operations during painting and to defer
        decoding operations until rasterization.

        Rationale:

        This is a key feature that enables impl-side painting which requires
        fast recording of drawing operations. The existing decode-on-draw
        restricts that recording has to block on expensive decoding operations.
        This change allows recording of image decoding operations during paint
        time.

        Design:

        Image decoding happens when a BitmapImage is drawn into a
        GraphicsContext. When per-tile painting is enabled GraphicsContext
        is backed by SkCanvas in recording mode. This SkCanvas records drawing
        and image decoding operations to minimize recording time.

        An image decoding operation is recorded as a SkPixelRef object
        implemented by LazyDecodingPixelRef. This object references raw encoded
        data, regions to be decoded and scaling information.

        When used in conjunction with per-tile painting this feature defers
        image decoding until the SkCanvas referencing the image is rasterized.

        Both recording and rasterization happen on the main thread.

        Performance Impact:

        This feature is enabled by WebKit::setDeferredImageDecodingEnabled()
        and does not have an impact when disabled.

        This feature is disabled by default.

        Upcoming Changes:

        1. Implement a full-featured image cache in ImageDecodingStore.
        2. Allow rasterization and decoding on impl thread.

        Classes Involved:

        BitmapImage

        BitmapImage is the entry point for deferred image decoding. When
        drawing a BitmapImage into a GraphicsContext it makes a request to
        create a NativeImageSkia. We substitute the content in NativeImageSkia
        such that it is lazily decoded.

        DeferredImageDecoder

        This is the platform implementation of a image decoder for Chromium.
        This is a bridge layer that either delegates calls to the actual
        ImageDecoder or create a lazily-decoded SkBitmap and delegates calls
        to ImageDecodingStore.

        ImageDecodingStore

        This object manages all encoded images. It keeps track of encoded
        data and the corresponding ImageDecoder for doing actual decoding. It
        is also responsible for generating lazily decoded SkBitmaps. This
        SkBitmap contains a LazyDecodingPixelRef object which references to an
        image entry in ImageDecodingStore.

        ScaledImageFragment

        A container for a scaled image fragment. In addition to bitmap pixels
        it contains information about the ID of the image, scale and clipping.

        ImageFrameGenerator

        This object is responsible for generating decoded pixels. It is also
        a container for encoded image data and corresponding image decoder.

        LazyDecodingPixelRef

        This object is embedded in a SkBitmap to enable lazy decoding. When
        SkBitmap needs to access pixels LazyDecodingPixelRef is locked. It
        contains information to locate an image and scaling info, these
        information is submitted to ImageDecodingStore to access actual pixels.

        Layout tests. There are about 80 tests in this virtual test suite
        running this feature in this directory:

        platform/chromium/virtual/deferred/fast/images

        Unit tests. Added DeferredImageDecoderTest to verify deferred
        image decoding behavior.

        * WebCore.gypi:
        * platform/graphics/ImageSource.cpp:
        (WebCore::ImageSource::setData):
        * platform/graphics/ImageSource.h:
        (WebCore):
        (ImageSource):
        * platform/graphics/chromium/DeferredImageDecoder.cpp: Added.
        (WebCore):
        (WebCore::DeferredImageDecoder::DeferredImageDecoder):
        (WebCore::DeferredImageDecoder::~DeferredImageDecoder):
        (WebCore::DeferredImageDecoder::create):
        (WebCore::DeferredImageDecoder::createForTesting):
        (WebCore::DeferredImageDecoder::filenameExtension):
        (WebCore::DeferredImageDecoder::frameBufferAtIndex):
        (WebCore::DeferredImageDecoder::setData):
        (WebCore::DeferredImageDecoder::isSizeAvailable):
        (WebCore::DeferredImageDecoder::size):
        (WebCore::DeferredImageDecoder::frameSizeAtIndex):
        (WebCore::DeferredImageDecoder::frameCount):
        (WebCore::DeferredImageDecoder::repetitionCount):
        (WebCore::DeferredImageDecoder::clearFrameBufferCache):
        (WebCore::DeferredImageDecoder::frameHasAlphaAtIndex):
        (WebCore::DeferredImageDecoder::frameBytesAtIndex):
        * platform/graphics/chromium/DeferredImageDecoder.h: Added.
        (WebCore):
        (DeferredImageDecoder):
        * platform/graphics/chromium/ImageDecodingStore.cpp: Added.
        (WebCore::ImageDecodingStore::ImageDecodingStore):
        (WebCore):
        (WebCore::ImageDecodingStore::~ImageDecodingStore):
        (WebCore::ImageDecodingStore::instanceOnMainThread):
        (WebCore::ImageDecodingStore::initializeOnMainThread):
        (WebCore::ImageDecodingStore::shutdown):
        (WebCore::ImageDecodingStore::isLazyDecoded):
        (WebCore::ImageDecodingStore::createLazyDecodedSkBitmap):
        (WebCore::ImageDecodingStore::resizeLazyDecodedSkBitmap):
        (WebCore::ImageDecodingStore::setData):
        (WebCore::ImageDecodingStore::lockPixels):
        (WebCore::ImageDecodingStore::unlockPixels):
        (WebCore::ImageDecodingStore::frameGeneratorBeingDestroyed):
        (WebCore::ImageDecodingStore::calledOnValidThread):
        (WebCore::ImageDecodingStore::lookupFrameCache):
        (WebCore::ImageDecodingStore::deleteFrameCache):
        * platform/graphics/chromium/ImageDecodingStore.h: Added.
        (WebCore):
        (ImageDecodingStore):
        (WebCore::ImageDecodingStore::create):
        * platform/graphics/chromium/ScaledImageFragment.cpp: Added.
        (WebCore):
        (WebCore::ScaledImageFragment::~ScaledImageFragment):
        (WebCore::ScaledImageFragment::ScaledImageFragment):
        (WebCore::ScaledImageFragment::isEqual):
        * platform/graphics/chromium/ScaledImageFragment.h: Added.
        (WebCore):
        (ScaledImageFragment):
        (WebCore::ScaledImageFragment::create):
        (WebCore::ScaledImageFragment::bitmap):
        (WebCore::ScaledImageFragment::isComplete):
        * platform/graphics/chromium/ImageFrameGenerator.cpp: Added.
        (WebCore):
        (WebCore::ImageFrameGenerator::ImageFrameGenerator):
        (WebCore::ImageFrameGenerator::~ImageFrameGenerator):
        (WebCore::ImageFrameGenerator::decoder):
        (WebCore::ImageFrameGenerator::setData):
        * platform/graphics/chromium/ImageFrameGenerator.h: Added.
        (WebCore):
        (ImageFrameGenerator):
        (WebCore::ImageFrameGenerator::create):
        (WebCore::ImageFrameGenerator::size):
        (WebCore::ImageFrameGenerator::imageId):
        * platform/graphics/chromium/LazyDecodingPixelRef.cpp: Added.
        (WebCore):
        (WebCore::LazyDecodingPixelRef::LazyDecodingPixelRef):
        (WebCore::LazyDecodingPixelRef::~LazyDecodingPixelRef):
        (WebCore::LazyDecodingPixelRef::isScaled):
        (WebCore::LazyDecodingPixelRef::isClipped):
        (WebCore::LazyDecodingPixelRef::onLockPixels):
        (WebCore::LazyDecodingPixelRef::onUnlockPixels):
        (WebCore::LazyDecodingPixelRef::onLockPixelsAreWritable):
        * platform/graphics/chromium/LazyDecodingPixelRef.h: Added.
        (WebCore):
        (LazyDecodingPixelRef):
        (WebCore::LazyDecodingPixelRef::frameGenerator):
        * platform/graphics/skia/NativeImageSkia.cpp:
        (WebCore::NativeImageSkia::resizedBitmap):
        * platform/image-decoders/ImageDecoder.h:
        (ImageFrame):
        (WebCore::ImageFrame::setSkBitmap):
        (WebCore::ImageFrame::getSkBitmap):

2012-10-18  Yael Aharon  <yael.aharon@intel.com>

        [EFL] GraphicsContext3D::m_renderStyle is not initialized
        https://bugs.webkit.org/show_bug.cgi?id=99721

        Reviewed by Antonio Gomes.

        Initialize GraphicsContext3D::m_renderStyle.

        No new tests, no new functionality.

        * platform/graphics/efl/GraphicsContext3DEfl.cpp:
        (WebCore::GraphicsContext3D::GraphicsContext3D):

2012-10-19  Dongwoo Joshua Im  <dw.im@samsung.com>

        Rename ENABLE_CSS3_TEXT_DECORATION to ENABLE_CSS3_TEXT
        https://bugs.webkit.org/show_bug.cgi?id=99804

        Reviewed by Julien Chaffraix.

        CSS3 text related properties will be implemented under this flag,
        including text decoration, text-align-last, and text-justify.

        No new functionality, no new test.

        * Configurations/FeatureDefines.xcconfig:
        * GNUmakefile.am:
        * GNUmakefile.features.am:
        * css/CSSComputedStyleDeclaration.cpp:
        (WebCore):
        (WebCore::CSSComputedStyleDeclaration::getPropertyCSSValue):
        * css/CSSParser.cpp:
        (WebCore::CSSParser::parseValue):
        (WebCore::CSSParser::addTextDecorationProperty):
        (WebCore::CSSParser::parseTextDecoration):
        * css/CSSPrimitiveValueMappings.h:
        (WebCore):
        * css/CSSProperty.cpp:
        (WebCore::CSSProperty::isInheritedProperty):
        * css/CSSPropertyNames.in:
        * css/CSSValueKeywords.in:
        * css/StyleBuilder.cpp:
        (WebCore::StyleBuilder::StyleBuilder):
        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::applyProperty):
        * rendering/style/RenderStyle.cpp:
        (WebCore::RenderStyle::diff):
        * rendering/style/RenderStyle.h:
        * rendering/style/RenderStyleConstants.h:
        (WebCore):
        * rendering/style/StyleRareNonInheritedData.cpp:
        (WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData):
        (WebCore::StyleRareNonInheritedData::operator==):
        * rendering/style/StyleRareNonInheritedData.h:
        (StyleRareNonInheritedData):

2012-10-19  Nate Chapin  <japhet@chromium.org>

        Reorder some functions in SubresourceLoader to permit main resources
        https://bugs.webkit.org/show_bug.cgi?id=99769

        Reviewed by Adam Barth.

        Most resource types that go through the memory cache (and therefore
        through SubresourceLoader) are not sensitive to the exact ordering of
        the callbacks they receive, particularly as it relates to ResourceLoadNotifier
        calls.  Main resources are not so lenient.  For main resources to be cacheable
        and maintain the current behavior as precisely as possible, we will need to
        rearrange SubresourceLoader's willSendRequest() and didReceiveData().

        No new tests, refactor only.

        * loader/SubresourceLoader.cpp:
        (WebCore::SubresourceLoader::willSendRequest): There are a series of checks that can result
            in the request being canceled, plus calls to CachedResource::willSendRequest() and
            ResourceLoader::willSendRequest().  MainResourceLoader (which will be a
            CachedResourceClient) has work it expects to do before ResourceLoader::willSendRequest()
            is called, but the calls are out of order for that, so swap those.
        (WebCore::SubresourceLoader::didReceiveData): We need to populate ResourceLoader::m_resourceData
            before notifying CachedResource of new data, but we also want to do CachedResourceClients calls
            before calling ResourceLoadNotifier. This means we can't delegate to ResourceLoader.

2012-10-19  Chris Fleizach  <cfleizach@apple.com>

        AX: aria-hidden=false does not work as expected
        https://bugs.webkit.org/show_bug.cgi?id=98787

        Reviewed by Beth Dakin.

        ARIA requires that aria-hidden=false override an element's native visibility and include that
        node in the AX hierarchy.
 
        To accomplish this we have to allow invisible items to be included, as well as items that
        have no renderers associated with them.

        Test: accessibility/aria-hidden-negates-no-visibility.html

        * accessibility/AXObjectCache.cpp:
        (WebCore::AXObjectCache::getOrCreate):
        * accessibility/AccessibilityARIAGrid.cpp:
        (WebCore::AccessibilityARIAGrid::addTableCellChild):
        (WebCore::AccessibilityARIAGrid::addChildren):
        * accessibility/AccessibilityARIAGrid.h:
        (AccessibilityARIAGrid):
        * accessibility/AccessibilityNodeObject.cpp:
        (WebCore):
        (WebCore::AccessibilityNodeObject::boundingBoxRect):
        (WebCore::AccessibilityNodeObject::insertChild):
        (WebCore::AccessibilityNodeObject::addChild):
        (WebCore::AccessibilityNodeObject::addChildren):
        (WebCore::AccessibilityNodeObject::textUnderElement):
        * accessibility/AccessibilityNodeObject.h:
        (AccessibilityNodeObject):
        * accessibility/AccessibilityObject.cpp:
        (WebCore::AccessibilityObject::textIteratorBehaviorForTextRange):
        (WebCore):
        * accessibility/AccessibilityObject.h:
        (AccessibilityObject):
        (WebCore::AccessibilityObject::addChild):
        (WebCore::AccessibilityObject::insertChild):
        * accessibility/AccessibilityRenderObject.cpp:
        (WebCore):
        (WebCore::AccessibilityRenderObject::accessibilityIsIgnoredBase):
        (WebCore::AccessibilityRenderObject::addHiddenChildren):
        (WebCore::AccessibilityRenderObject::addChildren):
        * accessibility/AccessibilityRenderObject.h:
        (AccessibilityRenderObject):

2012-10-19  Tommy Widenflycht  <tommyw@google.com>

        MediaStream API: Rename owner to client in MediaStreamDescriptor
        https://bugs.webkit.org/show_bug.cgi?id=99593

        Reviewed by Adam Barth.

        This patch renames owner to client in MediaStreamDescriptor as discussed in #99080.

        No new tests needed, covered by existing tests.

        * Modules/mediastream/MediaStream.cpp:
        (WebCore::MediaStream::MediaStream):
        (WebCore::MediaStream::~MediaStream):
        * Modules/mediastream/MediaStream.h:
        (MediaStream):
        * Modules/mediastream/PeerConnection00.cpp:
        (WebCore::PeerConnection00::didRemoveRemoteStream):
        * Modules/mediastream/RTCPeerConnection.cpp:
        (WebCore::RTCPeerConnection::didRemoveRemoteStream):
        * platform/mediastream/MediaStreamCenter.cpp:
        (WebCore::MediaStreamCenter::endLocalMediaStream):
        (WebCore::MediaStreamCenter::addMediaStreamTrack):
        (WebCore::MediaStreamCenter::removeMediaStreamTrack):
        * platform/mediastream/MediaStreamDescriptor.h:
        (WebCore::MediaStreamDescriptorClient::~MediaStreamDescriptorClient):
        (WebCore::MediaStreamDescriptor::client):
        (WebCore::MediaStreamDescriptor::setClient):
        (WebCore::MediaStreamDescriptor::MediaStreamDescriptor):
        (MediaStreamDescriptor):

2012-10-19  Shinya Kawanaka  <shinyak@chromium.org>

        Elements assigned to <shadow> should not be reprojected.
        https://bugs.webkit.org/show_bug.cgi?id=99680

        Reviewed by Dimitri Glazkov.

        In the current spec, we don't have shadow reprojection, i.e. elements assigned to <shadow> should not be
        reprojected to content. However, we can select them by <shadow>.

        Tests: fast/dom/shadow/content-reprojection-complex.html
               fast/dom/shadow/content-reprojection-shadow.html
               fast/dom/shadow/shadow-reprojection-prohibited.html

        * html/shadow/ContentDistributor.cpp:
        (WebCore::ContentDistributor::distribute): When a node is <shadow>, we should not add elements assigned to <shadow>
        to POOL. Instead, <shadow> itself should be added to POOL.
        * html/shadow/HTMLContentElement.h:
        (WebCore::isHTMLContentElement):
        (WebCore):

2012-10-19  Chris Fleizach  <cfleizach@apple.com>

        VO issues with hidden <legend> and last explicitly labelled element within a group <fieldset>
        https://bugs.webkit.org/show_bug.cgi?id=96325

        Reviewed by Beth Dakin.

         When finding a <legend> for accessibility, we need to consider those that are offscreen. This patch
         modifies the original findLegend method to take a parameter to determine what should be done.

        Test: accessibility/hidden-legend.html

        * accessibility/AccessibilityRenderObject.cpp:
        (WebCore::AccessibilityRenderObject::titleUIElement):
        * rendering/RenderFieldset.cpp:
        (WebCore::RenderFieldset::findLegend):
        * rendering/RenderFieldset.h:

2012-10-17  Chris Fleizach  <cfleizach@apple.com>

        AX: Refactor accessibility name computation so it's more platform independent
        https://bugs.webkit.org/show_bug.cgi?id=99502

        Reviewed by Beth Dakin.

        The current model of determining the accessible text for an object has a lot of Mac biases built in
        due to legacy implementation. 

        This change categorizes and orders accessibility text based on WAI-ARIA text computation rules and then
        allows the platform (only Mac right now) to decide how best to apply that text to its own AX API.
        http://www.w3.org/TR/wai-aria/roles#textalternativecomputation

        This change tried very hard not to change any test behavior, even though it exposed a number of weird
        edge cases where we were treating attributes differently based on element type. 

        Future patches will resolve those discrepancies.

        * accessibility/AccessibilityImageMapLink.cpp:
        (WebCore::AccessibilityImageMapLink::accessibilityText):
        * accessibility/AccessibilityImageMapLink.h:
        (AccessibilityImageMapLink):
        * accessibility/AccessibilityMediaControls.cpp:
        (WebCore::AccessibilityMediaControl::accessibilityText):
        * accessibility/AccessibilityMediaControls.h:
        (AccessibilityMediaControl):
        (WebCore::AccessibilityMediaTimeDisplay::isMediaControlLabel):
        * accessibility/AccessibilityNodeObject.cpp:
        (WebCore::AccessibilityNodeObject::titleElementText):
        (WebCore::AccessibilityNodeObject::accessibilityText):
        (WebCore::AccessibilityNodeObject::ariaLabeledByText):
        (WebCore::AccessibilityNodeObject::alternativeText):
        (WebCore::AccessibilityNodeObject::alternativeTextForWebArea):
        (WebCore::AccessibilityNodeObject::visibleText):
        (WebCore::AccessibilityNodeObject::helpText):
        (WebCore::AccessibilityNodeObject::ariaDescribedByAttribute):
        * accessibility/AccessibilityNodeObject.h:
        (AccessibilityNodeObject):
        * accessibility/AccessibilityObject.h:
        (AccessibilityText):
        (WebCore::AccessibilityText::AccessibilityText):
        (WebCore::AccessibilityObject::isMediaControlLabel):
        (AccessibilityObject):
        (WebCore::AccessibilityObject::accessibilityText):
        (WebCore::AccessibilityObject::setAccessibleName):
        (WebCore::AccessibilityObject::accessibilityDescription):
        (WebCore::AccessibilityObject::title):
        (WebCore::AccessibilityObject::helpText):
        (WebCore::AccessibilityObject::stringValue):
        (WebCore::AccessibilityObject::textUnderElement):
        (WebCore::AccessibilityObject::text):
        (WebCore::AccessibilityObject::textLength):
        (WebCore::AccessibilityObject::setRoleValue):
        (WebCore::AccessibilityObject::roleValue):
        (WebCore::AccessibilityObject::selection):
        (WebCore::AccessibilityObject::hierarchicalLevel):
        * accessibility/AccessibilityRenderObject.cpp:
        * accessibility/AccessibilityRenderObject.h:
        (AccessibilityRenderObject):
        * accessibility/mac/WebAccessibilityObjectWrapper.mm:
        (-[WebAccessibilityObjectWrapper titleTagShouldBeUsedInDescriptionField]):
        (-[WebAccessibilityObjectWrapper accessibilityTitle]):
        (-[WebAccessibilityObjectWrapper accessibilityDescription]):
        (-[WebAccessibilityObjectWrapper accessibilityHelpText]):
        (-[WebAccessibilityObjectWrapper accessibilityAttributeValue:]):
        * platform/LocalizedStrings.cpp:
        (WebCore::localizedMediaControlElementHelpText):

2012-10-19  Kent Tamura  <tkent@chromium.org>

        Use Localizer::monthFormat to construct input[type=month] UI
        https://bugs.webkit.org/show_bug.cgi?id=99818

        Reviewed by Kentaro Hara.

        Use an LDML format returned by Localizer::monthFormat for
        input[type=month] UI.

        Because the format may contain symbolic month names and symbolic
        stand-alone month names, we need to add:
         - Symbolic/numeric detection in DateTimeEditBuilder
         - Normal/stand-alone detection in DateTimeEditBuilder
         - Symbolic edit field for months

        Test: fast/forms/month-multiple-fields/month-multiple-fields-appearance-l10n.html,
              fast/forms/month-multiple-fields/month-multiple-fields-keyboard-events.html

        * html/MonthInputType.cpp:
        (WebCore::MonthInputType::setupLayoutParameters):
        Use Localizer::monthFormat.

        * html/shadow/DateTimeEditElement.cpp:
        (WebCore::DateTimeEditBuilder::visitField):
        - If the number of continuous field character is greater than 2, use
        DateTimeSymbolicMonthFieldElement.
        - Supports stand-alone month field.

        * html/shadow/DateTimeFieldElements.h:
        (DateTimeSymbolicMonthFieldElement): Added. A subclass of DateTimeSymbolicFieldElement.
        * html/shadow/DateTimeFieldElements.cpp:
        (WebCore::DateTimeSymbolicMonthFieldElement::DateTimeSymbolicMonthFieldElement):
        Added.
        (WebCore::DateTimeSymbolicMonthFieldElement::create): Added.
        (WebCore::DateTimeSymbolicMonthFieldElement::populateDateTimeFieldsState):
        We need to add 1 because the internal integer representation is 0-based
        and DateTimeFieldsState uses 1-based month.
        (WebCore::DateTimeSymbolicMonthFieldElement::setValueAsDate):
        DateComponents::month is 0-based.
        (WebCore::DateTimeSymbolicMonthFieldElement::setValueAsDateTimeFieldsState):
        We need to subtract 1 because the internal integer representation is 0-based
        and DateTimeFieldsState uses 1-based month.

        * html/shadow/DateTimeSymbolicFieldElement.h:
        (WebCore::DateTimeSymbolicFieldElement::symbolsSize):
        Added for DateTimeSymbolicMonthFieldElement::setValueAsDateTimeFieldsState.

2012-10-19  Vsevolod Vlasov  <vsevik@chromium.org>

        Web Inspector: inspector/styles/styles-history.html is failing Text on Windows and Linux
        https://bugs.webkit.org/show_bug.cgi?id=99519

        Reviewed by Alexander Pavlov.

        Extracted _styleContentSet callback in a class method to make it sniffable by tests.

        * inspector/front-end/StylesSourceMapping.js:
        (WebInspector.StyleFile.prototype._commitIncrementalEdit):
        (WebInspector.StyleFile.prototype._styleContentSet):

2012-10-19  Pavel Feldman  <pfeldman@chromium.org>

        Web Inspector: add object-src 'none' to the inspector.html
        https://bugs.webkit.org/show_bug.cgi?id=99728

        Reviewed by Vsevolod Vlasov.

        * inspector/front-end/inspector.html:

2012-10-19  Vsevolod Vlasov  <vsevik@chromium.org>

        Web Inspector: Get rid of isSnippetEvaluation flag on UISourceCode
        https://bugs.webkit.org/show_bug.cgi?id=99823

        Reviewed by Yury Semikhatsky.

        Replaced isSnippetEvaluation flag with a pair of isSnippet and isTemporary set.

        * inspector/front-end/ResourceScriptMapping.js:
        (WebInspector.ResourceScriptMapping.prototype._getOrCreateTemporaryUISourceCode):
        * inspector/front-end/ScriptSnippetModel.js:
        (WebInspector.ScriptSnippetModel.prototype._releasedUISourceCodes):
        (WebInspector.ScriptSnippetModel.prototype._createUISourceCodeForScript):
        * inspector/front-end/ScriptsNavigator.js:
        (WebInspector.ScriptsNavigator.prototype._snippetsNavigatorViewForUISourceCode):
        (WebInspector.ScriptsNavigator.prototype.revealUISourceCode):
        * inspector/front-end/ScriptsPanel.js:
        (WebInspector.ScriptsPanel.prototype._createSourceFrame):
        * inspector/front-end/Workspace.js:
        (WebInspector.Project.prototype.addTemporaryUISourceCode):

2012-10-19  Alexander Pavlov  <apavlov@chromium.org>

        Web Inspector: Invalid Regex in SASSSourceMapping/didRequestContent, breaks Support for Sass experiment
        https://bugs.webkit.org/show_bug.cgi?id=99729

        Reviewed by Vsevolod Vlasov.

        Decode only the first line number digit written in a six-character escaped Unicode format.

        * inspector/front-end/SASSSourceMapping.js:
        (WebInspector.SASSSourceMapping.prototype._resourceAdded.didRequestContent):
        (WebInspector.SASSSourceMapping.prototype._resourceAdded):

2012-10-19  Tommy Widenflycht  <tommyw@google.com>

        MediaStream API: Update the RuntimeEnabledFeatures flags
        https://bugs.webkit.org/show_bug.cgi?id=99714

        Reviewed by Adam Barth.

        Updating the RuntimeEnabledFeatures flags to match reality:
        isMediaStreamEnabled and isPeerConnectionEnabled should be true by default and
        isDeprecatedPeerConnectionEnabled false.

        Patch covered by existing tests.

        * bindings/generic/RuntimeEnabledFeatures.cpp:
        (WebCore):

2012-10-19  Adam Barth  <abarth@webkit.org>

        [V8] Simplify GCPrologueVisitor
        https://bugs.webkit.org/show_bug.cgi?id=99819

        Reviewed by Kentaro Hara.

        Previously, GCPrologueVisitor used a complicated traits-based template
        design. That's not necessary. We can just implement it directly without
        template magic.

        The one subtly here is that MessagePort is not actually a subclass of
        ActiveDOMObject. The next stage of this cleanup is to make MessagePort
        inherit from ActiveDOMObject and remove this special case entirely.

        * bindings/v8/V8GCController.cpp:
        (WebCore::EnsureWeakDOMNodeVisitor::visitDOMWrapper):
        (WebCore):
        (WebCore::ActiveDOMObjectPrologueVisitor::visitDOMWrapper):
        (WebCore::NodeVisitor::visitDOMWrapper):
        (WebCore::V8GCController::gcPrologue):

2012-10-19  Eugene Klyuchnikov  <eustas.bug@gmail.com>

        Web Inspector: Saving HAR, snapshots and timeline data do not work in remote debugging mode
        https://bugs.webkit.org/show_bug.cgi?id=99179

        Reviewed by Yury Semikhatsky.

        Added method "close" to InspectorFrontendHost.
        Symantically, this method forces to flush all unsaved buffers for
        specified file. In native implementation this turns to be no-op.

        In stub implementation "close" causes compilation of blob object an
        navigating to blob-schema url.

        Removed "canAppend", as appending in now suppurted
        by all implementations.

        Repaced schema "data" with "blob" in InspectorFrontendHostStub "save"
        to avoid out-of-memory errors.

        * inspector/InspectorFrontendHost.cpp:
        (WebCore::InspectorFrontendHost::close): Compiles blob object and
        navigates to blob-object url.
        (WebCore):
        * inspector/InspectorFrontendHost.h: Added "close" method.
        * inspector/InspectorFrontendHost.idl: Ditto.
        * inspector/front-end/FileManager.js:
        (WebInspector.FileManager.prototype.close): Proxy to InspectorFrontend.
        * inspector/front-end/FileUtils.js:
        (WebInspector.FileOutputStream.prototype.close):
        Invoke "close" on FileManager.
        (WebInspector.FileOutputStream.prototype._onAppendDone): Ditto.
        * inspector/front-end/HandlerRegistry.js: Added mandatory "close" call.
        * inspector/front-end/HeapSnapshotView.js:
        (WebInspector.HeapProfileHeader.prototype.canSaveToFile): Fixed check.
        * inspector/front-end/InspectorFrontendHostStub.js:
        (.WebInspector.InspectorFrontendHostStub):
        Added "appendable" behaviour emulation.
        * inspector/front-end/SourceFrame.js: Added mandatory "close" call.
        * inspector/front-end/externs.js: Replaced "canAppend" with "close"

2012-10-18  Dominic Mazzoni  <dmazzoni@google.com>

        AX: labelForElement is slow when there are a lot of DOM elements
        https://bugs.webkit.org/show_bug.cgi?id=97825

        Reviewed by Ryosuke Niwa.

        Adds a DocumentOrderedMap to TreeScope that allows accessibility to
        quickly map from an id to the label for that id. This speeds up
        AccessibilityNode::labelForElement, which was a bottleneck in Chromium
        when accessibility was on.

        Tests: accessibility/title-ui-element-correctness.html
               perf/accessibility-title-ui-element.html

        * accessibility/AccessibilityNodeObject.cpp:
        (WebCore::AccessibilityNodeObject::labelForElement):
        * dom/DocumentOrderedMap.cpp:
        (WebCore::keyMatchesLabelForAttribute):
        (WebCore):
        (WebCore::DocumentOrderedMap::get):
        (WebCore::DocumentOrderedMap::getElementByLabelForAttribute):
        * dom/DocumentOrderedMap.h:
        (DocumentOrderedMap):
        * dom/Element.cpp:
        (WebCore::Element::insertedInto):
        (WebCore::Element::removedFrom):
        (WebCore::Element::updateLabel):
        (WebCore):
        (WebCore::Element::willModifyAttribute):
        * dom/Element.h:
        (Element):
        * dom/TreeScope.cpp:
        (WebCore::TreeScope::TreeScope):
        (WebCore::TreeScope::destroyTreeScopeData):
        (WebCore::TreeScope::addLabel):
        (WebCore):
        (WebCore::TreeScope::removeLabel):
        (WebCore::TreeScope::labelElementForId):
        * dom/TreeScope.h:
        (WebCore):
        (TreeScope):
        (WebCore::TreeScope::shouldCacheLabelsByForAttribute):

2012-10-19  Eugene Klyuchnikov  <eustas.bug@gmail.com>

        Web Inspector: Update localizedStrings.js
        https://bugs.webkit.org/show_bug.cgi?id=99701

        Reviewed by Yury Semikhatsky.

        Fixed most of missing strings and orphans.

        * English.lproj/localizedStrings.js:
        * inspector/front-end/SettingsScreen.js:

2012-10-17  Ilya Tikhonovsky  <loislo@chromium.org>

        Web Inspector: NMI provide data for mixing with tcmalloc heap dumps.
        https://bugs.webkit.org/show_bug.cgi?id=99457

        Reviewed by Yury Semikhatsky.

        countObjectSize now accepts ptr as the first argument and saves it into HashMap if the binary was ran with HEAPPROFILE env variable.
        getProcessMemoryDistribution does snapshot and calls the downstream code with the map of counted objects.

        * inspector/InspectorClient.h:
        (WebCore::InspectorClient::dumpUncountedAllocatedObjects):
        * inspector/InspectorMemoryAgent.cpp:
        (WebCore::reportJSHeapInfo):
        (WebCore::reportRenderTreeInfo):
        (WebCore):
        (WebCore::InspectorMemoryAgent::getProcessMemoryDistribution):
        * inspector/MemoryInstrumentationImpl.cpp:
        (WebCore::MemoryInstrumentationClientImpl::countObjectSize):
        (WebCore::MemoryInstrumentationClientImpl::reportMemoryUsage):
        * inspector/MemoryInstrumentationImpl.h:
        (MemoryInstrumentationClientImpl):
        (WebCore::MemoryInstrumentationClientImpl::countedObjects):

2012-10-19  Adam Barth  <abarth@webkit.org>

        [V8] DOMObjectVisitor does nothing
        https://bugs.webkit.org/show_bug.cgi?id=99812

        Reviewed by Kentaro Hara.

        This code doesn't do anything, even in Debug! We should just remove it.

        * bindings/v8/V8GCController.cpp:
        (WebCore):
        (WebCore::V8GCController::gcPrologue):
        (WebCore::V8GCController::gcEpilogue):

2012-10-19  Adam Barth  <abarth@webkit.org>

        [V8] Remove unused typedef from V8GCController.cpp
        https://bugs.webkit.org/show_bug.cgi?id=99808

        Reviewed by Kentaro Hara.

        This typedef is not used.

        * bindings/v8/V8GCController.cpp:

2012-10-18  Alexander Pavlov  <apavlov@chromium.org>

        Web Inspector: [Styles] Property considered overridden if it is non-inherited important property in inherited style
        https://bugs.webkit.org/show_bug.cgi?id=99720

        Reviewed by Yury Semikhatsky.

        Non-inherited properties are now disregarded in inherited styles.

        * inspector/front-end/StylesSidebarPane.js:
        (WebInspector.StylesSidebarPane.prototype._refreshStyleRules):
        (WebInspector.StylesSidebarPane.prototype._markUsedProperties):

2012-10-18  Adam Barth  <abarth@webkit.org>

        [V8] GrouperVisitor is secretly two entirely separate objects
        https://bugs.webkit.org/show_bug.cgi?id=99810

        Reviewed by Kentaro Hara.

        We can separate out the two things that GrouperVisitor is trying to do
        because they have nothing to do with each other.

        * bindings/v8/V8GCController.cpp:
        (ObjectVisitor):
        (WebCore::ObjectVisitor::visitDOMWrapper):
        (WebCore):
        (WebCore::V8GCController::gcPrologue):

2012-10-18  Kiran Muppala  <cmuppala@apple.com>

        Automatically start plugins created within a user gesture, skipping snapshotting
        https://bugs.webkit.org/show_bug.cgi?id=99778

        Reviewed by Alexey Proskuryakov.

        If a user gesture is being processed, do not set the display state of
        HTMLPluginImageElement to WaitingForSnapshot.

        No new tests, since it only affects when plugins switch from snapshot to running
        state.  Does not affect rendering of other elements.

        * html/HTMLPlugInImageElement.cpp:
        (WebCore::HTMLPlugInImageElement::HTMLPlugInImageElement):

2012-10-18  Kent Tamura  <tkent@chromium.org>

        Add shortMonthLabels and shortStandAloneMonthLabels to Localizer
        https://bugs.webkit.org/show_bug.cgi?id=99787

        Reviewed by Kentaro Hara.

        This is going to be used for input[type=month] UI. This doesn't affect
        any bahevior yet.

        Tests: Add some tests to Source/WebKit/chromium/tests/, and will add
        layout tests later.

        * platform/text/Localizer.h:
        (Localizer): Add shortMonthLabels and shortStandAloneMonthLabels as pure
        virtual member functions.

        * platform/text/LocaleICU.h:
        (LocaleICU): Declare shortMonthLabels and shortStandAloneMonthLabels.
        * platform/text/LocaleICU.cpp:
        (WebCore::LocaleICU::shortMonthLabels): Added.
        (WebCore::LocaleICU::shortStandAloneMonthLabels): Added.

        * platform/text/LocaleNone.cpp:
        (LocaleNone): Declare shortMonthLabels and shortStandAloneMonthLabels.
        (WebCore::LocaleNone::shortMonthLabels):
        Added. Always returns English labels.
        (WebCore::LocaleNone::shortStandAloneMonthLabels):
        Addes. Just calls shortMonthLabels.

        * platform/text/LocaleWin.h:
        (LocaleWin): Declare shortMonthLabels and shortStandAloneMonthLabels.
        * platform/text/LocaleWin.cpp:
        (WebCore::LocaleWin::shortMonthLabels): Added.
        (WebCore::LocaleWin::shortStandAloneMonthLabels):
        Added. Always returns shortMonthLabels.

        * platform/text/mac/LocaleMac.h:
        (LocaleMac): Declare shortMonthLabels and shortStandAloneMonthLabels.
        * platform/text/mac/LocaleMac.mm:
        (WebCore::LocaleMac::shortMonthLabels): Added.
        (WebCore::LocaleMac::shortStandAloneMonthLabels): Added.

2012-10-18  Kunihiko Sakamoto  <ksakamoto@chromium.org>

        Implement value sanitization algorithm for type=datetime
        https://bugs.webkit.org/show_bug.cgi?id=76893

        Reviewed by Kent Tamura.

        Implement the value sanitization algorithm for type=datetime that adjusts
        the value to a valid normalized forced-UTC global date and time string.
        See http://www.whatwg.org/specs/web-apps/current-work/multipage/common-microsyntaxes.html#valid-normalized-forced-utc-global-date-and-time-string

        Test: fast/forms/datetime/datetime-value-sanitization.html

        * html/DateTimeInputType.cpp:
        (WebCore::DateTimeInputType::sanitizeValue): Implemented.
        (WebCore):
        * html/DateTimeInputType.h:
        (DateTimeInputType): Add sanitizeValue.
        * platform/DateComponents.cpp:
        (WebCore::DateComponents::addMinute): Fixed a bug that caused wrong adjustment
        of timezone offset (e.g. 2012-10-17T01:00+01:00 -> 2012-10-17T01:-60Z).

2012-10-18  Byungwoo Lee  <bw80.lee@samsung.com>

        Fix build warning.
        https://bugs.webkit.org/show_bug.cgi?id=99788

        Reviewed by Kentaro Hara.

        Use UNUSED_PARAM macro for removing -Wunused-parameter.

        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::currentTransform):

2012-10-18  Benjamin Poulain  <bpoulain@apple.com>

        [WK2] WebKit2 does not build without PLUGIN_PROCESS on Mac
        https://bugs.webkit.org/show_bug.cgi?id=99771

        Reviewed by Anders Carlsson.

        * WebCore.exp.in: The symbol is used by WebCore Test Support, move it
        to the general section.

2012-10-18  Adam Barth  <abarth@webkit.org>

        [V8] fast/dom/gc-9.html fails for document.styleSheets
        https://bugs.webkit.org/show_bug.cgi?id=99786

        Reviewed by Kentaro Hara.

        V8 needs to know about this IDL attribute as well.

        * css/StyleSheetList.idl:

2012-10-18  Adam Barth  <abarth@webkit.org>

        [V8] fast/dom/gc-9.html fails for document.implementation
        https://bugs.webkit.org/show_bug.cgi?id=99783

        Reviewed by Kentaro Hara.

        In order to correctly manage the lifetime of document.implementation,
        we need to implement GenerateIsReachable=ImplDocument.

        * bindings/scripts/CodeGeneratorV8.pm:
        (GenerateVisitDOMWrapper):
        * bindings/scripts/IDLAttributes.txt:
        * dom/DOMImplementation.idl:

2012-10-18  Chris Fleizach  <cfleizach@apple.com>

        AX: Crashes in WebProcess at com.apple.WebCore: -[AccessibilityObjectWrapper remoteAccessibilityParentObject] + 78
        https://bugs.webkit.org/show_bug.cgi?id=96443

        Reviewed by Beth Dakin.

        Separate out the chain of calls so that the number of times document() is called is reduced and it will be easier
        to determine which line this crash is happening on.

        * accessibility/mac/WebAccessibilityObjectWrapper.mm:
        (-[WebAccessibilityObjectWrapper remoteAccessibilityParentObject]):

2012-10-18  Alec Flett  <alecflett@chromium.org>

        IndexedDB: Refactor IDBDatabaseBackendImpl to use IDBDatabaseMetadata
        https://bugs.webkit.org/show_bug.cgi?id=99773

        Reviewed by Tony Chang.

        Refactor to begin separating out metadata from stateful backend objects,
        in preparation for https://bugs.webkit.org/show_bug.cgi?id=99774.

        Also includes some #include dependency cleanup so that the backing store
        depends less on the stateful backend objects.

        No new tests as this is purely a refactor.

        * Modules/indexeddb/IDBBackingStore.h:
        (WebCore):
        (IDBBackingStore):
        * Modules/indexeddb/IDBCursor.h:
        * Modules/indexeddb/IDBCursorBackendImpl.h:
        (WebCore):
        * Modules/indexeddb/IDBDatabaseBackendImpl.cpp:
        (WebCore::IDBDatabaseBackendImpl::IDBDatabaseBackendImpl):
        (WebCore::IDBDatabaseBackendImpl::openInternal):
        (WebCore::IDBDatabaseBackendImpl::metadata):
        (WebCore::IDBDatabaseBackendImpl::createObjectStore):
        (WebCore::IDBDatabaseBackendImpl::setVersion):
        (WebCore::IDBDatabaseBackendImpl::setVersionInternal):
        (WebCore::IDBDatabaseBackendImpl::setIntVersionInternal):
        (WebCore::IDBDatabaseBackendImpl::processPendingCalls):
        (WebCore::IDBDatabaseBackendImpl::openConnection):
        (WebCore::IDBDatabaseBackendImpl::runIntVersionChangeTransaction):
        (WebCore::IDBDatabaseBackendImpl::openConnectionWithVersion):
        (WebCore::IDBDatabaseBackendImpl::deleteDatabase):
        (WebCore::IDBDatabaseBackendImpl::loadObjectStores):
        (WebCore::IDBDatabaseBackendImpl::resetVersion):
        * Modules/indexeddb/IDBDatabaseBackendImpl.h:
        (WebCore::IDBDatabaseBackendImpl::id):
        (IDBDatabaseBackendImpl):
        * Modules/indexeddb/IDBLevelDBBackingStore.cpp:
        (WebCore::IDBLevelDBBackingStore::getIDBDatabaseMetaData):
        (WebCore::IDBLevelDBBackingStore::deleteDatabase):
        * Modules/indexeddb/IDBLevelDBBackingStore.h:
        (IDBLevelDBBackingStore):
        * Modules/indexeddb/IDBObjectStoreBackendInterface.h:
        * Modules/indexeddb/IDBTransaction.h:
        (WebCore):

2012-10-18  Peter Kasting  <pkasting@google.com>

        [Skia] Set m_hasAlpha correctly in ImageFrame::copyBitmapData.
        https://bugs.webkit.org/show_bug.cgi?id=99781

        Reviewed by Adam Barth.

        No tests, since the actual effects of this bug are fickle and it's not
        clear how to extract and check particular subframes of an animated GIF.

        * platform/image-decoders/skia/ImageDecoderSkia.cpp:
        (WebCore::ImageFrame::copyBitmapData):

2012-10-18  Pan Deng  <pan.deng@intel.com>

        [Resource Timing]Implementation of resource timing buffer size restriction functionality
        https://bugs.webkit.org/show_bug.cgi?id=84885.

        Reviewed by Tony Gentilcore.

        http://www.w3.org/TR/2012/CR-resource-timing-20120522/
        This patch enable functionality of set buffer size(default is 150 as spec). When buffer is full, resourceTimingBufferFull event will be fired. Incoming entries will be dropped if no more space for them. 

        Tests: http/tests/w3c/webperf/submission/Intel/resource-timing/test_resource_timing_buffer_full_when_populate_entries.html
               http/tests/w3c/webperf/submission/Intel/resource-timing/test_resource_timing_buffer_full_when_shrink_buffer_size.html
               http/tests/w3c/webperf/submission/Intel/resource-timing/test_resource_timing_buffer_size_restriction.html
               http/tests/w3c/webperf/submission/Intel/resource-timing/test_resource_timing_clear_resource_timing_functionality.html
               http/tests/w3c/webperf/submission/Intel/resource-timing/test_resource_timing_on_shrink_buffer_size.html
               http/tests/w3c/webperf/submission/Intel/resource-timing/test_resource_timing_store_and_clear_during_callback.html

        * page/Performance.cpp:
        (WebCore):
        (WebCore::Performance::Performance):
        (WebCore::Performance::webkitSetResourceTimingBufferSize):
        (WebCore::Performance::addResourceTiming):
        (WebCore::Performance::isResourceTimingBufferFull):
        * page/Performance.h:
        (Performance):

2012-10-18  Ryosuke Niwa  <rniwa@webkit.org>

        REGRESSION(r130411): Copying & pasting the first line of text can move caret to the end of text area
        https://bugs.webkit.org/show_bug.cgi?id=99663

        Reviewed by Enrica Casucci and Levi Weintraub.

        The bug was caused by positionOnlyToBeUpdated's offset not being shifted correctly in
        ReplaceSelectionCommand::mergeTextNodesAroundPosition. Suppose we have text nodes t1 and t2 and
        positionOnlyToBeUpdated had offset k in t2. When t2 is merged into t1, positionOnlyToBeUpdated should be
        moved to (t1, n + k) where n is the ORIGINAL length of t1 before t2 is merged. But we were using
        the length after t2 is merged.

        Fixed the bug by saving the original length of t1 and using that in the offset adjustment.
        Also use the right offset.

        Test: editing/pasteboard/copy-paste-first-line-in-textarea.html

        * editing/ReplaceSelectionCommand.cpp:
        (WebCore::ReplaceSelectionCommand::mergeTextNodesAroundPosition):

2012-10-18  Claudio Saavedra  <csaavedra@igalia.com>

        [GTK] Invalid read from WebKit::DOMObjectCache::clearByFrame
        https://bugs.webkit.org/show_bug.cgi?id=82882

        Reviewed by Xan Lopez.

        Based on a patch by Milan Crha <mcrha@redhat.com>

        Prevent an invalid access to a pointer while clearing the DOM
        object cache.
        * bindings/gobject/DOMObjectCache.cpp:
        (WebKit::DOMObjectCache::clearByFrame): Prevent an invalid access.

2012-10-18  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r131810.
        http://trac.webkit.org/changeset/131810
        https://bugs.webkit.org/show_bug.cgi?id=99762

        Broke linux debug webkit_unit_tests (Requested by
        danakj|gardening on #webkit).

        * WebCore.gypi:
        * platform/graphics/ImageSource.cpp:
        (WebCore::ImageSource::setData):
        * platform/graphics/ImageSource.h:
        (WebCore):
        (ImageSource):
        * platform/graphics/chromium/DeferredImageDecoder.cpp: Removed.
        * platform/graphics/chromium/DeferredImageDecoder.h: Removed.
        * platform/graphics/chromium/ImageDecodingStore.cpp: Removed.
        * platform/graphics/chromium/ImageDecodingStore.h: Removed.
        * platform/graphics/chromium/ImageFrameGenerator.cpp: Removed.
        * platform/graphics/chromium/ImageFrameGenerator.h: Removed.
        * platform/graphics/chromium/LazyDecodingPixelRef.cpp: Removed.
        * platform/graphics/chromium/LazyDecodingPixelRef.h: Removed.
        * platform/graphics/chromium/ScaledImageFragment.cpp: Removed.
        * platform/graphics/chromium/ScaledImageFragment.h: Removed.
        * platform/graphics/skia/NativeImageSkia.cpp:
        (WebCore::NativeImageSkia::resizedBitmap):
        * platform/image-decoders/ImageDecoder.h:
        (ImageFrame):

2012-10-18  Tommy Widenflycht  <tommyw@google.com>

        MediaStream API: Do some cleanup in the chromium WebKit API
        https://bugs.webkit.org/show_bug.cgi?id=99713

        Reviewed by Adam Barth.

        Removing the deprecated version of WebMediaStreamDescriptor::initialize.

        No testing needed since only an unused function is removed.

        * platform/chromium/support/WebMediaStreamDescriptor.cpp:

2012-10-18  Alpha Lam  <hclam@chromium.org>

        [chromium] Implement deferred image decoding
        https://bugs.webkit.org/show_bug.cgi?id=94240

        Reviewed by Stephen White.

        Objectives:

        To record image decoding operations during painting and to defer
        decoding operations until rasterization.

        Rationale:

        This is a key feature that enables impl-side painting which requires
        fast recording of drawing operations. The existing decode-on-draw
        restricts that recording has to block on expensive decoding operations.
        This change allows recording of image decoding operations during paint
        time.

        Design:

        Image decoding happens when a BitmapImage is drawn into a
        GraphicsContext. When per-tile painting is enabled GraphicsContext
        is backed by SkCanvas in recording mode. This SkCanvas records drawing
        and image decoding operations to minimize recording time.

        An image decoding operation is recorded as a SkPixelRef object
        implemented by LazyDecodingPixelRef. This object references raw encoded
        data, regions to be decoded and scaling information.

        When used in conjunction with per-tile painting this feature defers
        image decoding until the SkCanvas referencing the image is rasterized.

        Both recording and rasterization happen on the main thread.

        Performance Impact:

        This feature is enabled by WebKit::setDeferredImageDecodingEnabled()
        and does not have an impact when disabled.

        This feature is disabled by default.

        Upcoming Changes:

        1. Implement a full-featured image cache in ImageDecodingStore.
        2. Allow rasterization and decoding on impl thread.

        Classes Involved:

        BitmapImage

        BitmapImage is the entry point for deferred image decoding. When
        drawing a BitmapImage into a GraphicsContext it makes a request to
        create a NativeImageSkia. We substitute the content in NativeImageSkia
        such that it is lazily decoded.

        DeferredImageDecoder

        This is the platform implementation of a image decoder for Chromium.
        This is a bridge layer that either delegates calls to the actual
        ImageDecoder or create a lazily-decoded SkBitmap and delegates calls
        to ImageDecodingStore.

        ImageDecodingStore

        This object manages all encoded images. It keeps track of encoded
        data and the corresponding ImageDecoder for doing actual decoding. It
        is also responsible for generating lazily decoded SkBitmaps. This
        SkBitmap contains a LazyDecodingPixelRef object which references to an
        image entry in ImageDecodingStore.

        ScaledImageFragment

        A container for a scaled image fragment. In addition to bitmap pixels
        it contains information about the ID of the image, scale and clipping.

        ImageFrameGenerator

        This object is responsible for generating decoded pixels. It is also
        a container for encoded image data and corresponding image decoder.

        LazyDecodingPixelRef

        This object is embedded in a SkBitmap to enable lazy decoding. When
        SkBitmap needs to access pixels LazyDecodingPixelRef is locked. It
        contains information to locate an image and scaling info, these
        information is submitted to ImageDecodingStore to access actual pixels.

        Layout tests. There are about 80 tests in this virtual test suite
        running this feature in this directory:

        platform/chromium/virtual/deferred/fast/images

        Unit tests. Added DeferredImageDecoderTest to verify deferred
        image decoding behavior.

        * WebCore.gypi:
        * platform/graphics/ImageSource.cpp:
        (WebCore::ImageSource::setData):
        * platform/graphics/ImageSource.h:
        (WebCore):
        (ImageSource):
        * platform/graphics/chromium/DeferredImageDecoder.cpp: Added.
        (WebCore):
        (WebCore::DeferredImageDecoder::DeferredImageDecoder):
        (WebCore::DeferredImageDecoder::~DeferredImageDecoder):
        (WebCore::DeferredImageDecoder::create):
        (WebCore::DeferredImageDecoder::createForTesting):
        (WebCore::DeferredImageDecoder::filenameExtension):
        (WebCore::DeferredImageDecoder::frameBufferAtIndex):
        (WebCore::DeferredImageDecoder::setData):
        (WebCore::DeferredImageDecoder::isSizeAvailable):
        (WebCore::DeferredImageDecoder::size):
        (WebCore::DeferredImageDecoder::frameSizeAtIndex):
        (WebCore::DeferredImageDecoder::frameCount):
        (WebCore::DeferredImageDecoder::repetitionCount):
        (WebCore::DeferredImageDecoder::clearFrameBufferCache):
        (WebCore::DeferredImageDecoder::frameHasAlphaAtIndex):
        (WebCore::DeferredImageDecoder::frameBytesAtIndex):
        * platform/graphics/chromium/DeferredImageDecoder.h: Added.
        (WebCore):
        (DeferredImageDecoder):
        * platform/graphics/chromium/ImageDecodingStore.cpp: Added.
        (WebCore::ImageDecodingStore::ImageDecodingStore):
        (WebCore):
        (WebCore::ImageDecodingStore::~ImageDecodingStore):
        (WebCore::ImageDecodingStore::instanceOnMainThread):
        (WebCore::ImageDecodingStore::initializeOnMainThread):
        (WebCore::ImageDecodingStore::shutdown):
        (WebCore::ImageDecodingStore::isLazyDecoded):
        (WebCore::ImageDecodingStore::createLazyDecodedSkBitmap):
        (WebCore::ImageDecodingStore::resizeLazyDecodedSkBitmap):
        (WebCore::ImageDecodingStore::setData):
        (WebCore::ImageDecodingStore::lockPixels):
        (WebCore::ImageDecodingStore::unlockPixels):
        (WebCore::ImageDecodingStore::frameGeneratorBeingDestroyed):
        (WebCore::ImageDecodingStore::calledOnValidThread):
        (WebCore::ImageDecodingStore::lookupFrameCache):
        (WebCore::ImageDecodingStore::deleteFrameCache):
        * platform/graphics/chromium/ImageDecodingStore.h: Added.
        (WebCore):
        (ImageDecodingStore):
        (WebCore::ImageDecodingStore::create):
        * platform/graphics/chromium/ScaledImageFragment.cpp: Added.
        (WebCore):
        (WebCore::ScaledImageFragment::~ScaledImageFragment):
        (WebCore::ScaledImageFragment::ScaledImageFragment):
        (WebCore::ScaledImageFragment::isEqual):
        * platform/graphics/chromium/ScaledImageFragment.h: Added.
        (WebCore):
        (ScaledImageFragment):
        (WebCore::ScaledImageFragment::create):
        (WebCore::ScaledImageFragment::bitmap):
        (WebCore::ScaledImageFragment::isComplete):
        * platform/graphics/chromium/ImageFrameGenerator.cpp: Added.
        (WebCore):
        (WebCore::ImageFrameGenerator::ImageFrameGenerator):
        (WebCore::ImageFrameGenerator::~ImageFrameGenerator):
        (WebCore::ImageFrameGenerator::decoder):
        (WebCore::ImageFrameGenerator::setData):
        * platform/graphics/chromium/ImageFrameGenerator.h: Added.
        (WebCore):
        (ImageFrameGenerator):
        (WebCore::ImageFrameGenerator::create):
        (WebCore::ImageFrameGenerator::size):
        (WebCore::ImageFrameGenerator::imageId):
        * platform/graphics/chromium/LazyDecodingPixelRef.cpp: Added.
        (WebCore):
        (WebCore::LazyDecodingPixelRef::LazyDecodingPixelRef):
        (WebCore::LazyDecodingPixelRef::~LazyDecodingPixelRef):
        (WebCore::LazyDecodingPixelRef::isScaled):
        (WebCore::LazyDecodingPixelRef::isClipped):
        (WebCore::LazyDecodingPixelRef::onLockPixels):
        (WebCore::LazyDecodingPixelRef::onUnlockPixels):
        (WebCore::LazyDecodingPixelRef::onLockPixelsAreWritable):
        * platform/graphics/chromium/LazyDecodingPixelRef.h: Added.
        (WebCore):
        (LazyDecodingPixelRef):
        (WebCore::LazyDecodingPixelRef::frameGenerator):
        * platform/graphics/skia/NativeImageSkia.cpp:
        (WebCore::NativeImageSkia::resizedBitmap):
        * platform/image-decoders/ImageDecoder.h:
        (ImageFrame):
        (WebCore::ImageFrame::setSkBitmap):
        (WebCore::ImageFrame::getSkBitmap):

2012-10-18  Yael Aharon  <yael.aharon@intel.com>

        [EFL] GraphicsContext3D::m_renderStyle is not initialized
        https://bugs.webkit.org/show_bug.cgi?id=99721

        Reviewed by Antonio Gomes.

        Initialize GraphicsContext3D::m_renderStyle.

        No new tests, no new functionality.

        * platform/graphics/efl/GraphicsContext3DEfl.cpp:
        (WebCore::GraphicsContext3D::GraphicsContext3D):

2012-10-18  Max Vujovic  <mvujovic@adobe.com>

        [CSS Shaders] Validate types of built-in vertex attributes
        https://bugs.webkit.org/show_bug.cgi?id=98972

        Reviewed by Dean Jackson.

        Reject custom filters in which the author defined built-in attributes with the wrong type.
        For example, the GLSL declaration "attribute float a_position" is incorrect because
        a_position should be a vec4, not a float.

        Test: css3/filters/custom/invalid-custom-filter-attribute-types.html

        * platform/graphics/ANGLEWebKitBridge.h:
        (WebCore::ANGLEShaderSymbol::isSampler):
            Add const qualifier to isSampler method.
        * platform/graphics/filters/CustomFilterValidatedProgram.cpp:
        (WebCore):
        (WebCore::builtInAttributeNameToTypeMap):
            New file static function. Returns a map of the CSS Custom Filters built-in attribute
            names and their expected types.
        (WebCore::validateSymbols):
            New file static function. Loop through all of the symbols. Reject the shader if we find
            a built-in attribute defined with the wrong type.
        (WebCore::CustomFilterValidatedProgram::CustomFilterValidatedProgram):
            Call the new validateSymbols function. If it returns false, exit the constructor early,
            which rejects the program.
            Move the loop that checks if any uniform is a sampler into the the validateSymbols
            function.

2012-10-18  Mike Reed  <reed@google.com>

        Handle if we fail to allocate nonPlatformCanvas in ImageBuffer constructor
        https://bugs.webkit.org/show_bug.cgi?id=99752

        Reviewed by Stephen White.

        Current code does not check if we were able to allocate the pixels, but still returns the canvas.
        However, the caller explicitly is checking for null on failure, so it will continue (and possibly
        crash later on).
        This change brings the nonPlatformCanvas behavior inline with createAcceleratedCanvas and
        TryCreateBitmapCanvas, both of which are also called by ImageBuffer's constructor.

        No new tests. Existing tests exercise ImageBuffer constructor.

        * platform/graphics/skia/ImageBufferSkia.cpp:
        (WebCore::createNonPlatformCanvas):

2012-10-18  Beth Dakin  <bdakin@apple.com>

        https://bugs.webkit.org/show_bug.cgi?id=99668
        REGRESSION: Crash in 
        WebCore::ScrollingStateScrollingNode::setNonFastScrollableRegion
        -and corresponding-
        <rdar://problem/12491901>

        Reviewed by Simon Fraser.

        http://trac.webkit.org/changeset/130783 changed the lifetime of the 
        ScrollingStateTree's rootStateNode. Before that patch, the root state 
        node was never destroyed. It was just constantly re-used for 
        different RenderLayerBackings. This crash is just one of a few bugs 
        that has occurred because of that change. I have fixed the other bugs 
        individually, but I think that long-term, it is the safest solution 
        to go back to the original ownership model.

        So this patch ensures that the state tree will always have a root 
        state node. Instead of destroying and re-creating the root node when 
        it's scroll ID changes, we just update the ID.

        attachToStateTree() now takes an additional ID representing the ID of 
        the parent node.
        * page/scrolling/ScrollingCoordinator.h:
        (WebCore::ScrollingCoordinator::attachToStateTree):

        Add a way to set the scrolling node ID.
        * page/scrolling/ScrollingStateNode.h:
        (WebCore::ScrollingStateNode::setScrollingNodeID):

        This code that provided a way to mark all properties as having 
        changed was added in http://trac.webkit.org/changeset/130989 as a way 
        to ensure we would re-set ScrollingThread's nodes when we destroyed 
        and re-created the rootStateNode. Now that we are no longer 
        destroying and re-creating the rootStateNode, this code is no longer 
        necessary.
        * page/scrolling/ScrollingStateScrollingNode.cpp:
        * page/scrolling/ScrollingStateScrollingNode.h:

        create m_rootStateNode right in the ScrollingStateTree's constructor.
        * page/scrolling/ScrollingStateTree.cpp:
        (WebCore::ScrollingStateTree::ScrollingStateTree):

        Don't let removeNode() destroy m_rootStateNode.
        (WebCore::ScrollingStateTree::removeNode):

        Also a part of r130989 that is no longer needed.
        (WebCore::ScrollingStateTree::rootLayerDidChange():
        * page/scrolling/ScrollingStateTree.h:
        (WebCore::ScrollingStateTree::rootStateNode):
        (ScrollingStateTree):
        (WebCore::ScrollingStateTree::setRootStateNode):

        attachToStateTree() now takes an additional ID representing the ID of 
        the parent node.
        * page/scrolling/mac/ScrollingCoordinatorMac.h:
        (ScrollingCoordinatorMac):

        We no longer need ScrollingStateTree::rootLayerDidChange()
        * page/scrolling/mac/ScrollingCoordinatorMac.mm:
        (WebCore::ScrollingCoordinatorMac::frameViewRootLayerDidChange):

        Do not destroy and re-create the state node. Just update its ID. When 
        we support child nodes soon, we will create them in this function.
        (WebCore::ScrollingCoordinatorMac::attachToStateTree):

        No need to null-check the rootStateNode.
        (WebCore::ScrollingCoordinatorMac::clearStateTree):

        Send 0 as the parent node ID to attachToStateTree() to represent the 
        root node.
        (WebCore::ScrollingCoordinatorMac::ensureRootStateNodeForFrameView):
        * rendering/RenderLayerBacking.cpp:

        RenderLayerBacking::attachToScrollingCoordinator() now takes a parent 
        layer.
        (WebCore::RenderLayerBacking::attachToScrollingCoordinator):
        * rendering/RenderLayerBacking.h:
        (RenderLayerBacking):

        Since this is the root, send 0 to represent the parent layer.
        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::updateBacking):

2012-10-18  Yael Aharon  <yael.aharon@intel.com>

        [EFL] GraphicsContext3D::m_renderStyle is not initialized
        https://bugs.webkit.org/show_bug.cgi?id=99721

        Reviewed by Antonio Gomes.

        Initialize GraphicsContext3D::m_renderStyle.

        No new tests, no new functionality.

        * platform/graphics/efl/GraphicsContext3DEfl.cpp:
        (WebCore::GraphicsContext3D::GraphicsContext3D):

2012-10-18  Brian White  <bcwhite@chromium.org>

        WebKit Doesn't Recognize Content-Language HTTP Header
        https://bugs.webkit.org/show_bug.cgi?id=97929

        Reviewed by Alexey Proskuryakov.

        The HTTP "Content-Language" header may be present and include the
        language of the page contents (as opposed to an embedded meta tag).

        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::didBeginDocument):

2012-10-18  Jer Noble  <jer.noble@apple.com>

        Crash in WebCore::Document::webkitExitFullscreen + 618
        https://bugs.webkit.org/show_bug.cgi?id=99496

        Reviewed by Eric Carlson.

        Prospective fix for null-dereference crash in Document::webkitExitFullscreen().

        * dom/Document.cpp:
        (WebCore::Document::webkitExitFullscreen): Null check page() before calling page()->chrome.

2012-10-18  Pablo Flouret  <pablof@motorola.com>

        Implement css3-conditional's @supports rule
        https://bugs.webkit.org/show_bug.cgi?id=86146

        Reviewed by Antti Koivisto.

        The "@supports" rule is a conditional group rule whose condition tests
        whether the user agent supports CSS property:value pairs.

        http://dev.w3.org/csswg/css3-conditional/#at-supports

        Test: css3/supports.html

        * Configurations/FeatureDefines.xcconfig:
        * GNUmakefile.am:
        * GNUmakefile.features.am:
            Add an ENABLE_CSS3_CONDITIONAL_RULES flag.

        * css/CSSGrammar.y.in:
        * css/CSSParser.cpp:
        (WebCore):
        (WebCore::CSSParser::detectSupportsToken): Tries to find 'and', 'not' and 'or' tokens.
        (WebCore::CSSParser::detectAtToken): Enter SupportsMode if @supports is detected.
        (WebCore::CSSParser::realLex): Try to detect supports tokens when in SupportsMode.
        * css/CSSParser.h: Added new SupportsMode parsing mode.
        (CSSParser):

2012-10-18  Marja Hölttä  <marja@chromium.org>

        Fix: CachedResourceLoader::requestSVGDocument was passing an URL as charset
        https://bugs.webkit.org/show_bug.cgi?id=99730

        Reviewed by Jochen Eisinger.

        * loader/cache/CachedResourceLoader.cpp:
        (WebCore::CachedResourceLoader::requestSVGDocument):

2012-10-18  Jer Noble  <jer.noble@apple.com>

        Fullscreen movie controls behave incorrectly when clicked (and dragged)
        https://bugs.webkit.org/show_bug.cgi?id=99610

        Reviewed by Eric Carlson.

        Do not reset the relative drag position to 0,0 at the beginning of every drag.  Instead,
        store the cumulative drag offset and accumulate during each additional drag.

        No new tests; modified the fullscreen/video-controls-drag.html test.

        * html/shadow/MediaControlElements.cpp:
        (WebCore::MediaControlPanelElement::startDrag): Reset m_lastDragEventLocation.
        (WebCore::MediaControlPanelElement::continueDrag): Accumulate drag distance in m_cumulativeDragOffset.
        (WebCore::MediaControlPanelElement::resetPosition): Reset m_cumulativeDragOffset.
        * html/shadow/MediaControlElements.h:

2012-10-18  Brandon Jones  <bajones@google.com>

        Implement OES_element_index_uint / WEBKIT_OES_element_index_uint
        https://bugs.webkit.org/show_bug.cgi?id=97400

        Reviewed by Kenneth Russell.

        Implemented OES_element_index_uint WebGL extension

        Test: fast/canvas/webgl/oes-element-index-uint.html

        * CMakeLists.txt:
        * DerivedSources.make:
        * DerivedSources.pri:
        * GNUmakefile.list.am:
        * Target.pri:
        * WebCore.gypi:
        * WebCore.xcodeproj/project.pbxproj:
        * bindings/js/JSWebGLRenderingContextCustom.cpp:
        (WebCore::toJS):
        * bindings/v8/custom/V8WebGLRenderingContextCustom.cpp:
        (WebCore::toV8Object):
        * html/canvas/OESElementIndexUint.cpp: Copied from Source/WebCore/html/canvas/WebGLExtension.h.
        (WebCore):
        (WebCore::OESElementIndexUint::OESElementIndexUint):
        (WebCore::OESElementIndexUint::~OESElementIndexUint):
        (WebCore::OESElementIndexUint::getName):
        (WebCore::OESElementIndexUint::create):
        * html/canvas/OESElementIndexUint.h: Copied from Source/WebCore/html/canvas/WebGLExtension.h.
        (WebCore):
        (OESElementIndexUint):
        * html/canvas/OESElementIndexUint.idl: Copied from Source/WebCore/html/canvas/WebGLExtension.h.
        * html/canvas/WebGLExtension.h:
        * html/canvas/WebGLRenderingContext.cpp:
        (WebCore):
        (WebCore::WebGLRenderingContext::validateElementArraySize):
        (WebCore::WebGLRenderingContext::validateIndexArrayConservative):
        (WebCore::WebGLRenderingContext::validateIndexArrayPrecise):
        (WebCore::WebGLRenderingContext::validateRenderingState):
        (WebCore::WebGLRenderingContext::drawElements):
        (WebCore::WebGLRenderingContext::getExtension):
        (WebCore::WebGLRenderingContext::getSupportedExtensions):
        * html/canvas/WebGLRenderingContext.h:
        (WebCore):
        (WebGLRenderingContext):
        * platform/graphics/Extensions3D.h:
        (Extensions3D):
        * platform/graphics/opengl/Extensions3DOpenGL.cpp:
        (WebCore::Extensions3DOpenGL::supportsExtension):

2012-10-18  Jer Noble  <jer.noble@apple.com>

        Add diagnostic logging to track per-page media engine usage.
        https://bugs.webkit.org/show_bug.cgi?id=99615
        <rdar://problem/12476473>

        Reviewed by Eric Carlson.

        Add diagnostic logging triggered only once-per-page and once-per-page-per-engine.

        * html/HTMLMediaElement.cpp:
        (WebCore::logMediaLoadRequest): Encapsulate diagnostic logging into single static method.
        (WebCore::HTMLMediaElement::mediaLoadingFailed): Call logMediaLoadRequest.
        (WebCore::HTMLMediaElement::setReadyState): Ditto.
        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::dispatchDidCommitLoad): Reset the set of seen media engines.

        Add new methods to Page to track per-page media engine diagnostic info, similar to plugin diagnostic info.
        * page/Page.cpp:
        (WebCore::Page::hasSeenAnyMediaEngine):
        (WebCore::Page::hasSeenMediaEngine):
        (WebCore::Page::sawMediaEngine):
        (WebCore::Page::resetSeenMediaEngines):
        * page/Page.h:

        Add new static logging key definitions:
        * page/DiagnosticLoggingKeys.cpp:
        (WebCore::DiagnosticLoggingKeys::pageContainsMediaEngineKey):
        (WebCore::DiagnosticLoggingKeys::pageContainsAtLeastOneMediaEngineKey):
        * page/DiagnosticLoggingKeys.h:

2012-10-18  Michael Saboff  <msaboff@apple.com>

        Add 8-bit path to RenderBlock::handleTrailingSpaces()
        https://bugs.webkit.org/show_bug.cgi?id=99731

        Reviewed by Dan Bernstein.

        Factored out and added findFirstTrailingSpace() templated helper function that is called with the 
        approriate character pointer type.

        No tests needed, change covered by existing tests.

        * rendering/RenderBlockLineLayout.cpp:
        (WebCore::findFirstTrailingSpace):
        (WebCore::RenderBlock::handleTrailingSpaces):

2012-10-18  Hans Muller  <hmuller@adobe.com>

        [CSS Exclusions] Add ExclusionShape::shapeBoundingBox() method
        https://bugs.webkit.org/show_bug.cgi?id=99216

        Reviewed by Dirk Schulze.

        Added a FloatRect::extend() method which simplifies writing loops that
        accumulate the bounding box for a sequence of FloatPoints. The new method
        is used by ExclusionPolygon to initialize the shape's logical and physical
        bounding boxes. This a clean-up, not a change in functionality. It's already
        covered by the existing fast/exclusions LayoutTests.

        * platform/graphics/FloatRect.cpp:
        (WebCore::FloatRect::extend): Extend the FloatRect's bounds to include a FloatPoint.
        (WebCore):
        * platform/graphics/FloatRect.h:
        (FloatRect): Added extend() method.
        * rendering/ExclusionPolygon.cpp:
        (WebCore::ExclusionPolygon::ExclusionPolygon): Use FloatRect::extend() to compute the polygon's internal bounding box.
        * rendering/ExclusionShape.cpp:
        (WebCore::ExclusionShape::createExclusionShape): Use FloatRect::extend() to compute the polygon's physical bounding box.
        * rendering/ExclusionShape.h:
        (WebCore::ExclusionShape::shapeBoundingBox): Return the shape's bounding box in physical coordinates.
        (ExclusionShape):

2012-10-18  Hans Muller  <hmuller@adobe.com>

        [CSS Exclusions] Handle special case "empty" shapes
        https://bugs.webkit.org/show_bug.cgi?id=99342

        Reviewed by Dirk Schulze.

        Provide expclit coverage of the simple "empty" shape-inside shapes.
        Shapes will be considered "empty" in the sense that ExclusionShape::getIncludedIntervals()
        and ExclusionShape::getExcludedIntervals() will always return empty lists of intervals.
        This patch covers rectangles of zero width or height, circles with 0 radius, ellipses
        with 0 radiusX or radiusY, polygons with less than 3 vertices.

        Test: fast/exclusions/shape-inside/shape-inside-empty.html

        * rendering/ExclusionPolygon.cpp:
        (WebCore::ExclusionPolygon::ExclusionPolygon): Initialize the m_empty flag.
        (WebCore::ExclusionPolygon::getExcludedIntervals): Added short-circuit return when the polygon is empty.
        (WebCore::ExclusionPolygon::getIncludedIntervals): Added short-circuit return when the polygon is empty.
        * rendering/ExclusionPolygon.h: Added the isEmpty() method.
        * rendering/ExclusionRectangle.cpp:
        (WebCore::ExclusionRectangle::getExcludedIntervals): Added short-circuit return when the rectangle is empty.
        (WebCore::ExclusionRectangle::getIncludedIntervals): Added short-circuit return when the rectangle is empty.
        * rendering/ExclusionRectangle.h: Added the isEmpty() method.
        * rendering/ExclusionShape.h: Added a virtual isEmpty() ExclusionShape method.
        (ExclusionShape):

2012-10-18  Takashi Sakamoto  <tasak@google.com>

        REGRESSION(r131464): Null-pointer crash in StyleResolver::styleForElement
        https://bugs.webkit.org/show_bug.cgi?id=99587

        Reviewed by Dimitri Glazkov.

        Since contents in datalist are not shown, summary in datalist is not
        shown either. So the summary has no render style. On the other hand,
        the summary is implemented by shadow DOM and it has some insertion
        point. Its child, e.g. title in the below test, is distributed.
        To solve the child's user-modify, looking at shadow host(=summary)'s
        style causes null-pointer crash.

        Test: fast/dom/shadow/user-modify-in-datalist-crash.html

        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::styleForElement):
        Added a code to check whether the shadow host has any style or not.

2012-10-17  Philippe Normand  <pnormand@igalia.com>

        [GTK] AudioBusGtk sometimes fails to load the HRTF database
        https://bugs.webkit.org/show_bug.cgi?id=99601

        Reviewed by Martin Robinson.

        AudioBusGtk now first lookup for the uninstalled resource files,
        if the AUDIO_RESOURCES_PATH environment variable is
        set. Additionally the audio file reader is now better dealing with
        errors, returning an empty AudioBus in such cases and issuing
        warnings on the console output. The cleanup of some member
        variables was also moved to the destructor.

        * platform/audio/gstreamer/AudioFileReaderGStreamer.cpp:
        (AudioFileReader):
        (WebCore::AudioFileReader::AudioFileReader):
        (WebCore::AudioFileReader::~AudioFileReader): Clear and free
        member variables. This was done in createBus before.
        (WebCore::AudioFileReader::handleMessage): Issue warnings in case
        of error and exit from the main loop so the pipeline is not
        forever stuck.
        (WebCore::AudioFileReader::createBus): Return an empty bus in case
        of error.
        * platform/audio/gtk/AudioBusGtk.cpp:
        (WebCore::AudioBus::loadPlatformResource): Load uninstalled
        resources first if AUDIO_RESOURCES_PATH is set.

2012-10-18  Pavel Feldman  <pfeldman@chromium.org>

        Web Inspector: provisional change for merging "doced" state into the "dock side" enum.
        https://bugs.webkit.org/show_bug.cgi?id=99718

        Reviewed by Vsevolod Vlasov.

        Adds stub method that could be executed from the embedder.

        * inspector/front-end/InspectorFrontendAPI.js:
        (InspectorFrontendAPI.setDockSide):

2012-10-18  Kent Tamura  <tkent@chromium.org>

        Add Localizer::monthFormat and implementations
        https://bugs.webkit.org/show_bug.cgi?id=99704

        Reviewed by Kentaro Hara.

        Localizer::monthFormat will be used for constructing input[type=month] UI.

        Tests: Add unit tests to Source/WebKit/chromium/tests/.

        * platform/text/Localizer.h:
        (Localizer): Declare pure virtual monthFormat function.

        * platform/text/LocaleNone.cpp:
        (LocaleNone): Declare monthFormat.
        (WebCore::LocaleNone::monthFormat):
        Added. Always reutrns an ISO-8601 format, "yyyy-MM"

        * platform/text/LocaleICU.h:
        (LocaleICU): Declare monthFormat.
        * platform/text/LocaleICU.cpp:
        (WebCore::getFormatForSkeleton):
        A helper to get a format for the specified skeleton.
        The overflow-allocalte-try-again pattern is similar to
        LocaleICU::decimalSymbol and LocaleICU::decimalTextAttribute.
        (WebCore::LocaleICU::monthFormat):
        Added. Calls getFormatForSkeleton with "yyyyMMM".

        * platform/text/mac/LocaleMac.h:
        (LocaleMac): Declare monthFormat.
        * platform/text/mac/LocaleMac.mm:
        (WebCore::LocaleMac::monthFormat):
        Added. Calls NSDateFormatter::dateFormatFromTemplate with "yyyyMMM".

        * platform/text/LocaleWin.h:
        (LocaleWin): Declare monthFormat.
        * platform/text/LocaleWin.cpp:
        (WebCore::LocaleWin::monthFormat):
        Get a format by LOCALE_SYEARMONTH, and convert it to an LDML format.

2012-10-18  Pavel Feldman  <pfeldman@chromium.org>

        Web Inspector: add X-WebKit-CSP header into inspector.html
        https://bugs.webkit.org/show_bug.cgi?id=99710

        Reviewed by Vsevolod Vlasov.

        A simple sanity measure.

        * inspector/front-end/inspector.html:

2012-10-18  Huang Dongsung  <luxtella@company100.net>

        [WK2] Add CustomFilterOperation serialization in ArgumentCoder.
        https://bugs.webkit.org/show_bug.cgi?id=98733

        Reviewed by Noam Rosenthal.

        Change CustomFilterOperation::parameters() to const function, because
        this method is a getter and a const instance needs to call this method.

        No new tests because there is no change in behavior.

        * platform/graphics/filters/CustomFilterOperation.h:
        (WebCore::CustomFilterOperation::parameters):

2012-10-18  Hayato Ito  <hayato@chromium.org>

        treeScopeOfParent doesn't return the TreeScope of the parent
        https://bugs.webkit.org/show_bug.cgi?id=98207

        Reviewed by Hajime Morita.

        A minor clean up. Remove treeScopeOfParent() in Element.cpp.

        No tests needed, this is just a clean up.

        * dom/Element.cpp:
        (WebCore::Element::removedFrom):

2012-10-18  Alexander Pavlov  <apavlov@chromium.org>

        Web Inspector: [Styles] Forcibly invoke property names suggestion box for empty prefix
        https://bugs.webkit.org/show_bug.cgi?id=99711

        Reviewed by Vsevolod Vlasov.

        Suggestions should be returned unconditionally for CSS property names, regardless of the prefix.

        * inspector/front-end/CSSCompletions.js:
        (WebInspector.CSSCompletions):
        (WebInspector.CSSCompletions.requestCSSNameCompletions):
        (WebInspector.CSSCompletions.prototype._firstIndexOfPrefix):
        * inspector/front-end/CSSKeywordCompletions.js:
        (WebInspector.CSSKeywordCompletions.forProperty):

2012-10-18  Raphael Kubo da Costa  <raphael.kubo.da.costa@intel.com>

        Unreviewed, do not make UseV8.cmake executable.

        * UseV8.cmake: Removed property svn:executable.

2012-10-18  Tommy Widenflycht  <tommyw@google.com>

        MediaStream API: Add better RTCPeerConnectionHandler creation logic
        https://bugs.webkit.org/show_bug.cgi?id=99308

        Reviewed by Adam Barth.

        This patch makes sure that if the RTCPeerConnectionHandler can't be fully initialized/created
        the RTCPeerConnection constructor throws an exception.

        Not full testable, existing tests cover the normal case though.

        * platform/mediastream/chromium/RTCPeerConnectionHandlerChromium.cpp:
        (WebCore::RTCPeerConnectionHandler::create):
        (WebCore::RTCPeerConnectionHandlerChromium::RTCPeerConnectionHandlerChromium):
        (WebCore::RTCPeerConnectionHandlerChromium::createWebHandler):
        (WebCore::RTCPeerConnectionHandlerChromium::initialize):
        (WebCore::RTCPeerConnectionHandlerChromium::createOffer):
        (WebCore::RTCPeerConnectionHandlerChromium::createAnswer):
        (WebCore::RTCPeerConnectionHandlerChromium::setLocalDescription):
        (WebCore::RTCPeerConnectionHandlerChromium::setRemoteDescription):
        (WebCore::RTCPeerConnectionHandlerChromium::updateIce):
        (WebCore::RTCPeerConnectionHandlerChromium::addIceCandidate):
        (WebCore::RTCPeerConnectionHandlerChromium::localDescription):
        (WebCore::RTCPeerConnectionHandlerChromium::remoteDescription):
        (WebCore::RTCPeerConnectionHandlerChromium::addStream):
        (WebCore::RTCPeerConnectionHandlerChromium::removeStream):
        (WebCore::RTCPeerConnectionHandlerChromium::getStats):
        (WebCore::RTCPeerConnectionHandlerChromium::openDataChannel):
        (WebCore::RTCPeerConnectionHandlerChromium::sendStringData):
        (WebCore::RTCPeerConnectionHandlerChromium::sendRawData):
        (WebCore::RTCPeerConnectionHandlerChromium::closeDataChannel):
        (WebCore::RTCPeerConnectionHandlerChromium::stop):
        * platform/mediastream/chromium/RTCPeerConnectionHandlerChromium.h:
        (RTCPeerConnectionHandlerChromium):

2012-10-19  Zeno Albisser  <zeno@webkit.org>

        Temporarily disable use of QCocoaNativeInterface in GraphicsSurfaceMac.
        https://bugs.webkit.org/show_bug.cgi?id=99320

        The current version of Qt5 deployed on the buildbots does not yet have
        an implementation for QCocoaNativeInterface::nativeResourceForContext().
        Therefore we disable this code path until Qt5/qtbase has been updated to
        a revision above Change-Id: Id00efc88a73d7df04a68c022f19d9d1c4f6d386b.

        Once Qt5 has been updated, this patch must be reverted.

        Reviewed by Noam Rosenthal.

        * platform/graphics/surfaces/mac/GraphicsSurfaceMac.cpp:
        (WebCore::GraphicsSurfacePrivate::GraphicsSurfacePrivate):

2012-10-18  Zeno Albisser  <zeno@webkit.org>

        GraphicsSurface should not modify the current GL context.
        https://bugs.webkit.org/show_bug.cgi?id=99320

        Instead of reusing the currently bound GL context for drawing
        the texture onto the GraphicsSurface, GraphicsSurface should
        create a new context that shares the texture names with a context
        provided by the caller.
        This way the OpenGL states are clearly separated and we do not
        risk interfeering with the currently bound GL context.

        Reviewed by Noam Rosenthal.

        * platform/graphics/qt/GraphicsContext3DQt.cpp:
        (WebCore::GraphicsContext3DPrivate::GraphicsContext3DPrivate):
            When creating a GraphicsSurface pass the platform GL context
            as a parameter, so it can be used for sharing textures with.
        (WebCore::GraphicsContext3DPrivate::copyToGraphicsSurface):
            Pass the texture instead of the FBO. A Texture can be drawn
            directly or bound to another FBO, where a framebuffer
            always needs to be blit onto the surface.
        (WebCore::GraphicsContext3DPrivate::createGraphicsSurfaces):
            Pass the platform GL context as a parameter.
        * platform/graphics/surfaces/GraphicsSurface.cpp:
        (WebCore::GraphicsSurface::create):
        (WebCore::GraphicsSurface::copyFromTexture):
        * platform/graphics/surfaces/GraphicsSurface.h:
        (GraphicsSurface):
        * platform/graphics/surfaces/mac/GraphicsSurfaceMac.cpp:
        (WebCore::GraphicsSurfacePrivate::GraphicsSurfacePrivate):
            Create a new GL context that shares the textures with the
            context provided by the caller.
        (WebCore::GraphicsSurfacePrivate::~GraphicsSurfacePrivate):
        (WebCore::GraphicsSurfacePrivate::makeCurrent):
            Add a convenience function to make the context that
            belongs to the surface current.
        (GraphicsSurfacePrivate):
        (WebCore::GraphicsSurfacePrivate::doneCurrent):
            Add a convenience function to make the previously
            bound context current again.
        (WebCore::GraphicsSurfacePrivate::copyFromTexture):
            Move blitting of the texture onto the surface
            into a separate function within GraphicsSurfacePrivate.
        (WebCore::GraphicsSurface::platformCopyFromTexture):
            Rename function platformCopyFromFramebuffer to
            platformCopyFromTexture, as we are now passing the texture only.
        (WebCore::GraphicsSurface::platformCreate):
        * platform/graphics/surfaces/qt/GraphicsSurfaceGLX.cpp:
        (WebCore):
        (WebCore::GraphicsSurfacePrivate::GraphicsSurfacePrivate):
        (WebCore::GraphicsSurfacePrivate::makeCurrent):
            Add a convenience function to make the context that
            belongs to the surface current.
        (GraphicsSurfacePrivate):
        (WebCore::GraphicsSurfacePrivate::doneCurrent):
            Add a convenience function to make the previously
        (WebCore::GraphicsSurfacePrivate::copyFromTexture):
            Move blitting of the texture onto the surface
            into a separate function within GraphicsSurfacePrivate.
        (WebCore::resolveGLMethods):
            Resolve additional GL methods necessary for this change.
        (WebCore::GraphicsSurface::platformCopyFromTexture):
            Rename function platformCopyFromFramebuffer to
            platformCopyFromTexture, as we are now passing the texture only.
        (WebCore::GraphicsSurface::platformCreate):

2012-10-18  Kent Tamura  <tkent@chromium.org>

        Set min-width property instead of width property for date/time fields
        https://bugs.webkit.org/show_bug.cgi?id=99673

        Reviewed by Hajime Morita.

        A field can have a text wider than pre-computed width because of
        :first-letter property. So, we should set min-width, not width.

        Tests: Covered by fast/forms/*-multiple-fields/*-multipe-fields-appearance-style.html

        * html/shadow/DateTimeNumericFieldElement.cpp:
        (WebCore::DateTimeNumericFieldElement::customStyleForRenderer):
        Set min-width instead of width.
        * html/shadow/DateTimeSymbolicFieldElement.cpp:
        (WebCore::DateTimeSymbolicFieldElement::customStyleForRenderer): Ditto.

2012-10-18  MORITA Hajime  <morrita@google.com>

        Assertion failure at TreeScopeAdopter::moveNodeToNewDocument()
        https://bugs.webkit.org/show_bug.cgi?id=99510

        Reviewed by Kent Tamura.

        Shadow DOM notification call didn't have checks for mutation detection.
        This change adds such checks.

        Test: fast/forms/textarea/textarea-autofocus-removal-while-focusing-with-style.html

        * dom/ContainerNodeAlgorithms.cpp:
        (WebCore::ChildNodeInsertionNotifier::notifyDescendantInsertedIntoDocument):
        (WebCore::ChildNodeRemovalNotifier::notifyDescendantRemovedFromDocument):

2012-10-17  Kentaro Hara  <haraken@chromium.org>

        Unreviewed. Rebaselined run-bindings-tests.

        * bindings/scripts/test/V8/V8Float64Array.h:
        (V8Float64Array):
        * bindings/scripts/test/V8/V8TestActiveDOMObject.h:
        (V8TestActiveDOMObject):
        * bindings/scripts/test/V8/V8TestCustomNamedGetter.h:
        (V8TestCustomNamedGetter):
        * bindings/scripts/test/V8/V8TestEventConstructor.h:
        (V8TestEventConstructor):
        * bindings/scripts/test/V8/V8TestEventTarget.h:
        (V8TestEventTarget):
        * bindings/scripts/test/V8/V8TestException.h:
        (V8TestException):
        * bindings/scripts/test/V8/V8TestInterface.h:
        (V8TestInterface):
        * bindings/scripts/test/V8/V8TestMediaQueryListListener.h:
        (V8TestMediaQueryListListener):
        * bindings/scripts/test/V8/V8TestNamedConstructor.h:
        (V8TestNamedConstructor):
        * bindings/scripts/test/V8/V8TestNode.h:
        (V8TestNode):
        * bindings/scripts/test/V8/V8TestObj.h:
        (V8TestObj):
        * bindings/scripts/test/V8/V8TestSerializedScriptValueInterface.h:
        (V8TestSerializedScriptValueInterface):

2012-10-17  Mike West  <mkwst@chromium.org>

        Move mixed content logic out of FrameLoader
        https://bugs.webkit.org/show_bug.cgi?id=45638

        Reviewed by Eric Seidel.

        This change moves checks for mixed content out of FrameLoader, and into
        a new MixedContentChecker object. It's a pretty straightforward
        refactoring with no change to the overall logic, and only minor changes
        to the code to reduce repetition.

        The only substantive change is renaming the methods from 'checkIf*' to
        'can*' to reflect the value of the boolean they return.

        The visible functionality shouldn't change; this change should be
        covered by existing tests in http/tests/security/mixedContent.

        This patch is mostly a revitalization of Eric Sidel's original
        patch: https://bugs.webkit.org/attachment.cgi?id=67432&action=prettypatch

        * CMakeLists.txt:
        * GNUmakefile.list.am:
        * Target.pri:
        * WebCore.gypi:
        * WebCore.vcproj/WebCore.vcproj:
        * WebCore.xcodeproj/project.pbxproj:
            Hey, look! A new file!
        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::FrameLoader):
        * loader/FrameLoader.h:
        (WebCore::FrameLoader::mixedContentChecker):
        (FrameLoader):
        * loader/MixedContentChecker.cpp: Added.
        (WebCore):
        (WebCore::MixedContentChecker::MixedContentChecker):
        (WebCore::MixedContentChecker::client):
        (WebCore::asUTF8):
        (WebCore::MixedContentChecker::isMixedContent):
        (WebCore::MixedContentChecker::canDisplayInsecureContent):
        (WebCore::MixedContentChecker::canRunInsecureContent):
        (WebCore::MixedContentChecker::logWarning):
        * loader/MixedContentChecker.h: Added.
        (WebCore):
        (MixedContentChecker):
            Migrate functionality from FrameLoader::checkIf* to
            MixedContentChecker::can*.
        * loader/MainResourceLoader.cpp:
        (WebCore::MainResourceLoader::willSendRequest):
        * loader/SubframeLoader.cpp:
        (WebCore::SubframeLoader::pluginIsLoadable):
        (WebCore::SubframeLoader::loadMediaPlayerProxyPlugin):
        * loader/cache/CachedResourceLoader.cpp:
        (WebCore::CachedResourceLoader::checkInsecureContent):
            Use the new method locations.

2012-10-17  Dan Bernstein  <mitz@apple.com>

        REGRESSION (r95391): ComplexTextController is unnecessarily slow with characters with combining marks when the base character is not covered by any font
        https://bugs.webkit.org/show_bug.cgi?id=99654

        Reviewed by Adele Peterson.

        When the base character of a combining character sequence is not covered by any one of the
        available fonts, there is no point looking for a font that covers the entire sequence, nor
        to try to use a combination of fallback fonts for the entire sequence.

        * platform/graphics/SimpleFontData.h:
        (WebCore::SimpleFontData::systemFallback): Moved ComplexTextController::systemFallbackFontData
        here and renamed it.
        * platform/graphics/mac/ComplexTextController.cpp:
        (WebCore::ComplexTextController::collectComplexTextRuns): This function used to use
        systemFallbackFontData() whenever Font::fontDataForCombiningCharacterSequence returned 0
        for a base character with combining marks, regardless of whether the base character was
        covered by any font. Changed it to preserve the return value of
        fontDataForCombiningCharacterSequence, which is now 0 only if the base charcater is not in
        any font, while systemFallbackFontData() is used to indicate that no single font in the
        fallback list covers all characters in the sequence, but the base character is in some font.
        * platform/graphics/mac/ComplexTextController.h:
        (ComplexTextController): Moved systemFallbackFontData from here to SimpleFontData.
        * platform/graphics/mac/ComplexTextControllerCoreText.mm:
        (WebCore::ComplexTextController::collectComplexTextRunsForCharacters): Updated for the above
        move.
        * platform/graphics/mac/FontComplexTextMac.cpp:
        (WebCore::Font::fontDataForCombiningCharacterSequence): Changed to return
        systemFallbackFontData() if no single font in the fallback list covers all characters in the
        sequence, while using 0 to signal the base character does not exist in any font.

2012-10-17  Dan Bernstein  <mitz@apple.com>

        Try to fix the build after r131701.

        * WebCore.exp.in:

2012-10-17  Hayato Ito  <hayato@chromium.org>

        Content element does not expose distributedNodes property.
        https://bugs.webkit.org/show_bug.cgi?id=99232

        Reviewed by Dimitri Glazkov.

        Add getDistributedNodes() to HTMLContentElement's IDL, which returns a
        static NodeList whose node are distributed to the content element.

        Test: fast/dom/shadow/content-element-distributed-nodes.html

        * html/shadow/HTMLContentElement.idl:
        * html/shadow/InsertionPoint.cpp:
        (WebCore::InsertionPoint::getDistributedNodes):
        * html/shadow/InsertionPoint.h:
        (InsertionPoint):
        * testing/Internals.cpp:
        * testing/Internals.h:
        (Internals):
        * testing/Internals.idl:

2012-10-17  Pan Deng  <pan.deng@intel.com>

        [User Timing] implement main interface in of User Timing, according to http://www.w3.org/TR/2012/CR-user-timing-20120726/
        https://bugs.webkit.org/show_bug.cgi?id=90963

        Reviewed by Tony Gentilcore.

        This patch implemented mark(), measure(), clearMarks() and clearMeasures() interface of User Timing. Getters are not exposed by Performance Timeline yet, it will be future patch.

        Tests: http/tests/w3c/webperf/submission/user-timing/test_user_timing_clearMarks.html
               http/tests/w3c/webperf/submission/user-timing/test_user_timing_clearMeasures.html
               http/tests/w3c/webperf/submission/user-timing/test_user_timing_mark.html
               http/tests/w3c/webperf/submission/user-timing/test_user_timing_mark_exception.html
               http/tests/w3c/webperf/submission/user-timing/test_user_timing_measure.html
               http/tests/w3c/webperf/submission/user-timing/test_user_timing_measure_associate_with_navigation_timing.html
               http/tests/w3c/webperf/submission/user-timing/test_user_timing_measure_exception.html
               http/tests/w3c/webperf/submission/user-timing/test_user_timing_method_exist.html

        * GNUmakefile.list.am:
        * WebCore.gypi:
        * page/Performance.cpp:
        (WebCore::Performance::webkitGetEntries):
        (WebCore::Performance::webkitGetEntriesByType):
        (WebCore::Performance::webkitGetEntriesByName):
        (WebCore):
        (WebCore::Performance::webkitMark):
        (WebCore::Performance::webkitClearMarks):
        (WebCore::Performance::webkitMeasure):
        (WebCore::Performance::webkitClearMeasures):
        * page/Performance.h:
        (WebCore):
        (Performance):
        * page/Performance.idl:
        * page/PerformanceMark.h: Added.
        (WebCore):
        (PerformanceMark):
        (WebCore::PerformanceMark::create):
        (WebCore::PerformanceMark::PerformanceMark):
        (WebCore::PerformanceMark::~PerformanceMark):
        * page/PerformanceMark.idl: Added.
        * page/PerformanceMeasure.h: Added.
        (WebCore):
        (PerformanceMeasure):
        (WebCore::PerformanceMeasure::create):
        (WebCore::PerformanceMeasure::PerformanceMeasure):
        (WebCore::PerformanceMeasure::~PerformanceMeasure):
        * page/PerformanceMeasure.idl: Added.
        * page/PerformanceUserTiming.cpp: Added.
        (WebCore):
        (WebCore::UserTiming::UserTiming):
        (WebCore::insertPerformanceEntry):
        (WebCore::clearPeformanceEntries):
        (WebCore::UserTiming::mark):
        (WebCore::UserTiming::clearMarks):
        (WebCore::UserTiming::findExistingMarkStartTime):
        (WebCore::UserTiming::measure):
        (WebCore::UserTiming::clearMeasures):
        * page/PerformanceUserTiming.h: Added.
        (WebCore):
        (UserTiming):
        (WebCore::UserTiming::create):

2012-10-17  James Robinson  <jamesr@chromium.org>

        Unreviewed clang compile fix - GraphicsLayerUpdater needs a virtual destructor.

        * platform/graphics/GraphicsLayerUpdater.h:
        (GraphicsLayerUpdater):

2012-10-17  Ryuan Choi  <ryuan.choi@samsung.com>

        Attempt to fix the build after r131680.

        Unreviewed build fix.

        * dom/Document.cpp: Guard ACCELERATED_COMPOSITING for RenderLayerCompositor.h

2012-10-17  Elliott Sprehn  <esprehn@chromium.org>

        StyleRareNonInheritedData::contentDataEquivalent only looks at the first ContentData
        https://bugs.webkit.org/show_bug.cgi?id=99560

        Reviewed by Eric Seidel.

        Previously we only compared the first ContentData in the linked
        list of ContentData's which meant that if the resolved style
        for content had the same prefix we wouldn't update the content.

        This patch adds a loop to compare each of the ContentData objects
        in the linked list.

        Test: fast/css-generated-content/content-property-change.html

        * rendering/style/StyleRareNonInheritedData.cpp:
        (WebCore::StyleRareNonInheritedData::contentDataEquivalent):

2012-10-17  Elliott Sprehn  <esprehn@chromium.org>

        Remove StyleContentType since it's not used anymore
        https://bugs.webkit.org/show_bug.cgi?id=99659

        Reviewed by Eric Seidel.

        Remove StyleContentType enum since it's not used anymore and
        make the is*() type checking methods on ContentData public.

        No new tests needed, this is just deleting dead code.

        * rendering/style/ContentData.h:
        (ContentData):
        * rendering/style/RenderStyleConstants.h:

2012-10-17  Simon Fraser  <simon.fraser@apple.com>

        Create a GraphicsLayerUpdater class that will do periodic layer flushes for layer trees containing tile caches
        https://bugs.webkit.org/show_bug.cgi?id=99518

        Reviewed by Dean Jackson.

        When using tile caches in place of tiled layers, we need to recompute their
        visible area periodically while animations and scrolling are happening.
        Make a new class, GraphicsLayerUpdater, to handle this updating.
        Internally, it uses DisplayRefreshMonitor to generate the periodic updates.
        
        GraphicsLayer clients are notified that layers need periodic updates. Clients
        are free to make use of GraphicsLayerUpdater to handle this updating, as
        RenderLayerCompositor does.
        
        Also do some minor refactoring of methods in RenderLayerCompositor that
        get to Page.

        * CMakeLists.txt: Add GraphicsLayerUpdater.cpp to the build.
        * GNUmakefile.list.am: Ditto.
        * PlatformBlackBerry.cmake: Ditto.
        * Target.pri: Ditto.
        * WebCore.gypi: Ditto.
        * WebCore.vcproj/WebCore.vcproj: Ditto.
        * WebCore.xcodeproj/project.pbxproj: Ditto.
        * dom/Document.cpp:
        (WebCore::Document::windowScreenDidChange): Tell the compositor that the screen
        changed, so it can tell the GraphicsLayerUpdater if it has one.
        * platform/graphics/GraphicsLayerClient.h:
        (WebCore::GraphicsLayerClient::notifyFlushBeforeDisplayRefresh): Method called
        for layers that need periodic updates, like tile cache layers.
        * platform/graphics/GraphicsLayerUpdater.cpp: Added. Uses DisplayRefreshMonitorManager
        to flush layers before the next refresh.
        (WebCore::GraphicsLayerUpdater::GraphicsLayerUpdater):
        (WebCore::GraphicsLayerUpdater::~GraphicsLayerUpdater):
        (WebCore::GraphicsLayerUpdater::scheduleUpdate):
        (WebCore::GraphicsLayerUpdater::screenDidChange):
        (WebCore::GraphicsLayerUpdater::displayRefreshFired):
        * platform/graphics/GraphicsLayerUpdater.h: Added.
        (GraphicsLayerUpdaterClient): Clients need to implement flushLayers().
        (WebCore::GraphicsLayerUpdaterClient::~GraphicsLayerUpdaterClient):
        * platform/graphics/ca/GraphicsLayerCA.cpp:
        (WebCore::GraphicsLayerCA::recursiveCommitChanges): For tile cache layers,
        tell the client that this layer should be updated soon to update the visible rect.
        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::notifyFlushBeforeDisplayRefresh): Pass this message
        on to the compositor.
        * rendering/RenderLayerBacking.h:
        (RenderLayerBacking): Implement notifyFlushBeforeDisplayRefresh.
        Add OVERRIDE to all the client overrides.
        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::cacheAcceleratedCompositingFlags): Use helper to get to Page.
        (WebCore::RenderLayerCompositor::scheduleLayerFlush): Ditto.
        (WebCore::RenderLayerCompositor::flushPendingLayerChanges): Soon we're going to be asking
        about the current state of animations inside the flush (for visible rect computation), so we
        need a AnimationUpdateBlock to make sure all the animation times are in sync.
        (WebCore::RenderLayerCompositor::notifyFlushBeforeDisplayRefresh): Make a GraphicsLayerUpdater
        if necessary, and tell it to update soon.
        (WebCore::RenderLayerCompositor::flushLayers): The GraphicsLayerUpdater client method.
        Just does a flush. For now, considers this Frame as the flush root, which will need fixing for iframes.
        (WebCore::RenderLayerCompositor::shouldPropagateCompositingToEnclosingFrame): Use helper to get to Page.
        (WebCore::RenderLayerCompositor::deviceScaleFactor): Ditto.
        (WebCore::RenderLayerCompositor::pageScaleFactor): Ditto.
        (WebCore::RenderLayerCompositor::destroyRootLayer): Ditto.
        (WebCore::RenderLayerCompositor::windowScreenDidChange): Tell the updater if we have one.
        (WebCore::RenderLayerCompositor::scrollingCoordinator): Use helper to get to Page.
        (WebCore::RenderLayerCompositor::graphicsLayerFactory): Use helper to get to Page.
        (WebCore::RenderLayerCompositor::page): The helper.
        * rendering/RenderLayerCompositor.h:
        (RenderLayerCompositor): Add OVERRIDE to all the client overrides.

2012-10-17  Eric Seidel  <eric@webkit.org>

        Make dom-query.html slightly faster by removing unnecessary ref-churn in StringTraits
        https://bugs.webkit.org/show_bug.cgi?id=99652

        Reviewed by Adam Barth.

        My testing showed this moved dom-query.html from  465560 runs/s to 479019
        which is about 2% if I'm doing my math correctly.

        I suspect that's due to avoiding the ref-churn we were incurring by using
        return-by-value symantics here.

        This is just the tip of the iceburg. :)

        * bindings/v8/V8StringResource.cpp:
        (StringTraits):
        * bindings/v8/V8ValueCache.h:
        (WebCore::WebCoreStringResource::webcoreString):
        (WebCore::WebCoreStringResource::atomicString):

2012-10-17  Luke Macpherson   <macpherson@chromium.org>

        Move handling of CSSPropertyWebkitLineClamp from StyleResolver into StyleBuilder.
        https://bugs.webkit.org/show_bug.cgi?id=99534

        Reviewed by Alexis Menard.

        One small step towards removing the giant switch statement in StyleResolver, this patch moves line clamp handling into StyleBuilder.

        Covered by fast/overflow/line-clamp.html

        * css/StyleBuilder.cpp:
        (WebCore::StyleBuilder::StyleBuilder):
        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::applyProperty):

2012-10-17  Andy Estes  <aestes@apple.com>

        [WebKit2] Add removeChild: to WKDOMNode and make WKDOMText.data read/write
        https://bugs.webkit.org/show_bug.cgi?id=99662

        Reviewed by Sam Weinig.

        Export needed symbols.

        * WebCore.exp.in:

2012-10-17  Adam Barth  <abarth@webkit.org>

        [V8] Don't generate code that declares visitDOMWrapper if we're not going to generate the implementation
        https://bugs.webkit.org/show_bug.cgi?id=99653

        Reviewed by Eric Seidel.

        * bindings/scripts/CodeGeneratorV8.pm:
        (GenerateHeader):

2012-10-17  David Grogan  <dgrogan@chromium.org>

        IndexedDB: Destroy leveldb directory if unknown schema is detected
        https://bugs.webkit.org/show_bug.cgi?id=99636

        Reviewed by Tony Chang.

        chromium browser test in progress at
        https://codereview.chromium.org/11196029

        * Modules/indexeddb/IDBLevelDBBackingStore.cpp:
        (WebCore):
        (WebCore::isSchemaKnown):
        Return true when the schema key doesn't exist because new databases
        won't have one.

        (WebCore::setUpMetadata):
        (WebCore::IDBLevelDBBackingStore::open):
        Piggy-back on existing leveldb::destroy code.

2012-10-17  Arpita Bahuguna  <arpitabahuguna@gmail.com>

        Incorrect rendering of borders on <col> with span > 1
        https://bugs.webkit.org/show_bug.cgi?id=76246

        Reviewed by Julien Chaffraix.

        The HTML5 rendering specification [10.2.2 - Display Types] states that
        "For the purposes of the CSS table model, the col element is expected to
        be treated as if it was present as many times as its span attribute
        specifies."
        We should thus apply a col element's border as if the element is present
        as many number of times as its span attribute.

        Apart from this, we should also treat the col and its enclosing colgroup
        separately while computing the collapsed borders.

        Test: fast/table/border-collapsing/collapsed-border-with-col-colgroup-span.html

        * rendering/RenderTableCell.cpp:
        (WebCore::RenderTableCell::computeCollapsedStartBorder):
        (WebCore::RenderTableCell::computeCollapsedEndBorder):
        Borders from col and its enclosing colgroup element should be handled
        separately, while considering the preceeding col's end border (for start
        border computation) and the next col's start border (for end border
        computation).

        Also, have made changes for handling of col elements with span attribute as
        per the specification. We now apply the border (start or end) of the col
        element irrespective of whether it has any span specified for it or not.

2012-10-17  Tom Sepez  <tsepez@chromium.org>

        Crash in ContainerNode::removeAllChildren()
        https://bugs.webkit.org/show_bug.cgi?id=98443

        Reviewed by Eric Carlson.

        This patch makes the errorEventSender added in WebKit Revision 112190 interact
        with the updatedHasPendingLoadEvent() mechanism in the same manner as the other
        existing event senders.

        Test: http/tests/security/video-poster-cross-origin-crash2.html

        * loader/ImageLoader.cpp:
        (WebCore::ImageLoader::setImage):
        (WebCore::ImageLoader::updateFromElement):
        (WebCore::ImageLoader::notifyFinished):
        (WebCore::ImageLoader::updatedHasPendingEvent):
        (WebCore::ImageLoader::dispatchPendingBeforeLoadEvent):
        (WebCore::ImageLoader::dispatchPendingLoadEvent):
        * loader/ImageLoader.h:
        (ImageLoader):

2012-10-17  Joshua Bell  <jsbell@chromium.org>

        IndexedDB: Closing connection in upgradeneeded should result in error event
        https://bugs.webkit.org/show_bug.cgi?id=99486

        Reviewed by Tony Chang.

        The IDB spec requires that "...if connection is closed, return a DOMError of type AbortError".
        This was being handled during the "enqueue" phase, which was too early either for synchronously
        executing scripts or asynchronous messaging in multiprocess ports (crbug.com/150691). Move the
        logic to the "dispatch" phase.

        Test: storage/indexeddb/intversion-close-in-oncomplete.html

        * Modules/indexeddb/IDBOpenDBRequest.cpp:
        (WebCore::IDBOpenDBRequest::onSuccess): Move success to error morphing from here...
        (WebCore::IDBOpenDBRequest::dispatchEvent): To here.
        * Modules/indexeddb/IDBOpenDBRequest.h:
        (IDBOpenDBRequest):

2012-10-17  Elliott Sprehn  <esprehn@chromium.org>

        Use virtual dispatch to create ContentData renderers
        https://bugs.webkit.org/show_bug.cgi?id=99646

        Reviewed by Eric Seidel.

        ContentData are conceptually very similar to Nodes and we can use
        the same createRenderer pattern on them to simplify creating
        renderers for generated content. Now each ContentData class knows
        how to create its own renderer.

        Previously we switched over the StyleContentType which required a
        case for CONTENT_NONE and made the code look like it could return
        null, but this case is actually impossible because no ContentData
        class ever has a type of CONTENT_NONE and no null checks are really
        needed.

        This is the final step in removing dependence on StyleContentType.

        No new tests needed, this is just a refactor.

        * rendering/RenderObjectChildList.cpp: Remove createRendererForBeforeAfterContent.
        (WebCore::RenderObjectChildList::updateBeforeAfterContent):
        * rendering/style/ContentData.cpp:
        (WebCore::ImageContentData::createRenderer):
        (WebCore):
        (WebCore::TextContentData::createRenderer):
        (WebCore::CounterContentData::createRenderer):
        (WebCore::QuoteContentData::createRenderer):
        * rendering/style/ContentData.h: Added a new virtual method createRenderer.
        (WebCore):
        (ContentData):
        (ImageContentData):
        (TextContentData):
        (CounterContentData):
        (QuoteContentData):

2012-10-17  Julien Chaffraix  <jchaffraix@webkit.org>

        RenderLayer subtrees without any self-painting layer shouldn't be walked during hit testing
        https://bugs.webkit.org/show_bug.cgi?id=89393

        Reviewed by Eric Seidel.

        Performance optimization, covered by existing tests.

        Bug 88888 added an peformance optimization for painting. As hit testing is very similar to
        painting, it would benefit from the same optimization.

        On http://dglazkov.github.com/performance-tests/biggrid.html, with a 10,000 * 100 tables,
        it reduces the time to select some text inside a cell from 1-2 seconds to a usable time
        (I didn't measure the exact timing).

        Note that as in bug 88888, the multi-column code is not covered by this optimization.

        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::hitTest):
        This is the entrance to the hit testing code so we check if we can bail out early.

        (WebCore::RenderLayer::hitTestList):
        If we have no self-painting descendant layers, we can bail out.

        (WebCore::RenderLayer::hitTestContents):
        (WebCore::RenderLayer::hitTestLayer):
        hitTest should filter the layers that call these functions. Added some ASSERT to
        make sure we don't mistakenly call them when could avoid it.

2012-10-17  Allan Sandfeld Jensen  <allan.jensen@digia.com>

        [Qt] Certain SVG content freezes QtWebKit
        https://bugs.webkit.org/show_bug.cgi?id=97258

        Reviewed by Simon Hausmann.

        Ensure dashpattern is well-formed by avoiding divisions by zero.

        Test: svg/stroke/zero-width-hang.html

        * platform/graphics/qt/GraphicsContextQt.cpp:
        (WebCore::GraphicsContext::setLineDash):

2012-10-17  Alec Flett  <alecflett@chromium.org>

        IndexedDB: Explicitly send null/undefined/integers to frontend IDBCallbacks
        https://bugs.webkit.org/show_bug.cgi?id=99619

        Reviewed by Adam Barth.

        Rather than pass SerializedScriptValue tokens from the backend,
        send explicit null, (as onSuccess(static_cast<SerializedScriptValue*>(0)))
        undefined, (as onSucess()), and integers (as onSuccess(long long))

        This reduces backend dependency on things that might require a JS
        interpreter on the backend.

        No new tests, this is a refactor and existing tests cover
        correctness. Tests that might fail include:

        Test: storage/indexeddb/index-count.html
        Test: storage/indexeddb/objectstore-count.html
        Test: storage/indexeddb/database-basics.html

        * Modules/indexeddb/IDBCallbacks.h:
        (IDBCallbacks):
        * Modules/indexeddb/IDBCursorBackendImpl.cpp:
        (WebCore::IDBCursorBackendImpl::advanceInternal):
        (WebCore::IDBCursorBackendImpl::continueFunctionInternal):
        (WebCore::IDBCursorBackendImpl::prefetchContinueInternal):
        * Modules/indexeddb/IDBCursorBackendImpl.h:
        (WebCore::IDBCursorBackendImpl::value):
        * Modules/indexeddb/IDBDatabaseBackendImpl.cpp:
        (WebCore::IDBDatabaseBackendImpl::deleteDatabase):
        * Modules/indexeddb/IDBIndex.cpp:
        * Modules/indexeddb/IDBIndexBackendImpl.cpp:
        (WebCore::IDBIndexBackendImpl::openCursorInternal):
        (WebCore::IDBIndexBackendImpl::countInternal):
        (WebCore::IDBIndexBackendImpl::getInternal):
        * Modules/indexeddb/IDBObjectStore.cpp:
        * Modules/indexeddb/IDBObjectStoreBackendImpl.cpp:
        (WebCore::IDBObjectStoreBackendImpl::getInternal):
        (WebCore::IDBObjectStoreBackendImpl::deleteInternal):
        (WebCore::IDBObjectStoreBackendImpl::clearInternal):
        (WebCore::IDBObjectStoreBackendImpl::openCursorInternal):
        (WebCore::IDBObjectStoreBackendImpl::countInternal):
        * Modules/indexeddb/IDBRequest.cpp:
        (WebCore::IDBRequest::onSuccess):
        (WebCore):
        * Modules/indexeddb/IDBRequest.h:
        * Modules/indexeddb/IDBTransaction.cpp:
        * Modules/indexeddb/IDBTransactionBackendImpl.cpp:
        * Modules/indexeddb/IDBTransactionBackendImpl.h:
        * Modules/indexeddb/IDBTransactionBackendInterface.h:
        * bindings/v8/IDBBindingUtilities.cpp:
        (WebCore::deserializeIDBValue):
        * inspector/InspectorIndexedDBAgent.cpp:
        (WebCore):

2012-10-17  Nate Chapin  <japhet@chromium.org>

        Move ResourceRequest construction out of SubresourceLoader
        https://bugs.webkit.org/show_bug.cgi?id=99627

        Reviewed by Adam Barth.

        CachedResource::load() fills out a bunch of http headers.
        SubresourceLoader::create() adds a bunch more. Merge them.
        Note that this merge requires a bit more care in CachedRawResource::canReuse(),
        because more headers are set directly on CachedResource::m_resourceRequest, rather
        than on a copy of it.

        No new tests, no functionality change intended.

        * loader/SubresourceLoader.cpp:
        (WebCore::SubresourceLoader::create):
        * loader/cache/CachedRawResource.cpp:
        (WebCore::shouldIgnoreHeaderForCacheReuse):
        (WebCore):
        (WebCore::CachedRawResource::canReuse):
        * loader/cache/CachedResource.cpp:
        (WebCore::CachedResource::failBeforeStarting):
        (WebCore):
        (WebCore::CachedResource::addAdditionalRequestHeaders):
        (WebCore::CachedResource::load):
        * loader/cache/CachedResource.h:
        (CachedResource):

2012-10-17  Anders Carlsson  <andersca@apple.com>

        Clean up Vector.h
        https://bugs.webkit.org/show_bug.cgi?id=99622

        Reviewed by Benjamin Poulain.

        Fix fallout from removing std::max and std::min using declarations.

        * loader/cache/CachedResource.cpp:
        (WebCore::CachedResource::currentAge):

2012-10-17  Joshua Bell  <jsbell@chromium.org>

        IndexedDB: Enforce unsigned long/unsigned long long ranges
        https://bugs.webkit.org/show_bug.cgi?id=99637

        Reviewed by Tony Chang.

        The IndexedDB spec has [EnforceRange] specified on unsigned long and unsigned long long
        arguments, which requires the implementation to throw TypeError for negative values or
        values that exceed 2^53-1 (maximum JS number that behaves like an integer) - and 0 is
        specifically forbidden by the APIs as well.

        A more correct fix in the binding layer is in webkit.org/b/96798 but we can temporarily
        address this in the implementation.

        Also refactor to prevent IDBFactory.open(name, -1) from triggering an internal code path.

        Tests: storage/indexeddb/cursor-advance.html
               storage/indexeddb/intversion-bad-parameters.html
               storage/indexeddb/intversion-encoding.html

        * Modules/indexeddb/IDBCursor.cpp:
        (WebCore::IDBCursor::advance): Validate argument range.
        * Modules/indexeddb/IDBCursor.h:
        (IDBCursor):
        * Modules/indexeddb/IDBCursor.idl: Drop "unsigned" qualifier as the binding code is
        not yet doing the correct validation.
        * Modules/indexeddb/IDBFactory.cpp: Refactor to prevent open(name, -1)
        (WebCore):
        (WebCore::IDBFactory::open): Validate the int version here, then pass to...
        (WebCore::IDBFactory::openInternal): ... this method.
        * Modules/indexeddb/IDBFactory.h:
        (IDBFactory):
        * Modules/indexeddb/IDBFactory.idl: Drop "unsigned" qualifier; meaningless to binding
        code right now, can be re-added once webkit.org/b/96798 lands.

2012-10-17  Tony Chang  <tony@chromium.org>

        fast/forms/range/input-appearance-range-rtl.html off by one pixel
        https://bugs.webkit.org/show_bug.cgi?id=99625

        Reviewed by Ojan Vafai.

        Previously, we would assume that a vertical slider in RTL would render identically to
        a vertical slider in LTR. Due to differing thumb sizes, there is an off by one.

        This worked in deprecated flexbox because it doesn't adjust for RTL when applying
        box-align: center.

        Tests: fast/forms/range/input-appearance-range-rtl.html

        * html/shadow/SliderThumbElement.cpp:
        (WebCore::RenderSliderContainer::layout): Force LTR for flexbox layout when vertical. We have to restore the old value
        just in case the user switches from vertical to horizontal.

2012-10-17  Michael Saboff  <msaboff@apple.com>

        Creating a String from an NSString should check for all 8 bit strings
        https://bugs.webkit.org/show_bug.cgi?id=99392

        Reviewed by Geoffrey Garen.

        Use CFStringGetBytes() to try to get Latin1 data to create an 8 bit string.

        No functional change, change covered by existing tests.

        * platform/text/mac/StringMac.mm:
        (WTF::String::String):

2012-10-17  Raphael Kubo da Costa  <raphael.kubo.da.costa@intel.com>

        [EFL] Remove redundant OpenGL library addition from the build system.
        https://bugs.webkit.org/show_bug.cgi?id=99629

        Reviewed by Rob Buis.

        * PlatformEfl.cmake: Do not add OPENGL_gl_LIBRARY to
        WebCore_LIBRARIES, this is already done in CMakeLists.txt these
        days.

2012-10-17  Raphael Kubo da Costa  <raphael.kubo.da.costa@intel.com>

        [CMake] Set WebCore_LIBRARIES earlier.
        https://bugs.webkit.org/show_bug.cgi?id=99630

        Reviewed by Rob Buis.

        * CMakeLists.txt: Follow the style we use in other CMakeList.txt
        files and set the Foo_LIBRARIES variables before we start checking
        for optional features, as they might append other libraries to the
        list (it already happens with WTF_USE_3D_GRAPHICS, for example).

2012-10-17  Philip Rogers  <pdr@google.com>

        Allow lazy initialization of SVG XML animated properties.
        https://bugs.webkit.org/show_bug.cgi?id=84657

        Reviewed by Tim Horton.

        When animating a property in the shadow tree, instance properties and tearoffs are created
        but they simply reference the animated element's animating properties.

        When starting an animation for the first time (see SVGAnimateElement::resetAnimatedType),
        we initialize the root property and instance properties using startAnimValAnimation(...).
        If an instance property is added while the root property is animating, this initialization
        will not occur and we crash.

        This patch updates the resetAnimValToBaseVal codepath to start (and initialize) an animated
        property if it is not already animating. After this patch, instance properties can be added
        in the middle of animation and they will be properly started/initialized.

        Test: svg/animations/use-while-animating-crash.html

        * svg/SVGAnimatedTypeAnimator.h:
        (WebCore::SVGAnimatedTypeAnimator::resetFromBaseValue):
        (WebCore::SVGAnimatedTypeAnimator::resetFromBaseValues):
        (WebCore::SVGAnimatedTypeAnimator::executeAction):

2012-10-17  Dan Carney  <dcarney@google.com>

        Bind isolatedWorldSecurityOrigin to world
        https://bugs.webkit.org/show_bug.cgi?id=99582

        Reviewed by Adam Barth.

        Security origin of isolated worlds was not previously set at the world
        level, although it could have been. 

        No new tests. No change in functionality.

        * bindings/v8/DOMWrapperWorld.cpp:
        (WebCore::DOMWrapperWorld::deallocate):
        (WebCore):
        (WebCore::isolatedWorldSecurityOrigins):
        (WebCore::DOMWrapperWorld::isolatedWorldSecurityOrigin):
        (WebCore::DOMWrapperWorld::setIsolatedWorldSecurityOrigin):
        (WebCore::DOMWrapperWorld::clearIsolatedWorldSecurityOrigin):
        * bindings/v8/DOMWrapperWorld.h:
        (DOMWrapperWorld):
        (WebCore::DOMWrapperWorld::isIsolatedWorldId):
        (WebCore::DOMWrapperWorld::isIsolatedWorld):
        * bindings/v8/ScriptController.cpp:
        (WebCore::ScriptController::resetIsolatedWorlds):
        (WebCore::ScriptController::evaluateInIsolatedWorld):
        (WebCore::ScriptController::collectIsolatedContexts):
        * bindings/v8/ScriptController.h:
        (ScriptController):
        (WebCore::ScriptController::setIsolatedWorldSecurityOrigin):
        * bindings/v8/V8DOMWindowShell.cpp:
        (WebCore::V8DOMWindowShell::initializeIfNeeded):
        * bindings/v8/V8DOMWindowShell.h:
        (V8DOMWindowShell):
        * bindings/v8/custom/V8XMLHttpRequestConstructor.cpp:
        (WebCore::V8XMLHttpRequest::constructorCallback):

2012-10-17  Simon Fraser  <simon.fraser@apple.com>

        GraphicsLayer visible rect computation needs to use the current animating transform
        https://bugs.webkit.org/show_bug.cgi?id=99529

        Reviewed by Dean Jackson.

        If we're running an accelerated animation of transform
        on a GraphicsLayerCA, the current value of the transform won't
        be reflected in the GraphicsLayer's m_transform. However,
        we need the current value of the transform in order to correctly
        compute the visible rect of this layer and descendants.
        
        Add a function to GraphicsLayerClient to retrieve the current
        value of the transform from the client.
        
        RenderLayer's currentTransform() used to return a transform
        with transform-origin baked in; GraphicsLayerClient needs one
        that excludes transform-origin, so enhance RenderLayer::currentTransform()
        to be able to produce either.

        Tests: compositing/visible-rect/animated-from-none.html
               compositing/visible-rect/animated.html

        * platform/graphics/GraphicsLayerClient.h:
        (WebCore):
        (GraphicsLayerClient):
        (WebCore::GraphicsLayerClient::getCurrentTransform):
        * platform/graphics/ca/GraphicsLayerCA.cpp:
        (WebCore::GraphicsLayerCA::computeVisibleRect):
        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::currentTransform):
        * rendering/RenderLayer.h:
        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::currentTransform):
        * rendering/RenderLayerBacking.h:
        (RenderLayerBacking):

2012-10-17  Sadrul Habib Chowdhury  <sadrul@chromium.org>

        plugins: Allow a plugin to dictate whether it can receive drag events or not.
        https://bugs.webkit.org/show_bug.cgi?id=99355

        Reviewed by Tony Chang.

        When doing a drag over a plugin, ask the plugin whether it can accept
        drag/drop to decide whether drag/drop is possible or not. At present,
        plugins do not receive drag events through WebCore (i.e. various
        implementations of PluginView::handleMouseEvent ignores the
        drop-events). This change makes it possible for the ports to ask the
        plugin first to decide whether it can (or wants to) accept drag events.
        The default implementation remains the same, i.e. plugins do not receive
        drag events. For chromium, the overridden implementation uses the
        WebPlugin interface to check whether the plugin can accept drag events.

        * html/HTMLPlugInElement.cpp:
        (WebCore::HTMLPlugInElement::canProcessDrag):
        (WebCore):
        * html/HTMLPlugInElement.h:
        (WebCore):
        (HTMLPlugInElement):
        * page/DragController.cpp:
        (WebCore::DragController::canProcessDrag):
        * plugins/PluginViewBase.h:
        (WebCore):
        (WebCore::PluginViewBase::canProcessDrag):

2012-10-17  Andreas Kling  <kling@webkit.org>

        Shrink EventTargetData by making firingEventListeners vector optional.
        <http://webkit.org/b/99532>
        <rdar://problem/12515099>

        Reviewed by Anders Carlsson.

        The majority of event listeners never actually fire, and EventTargetData::firingEventListeners
        is just sitting there taking up space. Make it an OwnPtr instead, shrinking EventTargetData
        by 48 bytes and progressing Membuster3 by 395kB.

        * dom/EventTarget.cpp:
        (WebCore::EventTarget::removeEventListener):
        (WebCore::EventTarget::fireEventListeners):
        (WebCore::EventTarget::removeAllEventListeners):
        * dom/EventTarget.h:
        (WebCore::EventTarget::isFiringEventListeners):

2012-10-17  Christophe Dumez  <christophe.dumez@intel.com>

        xss-DENIED-xsl-document-securityOrigin.xml crashes with icon assertion
        https://bugs.webkit.org/show_bug.cgi?id=99571

        Reviewed by Kenneth Rohde Christiansen.

        Check that the iconURL is not empty in IconController::continueLoadWithDecision()
        to avoid hitting assertions later when trying to commit this empty URL to the
        database. IconController::url() may indeed return an empty URL but there was
        no check for it.

        No new tests, already covered by http/tests/security/xss-DENIED-xsl-document-securityOrigin.xml.

        * loader/icon/IconController.cpp:
        (WebCore::IconController::continueLoadWithDecision):

2012-10-17  Byungwoo Lee  <bw80.lee@samsung.com>

        Fix build warnings : -Wunused-parameter, -Wunused-variable
        https://bugs.webkit.org/show_bug.cgi?id=99539

        Reviewed by Kentaro Hara.

        Fix build warnings about unused parameter or unused variable when
        WTF_USE_TILED_BACKING_STORE option is enabled.

        * html/shadow/HTMLContentElement.cpp:
        (WebCore::contentTagName):
        * platform/graphics/efl/GraphicsContext3DEfl.cpp:
        (WebCore::GraphicsContext3D::getImageData):
        * platform/graphics/efl/GraphicsContext3DPrivate.cpp:
        (WebCore::GraphicsContext3DPrivate::createSurface):
        (WebCore::GraphicsContext3DPrivate::paintToTextureMapper):
        * platform/graphics/opengl/Extensions3DOpenGL.cpp:
        (WebCore::Extensions3DOpenGL::bindVertexArrayOES):
        * platform/graphics/texmap/TextureMapper.h:
        (WebCore::BitmapTexture::canReuseWith):
        (WebCore::TextureMapper::beginPainting):
        * platform/graphics/texmap/TextureMapperGL.cpp:
        (WebCore::TextureMapperGL::drawRepaintCounter):
        * platform/graphics/texmap/TextureMapperImageBuffer.cpp:
        (WebCore::BitmapTextureImageBuffer::updateContents):
        * platform/graphics/texmap/TextureMapperImageBuffer.h:
        * platform/graphics/texmap/TextureMapperLayer.cpp:
        (WebCore::TextureMapperLayer::sortByZOrder):
        (WebCore::TextureMapperLayer::flushCompositingStateSelf):
        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::allowsIndependentlyCompositedFrames):

2012-10-17  Shinya Kawanaka  <shinyak@chromium.org>

        Dynamically added elements do not get re-projected.
        https://bugs.webkit.org/show_bug.cgi?id=99227

        Reviewed by Dimitri Glazkov.

        When distribution happens, we have to invalidate its host shadow's distribution, since the children of the host
        is changed.

        Test: fast/dom/shadow/content-reprojection-dynamic.html

        * html/shadow/ContentDistributor.cpp:
        (WebCore::ContentDistributor::distribute):

2012-10-17  Yury Semikhatsky  <yurys@chromium.org>

        Web Inspector: no "delete watch expression" context menu item when clicking on the expression value
        https://bugs.webkit.org/show_bug.cgi?id=99602

        Reviewed by Pavel Feldman.

        Add delete items to the watch expression's value's context menu.

        * inspector/front-end/ObjectPropertiesSection.js:
        (WebInspector.ObjectPropertyTreeElement.prototype._contextMenuFired):
        (WebInspector.ObjectPropertyTreeElement.prototype.populateContextMenu):
        * inspector/front-end/WatchExpressionsSidebarPane.js:
        (WebInspector.WatchExpressionTreeElement.prototype.populateContextMenu):
        (WebInspector.WatchExpressionTreeElement.prototype._contextMenu):

2012-10-17  Vsevolod Vlasov  <vsevik@chromium.org>

        Web Inspector: [Regression] Undoing script changes does not restore breakpoints.
        https://bugs.webkit.org/show_bug.cgi?id=99598

        Reviewed by Pavel Feldman.

        workingCopyChanged now dispatches did/willMergeToVM instead of did/willDivergeFromVM
        when change returns uiSourceCode to non dirty state.
        Added wasDirty parameter to workingCopyChanged event.

        Test: inspector/debugger/live-edit-breakpoints.html

        * inspector/front-end/ResourceScriptMapping.js:
        (WebInspector.ResourceScriptFile.prototype._workingCopyCommitted):
        (WebInspector.ResourceScriptFile.prototype._workingCopyChanged):
        * inspector/front-end/UISourceCode.js:
        (WebInspector.UISourceCode.prototype.setWorkingCopy):

2012-10-17  Simon Hausmann  <simon.hausmann@digia.com>

        [Qt] Avoid re-creating CSSGrammar.cpp with each (incremental) build

        Reviewed by Tor Arne Vestbø.

        The expected output is CSSGrammar.cpp and the input file used to be CSSGrammar.y,
        so ${QMAKE_FILE_BASE}.cpp did the correct transformation. Recently the input has
        changed to CSSGrammar.y.in, in which case the ${QMAKE_FILE_BASE} is CSSGrammar.y
        unfortunately. The resulting target CSSGrammar.y.cpp will never be created and
        therefore the target will always run.

        * DerivedSources.pri:

2012-10-17  Ilya Tikhonovsky  <loislo@chromium.org>

        Unreviewed fix for ImageSourceCG.

        * platform/graphics/cg/ImageSourceCG.cpp:
        (WebCore::ImageSource::reportMemoryUsage):

2012-10-17  Ilya Tikhonovsky  <loislo@chromium.org>

        Unreviewed fix for compilation on CG bots.

        * platform/graphics/cg/ImageSourceCG.cpp:

2012-10-16  Ilya Tikhonovsky  <loislo@chromium.org>

        Web Inspector: NMI instrument ImageDecoder. It owns a buffer that could be quite big.
        https://bugs.webkit.org/show_bug.cgi?id=99540

        Reviewed by Yury Semikhatsky.

        * platform/graphics/ImageSource.cpp:
        (WebCore::ImageSource::reportMemoryUsage):
        (WebCore):
        * platform/graphics/ImageSource.h:
        (ImageSource):
        * platform/image-decoders/ImageDecoder.cpp:
        (WebCore::ImageFrame::reportMemoryUsage):
        (WebCore):
        (WebCore::ImageDecoder::reportMemoryUsage):
        * platform/image-decoders/ImageDecoder.h:
        (ImageFrame):
        (ImageDecoder):
        * platform/image-decoders/skia/ImageDecoderSkia.cpp:
        (WebCore::ImageFrame::reportMemoryUsage):
        (WebCore):

2012-10-17  Zeno Albisser  <zeno@webkit.org>

        [Qt] Fix build on Mac OSX 10.6 and earlier.
        https://bugs.webkit.org/show_bug.cgi?id=99595

        Reviewed by Simon Hausmann.

        * Target.pri:

2012-10-17  Pavel Feldman  <pfeldman@chromium.org>

        Web Inspector: display "disconnected" message when remote debugging terminates
        https://bugs.webkit.org/show_bug.cgi?id=99316

        Reviewed by Yury Semikhatsky.

        Otherwise, it is not clear that the front-end is no longer functional.

        * inspector/front-end/InspectorFrontendHostStub.js:
        (WebInspector.RemoteDebuggingTerminatedScreen):
        * inspector/front-end/inspector.js:
        (WebInspector.loaded.WebInspector.socket.onclose):
        (WebInspector.loaded):

2012-10-17  Yury Semikhatsky  <yurys@chromium.org>

        Web Inspector: delete watch expression button overlaps with the expression value
        https://bugs.webkit.org/show_bug.cgi?id=99569

        Reviewed by Vsevolod Vlasov.

        Delete watch expression button now doesn't overlap with the watch expression.

        * inspector/front-end/inspector.css:
        (.properties-tree.watch-expressions > li > .value):

2012-10-17  Luke Macpherson   <macpherson@chromium.org>

        Move handling of CSSPropertyPointerEvents from StyleResolver into StyleBuilder.
        https://bugs.webkit.org/show_bug.cgi?id=99536

        Reviewed by Alexis Menard.

        One small step towards removing the giant switch statement in StyleResolver,
        this patch moves pointer event property into StyleBuilder.

        Covered by fast/events/pointer-events.html and fast/events/pointer-events-2.html.

        * css/StyleBuilder.cpp:
        (WebCore::StyleBuilder::StyleBuilder):
        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::applyProperty):

2012-10-17  Keishi Hattori  <keishi@webkit.org>

        Localized date should be based on LDML
        https://bugs.webkit.org/show_bug.cgi?id=99570

        Reviewed by Kent Tamura.

        Localized date should be based on LDML to match the format inside DateTimeEditElement.

        No new tests. Covered by LocaleMacTest.formatDate and LocaleWinTest.formatDate.

        * platform/text/LocaleICU.cpp: Removed formatDateTime.
        * platform/text/LocaleICU.h:
        (LocaleICU):
        * platform/text/LocaleNone.cpp: Removed formatDateTime.
        (LocaleNone):
        * platform/text/LocaleWin.cpp: Removed formatDateTime and formatDate.
        (WebCore):
        * platform/text/LocaleWin.h:
        (LocaleWin):
        * platform/text/Localizer.cpp:
        (WebCore::DateTimeStringBuilder::visitField): Added support for year/month/day.
        (WebCore::Localizer::formatDateTime): Creates the formatted string based on the format from dateFormat().
        * platform/text/Localizer.h:
        * platform/text/mac/LocaleMac.h:
        (LocaleMac):
        * platform/text/mac/LocaleMac.mm: Removed formatDateTime.

2012-10-17  Harald Alvestrand  <hta@google.com>

        Implement the Selector argument to RTCPeerConnection.getStats
        https://bugs.webkit.org/show_bug.cgi?id=99460

        Reviewed by Adam Barth.

        The change adds two new parameters to the RTCStatsRequest object:
        stream and component. Together these are enough to identify a
        MediaStreamTrack.

        Test: fast/mediastream/RTCPeerConnection-statsSelector.html

        * Modules/mediastream/MediaStreamTrack.cpp:
        (WebCore::MediaStreamTrack::streamDescriptor):
        (WebCore):
        * Modules/mediastream/MediaStreamTrack.h:
        * Modules/mediastream/RTCPeerConnection.cpp:
        (WebCore::RTCPeerConnection::getStats):
        * Modules/mediastream/RTCStatsRequestImpl.cpp:
        (WebCore::RTCStatsRequestImpl::create):
        (WebCore::RTCStatsRequestImpl::RTCStatsRequestImpl):
        (WebCore::RTCStatsRequestImpl::hasSelector):
        (WebCore):
        (WebCore::RTCStatsRequestImpl::stream):
        (WebCore::RTCStatsRequestImpl::component):
        * Modules/mediastream/RTCStatsRequestImpl.h:
        (RTCStatsRequestImpl):
        * platform/chromium/support/WebRTCStatsRequest.cpp:
        (WebKit):
        (WebKit::WebRTCStatsRequest::hasSelector):
        (WebKit::WebRTCStatsRequest::stream):
        (WebKit::WebRTCStatsRequest::component):
        * platform/mediastream/RTCStatsRequest.h:
        (WebCore):
        (RTCStatsRequest):

2012-10-17  Simon Hausmann  <simon.hausmann@digia.com>

        [Qt] Enable use of more AllInOne files
        https://bugs.webkit.org/show_bug.cgi?id=99579

        Reviewed by Tor Arne Vestbø.

        The AllInOne files reduce pressure during final link time because the object files contain less duplicated
        symbols.

        * Target.pri: Add HTMLElementsAllInOne, EditingAllInOne and RenderingAllInOne to the build
        * editing/EditingAllInOne.cpp: Place a #if USE(CF) around the inclusion of SmartReplaceCF.cpp
        * html/HTMLElementsAllInOne.cpp: Move HTMLPlugInElement.cpp to the top to fix builds on X11 based platforms
        where the X headers get confused by the "Region" type that's also declared in WebCore.
        * rendering/RenderingAllInOne.cpp: Fix build on case-sensitive file systems (Plugin -> PlugIn) and added a
        #if PLATFORM(WIN) around the inclusion of RenderThemeWin.cpp.

2012-10-17  Kent Tamura  <tkent@chromium.org>

        REGRESSION(r131421): Text baseline becomes incorrect after re-layout of input[type=time]
        https://bugs.webkit.org/show_bug.cgi?id=99572

        Reviewed by Kentaro Hara.

        We use flexible box since r131421, and it seems text baseline becomes
        incorrect if there are text nodes in a flex container.

        Test: fast/forms/time-multiple-fields/time-multiple-fields-static-relayout.html

        * css/html.css:
        (input::-webkit-datetime-edit-text): Added.
        * html/shadow/DateTimeEditElement.cpp:
        (WebCore::DateTimeEditBuilder::visitLiteral):
        Wrap text with an element with ::-webkit-datetime-edit-text.

2012-10-17  Grzegorz Czajkowski  <g.czajkowski@samsung.com>, Michal Roj <m.roj@samsung.com>

        [WK2][EFL] Implementation of spellchecking feature.
        https://bugs.webkit.org/show_bug.cgi?id=91854

        Reviewed by Gyuyoung Kim.

        * PlatformEfl.cmake:
        Add enchant-related compiler flags: header paths and the library flag.

2012-10-17  Alexander Pavlov  <apavlov@chromium.org>

        Web Inspector: Avoid style updates when retrieving the inline stylesheet text
        https://bugs.webkit.org/show_bug.cgi?id=99576

        Reviewed by Vsevolod Vlasov.

        Avoid using innerText() to retrieve inline stylesheet text, which may result in style and layout updates.

        * inspector/InspectorStyleSheet.cpp:
        (WebCore::InspectorStyleSheet::inlineStyleSheetText):

2012-10-17  Patrick Gansterer  <paroga@webkit.org>

        Build fix for WinCE after r131365.

        * platform/graphics/GlyphBuffer.h:
        (WebCore::GlyphBufferAdvance::width):
        * platform/graphics/wince/FontWinCE.cpp:
        (WebCore::cursorToX):
        * platform/graphics/wince/GraphicsContextWinCE.cpp:
        (WebCore::GraphicsContext::drawText):

2012-10-17  Mike West  <mkwst@chromium.org>

        V8 should throw a more descriptive exception when blocking 'eval' via CSP.
        https://bugs.webkit.org/show_bug.cgi?id=94332

        Reviewed by Adam Barth.

        Following up on https://bugs.webkit.org/show_bug.cgi?id=94331, this
        patch wires up the new error message mechanism to V8, and updates the
        Chromium test expectations accordingly.

        * bindings/v8/ScriptController.cpp:
        (WebCore::ScriptController::disableEval):
            Pass 'errorMessage' through to V8.
        * bindings/v8/V8DOMWindowShell.cpp:
        (WebCore::V8DOMWindowShell::initializeIfNeeded):
            Grab the error message from ContentSecurityPolicy, and pass it
            through to V8.
        * bindings/v8/WorkerContextExecutionProxy.cpp:
        (WebCore::WorkerContextExecutionProxy::WorkerContextExecutionProxy):
        (WebCore::WorkerContextExecutionProxy::evaluate):
        (WebCore::WorkerContextExecutionProxy::setEvalAllowed):
        * bindings/v8/WorkerContextExecutionProxy.h:
        (WorkerContextExecutionProxy):
            Convert 'm_disableEvalPending' to a string to store the current
            error message, and use it to set the eval state.
        * bindings/v8/WorkerScriptController.cpp:
        (WebCore::WorkerScriptController::disableEval):
            Pass 'errorMessage' through to V8.

2012-10-17  MORITA Hajime  <morrita@google.com>

        Assertion failed on HTMLFormControlElement.cpp: updateFromElementCallback()
        https://bugs.webkit.org/show_bug.cgi?id=99566

        Reviewed by Kent Tamura.

        It had a too optimistic assertion. This change removes it.

        Test: fast/forms/textarea/textarea-autofocus-removal-while-focusing.html

        * html/HTMLFormControlElement.cpp:
        (WebCore::updateFromElementCallback):

2012-10-17  Vsevolod Vlasov  <vsevik@chromium.org>

        Web Inspector: When dirty uiSourceCode is saved to disk from scripts navigator context menu working copy is not committed.
        https://bugs.webkit.org/show_bug.cgi?id=99555

        Reviewed by Yury Semikhatsky.

        Save As context menu handler now commits working copy for dirty UISourceCodes.

        * inspector/front-end/HandlerRegistry.js:

2012-10-17  Vsevolod Vlasov  <vsevik@chromium.org>

        Web Inspector: Stylesheets saved with FileManager are not saved to disk when edited from Elements panel.
        https://bugs.webkit.org/show_bug.cgi?id=99554

        Reviewed by Yury Semikhatsky.

        Moved saving to disk from SourceFrame to UISourceCode.

        * inspector/front-end/SourceFrame.js:
        (WebInspector.SourceFrame.prototype._commitEditing):
        * inspector/front-end/UISourceCode.js:
        (WebInspector.UISourceCode.prototype._commitContent):

2012-10-17  Vsevolod Vlasov  <vsevik@chromium.org>

        Web Inspector: [Regression] SASS sources are not saved to disk.
        https://bugs.webkit.org/show_bug.cgi?id=99551

        Reviewed by Yury Semikhatsky.

        Added resource null checks.

        * inspector/front-end/StylesSourceMapping.js:
        (WebInspector.StylesSourceMapping.prototype._uiSourceCodeAddedToWorkspace):

2012-10-17  Elliott Sprehn  <esprehn@chromium.org>

        Clean up ContentData operator overloads
        https://bugs.webkit.org/show_bug.cgi?id=99556

        Reviewed by Eric Seidel.

        Use virtual dispatch for checking ContentData equality instead
        of a switch over the type. This the first step in getting rid
        of the StyleContentType enum and all the switch statements over
        the type().

        No tests needed, this is just a refactor.        

        * rendering/style/ContentData.cpp:
        * rendering/style/ContentData.h:
        (ContentData):
        (WebCore::operator==):
        (WebCore):
        (WebCore::operator!=):

2012-10-17  Gabor Rapcsanyi  <rgabor@webkit.org>

        NEON intrinsics Gauss filter does not work properly
        https://bugs.webkit.org/show_bug.cgi?id=98875

        Reviewed by Zoltan Herczeg.

        Fixing the NEON intrinsics Gauss filter. The stride parameter
        was missing from the intrinsics algorithm. Tested with pixel
        checks, now it's working properly.

        * platform/graphics/filters/arm/FEGaussianBlurNEON.h:
        (WebCore::boxBlurNEON):

2012-10-17  MORITA Hajime  <morrita@google.com>

        Crash on Frame::inScope() part 2
        https://bugs.webkit.org/show_bug.cgi?id=99543

        Reviewed by Kent Tamura.

        FrameTree::scopedChildCount() can be called even when the one of child frames
        is in orphan state. This change added a guard for that case.

        No new tests. A hard-to-test timing issue.

        * page/Frame.cpp:
        (WebCore::Frame::inScope):

2012-10-17  Shinya Kawanaka  <shinyak@chromium.org>

        Remove shadowAncestorNode() from VisibleSelection
        https://bugs.webkit.org/show_bug.cgi?id=99544

        Reviewed by Hajime Morita.

        An effort to replace shadowAncestorNode() with shadowHost(), since shadowAncestorNode() is now deprecated.

        No new tests, no change in behavior.

        * editing/VisibleSelection.cpp:
        (WebCore::VisibleSelection::adjustSelectionToAvoidCrossingEditingBoundaries): Since shadowHost() returns 0 if
        an element is not in shadowRoot, it's ok to compare shadowAncestor to 0.

2012-10-17  Douglas Stockwell  <dstockwell@chromium.org>

        Content of replaced elements should be trimmed to the content edge curve.
        https://bugs.webkit.org/show_bug.cgi?id=63899

        Reviewed by Simon Fraser.

        When a border-radius is specified the content of replaced elements needs to be clipped to avoid
        being painted over the padding or border in the corners. Previously the clip that was applied
        was set to the border-edge curve, this patch contracts the clip by the size of the border and
        padding (the content-edge curve) to match the css3 spec.
        Spec: http://www.w3.org/TR/css3-background/#corner-clipping

        Test: fast/replaced/border-radius-clip-content-edge.html

        * rendering/RenderBoxModelObject.h:
        (RenderBoxModelObject):
        * rendering/RenderReplaced.cpp:
        (WebCore::RenderReplaced::paint):
        * rendering/RenderWidget.cpp:
        (WebCore::RenderWidget::paint):

2012-10-17  Kunihiko Sakamoto  <ksakamoto@chromium.org>

        The HTML5 formtarget/formaction/formenctyp/formmethod/formnovalidate attributes don't work in button tags with nested elements
        https://bugs.webkit.org/show_bug.cgi?id=90539

        Reviewed by Kent Tamura.

        Fix a bug where form(action|enctype|method|target) attributes of <button> are not
        honored if the target of the click event is an element nested within the button.

        Test: fast/forms/formaction-attribute.html

        * loader/FormSubmission.cpp:
        (WebCore::FormSubmission::create): Looks for the attributes for form submission
        from the nearest FormControlElement ancestor of the event target.

2012-10-16  MORITA Hajime  <morrita@google.com>

        [Shadow DOM][V8] WebCore::V8DOMWindow::installPerContextProperties() is slow when shadowDOMEnabled flag is on.
        https://bugs.webkit.org/show_bug.cgi?id=99428

        Reviewed by Adam Barth.

        A benchmark unveiled that installPerContextProperties() could have made DOMWindow setup slower when
        - Some properties are added per-context basis by turnin the flag on and
        - There are bunch of DOMWindow object in the page (that is, there are many iframes.)

        This change eliminates Shadow DOM related per-context properties from DOMWindow for getting rid of that slowness.

        * dom/ContextFeatures.cpp:
        * dom/ContextFeatures.h: Removed shadowDOMEnabled() method and related enum entry.
        * dom/Position.cpp:
        (WebCore::Position::Position):
        (WebCore::Position::findParent):
        * dom/TreeScope.cpp:
        (WebCore::TreeScope::getSelection):
        * dom/make_names.pl: Re-introduced "runtimeConditional" directive.
        (defaultTagPropertyHash):
        (printConstructorInterior):
        (printFactoryCppFile):
        (printWrapperFunctions):
        (printWrapperFactoryCppFile):
        * html/HTMLTagNames.in:
        * html/shadow/HTMLContentElement.cpp:
        (WebCore::contentTagName):
        * page/DOMWindow.idl:

2012-10-16  Julien Chaffraix  <jchaffraix@webkit.org>

        Make RenderObject destruction during detach a top-down operation
        https://bugs.webkit.org/show_bug.cgi?id=98336

        Reviewed by Eric Seidel.

        detach() is a DOM-driven operation that destroys the renderers bottom-up.
        While this is correct, it causes extra-work to be done (tree cleaning, ...)
        as it doesn't know about the render tree's structure.

        The render tree on the other side already supports top-down operations
        but it was overriden by the DOM side of detach.

        This change only makes ContainerNode::detach do a top-down render tree
        destruction. This is a required step towards doing smarter destruction.

        Refactoring covered by existing tests.

        * dom/ContainerNode.cpp:
        (WebCore::ContainerNode::detach):
        Changed the method to do a top-down destruction.

        * dom/Node.cpp:
        (WebCore::Node::detach):
        Added this ASSERT that ensures that we have properly cleaned up the
        whole DOM subtree. The only exception is child content belonging to a
        flow-thread as the code will shuffle the renderers under the flow-thread.

        * rendering/RenderObject.cpp:
        (WebCore::RenderObject::willBeDestroyed):
        As we don't update the node's renderer on the DOM side, do it here.
        The upside is that it ensures that we don't left any stray renderer
        in the tree.

        * rendering/RenderObjectChildList.cpp:
        (WebCore::RenderObjectChildList::destroyLeftoverChildren):
        Removed the calls to setRenderer as they are redundant with what we do
        in willBeDestroyed.

        * rendering/RenderTextFragment.cpp:
        (WebCore::RenderTextFragment::setText):
        Removed some now unneeded code, replaced by an ASSERT. This is because
        destroying m_firstLetter would automatically reset the node's renderer
        in destroyLeftoverChildren.

2012-10-16  Joseph Pecoraro  <pecoraro@apple.com>

        HTMLSelectElement::optionSelectedByUser confuses listIndex and optionIndex
        https://bugs.webkit.org/show_bug.cgi?id=99523

        Reviewed by Simon Fraser.

        There was a call site where the optionIndex was being passed to a
        function that expected the listIndex. Convert appropriately.

        Extends Test: platform/mac/fast/objc/dom-html-select-activate.html

        * html/HTMLSelectElement.cpp:
        (WebCore::HTMLSelectElement::optionSelectedByUser):

2012-10-16  Jian Li  <jianli@chromium.org>

        Rename feature define ENABLE_WIDGET_REGION to ENABLE_DRAGGBALE_REGION
        https://bugs.webkit.org/show_bug.cgi?id=98975

        Reviewed by Adam Barth.

        Renaming is needed to better match with the draggable region code.

        No new tests due to no functional change.

        * Configurations/FeatureDefines.xcconfig:
        * DerivedSources.make:
        * WebCore.exp.in:
        * css/CSSComputedStyleDeclaration.cpp:
        (WebCore):
        (WebCore::CSSComputedStyleDeclaration::getPropertyCSSValue):
        * css/CSSParser.cpp:
        (WebCore::CSSParser::parseValue):
        * css/CSSProperty.cpp:
        (WebCore::CSSProperty::isInheritedProperty):
        * css/CSSPropertyNames.in:
        * css/CSSValueKeywords.in:
        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::applyProperty):
        * dom/Document.cpp:
        (WebCore::Document::Document):
        (WebCore):
        (WebCore::Document::reportMemoryUsage):
        * dom/Document.h:
        (WebCore):
        (Document):
        * page/Chrome.cpp:
        (WebCore):
        * page/ChromeClient.h:
        (ChromeClient):
        * page/FrameView.cpp:
        (WebCore::FrameView::layout):
        (WebCore):
        (WebCore::FrameView::paintContents):
        * page/FrameView.h:
        (FrameView):
        * rendering/RenderInline.cpp:
        (WebCore):
        (WebCore::RenderInline::addAnnotatedRegions):
        * rendering/RenderInline.h:
        (RenderInline):
        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::scrollTo):
        (WebCore::RenderLayer::setHasHorizontalScrollbar):
        (WebCore::RenderLayer::setHasVerticalScrollbar):
        (WebCore::RenderLayer::updateScrollbarsAfterLayout):
        * rendering/RenderListBox.cpp:
        (WebCore::RenderListBox::setHasVerticalScrollbar):
        * rendering/RenderObject.cpp:
        (WebCore::RenderObject::styleWillChange):
        (WebCore):
        (WebCore::RenderObject::addAnnotatedRegions):
        * rendering/RenderObject.h:
        (WebCore::AnnotatedRegionValue::operator==):
        (AnnotatedRegionValue):
        (RenderObject):
        * rendering/style/RenderStyle.h:
        * rendering/style/RenderStyleConstants.h:
        * rendering/style/StyleRareNonInheritedData.cpp:
        (WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData):
        (WebCore::StyleRareNonInheritedData::operator==):
        * rendering/style/StyleRareNonInheritedData.h:
        (StyleRareNonInheritedData):

2012-10-16  James Simonsen  <simonjam@chromium.org>

        [Page Visibility API] View-less documents should report as hidden
        https://bugs.webkit.org/show_bug.cgi?id=99410

        Reviewed by Tony Gentilcore.

        Test: fast/events/page-visibility-null-view.html

        * dom/Document.cpp:
        (WebCore::Document::visibilityState):

2012-10-16  Michael Saboff  <msaboff@apple.com>

        Change WTF_USE_8BIT_TEXTRUN to ENABLE_8BIT_TEXTRUN
        https://bugs.webkit.org/show_bug.cgi?id=99484

        Reviewed by Eric Seidel.

        Changed macro name to align with it's purpose, therefore changed USE(8BIT_TEXTRUN) to ENABLE(8BIT_TEXTRUN).

        No new tests.  Changed macro name, no functional change.

        * platform/graphics/TextRun.h:
        (WebCore::TextRun::TextRun):
        (WebCore::TextRun::subRun):
        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::constructTextRun):
        * rendering/RenderBlock.h:
        (RenderBlock):

2012-10-16  Noam Rosenthal  <noam.rosenthal@nokia.com>

        [Qt] REGRESSION(r131485): It broke the build
        https://bugs.webkit.org/show_bug.cgi?id=99499

        Unreviewed build (warning) fix.

        * platform/graphics/texmap/TextureMapperShaderManager.cpp:
        (WebCore::TextureMapperShaderProgram::getLocation):

2012-10-16  David Grogan  <dgrogan@chromium.org>

        Inspector: Don't fire assert when inspecting an empty db
        https://bugs.webkit.org/show_bug.cgi?id=99370

        Reviewed by Vsevolod Vlasov.

        * inspector/InspectorIndexedDBAgent.cpp:
        (WebCore):

2012-10-16  Tony Chang  <tony@chromium.org>

        Unreviewed, try to fix the Apple Win build by forcing a rebuild of RenderingAllInOne.cpp.

        * rendering/RenderingAllInOne.cpp:

2012-10-16  Andrew Scherkus  <scherkus@chromium.org>

        Fix crash in WebCore::MediaControlPanelElement::makeTransparent()
        https://bugs.webkit.org/show_bug.cgi?id=97951

        Reviewed by Simon Fraser.

        No new tests as it's a speculative fix based on crash dump analysis.
     
        Despite MediaControlPanelElement checking for document()->page() nullity in other places, it forgot one check in makeTransparent().

        * html/shadow/MediaControlElements.cpp:
        (WebCore::MediaControlPanelElement::makeTransparent):

2012-10-16  Emil A Eklund  <eae@chromium.org>

        Remove special-case flooring of baselinePosition for replaced elements in InlineFlowBox::placeBoxesInBlockDirection
        https://bugs.webkit.org/show_bug.cgi?id=99376

        Reviewed by Levi Weintraub.

        In r122769 (bug 91410) we added a special-case handling for
        replaced elements in InlineFlowBox::placeBoxesInBlockDirection
        to work around positioning issues in a couple of svg tests.
        This was needed to compensate for a workaround in the table
        painting code that was fixed in r131358 (bug 99364). As such the
        special-case handling for replaced elements is no longer needed
        in InlineFlowBox::placeBoxesInBlockDirection.

        Furthermore this caused problems with caret repainting leaving
        residual pixels which motivated this change.

        No new tests, have not been able to write a repaint test to
        demonstrate the caret repaint issue.

        * rendering/InlineFlowBox.cpp:
        (WebCore::InlineFlowBox::placeBoxesInBlockDirection):

2012-10-16  Simon Fraser  <simon.fraser@apple.com>

        Some #include hygiene
        https://bugs.webkit.org/show_bug.cgi?id=99500

        Reviewed by Tony Chang.

        Clean up some #includes, mostly related to GraphicsLayer.h. In many
        cases this can be replaced by PlatformLayer.h.
        
        Remove an #include of PluginViewBase.h from Page.h, which was a source
        of #include fan-out.

        * html/canvas/CanvasRenderingContext2D.h:
        * page/Page.h:
        * page/scrolling/ScrollingCoordinator.h:
        * page/scrolling/ScrollingStateNode.h:
        * page/scrolling/mac/ScrollingStateNodeMac.mm:
        * platform/graphics/GraphicsContext3D.h:
        * platform/graphics/MediaPlayer.h:
        * platform/graphics/avfoundation/MediaPlayerPrivateAVFoundation.cpp:
        * platform/graphics/gpu/DrawingBuffer.h:
        * platform/graphics/mac/MediaPlayerPrivateQTKit.mm:
        * plugins/PluginViewBase.h:

2012-10-16  Adam Barth  <abarth@webkit.org>

        Document::adoptNode shouldn't special-case <iframe>
        https://bugs.webkit.org/show_bug.cgi?id=99247

        Reviewed by Ryosuke Niwa.

        The special case was added in http://trac.webkit.org/changeset/75293 to
        fix a bug with magic iframes. Originally, I planned to remove this
        special case, but further investigation reveals that other browsers
        throw exceptions for other frame owner elements as well. Now we treat
        all frame owner elements the same way.

        Test: fast/frames/adopt-object-into-itself.html

        * dom/Document.cpp:
        (WebCore::Document::adoptNode):

2012-10-16  Dominik Röttsches  <dominik.rottsches@intel.com>

        Init timeout flag in ResourceErrorMac
        https://bugs.webkit.org/show_bug.cgi?id=99478

        Reviewed by Alexey Proskuryakov.

        On construction from platform error types, initialize the timeout flag 
        to true if the error results from a timeout.

        No new tests, covered by tests that will be added in bug 74802.

        * platform/network/mac/ResourceErrorMac.mm:
        (WebCore::ResourceError::platformLazyInit): Initializing timeout flag if the error was a timeout.

2012-10-16  Tony Chang  <tony@chromium.org>

        input[type=range] as a flex item renders thumb at wrong position
        https://bugs.webkit.org/show_bug.cgi?id=98666

        Reviewed by Ojan Vafai.

        Replace RenderSlider implementation with new flexbox and clean up the shadow DOM.
        The previous code was trying to set the height to 100% and had a bunch of hacks in
        the renderer code to set an explicit height. Using the new flexbox allows us to
        remove these renderer hacks.

        Test: css3/flexbox/flexitem-stretch-range.html

        * css/html.css:
        (input[type="range"]::-webkit-slider-container, input[type="range"]::-webkit-media-slider-container): Use new flexbox.
        (input[type="range"]::-webkit-slider-runnable-track): Use new flexbox.
        (input[type="range"]::-webkit-slider-thumb, input[type="range"]::-webkit-media-slider-thumb): Remove relative positioning since we're
        no longer setting top/left in the layout code.
        * css/mediaControlsChromium.css: Remove redundant styles and bottom: 1px hack.
        * css/mediaControlsChromiumAndroid.css: Remove redundant styles and bottom: 1px hack.
        * html/RangeInputType.cpp:
        (WebCore::RangeInputType::listAttributeTargetChanged): We need to force a layout
        since the height of the control should change when adding/removing a datalist.
        * html/shadow/SliderThumbElement.cpp:
        (WebCore::RenderSliderContainer::RenderSliderContainer): Use new flexbox.
        (WebCore::RenderSliderContainer::computeLogicalHeight): Rather than setting style()->height() in layout, just compute the correct
        height when asked.  If we have a datalist, we increase the height (same code as before).  If we're vertical,
        we use the intrinsic size.
        (WebCore::RenderSliderContainer::layout): Remove extra layout code, but handle the position of the thumb.
        This used to be handled in the thumb's layout method, but I deleted that.
        * html/shadow/SliderThumbElement.h:
        * rendering/RenderSlider.cpp:
        (WebCore::RenderSlider::RenderSlider): Use new flexbox.
        (WebCore::RenderSlider::layout): Set the limiter size to the size of the thumb. This is necessary
        for fast/css/unknown-pseudo-element-matching.html which tries to set the height of the thumb to 1px
        and expects the input to also have a height of 1px.  It worked before because the height of the input
        didn't depend on the height of its children.
        * rendering/RenderSlider.h: Fix indentation.
        (RenderSlider): Use new flexible box.

2012-10-16  Dima Gorbik  <dgorbik@apple.com>

        Remove Platform.h include from the header files.
        https://bugs.webkit.org/show_bug.cgi?id=98665

        Reviewed by Eric Seidel.

        We don't want other clients that include WebKit headers to know about Platform.h.

        No new tests.

        * platform/MemoryPressureHandler.h:
        * platform/graphics/filters/arm/FECompositeArithmeticNEON.h:
        * platform/graphics/filters/arm/FEGaussianBlurNEON.h:
        * platform/graphics/filters/arm/FELightingNEON.h:

2012-10-16  Xianzhu Wang  <wangxianzhu@chromium.org>

        [Chromium] Android: Need a way to get appropriate font for some specific characters.
        https://bugs.webkit.org/show_bug.cgi?id=67587

        Reviewed by Adam Barth.

        Use the new Skia API SkGetFallbackFamilyNameForChar() to get the family name for individual characters.

        No new tests. The following existing tests pass with the change:
        fast/writing-mode/vertical-subst-font-vert-no-dflt.html
        fast/dynamic/text-combine.html
        fast/writing-mode/japanese-rl-text.html
        fast/writing-mode/japanese-rl-selection.html
        fast/writing-mode/japanese-lr-text.html
        fast/repaint/japanese-rl-selection-repaint.html
        fast/writing-mode/border-vertical-lr.html

        * platform/graphics/chromium/FontCacheAndroid.cpp:
        (WebCore::FontCache::getFontDataForCharacters):

2012-10-16  Tommy Widenflycht  <tommyw@google.com>

        MediaStream API: Add the chromium API for RTCDataChannel
        https://bugs.webkit.org/show_bug.cgi?id=99435

        Reviewed by Adam Barth.

        Adding WebRTCDataChannel.

        Test: fast/mediastream/RTCPeerConnection-datachannel.html

        * WebCore.gypi:
        * platform/chromium/support/WebRTCDataChannel.cpp: Added.
        (WebKit):
        (ExtraDataContainer):
        (WebKit::ExtraDataContainer::ExtraDataContainer):
        (WebKit::ExtraDataContainer::extraData):
        (WebKit::WebRTCDataChannel::WebRTCDataChannel):
        (WebKit::WebRTCDataChannel::initialize):
        (WebKit::WebRTCDataChannel::assign):
        (WebKit::WebRTCDataChannel::reset):
        (WebKit::WebRTCDataChannel::operator PassRefPtr<WebCore::RTCDataChannelDescriptor>):
        (WebKit::WebRTCDataChannel::operator WebCore::RTCDataChannelDescriptor*):
        (WebKit::WebRTCDataChannel::extraData):
        (WebKit::WebRTCDataChannel::setExtraData):
        (WebKit::WebRTCDataChannel::label):
        (WebKit::WebRTCDataChannel::reliable):
        (WebKit::WebRTCDataChannel::setBufferedAmount):
        (WebKit::WebRTCDataChannel::readyStateChanged):
        (WebKit::WebRTCDataChannel::dataArrived):
        (WebKit::WebRTCDataChannel::error):
        * platform/mediastream/chromium/RTCPeerConnectionHandlerChromium.cpp:
        (WebCore::RTCPeerConnectionHandlerChromium::negotiationNeeded):
        (WebCore::RTCPeerConnectionHandlerChromium::didGenerateICECandidate):
        (WebCore):
        (WebCore::RTCPeerConnectionHandlerChromium::didChangeReadyState):
        (WebCore::RTCPeerConnectionHandlerChromium::didChangeICEState):
        (WebCore::RTCPeerConnectionHandlerChromium::didRemoveRemoteStream):

2012-10-16  Brady Eidson  <beidson@apple.com>

        Update indentation in *ResourceLoader headers to match modern WebKit style
        https://bugs.webkit.org/show_bug.cgi?id=99487

        Reviewed by Beth Dakin.

        I'm going to be working on these classes and the indentation is driving me crazy.

        * loader/MainResourceLoader.h:
        (WebCore):
        (MainResourceLoader):
        (WebCore::MainResourceLoader::isLoadingMultipartContent):

        * loader/NetscapePlugInStreamLoader.h:
        (WebCore):
        (NetscapePlugInStreamLoaderClient):
        (WebCore::NetscapePlugInStreamLoaderClient::didFinishLoading):
        (WebCore::NetscapePlugInStreamLoaderClient::wantsAllStreams):
        (WebCore::NetscapePlugInStreamLoaderClient::~NetscapePlugInStreamLoaderClient):
        (NetscapePlugInStreamLoader):

        * loader/ResourceLoader.h:
        (WebCore):
        (ResourceLoader):
        (WebCore::ResourceLoader::documentLoader):
        (WebCore::ResourceLoader::originalRequest):
        (WebCore::ResourceLoader::identifier):
        (WebCore::ResourceLoader::didReceiveCachedMetadata):
        (WebCore::ResourceLoader::willStopBufferingData):
        (WebCore::ResourceLoader::shouldUseCredentialStorage):
        (WebCore::ResourceLoader::didReceiveAuthenticationChallenge):
        (WebCore::ResourceLoader::didCancelAuthenticationChallenge):
        (WebCore::ResourceLoader::canAuthenticateAgainstProtectionSpace):
        (WebCore::ResourceLoader::receivedCancellation):
        (WebCore::ResourceLoader::url):
        (WebCore::ResourceLoader::handle):
        (WebCore::ResourceLoader::sendResourceLoadCallbacks):
        (WebCore::ResourceLoader::reachedTerminalState):
        (WebCore::ResourceLoader::request):
        (WebCore::ResourceLoader::cancelled):
        (WebCore::ResourceLoader::defersLoading):

2012-10-16  Beth Dakin  <bdakin@apple.com>

        https://bugs.webkit.org/show_bug.cgi?id=99254
        Make ScrollingTree an actual tree of nodes, and have it reflect the 
        ScrollingStateTree

        Reviewed by Simon Fraser.

        This patch finally makes the ScrollingTree over on the 
        ScrollingThread aware of the changes that we have been making to the 
        ScrollingStateTree.

        First, it makes ScrollingTreeNode a much more generic class, similar 
        to ScrollingStateNode. It is an abstract class and we will add other 
        types of nodes such as ScrollingTreeFixedNodes that will inherit from 
        this class. 

        All of the scrolling functionality that was in ScrollingTreeNode has 
        been moved to ScrollingTreeScrollingNode. And likewise, 
        ScrollingTreeNodeMac has been re-named to 
        ScrollingTreeScrollingNodeMac. 

        And finally, instead of just updating and creating the root node, 
        ScrollingTree now recurses through the whole ScrollingStateTree to 
        create and update a full tree of nodes.

        New files and moves files.
        * WebCore.xcodeproj/project.pbxproj:

        Add a getter for the children vector since we need to recurse it in 
        ScrollingTree.
        * page/scrolling/ScrollingStateNode.h:
        (WebCore::ScrollingStateNode::children):
        (ScrollingStateNode):

        m_rootNode is now a ScrollingTreeScrollingNode.
        * page/scrolling/ScrollingTree.cpp:
        (WebCore::ScrollingTree::ScrollingTree):

        Instead of just updating the root node, call two new functions that 
        will take care of updating the whole tree.
        (WebCore::ScrollingTree::commitNewTreeState):

        This function ecurses through the ScrollingStateTree and updates the 
        corresponding ScrollingTreeNodes.
        (WebCore::ScrollingTree::updateNodesFromStateNode):

        This function takes the ScrollingStateTree's list of removed nodes 
        and removes the corresponding nodes from the ScrollingTree. It will 
        destroy the nodes after removing it as long as it's not the root 
        node. I think it's the safest choice for now to never remove the root 
        node. 
        (WebCore::ScrollingTree::removeDestroyedNodes):

        ScrollingTree now keeps a HashMap mapping ScrollingNodeIDs to 
        ScrollingTreeNodes.
        * page/scrolling/ScrollingTree.h:

        All of the scrolling-related functionality has been moved from this 
        class to new class ScrollingTreeScrollingNode. And some basic tree 
        traversal functionality has been added.
        * page/scrolling/ScrollingTreeNode.cpp:
        (WebCore::ScrollingTreeNode::ScrollingTreeNode):
        (WebCore::ScrollingTreeNode::appendChild):
        (WebCore::ScrollingTreeNode::removeChild):
        * page/scrolling/ScrollingTreeNode.h:
        (WebCore):
        (ScrollingTreeNode):
        (WebCore::ScrollingTreeNode::scrollingNodeID):
        (WebCore::ScrollingTreeNode::setScrollingNodeID):
        (WebCore::ScrollingTreeNode::parent):
        (WebCore::ScrollingTreeNode::setParent):
        (WebCore::ScrollingTreeNode::scrollingTree):

        This class contains all of the scrolling-related work that used to be 
        done in ScrollingTreeNode.
        * page/scrolling/ScrollingTreeScrollingNode.cpp: Added.
        (WebCore):
        (WebCore::ScrollingTreeScrollingNode::ScrollingTreeScrollingNode):
        (WebCore::ScrollingTreeScrollingNode::~ScrollingTreeScrollingNode):
        (WebCore::ScrollingTreeScrollingNode::update):
        * page/scrolling/ScrollingTreeScrollingNode.h: Added.
        (WebCore):
        (ScrollingTreeScrollingNode):
        (WebCore::ScrollingTreeScrollingNode::shouldUpdateScrollLayerPositionOnMainThread):
        (WebCore::ScrollingTreeScrollingNode::viewportRect):
        (WebCore::ScrollingTreeScrollingNode::contentsSize):
        (WebCore::ScrollingTreeScrollingNode::horizontalScrollElasticity):
        (WebCore::ScrollingTreeScrollingNode::verticalScrollElasticity):
        (WebCore::ScrollingTreeScrollingNode::hasEnabledHorizontalScrollbar):
        (WebCore::ScrollingTreeScrollingNode::hasEnabledVerticalScrollbar):
        (WebCore::ScrollingTreeScrollingNode::canHaveScrollbars):
        (WebCore::ScrollingTreeScrollingNode::scrollOrigin):

        I noticed this whitespace error and had to fix it.
        * page/scrolling/mac/ScrollingCoordinatorMac.mm:
        (WebCore::ScrollingCoordinatorMac::detachFromStateTree):

        Include ScrollingTreeScrollingNodeMac.h instead of 
        ScrollingTreeNodeMac.h
        * page/scrolling/mac/ScrollingTreeMac.mm:

        This class was just re-named.
        * page/scrolling/mac/ScrollingTreeNodeMac.h: Removed.
        * page/scrolling/mac/ScrollingTreeNodeMac.mm: Removed.
        * page/scrolling/mac/ScrollingTreeScrollingNodeMac.h: Copied from page/scrolling/mac/ScrollingTreeNodeMac.h.
        (ScrollingTreeScrollingNodeMac):
        * page/scrolling/mac/ScrollingTreeScrollingNodeMac.mm: Copied from page/scrolling/mac/ScrollingTreeNodeMac.mm.
        (WebCore::ScrollingTreeScrollingNode::create):
        (WebCore::ScrollingTreeScrollingNodeMac::ScrollingTreeScrollingNodeMac):
        (WebCore::ScrollingTreeScrollingNodeMac::~ScrollingTreeScrollingNodeMac):
        (WebCore::ScrollingTreeScrollingNodeMac::update):
        (WebCore::ScrollingTreeScrollingNodeMac::handleWheelEvent):
        (WebCore::ScrollingTreeScrollingNodeMac::allowsHorizontalStretching):
        (WebCore::ScrollingTreeScrollingNodeMac::allowsVerticalStretching):
        (WebCore::ScrollingTreeScrollingNodeMac::stretchAmount):
        (WebCore::ScrollingTreeScrollingNodeMac::pinnedInDirection):
        (WebCore::ScrollingTreeScrollingNodeMac::canScrollHorizontally):
        (WebCore::ScrollingTreeScrollingNodeMac::canScrollVertically):
        (WebCore::ScrollingTreeScrollingNodeMac::shouldRubberBandInDirection):
        (WebCore::ScrollingTreeScrollingNodeMac::absoluteScrollPosition):
        (WebCore::ScrollingTreeScrollingNodeMac::immediateScrollBy):
        (WebCore::ScrollingTreeScrollingNodeMac::immediateScrollByWithoutContentEdgeConstraints):
        (WebCore::ScrollingTreeScrollingNodeMac::startSnapRubberbandTimer):
        (WebCore::ScrollingTreeScrollingNodeMac::stopSnapRubberbandTimer):
        (WebCore::ScrollingTreeScrollingNodeMac::scrollPosition):
        (WebCore::ScrollingTreeScrollingNodeMac::setScrollPosition):
        (WebCore::ScrollingTreeScrollingNodeMac::setScrollPositionWithoutContentEdgeConstraints):
        (WebCore::ScrollingTreeScrollingNodeMac::setScrollLayerPosition):
        (WebCore::ScrollingTreeScrollingNodeMac::minimumScrollPosition):
        (WebCore::ScrollingTreeScrollingNodeMac::maximumScrollPosition):
        (WebCore::ScrollingTreeScrollingNodeMac::scrollBy):
        (WebCore::ScrollingTreeScrollingNodeMac::scrollByWithoutContentEdgeConstraints):
        (WebCore::ScrollingTreeScrollingNodeMac::updateMainFramePinState):
        (WebCore::ScrollingTreeScrollingNodeMac::logExposedUnfilledArea):

2012-10-16  Simon Fraser  <simon.fraser@apple.com>

        Add a new layer type for the page tiled cache layer
        https://bugs.webkit.org/show_bug.cgi?id=99491

        Reviewed by Dean Jackson.

        In preparation for using tile cache layers in place of CATiledLayer,
        add a new PlatformCALayer layer type LayerTypePageTileCacheLayer,
        since the page tile cache will have some different behavior from
        other tile cache layers.
        
        Generalize code that was looking at LayerTypeTileCacheLayer to use
        usesTileCacheLayer() if it applies to both types of tile caches.

        * platform/graphics/ca/GraphicsLayerCA.cpp:
        (WebCore::GraphicsLayerCA::GraphicsLayerCA):
        (WebCore::GraphicsLayerCA::recursiveCommitChanges): Show the tile
        wash for tiled layers as well as layers with transforms (the tile
        wash is just for debugging).
        (WebCore::GraphicsLayerCA::platformCALayerDidCreateTiles):
        (WebCore::GraphicsLayerCA::swapFromOrToTiledLayer):
        * platform/graphics/ca/PlatformCALayer.h:
        (WebCore::PlatformCALayer::usesTileCacheLayer):
        (PlatformCALayer):
        * platform/graphics/ca/mac/PlatformCALayerMac.mm:
        (PlatformCALayer::PlatformCALayer):
        (PlatformCALayer::~PlatformCALayer):
        (PlatformCALayer::tiledBacking):
        * platform/graphics/mac/WebLayer.mm:
        (drawLayerContents): Avoid double-drawing the repaint counter in tile cache layers.

2012-10-16  Stephen Chenney  <schenney@chromium.org> 
        An feImage that tries to render itself should be stopped
        https://bugs.webkit.org/show_bug.cgi?id=94652

        Reviewed by Eric Seidel.

        An SVG feImage filter element will accept, as the src to render, an
        SVG document that makes use of the feImage itself. This causes the
        feImage to try to draw itself while already in the process of drawing
        itself. Various problems arise from this. The invariant we wish to
        maintain is that no element in the src tree of an feImage element
        refers to that feImage.

        This patch adds a flag to all FilterData objects that tracks whether or
        not the filter is currently applying itself, and avoids applying the
        filter recursively.

        While it may seem better to catch this problem when the src is set, or
        when the filter is built, that turns out to be challenging and
        inefficient. Say we choose to test when the src atttribute is set. To
        do so would require looking through all of the DOM nodes that will be
        rendered for the src, finding all resources used, and checking if any
        of them make use fo the feImage element that we are setting the source
        for. The infrastructure is not in place to do that, and it would
        involve walking a potentially very large portion of the DOM in order
        to detect a very rare situation. Note that it is not enough just to
        walk the DOM directly under the src; we also need to recursively follow any
        resource links to see if they use the feImage (e.g. patterns or
        masks or use or ...).

        If we instead try to use the renderer node to find self referencing,
        we need to recursively walk a potentially very large render tree,
        tracing all resources in search of the feImage. This would need to be
        done every time the filter is built, which is again a significant
        overhead for a situation that is very unlikely to occur. And we do not
        have methods that make it easy to find feImage filter effect nodes; they are
        hidden behind filter resource nodes.

        Hence the runtime check to catch the problem. The check must be in
        FilterData and RenderSVGResourceFilter code because we must prevent
        the destruction of the feImage when we encounter it recursively.

        This patch also renames FilterData::builded to FilterData::isBuilt.

        Test: svg/filters/feImage-self-referencing.html

        * rendering/svg/RenderSVGResourceFilter.cpp:
        (WebCore::ApplyingFilterEffectGuard): Guard to ensure that, in the future, we always
        clear the isApplying flag even if the postApplyResource method returns early.
        (WebCore::RenderSVGResourceFilter::applyResource): Do not apply a resource that is already applying and
        rename builded to isBuilt.
        (WebCore::RenderSVGResourceFilter::postApplyResource): Mark a resource as applying and clear after
        it is done. Abort if a resource is already applying when the method begins. Rename builded to isBuilt.
        (WebCore::RenderSVGResourceFilter::primitiveAttributeChanged): Rename builded to isBuilt.
        * rendering/svg/RenderSVGResourceFilter.h:
        (WebCore::FilterData::FilterData):
        (FilterData): Add isApplying and rename builded to isBuilt.

2012-10-16  Nate Chapin  <japhet@chromium.org>

        sendResourceLoadCallbacks() is poorly named
        https://bugs.webkit.org/show_bug.cgi?id=99482

        Reviewed by Alexey Proskuryakov.

        In both CachedResource and ResourceLoader, rename sendResourceLoadCallbacks()
        to shouldSendResourceLoadCallbacks() to better indicate that it is a simple getter.

        No new tests, simple renaming.

        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::loadedResourceFromMemoryCache):
        * loader/ResourceLoader.h:
        (WebCore::ResourceLoader::shouldSendResourceLoadCallbacks):
        * loader/cache/CachedResource.h:
        (WebCore::CachedResource::shouldSendResourceLoadCallbacks):

2012-10-16  Chris Rogers  <crogers@google.com>

        Rename some AudioNodes
        https://bugs.webkit.org/show_bug.cgi?id=99358

        Reviewed by Daniel Bates.

        Here's a list of the node names, showing the changing ones:
            AudioBufferSourceNode
            MediaElementAudioSourceNode
            MediaStreamAudioSourceNode
            JavaScriptAudioNode ------------> ScriptProcessorNode
            RealtimeAnalyserNode ------------> AnalyserNode
            AudioGainNode ------------> GainNode
            DelayNode
            BiquadFilterNode
            AudioPannerNode ------------> PannerNode
            ConvolverNode
            AudioChannelSplitter ------------> ChannelSplitterNode
            AudioChannelMerger ------------> ChannelMergerNode
            DynamicsCompressorNode
            Oscillator ------------> OscillatorNode

        * CMakeLists.txt:
        * DerivedSources.make:
        * DerivedSources.pri:
        * GNUmakefile.list.am:
        * Modules/webaudio/AnalyserNode.cpp: Renamed from Source/WebCore/Modules/webaudio/RealtimeAnalyserNode.cpp.
        * Modules/webaudio/AnalyserNode.idl: Renamed from Source/WebCore/Modules/webaudio/RealtimeAnalyserNode.idl.
        * Modules/webaudio/AudioBufferSourceNode.cpp:
        (WebCore::AudioBufferSourceNode::setPannerNode):
        * Modules/webaudio/AudioBufferSourceNode.h:
        (AudioBufferSourceNode):
        * Modules/webaudio/AudioContext.cpp:
        (WebCore::AudioContext::createJavaScriptNode):
        (WebCore::AudioContext::createPanner):
        (WebCore::AudioContext::createAnalyser):
        (WebCore::AudioContext::createGainNode):
        (WebCore::AudioContext::createChannelSplitter):
        (WebCore::AudioContext::createChannelMerger):
        (WebCore::AudioContext::createOscillator):
        * Modules/webaudio/AudioContext.h:
        (WebCore):
        (AudioContext):
        * Modules/webaudio/AudioContext.idl:
        * Modules/webaudio/ChannelMergerNode.cpp: Renamed from Source/WebCore/Modules/webaudio/AudioChannelMerger.cpp.
        * Modules/webaudio/ChannelMergerNode.h: Renamed from Source/WebCore/Modules/webaudio/AudioChannelMerger.h.
        (WebCore):
        (ChannelMergerNode):
        * Modules/webaudio/ChannelMergerNode.idl: Renamed from Source/WebCore/Modules/webaudio/AudioChannelMerger.idl.
        * Modules/webaudio/ChannelSplitterNode.cpp: Renamed from Source/WebCore/Modules/webaudio/AudioChannelSplitter.cpp.
        * Modules/webaudio/ChannelSplitterNode.h: Renamed from Source/WebCore/Modules/webaudio/AudioChannelSplitter.h.
        (WebCore):
        (ChannelSplitterNode):
        * Modules/webaudio/ChannelSplitterNode.idl: Renamed from Source/WebCore/Modules/webaudio/AudioChannelSplitter.idl.
        * Modules/webaudio/DOMWindowWebAudio.idl:
        * Modules/webaudio/GainNode.cpp: Renamed from Source/WebCore/Modules/webaudio/AudioGainNode.cpp.
        * Modules/webaudio/GainNode.h: Renamed from Source/WebCore/Modules/webaudio/AudioGainNode.h.
        * Modules/webaudio/GainNode.idl: Renamed from Source/WebCore/Modules/webaudio/AudioGainNode.idl.
        * Modules/webaudio/OscillatorNode.cpp: Renamed from Source/WebCore/Modules/webaudio/Oscillator.cpp.
        * Modules/webaudio/OscillatorNode.h: Renamed from Source/WebCore/Modules/webaudio/Oscillator.h.
        * Modules/webaudio/OscillatorNode.idl: Renamed from Source/WebCore/Modules/webaudio/Oscillator.idl.
        * Modules/webaudio/PannerNode.cpp: Renamed from Source/WebCore/Modules/webaudio/AudioPannerNode.cpp.
        * Modules/webaudio/PannerNode.h: Renamed from Source/WebCore/Modules/webaudio/AudioPannerNode.h.
        (WebCore):
        * Modules/webaudio/PannerNode.idl: Renamed from Source/WebCore/Modules/webaudio/AudioPannerNode.idl.
        * Modules/webaudio/ScriptProcessorNode.cpp: Renamed from Source/WebCore/Modules/webaudio/JavaScriptAudioNode.cpp.
        * Modules/webaudio/ScriptProcessorNode.h: Renamed from Source/WebCore/Modules/webaudio/JavaScriptAudioNode.h.
        (WebCore):
        * Modules/webaudio/ScriptProcessorNode.idl: Renamed from Source/WebCore/Modules/webaudio/JavaScriptAudioNode.idl.
        * Modules/webaudio/WaveTable.cpp:
        (WebCore::WaveTable::createSine):
        (WebCore::WaveTable::createSquare):
        (WebCore::WaveTable::createSawtooth):
        (WebCore::WaveTable::createTriangle):
        (WebCore::WaveTable::generateBasicWaveform):
        * Target.pri:
        * UseJSC.cmake:
        * WebCore.gypi:
        * WebCore.xcodeproj/project.pbxproj:
        * bindings/js/JSScriptProcessorNodeCustom.cpp: Renamed from Source/WebCore/bindings/js/JSJavaScriptAudioNodeCustom.cpp.
        (WebCore):
        (WebCore::JSScriptProcessorNode::visitChildren):
        * dom/EventTarget.h:
        (WebCore):
        * dom/EventTargetFactory.in:

2012-10-16  Noam Rosenthal  <noam.rosenthal@nokia.com>

        [Texmap] Refactor TextureMapperShaderManager to be clearer
        https://bugs.webkit.org/show_bug.cgi?id=86048

        Reviewed by Martin Robinson.

        Previous implementation of TextureMapperShaderManager was very verbose, calling for too
        many casts and ambiguous ownership.
        This refactor does the following:
        1. TextureMapperShaderProgram is one class without subclasses.
        2. Uniform/Attribute accessors are generated by special macros (TEXMAP_DECLARE_...) that
           generate both the C++ access function, as well as the GLSL name of the variable. This
           allows adding/removing variables from a shader without adding broiler-plate code like
           before.

        After this change TextureMapperShaderManager has only one responsibility - dealing with
        TextureMapperGL's built-in shaders and their lifecycle. Preparing filters etc. is done
        in TextureMapperGL.

        This is a refactor without new functionality. It has been verified to not break any existing
        relevant test.

        * platform/graphics/texmap/TextureMapperGL.cpp:
        (WebCore::TextureMapperGL::drawBorder):
        (WebCore::TextureMapperGL::drawQuad):
        (WebCore::TextureMapperGL::drawTextureRectangleARB):
        (WebCore::TextureMapperGL::drawTexture):
        (WebCore::TextureMapperGL::drawTextureWithAntialiasing):
        (WebCore::TextureMapperGL::drawTexturedQuadWithProgram):
        (WebCore::TextureMapperGL::beginClip):
            Use the MACRO-generated uniform accessors.

        (WebCore):
        (WebCore::keyForFilterType):
        (WebCore::getPassesRequiredForFilter):
        (WebCore::gauss):
        (WebCore::gaussianKernel):
        (WebCore::prepareFilterProgram):
        (WebCore::TextureMapperGL::drawFiltered):
        (WebCore::BitmapTextureGL::applyFilters):
            Move the filter logic to TextureMapperGL

        * platform/graphics/texmap/TextureMapperShaderManager.cpp:
        (WebCore::TextureMapperShaderProgram::TextureMapperShaderProgram):
        (WebCore::TextureMapperShaderProgram::getLocation):
        (ShaderSpec):
        (WebCore::ShaderSpec::ShaderSpec):
        (WebCore::getShaderSpec):
        (WebCore::TextureMapperShaderManager::TextureMapperShaderManager):
        (WebCore::TextureMapperShaderManager::~TextureMapperShaderManager):
        (WebCore::TextureMapperShaderManager::getShaderProgram):
        * platform/graphics/texmap/TextureMapperShaderManager.h:
        (WebCore):
        (WebCore::TextureMapperShaderProgram::programID):
        (WebCore::TextureMapperShaderProgram::context):
        (WebCore::TextureMapperShaderProgram::create):
        (TextureMapperShaderProgram):
        (TextureMapperShaderManager):
            See description.

2012-10-16  Nico Weber  <thakis@chromium.org>

        [chromium/mac] Make spelling indicator HighDPI
        https://bugs.webkit.org/show_bug.cgi?id=99417

        Reviewed by Stephen White.

        This is the mac version of http://trac.webkit.org/changeset/130940
        Since the mac and non-mac code are very similar again, merge the two
        code paths again.

        Covered by editing/spelling/(inline-spelling|grammar)-markers-hidpi.html

        * platform/graphics/skia/GraphicsContextSkia.cpp:
        (WebCore::GraphicsContext::drawLineForDocumentMarker):

2012-10-16  Tony Chang  <tony@chromium.org>

        in a column flexbox, input overflows the box when stretched
        https://bugs.webkit.org/show_bug.cgi?id=99273

        Reviewed by Ojan Vafai.

        Fix a bug where we didn't properly subtract padding and border when overriding the child size.
        We didn't see this because of a performance optimization in RenderBox where we stretch children.
        Also apply this performance optimization in new flexbox for form controls.

        Test: css3/flexbox/stretch-input-in-column.html

        * rendering/RenderBox.cpp:
        (WebCore::flexboxChildHasStretchAlignment):
        (WebCore::isStretchingVerticalFlexboxChild):
        (WebCore::RenderBox::sizesLogicalWidthToFitContent): Apply performance optimization to form controls in new flexbox.
        * rendering/RenderFlexibleBox.cpp:
        (WebCore::RenderFlexibleBox::applyStretchAlignmentToChild): Properly subtract border and padding.

2012-10-16  Simon Fraser  <simon.fraser@apple.com>

        REGRESSION (r128787): Fixed position div causes other elements to not update correctly
        https://bugs.webkit.org/show_bug.cgi?id=98579

        Reviewed by Beth Dakin.

        RenderLayers cache repaint rects which are computed relative to the repaint container.
        Repaint containers depend on whether a RenderLayerBacking has its own backing store,
        so if that changes, we need to recompute repaint rects for all descendants.
        
        Test: compositing/repaint/requires-backing-repaint.html

        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::setRequiresOwnBackingStore):

2012-10-16  Zan Dobersek  <zandobersek@gmail.com>

        [GStreamer] GstBuffer ref race in WebKitWebAudioSrcLoop
        https://bugs.webkit.org/show_bug.cgi?id=95833

        Reviewed by Philippe Normand.

        The render bus used in GStreamer's implementation of AudioDestination no longer
        allocates memory for each of its channels. Rather than that, when looping, the
        data is rendered into a channel-specific GstBuffer. Each buffer is then chained
        to the appropriate GstPad, as has been the case before.

        No new tests - there are tests covering this change but they are not yet working
        on the GTK port or any other GStreamer implementation of Web Audio.

        * platform/audio/gstreamer/AudioDestinationGStreamer.cpp:
        (WebCore::AudioDestinationGStreamer::AudioDestinationGStreamer):
        * platform/audio/gstreamer/WebKitWebAudioSourceGStreamer.cpp:
        (_WebKitWebAudioSourcePrivate): Remove an unused member variable.
        (webkit_web_audio_src_init): Remove an unnecessary line.
        (webKitWebAudioSrcConstructed): Ditto.
        (webKitWebAudioSrcLoop):

2012-10-16  Pablo Flouret  <pablof@motorola.com>

        Pre-process CSSGrammar.y before running through bison.
        https://bugs.webkit.org/show_bug.cgi?id=94290

        Reviewed by Tony Chang.

        Running CSSGrammar.y through a preprocessor allows the use of feature
        defines in all places of the yacc file (i.e. not just in C blocks).
        Mostly useful to be able to keep every part of a feature under feature
        flags for self-documenting purposes.

        No new tests, CSSGrammar.y should be generated correctly and everything
        should keep working as before.

        * CMakeLists.txt:
        * DerivedSources.make:
        * DerivedSources.pri:
        * GNUmakefile.am:
            Modify build systems to use makegrammar.pl to generate the .y files
            and run those through bison.

        * WebCore.gyp/WebCore.gyp:
            Add a new action to preprocess the CSSGrammar.y.in file before the
            bison rule is run.

        * WebCore.vcproj/WebCore.vcproj:
        * WebCore.xcodeproj/project.pbxproj:
            Add the new .y.in / .y.includes files.

        * css/CSSGrammar.y.in: Renamed from Source/WebCore/css/CSSGrammar.y.
            Also moved the top declarations section that has includes, defines,
            etc. to its own file. These shouldn't be touched by the first
            pass of the preprocessor. And changed the existing ENABLE(FEATURE)
            ifdefs to ENABLE_FEATURE since the ENABLE() macro is not available
            yet.
        * css/CSSGrammar.y.includes: Added.
            The aforementioned declarations header section. After the .y.in file
            is processed it will be concatenated with this one to make the
            CSSGrammar.y file.

        * css/makegrammar.pl:
            Modify the script to handle .y.in files.

2012-10-16  Raphael Kubo da Costa  <raphael.kubo.da.costa@intel.com>

        Implement testRunner.dumpSelectionRect() in WebKitTestRunner
        https://bugs.webkit.org/show_bug.cgi?id=69545

        Reviewed by Simon Fraser.

        * WebCore.exp.in:

2012-10-16  Allan Sandfeld Jensen  <allan.jensen@digia.com>

        [Qt] Implement fastBoundingPath/boundingPath distinction.
        https://bugs.webkit.org/show_bug.cgi?id=99471

        Reviewed by Noam Rosenthal.

        Tested by existing test: svg/custom/getBBox-path.svg

        * platform/graphics/Path.cpp:
        * platform/graphics/qt/PathQt.cpp:
        (WebCore::Path::fastBoundingRect):
        (WebCore::Path::boundingRect):

2012-10-16  Rob Buis  <rbuis@rim.com>

        [BlackBerry] replace BlackBerry::Platform::log() with BBLOG()
        https://bugs.webkit.org/show_bug.cgi?id=99302

        Reviewed by Yong Li.

        Fix a warning introduced by r131335. Since in release BBLOG is empty, only enable this block in debug builds.

        * platform/graphics/opengl/GraphicsContext3DOpenGLCommon.cpp:
        (WebCore::GraphicsContext3D::compileShader):

2012-10-16  Antoine Quint  <graouts@apple.com>

        Inspector should allow reading the compositing debug settings
        https://bugs.webkit.org/show_bug.cgi?id=99458

        Reviewed by Timothy Hatcher.

        * inspector/Inspector.json:
        * inspector/InspectorPageAgent.cpp:
        (WebCore::InspectorPageAgent::getCompositingBordersVisible):
        * inspector/InspectorPageAgent.h:

2012-10-16  Dan Bernstein  <mitz@apple.com>

        Code to reverse a GlyphBuffer range is repeated in several places
        https://bugs.webkit.org/show_bug.cgi?id=99424

        Reviewed by Adele Peterson.

        * platform/graphics/FontFastPath.cpp:
        (WebCore::Font::getGlyphsAndAdvancesForSimpleText): Replaced for loop with a call to
        GlyphBuffer::reverse.
        * platform/graphics/GlyphBuffer.h:
        (WebCore::GlyphBuffer::reverse): Added. Reverses the given range.
        (WebCore::GlyphBuffer::swap): Made private.
        * platform/graphics/WidthIterator.cpp:
        (WebCore::applyFontTransforms): Replaced for loops with calls to GlyphBuffer::reverse and
        corrected their bounds.
        * platform/graphics/mac/FontComplexTextMac.cpp:
        (WebCore::Font::getGlyphsAndAdvancesForComplexText): Replaced for loop with a call to
        GlyphBuffer::range.

2012-10-16  Nate Chapin  <japhet@chromium.org>

        Re-order CachedRawResource::data() to set m_data earlier
        https://bugs.webkit.org/show_bug.cgi?id=99361

        Reviewed by Adam Barth.

        Currently, we calculate the diff between the data parameter and m_data, call
        dataReceived(), then set m_data to data. If something inside dataReceived()
        tries to access m_data via CachedResource::resourceBuffer(), it will see the
        old data instead of the new data, which seems inconsistent.

        No new tests, as no one appears to try to access m_data within dataReceived() currently.

        * loader/cache/CachedRawResource.cpp:
        (WebCore::CachedRawResource::data):

2012-10-16  Julien Chaffraix  <jchaffraix@webkit.org>

        Fold setCellLogicalWidths logic into RenderTableSection layout
        https://bugs.webkit.org/show_bug.cgi?id=99382

        Reviewed by Eric Seidel.

        setCellLogicalWidths was implemented as a pre-phase to laying out
        the table's sections. This split was artificial as any change in
        the columns' logical width should trigger a sections' relayout, which
        could propagate and mark the cells / rows as needed.

        Merging setCellLogicalWidths into RenderTableSection::layout removes
        an unneeded cells walking and some clunkiness from our implementation.

        Refactoring covered by the existing tests.

        * rendering/RenderTable.cpp:
        (WebCore::RenderTable::RenderTable): Initialize our new boolean.
        (WebCore::RenderTable::layout):
        If m_columnLogicalWidthChanged, we force a relayout on our sections so that the cells and rows
        are marked for layout if there is the logical width change.

        * rendering/RenderTable.h:
        (WebCore::RenderTable):
        Added a new boolean to track if a column logical width changed (m_columnLogicalWidthChanged).

        (WebCore::RenderTable::setColumnPosition):
        If a column position changed, register that our column logical widths changed. This is not
        totally true, so added a comment about when it will be wrong.

        * rendering/RenderTableCell.h:
        * rendering/RenderTableCell.cpp:
        (WebCore::RenderTableCell::setCellLogicalWidth):
        Updated the function to mark the cell and the row for layout. Also changed the argument to
        be an 'int' as this was what was passed in.

        * rendering/RenderTableSection.cpp:
        (WebCore::RenderTableSection::layout):
        * rendering/RenderTableSection.h:
        Removed setCellLogicalWidths and merged the logic into RenderTableSection::layout. We propagate
        the table layout's logical widths first so that rows are marked as needing layout as appropriate.

2012-10-16  Takashi Sakamoto  <tasak@google.com>

        [Meta] [Shadow] contenteditable attribute for distributed nodes.
        https://bugs.webkit.org/show_bug.cgi?id=90017

        Reviewed by Dimitri Glazkov.

        If an element is distributed to an insertion point, the element's
        webkit-user-modify is inherited from its shadow host.

        No new tests, because the existing test: user-modify-inheritance.html
        covers this change.

        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::styleForElement):
        After an element inherits a style from its parent, override user-modify
        by using the shadow host's style if the element is distributed.

2012-10-16  Vsevolod Vlasov  <vsevik@chromium.org>

        Web Inspector: Get rid of (now empty) JavaScriptSource and StyleSource, rename all usages to UISourceCode.
        https://bugs.webkit.org/show_bug.cgi?id=99469

        Reviewed by Pavel Feldman.

        * WebCore.gypi:
        * WebCore.vcproj/WebCore.vcproj:
        * inspector/compile-front-end.py:
        * inspector/front-end/BreakpointManager.js:
        (WebInspector.BreakpointManager.prototype._uiSourceCodeAdded):
        (WebInspector.BreakpointManager.prototype._uiSourceCodeRemoved):
        * inspector/front-end/CompilerScriptMapping.js:
        * inspector/front-end/JavaScriptSource.js: Removed.
        * inspector/front-end/JavaScriptSourceFrame.js:
        (WebInspector.JavaScriptSourceFrame):
        (WebInspector.JavaScriptSourceFrame.prototype.canEditSource):
        (WebInspector.JavaScriptSourceFrame.prototype._onWorkingCopyChanged):
        (WebInspector.JavaScriptSourceFrame.prototype._onWorkingCopyCommitted):
        (WebInspector.JavaScriptSourceFrame.prototype._innerSetContent):
        (WebInspector.JavaScriptSourceFrame.prototype.populateLineGutterContextMenu):
        (WebInspector.JavaScriptSourceFrame.prototype.populateTextAreaContextMenu):
        (WebInspector.JavaScriptSourceFrame.prototype.onTextChanged):
        (WebInspector.JavaScriptSourceFrame.prototype._supportsEnabledBreakpointsWhileEditing):
        (WebInspector.JavaScriptSourceFrame.prototype._restoreBreakpointsAfterEditing):
        (WebInspector.JavaScriptSourceFrame.prototype._breakpointAdded):
        (WebInspector.JavaScriptSourceFrame.prototype._breakpointRemoved):
        (WebInspector.JavaScriptSourceFrame.prototype.onTextEditorContentLoaded):
        (WebInspector.JavaScriptSourceFrame.prototype._handleGutterClick):
        (WebInspector.JavaScriptSourceFrame.prototype._toggleBreakpoint):
        (WebInspector.JavaScriptSourceFrame.prototype._setBreakpoint):
        (WebInspector.JavaScriptSourceFrame.prototype._continueToLine):
        * inspector/front-end/NetworkUISourceCodeProvider.js:
        (WebInspector.NetworkUISourceCodeProvider.prototype._parsedScriptSource):
        (WebInspector.NetworkUISourceCodeProvider.prototype._resourceAdded):
        * inspector/front-end/ResourceScriptMapping.js:
        (WebInspector.ResourceScriptMapping.prototype._getOrCreateTemporaryUISourceCode):
        * inspector/front-end/ScriptSnippetModel.js:
        (WebInspector.ScriptSnippetModel):
        (WebInspector.ScriptSnippetModel.prototype._addScriptSnippet):
        (WebInspector.ScriptSnippetModel.prototype.evaluateScriptSnippet.get var):
        (WebInspector.ScriptSnippetModel.prototype.evaluateScriptSnippet.compileCallback):
        (WebInspector.ScriptSnippetModel.prototype.evaluateScriptSnippet):
        (WebInspector.ScriptSnippetModel.prototype._createUISourceCodeForScript):
        (WebInspector.ScriptSnippetModel.prototype._removeBreakpoints):
        (WebInspector.ScriptSnippetModel.prototype._projectWillReset):
        (WebInspector.SnippetScriptFile):
        (WebInspector.SnippetScriptFile.prototype._workingCopyCommitted):
        (WebInspector.SnippetScriptFile.prototype._workingCopyChanged):
        * inspector/front-end/ScriptsNavigator.js:
        (WebInspector.SnippetsNavigatorView.prototype._handleEvaluateSnippet):
        (WebInspector.SnippetsNavigatorView.prototype._handleRemoveSnippet):
        * inspector/front-end/ScriptsPanel.js:
        (WebInspector.ScriptsPanel.prototype._createSourceFrame):
        (WebInspector.ScriptsPanel.prototype._uiSourceCodeFormatted):
        (WebInspector.ScriptsPanel.prototype._showOutlineDialog):
        (WebInspector.ScriptsPanel.prototype.set _fileRenamed):
        (WebInspector.ScriptsPanel.prototype._snippetCreationRequested.callback):
        (WebInspector.ScriptsPanel.prototype._snippetCreationRequested):
        * inspector/front-end/SnippetJavaScriptSourceFrame.js:
        (WebInspector.SnippetJavaScriptSourceFrame):
        (WebInspector.SnippetJavaScriptSourceFrame.prototype._runButtonClicked):
        * inspector/front-end/StyleSheetOutlineDialog.js:
        (WebInspector.StyleSheetOutlineDialog):
        (WebInspector.StyleSheetOutlineDialog.show):
        (WebInspector.StyleSheetOutlineDialog.prototype.requestItems):
        * inspector/front-end/StyleSource.js: Removed.
        * inspector/front-end/WebKit.qrc:
        * inspector/front-end/inspector.html:

2012-10-15  Jer Noble  <jer.noble@apple.com>

        WebAudio: limit output level to 0db
        https://bugs.webkit.org/show_bug.cgi?id=95792
        <rdar://problem/11966135>

        Reviewed by Chris Rogers.

        Clamp the output buffer data to the range of [-1,1], which limits
        output volume to 0db. This ensures that malicious or poorly-written
        pages will not be able to blow through the system volume limit by
        creating >0db buffers and effects.

        No new tests; added ManualTests/webaudio/limit-level-0db.html.

        Clamp the output vector to values of [-1,1]:
        * platform/audio/mac/AudioDestinationMac.cpp:
        (WebCore::AudioDestinationMac::render):

        Add a VectorMath wrapper for vDSP_clip to provide accelerated vector threshold operations:
        * platform/audio/VectorMath.h:
        * platform/audio/VectorMath.cpp:
        (VectorMath):
        (WebCore::VectorMath::vclip):

2012-10-15  Vsevolod Vlasov  <vsevik@chromium.org>

        Web Inspector: Extract domain specific editing handling logic from UISourceCode (step 2).
        https://bugs.webkit.org/show_bug.cgi?id=99301

        Reviewed by Pavel Feldman.

        StyleFile and ScriptFile now listen for the UISourceCode WorkingCopyChanged/Committed events and process
        them instead of being called explicitly.

        * inspector/front-end/JavaScriptSourceFrame.js:
        (WebInspector.JavaScriptSourceFrame):
        (WebInspector.JavaScriptSourceFrame.prototype.onTextChanged):
        (WebInspector.JavaScriptSourceFrame.prototype._willMergeToVM):
        (WebInspector.JavaScriptSourceFrame.prototype._didMergeToVM):
        (WebInspector.JavaScriptSourceFrame.prototype._willDivergeFromVM):
        (WebInspector.JavaScriptSourceFrame.prototype._didDivergeFromVM):
        (WebInspector.JavaScriptSourceFrame.prototype._muteBreakpointsWhileEditing):
        (WebInspector.JavaScriptSourceFrame.prototype._restoreBreakpointsAfterEditing):
        * inspector/front-end/ResourceScriptMapping.js:
        (WebInspector.ResourceScriptMapping.prototype._hasMergedToVM):
        (WebInspector.ResourceScriptMapping.prototype._hasDivergedFromVM):
        (WebInspector.ResourceScriptMapping.prototype._bindUISourceCodeToScripts):
        (WebInspector.ResourceScriptFile):
        (WebInspector.ResourceScriptFile.prototype._workingCopyCommitted):
        (WebInspector.ResourceScriptFile.prototype._workingCopyChanged):
        * inspector/front-end/ScriptSnippetModel.js:
        (WebInspector.SnippetScriptFile):
        (WebInspector.SnippetScriptFile.prototype._workingCopyCommitted):
        (WebInspector.SnippetScriptFile.prototype._workingCopyChanged):
        * inspector/front-end/StylesSourceMapping.js:
        (WebInspector.StyleFile):
        (WebInspector.StyleFile.prototype._workingCopyCommitted):
        (WebInspector.StyleFile.prototype._workingCopyChanged):
        (WebInspector.StyleFile.prototype._commitIncrementalEdit):
        (WebInspector.StyleFile.prototype._clearIncrementalUpdateTimer):
        (WebInspector.StyleFile.prototype.addRevision):
        (WebInspector.StyleContentBinding.prototype._innerStyleSheetChanged):
        * inspector/front-end/UISourceCode.js:
        (WebInspector.UISourceCode.prototype.setWorkingCopy):
        (WebInspector.UISourceCode.prototype.commitWorkingCopy):

2012-10-16  Alexander Pavlov  <apavlov@chromium.org>

        Web Inspector: [Elements] Double-click to live edit style tags changes text to 'undefined' in some situations
        https://bugs.webkit.org/show_bug.cgi?id=99336

        Reviewed by Vsevolod Vlasov.

        Before editing text nodes, set their textContent to the nodeValue() of the corresponding WebInspector.DOMNode in the UI.
        Drive-by: fix text node editing artifact in the DOM tree.

        * inspector/front-end/ElementsTreeOutline.js:
        (WebInspector.ElementsTreeElement.prototype._startEditingTextNode):
        (WebInspector.ElementsTreeElement.prototype._tagNameEditingCommitted):

2012-10-16  Mike West  <mkwst@chromium.org>

        Web Inspector: Whitelist safe styles for 'console.log('%c...', ...)'.
        https://bugs.webkit.org/show_bug.cgi?id=98945

        Reviewed by Pavel Feldman.

        Support for styling console messages via '%c' landed without any
        parsing of the style information provided. This means that it's fairly
        simple to accidentally or maliciously break the console with cleverly
        styled messages. To mitigate this risk, whitelisting a safe subset of
        CSS seems appropriate.

        As a first pass at a reasonable whitelist, this patch allows
        'background[-*]', 'border[-*]', 'color[-*]', 'font[-*]',
        'margin[-*]', 'padding[-*]', 'text[-*]', '-webkit-background[-*]',
        '-webkit-border[-*]', '-webkit-font[-*]', '-webkit-margin[-*]',
        '-webkit-padding[-*]', and '-webkit-text[-*]'.

        Test: inspector/console/console-format-style-whitelist.html

        * inspector/front-end/ConsoleMessage.js:
        (WebInspector.ConsoleMessageImpl.prototype._formatWithSubstitutionString.styleFormatter):
            Create a buffer element onto which the user-provided styles are
            applied. Whitelisted styles are transfered from the buffer onto
            the actual console message.
        (WebInspector.ConsoleMessageImpl.prototype._formatWithSubstitutionString.isWhitelistedProperty):
             Returns true if the specific style is whitelisted. Expects styles
             in the hyphenated form (that is, '-webkit-padding-start' rather than
             CSSOM's 'webkitPaddingStart').

2012-10-16  Luke Macpherson   <macpherson@chromium.org>

        Handle CSSPropertyOpacity in StyleBuilder.
        https://bugs.webkit.org/show_bug.cgi?id=99418

        Reviewed by Alexis Menard.

        One small step in moving from the huge switch in StyleResolver::applyProperty() to the StyleBuilder approach.

        Covered by many existing tests, for example fast/text/complex-text-opacity.html.

        * css/StyleBuilder.cpp:
        (WebCore::StyleBuilder::StyleBuilder):
        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::applyProperty):

2012-10-16  Kent Tamura  <tkent@chromium.org>

        Fix some appearance glitches of multiple fields input elements
        https://bugs.webkit.org/show_bug.cgi?id=99412

        A follow-up change for r131421.

        * css/themeWin.css:
        (input[type="text"]): Don't reset paddings for date/time types.

2012-10-16  Kenichi Ishibashi  <bashi@chromium.org>

        hb_face_t instances should not depend on FontPlatformData
        https://bugs.webkit.org/show_bug.cgi?id=99430

        Reviewed by Kent Tamura.

        Use platform specific font data (e.g. SkTypeface) to get
        font tables for harfbuzz-ng.

        No new tests. No changes in behavior.

        * platform/graphics/harfbuzz/ng/HarfBuzzNGFaceCairo.cpp:
        (WebCore::harfbuzzCairoGetTable): Takes cairo_scaled_font_t* as userData.
        (WebCore::HarfBuzzNGFace::createFace):
        * platform/graphics/harfbuzz/ng/HarfBuzzNGFaceCoreText.cpp:
        (WebCore::harfbuzzCoreTextGetTable): Takes CGFontRef as userData.
        (WebCore::HarfBuzzNGFace::createFace):
        * platform/graphics/harfbuzz/ng/HarfBuzzNGFaceSkia.cpp:
        (WebCore::harfbuzzSkiaGetTable): Takes SkFontID as userData.
        (WebCore::HarfBuzzNGFace::createFace):

2012-10-16  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r131418.
        http://trac.webkit.org/changeset/131418
        https://bugs.webkit.org/show_bug.cgi?id=99431

        since 131403 seems innocent (Requested by shinyak|_ on
        #webkit).

        * dom/Document.cpp:
        (WebCore::isValidNameNonASCII):
        (WebCore):
        (WebCore::Document::isValidName):

2012-10-16  Ilya Tikhonovsky  <loislo@chromium.org>

        Web Inspector: NMI Instrument InspectorOverlay. It costs us ~9Mb because it creates page size canvas.
        https://bugs.webkit.org/show_bug.cgi?id=99426

        Reviewed by Yury Semikhatsky.

        New object type InspectorOverlay was added. InspectorOverlay was instrumented.
        The instrumentation code automatically visits all the objects that can be reached via m_overlayPage.

        * dom/WebCoreMemoryInstrumentation.cpp:
        (WebCore):
        * dom/WebCoreMemoryInstrumentation.h:
        (WebCoreMemoryTypes):
        * inspector/InspectorOverlay.cpp:
        (WebCore::InspectorOverlay::reportMemoryUsage):
        (WebCore):
        * inspector/InspectorOverlay.h:
        (InspectorOverlay):

2012-10-16  Kent Tamura  <tkent@chromium.org>

        Remove unused functions in Locale* classes
        https://bugs.webkit.org/show_bug.cgi?id=99425

        Reviewed by Yuta Kitamura.

        Locale*::currentLocale has been unused since LocalizedDate* and
        LocalizedNumber* were removed.

        No new tests. This shouldn't change any behavior.

        * platform/text/LocaleICU.cpp: Remove createForCurrentLocale and currentLocale.
        * platform/text/LocaleICU.h: Ditto.
        * platform/text/LocaleWin.cpp: Remove currentLocale.
        * platform/text/LocaleWin.h: Ditto.
        * platform/text/mac/LocaleMac.h: Remove currentLocale.
        * platform/text/mac/LocaleMac.mm: Ditto.

2012-10-15  Kent Tamura  <tkent@chromium.org>

        Fix some appearance glitches of multiple fields input elements
        https://bugs.webkit.org/show_bug.cgi?id=99412

        Reviewed by Kentaro Hara.

        1. If CSS-specified width is wider than the intrinsic width of an input,
        the spin button and the picker indicator triangle should be put at the
        right side of the content area.

        2. Remove top, right, and bottom paddings to match input[type=number]
        appearance as possible.

        3. Remove unnecessary position:relative for spin buttons.

        4. Center content vertically if the height is taller than the intrinsic height.

        Tests: Update all of rendering tests for input element with multiple fields UI.

        * css/html.css:
        (input[type="date"]):
        - Specify display:-webkit-inline-flex and -webkit-align-items:stretch to center contents.
        - Remove top/right/bottom paddings.
        (input[type="datetime"]): Ditto.
        (input[type="datetime-local"]): Ditto.
        (input[type="month"]): Ditto.
        (input[type="time"]): Ditto.
        (input[type="week"]): Ditto.
        (input::-webkit-datetime-edit):
        - Switch to the starndard flexible box from the legacy one.
        - Add white-space:pre to avoid to collapse white spaces.
        (input::-webkit-datetime-edit-gap):
        Added. This element is added to push a spin button to the right side.
        (input::-webkit-date-and-time-container):
        Add -webkit-flex:1 for the input flexible box.
        Sort properties.
        (input[type="week"]::-webkit-inner-spin-button):
        - Use this in date, datetime, datetime-local, and week types.
        - Add display:inline-block because other elements in -webkit-datetime-edit is inilne.
        - Add position:static to cancel position:relative below.

        * html/shadow/DateTimeEditElement.cpp:
        (WebCore::DateTimeEditElement::layout):
        Add an element with -webkit-datetime-edit-gap before a spin button.

2012-10-15  Yury Semikhatsky  <yurys@chromium.org>

        Web Inspector: can't click delete button if watch expression is very long
        https://bugs.webkit.org/show_bug.cgi?id=99414

        Reviewed by Vsevolod Vlasov.

        Minus button in watch expression section doesn't overlap with the
        expression/value anymore.

        * inspector/front-end/inspector.css:
        (.properties-tree.watch-expressions > li.hovered):

2012-10-15  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r131403.
        http://trac.webkit.org/changeset/131403
        https://bugs.webkit.org/show_bug.cgi?id=99420

        Suspicious to cause Performance test failing (Requested by
        shinyak|gardenin on #webkit).

        * dom/Document.cpp:
        (WebCore::Document::isValidName):

2012-10-15  Yury Semikhatsky  <yurys@chromium.org>

        Web Inspector: restore watch expression expansion state
        https://bugs.webkit.org/show_bug.cgi?id=99304

        Reviewed by Pavel Feldman.

        Expand watch expression value and its properties if they were expanded
        before update.

        Test: inspector/debugger/watch-expressions-preserve-expansion.html

        * inspector/front-end/WatchExpressionsSidebarPane.js:
        (WebInspector.WatchExpressionTreeElement.prototype.onexpand):
        (WebInspector.WatchExpressionTreeElement.prototype.oncollapse):
        (WebInspector.WatchExpressionTreeElement.prototype.onattach):
        (WebInspector.WatchExpressionTreeElement.prototype._expression):
        (WebInspector.WatchedPropertyTreeElement):
        (WebInspector.WatchedPropertyTreeElement.prototype.onattach):
        (WebInspector.WatchedPropertyTreeElement.prototype.onexpand):
        (WebInspector.WatchedPropertyTreeElement.prototype.oncollapse):
        (WebInspector.WatchedPropertyTreeElement.prototype._propertyPath):

2012-10-15  Mike West  <mkwst@chromium.org>

        Warn when CSP headers don't separate directives with ';'.
        https://bugs.webkit.org/show_bug.cgi?id=99274

        Reviewed by Adam Barth.

        A recent bug report exhibited confusion as to what role, exactly,
        semicolons play in Content Security Policy definitions. This patch
        adjusts the parser to warn web authors if a directive name is
        encountered while parsing a source list, which would almost certainly
        point to a missing semicolon. For example, something like:

            script-src 'self' object-src 'self' style-src *

        would throw two warnings, noting that 'object-src' and 'style-src' are
        probably meant as directives, and not as source expressions in the
        'script-src' source list.

        Test: http/tests/security/contentSecurityPolicy/source-list-parsing-no-semicolon.html

        * page/ContentSecurityPolicy.cpp:
        (WebCore::CSPSourceList::parse):
            Throw the new warning onto the console if the hostname of a source
            expression matches a CSP directive name.
        (WebCore::CSPDirectiveList::addDirective):
            Use the exciting new static variables so that the names of various
            directives are available outside of CSPDirectiveList::addDirective.
            These were previously defined as local static ASCIILiterals. Now
            they're static const char[] in an anonymous namespace.
        (WebCore::ContentSecurityPolicy::isDirectiveName):
            Static method that compares a string to all the known directive
            names, returning true if there's a (case-insensitive) match.
        (WebCore):
        (WebCore::ContentSecurityPolicy::reportDirectiveAsSourceExpression):
            A new warning message which should be printed when a directive name
            is encountered as a source expression. Matching the directive name
            is done via a new 'isDirectiveName' function which lives in an
            anonymous namespace along with the other CSP helper functions.
        * page/ContentSecurityPolicy.h:
            Added 'reportDirectiveAsSourceExpression' signature.

2012-10-15  Gyuyoung Kim  <gyuyoung.kim@samsung.com>

        Unreviewed, rolling out r131349.
        http://trac.webkit.org/changeset/131349
        https://bugs.webkit.org/show_bug.cgi?id=97173

        Revert r131349 because API test is broken by this commit.

        * platform/efl/RunLoopEfl.cpp:
        (WebCore::RunLoop::RunLoop):
        (WebCore::RunLoop::~RunLoop):

2012-10-15  Nate Chapin  <japhet@chromium.org>

        ResourceLoader::sendResourceLoadCallbacks() is backwards
        https://bugs.webkit.org/show_bug.cgi?id=99366

        Reviewed by Daniel Bates.

        No new tests, this function is uncalled but will be used
        in a later patch.

        * loader/ResourceLoader.h:
        (WebCore::ResourceLoader::sendResourceLoadCallbacks):

2012-10-15  Dan Bernstein  <mitz@apple.com>

        REGRESSION (r131365): WidthIterator::advance() is needlessly passed a GlyphBuffer in many cases
        https://bugs.webkit.org/show_bug.cgi?id=99413

        Reviewed by Adele Peterson.

        r131365 made Font::width() always pass a GlyphBuffer pointer to floatWidthForSimpleText and
        from there down to WidthIterator::advance(). However, when measuring the width of a run, a
        GlyphBuffer is only needed if font transforms (kerning and ligatures) need to be applied.

        No new test, because there is no change in behavior.

        * platform/graphics/Font.cpp:
        (WebCore::Font::width): Removed the local GlyphBuffer that was passed down to
        floatWidthForSimpleText().
        * platform/graphics/Font.h: Removed the GlyphBuffer* parameter to floatWidthForSimpleText.
        All but the above caller were passing 0.
        * platform/graphics/FontFastPath.cpp:
        (WebCore::Font::floatWidthForSimpleText): Removed the GlyphBuffer* parameter and added a
        local GlyphBuffer, which is passed by reference to WidthIterator::advance() only if
        typesetting features require it.
        (WebCore::Font::offsetForPositionForSimpleText): Updated for change to
        floatWidthForSimpleText.
        * platform/graphics/pango/FontPango.cpp:
        (WebCore::Font::floatWidthForComplexText): Ditto.

2012-10-15  Pablo Flouret  <pablof@motorola.com>

        Add force parameter to DOMTokenList.toggle
        https://bugs.webkit.org/show_bug.cgi?id=99375

        Reviewed by Darin Adler.

        See http://dom.spec.whatwg.org/#dom-domtokenlist-toggle and
        https://www.w3.org/Bugs/Public/show_bug.cgi?id=18463

        Essentially, the optional boolean force parameter, if present, makes
        toggle always add or remove a class.

        No new tests, modified fast/dom/HTMLElement/script-tests/class-list.js

        * html/DOMTokenList.cpp:
        (WebCore::DOMTokenList::toggle):
        (WebCore):
        * html/DOMTokenList.h:
        (DOMTokenList):
        * html/DOMTokenList.idl:
            New toggle() overload that takes a force parameter and calls
            addInternal() or removeInternal() based on it.

2012-10-15  Dan Bernstein  <mitz@apple.com>

        Layout Test fast/text/justify-ideograph-leading-expansion.html is failing an assertion chromium mac
        https://bugs.webkit.org/show_bug.cgi?id=99406

        Reviewed by Darin Adler.

        * platform/graphics/WidthIterator.cpp:
        * platform/graphics/WidthIterator.h:
        (WebCore::WidthIterator::shouldApplyFontTransforms): Changed to return false if the run is
        shorter than 2 characters. 1-character runs are invariant under font transforms, and therefore
        Font::codePath() sends them through WidthIterator even on platforms where WidthIterator
        does not support kerning and ligatures.

2012-10-15  Michael Saboff  <msaboff@apple.com>

        Add 8 bit patch to Document::isValidName() for the non ASCII case
        https://bugs.webkit.org/show_bug.cgi?id=99402

        Reviewed by Darin Adler.

        Added 8 bit path to complete the processing of an 8 bit names without up-converting.

        * dom/Document.cpp:
        (WebCore::isValidNameNonASCII):
        (WebCore::Document::isValidName):

2012-10-15  Vlad Grecescu  <igrecesc@adobe.com>, Douglas Stockwell  <dstockwell@chromium.org>

        Support for background-clip:content-box and padding-box with border-radius
        https://bugs.webkit.org/show_bug.cgi?id=23166

        Reviewed by Simon Fraser.

        Test: fast/css/background-clip-radius-values.html

        * rendering/RenderBoxModelObject.cpp:
        (WebCore::RenderBoxModelObject::clipRoundedInnerRect):
        (WebCore):
        (WebCore::RenderBoxModelObject::paintFillLayerExtended):
        * rendering/RenderBoxModelObject.h:

2012-10-15  Byungwoo Lee  <bw80.lee@samsung.com>

        Fix unused parameter build warning.
        https://bugs.webkit.org/show_bug.cgi?id=99400

        Reviewed by Gyuyoung Kim.

        Remove the name of unused parameters to fix the build warning (-Wunused-parameter).

        * platform/network/soup/ResourceErrorSoup.cpp:
        (WebCore::ResourceError::tlsError):

2012-10-15  Kenichi Ishibashi  <bashi@chromium.org>

        [WebSocket] WebSocketInflater should handle BFINAL = 1 blocks
        https://bugs.webkit.org/show_bug.cgi?id=99282

        Reviewed by Yuta Kitamura.

        Reset decompression state if WebSocketInflater decompress a block with
        BFINAL set to 1.

        Test: http/tests/websocket/tests/hybi/deflate-frame-set-bfinal.html

        * Modules/websockets/WebSocketDeflater.cpp:
        (WebCore::WebSocketInflater::addBytes):
        Reset decompression state if inflate() returns Z_STREAM_END, which means the BFINAL
        of the current block was set to 1.
        (WebCore::WebSocketInflater::finish): Add an assertion.

2012-10-15  Simon Fraser  <simon.fraser@apple.com>

        Fix GraphicsLayer visible rect computation when scrolling in WebKit1
        https://bugs.webkit.org/show_bug.cgi?id=99385

        Reviewed by Dean Jackson, Tim Horton.

        RenderLayerCompositor always used frameView->frameRect() as the visible
        rect on the root used for GraphicsLayer visibleRect computation. This
        was wrong for subframes, which require a rect with an origin of (0,0)
        and size of the contentsSize().
        
        It was also wrong when the scrolling is not represented in the GraphicsLayer
        tree. When scrolling is done elsewhere, we need to use the ScrollView's
        visibleContentRect().

        Tests: compositing/visible-rect/scrolled.html
               compositing/visible-rect/iframe-and-layers.html
               compositing/visible-rect/iframe-no-layers.html

        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::flushPendingLayerChanges):

2012-10-15  Julien Chaffraix  <jchaffraix@webkit.org>

        Remove page visibility hidden histograms
        https://bugs.webkit.org/show_bug.cgi?id=99360

        Reviewed by Ojan Vafai.

        The 2 page visibility hidden histograms were added in http://webkit.org/b/85537 to
        investigate a potential optimization where we would destroy the render tree when
        a tab was hidden. The optimization was abandoned but the histograms were never
        removed. They are too narrow to be reused so this change removes them.

        * page/Page.cpp:
        (WebCore::Page::setVisibilityState):

2012-10-15  Ryuan Choi  <ryuan.choi@samsung.com>

        REGRESSION: Build break after r131373 when ACCELERATED_COMPOSITING disabled
        https://bugs.webkit.org/show_bug.cgi?id=99397

        Unreviewed, build fix.

        * page/scrolling/ScrollingCoordinator.cpp:
        (WebCore::ScrollingCoordinator::updateMainFrameScrollPosition):

2012-10-14  Kent Tamura  <tkent@chromium.org>

        Input elements with multiple fields UI should set appropriate direction for browser locale automatically
        https://bugs.webkit.org/show_bug.cgi?id=99291

        Reviewed by Hajime Morita.

        Input elemnts with multiple fields UI ignores HTML dir attribute or CSS
        direction property, and their direction should be decided by the browser
        locale. If the browser locale is a RTL language, date/time input fields
        show formats/digits for the RTL language. The layout should be always
        RTL regardless of the direction in such case.

        Test: fast/forms/date-multiple-fields/date-multiple-fields-appearance-l10n.html

        * html/BaseMultipleFieldsDateAndTimeInputType.cpp:
        (WebCore::BaseMultipleFieldsDateAndTimeInputType::updateInnerTextValue):
        Set approriate dir attribute value to the child element of the UA shadow root.

2012-10-15  Andreas Kling  <kling@webkit.org>

        StyleResolver: Garbage collect the matched properties cache on a timer.
        <http://webkit.org/b/98625>

        Reviewed by Eric Seidel.

        Sweeping the matched properties cache once every 100 additions ended up choking RoboHornet's
        svgresize.html benchmark. Move it to a single-shot timer that's refreshed every 100 additions
        and defers the actual sweep for 60 seconds.

        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::StyleResolver):
        (WebCore::StyleResolver::sweepMatchedPropertiesCache):
        (WebCore::StyleResolver::addToMatchedPropertiesCache):
        * css/StyleResolver.h:
        (StyleResolver):

2012-10-15  Arnaud Renevier  <a.renevier@sisa.samsung.com>

        [GStreamer] GstCaps are leaked when building with gstreamer-1.0
        https://bugs.webkit.org/show_bug.cgi?id=99362

        Reviewed by Martin Robinson.

        Implement GRefPtr<GstCaps> adoptGRef(GstCaps*).

        Change webkitGstGetPadCaps signature to return a GRefPtr<GstCaps>, and
        use GRefPtr<GstCaps> also in webkitVideoSinkRender to simply GstCaps
        refeference count.

        Covered by existing tests.

        * platform/graphics/gstreamer/GRefPtrGStreamer.cpp:
        (WTF::adoptGRef):
        (WTF):
        * platform/graphics/gstreamer/GRefPtrGStreamer.h:
        (WTF):
        * platform/graphics/gstreamer/GStreamerVersioning.cpp:
        (webkitGstGetPadCaps):
        * platform/graphics/gstreamer/GStreamerVersioning.h:
        * platform/graphics/gstreamer/MediaPlayerPrivateGStreamer.cpp:
        (WebCore::MediaPlayerPrivateGStreamer::naturalSize):
        * platform/graphics/gstreamer/VideoSinkGStreamer.cpp:
        (webkitVideoSinkRender):

2012-10-15  Tony Chang  <tony@chromium.org>

        Unreviewed, rolling out r131367.
        http://trac.webkit.org/changeset/131367
        https://bugs.webkit.org/show_bug.cgi?id=98666

        crashes on Apple Mac

        * css/html.css:
        (input[type="range"]::-webkit-slider-container, input[type="range"]::-webkit-media-slider-container):
        (input[type="range"]::-webkit-slider-runnable-track):
        (input[type="range"]::-webkit-slider-thumb, input[type="range"]::-webkit-media-slider-thumb):
        * css/mediaControlsChromium.css:
        (input[type="range"]::-webkit-media-slider-thumb):
        * css/mediaControlsChromiumAndroid.css:
        (input[type="range"]::-webkit-media-slider-thumb):
        * html/RangeInputType.cpp:
        (WebCore::RangeInputType::listAttributeTargetChanged):
        * html/shadow/SliderThumbElement.cpp:
        (WebCore::RenderSliderThumb::layout):
        (WebCore):
        (WebCore::RenderSliderContainer::RenderSliderContainer):
        (RenderSliderContainer):
        (WebCore::RenderSliderContainer::layout):
        * html/shadow/SliderThumbElement.h:
        (RenderSliderThumb):
        * rendering/RenderSlider.cpp:
        (WebCore):
        (WebCore::RenderSlider::RenderSlider):
        (WebCore::RenderSlider::layout):
        * rendering/RenderSlider.h:
        (WebCore):
        (RenderSlider):
        (WebCore::RenderSlider::renderName):
        (WebCore::RenderSlider::isSlider):
        (WebCore::RenderSlider::requiresForcedStyleRecalcPropagation):
        (WebCore::toRenderSlider):

2012-10-15  Dan Bernstein  <mitz@apple.com>

        Try to fix the build again after r131375.

        * platform/graphics/WidthIterator.h:
        (WebCore::WidthIterator::shouldApplyFontTransforms): Removed the length check from here.

2012-10-15  Dan Bernstein  <mitz@apple.com>

        Try to fix assertion failures on ports that do not support kerning and ligatures on the fast
        code path after r131365.

        * platform/graphics/WidthIterator.cpp:
        (WebCore::applyFontTransforms): Changed the early return condition to not bother with 1-glyph
        sequences.
        * platform/graphics/WidthIterator.h:
        (WebCore::WidthIterator::shouldApplyFontTransforms): Changed to return false if the run is
        shorter than 2 characters.

2012-10-15  Dan Bernstein  <mitz@apple.com>

        Try to fix the Chromium Mac build after r131365.

        * platform/graphics/GlyphBuffer.h:
        (WebCore::GlyphBufferAdvance::height): Added.
        * platform/graphics/skia/FontSkia.cpp:
        (WebCore::Font::drawGlyphs): Changed to use accessors for the GlyphBufferAdvance’s width and height.

2012-10-15  Simon Fraser  <simon.fraser@apple.com>

        Ensure that GraphicsLayer positions are updated while doing threaded scrolling
        https://bugs.webkit.org/show_bug.cgi?id=99372

        Reviewed by Anders Carlsson.

        When doing threaded scrolling, the scrolling thread updates the positions of CALayers,
        but doesn't update GraphicsLayers. This means that code that relies on GraphicsLayer positions
        works incorrectly.
        
        Threaded scrolling is not testabled in layout tests.

        * page/scrolling/ScrollingCoordinator.cpp:
        (WebCore::ScrollingCoordinator::updateMainFrameScrollPosition):
        * platform/graphics/GraphicsLayer.h:
        (GraphicsLayer):
        (WebCore::GraphicsLayer::syncPosition):

2012-10-15  Tommy Widenflycht  <tommyw@google.com>

        MediaStream API: Implement RTCDataChannel
        https://bugs.webkit.org/show_bug.cgi?id=99080

        Reviewed by Adam Barth.

        This patch introduces RTCDataChannel which is a pipe for sending data between two RTCPeerConnections.
        Since the data channel belongs to a peer connection object I have reused part of its infrastructure.

        Not currently testable. My next patch will add the chromium WebKit functionality, together with mocks and tests.

        * CMakeLists.txt:
        * GNUmakefile.list.am:
        * Modules/mediastream/RTCDataChannel.cpp: Added.
        (WebCore):
        (WebCore::RTCDataChannel::create):
        (WebCore::RTCDataChannel::RTCDataChannel):
        (WebCore::RTCDataChannel::~RTCDataChannel):
        (WebCore::RTCDataChannel::label):
        (WebCore::RTCDataChannel::reliable):
        (WebCore::RTCDataChannel::readyState):
        (WebCore::RTCDataChannel::bufferedAmount):
        (WebCore::RTCDataChannel::binaryType):
        (WebCore::RTCDataChannel::setBinaryType):
        (WebCore::RTCDataChannel::send):
        (WebCore::RTCDataChannel::close):
        (WebCore::RTCDataChannel::readyStateChanged):
        (WebCore::RTCDataChannel::dataArrived):
        (WebCore::RTCDataChannel::error):
        (WebCore::RTCDataChannel::descriptor):
        (WebCore::RTCDataChannel::interfaceName):
        (WebCore::RTCDataChannel::scriptExecutionContext):
        (WebCore::RTCDataChannel::stop):
        (WebCore::RTCDataChannel::eventTargetData):
        (WebCore::RTCDataChannel::ensureEventTargetData):
        * Modules/mediastream/RTCDataChannel.h: Added.
        (WebCore):
        (RTCDataChannel):
        (WebCore::RTCDataChannel::refEventTarget):
        (WebCore::RTCDataChannel::derefEventTarget):
        * Modules/mediastream/RTCDataChannel.idl: Added.
        * Modules/mediastream/RTCDataChannelEvent.cpp: Added.
        (WebCore):
        (WebCore::RTCDataChannelEvent::create):
        (WebCore::RTCDataChannelEvent::RTCDataChannelEvent):
        (WebCore::RTCDataChannelEvent::~RTCDataChannelEvent):
        (WebCore::RTCDataChannelEvent::channel):
        (WebCore::RTCDataChannelEvent::interfaceName):
        * Modules/mediastream/RTCDataChannelEvent.h: Added.
        (WebCore):
        (RTCDataChannelEvent):
        * Modules/mediastream/RTCDataChannelEvent.idl: Added.
        * Modules/mediastream/RTCPeerConnection.cpp:
        (WebCore::RTCPeerConnection::createDataChannel):
        (WebCore):
        (WebCore::RTCPeerConnection::close):
        (WebCore::RTCPeerConnection::didAddRemoteDataChannel):
        (WebCore::RTCPeerConnection::stop):
        * Modules/mediastream/RTCPeerConnection.h:
        (WebCore):
        (RTCPeerConnection):
        * Modules/mediastream/RTCPeerConnection.idl:
        * WebCore.gypi:
        * dom/EventNames.h:
        (WebCore):
        * dom/EventNames.in:
        * dom/EventTargetFactory.in:
        * platform/mediastream/RTCDataChannelDescriptor.cpp: Added.
        (WebCore):
        (WebCore::RTCDataChannelDescriptor::create):
        (WebCore::RTCDataChannelDescriptor::RTCDataChannelDescriptor):
        (WebCore::RTCDataChannelDescriptor::~RTCDataChannelDescriptor):
        (WebCore::RTCDataChannelDescriptor::readyStateChanged):
        (WebCore::RTCDataChannelDescriptor::dataArrived):
        (WebCore::RTCDataChannelDescriptor::error):
        * platform/mediastream/RTCDataChannelDescriptor.h: Added.
        (WebCore):
        (RTCDataChannelDescriptorClient):
        (WebCore::RTCDataChannelDescriptorClient::~RTCDataChannelDescriptorClient):
        (RTCDataChannelDescriptor):
        (ExtraData):
        (WebCore::RTCDataChannelDescriptor::ExtraData::~ExtraData):
        (WebCore::RTCDataChannelDescriptor::client):
        (WebCore::RTCDataChannelDescriptor::setClient):
        (WebCore::RTCDataChannelDescriptor::label):
        (WebCore::RTCDataChannelDescriptor::reliable):
        (WebCore::RTCDataChannelDescriptor::readyState):
        (WebCore::RTCDataChannelDescriptor::bufferedAmount):
        (WebCore::RTCDataChannelDescriptor::setBufferedAmount):
        (WebCore::RTCDataChannelDescriptor::extraData):
        (WebCore::RTCDataChannelDescriptor::setExtraData):
        * platform/mediastream/RTCPeerConnectionHandler.cpp:
        (RTCPeerConnectionHandlerDummy):
        (WebCore::RTCPeerConnectionHandlerDummy::openDataChannel):
        (WebCore):
        (WebCore::RTCPeerConnectionHandlerDummy::sendStringData):
        (WebCore::RTCPeerConnectionHandlerDummy::sendRawData):
        (WebCore::RTCPeerConnectionHandlerDummy::closeDataChannel):
        * platform/mediastream/RTCPeerConnectionHandler.h:
        (WebCore):
        (RTCPeerConnectionHandler):
        * platform/mediastream/RTCPeerConnectionHandlerClient.h:
        (WebCore):
        (RTCPeerConnectionHandlerClient):
        * platform/mediastream/chromium/RTCPeerConnectionHandlerChromium.cpp:
        (WebCore::RTCPeerConnectionHandlerChromium::openDataChannel):
        (WebCore):
        (WebCore::RTCPeerConnectionHandlerChromium::sendStringData):
        (WebCore::RTCPeerConnectionHandlerChromium::sendRawData):
        (WebCore::RTCPeerConnectionHandlerChromium::closeDataChannel):
        * platform/mediastream/chromium/RTCPeerConnectionHandlerChromium.h:
        (RTCPeerConnectionHandlerChromium):

2012-10-15  Joshua Bell  <jsbell@chromium.org>

        IndexedDB: Pass type of error causing abort to IDBTransaction::onAbort
        https://bugs.webkit.org/show_bug.cgi?id=99097

        Reviewed by Tony Chang.

        Include the error causing the abort in the callback from back end to
        front end so it can be exposed on the IDBTransaction.error property.

        Test: lazy-index-population.html

        * Modules/indexeddb/IDBDatabaseBackendImpl.cpp:
        (WebCore::IDBDatabaseBackendImpl::setVersionInternal):
        (WebCore::IDBDatabaseBackendImpl::setIntVersionInternal):
        * Modules/indexeddb/IDBDatabaseCallbacks.h:
        * Modules/indexeddb/IDBObjectStoreBackendImpl.cpp:
        (WebCore::IDBObjectStoreBackendImpl::setIndexKeys):
        (WebCore::IDBObjectStoreBackendImpl::putInternal):
        * Modules/indexeddb/IDBTransaction.cpp:
        (WebCore::IDBTransaction::onAbort):
        * Modules/indexeddb/IDBTransaction.h:
        (IDBTransaction):
        * Modules/indexeddb/IDBTransactionBackendImpl.cpp:
        (WebCore::IDBTransactionBackendImpl::abort):
        (WebCore):
        (WebCore::IDBTransactionBackendImpl::commit):
        * Modules/indexeddb/IDBTransactionBackendImpl.h:
        (IDBTransactionBackendImpl):
        * Modules/indexeddb/IDBTransactionCallbacks.h:
        (IDBTransactionCallbacks):
        * inspector/InspectorIndexedDBAgent.cpp:
        (WebCore):

2012-10-15  Mike Reed  <reed@google.com>

        In Skia's ImageFrame, only set the isOpaque flag when the frame is complete
        https://bugs.webkit.org/show_bug.cgi?id=99326

        Reviewed by Stephen White.

        No new tests -- existing layouttests exercise this, esp. 
          png-partial-load-no-alpha.html
          webp-partial-load.html
        These two fail if skia is told that these are opaque, which it is w/o this CL.

        At the moment, Skia has a hack to ignore the opaque-setting, so that these tests will pass as is.
        This change is to first, correct webkit to only set isOpaque when the frame is complete, so that
        in a later change, Skia can remove the hack, and re-enable its opaqueness optimization.

        * platform/image-decoders/skia/ImageDecoderSkia.cpp:
        (WebCore::ImageFrame::ImageFrame):
        (WebCore::ImageFrame::operator=):
        (WebCore::ImageFrame::zeroFillPixelData):
        (WebCore::ImageFrame::hasAlpha):
        (WebCore::ImageFrame::setHasAlpha):
        (WebCore::ImageFrame::setStatus):

2012-10-12  Tony Chang  <tony@chromium.org>

        input[type=range] as a flex item renders thumb at wrong position
        https://bugs.webkit.org/show_bug.cgi?id=98666

        Reviewed by Ojan Vafai.

        Replace RenderSlider implementation with new flexbox and clean up the shadow DOM.
        The previous code was trying to set the height to 100% and had a bunch of hacks in
        the renderer code to set an explicit height. Using the new flexbox allows us to
        remove these renderer hacks.

        Test: css3/flexbox/flexitem-stretch-range.html

        * css/html.css:
        (input[type="range"]::-webkit-slider-container, input[type="range"]::-webkit-media-slider-container): Use new flexbox.
        (input[type="range"]::-webkit-slider-runnable-track): Use new flexbox.
        (input[type="range"]::-webkit-slider-thumb, input[type="range"]::-webkit-media-slider-thumb): Remove relative positioning since we're
        no longer setting top/left in the layout code.
        * css/mediaControlsChromium.css: Remove redundant styles and bottom: 1px hack.
        * css/mediaControlsChromiumAndroid.css: Remove redundant styles and bottom: 1px hack.
        * html/RangeInputType.cpp:
        (WebCore::RangeInputType::listAttributeTargetChanged): We need to force a layout
        since the height of the control should change when adding/removing a datalist.
        * html/shadow/SliderThumbElement.cpp:
        (WebCore::RenderSliderContainer::RenderSliderContainer): Use new flexbox.
        (WebCore::RenderSliderContainer::computeLogicalHeight): Rather than setting style()->height() in layout, just compute the correct
        height when asked.  If we have a datalist, we increase the height (same code as before).  If we're vertical,
        we use the intrinsic size.
        (WebCore::RenderSliderContainer::layout): Remove extra layout code, but handle the position of the thumb.
        This used to be handled in the thumb's layout method, but I deleted that.
        * html/shadow/SliderThumbElement.h:
        * rendering/RenderSlider.cpp:
        (WebCore::RenderSlider::RenderSlider): Use new flexbox.
        (WebCore::RenderSlider::layout): Set the limiter size to the size of the thumb. This is necessary
        for fast/css/unknown-pseudo-element-matching.html which tries to set the height of the thumb to 1px
        and expects the input to also have a height of 1px.  It worked before because the height of the input
        didn't depend on the height of its children.
        * rendering/RenderSlider.h: Fix indentation.
        (RenderSlider): Use new flexible box.

2012-10-15  Julien Chaffraix  <jchaffraix@webkit.org>

        Make RenderTable columns() and columnPositions() return a const reference
        https://bugs.webkit.org/show_bug.cgi?id=99339

        Reviewed by Abhishek Arya.

        The 2 getters were returning a non-const reference. This means that callers
        could have modified the Vector's where only FixedTableLayout and AutoTableLayout
        were expected to (for columnPositions(), no one should modify columns()).

        Refactoring covered by existing tests.

        * rendering/AutoTableLayout.cpp:
        (WebCore::AutoTableLayout::layout):
        * rendering/FixedTableLayout.cpp:
        (WebCore::FixedTableLayout::layout):
        Updated those functions to use the new setter.

        * rendering/RenderTable.h:
        (WebCore::RenderTable::columns):
        (WebCore::RenderTable::columnPositions):
        Made the 2 functions return a const reference. They are also const now!

        (WebCore::RenderTable::setColumnPosition):
        Added this setter.

        * rendering/RenderTableSection.cpp:
        (WebCore::RenderTableSection::addCell):
        (WebCore::RenderTableSection::setCellLogicalWidths):
        (WebCore::RenderTableSection::dirtiedColumns):
        Updated to use a const reference.

2012-10-15  Dan Bernstein  <mitz@apple.com>

        WebCore part of <rdar://problem/12470680> Font’s fast code path doesn’t support kerning and ligatures
        https://bugs.webkit.org/show_bug.cgi?id=99113

        Reviewed by Tim Horton.

        * WebCore.exp.in: Exported wkCTFontTransformGlyphs.
        * platform/graphics/Font.cpp:
        (WebCore::Font::width): Added a local GlyphBuffer to pass to floatWidthForSimpleText().
        (WebCore::Font::codePath): Rather than always use the complex code path when any typesetting
        features are enabled, changed to do so only if WidthIterator doesn’t support this Font’s
        typesetting features.
        * platform/graphics/FontFastPath.cpp:
        (WebCore::Font::getGlyphsAndAdvancesForSimpleText): Added a local GlyphBuffer to pass to
        WidthIterator::advance() when advancing to or from the range of interest. Added a FIXME
        about how this is not entirely correct when kerning or ligatures are enabled.
        (WebCore::Font::selectionRectForSimpleText): Added a local GlyphBuffer to pass to
        WidthIterator::advance() when advancing to or from the range of interest.
        (WebCore::Font::offsetForPositionForSimpleText): Updated for the change to
        WidthIterator::advanceOneCharacter().
        * platform/graphics/SimpleFontData.h:
        (WebCore::SimpleFontData::applyTransforms): Added. Calls wkCTFontTransformGlyphs() where
        available.
        * platform/graphics/WidthIterator.cpp:
        (WebCore::WidthIterator::WidthIterator): Added initializer for the new m_typesettingFeatures
        data member.
        (OriginalAdvancesForCharacterTreatedAsSpace): Added this data type, used to track spaces and
        characters treated as spaces.
        (WebCore::applyFontTransforms): Added. Applies shaping and positioning transforms, as
        required by the typesetting features, to the glyphs recently added to a GlyphBuffer, while
        maintaining the advances of characters that are treated as spaces and the characters
        preceding them, if necessary.
        (WebCore::WidthIterator::advanceInternal): Added calls to applyFontTransforms() at the end
        of each contiguous run of glyphs from the same font. Also added code to maintain a vector
        of spaces and characters treated as space.
        (WebCore::WidthIterator::advanceOneCharacter): Changed the parameter type from a pointer to
        a reference.
        * platform/graphics/WidthIterator.h:
        (WebCore::WidthIterator::supportsTypesettingFeatures): Added. Returns whether WidthIterator
        instances support the typesetting features of the given font. Returns true if the font is
        not a screen font and its typesetting features are kerning, ligatures or both.
        (WebCore::WidthIterator::shouldApplyFontTransforms): Added. Returns true if the typesetting
        features include kerning or ligatures.
        * platform/mac/WebCoreSystemInterface.h: Defined wkCTFontTransformOptions and declared
        wkCTFontTransformGlyphs.
        * platform/mac/WebCoreSystemInterface.mm: Defined wkCTFontTransformGlyphs.
        * rendering/svg/SVGTextMetricsBuilder.cpp:
        (WebCore::SVGTextMetricsBuilder::advanceSimpleText): Added a local GlyphBuffer to pass to
        WidthIterator::advance().
        * rendering/svg/SVGTextRunRenderingContext.cpp:
        (WebCore::SVGTextRunRenderingContext::floatWidthUsingSVGFont): Ditto.

2012-10-15  Mark Lam  <mark.lam@apple.com>

        Fix build broken by r131348.
        https://bugs.webkit.org/show_bug.cgi?id=97533.

        Not reviewed.

        * rendering/RenderView.cpp:
        (WebCore::RenderView::layoutContent):

2012-10-15  Andreas Kling  <kling@webkit.org>

        Remove WTF::fastDeleteAllValues().
        <http://webkit.org/b/99345>

        Reviewed by Eric Seidel.

        It was only used to fastDelete() a class that was already overriding operator delete
        by way of WTF_MAKE_FAST_ALLOCATED anyway.

        * css/CSSParser.cpp:
        (WebCore::CSSParser::~CSSParser):

2012-10-15  Levi Weintraub  <leviw@chromium.org>

        Regression r130057: incorrect block pref width for alternating InlineFlow and inline Replaced
        https://bugs.webkit.org/show_bug.cgi?id=99194

        Reviewed by Eric Seidel.

        Correctly breaking lines after inline replaced elements that follow inline flows. Previously, alternating
        these two types of elements would cause us to increase our preferred width forever.

        Test: fast/block/block-with-inline-replaced-children-in-inline-flows.html

        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::computeInlinePreferredLogicalWidths):

2012-10-15  Emil A Eklund  <eae@chromium.org>

        Revert rounding change in RenderTable::paintObject
        https://bugs.webkit.org/show_bug.cgi?id=99364

        Reviewed by Levi Weintraub.

        Bug 91410 changed RenderTable::paintObject to round the offset
        in order to avoid table-background bleed through. The root cause
        for that has since been fixed and the rounding workaround is no
        longer needed. This change reverts the code change from bug
        91410 while preserving the test added as a part of that change
        as it now passes without the workaround.

        No new tests, covered by fast/sub-pixel/table-rows-no-gaps-expected.html

        * rendering/RenderTable.cpp:
        (WebCore::RenderTable::paintObject):
        Remove unnecessary rounding.

2012-10-15  Michelangelo De Simone  <michelangelo@webkit.org>

        [CSS Shaders] Add CustomFilterProgramType to CustomFilterProgramInfo
        https://bugs.webkit.org/show_bug.cgi?id=96448

        Reviewed by Kenneth Rohde Christiansen.

        CustomFilterProgramInfo has been refactored to decouple the CustomFilterProgramType from
        the CustomFilterProgramMixSetting: m_mixSettings.enabled was redundant in light of the fact
        that m_programType encoded the very same information. Dependencies have been updated to reflect
        this change.

        Current tests already cover this code.

        * css/CSSComputedStyleDeclaration.cpp: 
        (WebCore::CSSComputedStyleDeclaration::valueForFilter): The check for mixSettings.enabled has been replaced
        by an explicit check for PROGRAM_TYPE_BLENDS_ELEMENT_TEXTURE program type.
        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::createCustomFilterOperation): Setting the program type explicitly while creating a
        new filter program.
        * platform/graphics/filters/CustomFilterProgram.cpp:
        (WebCore::CustomFilterProgram::CustomFilterProgram): CustomFilterProgram's constructor has been updated to
        reflect the need of setting the program type explicitly.
        (WebCore::CustomFilterProgram::programInfo): Updated to create new CustomFilterProgramInfo setting the program
        type explicitly.
        * platform/graphics/filters/CustomFilterProgram.h:
        * platform/graphics/filters/CustomFilterProgramInfo.cpp:
        (WebCore::CustomFilterProgramInfo::CustomFilterProgramInfo): Added m_programType and udpated the related getter.
        (WebCore::CustomFilterProgramInfo::hash): ditto
        (WebCore::CustomFilterProgramInfo::operator==): MixSettings' equality check is being performed only whether
        the CustomFilterProgramInfo's program type is PROGRAM_TYPE_BLENDS_ELEMENT_TEXTURE.
        * platform/graphics/filters/CustomFilterProgramInfo.h:
        (WebCore::CustomFilterProgramMixSettings::CustomFilterProgramMixSettings): Got rid of the redundant enabled flag.
        (WebCore::CustomFilterProgramMixSettings::operator==): ditto
        (CustomFilterProgramInfo):
        (WebCore::CustomFilterProgramInfo::programType):
        * platform/graphics/filters/CustomFilterValidatedProgram.cpp: The right shader validator is now being
        created according to the program type.
        (WebCore::CustomFilterValidatedProgram::CustomFilterValidatedProgram):
        (WebCore::CustomFilterValidatedProgram::rewriteMixVertexShader): The reference to MixSettings' enabled flag
        has been replaced with a check for the program type.
        (WebCore::CustomFilterValidatedProgram::rewriteMixFragmentShader): ditto
        * rendering/style/StyleCustomFilterProgram.h:
        (WebCore::StyleCustomFilterProgram::create): Updated to be aware of the program type.
        (WebCore::StyleCustomFilterProgram::StyleCustomFilterProgram): ditto

2012-10-15  Joshua Bell  <jsbell@chromium.org>

        IndexedDB: Key paths should support non-ASCII identifiers
        https://bugs.webkit.org/show_bug.cgi?id=98814

        Reviewed by Kentaro Hara.

        Update the parser for key paths to use the unicode classes from
        the IdentifierName production in ECMA-262.

        Test: storage/indexeddb/keypath-basics.html

        * Modules/indexeddb/IDBKeyPath.cpp:
        (WebCore):
        (WebCore::IDBKeyPathLexer::lexIdentifier):

2012-10-15  Yael Aharon  <yael.aharon@intel.com>

        [EFL][WK2][Texmap] Set gl context in GraphicsContext3DPrivate
        https://bugs.webkit.org/show_bug.cgi?id=99325

        Reviewed by Kenneth Rohde Christiansen.

        Based on a patch from Regina Chung.
        This piece of code was lost in the final patch of https://bugs.webkit.org/show_bug.cgi?id=96627.
        The gl context is used as key in a hash map and cannot be NULL.

        No new tests. Accelerated compositing is not yet enabled in the EFL port.

        * platform/graphics/efl/GraphicsContext3DEfl.cpp:
        (WebCore::GraphicsContext3D::GraphicsContext3D):

2012-10-15  Mike West  <mkwst@chromium.org>

        Console messages containing long URLs should cut at some reasonable length.
        https://bugs.webkit.org/show_bug.cgi?id=97980

        Reviewed by Pavel Feldman.

        This patch lightly modifies the current styling of linkified URLs inside
        console messages in order to cut them down to some reasonable size for
        viewing. The middle of the URL is snipped out such that the whole
        thing fits into 150 characters. This only effects the displayed text;
        the link's href isn't changed; the link remains available via the
        context menu, accessible via the title attribute, and clicking it still
        takes the user directly to the resource in question.

        Test: inspector/console/console-trim-long-urls.html

        * inspector/front-end/ResourceUtils.js:
        (WebInspector.linkifyURLAsNode):
            Trim the middle of the URL to bring the whole string down to  down
            to 150 characters, and set the link's title to the full URL.

2012-10-15  Tony Chang  <tony@chromium.org>

        Add computeLogicalHeight override methods to RenderView and RenderMultiColumnSet
        https://bugs.webkit.org/show_bug.cgi?id=99348

        Reviewed by Ojan Vafai.

        Add computeLogicalHeight to the last 2 RenderBoxes that override the method.
        I'm unable to remove RenderMultiColumnSet::updateLogicalHeight and make the method
        non-virtual since it sets ComputedColumnHeight.  I'd like to remove this
        eventually.

        No new tests, this is just a code refactor.

        * rendering/RenderMultiColumnSet.cpp:
        (WebCore::RenderMultiColumnSet::updateLogicalHeight): Set computedColumnHeight.
        (WebCore::RenderMultiColumnSet::computeLogicalHeight):
        (WebCore):
        * rendering/RenderMultiColumnSet.h:
        (RenderMultiColumnSet):
        * rendering/RenderView.cpp:
        (WebCore::RenderView::computeLogicalHeight):
        * rendering/RenderView.h:

2012-10-15  Eunmi Lee  <eunmi15.lee@samsung.com>

        [EFL][WK2] Refactoring initialization and shutdown codes of EFL libraries.
        https://bugs.webkit.org/show_bug.cgi?id=97173

        Reviewed by Gyuyoung Kim.

        Remove codes to initialize and shutdown the EFL libraries from
        RunLoopEfl.cpp. Initialization and shutdown will be done in the
        ewk_main.cpp for ui process and WebProcessMainEfl.cpp for web
        process.

        No new tests. This patch doesn't change behavior.

        * platform/efl/RunLoopEfl.cpp:
        (WebCore::RunLoop::RunLoop):
        (WebCore::RunLoop::~RunLoop):

2012-10-15  Mihnea Ovidenie  <mihnea@adobe.com>

        [CSSRegions]Add support for auto-height regions (without region-breaks)
        https://bugs.webkit.org/show_bug.cgi?id=97533

        Reviewed by Julien Chaffraix.

        Implement the 2pass layout algorithm for computing the height of regions with auto logical height, without taking region breaks into account.
        The algorithm is described in the CSSRegions spec: http://dev.w3.org/csswg/css3-regions/#regions-visual-formatting-steps

        When the flow thread contains regions with auto logical height, a 2pass layout algorithm is needed to determine the height of auto logical height regions.
        In each step of the layout, the regions are laid out before the flow thread is laid out.

        In the first pass of layout (normal layout phase), the content of the flow thread is laid out unconstrained in the regions. The region marked as having auto logical height
        displays all the corresponding content from the flow thread (taking min-height and max-height into account), and the height of the content displayed
        determines the overridden logical content height. Thus, after the first pass of layout, each auto logical height region will store the logical height
        value for the second pass in its overridden logical content height property.

        In the second pass of layout (constrained flow threads layout phase), when the content of the flow thread is laid out constrained in the regions, the regions are laid out again and they are using
        the overridden logical content height from the first pass to update their logical height. Then, the flow thread content is laid out in the associated region chain,
        for which the auto logical height regions have proper logical height.

        A future patch will properly take region breaks into account for the first pass of layout.

        Tests: fast/regions/autoheight-abspos-region.html
               fast/regions/autoheight-floatright-region.html
               fast/regions/autoheight-horizontal-bt.html
               fast/regions/autoheight-inlineblock-normalflow-region.html
               fast/regions/autoheight-maxheight-region.html
               fast/regions/autoheight-minheight-region.html
               fast/regions/autoheight-normalflow-region.html
               fast/regions/autoheight-vertical-lr.html
               fast/regions/autoheight-vertical-rl.html

        * rendering/FlowThreadController.cpp:
        (WebCore::FlowThreadController::resetRegionsOverrideLogicalContentHeight):
        For all the auto logical height regions, resets their associated overrideLogicalContentHeight.
        Those regions are marked as needing layout (along with their ancestors).
        (WebCore::FlowThreadController::markAutoLogicalHeightRegionsForLayout):
        Mark all the auto logical height regions and their associated flow thread as needing layout (along with their ancestors).
        * rendering/FlowThreadController.h:
        * rendering/RenderBox.cpp:
        Add helper functions to clear out individual logical content width/height.
        (WebCore::RenderBox::clearOverrideLogicalContentHeight):
        (WebCore::RenderBox::clearOverrideLogicalContentWidth):
        (WebCore::RenderBox::clearOverrideSize):
        * rendering/RenderBox.h:
        * rendering/RenderFlowThread.cpp:
        (WebCore::RenderFlowThread::layout):
        (WebCore::RenderFlowThread::computeLogicalHeight):
        If the flow thread has an auto logical height region for which we did not yet compute the overrideLogicalContentHeight value,
        bail out early since we cannot compute the flow thread logical height.
        (WebCore::RenderFlowThread::regionAtBlockOffset):
        If the offset is inside an auto logical height region for which we did not compute the overrideLogicalContentHeight, then we consider this region tall enough to accommodate all
        the content and we return this region. Otherwise, for an auto logical height region, we use either the overrideLogicalContentHeight (if we are in the first layout phase) or
        the logicalHeight if we are in the second layout phase (because the overriderLogicalContentHeight was already transferred into region logical height).
        (WebCore::RenderFlowThread::pageLogicalHeightForOffset):
        (WebCore::RenderFlowThread::pageRemainingLogicalHeightForOffset):
        (WebCore::RenderFlowThread::computeOverflowStateForRegions):
        (WebCore::RenderFlowThread::resetRegionsOverrideLogicalContentHeight):
        (WebCore::RenderFlowThread::markAutoLogicalHeightRegionsForLayout):
        (WebCore::RenderFlowThread::updateRegionsFlowThreadPortionRect):
        (WebCore::RenderFlowThread::addForcedRegionBreak):
        Simulate a region break at the specified offset. It will be extended to properly process the region breaks. At this moment, only one auto height region for a thread
        can have its height properly computed.
        * rendering/RenderFlowThread.h:
        * rendering/RenderNamedFlowThread.cpp:
        (WebCore::boxIntersectsRegion):
        * rendering/RenderRegion.cpp:
        (WebCore::RenderRegion::updateLogicalHeight):
        If the auto logical height region has an overrideLogicalContentHeight and we are in the second pass of layout,
        we use the overrideLogicalContentHeight to update the region logical height.
        (WebCore::RenderRegion::needsOverrideLogicalContentHeightComputation):
        * rendering/RenderRegion.h:
        * rendering/RenderView.cpp:
        (WebCore::RenderView::RenderView):
        (WebCore::RenderView::layoutContent):
        Added a new function to contain the RenderView block layout and flow threads layout.
        (WebCore::RenderView::checkLayoutState):
        Helper function keeping the original asserts from RenderView, used in more than one place.
        (WebCore::RenderView::layout):
        * rendering/RenderView.h:
        (WebCore::RenderView::normalLayoutPhase):
        (WebCore::RenderView::constrainedFlowThreadsLayoutPhase):

2012-10-15  Eugene Klyuchnikov  <eustas.bug@gmail.com>

        Web Inspector: Fix memory leak in TreeOutline
        https://bugs.webkit.org/show_bug.cgi?id=99307

        Reviewed by Alexander Pavlov.

        Added cleanup of empty buckets in elements cache.

        * inspector/front-end/treeoutline.js:

2012-10-15  Eugene Klyuchnikov  <eustas.bug@gmail.com>

        Web Inspector: Hide useless controls in remote-debugging mode.
        https://bugs.webkit.org/show_bug.cgi?id=99300

        Reviewed by Vsevolod Vlasov.

        "Close inspector" and "change docking mode" buttons seem to be rather
        useless in remote debugging mode.

        * inspector/front-end/inspector.css:
        (body.remote .toolbar-item.close-left, body.remote .toolbar-item.close-right):
        (body.remote .dock-status-bar-item):

2012-10-15  Christophe Dumez  <christophe.dumez@intel.com>

        [EFL][WK2] Implement Favicons API
        https://bugs.webkit.org/show_bug.cgi?id=99087

        Reviewed by Kenneth Rohde Christiansen.

        Moved ewk_util from WebKit to WebCore and rename it
        to CairoUtilityEfl so that the code can be shared
        between WebKit1 and WebKit2. Some related utility
        code was also moved from RenderThemeEfl to
        CairoUtilityEfl.

        No new tests, no behavior change.

        * PlatformEfl.cmake:
        * platform/efl/RenderThemeEfl.cpp:
        * platform/graphics/efl/CairoUtilitiesEfl.cpp: Renamed from Source/WebKit/efl/ewk/ewk_util.cpp.
        (WebCore):
        (WebCore::evasObjectFromCairoImageSurface):
        (WebCore::createSurfaceForBackingStore):
        * platform/graphics/efl/CairoUtilitiesEfl.h: Renamed from Source/WebKit/efl/ewk/ewk_util_private.h.
        (WebCore):

2012-10-15  Beth Dakin  <bdakin@apple.com>

        https://bugs.webkit.org/show_bug.cgi?id=99350
        REGRESSION (r131238): Repro crash in 
       WebCore::ScrollingStateTree::removeNode(WebCore::ScrollingStateNode*) 
        opening pdf page
        -and corresponding-
        <rdar://problem/12499839>

        Reviewed by Simon Fraser.

        We have to null-check node here. It won't be found if  
        clearStateTree() was recently called.
        * page/scrolling/mac/ScrollingCoordinatorMac.mm:
        (WebCore::ScrollingCoordinatorMac::detachFromStateTree):

2012-10-15  Jonathan Dong  <jonathan.dong@torchmobile.com.cn>

        [BlackBerry] replace BlackBerry::Platform::log() with BBLOG()
        https://bugs.webkit.org/show_bug.cgi?id=99302

        Reviewed by Rob Buis.

        RIM PR: 210884
        The marco BBLOG() is defined as a no-op in release mode which will
        save a function call in the release build.
        Internally reviewed by Charles Wei.

        No new tests since there's no functional change.

        * platform/blackberry/PlatformKeyboardEventBlackBerry.cpp:
        (WebCore::PlatformKeyboardEvent::PlatformKeyboardEvent):
        * platform/graphics/blackberry/GraphicsContext3DBlackBerry.cpp:
        (WebCore::GraphicsContext3D::logFrameBufferStatus):
        * platform/graphics/blackberry/LayerCompositingThread.cpp:
        (WebCore::LayerCompositingThread::getTransformedHolePunchRect):
        * platform/graphics/blackberry/VideoLayerWebKitThread.cpp:
        (WebCore::VideoLayerWebKitThread::setHolePunchRect):
        (WebCore::VideoLayerWebKitThread::boundsChanged):
        * platform/graphics/opengl/GraphicsContext3DOpenGLCommon.cpp:
        (WebCore::GraphicsContext3D::compileShader):

2012-10-15  Christophe Dumez  <christophe.dumez@intel.com>

        [EFL] Provide logging for OnlineState detection code
        https://bugs.webkit.org/show_bug.cgi?id=99299

        Reviewed by Kenneth Rohde Christiansen.

        Add logging to NetworkStateNotifierEfl.cpp to facilitate
        debugging of this functionality.

        No new tests, no behavior change.

        * platform/network/efl/NetworkStateNotifierEfl.cpp:
        (WebCore::NetworkStateNotifier::updateState):

2012-10-15  MORITA Hajime  <morrita@google.com>

        [Regression r131167] run-webkit-tests fails
        https://bugs.webkit.org/show_bug.cgi?id=99279

        Reviewed by Kentaro Hara.

        CodeGeneratorV8.pm assumed that there are only two objects which have constructor getters and
        overlooked TestObj. This fix relaxes that assumption to accept it.

        No new tests. Fixing an existing test.

        * bindings/scripts/CodeGeneratorV8.pm:
        (GenerateConstructorGetter):
        * bindings/scripts/test/V8/V8TestObj.cpp:
        (WebCore::TestObjV8Internal::TestObjConstructorGetter):

2012-10-15  Joe Mason  <jmason@rim.com>

        [BlackBerry] Fix WebSockets which was disabled by recent string changes
        https://bugs.webkit.org/show_bug.cgi?id=99248

        Reviewed by George Staikos.

        PR 223681: The signature of FilterStream::notifyStatusReceived changed to take a
        BlackBerry::Platform::String instead of a char *. But SocketStreamHandleBlackBerry was not
        updated to the new signature, so the status message is not getting passed on because it is
        not calling the correct override.

        No new tests because this is fixing a regression.

        * platform/network/blackberry/SocketStreamHandle.h:
        (SocketStreamHandle):
        * platform/network/blackberry/SocketStreamHandleBlackBerry.cpp:
        (WebCore::SocketStreamHandle::notifyStatusReceived):

2012-10-15  Rob Buis  <rbuis@rim.com>

        Remove RenderTextControl::isSelectableElement
        https://bugs.webkit.org/show_bug.cgi?id=99334

        Reviewed by Andreas Kling.

        It seems this method is not used anymore.

        * WebCore.order:
        * rendering/RenderTextControl.h:

2012-10-15  Mike West  <mkwst@chromium.org>

        CSP source expressions should support paths at file-level granularity.
        https://bugs.webkit.org/show_bug.cgi?id=99250

        Reviewed by Adam Barth.

        After a bit of discussion on public-webappsec[1], path support for CSP
        source expressions has been tuned to support file-level granularity. In
        particular, this means that:

        - 'example.com/js' matches a file named 'js'
        - 'example.com/js/' matches all files under a directory named 'js'
          (note the trailing slash)
        - 'example.com/js/file.js' matches only a file named 'file.js'
          inside a directory named 'js'

        Though this is part of the CSP 1.1 spec, it continues to be exposed
        outside the CSP_NEXT flag for back-compatibility.

        Test cases have been added to the existing
        http/tests/security/contentSecurityPolicy/source-list-parsing-paths-*
        in order ensure that the new functionality works correctly.

        * page/ContentSecurityPolicy.cpp:
        (WebCore::CSPSource::pathMatches):
            If the path ends with '/', do a prefix check. If not, check for an
            exact match.
        (WebCore::CSPSourceList::parsePath):
            Don't automatically append a '/' to paths.

2012-10-15  George Staikos  <staikos@webkit.org>

        [BlackBerry] Adapt to Platform API changes in string handling
        https://bugs.webkit.org/show_bug.cgi?id=99248

        Reviewed by Yong Li.

        Convert usage of WebString, char* and std::string to BlackBerry::Platform::String.

        * html/track/TextTrack.cpp:
        (WebCore::TextTrack::TextTrack): Fix the build for BlackBerry.
        * page/blackberry/SettingsBlackBerry.cpp:
        (WebCore):
        (WebCore::Settings::initializeDefaultFontFamilies):
        * platform/blackberry/LocalizedStringsBlackBerry.cpp:
        * platform/blackberry/MIMETypeRegistryBlackBerry.cpp:
        (WebCore::MIMETypeRegistry::getMIMETypeForExtension):
        (WebCore::MIMETypeRegistry::getPreferredExtensionForMIMEType):
        * platform/blackberry/PasteboardBlackBerry.cpp:
        (WebCore::Pasteboard::writeSelection):
        (WebCore::Pasteboard::writeURL):
        (WebCore::Pasteboard::writePlainText):
        (WebCore::Pasteboard::plainText):
        (WebCore::Pasteboard::documentFragment):
        * platform/blackberry/ReadOnlyLatin1String.h: Removed.
        * platform/graphics/blackberry/MediaPlayerPrivateBlackBerry.cpp:
        (WebCore::MediaPlayerPrivate::getSupportedTypes):
        (WebCore::MediaPlayerPrivate::supportsType):
        (WebCore::MediaPlayerPrivate::setCertificatePath):
        (WebCore::MediaPlayerPrivate::load):
        (WebCore::generateProtectionSpaceFromMMRAuthChallenge):
        (WebCore::MediaPlayerPrivate::onAuthenticationNeeded):
        (WebCore::MediaPlayerPrivate::onAuthenticationAccepted):
        (WebCore::MediaPlayerPrivate::lookupMediaStream):
        * platform/graphics/blackberry/MediaPlayerPrivateBlackBerry.h:
        (MediaPlayerPrivate):
        (WebCore::MediaPlayerPrivate::engineDescription):
        * platform/network/blackberry/DNSBlackBerry.cpp:
        (WebCore::prefetchDNS):
        * platform/network/blackberry/NetworkJob.cpp:
        (WebCore::NetworkJob::initialize):
        (WebCore::NetworkJob::notifyStatusReceived):
        (WebCore::NetworkJob::notifyHeadersReceived):
        (WebCore::NetworkJob::handleNotifyClose):
        (WebCore::NetworkJob::sendRequestWithCredentials):
        * platform/network/blackberry/NetworkJob.h:
        (NetworkJob):
        * platform/network/blackberry/NetworkManager.cpp:
        (WebCore::NetworkManager::startJob):
        * platform/network/blackberry/ResourceRequestBlackBerry.cpp:
        (WebCore::ResourceRequest::initializePlatformRequest):
        * platform/network/blackberry/SocketStreamHandleBlackBerry.cpp:
        (WebCore::SocketStreamHandle::SocketStreamHandle):
        * platform/text/blackberry/StringBlackBerry.cpp:
        (WTF::String::String):
        (WTF::String::operator BlackBerry::Platform::String):
        * platform/text/blackberry/TextBreakIteratorInternalICUBlackBerry.cpp:

2012-10-15  Jay Civelli  <jcivelli@chromium.org>

        Calling WebCore::SharedBuffer::append(data, 0) on a shared buffer when
        its current position is at a segment boundary (4096) ends up adding an
        unitialized segment (with uninitialized memory) to the SharedBuffer.
        https://bugs.webkit.org/show_bug.cgi?id=99000

        Reviewed by Adam Barth.

        * platform/SharedBuffer.cpp:
        (WebCore::SharedBuffer::append):

2012-10-15  Luke Macpherson   <macpherson@chromium.org>

        Make CSS variable names case-insensitive.
        https://bugs.webkit.org/show_bug.cgi?id=98712

        Reviewed by Tony Chang.

        This patch modifies the parser to normalize all variable names to lower case,
        making variable definitions consistent with other property names, which are also case insensitive.
        Spec: http://dev.w3.org/csswg/css-variables/#defining-variables

        Test: fast/css/variables/case-insensitive.html

        * css/CSSParser.cpp:
        (WebCore::CSSParser::createPrimitiveNumericValue):
        (WebCore):
        (WebCore::CSSParser::createPrimitiveVariableNameValue):
        (WebCore::CSSParser::parseValidPrimitive):
        (WebCore::CSSParser::parseValue):
        (WebCore::CSSParser::storeVariableDeclaration):
        (WebCore::CSSParserString::lowerSubstring):
        Added function to compute a lower case substring as an AtomicString from a CSSParserString.
        * css/CSSParser.h:
        (CSSParser):
        * css/CSSParserValues.h:
        (CSSParserString):
        (WebCore::CSSParserString::lowerSubstring):

2012-10-15  Michael Saboff  <msaboff@apple.com>

        Update RenderText to use String instead of UChar* for text
        https://bugs.webkit.org/show_bug.cgi?id=96979

        Reviewed by Dan Bernstein.

        RenderText now uses a String for text.  It keeps a cached LCHar* or UChar* pointer to the
        actual text data for performance.  Added a characterAt() indexed accessor to RenderText to avoid the
        somewhat confusing construct for a RenderText* rt, e.g. (*re)[n] or rt->characters()[n].  This is
        now written as rt->characterAt(n).
        Enabled patch in the HTML parser to create 8 bit text data.  Modified TextRun to create 
        text runs using 8 bit string data where possible.  Added several flavors of RenderBlock::constructTextRun
        to create TextRuns from RenderText objects including with an offset.  Added an LChar flavor of constructTextRun()
        as well.  Eliminated the TextRunFlags argument to all but the String flavor as all other flavors used the default
        parameter.  
        Encased the code that creates 8 bit TextRun's in #if USE(8BIT_TEXTRUN).  Enabled WTF_USE_8BIT_TEXTRUN
        for PLATFORM(MAC).  Other platform can update this setting in Platform.h when their platform specific code is
        updated to TextRun's with 8 bit data.
        Added many 8/16 bit aware paths.  Cleanup up some int / unsigned confusion in RenderBlockLineLayout.cpp.

        No function change therefore no new tests.

        * html/parser/HTMLTokenizer.cpp:
        (WebCore::vectorEqualsString):
        (WebCore::HTMLTokenizer::nextToken):
        * html/parser/HTMLTokenizer.h:
        (HTMLTokenizer):
        * html/track/WebVTTTokenizer.cpp:
        (WebCore::vectorEqualsString):
        (WebCore::WebVTTTokenizer::nextToken):
        * html/track/WebVTTTokenizer.h:
        (WebVTTTokenizer):
        * platform/graphics/Font.h:
        (WebCore::Font::glyphDataForCharacter):
        * platform/graphics/FontFastPath.cpp:
        (WebCore):
        * platform/graphics/TextRun.h:
        (WebCore::TextRun::TextRun):
        (WebCore::TextRun::subRun):
        (TextRun):
        * platform/graphics/mac/ComplexTextController.cpp:
        (WebCore::TextLayout::isNeeded):
        (WebCore::TextLayout::constructTextRun):
        * rendering/InlineFlowBox.cpp:
        (WebCore::InlineFlowBox::placeBoxesInInlineDirection):
        * rendering/InlineIterator.h:
        (WebCore::InlineIterator::atTextParagraphSeparator):
        (WebCore::InlineIterator::current):
        (WebCore::InlineIterator::previousInSameNode):
        * rendering/InlineTextBox.cpp:
        (WebCore::adjustCharactersAndLengthForHyphen):
        (WebCore::InlineTextBox::paint):
        (WebCore::InlineTextBox::paintSelection):
        (WebCore::InlineTextBox::constructTextRun):
        * rendering/InlineTextBox.h:
        (InlineTextBox):
        * rendering/RenderBlock.cpp:
        (WebCore::constructTextRunInternal):
        (WebCore::RenderBlock::constructTextRun):
        * rendering/RenderBlock.h:
        (RenderBlock):
        * rendering/RenderBlockLineLayout.cpp:
        (WebCore::endsWithASCIISpaces):
        (WebCore::reachedEndOfTextRenderer):
        (WebCore::RenderBlock::computeInlineDirectionPositionsForLine):
        (WebCore::shouldSkipWhitespaceAfterStartObject):
        (WebCore::textWidth):
        (WebCore::tryHyphenating):
        (WebCore::RenderBlock::LineBreaker::nextLineBreak):
        * rendering/RenderCombineText.cpp:
        (WebCore::RenderCombineText::getStringToRender):
        (WebCore::RenderCombineText::combineText):
        * rendering/RenderCombineText.h:
        (RenderCombineText):
        * rendering/RenderText.cpp:
        (SameSizeAsRenderText):
        (WebCore::RenderText::RenderText):
        (WebCore::RenderText::widthFromCache):
        (WebCore::RenderText::computePreferredLogicalWidths):
        (WebCore::RenderText::setTextInternal):
        (WebCore::RenderText::width):
        * rendering/RenderText.h:
        (WebCore::RenderText::is8Bit):
        (WebCore::RenderText::characters8):
        (WebCore::RenderText::characters16):
        (WebCore::RenderText::characterAt):
        (WebCore::RenderText::operator[]):
        (RenderText):
        * xml/parser/MarkupTokenBase.h:
        (WebCore::MarkupTokenBase::appendToCharacter):
        (MarkupTokenBase):
        (WebCore::MarkupTokenBase::isAll8BitData):

2012-10-15  Vsevolod Vlasov  <vsevik@chromium.org>

        Web Inspector: Scripts for dynamically added script elements are not shown in sources panel.
        https://bugs.webkit.org/show_bug.cgi?id=99324

        Reviewed by Pavel Feldman.

        NetworkUISourceCodeProvider now adds uiSourceCodes for dynamic anonymous scripts
        and dynamic scripts loaded before inspector was opened.

        Tests: http/tests/inspector-enabled/dynamic-scripts.html
               inspector/debugger/dynamic-scripts.html

        * inspector/front-end/NetworkLog.js:
        (WebInspector.NetworkLog.prototype.requestForURL):
        * inspector/front-end/NetworkUISourceCodeProvider.js:
        (WebInspector.NetworkUISourceCodeProvider):
        (WebInspector.NetworkUISourceCodeProvider.prototype._parsedScriptSource):
        (WebInspector.NetworkUISourceCodeProvider.prototype._projectWillReset):

2012-10-15  Dominik Röttsches  <dominik.rottsches@intel.com>

        REGRESSION(130613): Reintroduces crashes when using soup's timeout functionality
        https://bugs.webkit.org/show_bug.cgi?id=99311

        Reviewed by Gustavo Noronha Silva.

        Removing the cleanupSoupRequestOperation call, since the cancel() call will eventually trigger the
        cleanup already setting the right flag. Cleaning the handle already here will result in crashes when
        using the soup timeout functionality.
        The explicit cleanup call reintroduced in r130613, after it had been previously removed in r130348.

        No new tests, tests that catch this will be part of bug 74802 for XHR timeout support.

        * platform/network/soup/ResourceHandleSoup.cpp:
        (WebCore::requestTimeoutCallback):

2012-10-15  Ilya Tikhonovsky  <loislo@chromium.org>

        Web Inspector: convert manual size calculation of different WebKit things into MemoryInstrumentation.
        https://bugs.webkit.org/show_bug.cgi?id=99309

        Reviewed by Yury Semikhatsky.

        JSHeap, DOMStorage and HeapProfiler data were counted manually.
        Now we count the sizes more generic way.

        * dom/WebCoreMemoryInstrumentation.cpp:
        * dom/WebCoreMemoryInstrumentation.h:
        (WebCoreMemoryTypes): new string identifiers were added for Inspector's data.
        * inspector/InspectorBaseAgent.cpp:
        (WebCore::InspectorBaseAgentInterface::InspectorBaseAgentInterface): common data members were moved from template to base class.
        (WebCore::InspectorBaseAgentInterface::reportMemoryUsage): NMI instrumentation was added to the base template.
        * inspector/InspectorBaseAgent.h:
        (InspectorBaseAgentInterface): ditto
        (WebCore::InspectorBaseAgent::InspectorBaseAgent): ditto
        * inspector/InspectorController.cpp:
        (WebCore::InspectorController::reportMemoryUsage): NMI instrumentation was added to the class.
        * inspector/InspectorController.h:
        * inspector/InspectorDOMStorageAgent.cpp:
        (WebCore::InspectorDOMStorageAgent::reportMemoryUsage): NMI instrumentation was added to the class.
        * inspector/InspectorDOMStorageAgent.h:
        * inspector/InspectorDOMStorageResource.cpp:
        (WebCore::InspectorDOMStorageResource::reportMemoryUsage): NMI instrumentation was added to the class.
        * inspector/InspectorDOMStorageResource.h:
        * inspector/InspectorMemoryAgent.cpp:
        (WebCore::reportJSHeapInfo): these methods now use MemoryInstrumentation for reporting the size of underlying data.
        (WebCore::reportRenderTreeInfo):
        (WebCore::collectDomTreeInfo):
        (WebCore::InspectorMemoryAgent::getProcessMemoryDistribution):
        (WebCore::InspectorMemoryAgent::reportMemoryUsage): NMI instrumentation was added to the class.
        * inspector/InspectorMemoryAgent.h:
        * inspector/InspectorProfilerAgent.cpp:
        (WebCore::InspectorProfilerAgent::reportMemoryUsage):
        * inspector/InspectorProfilerAgent.h:
        (InspectorProfilerAgent): NMI instrumentation was added to the class.
        * inspector/MemoryInstrumentationImpl.cpp: allocatedObjects map was converted from InspectorMemoryAgent::getProcessMemoryDistribution local variable to member variable.
        (WebCore::MemoryInstrumentationClientImpl::checkCountedObject):
        (WebCore::MemoryInstrumentationClientImpl::reportMemoryUsage): NMI instrumentation was added to the class.
        (WebCore::MemoryInstrumentationImpl::reportMemoryUsage): NMI instrumentation was added to the class.
        * inspector/MemoryInstrumentationImpl.h:
        (WebCore::MemoryInstrumentationClientImpl::MemoryInstrumentationClientImpl):
        (WebCore::MemoryInstrumentationClientImpl::allocatedObjects):
        (WebCore::MemoryInstrumentationClientImpl::checkInstrumentedObjects):
        * inspector/front-end/NativeMemorySnapshotView.js:
        (WebInspector.MemoryBlockViewProperties._initialize):
        (WebInspector.NativeMemoryBarChart.prototype._updateView):
        * page/Page.cpp:
        (WebCore::Page::reportMemoryUsage): NMI instrumentation was added to the class.
        * page/Page.h:

2012-10-15  Kent Tamura  <tkent@chromium.org>

        Improve code of LocaleMac.mm
        https://bugs.webkit.org/show_bug.cgi?id=98383

        Reviewed by Darin Adler.

        - Use isNull instead of isEmpty because isNull is more efficient.
        - create*Formatter should return RetainPtr to avoid to retain in each of callsites.
        - Explicit String conversion is not needed.

        No new tests. This doesn't change any behavior.

        * platform/text/mac/LocaleMac.h:
        (LocaleMac):
        - Change the return types of createShortDateFormatter,
        createTimeFormatter, and createShortTimeFormatter from NSDateFormatter*
        to RetainPtr<NSDateFormatter>.
        - Omit 'create' from their names.
        - Add m_gregorianCalendar.
        * platform/text/mac/LocaleMac.mm:
        (WebCore::createDateTimeFormatter):
        Change the return type from NSDateFormatter* to RetainPtr<NSDateFormatter>.
        Add an NSCalendar argument.
        (WebCore::LocaleMac::shortDateFormatter):
        Renamed from createShortTimeFormatter.
        Change the return type from NSDateFormatter* to RetainPtr<NSDateFormatter>.
        (WebCore::LocaleMac::parseDateTime): Follow the return type change and the renaming.
        (WebCore::LocaleMac::formatDateTime): Ditto. Also, remove explicit String construction.
        (WebCore::LocaleMac::dateFormatText): Ditto. Also, use isNull.
        (WebCore::LocaleMac::monthLabels): Follow the return type change and the renaming.
        (WebCore::LocaleMac::weekDayShortLabels): Ditto.
        (WebCore::LocaleMac::timeFormatter):
        Change the return type from NSDateFormatter* to RetainPtr<NSDateFormatter>.
        Renamed from createTimeFormatter.
        (WebCore::LocaleMac::shortTimeFormatter): Ditto.
        (WebCore::LocaleMac::dateFormat):
        Use isNull. Remove explicit String construction. Follow the return type
        change and the renaming.
        (WebCore::LocaleMac::timeFormat): ditto.
        (WebCore::LocaleMac::shortTimeFormat): ditto.
        (WebCore::LocaleMac::timeAMPMLabels):
        Remove explicit String construction. Follow the return type change.
        (WebCore::LocaleMac::initializeLocalizerData):
        Remove explicit String construction.

2012-10-12  Ilya Tikhonovsky  <loislo@chromium.org>

        Web Inspector: NMI remove hand made object builders with automatic builder.
        https://bugs.webkit.org/show_bug.cgi?id=99186

        Reviewed by Yury Semikhatsky.

        Old builders were replaced with single automatic builder.
        It does the next things:
        a) deduplicates entries in the MemoryInstrumentationClient's map and converts objectType pointers to String;
        b) creates parent entries and assigns their aggregated sizes;
        c) creates the hierarchy of MemoryBlocks recursively.

        * dom/WebCoreMemoryInstrumentation.cpp:
        (WebCore):
        * dom/WebCoreMemoryInstrumentation.h:
        (WebCoreMemoryTypes):
        * inspector/InspectorMemoryAgent.cpp:
        (WebCore):
        (WebCore::jsHeapInfo):
        (WebCore::renderTreeInfo):
        (WebCore::addPlatformComponentsInfo):
        (WebCore::InspectorMemoryAgent::getProcessMemoryDistribution):
        * inspector/MemoryInstrumentationImpl.cpp:
        (WebCore::MemoryInstrumentationClientImpl::sizesMap):
        (WebCore):
        * inspector/MemoryInstrumentationImpl.h:
        (WebCore):
        (MemoryInstrumentationClientImpl):

2012-10-14  Sam Weinig  <sam@webkit.org>

        Simplify user content in WebKit2 by using WebCore::UserStyleSheet and WebCore::UserScript directly
        https://bugs.webkit.org/show_bug.cgi?id=99276

        Reviewed by Anders Carlsson.

        Add default constructors for UserScript and UserStyleSheet so they can be used in CoreIPC encoding/decoding.

        * page/UserScript.h:
        (WebCore::UserScript::UserScript):
        (UserScript):
        * page/UserStyleSheet.h:
        (WebCore::UserStyleSheet::UserStyleSheet):
        (UserStyleSheet):

2012-10-14  Jon Lee  <jonlee@apple.com>

        Allow notification origin permission request when no js callback is provided
        https://bugs.webkit.org/show_bug.cgi?id=63615
        <rdar://problem/11059590>

        Reviewed by Sam Weinig.

        Instead of throwing a type error when no callback is provided, we pass a null callback.

        Test: http/tests/notifications/legacy/request-no-callback.html

        * bindings/js/JSDesktopNotificationsCustom.cpp:
        (WebCore::JSNotificationCenter::requestPermission):

2012-10-12  Anders Carlsson  <andersca@apple.com>

        Move QDataStream functions into HistoryItemQt.cpp
        https://bugs.webkit.org/show_bug.cgi?id=99203

        Reviewed by Andreas Kling.

        It seems like the QDataStream stream operators are only used from HistoryItemQt.cpp
        inside WebCore, so move them there. If in the future they are required elsewhere, they should
        be moved into a separate header instead of polluting headers unnecessarily.

        * history/qt/HistoryItemQt.cpp:
        (operator<<):
        (operator>>):
        * platform/FractionalLayoutUnit.h:
        * platform/graphics/IntPoint.h:

2012-10-14  Sam Weinig  <sam@webkit.org>

        Make UserScript and UserStyleSheet value objects that are copyable
        https://bugs.webkit.org/show_bug.cgi?id=99275

        Reviewed by Tim Horton.

        Simplify UserScript and UserStyleSheet and make them more easily usable
        without sticking them in an OwnPtr.

        * WebCore.exp.in:
        Update exports.

        * page/PageGroup.cpp:
        (WebCore::PageGroup::addUserScriptToWorld):
        (WebCore::PageGroup::addUserStyleSheetToWorld):
        * page/PageGroup.h:
        (PageGroup):
        * page/UserContentURLPattern.cpp:
        (WebCore::UserContentURLPattern::matchesPatterns):
        * page/UserContentURLPattern.h:
        (UserContentURLPattern):
        Update to not assume whitelist and blacklist are in Vector<String>*.

        * page/UserScript.h:
        (UserScript):
        (WebCore::UserScript::UserScript):
        (WebCore::UserScript::whitelist):
        (WebCore::UserScript::blacklist):
        * page/UserStyleSheet.h:
        (UserStyleSheet):
        (WebCore::UserStyleSheet::UserStyleSheet):
        (WebCore::UserStyleSheet::whitelist):
        (WebCore::UserStyleSheet::blacklist):
        Switch OwnPtr<Vector<String> > to Vector<String> and remove Noncopyable restriction.

2012-10-14  Tim Horton  <timothy_horton@apple.com>

        [wk2] Implement PDFPlugin
        https://bugs.webkit.org/show_bug.cgi?id=99206

        Unreviewed build fix, export __ZN7WebCore8IntPointC1ERK7CGPoint.

        * WebCore.exp.in:

2012-10-14  Tim Horton  <timothy_horton@apple.com>

        [wk2] Implement PDFPlugin
        https://bugs.webkit.org/show_bug.cgi?id=99206

        Reviewed by Dan Bernstein.

        Add a plug-in that uses PDFKit to display PDFs, instead of using PDFKit in the
        UIProcess for full-page PDFs. This new plugin will also be used for inline PDFs
        in place of SimplePDFPlugin (née BuiltInPDFView).

        * WebCore.exp.in:
        Export a few more methods to WebKit(2).

        * WebCore.xcodeproj/project.pbxproj:
        Expose Pasteboard.h as a private header so PDFPlugin can use it.

        * platform/ScrollableArea.h:
        Make invalidateScrollbar/invalidateScrollCorner virtual.

2012-10-14  Antoine Quint  <graouts@apple.com>

        InspectorPageAgent should expose a method to control the compositing debug settings.
        https://bugs.webkit.org/show_bug.cgi?id=99253

        Reviewed by Timothy Hatcher.

        * inspector/Inspector.json:
        * inspector/InspectorPageAgent.cpp:
        (WebCore::InspectorPageAgent::setCompositingBordersVisible):
        * inspector/InspectorPageAgent.h:

2012-10-13  Chris Rogers  <crogers@google.com>

        WebAudioBus needs support for resizing bus to a smaller size
        https://bugs.webkit.org/show_bug.cgi?id=99215

        Reviewed by Dimitri Glazkov.

        Upgrade AudioBus and WebAudioBus to support resizing to a smaller size, once it has been created.
        This is useful, for example, when decoding VBR formats and the actual length can't be exactly determined
        until the entire file is decoded.

        * platform/audio/AudioBus.cpp:
        (WebCore::AudioBus::resizeSmaller):
        (WebCore):
        * platform/audio/AudioBus.h:
        (AudioBus):
        * platform/audio/AudioChannel.cpp:
        (WebCore::AudioChannel::resizeSmaller):
        (WebCore):
        * platform/audio/AudioChannel.h:
        (AudioChannel):
        * platform/chromium/support/WebAudioBus.cpp:
        (WebKit::WebAudioBus::resizeSmaller):
        (WebKit):

2012-10-13  Gregg Tavares  <gman@google.com>

        Add warning for unrenderable textures
        https://bugs.webkit.org/show_bug.cgi?id=99235

        Reviewed by Kenneth Russell.

        Unrenderable textures are often hard to debug. Adds a message to that
        appears in the JavaScript console to help developers find the issue.

        No new tests as no new functionality.

        * html/canvas/WebGLRenderingContext.cpp:
        (WebCore):
        (WebCore::WebGLRenderingContext::drawArrays):
        (WebCore::WebGLRenderingContext::drawElements):
        (WebCore::WebGLRenderingContext::handleNPOTTextures):
        * html/canvas/WebGLRenderingContext.h:
        (WebGLRenderingContext):

2012-10-13  Geoffrey Garen  <ggaren@apple.com>

        Not reviewed.

        Updated bindings test results.

        * bindings/scripts/test/JS/JSTestEventTarget.cpp:
        (WebCore::JSTestEventTarget::getOwnPropertySlotByIndex):

2012-10-12  Geoffrey Garen  <ggaren@apple.com>

        I pity da foo' who's converting numbers to strings
        https://bugs.webkit.org/show_bug.cgi?id=99197

        Reviewed by Gavin Barraclough.

        40% speedup on PerformanceTests/Dromaeo/dom-traverse.html. Probably speeds
        some other things up too.

        Credit to Eric Seidel for spotting this.

        * bindings/scripts/CodeGeneratorJS.pm:
        (GenerateImplementation): getOwnPropertySlotByIndex doesn't need to prefer
        string lookup in the static table because our static tables don't contain
        properties that are numbers.

        I believe this is low-hanging fruit left behind by Phil's
        getOwnPropertySlotByIndex optimization, but it's also possible that this was a
        regression at some point. I didn't check.

2012-10-13  Adam Barth  <abarth@webkit.org>

        Remove dead code in Node.idl
        https://bugs.webkit.org/show_bug.cgi?id=99237

        Reviewed by Maciej Stachowiak.

        We don't implement this feature. This code is dead and should be
        removed.

        * dom/Node.idl:

2012-10-12  Simon Fraser  <simon.fraser@apple.com>

        Fix GraphicsLayerCA visible rect computation in the face of perspective and preserve-3d
        https://bugs.webkit.org/show_bug.cgi?id=99212

        Reviewed by Tim Horton.

        GraphicsLayerCA::computeVisibleRect() was incorrect for layer trees with perspective
        and preserve-3d, so fix that, and add some tests.
        
        Perspective is implemented via childrenTransform(); if our parent has one,
        we have to left-multiply this into the transformation matrix.
        
        We have to test both this layer and its parent when deciding whether to accumulate
        or flatten.
        
        Use state.mappedQuad() rather than state.lastPlanarQuad(), because the last planar
        quad might be for some distant ancestor, and there may be intermediate preserve-3d
        layers.

        Tests: compositing/visible-rect/3d-transform-style.html
               compositing/visible-rect/3d-transformed.html
               compositing/visible-rect/nested-transform.html

        * platform/graphics/ca/GraphicsLayerCA.cpp:
        (WebCore::GraphicsLayerCA::computeVisibleRect):

2012-10-11  Simon Fraser  <simon.fraser@apple.com>

        Move TransformState code into its own member function, and remove a test that was prematurely added
        https://bugs.webkit.org/show_bug.cgi?id=99117

        Reviewed by Tim Horton.

        The code that manipulates the TransformState and computes the visible rect is going to get
        more complex, so move it into a new member function.

        * platform/graphics/ca/GraphicsLayerCA.cpp:
        (WebCore::GraphicsLayerCA::computeVisibleRect):
        (WebCore::GraphicsLayerCA::recursiveCommitChanges):
        * platform/graphics/ca/GraphicsLayerCA.h:
        (GraphicsLayerCA):

2012-10-12  Simon Fraser  <simon.fraser@apple.com>

        Add some initial visible rect tests and tweak the visible wash layer
        https://bugs.webkit.org/show_bug.cgi?id=99095

        Reviewed by Tim Horton.

        Make the m_visibleTileWashLayer more useful by showing it for all
        layers with transforms, not just tiled layers. This is a debugging
        layer normally disabled, but enabled by #defining VISIBLE_TILE_WASH.

        Tests: compositing/visible-rect/2d-transformed.html
               compositing/visible-rect/3d-transformed.html
               compositing/visible-rect/clipped-by-viewport copy.html
               compositing/visible-rect/clipped-by-viewport.html
               compositing/visible-rect/clipped-visible-rect.html

        * platform/graphics/ca/GraphicsLayerCA.cpp:
        (WebCore::GraphicsLayerCA::recursiveCommitChanges):
        (WebCore::GraphicsLayerCA::swapFromOrToTiledLayer):
        * platform/graphics/ca/GraphicsLayerCA.h:

2012-10-12  Pablo Flouret  <pablof@motorola.com>

        Teach GeneratorGObject about [ImplementedAs] extended attribute in functions
        https://bugs.webkit.org/show_bug.cgi?id=99214

        Reviewed by Kentaro Hara.

        No new tests, updated the binding tests results.

        * bindings/scripts/CodeGeneratorGObject.pm:
        (GenerateFunction):
        * bindings/scripts/test/GObject/WebKitDOMTestObj.cpp:
        (webkit_dom_test_obj_orange):

2012-10-12  Beth Dakin  <bdakin@apple.com>

        https://bugs.webkit.org/show_bug.cgi?id=99211
        When ScrollingStateNodes are destroyed, they should be removed 
        ScrollingCoordinator's HashMap

        Reviewed by Sam Weinig.

        This patch adds a new member variable to ScrollingStateTree. It's a 
        Vector of ScrollingNodeIDs. It will contain the IDs of nodes that 
        have been removed from the tree since the last time the tree was 
        committed.
        * page/scrolling/ScrollingStateTree.cpp:
        (WebCore::ScrollingStateTree::ScrollingStateTree):

        When we do commit, copy the Vector over into the cloned tree, and 
        then clear our own Vector.
        (WebCore::ScrollingStateTree::commit):

        Call didRemoveNode().
        (WebCore::ScrollingStateTree::removeNode):

        Append the removed node's id to the vector.
        (WebCore::ScrollingStateTree::didRemoveNode):
        (WebCore):
        * page/scrolling/ScrollingStateTree.h:
        (ScrollingStateTree):

        Call didRemoveNode().
        * page/scrolling/ScrollingStateNode.cpp:
        (WebCore::ScrollingStateNode::removeChild):

        Fix the FIXME!
        * page/scrolling/mac/ScrollingCoordinatorMac.mm:
        (WebCore::ScrollingCoordinatorMac::detachFromStateTree):

2012-10-12  Brady Eidson  <beidson@apple.com>

        Setup basic NetworkProcess messaging and initialization.
        https://bugs.webkit.org/show_bug.cgi?id=99198

        Reviewed by Sam Weinig.

        * English.lproj/Localizable.strings: Update for the Network Process UI name.

2012-10-12  Levi Weintraub  <leviw@chromium.org>

        Remove unnecessary mode identifiers added in r131111
        https://bugs.webkit.org/show_bug.cgi?id=99208

        Reviewed by Emil A Eklund.

        Removing unnecessary mode identifiers from coordinate conversion methods. These
        were added in http://trac.webkit.org/changeset/131111

        No new tests. No change in behavior.

        * rendering/RenderBox.h:
        (RenderBox):
        * rendering/RenderBoxModelObject.h:
        (RenderBoxModelObject):
        * rendering/RenderInline.h:
        (RenderInline):
        * rendering/RenderObject.h:
        (RenderObject):
        * rendering/RenderView.h:
        (RenderView):
        * rendering/svg/RenderSVGForeignObject.h:
        (RenderSVGForeignObject):
        * rendering/svg/RenderSVGInline.h:
        (RenderSVGInline):
        * rendering/svg/RenderSVGModelObject.h:
        (RenderSVGModelObject):
        * rendering/svg/RenderSVGRoot.h:
        (RenderSVGRoot):
        * rendering/svg/RenderSVGText.h:
        (RenderSVGText):

2012-10-12  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r131224.
        http://trac.webkit.org/changeset/131224
        https://bugs.webkit.org/show_bug.cgi?id=99210

        It broke the build (Requested by andersca on #webkit).

        * history/qt/HistoryItemQt.cpp:
        * platform/FractionalLayoutUnit.h:
        (WebCore):
        (WebCore::operator<<):
        (WebCore::operator>>):
        * platform/graphics/IntPoint.h:
        (WebCore):
        (WebCore::operator<<):
        (WebCore::operator>>):

2012-10-12  Anders Carlsson  <andersca@apple.com>

        Move QDataStream functions into HistoryItemQt.cpp
        https://bugs.webkit.org/show_bug.cgi?id=99203

        Reviewed by Andreas Kling.

        It seems like the QDataStream stream operators are only used from HistoryItemQt.cpp
        inside WebCore, so move them there. If in the future they are required elsewhere, they should
        be moved into a separate header instead of polluting headers unnecessarily.

        * history/qt/HistoryItemQt.cpp:
        (operator<<):
        (operator>>):
        * platform/FractionalLayoutUnit.h:
        * platform/graphics/IntPoint.h:

2012-10-12  Beth Dakin  <bdakin@apple.com>

        https://bugs.webkit.org/show_bug.cgi?id=99204
        ScrollingStateNodes should keep track of their IDs

        Reviewed by Simon Fraser.

        There is a HashMap in ScrollingCoordinatorMac that maps 
        ScrollingNodeIDs to ScrollingStateNodes. The nodes themselves should 
        keep track of this id. Then the id can be used to make sure 
        ScrollingStateNodes remove themselves from the HashMap when they are 
        destroyed, and it will also be useful for associating 
        ScrollingStateNodes with ScrollingTreeNodes over on the scrolling 
        thread.
  
        This patch only has the ScrollingStateNodes cache the id. I will 
        actually make use of the id in follow-up patches.

        * page/scrolling/ScrollingStateNode.cpp:
        (WebCore::ScrollingStateNode::ScrollingStateNode):
        * page/scrolling/ScrollingStateNode.h:
        (ScrollingStateNode):
        (WebCore::ScrollingStateNode::scrollingNodeID):
        * page/scrolling/ScrollingStateScrollingNode.cpp:
        (WebCore::ScrollingStateScrollingNode::create):
        (WebCore::ScrollingStateScrollingNode::ScrollingStateScrollingNode):
        * page/scrolling/ScrollingStateScrollingNode.h:
        (ScrollingStateScrollingNode):
        * page/scrolling/mac/ScrollingCoordinatorMac.mm:
        (WebCore::ScrollingCoordinatorMac::attachToStateTree):

2012-10-01  Jer Noble  <jer.noble@apple.com>

        Add LSKD support to MediaPlayerPrivateAVFoundation.
        https://bugs.webkit.org/show_bug.cgi?id=98090

        Reviewed by Anders Carlsson.

        Add support for LSKD key system to MediaPlayerPrivateAVFoundation.

        * platform/graphics/avfoundation/objc/MediaPlayerPrivateAVFoundationObjC.h:
        (MediaPlayerPrivateAVFoundationObjC): Add m_loaderDelegate, m_keyURIToRequestMap, and m_sessionToRequestMap.
        * platform/graphics/avfoundation/objc/MediaPlayerPrivateAVFoundationObjC.mm:
        (globalLoaderDelegateQueue): Static accessor for the dispatch queue to use for the loader delegate.
        (WebCore::MediaPlayerPrivateAVFoundationObjC::MediaPlayerPrivateAVFoundationObjC):
        (WebCore::MediaPlayerPrivateAVFoundationObjC::createAVAssetForURL): Add the loader delegate to the AVURLAsset.
        (WebCore::keySystemIsSupported): Convenience function; checks that the key system matches "com.apple.lskd"
        (WebCore::MediaPlayerPrivateAVFoundationObjC::extendedSupportsType): Check the key system matches.
        (WebCore::MediaPlayerPrivateAVFoundationObjC::shouldWaitForLoadingOfResource): Fire a needkey event with an initData containing
            the key URI.
        (WebCore::extractKeyURIKeyIdAndCertificateFromInitData): Extract the keyURI, keyID, and the app certificate from the initData.
        (WebCore::MediaPlayerPrivateAVFoundationObjC::generateKeyRequest): Generate a streaming key request from AVFoundation and 
            fire a keymessage event.
        (WebCore::MediaPlayerPrivateAVFoundationObjC::addKey): Pass to AVFoundation through the AVAssetResourceLoader.
        (WebCore::MediaPlayerPrivateAVFoundationObjC::cancelKeyRequest): Release the loader delegate.
        (-[WebCoreAVFLoaderDelegate initWithCallback:]): Simple constructor.
        (-[WebCoreAVFLoaderDelegate resourceLoader:shouldWaitForLoadingOfRequestedResource:]): Pass to the MediaPlayerPrivateAVFoundationObjC.

2012-10-12  James Simonsen  <simonjam@chromium.org>

        [RequestAnimationFrame] Remove vendor prefix
        https://bugs.webkit.org/show_bug.cgi?id=99116

        Reviewed by Adam Barth.

        Test: Existing rAF tests without prefix.

        * dom/Document.cpp:
        (WebCore::Document::requestAnimationFrame):
        (WebCore::Document::cancelAnimationFrame):
        * dom/Document.h:
        (Document):
        * page/DOMWindow.cpp:
        (WebCore::DOMWindow::requestAnimationFrame):
        (WebCore::DOMWindow::cancelAnimationFrame):
        * page/DOMWindow.h:
        (DOMWindow):
        * page/DOMWindow.idl:

2012-10-12  Andreas Kling  <kling@webkit.org>

        REGRESSION: Rapid memory growth calling DOM APIs with large strings.
        <http://webkit.org/b/98498>
        <rdar://problem/12443926>

        Reviewed by Geöff Gären and Änders Cärlssön.

        Prevent the selector query cache from growing indefinitely by setting a relaxed limit of 256 entries.
        If the cache fills up, remove a random entry before inserting a new one.

        While this is unlikely to be a problem on real websites, we definitely shouldn't be adding boundless
        caches to WebKit.

        * dom/SelectorQuery.cpp:
        (WebCore::SelectorQueryCache::add):

2012-10-12  Roger Fong  <roger_fong@apple.com>

        Update method signature for platformCALayerShowRepaintCounter in MediaPlayerPlayerPrivateAVFoundationCF's LayerClient class.
        https://bugs.webkit.org/show_bug.cgi?id=99190

        Reviewed by Simon Fraser.

        LayerClient's base class (PlatformCALayerClient) method signature for abstract method platformCALayerShowRepaintCounter
        was updated in http://trac.webkit.org/changeset/130676 so it needs to be changed in LayerClient as well.

        * platform/graphics/avfoundation/cf/MediaPlayerPrivateAVFoundationCF.cpp:
        (WebCore::LayerClient::platformCALayerShowRepaintCounter):

2012-10-12  Scott Graham  <scottmg@chromium.org>

        Local disable of stack corruption warning when compiling on VS2012
        https://bugs.webkit.org/show_bug.cgi?id=99106

        Reviewed by Ryosuke Niwa.

        Warning is:

        ...\FEConvolveMatrix.cpp(274) : warning C4789: buffer 'totals' of size 12 bytes will be overrun; 4 bytes will be written starting at offset 12.

        And similar at lines 281, 355, and 365. This appears to be incorrect
        as the writes at offset 12 occur only when preserveAlphaValues is
        false, and when it's false, totals will be 16 bytes long.

        No new tests.

        * platform/graphics/filters/FEConvolveMatrix.cpp:
        (WebCore):

2012-10-11  Emil A Eklund  <eae@chromium.org>

        [Sub pixel layout] Change RenderBox to not round logicalTop/Left for RenderReplaced
        https://bugs.webkit.org/show_bug.cgi?id=99108

        Reviewed by Levi Weintraub.

        Change RenderBox::computePositionedLogicalHeightReplaced and
        computePositionedLogicalWidthReplaced to not round position.

        Covered by existing tests.

        * rendering/InlineFlowBox.cpp:
        (WebCore::InlineFlowBox::placeBoxesInBlockDirection):
        Floor baselinePosition for replaced elements to match logic in
        RootInlineBox::ascentAndDescentForBox where the ascent is
        computed from the floored baselinePosition.
        
        * rendering/RenderBox.cpp:
        (WebCore::RenderBox::computePositionedLogicalWidthReplaced):
        (WebCore::RenderBox::computePositionedLogicalHeightReplaced):
        Remove .round() call for m_position, preserving precision.

2012-10-01  Jer Noble  <jer.noble@apple.com>

        Enable ENCRYPTED_MEDIA support on Mac.
        https://bugs.webkit.org/show_bug.cgi?id=98044

        Reviewed by Anders Carlsson.

        Enable the ENCRYPTED_MEDIA conditional on the Mac port.

        No new tests; Existing media/encrypted-media tests require org.w3.clearkey support, which is not implemented.

        * Configurations/FeatureDefines.xcconfig: Enable the ENCRYPTED_MEDIA flag.
        * DerivedSources.make: Add the MediaKeyError and MediaKeyEvent classes.
        * WebCore.xcodeproj/project.pbxproj: Ditto.
        * bindings/js/JSDictionary.cpp:
        (WebCore::JSDictionary::convertValue): Add convertValue functions for Uint8Array and MediaKeyError.
        * bindings/js/JSDictionary.h:
        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::mediaPlayerKeyNeeded): Throw an error if no "needkey"
            handler is registered.
        * html/HTMLMediaElement.h:
        * html/HTMLMediaElement.idl: Change keySystem to DefaultIsUndefined.
        * platform/graphics/MediaPlayer.cpp:
        (WebCore::MediaPlayer::keyNeeded): Return a bool indicating whether the process was aborted
            due to a lack of "needkey" listener.
        * platform/graphics/MediaPlayer.h:
        (WebCore::MediaPlayerClient::mediaPlayerKeyAdded): Remove unused parameter names.
        (WebCore::MediaPlayerClient::mediaPlayerKeyError): Ditto.
        (WebCore::MediaPlayerClient::mediaPlayerKeyMessage): Ditto.
        (WebCore::MediaPlayerClient::mediaPlayerKeyNeeded): Ditto.
        * platform/graphics/MediaPlayerPrivate.h:
        (WebCore::MediaPlayerPrivateInterface::addKey): Ditto.
        (WebCore::MediaPlayerPrivateInterface::generateKeyRequest): Ditto.
        (WebCore::MediaPlayerPrivateInterface::cancelKeyRequest): Ditto.
        * platform/graphics/avfoundation/objc/MediaPlayerPrivateAVFoundationObjC.h:
        * platform/graphics/avfoundation/objc/MediaPlayerPrivateAVFoundationObjC.mm:
        (WebCore::MediaPlayerPrivateAVFoundationObjC::registerMediaEngine): Call extendedSupportsType.
        (WebCore::MediaPlayerPrivateAVFoundationObjC::extendedSupportsType): Stub. Pass through to supportsType.
        * platform/graphics/mac/MediaPlayerPrivateQTKit.h:
        * platform/graphics/mac/MediaPlayerPrivateQTKit.mm:
        (WebCore::MediaPlayerPrivateQTKit::registerMediaEngine): Call extendedSupportsType.
        (WebCore::MediaPlayerPrivateQTKit::extendedSupportsType): Stub. Pass through to supportsType.

2012-10-12  Jaehun Lim  <ljaehun.lim@samsung.com>

        Check parameter's safety first
        https://bugs.webkit.org/show_bug.cgi?id=99136

        Reviewed by Chris Rogers.

        Pointer parameter was used before NULL checking.
        This patch moves safety checking statements to the head of the function.

        No new tests. No behavior change.

        * platform/audio/AudioChannel.cpp:
        (WebCore::AudioChannel::copyFromRange):
        (WebCore::AudioChannel::sumFrom):
        * platform/audio/EqualPowerPanner.cpp:
        (WebCore::EqualPowerPanner::pan):

2012-10-12  Andreas Kling  <kling@webkit.org>

        RenderBR should share its constant newline string between instances.
        <http://webkit.org/b/99121>

        Reviewed by Anders Carlsson.

        * rendering/RenderBR.cpp:
        (WebCore::newlineString):
        (WebCore::RenderBR::RenderBR):

2012-10-12  Alexander Pavlov  <apavlov@chromium.org>

        Web Inspector: [Styles] !important priority not honored inside the same declaration
        https://bugs.webkit.org/show_bug.cgi?id=99170

        Reviewed by Yury Semikhatsky.

        Property priorities were not considered inside the same CSS rule. !important properties should stay active
        even if followed by non-!important properties with the same name.

        * inspector/InspectorStyleSheet.cpp:
        (WebCore::InspectorStyle::styleWithProperties):
        * inspector/front-end/StylesSidebarPane.js:
        (WebInspector.StylePropertiesSection.prototype.onpopulate):
        (WebInspector.ComputedStylePropertiesSection.prototype.rebuildComputedTrace):

2012-10-12  Pavel Feldman  <pfeldman@chromium.org>

        Web Inspector: use hard-coded zoom factors instead of 1.2 powers.
        https://bugs.webkit.org/show_bug.cgi?id=99173

        Reviewed by Vsevolod Vlasov.

        Overwise we step too fast.

        * inspector/front-end/inspector.js:
        (WebInspector._zoomIn):
        (WebInspector._zoomOut):
        (WebInspector):

2012-10-12  Yury Semikhatsky  <yurys@chromium.org>

        Web Inspector: move delete watch expression farther from the expand triangle
        https://bugs.webkit.org/show_bug.cgi?id=99166

        Reviewed by Pavel Feldman.

        Aligned 'delete watch expression' button on the right side (was on the left) so
        that it is hard to click it when expanding watched value.

        * inspector/front-end/inspector.css:
        (.properties-tree.watch-expressions):
        (.section .properties .delete-button):

2012-10-12  Pavel Feldman  <pfeldman@chromium.org>

        Web Inspector: trim filename in the call stack sidebar
        https://bugs.webkit.org/show_bug.cgi?id=99169

        Reviewed by Yury Semikhatsky.

        Otherwise long file names are rendered poorly.

        * inspector/front-end/CallStackSidebarPane.js:
        (WebInspector.CallStackSidebarPane.Placard.prototype._update):
        * inspector/front-end/inspector.css:
        (.placard .subtitle):

2012-10-12  Vsevolod Vlasov  <vsevik@chromium.org>

        Web Inspector: Resume button in element inspector -> scripts has tooltip 'pause script execution'
        https://bugs.webkit.org/show_bug.cgi?id=99165

        Reviewed by Pavel Feldman.

        Pause/resume button title is now updated when debugger is paused/resumed.

        * English.lproj/localizedStrings.js:
        * inspector/front-end/ScriptsPanel.js:
        (WebInspector.ScriptsPanel.prototype._updateDebuggerButtons):
        (WebInspector.ScriptsPanel.prototype._createDebugToolbar):
        (WebInspector.ScriptsPanel.prototype._updateButtonTitle):
        (WebInspector.ScriptsPanel.prototype._createButtonAndRegisterShortcuts):

2012-10-12  Kentaro Hara  <haraken@chromium.org>

        Unreviewed. Fix run-binding-tests failures introduced in r131167.

        * bindings/scripts/CodeGeneratorV8.pm:
        (GenerateConstructorGetter):
        * bindings/scripts/test/V8/V8TestObj.cpp:
        (WebCore):
        (WebCore::TestObjV8Internal::TestObjConstructorGetter):
        (WebCore::V8TestObj::installPerContextProperties):
        (WebCore::V8TestObj::installPerContextPrototypeProperties):
        (WebCore::V8TestObj::wrapSlow):
        * bindings/scripts/test/V8/V8TestObj.h:
        (V8TestObj):

2012-10-12  Pavel Feldman  <pfeldman@chromium.org>

        Web Inspector: relies on current Function.prototype.bind in the frame
        https://bugs.webkit.org/show_bug.cgi?id=99164

        Reviewed by Yury Semikhatsky.

        InjectedScriptSource should not depend on the bind override.

        Test: inspector/console/console-bind-fake.html

        * inspector/InjectedScriptSource.js:
        (.):

2012-10-12  Alexander Pavlov  <apavlov@chromium.org>

        Web Inspector: [Styles] Colors should be "As authored" by default
        https://bugs.webkit.org/show_bug.cgi?id=99017

        Reviewed by Vsevolod Vlasov.

        Use "original" as the default value of WebInspector.settings.colorFormat.

        * inspector/front-end/Settings.js:

2012-10-12  Takashi Sakamoto  <tasak@google.com>

        [WebKit IDL] move extended attributes to left of interface, exception...
        https://bugs.webkit.org/show_bug.cgi?id=99012

        Reviewed by Kentaro Hara.

        According to WebIDL spec, moved all extended attributes to the left
        of interface / attribute / readonly attribute / exception.

        No new tests. I ran run-bindings-tests and all tests passed.

        * Modules/battery/BatteryManager.idl:
        * Modules/battery/NavigatorBattery.idl:
        * Modules/filesystem/DOMFileSystem.idl:
        * Modules/filesystem/DOMFileSystemSync.idl:
        * Modules/filesystem/DOMWindowFileSystem.idl:
        * Modules/filesystem/DataTransferItemFileSystem.idl:
        * Modules/filesystem/DirectoryEntry.idl:
        * Modules/filesystem/DirectoryEntrySync.idl:
        * Modules/filesystem/DirectoryReader.idl:
        * Modules/filesystem/DirectoryReaderSync.idl:
        * Modules/filesystem/EntriesCallback.idl:
        * Modules/filesystem/Entry.idl:
        * Modules/filesystem/EntryArray.idl:
        * Modules/filesystem/EntryArraySync.idl:
        * Modules/filesystem/EntryCallback.idl:
        * Modules/filesystem/EntrySync.idl:
        * Modules/filesystem/ErrorCallback.idl:
        * Modules/filesystem/FileCallback.idl:
        * Modules/filesystem/FileEntry.idl:
        * Modules/filesystem/FileEntrySync.idl:
        * Modules/filesystem/FileSystemCallback.idl:
        * Modules/filesystem/FileWriter.idl:
        * Modules/filesystem/FileWriterCallback.idl:
        * Modules/filesystem/FileWriterSync.idl:
        * Modules/filesystem/HTMLInputElementFileSystem.idl:
        * Modules/filesystem/Metadata.idl:
        * Modules/filesystem/MetadataCallback.idl:
        * Modules/filesystem/WorkerContextFileSystem.idl:
        * Modules/gamepad/Gamepad.idl:
        * Modules/gamepad/GamepadList.idl:
        * Modules/gamepad/NavigatorGamepad.idl:
        * Modules/geolocation/Geolocation.idl:
        * Modules/geolocation/Geoposition.idl:
        * Modules/geolocation/NavigatorGeolocation.idl:
        * Modules/geolocation/PositionCallback.idl:
        * Modules/geolocation/PositionError.idl:
        * Modules/geolocation/PositionErrorCallback.idl:
        * Modules/indexeddb/DOMWindowIndexedDatabase.idl:
        * Modules/indexeddb/IDBAny.idl:
        * Modules/indexeddb/IDBCursor.idl:
        * Modules/indexeddb/IDBCursorWithValue.idl:
        * Modules/indexeddb/IDBDatabase.idl:
        * Modules/indexeddb/IDBDatabaseException.idl:
        * Modules/indexeddb/IDBFactory.idl:
        * Modules/indexeddb/IDBIndex.idl:
        * Modules/indexeddb/IDBKey.idl:
        * Modules/indexeddb/IDBKeyRange.idl:
        * Modules/indexeddb/IDBObjectStore.idl:
        * Modules/indexeddb/IDBOpenDBRequest.idl:
        * Modules/indexeddb/IDBRequest.idl:
        * Modules/indexeddb/IDBTransaction.idl:
        * Modules/indexeddb/IDBUpgradeNeededEvent.idl:
        * Modules/indexeddb/IDBVersionChangeEvent.idl:
        * Modules/indexeddb/IDBVersionChangeRequest.idl:
        * Modules/indexeddb/WorkerContextIndexedDatabase.idl:
        * Modules/intents/DOMWindowIntents.idl:
        * Modules/intents/DeliveredIntent.idl:
        * Modules/intents/NavigatorIntents.idl:
        * Modules/mediasource/MediaSource.idl:
        * Modules/mediasource/SourceBuffer.idl:
        * Modules/mediasource/SourceBufferList.idl:
        * Modules/mediastream/DOMWindowMediaStream.idl:
        * Modules/mediastream/IceCallback.idl:
        * Modules/mediastream/IceCandidate.idl:
        * Modules/mediastream/LocalMediaStream.idl:
        * Modules/mediastream/MediaStream.idl:
        * Modules/mediastream/MediaStreamEvent.idl:
        * Modules/mediastream/MediaStreamList.idl:
        * Modules/mediastream/MediaStreamTrack.idl:
        * Modules/mediastream/MediaStreamTrackEvent.idl:
        * Modules/mediastream/MediaStreamTrackList.idl:
        * Modules/mediastream/NavigatorMediaStream.idl:
        * Modules/mediastream/NavigatorUserMediaError.idl:
        * Modules/mediastream/NavigatorUserMediaErrorCallback.idl:
        * Modules/mediastream/NavigatorUserMediaSuccessCallback.idl:
        * Modules/mediastream/PeerConnection00.idl:
        * Modules/mediastream/RTCErrorCallback.idl:
        * Modules/mediastream/RTCIceCandidate.idl:
        * Modules/mediastream/RTCIceCandidateEvent.idl:
        * Modules/mediastream/RTCPeerConnection.idl:
        * Modules/mediastream/RTCSessionDescription.idl:
        * Modules/mediastream/RTCSessionDescriptionCallback.idl:
        * Modules/mediastream/RTCStatsCallback.idl:
        * Modules/mediastream/RTCStatsElement.idl:
        * Modules/mediastream/RTCStatsReport.idl:
        * Modules/mediastream/RTCStatsResponse.idl:
        * Modules/mediastream/SessionDescription.idl:
        * Modules/navigatorcontentutils/NavigatorContentUtils.idl:
        * Modules/networkinfo/NavigatorNetworkInfoConnection.idl:
        * Modules/networkinfo/NetworkInfoConnection.idl:
        * Modules/notifications/DOMWindowNotifications.idl:
        * Modules/notifications/Notification.idl:
        * Modules/notifications/NotificationCenter.idl:
        * Modules/notifications/NotificationPermissionCallback.idl:
        * Modules/notifications/WorkerContextNotifications.idl:
        * Modules/proximity/DeviceProximityEvent.idl:
        * Modules/quota/DOMWindowQuota.idl:
        * Modules/quota/StorageInfo.idl:
        * Modules/quota/StorageInfoErrorCallback.idl:
        * Modules/quota/StorageInfoQuotaCallback.idl:
        * Modules/quota/StorageInfoUsageCallback.idl:
        * Modules/speech/DOMWindowSpeech.idl:
        * Modules/speech/SpeechGrammar.idl:
        * Modules/speech/SpeechGrammarList.idl:
        * Modules/speech/SpeechRecognition.idl:
        * Modules/speech/SpeechRecognitionAlternative.idl:
        * Modules/speech/SpeechRecognitionError.idl:
        * Modules/speech/SpeechRecognitionEvent.idl:
        * Modules/speech/SpeechRecognitionResult.idl:
        * Modules/speech/SpeechRecognitionResultList.idl:
        * Modules/vibration/NavigatorVibration.idl:
        * Modules/webaudio/AudioBuffer.idl:
        * Modules/webaudio/AudioBufferCallback.idl:
        * Modules/webaudio/AudioBufferSourceNode.idl:
        * Modules/webaudio/AudioChannelMerger.idl:
        * Modules/webaudio/AudioChannelSplitter.idl:
        * Modules/webaudio/AudioContext.idl:
        * Modules/webaudio/AudioDestinationNode.idl:
        * Modules/webaudio/AudioGain.idl:
        * Modules/webaudio/AudioGainNode.idl:
        * Modules/webaudio/AudioListener.idl:
        * Modules/webaudio/AudioNode.idl:
        * Modules/webaudio/AudioPannerNode.idl:
        * Modules/webaudio/AudioParam.idl:
        * Modules/webaudio/AudioProcessingEvent.idl:
        * Modules/webaudio/AudioSourceNode.idl:
        * Modules/webaudio/BiquadFilterNode.idl:
        * Modules/webaudio/ConvolverNode.idl:
        * Modules/webaudio/DOMWindowWebAudio.idl:
        * Modules/webaudio/DelayNode.idl:
        * Modules/webaudio/DynamicsCompressorNode.idl:
        * Modules/webaudio/JavaScriptAudioNode.idl:
        * Modules/webaudio/MediaElementAudioSourceNode.idl:
        * Modules/webaudio/MediaStreamAudioSourceNode.idl:
        * Modules/webaudio/OfflineAudioCompletionEvent.idl:
        * Modules/webaudio/Oscillator.idl:
        * Modules/webaudio/RealtimeAnalyserNode.idl:
        * Modules/webaudio/WaveShaperNode.idl:
        * Modules/webaudio/WaveTable.idl:
        * Modules/webdatabase/DOMWindowWebDatabase.idl:
        * Modules/webdatabase/Database.idl:
        * Modules/webdatabase/DatabaseCallback.idl:
        * Modules/webdatabase/DatabaseSync.idl:
        * Modules/webdatabase/SQLError.idl:
        * Modules/webdatabase/SQLException.idl:
        * Modules/webdatabase/SQLResultSet.idl:
        * Modules/webdatabase/SQLResultSetRowList.idl:
        * Modules/webdatabase/SQLStatementCallback.idl:
        * Modules/webdatabase/SQLStatementErrorCallback.idl:
        * Modules/webdatabase/SQLTransaction.idl:
        * Modules/webdatabase/SQLTransactionCallback.idl:
        * Modules/webdatabase/SQLTransactionErrorCallback.idl:
        * Modules/webdatabase/SQLTransactionSync.idl:
        * Modules/webdatabase/SQLTransactionSyncCallback.idl:
        * Modules/webdatabase/WorkerContextWebDatabase.idl:
        * Modules/websockets/CloseEvent.idl:
        * Modules/websockets/DOMWindowWebSocket.idl:
        * Modules/websockets/WebSocket.idl:
        * Modules/websockets/WorkerContextWebSocket.idl:
        * bindings/scripts/test/TestCallback.idl:
        * bindings/scripts/test/TestCustomNamedGetter.idl:
        * bindings/scripts/test/TestDomainSecurity.idl:
        * bindings/scripts/test/TestEventConstructor.idl:
        * bindings/scripts/test/TestEventTarget.idl:
        * bindings/scripts/test/TestInterface.idl:
        * bindings/scripts/test/TestNamedConstructor.idl:
        * bindings/scripts/test/TestNode.idl:
        * bindings/scripts/test/TestObj.idl:
        * bindings/scripts/test/TestSerializedScriptValueInterface.idl:
        * bindings/scripts/test/TestSupplemental.idl:
        * bindings/scripts/test/TestTypedArray.idl:
        * css/CSSCharsetRule.idl:
        * css/CSSImportRule.idl:
        * css/CSSPageRule.idl:
        * css/CSSRule.idl:
        * css/CSSRuleList.idl:
        * css/CSSStyleDeclaration.idl:
        * css/CSSStyleRule.idl:
        * css/CSSStyleSheet.idl:
        * css/CSSUnknownRule.idl:
        * css/CSSValue.idl:
        * css/CSSValueList.idl:
        * css/MediaList.idl:
        * css/MediaQueryListListener.idl:
        * css/StyleMedia.idl:
        * css/StyleSheet.idl:
        * css/StyleSheetList.idl:
        * css/WebKitCSSFilterValue.idl:
        * css/WebKitCSSKeyframesRule.idl:
        * css/WebKitCSSMatrix.idl:
        * css/WebKitCSSRegionRule.idl:
        * css/WebKitCSSTransformValue.idl:
        * dom/Attr.idl:
        * dom/BeforeLoadEvent.idl:
        * dom/CharacterData.idl:
        * dom/ClientRectList.idl:
        * dom/Clipboard.idl:
        * dom/CustomEvent.idl:
        * dom/DOMCoreException.idl:
        * dom/DOMImplementation.idl:
        * dom/DOMNamedFlowCollection.idl:
        * dom/DOMStringList.idl:
        * dom/DOMStringMap.idl:
        * dom/DataTransferItem.idl:
        * dom/DataTransferItemList.idl:
        * dom/DeviceMotionEvent.idl:
        * dom/DeviceOrientationEvent.idl:
        * dom/Document.idl:
        * dom/DocumentType.idl:
        * dom/Element.idl:
        * dom/Entity.idl:
        * dom/ErrorEvent.idl:
        * dom/Event.idl:
        * dom/EventException.idl:
        * dom/EventListener.idl:
        * dom/EventTarget.idl:
        * dom/HashChangeEvent.idl:
        * dom/MessageChannel.idl:
        * dom/MessageEvent.idl:
        * dom/MessagePort.idl:
        * dom/MouseEvent.idl:
        * dom/MutationCallback.idl:
        * dom/MutationObserver.idl:
        * dom/MutationRecord.idl:
        * dom/NamedNodeMap.idl:
        * dom/Node.idl:
        * dom/NodeFilter.idl:
        * dom/NodeIterator.idl:
        * dom/NodeList.idl:
        * dom/Notation.idl:
        * dom/OverflowEvent.idl:
        * dom/PageTransitionEvent.idl:
        * dom/PopStateEvent.idl:
        * dom/ProcessingInstruction.idl:
        * dom/ProgressEvent.idl:
        * dom/PropertyNodeList.idl:
        * dom/RangeException.idl:
        * dom/RequestAnimationFrameCallback.idl:
        * dom/ShadowRoot.idl:
        * dom/StringCallback.idl:
        * dom/Touch.idl:
        * dom/TouchEvent.idl:
        * dom/TouchList.idl:
        * dom/TreeWalker.idl:
        * dom/WebKitAnimationEvent.idl:
        * dom/WebKitNamedFlow.idl:
        * dom/WebKitTransitionEvent.idl:
        * editing/DOMTransaction.idl:
        * editing/UndoManager.idl:
        * fileapi/Blob.idl:
        * fileapi/File.idl:
        * fileapi/FileError.idl:
        * fileapi/FileException.idl:
        * fileapi/FileList.idl:
        * fileapi/FileReader.idl:
        * fileapi/FileReaderSync.idl:
        * html/DOMFormData.idl:
        * html/DOMSettableTokenList.idl:
        * html/DOMTokenList.idl:
        * html/DOMURL.idl:
        * html/HTMLAllCollection.idl:
        * html/HTMLAnchorElement.idl:
        * html/HTMLAppletElement.idl:
        * html/HTMLAreaElement.idl:
        * html/HTMLAudioElement.idl:
        * html/HTMLBRElement.idl:
        * html/HTMLBaseElement.idl:
        * html/HTMLBaseFontElement.idl:
        * html/HTMLBodyElement.idl:
        * html/HTMLButtonElement.idl:
        * html/HTMLCanvasElement.idl:
        * html/HTMLCollection.idl:
        * html/HTMLDListElement.idl:
        * html/HTMLDataListElement.idl:
        * html/HTMLDetailsElement.idl:
        * html/HTMLDialogElement.idl:
        * html/HTMLDirectoryElement.idl:
        * html/HTMLDivElement.idl:
        * html/HTMLDocument.idl:
        * html/HTMLElement.idl:
        * html/HTMLEmbedElement.idl:
        * html/HTMLFieldSetElement.idl:
        * html/HTMLFontElement.idl:
        * html/HTMLFormElement.idl:
        * html/HTMLFrameElement.idl:
        * html/HTMLFrameSetElement.idl:
        * html/HTMLHRElement.idl:
        * html/HTMLHeadElement.idl:
        * html/HTMLHeadingElement.idl:
        * html/HTMLHtmlElement.idl:
        * html/HTMLIFrameElement.idl:
        * html/HTMLImageElement.idl:
        * html/HTMLInputElement.idl:
        * html/HTMLIntentElement.idl:
        * html/HTMLKeygenElement.idl:
        * html/HTMLLIElement.idl:
        * html/HTMLLabelElement.idl:
        * html/HTMLLegendElement.idl:
        * html/HTMLLinkElement.idl:
        * html/HTMLMapElement.idl:
        * html/HTMLMarqueeElement.idl:
        * html/HTMLMediaElement.idl:
        * html/HTMLMenuElement.idl:
        * html/HTMLMetaElement.idl:
        * html/HTMLMeterElement.idl:
        * html/HTMLModElement.idl:
        * html/HTMLOListElement.idl:
        * html/HTMLObjectElement.idl:
        * html/HTMLOptGroupElement.idl:
        * html/HTMLOptionElement.idl:
        * html/HTMLOptionsCollection.idl:
        * html/HTMLOutputElement.idl:
        * html/HTMLParagraphElement.idl:
        * html/HTMLParamElement.idl:
        * html/HTMLPreElement.idl:
        * html/HTMLProgressElement.idl:
        * html/HTMLPropertiesCollection.idl:
        * html/HTMLQuoteElement.idl:
        * html/HTMLScriptElement.idl:
        * html/HTMLSelectElement.idl:
        * html/HTMLSourceElement.idl:
        * html/HTMLStyleElement.idl:
        * html/HTMLTableCaptionElement.idl:
        * html/HTMLTableCellElement.idl:
        * html/HTMLTableColElement.idl:
        * html/HTMLTableElement.idl:
        * html/HTMLTableRowElement.idl:
        * html/HTMLTableSectionElement.idl:
        * html/HTMLTextAreaElement.idl:
        * html/HTMLTitleElement.idl:
        * html/HTMLTrackElement.idl:
        * html/HTMLUListElement.idl:
        * html/HTMLVideoElement.idl:
        * html/ImageData.idl:
        * html/MediaController.idl:
        * html/MediaError.idl:
        * html/MediaKeyError.idl:
        * html/MediaKeyEvent.idl:
        * html/MicroDataItemValue.idl:
        * html/RadioNodeList.idl:
        * html/TimeRanges.idl:
        * html/ValidityState.idl:
        * html/VoidCallback.idl:
        * html/canvas/ArrayBuffer.idl:
        * html/canvas/ArrayBufferView.idl:
        * html/canvas/CanvasRenderingContext.idl:
        * html/canvas/CanvasRenderingContext2D.idl:
        * html/canvas/DataView.idl:
        * html/canvas/EXTTextureFilterAnisotropic.idl:
        * html/canvas/Float32Array.idl:
        * html/canvas/Float64Array.idl:
        * html/canvas/Int16Array.idl:
        * html/canvas/Int32Array.idl:
        * html/canvas/Int8Array.idl:
        * html/canvas/OESStandardDerivatives.idl:
        * html/canvas/OESTextureFloat.idl:
        * html/canvas/OESVertexArrayObject.idl:
        * html/canvas/Uint16Array.idl:
        * html/canvas/Uint32Array.idl:
        * html/canvas/Uint8Array.idl:
        * html/canvas/Uint8ClampedArray.idl:
        * html/canvas/WebGLActiveInfo.idl:
        * html/canvas/WebGLBuffer.idl:
        * html/canvas/WebGLCompressedTextureS3TC.idl:
        * html/canvas/WebGLContextAttributes.idl:
        * html/canvas/WebGLContextEvent.idl:
        * html/canvas/WebGLDebugRendererInfo.idl:
        * html/canvas/WebGLDebugShaders.idl:
        * html/canvas/WebGLDepthTexture.idl:
        * html/canvas/WebGLFramebuffer.idl:
        * html/canvas/WebGLLoseContext.idl:
        * html/canvas/WebGLProgram.idl:
        * html/canvas/WebGLRenderbuffer.idl:
        * html/canvas/WebGLRenderingContext.idl:
        * html/canvas/WebGLShader.idl:
        * html/canvas/WebGLShaderPrecisionFormat.idl:
        * html/canvas/WebGLTexture.idl:
        * html/canvas/WebGLUniformLocation.idl:
        * html/canvas/WebGLVertexArrayObjectOES.idl:
        * html/shadow/HTMLContentElement.idl:
        * html/shadow/HTMLShadowElement.idl:
        * html/track/TextTrack.idl:
        * html/track/TextTrackCue.idl:
        * html/track/TextTrackCueList.idl:
        * html/track/TextTrackList.idl:
        * html/track/TrackEvent.idl:
        * inspector/InjectedScriptHost.idl:
        * inspector/InspectorFrontendHost.idl:
        * inspector/JavaScriptCallFrame.idl:
        * inspector/ScriptProfile.idl:
        * inspector/ScriptProfileNode.idl:
        * loader/appcache/DOMApplicationCache.idl:
        * page/AbstractView.idl:
        * page/BarInfo.idl:
        * page/Console.idl:
        * page/Coordinates.idl:
        * page/Crypto.idl:
        * page/DOMSecurityPolicy.idl:
        * page/DOMSelection.idl:
        * page/DOMWindow.idl:
        * page/DOMWindowPagePopup.idl:
        * page/EventSource.idl:
        * page/History.idl:
        * page/Location.idl:
        * page/MemoryInfo.idl:
        * page/Navigator.idl:
        * page/PagePopupController.idl:
        * page/Performance.idl:
        * page/PerformanceEntry.idl:
        * page/PerformanceEntryList.idl:
        * page/PerformanceNavigation.idl:
        * page/PerformanceResourceTiming.idl:
        * page/PerformanceTiming.idl:
        * page/Screen.idl:
        * page/SpeechInputEvent.idl:
        * page/SpeechInputResult.idl:
        * page/SpeechInputResultList.idl:
        * page/WebKitAnimation.idl:
        * page/WebKitAnimationList.idl:
        * page/WebKitPoint.idl:
        * page/WorkerNavigator.idl:
        * plugins/DOMMimeType.idl:
        * plugins/DOMMimeTypeArray.idl:
        * plugins/DOMPlugin.idl:
        * plugins/DOMPluginArray.idl:
        * storage/Storage.idl:
        * storage/StorageEvent.idl:
        * svg/ElementTimeControl.idl:
        * svg/SVGAElement.idl:
        * svg/SVGAltGlyphDefElement.idl:
        * svg/SVGAltGlyphElement.idl:
        * svg/SVGAltGlyphItemElement.idl:
        * svg/SVGAngle.idl:
        * svg/SVGAnimateColorElement.idl:
        * svg/SVGAnimateElement.idl:
        * svg/SVGAnimateMotionElement.idl:
        * svg/SVGAnimateTransformElement.idl:
        * svg/SVGAnimatedAngle.idl:
        * svg/SVGAnimatedBoolean.idl:
        * svg/SVGAnimatedEnumeration.idl:
        * svg/SVGAnimatedInteger.idl:
        * svg/SVGAnimatedLength.idl:
        * svg/SVGAnimatedLengthList.idl:
        * svg/SVGAnimatedNumber.idl:
        * svg/SVGAnimatedNumberList.idl:
        * svg/SVGAnimatedPreserveAspectRatio.idl:
        * svg/SVGAnimatedRect.idl:
        * svg/SVGAnimatedString.idl:
        * svg/SVGAnimatedTransformList.idl:
        * svg/SVGAnimationElement.idl:
        * svg/SVGCircleElement.idl:
        * svg/SVGClipPathElement.idl:
        * svg/SVGColor.idl:
        * svg/SVGComponentTransferFunctionElement.idl:
        * svg/SVGCursorElement.idl:
        * svg/SVGDefsElement.idl:
        * svg/SVGDescElement.idl:
        * svg/SVGDocument.idl:
        * svg/SVGElement.idl:
        * svg/SVGElementInstance.idl:
        * svg/SVGElementInstanceList.idl:
        * svg/SVGEllipseElement.idl:
        * svg/SVGException.idl:
        * svg/SVGExternalResourcesRequired.idl:
        * svg/SVGFEBlendElement.idl:
        * svg/SVGFEColorMatrixElement.idl:
        * svg/SVGFEComponentTransferElement.idl:
        * svg/SVGFECompositeElement.idl:
        * svg/SVGFEConvolveMatrixElement.idl:
        * svg/SVGFEDiffuseLightingElement.idl:
        * svg/SVGFEDisplacementMapElement.idl:
        * svg/SVGFEDistantLightElement.idl:
        * svg/SVGFEDropShadowElement.idl:
        * svg/SVGFEFloodElement.idl:
        * svg/SVGFEFuncAElement.idl:
        * svg/SVGFEFuncBElement.idl:
        * svg/SVGFEFuncGElement.idl:
        * svg/SVGFEFuncRElement.idl:
        * svg/SVGFEGaussianBlurElement.idl:
        * svg/SVGFEImageElement.idl:
        * svg/SVGFEMergeElement.idl:
        * svg/SVGFEMergeNodeElement.idl:
        * svg/SVGFEMorphologyElement.idl:
        * svg/SVGFEOffsetElement.idl:
        * svg/SVGFEPointLightElement.idl:
        * svg/SVGFESpecularLightingElement.idl:
        * svg/SVGFESpotLightElement.idl:
        * svg/SVGFETileElement.idl:
        * svg/SVGFETurbulenceElement.idl:
        * svg/SVGFilterElement.idl:
        * svg/SVGFilterPrimitiveStandardAttributes.idl:
        * svg/SVGFitToViewBox.idl:
        * svg/SVGFontElement.idl:
        * svg/SVGFontFaceElement.idl:
        * svg/SVGFontFaceFormatElement.idl:
        * svg/SVGFontFaceNameElement.idl:
        * svg/SVGFontFaceSrcElement.idl:
        * svg/SVGFontFaceUriElement.idl:
        * svg/SVGForeignObjectElement.idl:
        * svg/SVGGElement.idl:
        * svg/SVGGlyphElement.idl:
        * svg/SVGGlyphRefElement.idl:
        * svg/SVGGradientElement.idl:
        * svg/SVGHKernElement.idl:
        * svg/SVGImageElement.idl:
        * svg/SVGLangSpace.idl:
        * svg/SVGLength.idl:
        * svg/SVGLengthList.idl:
        * svg/SVGLineElement.idl:
        * svg/SVGLinearGradientElement.idl:
        * svg/SVGLocatable.idl:
        * svg/SVGMPathElement.idl:
        * svg/SVGMarkerElement.idl:
        * svg/SVGMaskElement.idl:
        * svg/SVGMatrix.idl:
        * svg/SVGMetadataElement.idl:
        * svg/SVGMissingGlyphElement.idl:
        * svg/SVGNumber.idl:
        * svg/SVGNumberList.idl:
        * svg/SVGPaint.idl:
        * svg/SVGPathElement.idl:
        * svg/SVGPathSeg.idl:
        * svg/SVGPathSegArcAbs.idl:
        * svg/SVGPathSegArcRel.idl:
        * svg/SVGPathSegClosePath.idl:
        * svg/SVGPathSegCurvetoCubicAbs.idl:
        * svg/SVGPathSegCurvetoCubicRel.idl:
        * svg/SVGPathSegCurvetoCubicSmoothAbs.idl:
        * svg/SVGPathSegCurvetoCubicSmoothRel.idl:
        * svg/SVGPathSegCurvetoQuadraticAbs.idl:
        * svg/SVGPathSegCurvetoQuadraticRel.idl:
        * svg/SVGPathSegCurvetoQuadraticSmoothAbs.idl:
        * svg/SVGPathSegCurvetoQuadraticSmoothRel.idl:
        * svg/SVGPathSegLinetoAbs.idl:
        * svg/SVGPathSegLinetoHorizontalAbs.idl:
        * svg/SVGPathSegLinetoHorizontalRel.idl:
        * svg/SVGPathSegLinetoRel.idl:
        * svg/SVGPathSegLinetoVerticalAbs.idl:
        * svg/SVGPathSegLinetoVerticalRel.idl:
        * svg/SVGPathSegList.idl:
        * svg/SVGPathSegMovetoAbs.idl:
        * svg/SVGPathSegMovetoRel.idl:
        * svg/SVGPatternElement.idl:
        * svg/SVGPoint.idl:
        * svg/SVGPointList.idl:
        * svg/SVGPolygonElement.idl:
        * svg/SVGPolylineElement.idl:
        * svg/SVGPreserveAspectRatio.idl:
        * svg/SVGRadialGradientElement.idl:
        * svg/SVGRect.idl:
        * svg/SVGRectElement.idl:
        * svg/SVGRenderingIntent.idl:
        * svg/SVGSVGElement.idl:
        * svg/SVGScriptElement.idl:
        * svg/SVGSetElement.idl:
        * svg/SVGStopElement.idl:
        * svg/SVGStringList.idl:
        * svg/SVGStylable.idl:
        * svg/SVGStyleElement.idl:
        * svg/SVGSwitchElement.idl:
        * svg/SVGSymbolElement.idl:
        * svg/SVGTRefElement.idl:
        * svg/SVGTSpanElement.idl:
        * svg/SVGTests.idl:
        * svg/SVGTextContentElement.idl:
        * svg/SVGTextElement.idl:
        * svg/SVGTextPathElement.idl:
        * svg/SVGTextPositioningElement.idl:
        * svg/SVGTitleElement.idl:
        * svg/SVGTransform.idl:
        * svg/SVGTransformList.idl:
        * svg/SVGTransformable.idl:
        * svg/SVGURIReference.idl:
        * svg/SVGUnitTypes.idl:
        * svg/SVGUseElement.idl:
        * svg/SVGVKernElement.idl:
        * svg/SVGViewElement.idl:
        * svg/SVGViewSpec.idl:
        * svg/SVGZoomAndPan.idl:
        * svg/SVGZoomEvent.idl:
        * testing/InternalSettings.idl:
        * testing/Internals.idl:
        * testing/MallocStatistics.idl:
        * workers/AbstractWorker.idl:
        * workers/DedicatedWorkerContext.idl:
        * workers/SharedWorker.idl:
        * workers/SharedWorkerContext.idl:
        * workers/Worker.idl:
        * workers/WorkerContext.idl:
        * workers/WorkerLocation.idl:
        * xml/DOMParser.idl:
        * xml/XMLHttpRequest.idl:
        * xml/XMLHttpRequestException.idl:
        * xml/XMLHttpRequestProgressEvent.idl:
        * xml/XMLHttpRequestUpload.idl:
        * xml/XMLSerializer.idl:
        * xml/XPathEvaluator.idl:
        * xml/XPathException.idl:
        * xml/XPathNSResolver.idl:
        * xml/XPathResult.idl:
        * xml/XSLTProcessor.idl:
        Moved extended attributes.

2012-10-12  Pavel Feldman  <pfeldman@chromium.org>

        Web Inspector: never expand global scope automatically
        https://bugs.webkit.org/show_bug.cgi?id=99159

        Reviewed by Vsevolod Vlasov.

        Otherwise, stepping is slow.

        * inspector/front-end/ScopeChainSidebarPane.js:
        (WebInspector.ScopeChainSidebarPane.prototype.update):

2012-10-10  Vsevolod Vlasov  <vsevik@chromium.org>

        Web Inspector: Refactor UISourceCode, make it possible to distinguish working copy changes/commits from formatting.
        https://bugs.webkit.org/show_bug.cgi?id=98911

        Reviewed by Pavel Feldman.

        ContentChanged was dispatched both when working copy was committed and UISourceCode was formatted before.
        WorkingCopyChanged event was dispatched when working copy was set.
        Now there are three explicit events: WorkingCopyChanged, WorkingCopyCommitted, FormattedChanged.
        No events are dispatched now during revisions restoring.
        Reverting to revisions is now implemented based on the working copy editing.

        * inspector/front-end/JavaScriptSourceFrame.js:
        (WebInspector.JavaScriptSourceFrame):
        (WebInspector.JavaScriptSourceFrame.prototype._onFormattedChanged):
        (WebInspector.JavaScriptSourceFrame.prototype._onWorkingCopyChanged):
        (WebInspector.JavaScriptSourceFrame.prototype._onWorkingCopyCommitted):
        (WebInspector.JavaScriptSourceFrame.prototype._innerSetContent):
        (WebInspector.JavaScriptSourceFrame.prototype.onTextChanged):
        * inspector/front-end/NavigatorView.js:
        (WebInspector.NavigatorView.prototype._uiSourceCodeWorkingCopyCommitted):
        (WebInspector.NavigatorView.prototype._uiSourceCodeFormattedChanged):
        (WebInspector.NavigatorView.prototype._addUISourceCodeListeners):
        (WebInspector.NavigatorView.prototype._removeUISourceCodeListeners):
        * inspector/front-end/TabbedEditorContainer.js:
        (WebInspector.TabbedEditorContainer.prototype._addUISourceCodeListeners):
        (WebInspector.TabbedEditorContainer.prototype._removeUISourceCodeListeners):
        (WebInspector.TabbedEditorContainer.prototype._uiSourceCodeWorkingCopyCommitted):
        (WebInspector.TabbedEditorContainer.prototype._uiSourceCodeFormattedChanged):
        * inspector/front-end/UISourceCode.js:
        (WebInspector.UISourceCode):
        (WebInspector.UISourceCode.prototype._commitContent):
        (WebInspector.UISourceCode.prototype.addRevision):
        (WebInspector.UISourceCode.prototype._restoreRevisionHistory):
        (WebInspector.UISourceCode.prototype.revertToOriginal):
        (WebInspector.UISourceCode.prototype.revertAndClearHistory):
        (WebInspector.UISourceCode.prototype.setWorkingCopy):
        (WebInspector.UISourceCode.prototype.commitWorkingCopy):
        (WebInspector.UISourceCode.prototype.setFormatted.didGetContent.formattedChanged):
        (WebInspector.UISourceCode.prototype.setFormatted.didGetContent):
        (WebInspector.UISourceCode.prototype.setFormatted):
        (WebInspector.Revision.prototype.revertToThis):
        * inspector/front-end/UISourceCodeFrame.js:
        (WebInspector.UISourceCodeFrame):
        (WebInspector.UISourceCodeFrame.prototype.onTextChanged):
        (WebInspector.UISourceCodeFrame.prototype._onFormattedChanged):
        (WebInspector.UISourceCodeFrame.prototype._onWorkingCopyChanged):
        (WebInspector.UISourceCodeFrame.prototype._onWorkingCopyCommitted):
        (WebInspector.UISourceCodeFrame.prototype._innerSetContent):

2012-10-12  Balazs Kelemen  <kbalazs@webkit.org>

        [WK2] Serialization of Resource[Request,Response,Error] should be shared across ports
        https://bugs.webkit.org/show_bug.cgi?id=90142

        Reviewed by Simon Hausmann.

        Added a setter for the certificate of ResourceError.

        No change in behavior so no new tests.

        * platform/network/cf/ResourceError.h:
        (ResourceError):
        * platform/network/cf/ResourceErrorCF.cpp:
        (WebCore):
        (WebCore::ResourceError::setCertificate):

2012-10-12  MORITA Hajime  <morrita@google.com>

        [V8] PerContextEnabled methods should be installed when the constructor is created
        https://bugs.webkit.org/show_bug.cgi?id=99129

        Reviewed by Kentaro Hara.

        Before this change, generated installPerContextProperties() method
        injected both per-context attributes and functions, and functions
        were injected into the prototye object.  This means that the
        functions are injected into the prototype repeatedly for each
        intance creation.  This injection can be happened only once per
        prototype object, which is clearer and is faster.

        This change introduces installPerContextPrototypeProperties()
        generated method, which is designed to be called for each time when the prototype
        object is created.

        To do that, WrapperTypeInfo is extended to hold an additional
        function pointer to an installPerContextPrototypeProperties()
        implementation so that we call it from V8PerContextData::constructorForTypeSlowCase(),
        where the prototype instance is created.

        Other changes:
        - Added some modification to pass around the parameter to constructorForTypeSlowCase().
        - installPerContextProperties() are now always generated for simplicity. Empty implementations are inlined thus
          no speed penalty.

        No new tests. Covered by existing tests.

        * Modules/notifications/NotificationCenter.cpp:
        (WebCore::NotificationCenter::document):
        * Modules/notifications/NotificationCenter.h:
        (NotificationCenter):
        * bindings/scripts/CodeGeneratorV8.pm:
        (GenerateHeader):
        (GenerateConstructorGetter):
        (GenerateNamedConstructorCallback):
        (GenerateImplementation): Extracted per-context function additions to new installPerContextPrototypeProperties() function.
        (GenerateToV8Converters):
        * bindings/scripts/test/V8/V8Float64Array.cpp:
        (WebCore):
        (WebCore::V8Float64Array::wrapSlow):
        * bindings/scripts/test/V8/V8Float64Array.h:
        (WebCore::V8Float64Array::installPerContextProperties):
        (WebCore::V8Float64Array::installPerContextPrototypeProperties):
        * bindings/scripts/test/V8/V8TestActiveDOMObject.cpp:
        (WebCore):
        (WebCore::V8TestActiveDOMObject::wrapSlow):
        * bindings/scripts/test/V8/V8TestActiveDOMObject.h:
        (WebCore::V8TestActiveDOMObject::installPerContextProperties):
        (WebCore::V8TestActiveDOMObject::installPerContextPrototypeProperties):
        * bindings/scripts/test/V8/V8TestCustomNamedGetter.cpp:
        (WebCore):
        (WebCore::V8TestCustomNamedGetter::wrapSlow):
        * bindings/scripts/test/V8/V8TestCustomNamedGetter.h:
        (WebCore::V8TestCustomNamedGetter::installPerContextProperties):
        (WebCore::V8TestCustomNamedGetter::installPerContextPrototypeProperties):
        * bindings/scripts/test/V8/V8TestEventConstructor.cpp:
        (WebCore):
        (WebCore::V8TestEventConstructor::wrapSlow):
        * bindings/scripts/test/V8/V8TestEventConstructor.h:
        (WebCore::V8TestEventConstructor::installPerContextProperties):
        (WebCore::V8TestEventConstructor::installPerContextPrototypeProperties):
        * bindings/scripts/test/V8/V8TestEventTarget.cpp:
        (WebCore):
        (WebCore::V8TestEventTarget::wrapSlow):
        * bindings/scripts/test/V8/V8TestEventTarget.h:
        (WebCore::V8TestEventTarget::installPerContextProperties):
        (WebCore::V8TestEventTarget::installPerContextPrototypeProperties):
        * bindings/scripts/test/V8/V8TestException.cpp:
        (WebCore):
        (WebCore::V8TestException::wrapSlow):
        * bindings/scripts/test/V8/V8TestException.h:
        (WebCore::V8TestException::installPerContextProperties):
        (WebCore::V8TestException::installPerContextPrototypeProperties):
        * bindings/scripts/test/V8/V8TestInterface.cpp:
        (WebCore):
        (WebCore::V8TestInterface::wrapSlow):
        * bindings/scripts/test/V8/V8TestInterface.h:
        (WebCore::V8TestInterface::installPerContextProperties):
        (WebCore::V8TestInterface::installPerContextPrototypeProperties):
        * bindings/scripts/test/V8/V8TestMediaQueryListListener.cpp:
        (WebCore):
        (WebCore::V8TestMediaQueryListListener::wrapSlow):
        * bindings/scripts/test/V8/V8TestMediaQueryListListener.h:
        (WebCore::V8TestMediaQueryListListener::installPerContextProperties):
        (WebCore::V8TestMediaQueryListListener::installPerContextPrototypeProperties):
        * bindings/scripts/test/V8/V8TestNamedConstructor.cpp:
        (WebCore):
        (WebCore::V8TestNamedConstructor::wrapSlow):
        * bindings/scripts/test/V8/V8TestNamedConstructor.h:
        (WebCore::V8TestNamedConstructor::installPerContextProperties):
        (WebCore::V8TestNamedConstructor::installPerContextPrototypeProperties):
        * bindings/scripts/test/V8/V8TestNode.cpp:
        (WebCore):
        (WebCore::V8TestNode::wrapSlow):
        * bindings/scripts/test/V8/V8TestNode.h:
        (WebCore::V8TestNode::installPerContextProperties):
        (WebCore::V8TestNode::installPerContextPrototypeProperties):
        * bindings/scripts/test/V8/V8TestSerializedScriptValueInterface.cpp:
        (WebCore):
        (WebCore::V8TestSerializedScriptValueInterface::wrapSlow):
        * bindings/scripts/test/V8/V8TestSerializedScriptValueInterface.h:
        (WebCore::V8TestSerializedScriptValueInterface::installPerContextProperties):
        (WebCore::V8TestSerializedScriptValueInterface::installPerContextPrototypeProperties):
        * bindings/v8/NPV8Object.cpp:
        (WebCore::npObjectTypeInfo):
        * bindings/v8/V8DOMWindowShell.cpp:
        (WebCore::V8DOMWindowShell::installDOMWindow):
        * bindings/v8/V8DOMWrapper.cpp:
        (WebCore::V8DOMWrapper::instantiateV8Object):
        * bindings/v8/V8PerContextData.cpp:
        (WebCore::V8PerContextData::createWrapperFromCacheSlowCase):
        (WebCore::V8PerContextData::constructorForTypeSlowCase): Now invokes installPerContextPrototypeProperties()
        * bindings/v8/V8PerContextData.h:
        (WebCore::V8PerContextData::createWrapperFromCache):
        (WebCore::V8PerContextData::constructorForType):
        (V8PerContextData):
        * bindings/v8/WorkerContextExecutionProxy.cpp:
        (WebCore::WorkerContextExecutionProxy::initializeIfNeeded):
        * bindings/v8/WrapperTypeInfo.h:
        (WebCore):
        (WebCore::WrapperTypeInfo::installPerContextPrototypeProperties): Added.
        (WrapperTypeInfo):
        * bindings/v8/custom/V8HTMLImageElementConstructor.cpp:
        (WebCore):

2012-10-12  Pavel Feldman  <pfeldman@chromium.org>

        Web Inspector: Add "goto tab 1,2,3" hotkeys
        https://bugs.webkit.org/show_bug.cgi?id=99157

        Reviewed by Alexander Pavlov.

        Ctrl/Cmd + digit shortcuts should select corresponding tabs

        * inspector/front-end/InspectorView.js:
        (WebInspector.InspectorView.prototype._keyDown):
        (WebInspector.InspectorView.prototype._keyDownInternal):

2012-10-12  Vsevolod Vlasov  <vsevik@chromium.org>

        Web Inspector: Extract domain specific editing handling logic from UISourceCode descendants (step 1).
        https://bugs.webkit.org/show_bug.cgi?id=98912

        Reviewed by Pavel Feldman.

        This is the first step that introduces StyleFile and ScriptFile and extracts domain specific editing handling logic.
        StyleFile and ScriptFile should listen for the UISourceCode events and process them, this will be done in the next patch.

        * inspector/front-end/BreakpointManager.js:
        (WebInspector.BreakpointManager.Breakpoint.prototype._updateBreakpoint):
        * inspector/front-end/JavaScriptSource.js:
        * inspector/front-end/JavaScriptSourceFrame.js:
        (WebInspector.JavaScriptSourceFrame):
        (WebInspector.JavaScriptSourceFrame.prototype.onTextChanged):
        * inspector/front-end/ResourceScriptMapping.js:
        (WebInspector.ResourceScriptMapping.prototype.rawLocationToUILocation):
        (WebInspector.ResourceScriptMapping.prototype._hasDivergedFromVMChanged):
        (WebInspector.ResourceScriptMapping.prototype._bindUISourceCodeToScripts):
        (WebInspector.ScriptFile):
        (WebInspector.ScriptFile.prototype.hasDivergedFromVM):
        (WebInspector.ScriptFile.prototype.isDivergingFromVM):
        (WebInspector.ScriptFile.prototype.addEventListener):
        (WebInspector.ScriptFile.prototype.removeEventListener):
        (WebInspector.ResourceScriptFile):
        (WebInspector.ResourceScriptFile.prototype.workingCopyCommitted):
        (WebInspector.ResourceScriptFile.prototype.workingCopyChanged):
        (WebInspector.ResourceScriptFile.prototype.fireHasDivergedFromVMChanged):
        (WebInspector.ResourceScriptFile.prototype.hasDivergedFromVM):
        (WebInspector.ResourceScriptFile.prototype.isDivergingFromVM):
        * inspector/front-end/ScriptSnippetModel.js:
        (WebInspector.ScriptSnippetModel.prototype._addScriptSnippet):
        (WebInspector.SnippetScriptFile):
        (WebInspector.SnippetScriptFile.prototype.hasDivergedFromVM):
        (WebInspector.SnippetScriptFile.prototype.setHasDivergedFromVM):
        (WebInspector.SnippetScriptFile.prototype.isDivergingFromVM):
        (WebInspector.SnippetScriptFile.prototype.setIsDivergingFromVM):
        (WebInspector.SnippetScriptFile.prototype.workingCopyCommitted):
        (WebInspector.SnippetScriptFile.prototype.workingCopyChanged):
        * inspector/front-end/ScriptsPanel.js:
        (WebInspector.ScriptsPanel.prototype._revealExecutionLine):
        * inspector/front-end/StyleSource.js:
        * inspector/front-end/StylesSourceMapping.js:
        (WebInspector.StylesSourceMapping.prototype._uiSourceCodeAddedToWorkspace):
        (WebInspector.StylesSourceMapping.prototype._addUISourceCode):
        (WebInspector.StyleFile):
        (WebInspector.StyleFile.prototype.workingCopyCommitted):
        (WebInspector.StyleFile.prototype.workingCopyChanged):
        (WebInspector.StyleFile.prototype._callOrSetTimeout):
        (WebInspector.StyleFile.prototype._commitIncrementalEdit):
        (WebInspector.StyleFile.prototype._clearIncrementalUpdateTimer):
        * inspector/front-end/UISourceCode.js:
        (WebInspector.UISourceCode.prototype.scriptFile):
        (WebInspector.UISourceCode.prototype.setScriptFile):
        (WebInspector.UISourceCode.prototype.styleFile):
        (WebInspector.UISourceCode.prototype.setStyleFile):
        (WebInspector.UISourceCode.prototype.setWorkingCopy):
        (WebInspector.UISourceCode.prototype.commitWorkingCopy):

2012-10-12  Zeno Albisser  <zeno@webkit.org>

        [Qt][WK2] GraphicsSurfaceGLX should keep track of previous GL context.
        https://bugs.webkit.org/show_bug.cgi?id=99076

        In GraphicsSurfaceGLX/GraphicsSurfacePrivate we create a new
        QOpenGLContext for resolving GL methods.
        This context is implicitly made current on creation.
        Therefore we need to keep track of the previously bound context
        and make that one current again after calling create.

        Reviewed by Kenneth Rohde Christiansen.

        * platform/graphics/surfaces/qt/GraphicsSurfaceGLX.cpp:
        (WebCore::GraphicsSurfacePrivate::GraphicsSurfacePrivate):

2012-10-12  Balazs Kelemen  <kbalazs@webkit.org>

        Unreviewed, rolling out r130389.
        http://trac.webkit.org/changeset/130389
        https://bugs.webkit.org/show_bug.cgi?id=98048

        It broke chromium

        * WebCore.exp.in:
        * page/Settings.cpp:
        (WebCore::Settings::setAcceleratedCompositingEnabled):
        * page/Settings.h:
        (WebCore::Settings::setForceCompositingMode):
        (WebCore::Settings::forceCompositingMode):

2012-10-12  Vsevolod Vlasov  <vsevik@chromium.org>

        Web Inspector: Show request body source in request headers view.
        https://bugs.webkit.org/show_bug.cgi?id=99145

        Reviewed by Pavel Feldman.

        Added view source toggle to query parameters and form data elements.

        * inspector/front-end/NetworkPanel.js: fixed queryString getter usage.
        (WebInspector.NetworkDataGridNode.prototype._fileName):
        (WebInspector.NetworkDataGridNode.NameComparator):
        * inspector/front-end/NetworkRequest.js: Extracted queryString getter.
        (WebInspector.NetworkRequest.prototype.queryString):
        (WebInspector.NetworkRequest.prototype.get queryParameters):
        * inspector/front-end/RequestHeadersView.js:
        (WebInspector.RequestHeadersView.prototype._refreshQueryString):
        (WebInspector.RequestHeadersView.prototype._refreshFormData):
        (WebInspector.RequestHeadersView.prototype._populateTreeElementWithSourceText):
        extracted common method to populate elememnt with raw source text.
        (WebInspector.RequestHeadersView.prototype._refreshParams.toggleViewSource):
        (WebInspector.RequestHeadersView.prototype._refreshParams):
        (WebInspector.RequestHeadersView.prototype._toggleURLDecoding):
        (WebInspector.RequestHeadersView.prototype._refreshHeadersText):
        * inspector/front-end/networkPanel.css:A removed redundant raw-form-data style rule.

2012-10-12  Shinya Kawanaka  <shinyak@chromium.org>

        Optimzie SelectorCheckingContext memory layout
        https://bugs.webkit.org/show_bug.cgi?id=99139

        Reviewed by Hajime Morita.

        Since VisitedMatchType and PseudoId are both enum, we can make SelectorChecker more compact
        if these two fields are continuously placed.

        No new tests, no change in behavior.

        * css/SelectorChecker.h:
        (WebCore::SelectorChecker::SelectorCheckingContext::SelectorCheckingContext):
        (SelectorCheckingContext):

2012-10-12  Kenichi Ishibashi  <bashi@chromium.org>

        [WebSocket] Add "Cache-Control: no-cache" to handshake request
        https://bugs.webkit.org/show_bug.cgi?id=98000

        Reviewed by Yuta Kitamura.

        Add no-cache headers to opening handshake.
        This is for compatibility improvement.
        Some proxies rewrite "Connection: upgrade" to "Connection: close"
        when a request doesn't contain no-cache headers.

        Test: http/tests/websocket/tests/hybi/nocache.html

        * Modules/websockets/WebSocketHandshake.cpp:
        (WebCore::WebSocketHandshake::clientHandshakeMessage):
        (WebCore::WebSocketHandshake::clientHandshakeRequest):

2012-10-11  Andy Estes  <aestes@apple.com>

        Add some basic methods and properties to the injected bundle Objective-C DOM API
        https://bugs.webkit.org/show_bug.cgi?id=99137

        Reviewed by Sam Weinig.

        Export needed symbols.

        * WebCore.exp.in:

2012-10-11  Rik Cabanier  <cabanier@adobe.com>

        Bad copy constructor in StyleRareNonInheritedData
        https://bugs.webkit.org/show_bug.cgi?id=98950

        Reviewed by Eric Seidel.

        Typo in copy constructor caused blendmode to always be the default.

        * rendering/style/StyleRareNonInheritedData.cpp:
        (WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData):

2012-10-11  Takashi Sakamoto  <tasak@google.com>

        [WebKit IDL] remove all module from idl files.
        https://bugs.webkit.org/show_bug.cgi?id=99007

        Reviewed by Kentaro Hara.

        Since current WebIDL spec doesn't support "module", remove
        module from all idl files.

        No new tests. I ran run-bindings-tests and no error was reported.

        * Modules/battery/BatteryManager.idl:
        * Modules/battery/NavigatorBattery.idl:
        * Modules/filesystem/DOMFileSystem.idl:
        * Modules/filesystem/DOMFileSystemSync.idl:
        * Modules/filesystem/DOMWindowFileSystem.idl:
        * Modules/filesystem/DataTransferItemFileSystem.idl:
        * Modules/filesystem/DirectoryEntry.idl:
        * Modules/filesystem/DirectoryEntrySync.idl:
        * Modules/filesystem/DirectoryReader.idl:
        * Modules/filesystem/DirectoryReaderSync.idl:
        * Modules/filesystem/EntriesCallback.idl:
        * Modules/filesystem/Entry.idl:
        * Modules/filesystem/EntryArray.idl:
        * Modules/filesystem/EntryArraySync.idl:
        * Modules/filesystem/EntryCallback.idl:
        * Modules/filesystem/EntrySync.idl:
        * Modules/filesystem/ErrorCallback.idl:
        * Modules/filesystem/FileCallback.idl:
        * Modules/filesystem/FileEntry.idl:
        * Modules/filesystem/FileEntrySync.idl:
        * Modules/filesystem/FileSystemCallback.idl:
        * Modules/filesystem/FileWriter.idl:
        * Modules/filesystem/FileWriterCallback.idl:
        * Modules/filesystem/FileWriterSync.idl:
        * Modules/filesystem/HTMLInputElementFileSystem.idl:
        * Modules/filesystem/Metadata.idl:
        * Modules/filesystem/MetadataCallback.idl:
        * Modules/filesystem/WorkerContextFileSystem.idl:
        * Modules/gamepad/Gamepad.idl:
        * Modules/gamepad/GamepadList.idl:
        * Modules/gamepad/NavigatorGamepad.idl:
        * Modules/geolocation/Geolocation.idl:
        * Modules/geolocation/Geoposition.idl:
        * Modules/geolocation/NavigatorGeolocation.idl:
        * Modules/geolocation/PositionCallback.idl:
        * Modules/geolocation/PositionError.idl:
        * Modules/geolocation/PositionErrorCallback.idl:
        * Modules/indexeddb/DOMWindowIndexedDatabase.idl:
        * Modules/indexeddb/IDBAny.idl:
        * Modules/indexeddb/IDBCursor.idl:
        * Modules/indexeddb/IDBCursorWithValue.idl:
        * Modules/indexeddb/IDBDatabase.idl:
        * Modules/indexeddb/IDBDatabaseException.idl:
        * Modules/indexeddb/IDBFactory.idl:
        * Modules/indexeddb/IDBIndex.idl:
        * Modules/indexeddb/IDBKey.idl:
        * Modules/indexeddb/IDBKeyRange.idl:
        * Modules/indexeddb/IDBObjectStore.idl:
        * Modules/indexeddb/IDBOpenDBRequest.idl:
        * Modules/indexeddb/IDBRequest.idl:
        * Modules/indexeddb/IDBTransaction.idl:
        * Modules/indexeddb/IDBUpgradeNeededEvent.idl:
        * Modules/indexeddb/IDBVersionChangeEvent.idl:
        * Modules/indexeddb/IDBVersionChangeRequest.idl:
        * Modules/indexeddb/WorkerContextIndexedDatabase.idl:
        * Modules/intents/DOMWindowIntents.idl:
        * Modules/intents/DeliveredIntent.idl:
        * Modules/intents/Intent.idl:
        * Modules/intents/IntentResultCallback.idl:
        * Modules/intents/NavigatorIntents.idl:
        * Modules/mediasource/MediaSource.idl:
        * Modules/mediasource/SourceBuffer.idl:
        * Modules/mediasource/SourceBufferList.idl:
        * Modules/mediastream/DOMWindowMediaStream.idl:
        * Modules/mediastream/IceCallback.idl:
        * Modules/mediastream/IceCandidate.idl:
        * Modules/mediastream/LocalMediaStream.idl:
        * Modules/mediastream/MediaStream.idl:
        * Modules/mediastream/MediaStreamEvent.idl:
        * Modules/mediastream/MediaStreamList.idl:
        * Modules/mediastream/MediaStreamTrack.idl:
        * Modules/mediastream/MediaStreamTrackEvent.idl:
        * Modules/mediastream/MediaStreamTrackList.idl:
        * Modules/mediastream/NavigatorMediaStream.idl:
        * Modules/mediastream/NavigatorUserMediaError.idl:
        * Modules/mediastream/NavigatorUserMediaErrorCallback.idl:
        * Modules/mediastream/NavigatorUserMediaSuccessCallback.idl:
        * Modules/mediastream/PeerConnection00.idl:
        * Modules/mediastream/RTCErrorCallback.idl:
        * Modules/mediastream/RTCIceCandidate.idl:
        * Modules/mediastream/RTCIceCandidateEvent.idl:
        * Modules/mediastream/RTCPeerConnection.idl:
        * Modules/mediastream/RTCSessionDescription.idl:
        * Modules/mediastream/RTCSessionDescriptionCallback.idl:
        * Modules/mediastream/RTCStatsCallback.idl:
        * Modules/mediastream/RTCStatsElement.idl:
        * Modules/mediastream/RTCStatsReport.idl:
        * Modules/mediastream/RTCStatsResponse.idl:
        * Modules/mediastream/SessionDescription.idl:
        * Modules/navigatorcontentutils/NavigatorContentUtils.idl:
        * Modules/networkinfo/NavigatorNetworkInfoConnection.idl:
        * Modules/networkinfo/NetworkInfoConnection.idl:
        * Modules/notifications/DOMWindowNotifications.idl:
        * Modules/notifications/Notification.idl:
        * Modules/notifications/NotificationCenter.idl:
        * Modules/notifications/NotificationPermissionCallback.idl:
        * Modules/notifications/WorkerContextNotifications.idl:
        * Modules/proximity/DeviceProximityEvent.idl:
        * Modules/quota/DOMWindowQuota.idl:
        * Modules/quota/StorageInfo.idl:
        * Modules/quota/StorageInfoErrorCallback.idl:
        * Modules/quota/StorageInfoQuotaCallback.idl:
        * Modules/quota/StorageInfoUsageCallback.idl:
        * Modules/speech/DOMWindowSpeech.idl:
        * Modules/speech/SpeechGrammar.idl:
        * Modules/speech/SpeechGrammarList.idl:
        * Modules/speech/SpeechRecognition.idl:
        * Modules/speech/SpeechRecognitionAlternative.idl:
        * Modules/speech/SpeechRecognitionError.idl:
        * Modules/speech/SpeechRecognitionEvent.idl:
        * Modules/speech/SpeechRecognitionResult.idl:
        * Modules/speech/SpeechRecognitionResultList.idl:
        * Modules/vibration/NavigatorVibration.idl:
        * Modules/webaudio/AudioBuffer.idl:
        * Modules/webaudio/AudioBufferCallback.idl:
        * Modules/webaudio/AudioBufferSourceNode.idl:
        * Modules/webaudio/AudioChannelMerger.idl:
        * Modules/webaudio/AudioChannelSplitter.idl:
        * Modules/webaudio/AudioContext.idl:
        * Modules/webaudio/AudioDestinationNode.idl:
        * Modules/webaudio/AudioGain.idl:
        * Modules/webaudio/AudioGainNode.idl:
        * Modules/webaudio/AudioListener.idl:
        * Modules/webaudio/AudioNode.idl:
        * Modules/webaudio/AudioPannerNode.idl:
        * Modules/webaudio/AudioParam.idl:
        * Modules/webaudio/AudioProcessingEvent.idl:
        * Modules/webaudio/AudioSourceNode.idl:
        * Modules/webaudio/BiquadFilterNode.idl:
        * Modules/webaudio/ConvolverNode.idl:
        * Modules/webaudio/DOMWindowWebAudio.idl:
        * Modules/webaudio/DelayNode.idl:
        * Modules/webaudio/DynamicsCompressorNode.idl:
        * Modules/webaudio/JavaScriptAudioNode.idl:
        * Modules/webaudio/MediaElementAudioSourceNode.idl:
        * Modules/webaudio/MediaStreamAudioSourceNode.idl:
        * Modules/webaudio/OfflineAudioCompletionEvent.idl:
        * Modules/webaudio/Oscillator.idl:
        * Modules/webaudio/RealtimeAnalyserNode.idl:
        * Modules/webaudio/WaveShaperNode.idl:
        * Modules/webaudio/WaveTable.idl:
        * Modules/webdatabase/DOMWindowWebDatabase.idl:
        * Modules/webdatabase/Database.idl:
        * Modules/webdatabase/DatabaseCallback.idl:
        * Modules/webdatabase/DatabaseSync.idl:
        * Modules/webdatabase/SQLError.idl:
        * Modules/webdatabase/SQLException.idl:
        * Modules/webdatabase/SQLResultSet.idl:
        * Modules/webdatabase/SQLResultSetRowList.idl:
        * Modules/webdatabase/SQLStatementCallback.idl:
        * Modules/webdatabase/SQLStatementErrorCallback.idl:
        * Modules/webdatabase/SQLTransaction.idl:
        * Modules/webdatabase/SQLTransactionCallback.idl:
        * Modules/webdatabase/SQLTransactionErrorCallback.idl:
        * Modules/webdatabase/SQLTransactionSync.idl:
        * Modules/webdatabase/SQLTransactionSyncCallback.idl:
        * Modules/webdatabase/WorkerContextWebDatabase.idl:
        * Modules/websockets/CloseEvent.idl:
        * Modules/websockets/DOMWindowWebSocket.idl:
        * Modules/websockets/WebSocket.idl:
        * Modules/websockets/WorkerContextWebSocket.idl:
        * bindings/scripts/test/TestCallback.idl:
        * bindings/scripts/test/TestCustomNamedGetter.idl:
        * bindings/scripts/test/TestDomainSecurity.idl:
        * bindings/scripts/test/TestEventConstructor.idl:
        * bindings/scripts/test/TestEventTarget.idl:
        * bindings/scripts/test/TestException.idl:
        * bindings/scripts/test/TestInterface.idl:
        * bindings/scripts/test/TestMediaQueryListListener.idl:
        * bindings/scripts/test/TestNamedConstructor.idl:
        * bindings/scripts/test/TestNode.idl:
        * bindings/scripts/test/TestObj.idl:
        * bindings/scripts/test/TestSerializedScriptValueInterface.idl:
        * bindings/scripts/test/TestSupplemental.idl:
        * bindings/scripts/test/TestTypedArray.idl:
        * css/CSSCharsetRule.idl:
        * css/CSSFontFaceRule.idl:
        * css/CSSImportRule.idl:
        * css/CSSMediaRule.idl:
        * css/CSSPageRule.idl:
        * css/CSSPrimitiveValue.idl:
        * css/CSSRule.idl:
        * css/CSSRuleList.idl:
        * css/CSSStyleDeclaration.idl:
        * css/CSSStyleRule.idl:
        * css/CSSStyleSheet.idl:
        * css/CSSUnknownRule.idl:
        * css/CSSValue.idl:
        * css/CSSValueList.idl:
        * css/Counter.idl:
        * css/MediaList.idl:
        * css/MediaQueryList.idl:
        * css/MediaQueryListListener.idl:
        * css/RGBColor.idl:
        * css/Rect.idl:
        * css/StyleMedia.idl:
        * css/StyleSheet.idl:
        * css/StyleSheetList.idl:
        * css/WebKitCSSFilterValue.idl:
        * css/WebKitCSSKeyframeRule.idl:
        * css/WebKitCSSKeyframesRule.idl:
        * css/WebKitCSSMatrix.idl:
        * css/WebKitCSSRegionRule.idl:
        * css/WebKitCSSTransformValue.idl:
        * dom/Attr.idl:
        * dom/BeforeLoadEvent.idl:
        * dom/CDATASection.idl:
        * dom/CharacterData.idl:
        * dom/ClientRect.idl:
        * dom/ClientRectList.idl:
        * dom/Clipboard.idl:
        * dom/Comment.idl:
        * dom/CompositionEvent.idl:
        * dom/CustomEvent.idl:
        * dom/DOMCoreException.idl:
        * dom/DOMError.idl:
        * dom/DOMImplementation.idl:
        * dom/DOMNamedFlowCollection.idl:
        * dom/DOMStringList.idl:
        * dom/DOMStringMap.idl:
        * dom/DataTransferItem.idl:
        * dom/DataTransferItemList.idl:
        * dom/DeviceMotionEvent.idl:
        * dom/DeviceOrientationEvent.idl:
        * dom/Document.idl:
        * dom/DocumentFragment.idl:
        * dom/DocumentType.idl:
        * dom/Element.idl:
        * dom/Entity.idl:
        * dom/EntityReference.idl:
        * dom/ErrorEvent.idl:
        * dom/Event.idl:
        * dom/EventException.idl:
        * dom/EventListener.idl:
        * dom/EventTarget.idl:
        * dom/HashChangeEvent.idl:
        * dom/KeyboardEvent.idl:
        * dom/MessageChannel.idl:
        * dom/MessageEvent.idl:
        * dom/MessagePort.idl:
        * dom/MouseEvent.idl:
        * dom/MutationCallback.idl:
        * dom/MutationEvent.idl:
        * dom/MutationObserver.idl:
        * dom/MutationRecord.idl:
        * dom/NamedNodeMap.idl:
        * dom/Node.idl:
        * dom/NodeFilter.idl:
        * dom/NodeIterator.idl:
        * dom/NodeList.idl:
        * dom/Notation.idl:
        * dom/OverflowEvent.idl:
        * dom/PageTransitionEvent.idl:
        * dom/PopStateEvent.idl:
        * dom/ProcessingInstruction.idl:
        * dom/ProgressEvent.idl:
        * dom/PropertyNodeList.idl:
        * dom/Range.idl:
        * dom/RangeException.idl:
        * dom/RequestAnimationFrameCallback.idl:
        * dom/ShadowRoot.idl:
        * dom/StringCallback.idl:
        * dom/Text.idl:
        * dom/TextEvent.idl:
        * dom/Touch.idl:
        * dom/TouchEvent.idl:
        * dom/TouchList.idl:
        * dom/TreeWalker.idl:
        * dom/UIEvent.idl:
        * dom/WebKitAnimationEvent.idl:
        * dom/WebKitNamedFlow.idl:
        * dom/WebKitTransitionEvent.idl:
        * dom/WheelEvent.idl:
        * editing/DOMTransaction.idl:
        * editing/UndoManager.idl:
        * fileapi/Blob.idl:
        * fileapi/File.idl:
        * fileapi/FileError.idl:
        * fileapi/FileException.idl:
        * fileapi/FileList.idl:
        * fileapi/FileReader.idl:
        * fileapi/FileReaderSync.idl:
        * html/DOMFormData.idl:
        * html/DOMSettableTokenList.idl:
        * html/DOMTokenList.idl:
        * html/DOMURL.idl:
        * html/HTMLAllCollection.idl:
        * html/HTMLAnchorElement.idl:
        * html/HTMLAppletElement.idl:
        * html/HTMLAreaElement.idl:
        * html/HTMLAudioElement.idl:
        * html/HTMLBRElement.idl:
        * html/HTMLBaseElement.idl:
        * html/HTMLBaseFontElement.idl:
        * html/HTMLBodyElement.idl:
        * html/HTMLButtonElement.idl:
        * html/HTMLCanvasElement.idl:
        * html/HTMLCollection.idl:
        * html/HTMLDListElement.idl:
        * html/HTMLDataListElement.idl:
        * html/HTMLDetailsElement.idl:
        * html/HTMLDialogElement.idl:
        * html/HTMLDirectoryElement.idl:
        * html/HTMLDivElement.idl:
        * html/HTMLDocument.idl:
        * html/HTMLElement.idl:
        * html/HTMLEmbedElement.idl:
        * html/HTMLFieldSetElement.idl:
        * html/HTMLFontElement.idl:
        * html/HTMLFormElement.idl:
        * html/HTMLFrameElement.idl:
        * html/HTMLFrameSetElement.idl:
        * html/HTMLHRElement.idl:
        * html/HTMLHeadElement.idl:
        * html/HTMLHeadingElement.idl:
        * html/HTMLHtmlElement.idl:
        * html/HTMLIFrameElement.idl:
        * html/HTMLImageElement.idl:
        * html/HTMLInputElement.idl:
        * html/HTMLIntentElement.idl:
        * html/HTMLKeygenElement.idl:
        * html/HTMLLIElement.idl:
        * html/HTMLLabelElement.idl:
        * html/HTMLLegendElement.idl:
        * html/HTMLLinkElement.idl:
        * html/HTMLMapElement.idl:
        * html/HTMLMarqueeElement.idl:
        * html/HTMLMediaElement.idl:
        * html/HTMLMenuElement.idl:
        * html/HTMLMetaElement.idl:
        * html/HTMLMeterElement.idl:
        * html/HTMLModElement.idl:
        * html/HTMLOListElement.idl:
        * html/HTMLObjectElement.idl:
        * html/HTMLOptGroupElement.idl:
        * html/HTMLOptionElement.idl:
        * html/HTMLOptionsCollection.idl:
        * html/HTMLOutputElement.idl:
        * html/HTMLParagraphElement.idl:
        * html/HTMLParamElement.idl:
        * html/HTMLPreElement.idl:
        * html/HTMLProgressElement.idl:
        * html/HTMLPropertiesCollection.idl:
        * html/HTMLQuoteElement.idl:
        * html/HTMLScriptElement.idl:
        * html/HTMLSelectElement.idl:
        * html/HTMLSourceElement.idl:
        * html/HTMLSpanElement.idl:
        * html/HTMLStyleElement.idl:
        * html/HTMLTableCaptionElement.idl:
        * html/HTMLTableCellElement.idl:
        * html/HTMLTableColElement.idl:
        * html/HTMLTableElement.idl:
        * html/HTMLTableRowElement.idl:
        * html/HTMLTableSectionElement.idl:
        * html/HTMLTextAreaElement.idl:
        * html/HTMLTitleElement.idl:
        * html/HTMLTrackElement.idl:
        * html/HTMLUListElement.idl:
        * html/HTMLUnknownElement.idl:
        * html/HTMLVideoElement.idl:
        * html/ImageData.idl:
        * html/MediaController.idl:
        * html/MediaError.idl:
        * html/MediaKeyError.idl:
        * html/MediaKeyEvent.idl:
        * html/MicroDataItemValue.idl:
        * html/RadioNodeList.idl:
        * html/TextMetrics.idl:
        * html/TimeRanges.idl:
        * html/ValidityState.idl:
        * html/VoidCallback.idl:
        * html/canvas/ArrayBuffer.idl:
        * html/canvas/ArrayBufferView.idl:
        * html/canvas/CanvasGradient.idl:
        * html/canvas/CanvasPattern.idl:
        * html/canvas/CanvasRenderingContext.idl:
        * html/canvas/CanvasRenderingContext2D.idl:
        * html/canvas/DataView.idl:
        * html/canvas/EXTTextureFilterAnisotropic.idl:
        * html/canvas/Float32Array.idl:
        * html/canvas/Float64Array.idl:
        * html/canvas/Int16Array.idl:
        * html/canvas/Int32Array.idl:
        * html/canvas/Int8Array.idl:
        * html/canvas/OESStandardDerivatives.idl:
        * html/canvas/OESTextureFloat.idl:
        * html/canvas/OESVertexArrayObject.idl:
        * html/canvas/Uint16Array.idl:
        * html/canvas/Uint32Array.idl:
        * html/canvas/Uint8Array.idl:
        * html/canvas/Uint8ClampedArray.idl:
        * html/canvas/WebGLActiveInfo.idl:
        * html/canvas/WebGLBuffer.idl:
        * html/canvas/WebGLCompressedTextureS3TC.idl:
        * html/canvas/WebGLContextAttributes.idl:
        * html/canvas/WebGLContextEvent.idl:
        * html/canvas/WebGLDebugRendererInfo.idl:
        * html/canvas/WebGLDebugShaders.idl:
        * html/canvas/WebGLDepthTexture.idl:
        * html/canvas/WebGLFramebuffer.idl:
        * html/canvas/WebGLLoseContext.idl:
        * html/canvas/WebGLProgram.idl:
        * html/canvas/WebGLRenderbuffer.idl:
        * html/canvas/WebGLRenderingContext.idl:
        * html/canvas/WebGLShader.idl:
        * html/canvas/WebGLShaderPrecisionFormat.idl:
        * html/canvas/WebGLTexture.idl:
        * html/canvas/WebGLUniformLocation.idl:
        * html/canvas/WebGLVertexArrayObjectOES.idl:
        * html/shadow/HTMLContentElement.idl:
        * html/shadow/HTMLShadowElement.idl:
        * html/track/TextTrack.idl:
        * html/track/TextTrackCue.idl:
        * html/track/TextTrackCueList.idl:
        * html/track/TextTrackList.idl:
        * html/track/TrackEvent.idl:
        * inspector/InjectedScriptHost.idl:
        * inspector/InspectorFrontendHost.idl:
        * inspector/JavaScriptCallFrame.idl:
        * inspector/ScriptProfile.idl:
        * inspector/ScriptProfileNode.idl:
        * loader/appcache/DOMApplicationCache.idl:
        * page/AbstractView.idl:
        * page/BarInfo.idl:
        * page/Console.idl:
        * page/Coordinates.idl:
        * page/Crypto.idl:
        * page/DOMSecurityPolicy.idl:
        * page/DOMSelection.idl:
        * page/DOMWindow.idl:
        * page/DOMWindowPagePopup.idl:
        * page/EventSource.idl:
        * page/History.idl:
        * page/Location.idl:
        * page/MemoryInfo.idl:
        * page/Navigator.idl:
        * page/PagePopupController.idl:
        * page/Performance.idl:
        * page/PerformanceEntry.idl:
        * page/PerformanceEntryList.idl:
        * page/PerformanceNavigation.idl:
        * page/PerformanceResourceTiming.idl:
        * page/PerformanceTiming.idl:
        * page/Screen.idl:
        * page/SpeechInputEvent.idl:
        * page/SpeechInputResult.idl:
        * page/SpeechInputResultList.idl:
        * page/WebKitAnimation.idl:
        * page/WebKitAnimationList.idl:
        * page/WebKitPoint.idl:
        * page/WorkerNavigator.idl:
        * plugins/DOMMimeType.idl:
        * plugins/DOMMimeTypeArray.idl:
        * plugins/DOMPlugin.idl:
        * plugins/DOMPluginArray.idl:
        * storage/Storage.idl:
        * storage/StorageEvent.idl:
        * svg/ElementTimeControl.idl:
        * svg/SVGAElement.idl:
        * svg/SVGAltGlyphDefElement.idl:
        * svg/SVGAltGlyphElement.idl:
        * svg/SVGAltGlyphItemElement.idl:
        * svg/SVGAngle.idl:
        * svg/SVGAnimateColorElement.idl:
        * svg/SVGAnimateElement.idl:
        * svg/SVGAnimateMotionElement.idl:
        * svg/SVGAnimateTransformElement.idl:
        * svg/SVGAnimatedAngle.idl:
        * svg/SVGAnimatedBoolean.idl:
        * svg/SVGAnimatedEnumeration.idl:
        * svg/SVGAnimatedInteger.idl:
        * svg/SVGAnimatedLength.idl:
        * svg/SVGAnimatedLengthList.idl:
        * svg/SVGAnimatedNumber.idl:
        * svg/SVGAnimatedNumberList.idl:
        * svg/SVGAnimatedPreserveAspectRatio.idl:
        * svg/SVGAnimatedRect.idl:
        * svg/SVGAnimatedString.idl:
        * svg/SVGAnimatedTransformList.idl:
        * svg/SVGAnimationElement.idl:
        * svg/SVGCircleElement.idl:
        * svg/SVGClipPathElement.idl:
        * svg/SVGColor.idl:
        * svg/SVGComponentTransferFunctionElement.idl:
        * svg/SVGCursorElement.idl:
        * svg/SVGDefsElement.idl:
        * svg/SVGDescElement.idl:
        * svg/SVGDocument.idl:
        * svg/SVGElement.idl:
        * svg/SVGElementInstance.idl:
        * svg/SVGElementInstanceList.idl:
        * svg/SVGEllipseElement.idl:
        * svg/SVGException.idl:
        * svg/SVGExternalResourcesRequired.idl:
        * svg/SVGFEBlendElement.idl:
        * svg/SVGFEColorMatrixElement.idl:
        * svg/SVGFEComponentTransferElement.idl:
        * svg/SVGFECompositeElement.idl:
        * svg/SVGFEConvolveMatrixElement.idl:
        * svg/SVGFEDiffuseLightingElement.idl:
        * svg/SVGFEDisplacementMapElement.idl:
        * svg/SVGFEDistantLightElement.idl:
        * svg/SVGFEDropShadowElement.idl:
        * svg/SVGFEFloodElement.idl:
        * svg/SVGFEFuncAElement.idl:
        * svg/SVGFEFuncBElement.idl:
        * svg/SVGFEFuncGElement.idl:
        * svg/SVGFEFuncRElement.idl:
        * svg/SVGFEGaussianBlurElement.idl:
        * svg/SVGFEImageElement.idl:
        * svg/SVGFEMergeElement.idl:
        * svg/SVGFEMergeNodeElement.idl:
        * svg/SVGFEMorphologyElement.idl:
        * svg/SVGFEOffsetElement.idl:
        * svg/SVGFEPointLightElement.idl:
        * svg/SVGFESpecularLightingElement.idl:
        * svg/SVGFESpotLightElement.idl:
        * svg/SVGFETileElement.idl:
        * svg/SVGFETurbulenceElement.idl:
        * svg/SVGFilterElement.idl:
        * svg/SVGFilterPrimitiveStandardAttributes.idl:
        * svg/SVGFitToViewBox.idl:
        * svg/SVGFontElement.idl:
        * svg/SVGFontFaceElement.idl:
        * svg/SVGFontFaceFormatElement.idl:
        * svg/SVGFontFaceNameElement.idl:
        * svg/SVGFontFaceSrcElement.idl:
        * svg/SVGFontFaceUriElement.idl:
        * svg/SVGForeignObjectElement.idl:
        * svg/SVGGElement.idl:
        * svg/SVGGlyphElement.idl:
        * svg/SVGGlyphRefElement.idl:
        * svg/SVGGradientElement.idl:
        * svg/SVGHKernElement.idl:
        * svg/SVGImageElement.idl:
        * svg/SVGLangSpace.idl:
        * svg/SVGLength.idl:
        * svg/SVGLengthList.idl:
        * svg/SVGLineElement.idl:
        * svg/SVGLinearGradientElement.idl:
        * svg/SVGLocatable.idl:
        * svg/SVGMPathElement.idl:
        * svg/SVGMarkerElement.idl:
        * svg/SVGMaskElement.idl:
        * svg/SVGMatrix.idl:
        * svg/SVGMetadataElement.idl:
        * svg/SVGMissingGlyphElement.idl:
        * svg/SVGNumber.idl:
        * svg/SVGNumberList.idl:
        * svg/SVGPaint.idl:
        * svg/SVGPathElement.idl:
        * svg/SVGPathSeg.idl:
        * svg/SVGPathSegArcAbs.idl:
        * svg/SVGPathSegArcRel.idl:
        * svg/SVGPathSegClosePath.idl:
        * svg/SVGPathSegCurvetoCubicAbs.idl:
        * svg/SVGPathSegCurvetoCubicRel.idl:
        * svg/SVGPathSegCurvetoCubicSmoothAbs.idl:
        * svg/SVGPathSegCurvetoCubicSmoothRel.idl:
        * svg/SVGPathSegCurvetoQuadraticAbs.idl:
        * svg/SVGPathSegCurvetoQuadraticRel.idl:
        * svg/SVGPathSegCurvetoQuadraticSmoothAbs.idl:
        * svg/SVGPathSegCurvetoQuadraticSmoothRel.idl:
        * svg/SVGPathSegLinetoAbs.idl:
        * svg/SVGPathSegLinetoHorizontalAbs.idl:
        * svg/SVGPathSegLinetoHorizontalRel.idl:
        * svg/SVGPathSegLinetoRel.idl:
        * svg/SVGPathSegLinetoVerticalAbs.idl:
        * svg/SVGPathSegLinetoVerticalRel.idl:
        * svg/SVGPathSegList.idl:
        * svg/SVGPathSegMovetoAbs.idl:
        * svg/SVGPathSegMovetoRel.idl:
        * svg/SVGPatternElement.idl:
        * svg/SVGPoint.idl:
        * svg/SVGPointList.idl:
        * svg/SVGPolygonElement.idl:
        * svg/SVGPolylineElement.idl:
        * svg/SVGPreserveAspectRatio.idl:
        * svg/SVGRadialGradientElement.idl:
        * svg/SVGRect.idl:
        * svg/SVGRectElement.idl:
        * svg/SVGRenderingIntent.idl:
        * svg/SVGSVGElement.idl:
        * svg/SVGScriptElement.idl:
        * svg/SVGSetElement.idl:
        * svg/SVGStopElement.idl:
        * svg/SVGStringList.idl:
        * svg/SVGStylable.idl:
        * svg/SVGStyleElement.idl:
        * svg/SVGSwitchElement.idl:
        * svg/SVGSymbolElement.idl:
        * svg/SVGTRefElement.idl:
        * svg/SVGTSpanElement.idl:
        * svg/SVGTests.idl:
        * svg/SVGTextContentElement.idl:
        * svg/SVGTextElement.idl:
        * svg/SVGTextPathElement.idl:
        * svg/SVGTextPositioningElement.idl:
        * svg/SVGTitleElement.idl:
        * svg/SVGTransform.idl:
        * svg/SVGTransformList.idl:
        * svg/SVGTransformable.idl:
        * svg/SVGURIReference.idl:
        * svg/SVGUnitTypes.idl:
        * svg/SVGUseElement.idl:
        * svg/SVGVKernElement.idl:
        * svg/SVGViewElement.idl:
        * svg/SVGViewSpec.idl:
        * svg/SVGZoomAndPan.idl:
        * svg/SVGZoomEvent.idl:
        * testing/InternalSettings.idl:
        * testing/Internals.idl:
        * testing/MallocStatistics.idl:
        * workers/AbstractWorker.idl:
        * workers/DedicatedWorkerContext.idl:
        * workers/SharedWorker.idl:
        * workers/SharedWorkerContext.idl:
        * workers/Worker.idl:
        * workers/WorkerContext.idl:
        * workers/WorkerLocation.idl:
        * xml/DOMParser.idl:
        * xml/XMLHttpRequest.idl:
        * xml/XMLHttpRequestException.idl:
        * xml/XMLHttpRequestProgressEvent.idl:
        * xml/XMLHttpRequestUpload.idl:
        * xml/XMLSerializer.idl:
        * xml/XPathEvaluator.idl:
        * xml/XPathException.idl:
        * xml/XPathExpression.idl:
        * xml/XPathNSResolver.idl:
        * xml/XPathResult.idl:
        * xml/XSLTProcessor.idl:
        Removed "module".

2012-10-11  Beth Dakin  <bdakin@apple.com>

        https://bugs.webkit.org/show_bug.cgi?id=98700
        ScrollingCoordinator is a hot mess of if-defs

        Reviewed by Anders Carlsson.

        This patch moves all of the threaded scrolling code in 
        ScrollingCoordinator into a new class called ScrollingCoordinatorMac 
        which inherits from ScrollingCoordinator. 

        It also adds ScrollingCoordinatorChromium to do Chromium-specific work. 
        ScrollingCoordinator itself does work that is cross-platform. 
        
        Finally, this patch also eliminates ScrollingCoordinatorNone. 
        ScrollingCoordinator is now sufficient for platforms that relied on 
        ScrollingCoordinatorNone to build.

        * CMakeLists.txt:
        * GNUmakefile.list.am:
        * Target.pri:
        * WebCore.exp.in:
        * WebCore.xcodeproj/project.pbxproj:
        * page/scrolling/ScrollingCoordinator.cpp:
        (WebCore::ScrollingCoordinator::create):
        (WebCore):
        (WebCore::ScrollingCoordinator::ScrollingCoordinator):
        (WebCore::ScrollingCoordinator::~ScrollingCoordinator):
        (WebCore::ScrollingCoordinator::pageDestroyed):
        (WebCore::ScrollingCoordinator::computeNonFastScrollableRegion):
        (WebCore::ScrollingCoordinator::computeCurrentWheelEventHandlerCount):
        (WebCore::ScrollingCoordinator::scrollLayerForFrameView):
        (WebCore::ScrollingCoordinator::frameViewRootLayerDidChange):
        * page/scrolling/ScrollingCoordinator.h:
        (WebCore):
        (ScrollingCoordinator):
        (WebCore::ScrollingCoordinator::scrollingTree):
        (WebCore::ScrollingCoordinator::commitTreeStateIfNeeded):
        (WebCore::ScrollingCoordinator::frameViewLayoutUpdated):
        (WebCore::ScrollingCoordinator::supportsFixedPositionLayers):
        (WebCore::ScrollingCoordinator::requestScrollPositionUpdate):
        (WebCore::ScrollingCoordinator::handleWheelEvent):
        (WebCore::ScrollingCoordinator::updateMainFrameScrollPositionAndScrollLayerPosition):
        (WebCore::ScrollingCoordinator::attachToStateTree):
        (WebCore::ScrollingCoordinator::detachFromStateTree):
        (WebCore::ScrollingCoordinator::clearStateTree):
        (WebCore::ScrollingCoordinator::frameViewHorizontalScrollbarLayerDidChange):
        (WebCore::ScrollingCoordinator::frameViewVerticalScrollbarLayerDidChange):
        (WebCore::ScrollingCoordinator::scrollableAreaScrollLayerDidChange):
        (WebCore::ScrollingCoordinator::setLayerIsContainerForFixedPositionLayers):
        (WebCore::ScrollingCoordinator::setLayerIsFixedToContainerLayer):
        (WebCore::ScrollingCoordinator::recomputeWheelEventHandlerCountForFrameView):
        (WebCore::ScrollingCoordinator::setShouldUpdateScrollLayerPositionOnMainThread):
        * page/scrolling/ScrollingCoordinatorNone.cpp: Removed.
        * page/scrolling/chromium/ScrollingCoordinatorChromium.cpp:
        (WebCore::ScrollingCoordinatorChromium::ScrollingCoordinatorChromium):
        (WebCore::ScrollingCoordinatorChromium::~ScrollingCoordinatorChromium):
        (WebCore::ScrollingCoordinatorChromium::frameViewLayoutUpdated):
        (WebCore):
        (WebCore::ScrollingCoordinatorChromium::frameViewRootLayerDidChange):
        (WebCore::ScrollingCoordinatorChromium::frameViewHorizontalScrollbarLayerDidChange):
        (WebCore::ScrollingCoordinatorChromium::frameViewVerticalScrollbarLayerDidChange):
        (WebCore::ScrollingCoordinatorChromium::setScrollLayer):
        (WebCore::ScrollingCoordinatorChromium::setNonFastScrollableRegion):
        (WebCore::ScrollingCoordinatorChromium::setWheelEventHandlerCount):
        (WebCore::ScrollingCoordinatorChromium::setShouldUpdateScrollLayerPositionOnMainThread):
        (WebCore::ScrollingCoordinatorChromium::setLayerIsContainerForFixedPositionLayers):
        (WebCore::ScrollingCoordinatorChromium::setLayerIsFixedToContainerLayer):
        (WebCore::ScrollingCoordinatorChromium::scrollableAreaScrollLayerDidChange):
        (WebCore::ScrollingCoordinatorChromium::recomputeWheelEventHandlerCountForFrameView):
        * page/scrolling/chromium/ScrollingCoordinatorChromium.h: Added.
        (WebCore):
        (ScrollingCoordinatorChromium):
        (WebCore::ScrollingCoordinatorChromium::supportsFixedPositionLayers):
        * page/scrolling/mac/ScrollingCoordinatorMac.h: Added.
        (WebCore):
        (ScrollingCoordinatorMac):
        (ScrollParameters):
        * page/scrolling/mac/ScrollingCoordinatorMac.mm:
        (WebCore::ScrollingCoordinatorMac::ScrollingCoordinatorMac):
        (WebCore::ScrollingCoordinatorMac::~ScrollingCoordinatorMac):
        (WebCore::ScrollingCoordinatorMac::pageDestroyed):
        (WebCore):
        (WebCore::ScrollingCoordinatorMac::scrollingTree):
        (WebCore::ScrollingCoordinatorMac::commitTreeStateIfNeeded):
        (WebCore::ScrollingCoordinatorMac::frameViewLayoutUpdated):
        (WebCore::ScrollingCoordinatorMac::recomputeWheelEventHandlerCountForFrameView):
        (WebCore::ScrollingCoordinatorMac::frameViewRootLayerDidChange):
        (WebCore::ScrollingCoordinatorMac::frameViewHorizontalScrollbarLayerDidChange):
        (WebCore::ScrollingCoordinatorMac::frameViewVerticalScrollbarLayerDidChange):
        (WebCore::ScrollingCoordinatorMac::requestScrollPositionUpdate):
        (WebCore::ScrollingCoordinatorMac::handleWheelEvent):
        (WebCore::ScrollingCoordinatorMac::updateMainFrameScrollPositionAndScrollLayerPosition):
        (WebCore::ScrollingCoordinatorMac::attachToStateTree):
        (WebCore::ScrollingCoordinatorMac::detachFromStateTree):
        (WebCore::ScrollingCoordinatorMac::clearStateTree):
        (WebCore::ScrollingCoordinatorMac::stateNodeForID):
        (WebCore::ScrollingCoordinatorMac::ensureRootStateNodeForFrameView):
        (WebCore::ScrollingCoordinatorMac::setScrollLayerForNode):
        (WebCore::ScrollingCoordinatorMac::setNonFastScrollableRegionForNode):
        (WebCore::ScrollingCoordinatorMac::setScrollParametersForNode):
        (WebCore::ScrollingCoordinatorMac::setWheelEventHandlerCountForNode):
        (WebCore::ScrollingCoordinatorMac::setShouldUpdateScrollLayerPositionOnMainThread):
        (WebCore::ScrollingCoordinatorMac::updateMainFrameScrollLayerPosition):
        (WebCore::ScrollingCoordinatorMac::scheduleTreeStateCommit):
        (WebCore::ScrollingCoordinatorMac::scrollingStateTreeCommitterTimerFired):
        (WebCore::ScrollingCoordinatorMac::commitTreeState):

2012-10-11  Takashi Sakamoto  <tasak@google.com>

        [Shadow DOM] Insertion points need resetStyleInheritance
        https://bugs.webkit.org/show_bug.cgi?id=93922

        Reviewed by Dimitri Glazkov.

        Implemented resetStyleInheritance of insertion points.
        Its spec link is http://dvcs.w3.org/hg/webcomponents/raw-file/tip/spec/shadow/index.html#api-html-content-element-reset-style-inheritance

        Test: fast/dom/shadow/insertion-point-resetStyleInheritance.html

        * css/StyleResolver.cpp:
        (WebCore::isResetStyleInheritance):
        Added a new function to check whether there exists any insertion
        point which has reset-style-inhertiance flag set to be true.
        (WebCore::StyleResolver::initForStyleResolve):
        Modified to use the above function to check reset-style-inheritance.
        * html/shadow/HTMLContentElement.idl:
        * html/shadow/HTMLShadowElement.idl:
        Added a new attribute for reset-style-inheritance.
        * html/shadow/InsertionPoint.cpp:
        (WebCore::InsertionPoint::InsertionPoint):
        Initialized a new member variable for reset-style-inheritance.
        (WebCore::InsertionPoint::resetStyleInheritance):
        (WebCore::InsertionPoint::setResetStyleInheritance):
        Implemented setter/getter for reset-style-inheritance.
        * html/shadow/InsertionPoint.h:
        (InsertionPoint):
        Added a new member variable for reset-style-inheritance.

2012-10-11  Anders Carlsson  <andersca@apple.com>

        Attempt to fix build broken by r131125.

        * page/PageSerializer.cpp:
        (WebCore::PageSerializer::addImageToResources):
        KURL::utf8String() is apparently a USE(GOOGLEURL) feature. Call url.string().utf8() instead.

2012-10-11  Kenichi Ishibashi  <bashi@chromium.org>

        [Chromium] Use harfbuzz-ng by default on Linux
        https://bugs.webkit.org/show_bug.cgi?id=97281

        Reviewed by Tony Chang.

        Switch old harfbuzz to harfbuzz-ng on chromium linux port.

        No new tests. Existing tests should cover this switch.
        Test expectations will be updated.

        * WebCore.gyp/WebCore.gyp:

2012-10-11  Nat Duca  <nduca@chromium.org>

        Expose high-resolution on requestAnimationFrame callback
        https://bugs.webkit.org/show_bug.cgi?id=66683

        This changes requestAnimationFrame's animationStartTime argument
        to be a high resolution DOM timestamp, per disucssion here:
        http://lists.w3.org/Archives/Public/public-web-perf/2012Apr/0004.html

        Reviewed by James Robinson.

        Covered by existing requestAnimationFrame tests.

        * dom/Document.cpp:
        (WebCore::Document::serviceScriptedAnimations):
        * dom/Document.h:
        (Document):
        * dom/ScriptedAnimationController.cpp:
        (WebCore::ScriptedAnimationController::ScriptedAnimationController):
        (WebCore::ScriptedAnimationController::serviceScriptedAnimations):
        (WebCore):
        (WebCore::ScriptedAnimationController::windowScreenDidChange):
        (WebCore::ScriptedAnimationController::scheduleAnimation):
        (WebCore::ScriptedAnimationController::animationTimerFired):
        (WebCore::ScriptedAnimationController::displayRefreshFired):
        * dom/ScriptedAnimationController.h:
        (ScriptedAnimationController):
        * page/FrameView.cpp:
        (WebCore::FrameView::serviceScriptedAnimations):
        * page/FrameView.h:
        (FrameView):
        * platform/graphics/DisplayRefreshMonitor.cpp:
        (WebCore::DisplayRefreshMonitor::DisplayRefreshMonitor):
        (WebCore::DisplayRefreshMonitor::notifyClients):
        * platform/graphics/DisplayRefreshMonitor.h:
        (DisplayRefreshMonitor):
        * platform/graphics/blackberry/DisplayRefreshMonitorBlackBerry.cpp:
        (WebCore::DisplayRefreshMonitor::displayLinkFired):
        * platform/graphics/mac/DisplayRefreshMonitorMac.cpp:
        (WebCore):
        (WebCore::DisplayRefreshMonitor::requestRefreshCallback):
        (WebCore::DisplayRefreshMonitor::displayLinkFired):

2012-10-11  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r131100.
        http://trac.webkit.org/changeset/131100
        https://bugs.webkit.org/show_bug.cgi?id=99127

        Caused an ASSERT (Requested by abarth|gardening on #webkit).

        * platform/graphics/filters/CustomFilterValidatedProgram.cpp:
        (WebCore::CustomFilterValidatedProgram::compositeFunctionString):

2012-10-11  Kenichi Ishibashi  <bashi@chromium.org>

        [Chromium] Improve vertical text rendering of HarfBuzzShaper (Re-land)
        https://bugs.webkit.org/show_bug.cgi?id=98979

        Reviewed by Tony Chang.

        - Specify 'vert' and 'vrt2' features when we render vertical text.
        - Set appropriate script so that harfbuzz-ng can use the features.

        No new tests. fast/text/international/text-spliced-font.html should cover this change.
        This change will affect after switching to harfbuzz-ng.

        * platform/graphics/harfbuzz/ng/HarfBuzzNGFace.cpp:
        (WebCore::HarfBuzzNGFace::HarfBuzzNGFace):
        (WebCore::findScriptForVerticalGlyphSubstitution): Added.
        (WebCore):
        (WebCore::HarfBuzzNGFace::setScriptForVerticalGlyphSubstitution): Added.
        * platform/graphics/harfbuzz/ng/HarfBuzzNGFace.h:
        (HarfBuzzNGFace): Added m_scriptForVerticalText.
        * platform/graphics/harfbuzz/ng/HarfBuzzShaper.cpp:
        (WebCore::HarfBuzzShaper::setFontFeatures):
        Set 'vert' and 'vrt2' features when orientation() == Vertical.
        (WebCore::HarfBuzzShaper::shapeHarfBuzzRuns):
        Call setScriptForVerticalGlyphSubstitution() when orientation() == Vertical.

2012-10-11  Jay Civelli  <jcivelli@chromium.org>

        Fix for a crasher when generating MHTML for a page containing SVG images.
        https://bugs.webkit.org/show_bug.cgi?id=99105

        Reviewed by Adam Barth.

        * page/PageSerializer.cpp:
        (WebCore::PageSerializer::serializeCSSStyleSheet):
        (WebCore::PageSerializer::addImageToResources):

2012-10-11  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r131107.
        http://trac.webkit.org/changeset/131107
        https://bugs.webkit.org/show_bug.cgi?id=99126

        Causes an ASSERT (Requested by abarth|gardening on #webkit).

        * accessibility/AccessibilityNodeObject.cpp:
        (WebCore::AccessibilityNodeObject::labelForElement):
        * dom/DocumentOrderedMap.cpp:
        * dom/DocumentOrderedMap.h:
        (DocumentOrderedMap):
        * dom/Element.cpp:
        (WebCore::Element::insertedInto):
        (WebCore::Element::removedFrom):
        (WebCore):
        (WebCore::Element::willModifyAttribute):
        * dom/Element.h:
        (Element):
        * dom/TreeScope.cpp:
        (WebCore::TreeScope::TreeScope):
        * dom/TreeScope.h:
        (WebCore):
        (TreeScope):

2012-10-11  Tim Horton  <timothy_horton@apple.com>

        LocalCurrentGraphicsContext will never restore the current context to null
        https://bugs.webkit.org/show_bug.cgi?id=99122

        Reviewed by Simon Fraser.

        LocalCurrentGraphicsContext is meant to cause temporary changes to
        NSGraphicsContext's currentContext. However, if it is entered when
        currentContext is null, it will not restore to null, as a null
        m_savedNSGraphicsContext was being used to indicate that the current and
        passed-in graphics contexts were equal (and thus no save/restore was required).

        Add a separate flag for whether or not we need to restore the context.

        Also flip the order of calls to restore graphics context state so that
        exiting LocalCurrentGraphicsContext does things in exactly the opposite
        of entry.

        * platform/mac/LocalCurrentGraphicsContext.h:
        (LocalCurrentGraphicsContext):
        * platform/mac/LocalCurrentGraphicsContext.mm:
        (WebCore::LocalCurrentGraphicsContext::LocalCurrentGraphicsContext):
        (WebCore::LocalCurrentGraphicsContext::~LocalCurrentGraphicsContext):

2012-10-11  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r131109.
        http://trac.webkit.org/changeset/131109
        https://bugs.webkit.org/show_bug.cgi?id=99124

        Does not compile on chromium-mac (Requested by
        abarth|gardening on #webkit).

        * platform/graphics/harfbuzz/ng/HarfBuzzNGFace.cpp:
        (WebCore::HarfBuzzNGFace::HarfBuzzNGFace):
        * platform/graphics/harfbuzz/ng/HarfBuzzNGFace.h:
        (HarfBuzzNGFace):
        * platform/graphics/harfbuzz/ng/HarfBuzzShaper.cpp:
        (WebCore::HarfBuzzShaper::setFontFeatures):
        (WebCore::HarfBuzzShaper::shapeHarfBuzzRuns):

2012-10-11  Beth Dakin  <bdakin@apple.com>

        https://bugs.webkit.org/show_bug.cgi?id=99111
        ScrollingStateNode should keep its Vector of children in an OwnPtr

        Reviewed by Ada Chan.

        Vector<OwnPtr<ScrollingStateNode> >* m_children; is now:
         OwnPtr<Vector<OwnPtr<ScrollingStateNode> > > m_children;
        * page/scrolling/ScrollingStateNode.cpp:
        (WebCore::ScrollingStateNode::ScrollingStateNode):
        (WebCore::ScrollingStateNode::~ScrollingStateNode):
        (WebCore::ScrollingStateNode::appendChild):
        * page/scrolling/ScrollingStateNode.h:
        (ScrollingStateNode):

2012-10-11  Levi Weintraub  <leviw@chromium.org>

        [Sub pixel layout] Fast-path iframe scrolling can picks up an extra pixel
        https://bugs.webkit.org/show_bug.cgi?id=98571

        Reviewed by Emil A Eklund.

        Refactoring all coordinate-switching functionality to use a single "mode" flag
        as opposed to having a bunch of boolean values. This enables the same set of
        options across the board, and a consistent interface. This was previously
        done for mapLocalToContainer.

        The imptetus for this for this stems from the one logical change in this patch
        which only effects sub-pixel layout. FrameView::convertToRenderer and
        convertFromRenderer return IntPoint coordinates, and need to also snap transform
        offsets to determine proper rects for scrolling.

        Unlabeled functions below are simply being updated to these new interfaces.

        Test: fast/sub-pixel/sub-pixel-iframe-copy-on-scroll.html

        * WebCore.exp.in:
        * dom/ContainerNode.cpp:
        (WebCore::ContainerNode::getUpperLeftCorner):
        (WebCore::ContainerNode::getLowerRightCorner):
        * dom/Element.cpp:
        (WebCore::Element::boundsInRootViewSpace):
        * dom/MouseRelatedEvent.cpp:
        (WebCore::MouseRelatedEvent::computeRelativePosition):
        * dom/Node.cpp:
        (WebCore::Node::convertToPage):
        (WebCore::Node::convertFromPage):
        * html/HTMLSelectElement.cpp:
        (WebCore::HTMLSelectElement::listBoxDefaultEventHandler):
        * html/shadow/SliderThumbElement.cpp:
        (WebCore::SliderThumbElement::setPositionFromPoint):
        * html/shadow/SpinButtonElement.cpp:
        (WebCore::SpinButtonElement::defaultEventHandler):
        * page/FrameView.cpp:
        (WebCore::FrameView::convertToRenderer): Now pixel-snaps offsets before passing
        them to TransformState, which transforms the coordinates.
        (WebCore::FrameView::convertFromRenderer): Ditto.
        * rendering/LayoutState.cpp:
        (WebCore::LayoutState::LayoutState):
        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::absoluteQuads):
        * rendering/RenderBox.cpp:
        (WebCore::RenderBox::absoluteQuads):
        (WebCore::RenderBox::mapLocalToContainer):
        (WebCore::RenderBox::mapAbsoluteToLocalPoint):
        * rendering/RenderBox.h:
        (RenderBox):
        * rendering/RenderBoxModelObject.cpp:
        (WebCore::RenderBoxModelObject::mapAbsoluteToLocalPoint):
        * rendering/RenderBoxModelObject.h:
        (RenderBoxModelObject):
        * rendering/RenderEmbeddedObject.cpp:
        (WebCore::RenderEmbeddedObject::isInUnavailablePluginIndicator):
        * rendering/RenderFrameSet.cpp:
        (WebCore::RenderFrameSet::userResize):
        * rendering/RenderGeometryMap.cpp:
        (WebCore::RenderGeometryMap::absolutePoint):
        * rendering/RenderInline.cpp:
        (WebCore::RenderInline::mapLocalToContainer):
        * rendering/RenderInline.h:
        (RenderInline):
        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::absoluteToContents):
        (WebCore::RenderLayer::calculateClipRects):
        * rendering/RenderMediaControls.cpp:
        (WebCore::RenderMediaControls::volumeSliderOffsetFromMuteButton):
        * rendering/RenderMenuList.cpp:
        (WebCore::RenderMenuList::showPopup):
        * rendering/RenderObject.cpp:
        (WebCore::RenderObject::localToAbsolute):
        (WebCore::RenderObject::absoluteToLocal):
        (WebCore::RenderObject::mapLocalToContainer):
        (WebCore::RenderObject::mapAbsoluteToLocalPoint):
        (WebCore::RenderObject::localToContainerQuad):
        (WebCore::RenderObject::localToContainerPoint):
        * rendering/RenderObject.h:
        (RenderObject): MapLocalToContainerFlags is now MapCoordinatesFlags since it's
        now used for other conversion methods.
        (WebCore::RenderObject::localToAbsoluteQuad):
        * rendering/RenderTheme.cpp:
        (WebCore::RenderTheme::volumeSliderOffsetFromMuteButton):
        * rendering/RenderView.cpp:
        (WebCore::RenderView::mapLocalToContainer):
        (WebCore::RenderView::mapAbsoluteToLocalPoint):
        * rendering/RenderView.h:
        (RenderView):
        * rendering/svg/RenderSVGForeignObject.cpp:
        (WebCore::RenderSVGForeignObject::mapLocalToContainer):
        * rendering/svg/RenderSVGForeignObject.h:
        (RenderSVGForeignObject):
        * rendering/svg/RenderSVGInline.cpp:
        (WebCore::RenderSVGInline::mapLocalToContainer):
        * rendering/svg/RenderSVGInline.h:
        (RenderSVGInline):
        * rendering/svg/RenderSVGModelObject.cpp:
        (WebCore::RenderSVGModelObject::mapLocalToContainer):
        * rendering/svg/RenderSVGModelObject.h:
        (RenderSVGModelObject):
        * rendering/svg/RenderSVGRoot.cpp:
        (WebCore::RenderSVGRoot::mapLocalToContainer):
        * rendering/svg/RenderSVGRoot.h:
        (RenderSVGRoot):
        * rendering/svg/RenderSVGText.cpp:
        (WebCore::RenderSVGText::mapLocalToContainer):
        * rendering/svg/RenderSVGText.h:
        (RenderSVGText):
        * rendering/svg/SVGRenderSupport.cpp:
        (WebCore::SVGRenderSupport::mapLocalToContainer):
        * svg/SVGSVGElement.cpp:
        (WebCore::SVGSVGElement::localCoordinateSpaceTransform):

2012-10-11  Adam Barth  <abarth@webkit.org>

        Incorrect/Illegal static cast in FrameView.cpp
        https://bugs.webkit.org/show_bug.cgi?id=98943

        Reviewed by Eric Seidel.

        HTMLFrameElementBase is the common base class for <frame> and <iframe>.

        * page/FrameView.cpp:
        (WebCore::FrameView::init):

2012-10-11  Kenichi Ishibashi  <bashi@chromium.org>

        [Chromium] Improve vertical text rendering of HarfBuzzShaper
        https://bugs.webkit.org/show_bug.cgi?id=98979

        Reviewed by Tony Chang.

        - Specify 'vert' and 'vrt2' features when we render vertical text.
        - Set appropriate script so that harfbuzz-ng can use the features.

        No new tests. fast/text/international/text-spliced-font.html should cover this change.
        This change will affect after switching to harfbuzz-ng.

        * platform/graphics/harfbuzz/ng/HarfBuzzNGFace.cpp:
        (WebCore::HarfBuzzNGFace::HarfBuzzNGFace):
        (WebCore::findScriptForVerticalGlyphSubstitution): Added.
        (WebCore):
        (WebCore::HarfBuzzNGFace::setScriptForVerticalGlyphSubstitution): Added.
        * platform/graphics/harfbuzz/ng/HarfBuzzNGFace.h:
        (HarfBuzzNGFace): Added m_scriptForVerticalText.
        * platform/graphics/harfbuzz/ng/HarfBuzzShaper.cpp:
        (WebCore::HarfBuzzShaper::setFontFeatures):
        Set 'vert' and 'vrt2' features when orientation() == Vertical.
        (WebCore::HarfBuzzShaper::shapeHarfBuzzRuns):
        Call setScriptForVerticalGlyphSubstitution() when orientation() == Vertical.

2012-10-11  Dominic Mazzoni  <dmazzoni@google.com>

        AX: labelForElement is slow when there are a lot of DOM elements
        https://bugs.webkit.org/show_bug.cgi?id=97825

        Reviewed by Ryosuke Niwa.

        Adds a DocumentOrderedMap to TreeScope that allows accessibility to
        quickly map from an id to the label for that id. This speeds up
        AccessibilityNode::labelForElement, which was a bottleneck in Chromium
        when accessibility was on.

        Tests: accessibility/title-ui-element-correctness.html
               perf/accessibility-title-ui-element.html

        * accessibility/AccessibilityNodeObject.cpp:
        (WebCore::AccessibilityNodeObject::labelForElement):
        * dom/DocumentOrderedMap.cpp:
        (WebCore::keyMatchesLabelForAttribute):
        (WebCore):
        (WebCore::DocumentOrderedMap::getElementByLabelForAttribute):
        * dom/DocumentOrderedMap.h:
        (DocumentOrderedMap):
        * dom/Element.cpp:
        (WebCore::Element::insertedInto):
        (WebCore::Element::removedFrom):
        (WebCore::Element::updateLabel):
        (WebCore):
        (WebCore::Element::willModifyAttribute):
        * dom/Element.h:
        (Element):
        * dom/TreeScope.cpp:
        (WebCore::TreeScope::TreeScope):
        (WebCore::TreeScope::addLabel):
        (WebCore):
        (WebCore::TreeScope::removeLabel):
        (WebCore::TreeScope::labelElementForId):
        * dom/TreeScope.h:
        (WebCore):
        (TreeScope):
        (WebCore::TreeScope::shouldCacheLabelsByForAttribute):

2012-10-11  James Simonsen  <simonjam@chromium.org>

        unprefix window.performance.webkitNow()
        https://bugs.webkit.org/show_bug.cgi?id=88278

        Reviewed by Tony Gentilcore.

        Test: fast/dom/Window/window-properties-performance.html
              fast/performance/performance-now-timestamps.html

        * page/Performance.cpp:
        (WebCore::Performance::now):
        * page/Performance.h:
        (Performance):
        * page/Performance.idl:

2012-10-11  Roger Fong  <roger_fong@apple.com>

        [WebGL] [Mac] only the mapped symbol for the first element of a uniform/attribute array is stored.
        https://bugs.webkit.org/show_bug.cgi?id=98966

        Reviewed by Dean Jackson.

        We currently do not add name/mappedName symbol pairs for each element of a uniform/attribute array.
        This is because we only add a number of symbols equal to how many symbols the shader compiler tells us there are.
        The shader compiler treats an array as a single uniform. We need to be adding in symbols to the map for each element of the array ourselves.
        The mappedName of each array element is the same between elements except for the "[index]" at the end so this is easy to do.

        Tested using Khronos WebGL conformance suite:
        conformance/glsl/misc/glsl-long-variable-names.html

        * platform/graphics/ANGLEWebKitBridge.cpp:
        (WebCore::getSymbolInfo):

2012-10-11  Andreas Kling  <kling@webkit.org>

        ElementAttributeData shouldn't be managing Element's callbacks.
        <http://webkit.org/b/98987>

        Reviewed by Anders Carlsson.

        Dispatch the following attribute-related Element callbacks from within Element
        instead of ElementAttributeData. Also made them private.

            - willModifyAttribute
            - didModifyAttribute
            - didAddAttribute
            - didRemoveAttribute

        No behavior change, just making ElementAttributeData a bit dumber (a good thing.)

        * dom/Element.cpp:
        (WebCore::Element::detachAttribute):
        (WebCore::Element::removeAttribute):
        (WebCore::Element::setAttributeInternal):
        (WebCore::Element::removeAttributeInternal):
        (WebCore::Element::addAttributeInternal):
        * dom/Element.h:
        * dom/ElementAttributeData.cpp:
        (WebCore::ElementAttributeData::addAttribute):
        (WebCore::ElementAttributeData::removeAttribute):
        * dom/ElementAttributeData.h:

2012-10-11  Huang Dongsung  <luxtella@company100.net>

        [CSS Shaders] Make custom filters use a premultiplied buffer.
        https://bugs.webkit.org/show_bug.cgi?id=98396

        Reviewed by Dean Jackson.

        Currently, a GLSL css_Composite function returns a premultiplied color, so
        FECustomFilter must make a premultiplied buffer in the case when an author is
        using the CSS mix function.

        In addition, there are two performance benefits when FECustomFilter uses a premultiplied buffer.
        1. FilterEffect::asImageBuffer is faster.
        2. In the future when Accelerated Compositing implementations use
        FECustomFilter, they do not need to convert an unmultiplied buffer to a
        premultiplied buffer.

        Test: css3/filters/custom/custom-filter-composite-fractional-source-alpha.html

        * platform/graphics/filters/FECustomFilter.cpp:
        (WebCore::FECustomFilter::applyShader):

2012-10-11  Rob Buis  <rbuis@rim.com>

        [CMAKE] Do not add include dirs twice
        https://bugs.webkit.org/show_bug.cgi?id=99099

        Reviewed by Yong Li.

        Do not add WebCore_INCLUDE_DIRECTORIES to WebCoreTestSupport_INCLUDE_DIRECTORIES, the includes_directory
        call does this for us.

        * CMakeLists.txt:

2012-10-11  Huang Dongsung  <luxtella@company100.net>

        [CSS Shaders] Implement all composite operators except destination and lighter.
        https://bugs.webkit.org/show_bug.cgi?id=97859

        Reviewed by Dean Jackson.

        Add expressions for all composite operators except destination and
        lighter. The expressions are lifted directly from the CSS Compositing
        and Blending spec [1]. WebKit adds these compositing expressions to the
        author's shader.

        [1]: https://dvcs.w3.org/hg/FXTF/rawfile/tip/compositing/index.html#advancedcompositing

        Test: css3/filters/custom/custom-filter-composite-operators.html

        * platform/graphics/filters/CustomFilterValidatedProgram.cpp:
        (WebCore::CustomFilterValidatedProgram::compositeFunctionString):

2012-10-11  Joshua Bell  <jsbell@chromium.org>

        IndexedDB: IDL types defined in spec should be visible to scripts
        https://bugs.webkit.org/show_bug.cgi?id=99093

        Reviewed by Adam Barth.

        Interfaces defined in the spec WebIDL, such as IDBCursorWithValue, should be exposed
        to scripts as properties of the global object. A few types were missing - add them.

        Test: storage/indexeddb/interfaces.html

        * Modules/indexeddb/DOMWindowIndexedDatabase.idl:
        * Modules/indexeddb/WorkerContextIndexedDatabase.idl:

2012-10-11  Geoffrey Garen  <ggaren@apple.com>

        Removed ASSERT_CLASS_FITS_IN_CELL
        https://bugs.webkit.org/show_bug.cgi?id=97634

        Reviewed by Mark Hahnenberg.

        * bindings/js/JSDOMWindowShell.cpp:
        (WebCore):
        * bindings/js/JSImageConstructor.cpp:
        (WebCore):
        * bindings/js/JSNodeFilterCondition.cpp:
        (WebCore):
        * bindings/js/JSWorkerContextBase.cpp:
        (WebCore):
        * bindings/scripts/CodeGeneratorJS.pm:
        (GenerateImplementation):
        * bindings/scripts/test/JS/JSFloat64Array.cpp:
        (WebCore):
        * bindings/scripts/test/JS/JSTestActiveDOMObject.cpp:
        (WebCore):
        * bindings/scripts/test/JS/JSTestCustomNamedGetter.cpp:
        (WebCore):
        * bindings/scripts/test/JS/JSTestEventConstructor.cpp:
        (WebCore):
        * bindings/scripts/test/JS/JSTestEventTarget.cpp:
        (WebCore):
        * bindings/scripts/test/JS/JSTestException.cpp:
        (WebCore):
        * bindings/scripts/test/JS/JSTestInterface.cpp:
        (WebCore):
        * bindings/scripts/test/JS/JSTestMediaQueryListListener.cpp:
        (WebCore):
        * bindings/scripts/test/JS/JSTestNamedConstructor.cpp:
        (WebCore):
        * bindings/scripts/test/JS/JSTestNode.cpp:
        (WebCore):
        * bindings/scripts/test/JS/JSTestObj.cpp:
        (WebCore):
        * bindings/scripts/test/JS/JSTestSerializedScriptValueInterface.cpp:
        (WebCore):
        * bridge/runtime_method.cpp:
        (JSC):

2012-10-10  Brady Eidson  <beidson@apple.com>

        Switch ResourceLoader::resourceData() from SharedBuffer to ResourceBuffer
        https://bugs.webkit.org/show_bug.cgi?id=98976

        Reviewed by Anders Carlsson.

        No new tests (No change in behavior).

        * WebCore.exp.in:
        * html/ImageDocument.cpp:
        (WebCore::ImageDocumentParser::appendBytes):
        (WebCore::ImageDocumentParser::finish):
        * inspector/InspectorPageAgent.cpp:
        (WebCore::InspectorPageAgent::mainResourceContent):
        (WebCore::InspectorPageAgent::sharedBufferContent):
        (WebCore):
        (WebCore::InspectorPageAgent::dataContent):
        * inspector/InspectorPageAgent.h:
        * inspector/InspectorResourceAgent.cpp:
        (WebCore::InspectorResourceAgent::didFinishLoading):
        (WebCore::InspectorResourceAgent::didFailLoading):
        * loader/DocumentLoader.cpp:
        (WebCore::DocumentLoader::mainResourceData):
        (WebCore::DocumentLoader::setupForReplaceByMIMEType):
        (WebCore::DocumentLoader::maybeCreateArchive):
        (WebCore::DocumentLoader::mainResource):
        (WebCore::DocumentLoader::maybeFinishLoadingMultipartContent):
        * loader/DocumentLoader.h:
        (WebCore):
        (DocumentLoader):
        * loader/ResourceBuffer.cpp:
        (WebCore::ResourceBuffer::append):
        (WebCore):
        (WebCore::ResourceBuffer::clear):
        * loader/ResourceBuffer.h:
        (ResourceBuffer):
        * loader/ResourceLoader.cpp:
        (WebCore::ResourceLoader::resourceData):
        (WebCore::ResourceLoader::addData):
        (WebCore::ResourceLoader::willStopBufferingData):
        * loader/ResourceLoader.h:
        (WebCore):
        (ResourceLoader):
        * loader/SubresourceLoader.cpp:
        (WebCore::SubresourceLoader::didReceiveResponse):
        (WebCore::SubresourceLoader::sendDataToResource):
        (WebCore::SubresourceLoader::didFinishLoading):
        * loader/appcache/ApplicationCacheGroup.cpp:
        (WebCore::ApplicationCacheGroup::finishedLoadingMainResource):

2012-10-11  Konrad Piascik  <kpiascik@rim.com>

        Web Inspector: node search does not work with elements on touch start listener
        https://bugs.webkit.org/show_bug.cgi?id=95252

        Reviewed by Pavel Feldman.

        Added new InspectorInstrumentation::handleTouchEvent() method which
        will prevent a touch handler from firing and inspect and element if we
        are already searching for a node to highlight.
        Now when a user has chosen to inspect element (magnifying glass icon)
        and touches on a page the event will be directed to inspector and
        handled appropriately.

        Not testable.

        * inspector/InspectorDOMAgent.cpp:
        (WebCore::InspectorDOMAgent::handleTouchEvent):
        (WebCore):
        * inspector/InspectorDOMAgent.h:
        (InspectorDOMAgent):
        * inspector/InspectorInstrumentation.cpp:
        (WebCore):
        (WebCore::InspectorInstrumentation::handleTouchEventImpl):
        * inspector/InspectorInstrumentation.h:
        (InspectorInstrumentation):
        (WebCore::InspectorInstrumentation::handleTouchEvent):
        (WebCore):
        * page/EventHandler.cpp:
        (WebCore::EventHandler::handleTouchEvent):

2012-10-11  Otto Derek Cheung  <otcheung@rim.com>

        [BlackBerry] Credentials for HTTPS urls are saved in the HTTP protection space
        https://bugs.webkit.org/show_bug.cgi?id=99082

        Reviewed by Rob Buis.

        Adding support for secure ProtectionSpaces in Credentials
        to prevent credentials from being overwritten/used when the user
        accesses both versions of the same url.

        PR 199457

        The issue was the secure/non-secure version of the same protocol
        were using the same ProtectionSpace enum in the network stack. When
        the credentials are saved, it will overwrite each other since the
        protection object is identical.

        The fix is to use the WebKit provided secure enums when the protcol is secure.

        To test this, access a restricted site that is running on http. Save the
        password and access the same restricted site (same domain
        and path) but on https. The browser should prompt for credentials.

        * platform/network/blackberry/NetworkJob.cpp:
        (WebCore::NetworkJob::notifyAuthReceived):
        (WebCore::NetworkJob::handleFTPHeader):
        (WebCore::NetworkJob::sendRequestWithCredentials):
        (WebCore::NetworkJob::storeCredentials):
        * platform/network/blackberry/NetworkManager.cpp:
        (WebCore::NetworkManager::startJob):

2012-10-11  Arnaud Renevier  <a.renevier@sisa.samsung.com>

        [texmap] logic error in BitmapTextureGL::updateContents
        https://bugs.webkit.org/show_bug.cgi?id=98969

        Reviewed by Noam Rosenthal.

        Incorrect test (bytesPerLine == targetRect.width() / 4) never
        evaluates to true. Change it to correct test 
        (bytesPerLine == targetRect.width() * 4)

        No new tests because no functional change.

        * platform/graphics/texmap/TextureMapperGL.cpp:
        (WebCore::BitmapTextureGL::updateContents):

2012-10-11  Dan Bernstein  <mitz@apple.com>

        <rdar://problem/12477191> Combined text reverts to full-width font after a style change
        https://bugs.webkit.org/show_bug.cgi?id=99009

        Reviewed by John Sullivan.

        Test: fast/text/text-combine-width-after-style-change.html

        * rendering/RenderCombineText.cpp:
        (WebCore::RenderCombineText::styleDidChange): Changed to reset m_isCombined to false, to
        ensure that combineText() is called on the next layout.

2012-10-11  Arnaud Renevier  <a.renevier@sisa.samsung.com>

        accelerated compositing does not work with ati driver
        https://bugs.webkit.org/show_bug.cgi?id=97472

        Reviewed by Martin Robinson.

        Create m_parentWindow at positive position. Otherwise, parts of it are
        not displayed on ati drivers.

        Covered by existing tests.

        * platform/gtk/RedirectedXCompositeWindow.cpp:
        (WebCore::RedirectedXCompositeWindow::RedirectedXCompositeWindow):

2012-10-11  Jaehun Lim  <ljaehun.lim@samsung.com>

        Fix JPEG decoding faiure when IMAGE_DECODER_DOWN_SAMPLING is enabled
        https://bugs.webkit.org/show_bug.cgi?id=98878

        Reviewed by Kenneth Russell.

        When using libjpeg-turbo and enabling IMAGE_DECODER_DOWN_SAMPLING,
        JPEG decoding failed because of no support for JCS_EXT_RGBA, JCS_EXT_BGRA.
        Set RGBA values when color space is JCS_EXT_RGBA or JCS_EXT_BGRA.

        No new tests.

        * platform/image-decoders/jpeg/JPEGImageDecoder.cpp:
        (WebCore::JPEGImageDecoder::outputScanlines):

2012-10-11  Vsevolod Vlasov  <vsevik@chromium.org>

        Web Inspector: Preview HTML in ajax responses in network panel
        https://bugs.webkit.org/show_bug.cgi?id=99066

        Reviewed by Yury Semikhatsky.

        HTML preview is now shown for XHR responses with text/html mime types.
        Also RequestHTMLView is refactored to use sandbox iframe correctly.
        Also extracted a method to generate dataURL from resource/request content.

        * inspector/front-end/NetworkRequest.js:
        (WebInspector.NetworkRequest):
        (WebInspector.NetworkRequest.prototype.populateImageSource):
        (WebInspector.NetworkRequest.prototype.asDataURL):
        * inspector/front-end/RequestHTMLView.js:
        (WebInspector.RequestHTMLView):
        (WebInspector.RequestHTMLView.prototype._createIFrame):
        * inspector/front-end/RequestPreviewView.js:
        (WebInspector.RequestPreviewView.prototype._createPreviewView):
        * inspector/front-end/Resource.js:
        (WebInspector.Resource.prototype.populateImageSource):
        * inspector/front-end/ResourceUtils.js:
        (WebInspector.contentAsDataURL):

2012-10-11  Christophe Dumez  <christophe.dumez@intel.com>

        Regression(r131058): Broke EFL build
        https://bugs.webkit.org/show_bug.cgi?id=99079

        Unreviewed build fix.

        Use iterator::value instead of iterator::second to fix
        build break after r131058.

        * platform/graphics/freetype/SimpleFontDataFreeType.cpp:
        (WebCore::SimpleFontData::canRenderCombiningCharacterSequence):

2012-10-11  Mihai Balan  <mibalan@adobe.com>

        Always enable the experiments tab for WebKit nightly

        Web Inspector: Enabling experiments tab in WebKit nightly.
        https://bugs.webkit.org/show_bug.cgi?id=98923

        Reviewed by Pavel Feldman.

        Enabling Web Inspector experiments tab in WebKit nightly. This is done by adding a new
        Preference key, Preferences.experimentsEnabled. Default values are true for WebKit and false
        for Chromium. They can also be overridden as before (in Chromium)

        * inspector/front-end/Settings.js:
        (WebInspector.ExperimentsSettings.prototype.get experimentsEnabled):

2012-10-11  Hayato Ito  <hayato@chromium.org>

        Support re-projection for Shadow DOM.
        https://bugs.webkit.org/show_bug.cgi?id=97151

        Reviewed by Dimitri Glazkov.

        Update node distribution algorithm so that nodes can be re-projected to insertion points
        in nested shadow subtree.

        See the latest Shadow DOM spec for what 're-projected' means:
        - http://dvcs.w3.org/hg/webcomponents/raw-file/tip/spec/shadow/index.html
        Also see the related W3C bug:
        - http://www.w3.org/Bugs/Public/show_bug.cgi?id=18513

        Since this change breaks existing behavior, we have to update several code at once, which includes:
        - ContentDistributer: ContentDistributor now re-projects distributed nodes.
        - ComposedShadowTreeWalker: ComposedShadowTreeWalker is now aware of re-projection. That can
          resolve re-projection transparently.
        - AncestorChainWalker (formerly named ComposedShadowTreeParentWallker):
          AncestorChainWalker is now aware of re-projection. I've also added a crossingInsertionPoint()
          member function so that clients of the walker can know whether the walker is just crossing
          insertion points for a re-projected node.
        - EventDispatcher: EventDispatcher now uses the updated AncestorChainWalker and its
          crossingInsertionPoint() so that EventDispatcher can compute relative target for each ancestor correctly.

        I've also updated existing layout tests and added some layout tests for re-projection.
        Re-projection for multiple shadow root is not supported yet. I'll address that in another bug.

        Tests: fast/dom/shadow/composed-shadow-tree-walker.html
               fast/dom/shadow/shadow-dom-event-dispatching.html
               fast/dom/shadow/shadowdom-reprojection-1.html
               fast/dom/shadow/shadowdom-reprojection-2.html

        * dom/ComposedShadowTreeWalker.cpp:
        (WebCore::resolveReprojection):
        (WebCore):
        (WebCore::ComposedShadowTreeWalker::traverseSiblingOrBackToInsertionPoint):
        (WebCore::ComposedShadowTreeWalker::traverseParent):
        (WebCore::AncestorChainWalker::AncestorChainWalker):
        (WebCore::AncestorChainWalker::parent):
        * dom/ComposedShadowTreeWalker.h:
        (AncestorChainWalker):
        (WebCore::AncestorChainWalker::crossingInsertionPoint):
        * dom/EventDispatcher.cpp:
        (WebCore::EventRelatedTargetAdjuster::adjust):
        (WebCore::EventDispatcher::ensureEventAncestors):
        * dom/TreeScope.cpp:
        (WebCore::TreeScope::focusedNode):
        * html/HTMLLIElement.cpp:
        (WebCore::HTMLLIElement::attach):
        * html/shadow/ContentDistributor.cpp:
        (WebCore::ContentDistributor::distribute):
        * page/EventHandler.cpp:
        (WebCore::EventHandler::updateMouseEventTargetNode):

2012-10-11  Shinya Kawanaka  <shinyak@chromium.org>

        Make ContentSelectorQuery work when siblings are passed explicitly.
        https://bugs.webkit.org/show_bug.cgi?id=96990

        Reviewed by Dimitri Glazkov.

        When we implement content reprojection in ShadowDOM, we have to pass a node pool to SelectorChecker.
        We introdue ShadowDOMSiblingTraversalStrategy, which traverses a node pool instead of real node siblings.

        Since ContentSelector is a very hot place, we don't want to regress performance. In the previous patch,
        we've make ContentSelector::checkOneSelector template to take SiblingTraversalStrategy as an argument.

        We also move DOMSiblingTraversalStrategy to SiblingTraversalStrategies.h.

        * GNUmakefile.list.am:
        * Target.pri:
        * WebCore.gypi:
        * WebCore.vcproj/WebCore.vcproj:
        * WebCore.xcodeproj/project.pbxproj:
        * css/SelectorChecker.cpp:
        (WebCore):
        * css/SelectorChecker.h:
        * css/SiblingTraversalStrategies.h: Added.
        (WebCore):
        (DOMSiblingTraversalStrategy): Moved from SelectorChecker.
        (WebCore::DOMSiblingTraversalStrategy::isFirstChild):
        (WebCore::DOMSiblingTraversalStrategy::isLastChild):
        (WebCore::DOMSiblingTraversalStrategy::isFirstOfType):
        (WebCore::DOMSiblingTraversalStrategy::isLastOfType):
        (WebCore::DOMSiblingTraversalStrategy::countElementsBefore):
        (WebCore::DOMSiblingTraversalStrategy::countElementsOfTypeBefore):
        (WebCore::DOMSiblingTraversalStrategy::countElementsAfter):
        (WebCore::DOMSiblingTraversalStrategy::countElementsOfTypeAfter):
        (WebCore::ShadowDOMSiblingTraversalStrategy::ShadowDOMSiblingTraversalStrategy):
        (ShadowDOMSiblingTraversalStrategy): SiblingTraversalStrategy which uses a node pool instead of a real element
        siblings. This strategy takes a vector of node which we traverse.
        (WebCore::ShadowDOMSiblingTraversalStrategy::isFirstChild):
        (WebCore::ShadowDOMSiblingTraversalStrategy::isLastChild):
        (WebCore::ShadowDOMSiblingTraversalStrategy::isFirstOfType):
        (WebCore::ShadowDOMSiblingTraversalStrategy::isLastOfType):
        (WebCore::ShadowDOMSiblingTraversalStrategy::countElementsBefore):
        (WebCore::ShadowDOMSiblingTraversalStrategy::countElementsAfter):
        (WebCore::ShadowDOMSiblingTraversalStrategy::countElementsOfTypeBefore):
        (WebCore::ShadowDOMSiblingTraversalStrategy::countElementsOfTypeAfter):
        * css/StyleResolver.cpp:
        * html/shadow/ContentDistributor.cpp:
        (WebCore::ContentDistributor::distributeSelectionsTo):
        * html/shadow/ContentSelectorQuery.cpp: Uses ShadowDOMSiblingTraversalStrategy instead of DOMSiblingTraversalStrategy.
        (WebCore::ContentSelectorChecker::ContentSelectorChecker):
        (WebCore):
        (WebCore::ContentSelectorChecker::checkContentSelector):
        (WebCore::ContentSelectorDataList::initialize):
        (WebCore::ContentSelectorDataList::matches):
        (WebCore::ContentSelectorQuery::ContentSelectorQuery):
        (WebCore::ContentSelectorQuery::matches):
        * html/shadow/ContentSelectorQuery.h:
        (ContentSelectorChecker):
        (WebCore):
        (ContentSelectorDataList):
        (ContentSelectorQuery):

2012-10-11  Balazs Kelemen  <kbalazs@webkit.org>

        [Qt] GraphicsContextPlatformPrivate is leaking it's ShadowBlur
        https://bugs.webkit.org/show_bug.cgi?id=99073

        Reviewed by Noam Rosenthal.

        Stop leaking GraphicsContextPlatformPrivate::shadow.

        No change in behavior so no new tests.

        * platform/graphics/qt/GraphicsContextQt.cpp:
        (WebCore::GraphicsContextPlatformPrivate::~GraphicsContextPlatformPrivate):
        Always destroy shadow. It is obviously owned by the context so it has
        nothing to do with the erly return.

2012-10-11  Joshua Bell  <jsbell@chromium.org>

        WebIDL: overloaded methods prevent number -> string conversion
        https://bugs.webkit.org/show_bug.cgi?id=85326

        Reviewed by Kentaro Hara.

        Make the default behavior for overloaded methods matching DOMString arguments match the
        default behavior for non-overloaded methods, which more closely matches the WebIDL spec.
        Enable legacy behavior of only matching undefined/null/string/object(and not number,
        boolean, etc) via the StrictTypeChecking attribute.

        Tests: storage/indexeddb/cursor-overloads.html
               storage/indexeddb/legacy-constants.html
               ... and run-bindings-tests

        * Modules/indexeddb/IDBCursor.cpp:
        (WebCore::IDBCursor::stringToDirection): Handle "0"..."4" as stringified legacy constants.
        * Modules/indexeddb/IDBCursor.h:
        * Modules/indexeddb/IDBDatabase.cpp: Remove redundant overloads.
        (WebCore::IDBDatabase::transaction): Remove redundant overloads.
        * Modules/indexeddb/IDBDatabase.h:
        (IDBDatabase):
        * Modules/indexeddb/IDBDatabase.idl: Remove redundant overloads.
        * Modules/indexeddb/IDBIndex.cpp: Remove redundant overloads.
        (WebCore::IDBIndex::openCursor):
        (WebCore::IDBIndex::openKeyCursor):
        * Modules/indexeddb/IDBIndex.h: Remove redundant overloads.
        (IDBIndex):
        * Modules/indexeddb/IDBIndex.idl: Remove redundant overloads.
        * Modules/indexeddb/IDBObjectStore.cpp: Remove redundant overloads.
        (WebCore::IDBObjectStore::openCursor):
        * Modules/indexeddb/IDBObjectStore.h: Remove redundant overloads.
        (IDBObjectStore):
        * Modules/indexeddb/IDBObjectStore.idl: Remove redundant overloads.
        * Modules/indexeddb/IDBTransaction.cpp:
        (WebCore::IDBTransaction::stringToMode): Handle "0"..."4" as stringified legacy constants.
        * Modules/indexeddb/IDBTransaction.h:
        * bindings/scripts/CodeGeneratorJS.pm: Check for StrictTypeChecking attribute.
        (GenerateParametersCheckExpression):
        * bindings/scripts/CodeGeneratorV8.pm: Ditto.
        (GenerateParametersCheckExpression):
        * bindings/scripts/test/JS/JSTestObj.cpp: Rebaselined.
        (WebCore::jsTestObjPrototypeFunctionOverloadedMethod11):
        (WebCore):
        (WebCore::jsTestObjPrototypeFunctionOverloadedMethod):
        * bindings/scripts/test/TestObj.idl: Added [StrictTypeChecking] to DOMString overloads,
        plus a new DOMString overload w/o it.
        * bindings/scripts/test/V8/V8TestObj.cpp: Rebaselined.
        (WebCore::TestObjV8Internal::overloadedMethod11Callback):
        (TestObjV8Internal):
        (WebCore::TestObjV8Internal::overloadedMethodCallback):
        * html/canvas/CanvasRenderingContext2D.idl: Tag legacy overloads with [StrictTypeChecking].
        * xml/XMLHttpRequest.idl: Ditto.

2012-10-11  Justin Novosad  <junov@chromium.org>

        [Chromium][Mac] r130994 seems to break chromium gpu test
        https://bugs.webkit.org/show_bug.cgi?id=98995

        Reviewed by Stephen White.

        Removing unnecessary assertion that was based on an invalid assumption
        that 2d canvas draw operations were always called from within WebThread
        tasks.

        Test: Canvas2DAllowed chromium gpu_test

        * platform/graphics/chromium/Canvas2DLayerManager.cpp:
        (WebCore::Canvas2DLayerManager::willProcessTask):

2012-10-11  Kenichi Ishibashi <bashi@chromium.org>

        REGRESSION(130231): Causes 3 complex font test failures on EFL / Harfbuzz+Freetype
        https://bugs.webkit.org/show_bug.cgi?id=98247

        Reviewed by Kenneth Rohde Christiansen.

        Implement canRenderCombiningCharacterSequence() for the Freetype case.

        No new tests, covered by existing tests. Actually the lack of the implementation made
        fast/text/atsui-multiple-renderers.html,  fast/text/atsui-spacing-features.html and
        fast/text/wide-zero-width-space.html fail on EFL.

        * platform/graphics/freetype/SimpleFontDataFreeType.cpp: Implement canRenderCombiningCharacterSequence().
        (WebCore::SimpleFontData::canRenderCombiningCharacterSequence):

2012-10-11  Keishi Hattori  <keishi@webkit.org>

        F4 key should open the picker popup on Windows and Linux
        https://bugs.webkit.org/show_bug.cgi?id=98754

        Reviewed by Kent Tamura.

        On Windows, F4 key is used to open the combo box popup. We will introduce the same keybinding for picker popups.

        Added test to calendar-picker-key-operations.html, date-suggestion-picker-key-operations.html, time-suggestion-picker-key-operations.html.

        * html/BaseMultipleFieldsDateAndTimeInputType.cpp:
        (WebCore::BaseMultipleFieldsDateAndTimeInputType::handleKeydownEvent): Open picker on F4 key if it is enabled.
        * rendering/RenderTheme.cpp:
        (WebCore::RenderTheme::shouldOpenPickerWithF4Key): Returns true if we want to enable the F4 key binding on this platform. Return false for default.
        (WebCore):
        * rendering/RenderTheme.h:
        (RenderTheme):
        * rendering/RenderThemeChromiumLinux.cpp:
        (WebCore::RenderThemeChromiumLinux::shouldOpenPickerWithF4Key): Returns true.
        (WebCore):
        * rendering/RenderThemeChromiumLinux.h:
        * rendering/RenderThemeChromiumWin.cpp:
        (WebCore):
        (WebCore::RenderThemeChromiumWin::shouldOpenPickerWithF4Key): Returns true.
        * rendering/RenderThemeChromiumWin.h:
        (RenderThemeChromiumWin):

2012-10-11  John J. Barton  <johnjbarton@chromium.org>

        Web Inspector: Zebra stripe the console
        https://bugs.webkit.org/show_bug.cgi?id=98701

        Reviewed by Pavel Feldman.

        Add .console-message:hover rule to lightly highlight the message line.

        * inspector/front-end/inspector.css:
        (.console-message:hover):

2012-10-11  Vsevolod Vlasov  <vsevik@chromium.org>

        Web Inspector: Filter out embedder injected content scripts
        https://bugs.webkit.org/show_bug.cgi?id=99039

        Reviewed by Yury Semikhatsky.

        * inspector/front-end/NetworkUISourceCodeProvider.js:
        (WebInspector.NetworkUISourceCodeProvider.prototype._parsedScriptSource):

2012-10-11  Pavel Feldman  <pfeldman@chromium.org>

        Not reviewed: revert 131004, 131012, 131016, 131042, 131043 for breaking inspector console
        https://bugs.webkit.org/show_bug.cgi?id=99042

        One can't type in the inspector console after 131004.

        * CMakeLists.txt:
        * GNUmakefile.list.am:
        * Target.pri:
        * WebCore.gypi:
        * WebCore.vcproj/WebCore.vcproj:
        * WebCore.xcodeproj/project.pbxproj:
        * dom/DOMAllInOne.cpp:
        * dom/Element.cpp:
        (WebCore::Element::attach):
        (WebCore::Element::detach):
        (WebCore::Element::recalcStyle):
        * dom/Element.h:
        (WebCore):
        (Element):
        * dom/ElementRareData.h:
        (ElementRareData):
        * dom/Node.cpp:
        (WebCore::checkAcceptChild):
        * dom/Node.h:
        (Node):
        * dom/NodeRenderingContext.cpp:
        (WebCore::NodeRenderingContext::nextRenderer):
        * dom/PseudoElement.cpp: Removed.
        * dom/PseudoElement.h: Removed.
        * rendering/HitTestResult.cpp:
        (WebCore::HitTestResult::setInnerNode):
        (WebCore::HitTestResult::setInnerNonSharedNode):
        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::styleDidChange):
        (WebCore::RenderBlock::updateBeforeAfterContent):
        (WebCore):
        (WebCore::RenderBlock::splitBlocks):
        (WebCore::RenderBlock::addChildIgnoringAnonymousColumnBlocks):
        (WebCore::RenderBlock::createReplacementRunIn):
        (WebCore::RenderBlock::renderName):
        * rendering/RenderBlock.h:
        (RenderBlock):
        * rendering/RenderButton.cpp:
        (WebCore::RenderButton::updateBeforeAfterContent):
        (WebCore):
        * rendering/RenderButton.h:
        (RenderButton):
        * rendering/RenderCounter.cpp:
        (WebCore::RenderCounter::originalText):
        * rendering/RenderDeprecatedFlexibleBox.cpp:
        (WebCore::RenderDeprecatedFlexibleBox::renderName):
        * rendering/RenderGrid.cpp:
        (WebCore::RenderGrid::renderName):
        * rendering/RenderInline.cpp:
        (WebCore::RenderInline::styleDidChange):
        (WebCore::RenderInline::addChildIgnoringContinuation):
        (WebCore::RenderInline::splitInlines):
        (WebCore::RenderInline::renderName):
        * rendering/RenderListItem.cpp:
        (WebCore::RenderListItem::updateMarkerLocation):
        * rendering/RenderMultiColumnBlock.cpp:
        (WebCore::RenderMultiColumnBlock::renderName):
        * rendering/RenderObject.cpp:
        (WebCore::RenderObject::createObject):
        * rendering/RenderObject.h:
        (WebCore::RenderObject::generatingNode):
        * rendering/RenderObjectChildList.cpp:
        (WebCore):
        (WebCore::findBeforeAfterParent):
        (WebCore::RenderObjectChildList::updateBeforeAfterStyle):
        (WebCore::createRendererForBeforeAfterContent):
        (WebCore::ensureBeforeAfterContainer):
        (WebCore::RenderObjectChildList::updateBeforeAfterContent):
        * rendering/RenderObjectChildList.h:
        (RenderObjectChildList):
        * rendering/RenderRubyText.cpp:
        (WebCore::RenderRubyText::updateBeforeAfterContent):
        (WebCore):
        * rendering/RenderRubyText.h:
        (RenderRubyText):
        * rendering/RenderTableCell.h:
        (WebCore::RenderTableCell::renderName):
        * rendering/RenderTableRow.cpp:
        (WebCore::RenderTableRow::updateBeforeAndAfterContent):
        (WebCore):
        (WebCore::RenderTableRow::styleDidChange):
        * rendering/RenderTableRow.h:
        (RenderTableRow):
        (WebCore::RenderTableRow::renderName):
        * rendering/RenderTableSection.cpp:
        (WebCore::RenderTableSection::addChild):
        * rendering/RenderTableSection.h:
        (WebCore::RenderTableSection::renderName):
        * rendering/RenderTreeAsText.cpp:
        (WebCore::RenderTreeAsText::writeRenderObject):

2012-10-11  Arpita Bahuguna  <arpitabahuguna@gmail.com>

        REGRESSION (r96393): In some cases, generated content is never shown
        https://bugs.webkit.org/show_bug.cgi?id=88196

        Reviewed by Antti Koivisto.

        Elements with style specified from an attribute selector in conjunction
        with a pseudo-element should not take on the shared style of their
        previous matching sibling (if any).

        The problem here is that an attribute selector appended by a pseudo-element
        does not return any matched rules for the call (matchesRuleSet(m_uncommonAttributeRuleSet.get()))
        in StyleResolver::locateSharedStyle().

        This is because of the way pseudo-elements are handled in
        SelectorChecker::checkSelector(). For a pseudo-element selector we check
        for the condition (!context.elementStyle && m_mode == ResolvingStyle) and
        since for this particular flow the SelectorChecker mode is set to ResolvingStyle
        and since the current element's style is still not available we fail this
        initial check and return SelectorFailsLocally from checkSelector(). This is
        incorrect behavior since the element does have an attribute selector specified
        for it.

        Have thus introduced another enum value: SharingRules for SelectorChecker's Mode.
        SelectorChecker's mode should be set to SharingRules before making the
        call to collectMatchingRules() and then reset (back to ResolvingStyle) thereafter.

        Existing Mode value: CollectingRules although appropriate cannot be used in this
        scenario because we also don't want to set any value to dynamicPseudo for this flow.

        Test: fast/selectors/style-sharing-attribute-selector-with-pseudo-element.html

        * css/SelectorChecker.cpp:
        (WebCore::SelectorChecker::checkSelector):
        Added additional check for SelectorChecker's mode: SharingRules when
        trying to match for the pseudo-element selector.

        * css/SelectorChecker.h:
        Added SharingRules to Mode enum.

        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::styleSharingCandidateMatchesRuleSet):
        (WebCore::StyleResolver::locateSharedStyle):
        * css/StyleResolver.h:
        (StyleResolver):
        Renamed matchesRuleSet() to a more descriptive styleSharingCandidateMatchesRuleSet().
        Also, setting the SelectorChecker's mode to SharingRules before calling
        on collectMatchingRules() from styleSharingCandidateMatchesRuleSet().

2012-10-11  Shinya Kawanaka  <shinyak@chromium.org>

        Some shadow roots are not showing up in Inspector.
        https://bugs.webkit.org/show_bug.cgi?id=88251

        Reviewed by Pavel Feldman.

        When an element has only text node, its shadow root is not showing up in Inspector, since
        child text is shown in oneline. We had to prevent from inlining child text when a shadow root is
        added.

        Test: inspector/elements/shadow-root.html

        * inspector/front-end/DOMAgent.js:
        (WebInspector.DOMNode):
        (WebInspector.DOMNode.prototype.hasShadowRoots):
        * inspector/front-end/ElementsTreeOutline.js:

2012-10-11  Allan Sandfeld Jensen  <allan.jensen@digia.com>

        [Qt] More responsive scroll animations
        https://bugs.webkit.org/show_bug.cgi?id=99016

        Reviewed by Jocelyn Turcotte.

        Changes the scrolling animations so they accelerate faster than they deccelerate,
        making the animation respond faster to user input.

        * platform/ScrollAnimatorNone.cpp:
        (WebCore::ScrollAnimatorNone::parametersForScrollGranularity):
        * platform/ScrollAnimatorNone.h:
        (ScrollAnimatorNone):

2012-10-11  Alexander Shalamov  <alexander.shalamov@intel.com>

        [CSS3 Media Queries] Aspect ratio value re-parsed when media query expression is evaluated
        https://bugs.webkit.org/show_bug.cgi?id=99003

        Reviewed by Kenneth Rohde Christiansen.

        Use CSSAspectRatioValue instead of CSSValueList to store aspect ratio value
        in order to avoid re-parsing of aspect ratio data during media expression evaluation.

        test: fast/media/w3c/test_media_queries.html

        * css/MediaQueryEvaluator.cpp:
        (WebCore::compareAspectRatioValue):
        (WebCore):
        (WebCore::aspect_ratioMediaFeatureEval):
        (WebCore::device_aspect_ratioMediaFeatureEval):
        * css/MediaQueryExp.cpp:
        (WebCore::MediaQueryExp::MediaQueryExp):

2012-10-11  Zeno Albisser  <zeno@webkit.org>

        [Qt] Implement GraphicsSurfaceToken to replace uint64_t as token type.
        https://bugs.webkit.org/show_bug.cgi?id=98501

        Replace the token type for GraphicsSurface with a new class GraphicsSurfaceToken.
        This is necessary in order to implement GraphicsSurface for Windows.
        Depending on the platform a GraphicsSurfaceToken might contain a
        WindowID (Linux/GLX), two IOSurfaceIDs (Mac) or in the future two HANDLEs (Windows).
        The simple uint64_t is not sufficient anymore, since a single HANDLE in windows
        can be 64bit already.

        Reviewed by Noam Rosenthal.

        * Target.pri:
        * platform/graphics/qt/GraphicsContext3DQt.cpp:
        (GraphicsContext3DPrivate):
        (WebCore::GraphicsContext3DPrivate::graphicsSurfaceToken):
        * platform/graphics/surfaces/GraphicsSurface.cpp:
        (WebCore::GraphicsSurface::create):
        (WebCore::GraphicsSurface::exportToken):
        * platform/graphics/surfaces/GraphicsSurface.h:
        (GraphicsSurface):
        * platform/graphics/surfaces/GraphicsSurfaceToken.h: Added.
        (WebCore):
        (GraphicsSurfaceToken):
        (WebCore::GraphicsSurfaceToken::GraphicsSurfaceToken):
        (WebCore::GraphicsSurfaceToken::operator!=):
        (WebCore::GraphicsSurfaceToken::isValid):
        * platform/graphics/surfaces/mac/GraphicsSurfaceMac.cpp:
        (WebCore::GraphicsSurfacePrivate::GraphicsSurfacePrivate):
        (WebCore::GraphicsSurfacePrivate::token):
        (GraphicsSurfacePrivate):
        (WebCore::GraphicsSurface::platformExport):
        (WebCore::GraphicsSurface::platformImport):
        * platform/graphics/surfaces/qt/GraphicsSurfaceGLX.cpp:
        (WebCore::GraphicsSurface::platformExport):
        (WebCore::GraphicsSurface::platformImport):
        * platform/graphics/texmap/TextureMapperBackingStore.cpp:
        (WebCore::TextureMapperSurfaceBackingStore::setGraphicsSurface):
        (WebCore::TextureMapperSurfaceBackingStore::setSurface):
        * platform/graphics/texmap/TextureMapperBackingStore.h:
        (TextureMapperSurfaceBackingStore):
        (WebCore::TextureMapperSurfaceBackingStore::TextureMapperSurfaceBackingStore):
        * platform/graphics/texmap/TextureMapperPlatformLayer.h:
        (WebCore::TextureMapperPlatformLayer::graphicsSurfaceToken):

2012-10-11  Alexander Pavlov  <apavlov@chromium.org>

        Web Inspector: [Elements] Breadcrumbs are not updated upon involved elements' className changes
        https://bugs.webkit.org/show_bug.cgi?id=98887

        Reviewed by Vsevolod Vlasov.

        Breadcrumbs should be updated upon the "class" and "id" attribute changes of elements participating in the breadcrumb path.

        Test: inspector/elements/breadcrumb-updates.html

        * inspector/front-end/ElementsPanel.js:
        (WebInspector.ElementsPanel):
        (WebInspector.ElementsPanel.prototype._updateBreadcrumbIfNeeded):

2012-10-11  Kunihiko Sakamoto  <ksakamoto@chromium.org>

        Final newline (LF or CRLF) in paste buffer is converted to space
        https://bugs.webkit.org/show_bug.cgi?id=80838

        Reviewed by Ryosuke Niwa.

        Currently newline characters are replaced with spaces when pasted
        to text input. This behavior was introduced in r37539, with the
        intention to follow the FireFox's behavior (see
        https://bugs.webkit.org/show_bug.cgi?id=20461). However, FireFox
        truncates newlines at the end of pasted text, instead of replacing
        them with spaces. So this patch changes TextFieldInputType to cut
        trailing newlines of inserted text.

        Test: fast/forms/paste-multiline-text-input.html

        * html/TextFieldInputType.cpp:
        (WebCore::TextFieldInputType::handleBeforeTextInsertedEvent):
        Truncates trailing newlines.

2012-10-11  Kent Tamura  <tkent@chromium.org>

        Introduce Localizer::isRTL, and use it in DateTimeChooserImpl
        https://bugs.webkit.org/show_bug.cgi?id=98992

        * platform/text/LocaleICU.cpp:
        (WebCore::LocaleICU::isRTL): Need to initialize 'status'.

2012-10-11  Eugene Klyuchnikov  <eustas.bug@gmail.com>

        Web Inspector: The 'X' of the close button of Settings view is not centered
        https://bugs.webkit.org/show_bug.cgi?id=99008

        Reviewed by Alexander Pavlov.

        Fixed text positioning in CSS.

        * inspector/front-end/helpScreen.css:
        (.help-close-button):

2012-10-11  Kent Tamura  <tkent@chromium.org>

        Introduce Localizer::isRTL, and use it in DateTimeChooserImpl
        https://bugs.webkit.org/show_bug.cgi?id=98992

        Reviewed by Kentaro Hara.

        - Move the RTL detection code in
          WebKit/chromium/src/DateTimeChooserImpl.cpp to LocaleWin::isRTL()
        - Introduce Localizer::isRTL as a pure virtual function
        - Implement LocaleMac::isRTL with native API
        - Implement LocaleICU::isRTL with ICU API
        - Add dummy implementation: LocaleNone::isRTL

        Add some tests to WebKit/chromium/tests/.

        * platform/text/Localizer.h:
        (Localizer): Declare pure virtual isRTL.

        * platform/text/LocaleICU.h:
        (LocaleICU): Declare isRTL.
        * platform/text/LocaleICU.cpp:
        (WebCore::LocaleICU::isRTL): Implemented with uloc_getCharacterOrientation.

        * platform/text/LocaleNone.cpp:
        (LocaleNone): Declare isRTL.
        (WebCore::LocaleNone::isRTL): Added.

        * platform/text/LocaleWin.h:
        (LocaleWin): Declare isRTL.
        * platform/text/LocaleWin.cpp:
        (WebCore::LocaleWin::isRTL): Implemented.

        * platform/text/mac/LocaleMac.h:
        (LocaleMac): Declare isRTL.
        * platform/text/mac/LocaleMac.mm:
        (WebCore::LocaleMac::isRTL): Implemented.

2012-10-11  Vsevolod Vlasov  <vsevik@chromium.org>

        Web Inspector: TypeError in ConsoleMessage.js
        https://bugs.webkit.org/show_bug.cgi?id=98999

        Reviewed by Alexander Pavlov.

        This patch is based on patch by John J. Barton.
        Added a check that stack length is equal.

        * inspector/front-end/ConsoleMessage.js:
        (WebInspector.ConsoleMessageImpl.prototype.isEqual):

2012-10-10  Jer Noble  <jer.noble@apple.com>

        Disallow full screen mode keyboard access by default.
        https://bugs.webkit.org/show_bug.cgi?id=98971
        <rdar://problem/12474226>

        Reviewed by Sam Weinig.

        Fall back to requesting non-keyboard access if the client refuses to allow keyboard access.

        * dom/Document.cpp:
        (WebCore::Document::requestFullScreenForElement):

2012-10-10  Ilya Tikhonovsky  <loislo@chromium.org>

        Web Inspector: NMI instrument HTMLCanvas element.
        https://bugs.webkit.org/show_bug.cgi?id=98917

        Reviewed by Yury Semikhatsky.

        It also includes non intrusive instrumentation for skia classes.

        Test: inspector/profiler/memory-instrumentation-canvas.html

        * WebCore.gypi:
        * html/HTMLCanvasElement.cpp:
        (WebCore::HTMLCanvasElement::reportMemoryUsage):
        (WebCore):
        * html/HTMLCanvasElement.h:
        (HTMLCanvasElement):
        * platform/graphics/ImageBuffer.cpp:
        (WebCore::ImageBuffer::reportMemoryUsage):
        (WebCore):
        * platform/graphics/ImageBuffer.h:
        (ImageBuffer):
        * platform/graphics/chromium/ImageBufferDataSkia.h:
        (ImageBufferData):
        * platform/graphics/skia/ImageBufferSkia.cpp:
        (WebCore::ImageBufferData::reportMemoryUsage):
        (WebCore):
        * platform/graphics/skia/MemoryInstrumentationSkia.cpp: Copied from Source/WebCore/platform/graphics/chromium/ImageBufferDataSkia.h.
        (reportMemoryUsage):
        * platform/graphics/skia/MemoryInstrumentationSkia.h: Copied from Source/WebCore/platform/graphics/chromium/ImageBufferDataSkia.h.
        * platform/graphics/skia/NativeImageSkia.cpp:

2012-10-10  Mike West  <mkwst@google.com>

        Document calls createElement with the wrong parameters.
        https://bugs.webkit.org/show_bug.cgi?id=98907

        Reviewed by Kent Tamura.

        Document::importNode calls Document::createElement with a QualifiedName
        and ExceptionCode. The Document::createElement that takes a
        QualifiedName doesn't generate an exception; the second argument is a
        bool, which the ExceptionCode autocasts into.

        Changing the argument to an explicit bool shouldn't have any visible
        effect; no new tests are required.

        * dom/Document.cpp:
        (WebCore::Document::importNode):

2012-10-10  Lianghui Chen  <liachen@rim.com>

        [BlackBerry] Fix assertion in NetworkJob::notifyChallengeResult.
        https://bugs.webkit.org/show_bug.cgi?id=97397
        Internal PR: 186597.

        Internally reviewed by Yong Li, Joe Mason.
        Reviewed by George Staikos.

        Add a singleton AuthenticationChallengeManager to manage authentication
        challenge dialog. It does following things:
        Record page creation/deletion, so it knows what page is present or not.
        Record page visibility change so it knows when to display a dialog or not.
        Accept authentication challenge, and decide whether to postpone the
            challenge dialog based on whether there is active authentication challenge
            dialog already and whether its page is visible or not.
        When a challenge result comes back, notify the result to all clients
            authenticating for the same protection space, and then start the next
            authentication challenge from the same page, if there is one.
        When a page becomes visible, start the first authentication challenge
            dialog that has been blocked before.
        When an authentication challenge is requested, the NetworkJob will be
            deferred so its initial response will be saved while waiting for
            user decision on the challenge.

        No new tests for platform specific internal change.

        * PlatformBlackBerry.cmake:
        * platform/blackberry/AuthenticationChallengeManager.cpp: Added.
        (WebCore):
        (ChallengeInfo):
        (WebCore::ChallengeInfo::ChallengeInfo):
        (AuthenticationChallengeManagerPrivate):
        (WebCore::AuthenticationChallengeManagerPrivate::AuthenticationChallengeManagerPrivate):
        (WebCore::AuthenticationChallengeManagerPrivate::resumeAuthenticationChallenge):
        (WebCore::AuthenticationChallengeManagerPrivate::startAuthenticationChallenge):
        (WebCore::AuthenticationChallengeManagerPrivate::pageExists):
        (WebCore::AuthenticationChallengeManager::AuthenticationChallengeManager):
        (WebCore::AuthenticationChallengeManager::pageCreated):
        (WebCore::AuthenticationChallengeManager::pageDeleted):
        (WebCore::AuthenticationChallengeManager::pageVisibilityChanged):
        (WebCore::AuthenticationChallengeManager::authenticationChallenge):
        (WebCore::AuthenticationChallengeManager::cancelAuthenticationChallenge):
        (WebCore::AuthenticationChallengeManager::notifyChallengeResult):
        (WebCore::AuthenticationChallengeManager::instance):
        (WebCore::AuthenticationChallengeManager::init):
        * platform/blackberry/AuthenticationChallengeManager.h:
        (WebCore):
        (AuthenticationChallengeManager):
        * platform/blackberry/PageClientBlackBerry.h:
        * platform/graphics/blackberry/MediaPlayerPrivateBlackBerry.cpp:
        (WebCore::MediaPlayerPrivate::MediaPlayerPrivate):
        (WebCore::MediaPlayerPrivate::~MediaPlayerPrivate):
        (WebCore::MediaPlayerPrivate::onAuthenticationNeeded):
        (WebCore::MediaPlayerPrivate::notifyChallengeResult):
        * platform/graphics/blackberry/MediaPlayerPrivateBlackBerry.h:
        (MediaPlayerPrivate):
        * platform/network/blackberry/NetworkJob.cpp:
        (WebCore::NetworkJob::NetworkJob):
        (WebCore::NetworkJob::~NetworkJob):
        (WebCore):
        (WebCore::NetworkJob::handleNotifyStatusReceived):
        (WebCore::NetworkJob::handleNotifyClose):
        (WebCore::NetworkJob::shouldReleaseClientResource):
        (WebCore::NetworkJob::sendRequestWithCredentials):
        (WebCore::NetworkJob::notifyChallengeResult):
        * platform/network/blackberry/NetworkJob.h:
        (NetworkJob):

2012-10-10  Simon Fraser  <simon.fraser@apple.com>

        compositing/tiling/crash-reparent-tiled-layer.html is flakey
        https://bugs.webkit.org/show_bug.cgi?id=82546

        Reviewed by Beth Dakin.

        When calling layerTreeAsText() inside the document load event,
        GraphicsLayerCA may have not flushed layers yet, so layer tree
        properties that are affected by flushing (tiled layer, visible
        rects) appeared flakey in tests.
        
        Fix by forcing a flush before dumping the layer tree.        
        
        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::layerTreeAsText):

2012-10-10  Beth Dakin  <bdakin@apple.com>

        https://bugs.webkit.org/show_bug.cgi?id=98984
        REGRESSION: Crash happens after we add non-top-level frame to the 
        ScrollingStateTree

        Reviewed by Simon Fraser.

        isRootLayer() can return true for layers that do not correspond to 
        the main frame. But we only want the ones that DO correspond to the 
        main frame!
        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::updateBacking):

2012-10-10  Dan Bernstein  <mitz@apple.com>

        <rdar://problem/12472460> text-combine doesn’t use third- and quarter-width variants when used with @font-face
        https://bugs.webkit.org/show_bug.cgi?id=98961

        Reviewed by Tim Horton.

        Test: fast/text/text-combine-with-font-face.html

        * css/CSSSegmentedFontFace.cpp:
        (WebCore::CSSSegmentedFontFace::getFontData): Added the width variant to the
        key used for entries in the font data table, so that we can return different
        font data for different width variants.
        * platform/graphics/FontWidthVariant.h: Defined FontWidthVariantWidth for
        use in the computation of the above key.
        * rendering/RenderCombineText.cpp:
        (WebCore::RenderCombineText::combineText): Added a local variable to store
        the font selector before changing the font description. Previously, by the time
        we tried to get the font selector from the font, it had already been cleared,
        so we called Font::update() with a 0 font selector, meaning @font-face fonts
        could not be selected.

2012-10-10  Elliott Sprehn  <esprehn@chromium.org>

        Move :before and :after into the DOM        
        https://bugs.webkit.org/show_bug.cgi?id=95117

        Reviewed by Eric Seidel.

        Reimplement generated content :before and :after as DOM Elements. Now ElementRareData has
        two RefPtrs to PseudoElements for the generated content and Node has methods for traversing
        the tree including generated content.

        This allows the generated content to be treated as real nodes instead of anonymous and take
        part in the usual recalcStyle and attach flow which fixes many bugs and vastly simplifies the
        lifecycle of generated content.

        No new tests needed for now.

        * CMakeLists.txt:
        * GNUmakefile.list.am:
        * Target.pri:
        * WebCore.gypi:
        * WebCore.vcproj/WebCore.vcproj:
        * WebCore.xcodeproj/project.pbxproj:
        * dom/DOMAllInOne.cpp:
        * dom/Element.cpp:
        (WebCore::Element::attach): Add generated content if needed.
        (WebCore::Element::detach): Remove all child generated content.
        (WebCore::Element::recalcStyle): Add or remove generated content based on the new style.
        (WebCore::Element::updatePseudoElement): Updates pseudo content based on a pseudoId.
        (WebCore):
        (WebCore::Element::createPseudoElementIfNeeded):
        (WebCore::Element::beforePseudoElement):
        (WebCore::Element::afterPseudoElement):
        * dom/Element.h:
        (WebCore):
        (Element):
        * dom/ElementRareData.h:
        (ElementRareData):
        (WebCore::ElementRareData::setPseudoElement):
        (WebCore):
        (WebCore::ElementRareData::pseudoElement):
        * dom/Node.cpp:
        (WebCore::Node::pseudoAwarePreviousSibling):
        (WebCore):
        (WebCore::Node::pseudoAwareNextSibling):
        (WebCore::checkAcceptChild): Forbid moving PseudoElements for sanity. The code never does this.
        * dom/Node.h:
        (Node):
        (WebCore::Node::isPseudoElement):
        (WebCore::Node::pseudoId): Fast path that only calls virtualPseudoId if the node has custom callbacks so isPseudoElement is fast.
        (WebCore::Node::virtualPseudoId):
        (WebCore::Node::isBeforePseudoElement):
        (WebCore::Node::isAfterPseudoElement):
        * dom/NodeRenderingContext.cpp:
        (WebCore::NodeRenderingContext::nextRenderer): Changed to find the next sibling of pseudos for insertion.
        * dom/PseudoElement.cpp: Added.
        (WebCore):
        (WebCore::pseudoElementName):
        (WebCore::PseudoElement::PseudoElement):
        (WebCore::PseudoElement::pseudoRendererIsNeeded):
        (WebCore::PseudoElement::customStyleForRenderer):
        (WebCore::PseudoElement::attach):
        (WebCore::PseudoElement::rendererIsNeeded):
        (WebCore::PseudoElement::updateChildStyle): Propagates the style downward into the anonymous renderers for the content.
        (WebCore::PseudoElement::didRecalcStyle):
        (WebCore::PseudoElement::createRendererForContent): Refactored from RenderObjectChildList.
        * dom/PseudoElement.h: Added.
        (WebCore):
        (PseudoElement):
        (WebCore::PseudoElement::create):
        (WebCore::toPseudoElement):
        * rendering/HitTestResult.cpp:
        (WebCore::HitTestResult::setInnerNode): Hit testing a PseudoElement should really hit the parent.
        (WebCore::HitTestResult::setInnerNonSharedNode): Same as above.
        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::styleDidChange): Remove old generated content code, same for below.
        (WebCore::RenderBlock::splitBlocks):
        (WebCore::RenderBlock::addChildIgnoringAnonymousColumnBlocks):
        (WebCore::RenderBlock::createReplacementRunIn):
        (WebCore::RenderBlock::renderName):
        * rendering/RenderBlock.h:
        (RenderBlock):
        * rendering/RenderButton.cpp:
        * rendering/RenderButton.h:
        (RenderButton):
        * rendering/RenderCounter.cpp:
        (WebCore::RenderCounter::originalText):
        * rendering/RenderDeprecatedFlexibleBox.cpp:
        (WebCore::RenderDeprecatedFlexibleBox::renderName):
        * rendering/RenderGrid.cpp:
        (WebCore::RenderGrid::renderName):
        * rendering/RenderInline.cpp:
        (WebCore::RenderInline::styleDidChange):
        (WebCore::RenderInline::addChildIgnoringContinuation):
        (WebCore::RenderInline::splitInlines):
        (WebCore::RenderInline::renderName):
        * rendering/RenderListItem.cpp:
        (WebCore::RenderListItem::updateMarkerLocation):
        * rendering/RenderMultiColumnBlock.cpp:
        (WebCore::RenderMultiColumnBlock::renderName):
        * rendering/RenderObject.cpp:
        (WebCore::RenderObject::createObject):
        * rendering/RenderObject.h:
        (WebCore::RenderObject::isPseudoElement):
        (RenderObject):
        (WebCore::RenderObject::generatingNode):
        * rendering/RenderObjectChildList.cpp:
        * rendering/RenderObjectChildList.h:
        (RenderObjectChildList):
        * rendering/RenderRubyText.cpp:
        * rendering/RenderRubyText.h:
        (RenderRubyText):
        * rendering/RenderTableCell.h:
        (WebCore::RenderTableCell::renderName):
        * rendering/RenderTableRow.cpp:
        (WebCore::RenderTableRow::styleDidChange):
        * rendering/RenderTableRow.h:
        (WebCore::RenderTableRow::renderName):
        * rendering/RenderTableSection.cpp:
        (WebCore::RenderTableSection::addChild):
        * rendering/RenderTableSection.h:
        (WebCore::RenderTableSection::renderName):
        * rendering/RenderTreeAsText.cpp:
        (WebCore::RenderTreeAsText::writeRenderObject):

2012-10-10  Sam Weinig  <sam@webkit.org>

        Add more Objective-C WebKit2 DOM API skeletons.
        https://bugs.webkit.org/show_bug.cgi?id=98981

        Reviewed by Anders Carlsson.

        * WebCore.exp.in:
        Add necessary export.

2012-10-10  Dimitri Glazkov  <dglazkov@chromium.org>

        Minimize the recent template explosion in SelectorChecker.
        https://bugs.webkit.org/show_bug.cgi?id=98829

        Reviewed by Antti Koivisto.

        We've recently added the capability to switch sibling traversal strategy to SelectorChecker, at some readability/clarity expense.
        This patch tries to minimize the surface of this expense to SelectorChecker::checkOneSelector. 

        No new tests, no change in behavior.

        * css/SelectorChecker.cpp:
        (WebCore::SelectorChecker::checkSelector): Turned back into a function.
        (WebCore::SelectorChecker::checkOneSelector): Changed to specialize on traversal strategy, rather than the context, which was less clear.
        (WebCore::SelectorChecker::DOMTraversalStrategy::isFirstChild): Turned into a function.
        (WebCore::SelectorChecker::DOMTraversalStrategy::isLastChild): Ditto.
        (WebCore::SelectorChecker::DOMTraversalStrategy::isFirstOfType): Ditto.
        (WebCore::SelectorChecker::DOMTraversalStrategy::isLastOfType): Ditto.
        (WebCore::SelectorChecker::DOMTraversalStrategy::countElementsBefore): Ditto.
        (WebCore::SelectorChecker::DOMTraversalStrategy::countElementsOfTypeBefore): Ditto.
        (WebCore::SelectorChecker::DOMTraversalStrategy::countElementsAfter): Ditto.
        (WebCore::SelectorChecker::DOMTraversalStrategy::countElementsOfTypeAfter): Ditto.
        * css/SelectorChecker.h:
        (DOMTraversalStrategy): Changed into a class, rather than a template.
        (SelectorChecker): Turned back into a function.

2012-10-10  James Simonsen  <simonjam@chromium.org>

        High res times should start at 0
        https://bugs.webkit.org/show_bug.cgi?id=84912

        Reviewed by Tony Gentilcore.

        Test: Existing Navigation Timing tests.

        * inspector/InspectorInstrumentation.cpp: Use legacy document time, pending 98223.
        (WebCore):
        (WebCore::InspectorInstrumentation::didFinishLoadingImpl):
        * inspector/InspectorResourceAgent.cpp:
        (WebCore::buildObjectForTiming):
        * loader/DocumentLoadTiming.cpp:
        (WebCore::DocumentLoadTiming::convertMonotonicTimeToLegacyDocumentTime):
        (WebCore):
        (WebCore::DocumentLoadTiming::convertMonotonicTimeToZeroBasedDocumentTime):
        (WebCore::DocumentLoadTiming::markNavigationStart):
        * loader/DocumentLoadTiming.h:
        (DocumentLoadTiming):
        (WebCore::DocumentLoadTiming::navigationStart): These just report raw monotonic times now.
        (WebCore::DocumentLoadTiming::unloadEventStart):
        (WebCore::DocumentLoadTiming::unloadEventEnd):
        (WebCore::DocumentLoadTiming::redirectStart):
        (WebCore::DocumentLoadTiming::redirectEnd):
        (WebCore::DocumentLoadTiming::fetchStart):
        (WebCore::DocumentLoadTiming::responseEnd):
        (WebCore::DocumentLoadTiming::loadEventStart):
        (WebCore::DocumentLoadTiming::loadEventEnd):
        * page/PerformanceTiming.cpp:
        (WebCore::PerformanceTiming::navigationStart): Convert these back to legacy document times.
        (WebCore::PerformanceTiming::unloadEventStart):
        (WebCore::PerformanceTiming::unloadEventEnd):
        (WebCore::PerformanceTiming::redirectStart):
        (WebCore::PerformanceTiming::redirectEnd):
        (WebCore::PerformanceTiming::fetchStart):
        (WebCore::PerformanceTiming::responseEnd):
        (WebCore::PerformanceTiming::loadEventStart):
        (WebCore::PerformanceTiming::loadEventEnd):
        (WebCore::PerformanceTiming::resourceLoadTimeRelativeToAbsolute):
        (WebCore::PerformanceTiming::monotonicTimeToIntegerMilliseconds):
        * platform/network/ResourceLoadTiming.cpp:
        (WebCore::ResourceLoadTiming::convertResourceLoadTimeToMonotonicTime):
        * platform/network/ResourceLoadTiming.h:
        (ResourceLoadTiming):

2012-10-10  Levi Weintraub  <leviw@chromium.org>

        Tests failure on Chromium Mac after r130821
        https://bugs.webkit.org/show_bug.cgi?id=98865

        Reviewed by Adam Barth.

        Updating the check for USE(HARFBUZZ_NG) to check for Mac Chromium, as the HARFBUZZ_NG flag isn't
        actually set, despite us using Harfbuzz. This unbreaks Chromium Mac as we diagnose the root
        cause of this issue.

        * rendering/RenderBlockLineLayout.cpp:
        (WebCore::setLogicalWidthForTextRun):

2012-10-10  Stephen Chenney  <schenney@chromium.org>

        SVGTextRunRenderingContext changes font data in the glyph page, but it shouldn't
        https://bugs.webkit.org/show_bug.cgi?id=98755

        Reviewed by Eric Seidel.

        The code in SVGTextRunRenderingContext::glyphDataForCharacter, when it
        encounters an <altglyph> tag, immediately replaces the font data for a
        glyph with font data for the primary font, presumably to meet the SVG
        spec requirement: "If the references to alternate glyphs do not result
        in successful identification of alternate glyphs to use, then the
        character(s) that are inside of the ‘altGlyph’ element are rendered as
        if the ‘altGlyph’ element were a ‘tspan’ element instead."

        If the alt glyph is not then found we are in the case from the spec
        and indeed we should use the primary font. However, we end up replacing the GlyphPage
        entry for the character with primary font data, which we should not do
        because the glyph page might be used in some place that does not have
        the alt glyph tag.

        Furthermore, this causes object lifetime problems for font data, because
        in cases where the font data that is replaced is for the system fallback
        font the GlyphPage will live forever with no knowldege that it contains
        font data pointers into font data other that the system fallback. The
        replaced font data may be deleted while the pointer lives on in the
        system fallback page.

        The fix is simply not to replace the font data in the page.

        Test: svg/text/alt-glpyh-on-fallback-font-crash.html

        * rendering/svg/SVGTextRunRenderingContext.cpp:
        (WebCore::SVGTextRunRenderingContext::glyphDataForCharacter): Keep track of the original font data and put it back
        in the glyph page when the method has finished.

2012-10-10  Tab Atkins  <jackalmage@gmail.com>

        column-count: 0 should not prevent margin-collapse through
        https://bugs.webkit.org/show_bug.cgi?id=65159

        Reviewed by Tony Chang.

        This patch makes "column-count:0" be properly recognized as invalid syntax,
        as it violates the property grammar in the spec.

        Tests: fast/multicol/zeroColumnCount.html

        * css/CSSParser.cpp:
        (WebCore::CSSParser::validUnit):
        (WebCore::CSSParser::parseValue):
        * css/CSSParser.h:

2012-10-10  Benjamin Poulain  <bpoulain@apple.com>

        [WK2] Safari crashes on error when using CFNetwork
        https://bugs.webkit.org/show_bug.cgi?id=98965

        Reviewed by Sam Weinig.

        The code of ResourceErrorMac when using CFNetwork was assuming
        there is always either a CFError or an NSError associated with
        any ResourceError.

        This is not true on WebKit2 where error can be generic errors
        in the WebProcess (for example a cannotShowURLError).
        The code was crashing when trying to invoke function on the
        non-existing CFError.

        This patch fixes the issue by handling that third case separately.
        If the ResourceError is a generic error, a new NSError is created,
        similarily to what is done in the non-CFNetwork case.

        * platform/network/mac/ResourceErrorMac.mm:
        (WebCore::ResourceError::nsError):

2012-10-10  Alexander Shalamov  <alexander.shalamov@intel.com>

        Invalid values for media query features are not handled
        https://bugs.webkit.org/show_bug.cgi?id=97006

        Reviewed by Kenneth Rohde Christiansen.

        This patch improves pass rate of CSS3 Media Queries test suite
        by making media expressions compliant with W3C specification. Few
        performance issues are fixed by removal of string comparison during
        media expression evaluation.

        Tests: fast/media/w3c/test_media_queries.html

        * css/CSSGrammar.y: Handle media query expression with specified media restrictor as invalid.
        * css/MediaQuery.cpp:
        (WebCore::MediaQuery::serialize): Serialize invalid query according to specification.
        * css/MediaQueryEvaluator.cpp:
        (WebCore::orientationMediaFeatureEval): Compare CSSValueID instead of strings.
        (WebCore::view_modeMediaFeatureEval): Compare CSSValueID instead of strings.
        (WebCore::pointerMediaFeatureEval): Compare CSSValueID instead of strings.
        * css/MediaQueryExp.cpp:
        (WebCore::MediaQueryExp::MediaQueryExp): Check that media features initialized with correct values.

2012-10-10  Justin Novosad  <junov@chromium.org>

        [Chromium] Smoother animation for non-RAF 2D canvas animations
        https://bugs.webkit.org/show_bug.cgi?id=97918

        Reviewed by Stephen White.

        Reduces animation jank by preventing the accumulation of multiple
        frames of backlog in the deferred canvas rendering queue. When the
        animation is more than one full frame ahead of the compositor, an
        immediate flush is triggered.  This takes into account overdraw
        elimination by the skip-on-clear optimization that is built-in to
        SkDeferredCanvas, to allow non-RAF animations that clear the canvas at
        each frame to run without any rate limiting. This change also
        incidentally improves frame rate in many cases by providing more
        granular batching of GPU API calls, resulting in better pipelining
        through the command buffer.

        Test: webkit_unit_test Canvas2DLayerManagerTest.testDeferredFrame

        * platform/graphics/chromium/Canvas2DLayerBridge.cpp:
        (WebCore::Canvas2DLayerBridge::Canvas2DLayerBridge):
        (WebCore::Canvas2DLayerBridge::limitPendingFrames):
        Called at the end of a task (usually a scheduled script action) that
        invoked 2d canvas rendering context methods. The end of the task
        marks the completion of a displayable frame. This method will trigger
        a flush if it detects that the layer has pending draw commands that
        are more that one frame old.
        (WebCore):
        (WebCore::Canvas2DLayerBridge::flushedDrawCommands):
        (WebCore::Canvas2DLayerBridge::didFlushPendingCommands):
        (WebCore::Canvas2DLayerBridge::skippedPendingDrawCommands):
        (WebCore::Canvas2DLayerBridge::flush):
        (WebCore::Canvas2DLayerBridge::contextAcquired):
        * platform/graphics/chromium/Canvas2DLayerBridge.h:
        (Canvas2DLayerBridge):
        * platform/graphics/chromium/Canvas2DLayerManager.cpp:
        (WebCore::Canvas2DLayerManager::~Canvas2DLayerManager):
        (WebCore::Canvas2DLayerManager::willProcessTask):
        (WebCore):
        (WebCore::Canvas2DLayerManager::didProcessTask):
        (WebCore::Canvas2DLayerManager::layerDidDraw):
        * platform/graphics/chromium/Canvas2DLayerManager.h:
        (Canvas2DLayerManager):

2012-10-10  Beth Dakin  <bdakin@apple.com>

        https://bugs.webkit.org/show_bug.cgi?id=98968
        REGRESSION: Unable to scroll with trackpad on some websites after 
        r130783

        Reviewed by Simon Fraser.

        This bug seems to reproduce mostly on web pages that require login. 
        The re-routing causes extra churn of the RenderLayerBacking, and we 
        end up destroying and re-creating the backing and therefore the 
        ScrollingStateNodes, and when the timing is just wrong we get into a 
        state where the ScrollingTree has a set of incorrect information. 
        This patch fixes the bug by making sure the ScrollingStateNodes keep 
        the ScrollingTree in synch with their re-set data.

        Tell the ScrollingStateTree that the root layer has changed.
        * page/scrolling/ScrollingCoordinator.cpp:
        (WebCore::ScrollingCoordinator::frameViewRootLayerDidChange):

        New virtual function will set every property as having changed.
        * page/scrolling/ScrollingStateNode.h:
        (WebCore::ScrollingStateNode::setHasChangedProperties):
        * page/scrolling/ScrollingStateScrollingNode.cpp:
        (WebCore::ScrollingStateScrollingNode::setHasChangedProperties):
        (WebCore):
        * page/scrolling/ScrollingStateScrollingNode.h:

        When the root layer changes, make sure we update the ScrollingTree 
        appropriately by indicating that every property could have changed.
        * page/scrolling/ScrollingStateTree.cpp:
        (WebCore::ScrollingStateTree::rootLayerDidChange):
        (WebCore):
        * page/scrolling/ScrollingStateTree.h:
        (ScrollingStateTree):

2012-10-10  MORITA Hajime  <morrita@google.com>

        [Chromium] Crash on SpellChecker::didCheck()
        https://bugs.webkit.org/show_bug.cgi?id=98476

        Reviewed by Kent Tamura.

        SpellChecker::didCheck() assumed m_processingRequest is non-NULL. However, SpellChecker::invokeRequest()
        calls SpellCheckRequest::didCancel(), which results didCheck() with NULL m_processingRequest.
        This chagne eliminates the problematic didCheck().

        No new tests. The case depends on specific timing and is hard to hit by automated testing.

        * editing/SpellChecker.cpp:
        (WebCore::SpellChecker::didCheck):

2012-10-10  MORITA Hajime  <morrita@google.com>

        https://bugs.webkit.org/show_bug.cgi?id=95664
        [Shadow DOM] should be able to be available without <style scoped>

        Reviewed by Dimitri Glazkov.

        This change relaxes ENABLE(STYLE_SCOPED) compilation guard
        and styleScopedEnabled() runtime guard. The flags now masks
        user visible bits of the code, rather than all of it.
        This change also eliminates some redundant guards for simplicity.

        Test: fast/dom/shadow/style-scoped-not-enabled.html

        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::matchScopedAuthorRules):
        (WebCore::StyleResolver::locateCousinList):
        (WebCore::StyleResolver::canShareStyleWithElement):
        (WebCore::StyleResolver::locateSharedStyle):
        * css/StyleScopeResolver.cpp:
        (WebCore::StyleScopeResolver::scopeFor):
        * css/StyleScopeResolver.h:
        (WebCore):
        * html/HTMLStyleElement.cpp:
        (WebCore::HTMLStyleElement::HTMLStyleElement):
        (WebCore::HTMLStyleElement::parseAttribute):
        (WebCore::HTMLStyleElement::scopedAttributeChanged):
        (WebCore::HTMLStyleElement::isRegisteredAsScoped):
        (WebCore::HTMLStyleElement::registerWithScopingNode):
        (WebCore::HTMLStyleElement::unregisterWithScopingNode):
        (WebCore::HTMLStyleElement::insertedInto):
        (WebCore::HTMLStyleElement::removedFrom):
        (WebCore::HTMLStyleElement::scoped):
        (WebCore::HTMLStyleElement::scopingElement):
        * html/HTMLStyleElement.h:
        (HTMLStyleElement):
        * testing/InternalSettings.cpp: Exporsing a flag for testing.
        (WebCore::InternalSettings::Backup::Backup):
        (WebCore::InternalSettings::Backup::restoreTo):
        (WebCore::InternalSettings::setStyleScopedEnabled):
        (WebCore):
        * testing/InternalSettings.h: Exporsing a flag for testing.
        (Backup):
        (InternalSettings):
        * testing/InternalSettings.idl: Exporsing a flag for testing.

2012-10-10  Roger Fong  <roger_fong@apple.com>

        [WebGL] [On Mac] queried attributes and uniforms need to return the original variable name, not the mapped name.
        https://bugs.webkit.org/show_bug.cgi?id=98470

        Reviewed by Timothy Horton.

        When a variable name is too long we translate to a shorter version and keep a mapping between the long and short names.
        However, when querying for a variable client side using getActiveAttrib or getActiveUniform, we accidentally return the 
        translated names. This fix makes these methods return the original variable names.

        Tested using Khronos WebGL conformance suite:
        conformance/glsl/misc/glsl-long-variable-names.html

        * platform/graphics/GraphicsContext3D.h:
        (GraphicsContext3D):
        * platform/graphics/opengl/GraphicsContext3DOpenGLCommon.cpp: getActiveAttrib and getActiveUniform
        now use GraphicsContext3D::originalSymbolName to find the original variable name.
        (WebCore::GraphicsContext3D::getActiveAttrib):
        (WebCore::GraphicsContext3D::getActiveUniform):
        (WebCore):
        (WebCore::GraphicsContext3D::originalSymbolName): This method returns the original variable name given 
        the mapped name.

2012-10-10 Brady Eidson  <beidson@apple.com>

        Switch over CachedResource::data() from taking a SharedBuffer to taking a ResourceBuffer.
        https://bugs.webkit.org/show_bug.cgi?id=98952

        Reviewed by Anders Carlsson.

        No new tests (No behavior change).

        * html/ImageDocument.cpp:
        (WebCore::ImageDocumentParser::appendBytes):
        (WebCore::ImageDocumentParser::finish):
        * loader/SubresourceLoader.cpp:
        (WebCore::SubresourceLoader::sendDataToResource):
        (WebCore::SubresourceLoader::didFinishLoading):
        * loader/cache/CachedCSSStyleSheet.cpp:
        (WebCore::CachedCSSStyleSheet::data):
        * loader/cache/CachedCSSStyleSheet.h:
        (WebCore):
        (CachedCSSStyleSheet):
        * loader/cache/CachedFont.cpp:
        (WebCore::CachedFont::data):
        * loader/cache/CachedFont.h:
        (WebCore):
        (CachedFont):
        * loader/cache/CachedImage.cpp:
        (WebCore::CachedImage::data):
        * loader/cache/CachedImage.h:
        (CachedImage):
        * loader/cache/CachedRawResource.cpp:
        (WebCore::CachedRawResource::data):
        * loader/cache/CachedRawResource.h:
        (CachedRawResource):
        * loader/cache/CachedResource.cpp:
        (WebCore::CachedResource::data):
        * loader/cache/CachedResource.h:
        (CachedResource):
        * loader/cache/CachedSVGDocument.cpp:
        (WebCore::CachedSVGDocument::data):
        * loader/cache/CachedSVGDocument.h:
        (CachedSVGDocument):
        * loader/cache/CachedScript.cpp:
        (WebCore::CachedScript::data):
        * loader/cache/CachedScript.h:
        (CachedScript):
        * loader/cache/CachedShader.cpp:
        (WebCore::CachedShader::data):
        * loader/cache/CachedShader.h:
        (CachedShader):
        * loader/cache/CachedTextTrack.cpp:
        (WebCore::CachedTextTrack::data):
        * loader/cache/CachedTextTrack.h:
        (CachedTextTrack):
        * loader/cache/CachedXSLStyleSheet.cpp:
        (WebCore::CachedXSLStyleSheet::data):
        * loader/cache/CachedXSLStyleSheet.h:
        (CachedXSLStyleSheet):

2012-10-10  Jon Lee  <jonlee@apple.com>

        [WK2] Activate plugins when user clicks on snapshot
        https://bugs.webkit.org/show_bug.cgi?id=98328
        <rdar://problem/12426681>

        Reviewed by Brady Eidson.

        Extend the default event handler to deal with plugins with snapshots.
        When the user clicks on the placeholder, the plugin is recreated and displayed.

        * loader/FrameLoaderClient.h: Add new client function recreatePlugin(), which is
        expected to re-create the plugin with the same parameters as when it was run to
        obtain the plugin's snapshot placeholder.

        * loader/EmptyClients.cpp: Stub implementation of recreatePlugin().
        * loader/EmptyClients.h:
        * WebCore.exp.in: Expose HTMLPlugInElement::pluginWidget().

        * html/HTMLPlugInElement.cpp:
        (WebCore::HTMLPlugInElement::defaultEventHandler): Update to look for
        RenderSnapshottedPlugIn. If the plugin is not playing, have the renderer handle the
        event.

        * rendering/RenderSnapshottedPlugIn.cpp:
        (WebCore::RenderSnapshottedPlugin::getCursor): Set to hand cursor when the plugin is not
        playing.
        (WebCore::RenderSnapshottedPlugIn::handleEvent): If the user clicked on the plugin using the
        left button, update the state of the element to playing. Recreate the plugin if the widget exists
        to begin with. The cached snapshot image will be saved for possible reuse on back/forward navigation.
        * rendering/RenderSnapshottedPlugIn.h:
        (RenderSnapshottedPlugIn):

2012-10-10  Kenichi Ishibashi  <bashi@chromium.org>

        FontVerticalDataCache should allow zero as a key value
        https://bugs.webkit.org/show_bug.cgi?id=98877

        Reviewed by Tony Chang.

        Use WTF::UnsignedWithZeroKeyHashTraits for type definition of
        FontVerticalDataCache.

        No new tests because there is no certain way to make
        FontPlatformDataHarfBuzz::uniqueID() be zero.

        * platform/graphics/FontCache.cpp:
        (WebCore):
        * platform/graphics/harfbuzz/FontPlatformDataHarfBuzz.cpp:
        (WebCore::FontPlatformData::verticalData): Removed zero check of uniqueID().
        (WebCore::FontPlatformData::openTypeTable): Ditto.

2012-10-10  Regina Chung  <heejin.r.chung@samsung.com>

        [EFL] Use the shareable GraphicsContext3DOpenGL* implementation.
        https://bugs.webkit.org/show_bug.cgi?id=96627

        Reviewed by Kenneth Rohde Christiansen.

        Changed EFL implementation of GraphicsContext3D(GC3D) to use GraphicsContext3DOpenGL*.
        It was initially implemented in a different way, due to characteristics of Evas,
        but it would be better to use the common implementation and find another way
        to deal with Evas, especially because all the duplicated code.

        No new tests. No functional changes.

        * PlatformEfl.cmake: Removed cairo implementation of GC3D and added efl files to WebCore_SOURCES.
        * platform/graphics/efl/GraphicsContext3DEfl.cpp: Modified code so GC3DOpenGL* can be used.
        (WebCore::GraphicsContext3D::create):
        (WebCore::GraphicsContext3D::GraphicsContext3D):
        (WebCore::GraphicsContext3D::platformLayer):
        (WebCore::GraphicsContext3D::makeContextCurrent):
        (WebCore::GraphicsContext3D::setContextLostCallback):
        (WebCore::GraphicsContext3D::setErrorMessageCallback):
        (WebCore::GraphicsContext3D::paintToCanvas):
        (WebCore):
        (WebCore::GraphicsContext3D::createGraphicsSurfaces):
        (WebCore::GraphicsContext3D::releaseShaderCompiler):
        (WebCore::GraphicsContext3D::getImageData):
        * platform/graphics/efl/GraphicsContext3DPrivate.cpp: Removed functions implemented in GC3DOpenGL*
        (WebCore::GraphicsContext3DPrivate::GraphicsContext3DPrivate):
        (WebCore):
        (WebCore::GraphicsContext3DPrivate::~GraphicsContext3DPrivate):
        (WebCore::GraphicsContext3DPrivate::createSurface):
        (WebCore::GraphicsContext3DPrivate::platformGraphicsContext3D):
        (WebCore::GraphicsContext3DPrivate::makeContextCurrent):
        (WebCore::GraphicsContext3DPrivate::isGLES2Compliant):
        (WebCore::GraphicsContext3DPrivate::paintToTextureMapper):
        * platform/graphics/efl/GraphicsContext3DPrivate.h: Removed functions implemented in GC3DOpenGL*
        (GraphicsContext3DPrivate):

2012-10-10  Tony Chang  <tony@chromium.org>

        Unreviewed, rolling out r130937, r130949, r130955, and
        r130957.
        http://trac.webkit.org/changeset/130937
        http://trac.webkit.org/changeset/130949
        http://trac.webkit.org/changeset/130955
        http://trac.webkit.org/changeset/130957
        https://bugs.webkit.org/show_bug.cgi?id=94290

        Breaks Qt build

        * CMakeLists.txt:
        * DerivedSources.make:
        * DerivedSources.pri:
        * GNUmakefile.am:
        * WebCore.gyp/WebCore.gyp:
        * WebCore.gyp/scripts/action_preprocessgrammar.py: Removed.
        * WebCore.vcproj/WebCore.vcproj:
        * WebCore.xcodeproj/project.pbxproj:
        * css/CSSGrammar.y: Renamed from Source/WebCore/css/CSSGrammar.y.in.
        * css/CSSGrammar.y.includes: Removed.
        * css/makegrammar.pl:

2012-10-10  Rob Buis  <rbuis@rim.com>

        [BlackBerry] Adapt to new image for search-cancel
        https://bugs.webkit.org/show_bug.cgi?id=98954

        Reviewed by Antonio Gomes.

        The new image for search-cancel is bigger than the old one, so invert the scaling.

        * platform/blackberry/RenderThemeBlackBerry.cpp:
        (WebCore::RenderThemeBlackBerry::adjustSearchFieldCancelButtonStyle):

2012-10-10  Tony Chang  <tony@chromium.org>

        Unreviewed, another speculative fix for Qt Win.

        * DerivedSources.pri: Pass --preprocessor to the perl script.
        * css/makegrammar.pl: Use --preprocessor instead of /usr/bin/gcc.

2012-10-10  Tony Chang  <tony@chromium.org>

        Unreviewed, another speculative fix for Qt Win.

        * DerivedSources.pri: Make the path slash marks be forward slashes to the .in file.

2012-10-10  David Barton  <dbarton@mathscribe.com>

        Turn on ENABLE_MATHML for Chromium
        https://bugs.webkit.org/show_bug.cgi?id=96960

        Reviewed by Adam Barth.

        Add the rendering/mathml directory to search.

        * WebCore.gyp/WebCore.gyp:

2012-10-10  Tony Chang  <tony@chromium.org>

        Unreviewed, speculative build fix for Qt Win.

        * css/makegrammar.pl: Rather than making a temp file, use a pipe to
        pass data from gcc to the final output file.

2012-10-10  Brady Eidson  <beidson@apple.com>

        Switch CachedResource over from SharedBuffer to a new ResourceBuffer
        https://bugs.webkit.org/show_bug.cgi?id=98541

        Reviewed by Anders Carlsson.

        As part of preparation for a WebKit2 NetworkProcess, we need to change the data handle shared
        between CachedResources and ResourceLoaders to be one that can be backed by something other
        than a SharedBuffer.

        ResourceBuffer is this new object. Right now it is directly backed by a SharedBuffer and there
        should be no change in behavior.

        No new tests (No behavior change).

        * WebCore.exp.in:
        * WebCore.xcodeproj/project.pbxproj:
        * WebCore.vcproj/WebCore.vcproj:
        * CMakeLists.txt:
        * GNUmakefile.list.am:
        * Target.pri:
        * WebCore.gypi:

        Implementation of the new ResourceBuffer, backed directly by a SharedBuffer:
        * loader/ResourceBuffer.cpp: Added.
        (WebCore):
        (WebCore::ResourceBuffer::ResourceBuffer):
        (WebCore::ResourceBuffer::~ResourceBuffer):
        (WebCore::ResourceBuffer::data):
        (WebCore::ResourceBuffer::size):
        (WebCore::ResourceBuffer::isEmpty):
        (WebCore::ResourceBuffer::getSomeData):
        (WebCore::ResourceBuffer::sharedBuffer):
        (WebCore::ResourceBuffer::copy):
        (WebCore::ResourceBuffer::hasPurgeableBuffer):
        (WebCore::ResourceBuffer::releasePurgeableBuffer):
        (WebCore::ResourceBuffer::createCFData):

        * loader/ResourceBuffer.h: Added.
        (WebCore):
        (ResourceBuffer):
        (WebCore::ResourceBuffer::create):
        (WebCore::ResourceBuffer::adoptSharedBuffer):
        * loader/mac/ResourceBuffer.mm: Added.

        (WebCore):
        (WebCore::ResourceBuffer::createNSData):

        Switch CachedResource over to using it:
        * loader/cache/CachedResource.cpp:
        (WebCore::CachedResource::makePurgeable):

        * loader/cache/CachedResource.h:
        (WebCore):
        (WebCore::CachedResource::resourceBuffer):
        (CachedResource):

        Switch all the other CachedResource subclasses over to using it:
        * loader/cache/CachedCSSStyleSheet.cpp:
        (WebCore::CachedCSSStyleSheet::data):

        * loader/cache/CachedFont.cpp:
        (WebCore::CachedFont::data):
        (WebCore::CachedFont::ensureCustomFontData):

        * loader/cache/CachedImage.cpp:
        (WebCore::CachedImage::didAddClient):
        (WebCore::CachedImage::data):

        * loader/cache/CachedRawResource.cpp:
        (WebCore::CachedRawResource::data):

        * loader/cache/CachedScript.cpp:
        (WebCore::CachedScript::data):

        * loader/cache/CachedShader.cpp:
        (WebCore::CachedShader::data):

        * loader/cache/CachedTextTrack.cpp:
        (WebCore::CachedTextTrack::data):
        
        * loader/cache/CachedXSLStyleSheet.cpp:
        (WebCore::CachedXSLStyleSheet::data):

        Switch other affect parties over to using it:
        * inspector/InspectorPageAgent.cpp:
        (WebCore::decodeBuffer):
        (WebCore::InspectorPageAgent::cachedResourceContent):
        (WebCore::InspectorPageAgent::sharedBufferContent):

        * loader/DocumentLoader.cpp:
        (WebCore::DocumentLoader::subresource):

        * loader/TextTrackLoader.cpp:
        (WebCore::TextTrackLoader::processNewCueData):
        (WebCore::TextTrackLoader::didReceiveData):

        * loader/archive/cf/LegacyWebArchive.cpp:
        (WebCore::LegacyWebArchive::create):

        * loader/icon/IconLoader.cpp:
        (WebCore::IconLoader::notifyFinished):

        * platform/mac/PasteboardMac.mm:
        (WebCore::fileWrapperForImage):

2012-10-10  Julien Chaffraix  <jchaffraix@webkit.org>

        Unreviewed build fix after r130940.

        * platform/graphics/skia/GraphicsContextSkia.cpp:
        (WebCore::GraphicsContext::drawLineForDocumentMarker):
        Avoid redefining the same variable twice.

2012-10-10  Alexis Menard  <alexis@webkit.org>

        [Mac] Deprecate getPropertyShorthand from objective c bindings for future removal
        https://bugs.webkit.org/show_bug.cgi?id=98916

        Reviewed by Timothy Hatcher.

        Mark getPropertyShorthand as deprecated so we can remove it later. It will allow us
        to remove getPropertyShorthand from the web exposed API (this function is not part of
        any specification, it was there for historical reason).

        No new tests : just mark a function as deprecated.

        * bindings/objc/PublicDOMInterfaces.h:

2012-10-10  Mike West  <mkwst@chromium.org>

        Web Inspector: add support for %c (style) in console API
        https://bugs.webkit.org/show_bug.cgi?id=69401

        Reviewed by Pavel Feldman.

        This patch mimics Firebug's '%c' option when calling 'console.log'
        messages. 'console.log("%cBlue!", "color: blue;");' will write blue
        text to the console, and so on.

        To match Firebug's behavior, multiple '%c' entries will overwrite each
        other: only one style will be applied. Sorry, folks.

        Test: inspector/console/console-format-style.html

        * inspector/front-end/ConsoleMessage.js:
        (WebInspector.ConsoleMessageImpl.prototype._formatWithSubstitutionString.styleFormatter):
        (WebInspector.ConsoleMessageImpl.prototype._formatWithSubstitutionString.append):
        (WebInspector.ConsoleMessageImpl.prototype._formatWithSubstitutionString):

2012-10-10  Varun Jain  <varunjain@chromium.org>

        [chromium] Spelling and grammar markers are pixelated in hidpi.
        https://bugs.webkit.org/show_bug.cgi?id=98339

        Reviewed by Stephen White.

        We create separate bitmaps for markers in normal and hidpi mode as per
        specification from UX and choose the right bitmap based on the current
        device scale factor.

        Tests: editing/spelling/grammar-markers-hidpi.html
               editing/spelling/inline-spelling-markers-hidpi.html

        * platform/graphics/skia/GraphicsContextSkia.cpp:
        (WebCore::draw2xMarker):
        (WebCore):
        (WebCore::draw1xMarker):
        (WebCore::GraphicsContext::drawLineForDocumentMarker):
        * platform/graphics/skia/PlatformContextSkia.cpp:
        (WebCore::PlatformContextSkia::PlatformContextSkia):
        * platform/graphics/skia/PlatformContextSkia.h:
        (WebCore::PlatformContextSkia::deviceScaleFactor):
        (WebCore::PlatformContextSkia::setDeviceScaleFactor):
        (PlatformContextSkia):

2012-10-10  Pablo Flouret  <pablof@motorola.com>

        Pre-process CSSGrammar.y before running through bison.
        https://bugs.webkit.org/show_bug.cgi?id=94290

        Reviewed by Tony Chang.

        Running CSSGrammar.y through a preprocessor allows the use of feature
        defines in all places of the yacc file (i.e. not just in C blocks).
        Mostly useful to be able to keep every part of a feature under feature
        flags for self-documenting purposes.

        No new tests, CSSGrammar.y should be generated correctly and everything
        should keep working as before.

        * CMakeLists.txt:
        * DerivedSources.make:
        * DerivedSources.pri:
        * GNUmakefile.am:
            Modify build systems to use makegrammar.pl to generate the .y files
            and run those through bison.

        * WebCore.gyp/WebCore.gyp:
        * WebCore.gyp/scripts/action_preprocessgrammar.py: Added.
            Add a new action to preprocess the CSSGrammar.y.in file before the
            bison rule is run.

        * WebCore.vcproj/WebCore.vcproj:
        * WebCore.xcodeproj/project.pbxproj:
            Add the new .y.in / .y.includes files.

        * css/CSSGrammar.y.in: Renamed from Source/WebCore/css/CSSGrammar.y.
            Also moved the top declarations section that has includes, defines,
            etc. to its own file. These shouldn't be touched by the first
            pass of the preprocessor. And changed the existing ENABLE(FEATURE)
            ifdefs to ENABLE_FEATURE since the ENABLE() macro is not available
            yet.
        * css/CSSGrammar.y.includes: Added.
            The aforementioned declarations header section. After the .y.in file
            is processed it will be concatenated with this one to make the
            CSSGrammar.y file.

        * css/makegrammar.pl:
            Modify the script to handle .y.in files.

2012-10-10  Luciano Wolf  <luciano.wolf@openbossa.org>

        EventHandler::handleGestureLongPress breaks compilation if CONTEXT_MENUS isn't set
        https://bugs.webkit.org/show_bug.cgi?id=98890

        Reviewed by Caio Marcelo de Oliveira Filho.

        * page/EventHandler.cpp:
        (WebCore::EventHandler::handleGestureLongPress):

2012-10-10  David Grogan  <dgrogan@chromium.org>

        Inspector: display IndexedDB integer versions
        https://bugs.webkit.org/show_bug.cgi?id=95816

        Reviewed by Vsevolod Vlasov.

        Added basic test to database-structure.html

        * inspector/Inspector.json:
        * inspector/InspectorIndexedDBAgent.cpp:
        (WebCore):
        * inspector/front-end/IndexedDBModel.js:
        (WebInspector.IndexedDBModel.prototype._loadDatabase.callback):
        (WebInspector.IndexedDBModel.prototype._loadDatabase):
        (WebInspector.IndexedDBModel.Database):
        * inspector/front-end/IndexedDBViews.js:
        (WebInspector.IDBDatabaseView):
        (WebInspector.IDBDatabaseView.prototype._refreshDatabase):

2012-10-10  Simon Fraser  <simon.fraser@apple.com>

        Store a visible rect in GraphicsLayers, and optionally dump it in layerTreeAsText
        https://bugs.webkit.org/show_bug.cgi?id=98839

        Reviewed by Sam Weinig.

        To replace CATiledLayer with TileCaches, we need to be able to compute the visible part of a GraphicsLayer,
        in order to limit the extent of TileCache tiles. Reuse the existing code in GraphicsLayerCA for this,
        but store the computed rect in m_visibleRect.
        
        Add a flag to layerTreeAsText() so that tests can optionally include this visible rect in
        layer tree dumps. This output will be platform-specific, so we don't want to do it unconditionally.

        * WebCore.exp.in: Signature of Frame::layerTreeAsText() changed.
        * page/Frame.cpp:
        (WebCore::Frame::layerTreeAsText): Change to take some enum flags rather than just a bool.
        * page/Frame.h:
        * platform/graphics/GraphicsLayer.cpp:
        (WebCore::GraphicsLayer::writeIndent): Make into a static class method so subclasses can use it.
        (WebCore::GraphicsLayer::dumpProperties): Call a virtual dumpAdditionalProperties() for subclasses.
        (showGraphicsLayerTree):
        * platform/graphics/GraphicsLayer.h:
        (GraphicsLayer): New LayerTreeAsTextIncludeVisibleRects flag.
        (WebCore::GraphicsLayer::dumpAdditionalProperties): New virtual method.
        * platform/graphics/ca/GraphicsLayerCA.cpp:
        (WebCore::GraphicsLayerCA::recursiveCommitChanges): clipRectForChildren and clipRectForSelf
        were previously unused and buggy. Fix to correctly compute clipRectForSelf, to assign
        to m_visibleRect.
        (WebCore::GraphicsLayerCA::dumpAdditionalProperties): Dump m_visibleRect.
        * platform/graphics/ca/GraphicsLayerCA.h:
        (GraphicsLayerCA):
        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::layerTreeAsText): Convert the flags from Frame flags
        to GraphicsLayerFlags and pass them along.
        * rendering/RenderLayerCompositor.h:
        (RenderLayerCompositor):
        * testing/Internals.cpp:
        (WebCore::Internals::layerTreeAsText): Overloaded method to handle the optional IDL arguments.
        * testing/Internals.h: Add enum.
        * testing/Internals.idl: Add optional flags, and a const short to describe the flags.

2012-10-10  Shinya Kawanaka  <shinyak@chromium.org>

        Needs internal API to return distributed nodes for InsertionPoint
        https://bugs.webkit.org/show_bug.cgi?id=98868

        Reviewed by Hajime Morita.

        When testing insertion points, we would like to have an internal API which returns a node list
        distributed to an insertion point.

        We've added the API in Internals.

        Test: fast/dom/shadow/distributed-nodes.html

        * WebCore.exp.in:
        * html/shadow/InsertionPoint.cpp:
        (WebCore::InsertionPoint::distributedNodes): Returns the distributed nodes. When InsertionPoint is not
        attached, the result will be null, since the distribution is not calculated correctly.
        (WebCore):
        * html/shadow/InsertionPoint.h:
        (InsertionPoint):
        * testing/Internals.cpp:
        (WebCore::Internals::distributedNodes):
        (WebCore):
        * testing/Internals.h:
        (Internals):
        * testing/Internals.idl:

2012-10-10  Wei James  <james.wei@intel.com>

        [Chromium]Android x86 content shell debug build warning for uninitialized value used as error with gcc 4.6
        https://bugs.webkit.org/show_bug.cgi?id=98629

        Reviewed by Adam Barth.

        Warning was taken as error for uninitialized value being used when
        building content shell for Android x86 with gcc 4.6.

        * WebCore.gyp/WebCore.gyp:

2012-10-10  Andrei Bucur  <abucur@adobe.com>

        [CSS Regions] Create a separate list for the invalid regions
        https://bugs.webkit.org/show_bug.cgi?id=98752

        Reviewed by Andreas Kling.

        This patch moves the invalid regions in a low traffic data structure, outside the main region list. This should add a small performance boost (there's no test for it) and simplifies the code in the following ways:
        - iterations through the region list don't need to worry about invalid regions
        - accessing the first/last region is straightforward
        - list manipulations are easier to implement (e.g. binary search for a region)

        Tests: Adapted fast/regions/flows-dependency-same-flow.html to use the new dump format for the region chain.

        * dom/WebKitNamedFlow.cpp:
        (WebCore::WebKitNamedFlow::getRegionsByContent): Now returns only the valid regions.
        (WebCore::WebKitNamedFlow::getRegions): Now returns only the valid regions.
        * rendering/RenderFlowThread.cpp:
        (WebCore::RenderFlowThread::RenderFlowThread):
        (WebCore::RenderFlowThread::layout):
        (WebCore::RenderFlowThread::updateLogicalWidth):
        (WebCore::RenderFlowThread::computeLogicalHeight):
        (WebCore::RenderFlowThread::repaintRectangleInRegions):
        (WebCore::RenderFlowThread::regionAtBlockOffset):
        (WebCore::RenderFlowThread::removeRenderBoxRegionInfo):
        (WebCore::RenderFlowThread::logicalWidthChangedInRegions):
        (WebCore::RenderFlowThread::firstRegion):
        (WebCore::RenderFlowThread::lastRegion):
        (WebCore::RenderFlowThread::computeOverflowStateForRegions):
        (WebCore::RenderFlowThread::regionInRange):
        (WebCore::RenderFlowThread::checkRegionsWithStyling):
        (WebCore::RenderFlowThread::objectInFlowRegion):
        (WebCore::RenderFlowThread::autoLogicalHeightRegionsCount):
        * rendering/RenderFlowThread.h:
        * rendering/RenderNamedFlowThread.cpp:
        (WebCore):
        (WebCore::addRegionToList):
        (WebCore::RenderNamedFlowThread::addRegionToThread):
        (WebCore::RenderNamedFlowThread::removeRegionFromThread):
        (WebCore::RenderNamedFlowThread::checkInvalidRegions):
        * rendering/RenderNamedFlowThread.h:
        (WebCore::RenderNamedFlowThread::invalidRenderRegionList):
        (RenderNamedFlowThread):
        (WebCore::RenderNamedFlowThread::canBeDestroyed):
        * rendering/RenderTreeAsText.cpp:
        (WebCore::writeRenderRegionList):
        (WebCore):
        (WebCore::writeRenderNamedFlowThreads): The valid regions are listed first followed by the invalid regions.

2012-10-10  Vsevolod Vlasov  <vsevik@chromium.org>

        Web Inspector: [Regression] Stale revisions are not cleared when inspector is opened for the already loaded page.
        https://bugs.webkit.org/show_bug.cgi?id=98915

        Reviewed by Alexander Pavlov.

        WorkspaceController now clears stale revisions on navigation as well.

        * inspector/front-end/Workspace.js:
        (WebInspector.WorkspaceController):
        (WebInspector.WorkspaceController.prototype._mainFrameNavigated):

2012-10-10  Vsevolod Vlasov  <vsevik@chromium.org>

        Web Inspector: Exception when committing java script editing with revision history view open.
        https://bugs.webkit.org/show_bug.cgi?id=98908

        Reviewed by Alexander Pavlov.

        Added null check.

        * inspector/front-end/RevisionHistoryView.js:

2012-10-10  Pavel Feldman  <pfeldman@chromium.org>

        Web Inspector: protect node in the InspectorDOMNode::inspect
        https://bugs.webkit.org/show_bug.cgi?id=98914

        Reviewed by Yury Semikhatsky.

        * inspector/InspectorDOMAgent.cpp:
        (WebCore::InspectorDOMAgent::inspect):

2012-10-10  Mike West  <mkwst@google.com>

        EditorCommand calls setProperty with the wrong parameters.
        https://bugs.webkit.org/show_bug.cgi?id=98896

        Reviewed by Jochen Eisinger.

        EditorCommand::executeToggleStyleInList calls
        StylePropertySet::setProperty with an ExceptionCode as the final
        argument. This only succeeds because it's automagically cast to a bool,
        which is what the method actually expects.

        Implicitly passing in 'false' by dropping the parameter shouldn't change
        any visible functionality; no new tests are required.

        * editing/EditorCommand.cpp:
        (WebCore::executeToggleStyleInList):

2012-10-10  Mike West  <mkwst@google.com>

        HTMLTextFormControlElement calls setInlineStyleProperty with the wrong parameters.
        https://bugs.webkit.org/show_bug.cgi?id=98892

        Reviewed by Jochen Eisinger.

        HTMLTextFormControlElement::updatePlaceholderVisibility calls
        HTMLElement::setInlineStyleProperty with an ExceptionCode as the last
        parameter. This only succeeds because it's automagically cast to a bool,
        which is what the method actually expects.

        Implicitly passing in 'false' by dropping the parameter shouldn't change
        any functionality; so no new tests are required.

        * html/HTMLTextFormControlElement.cpp:
        (WebCore::HTMLTextFormControlElement::updatePlaceholderVisibility):

2012-10-10  Christophe Dumez  <christophe.dumez@intel.com>

        SQLResultSet.rowsAffected not cleared
        https://bugs.webkit.org/show_bug.cgi?id=46070

        Reviewed by Kenneth Rohde Christiansen.

        SQLResultSet.rowsAffected is supposed to return the number
        of rows that were changed by the statement. For "SELECT"
        statements, it should return 0.

        However, our implementation currently relies on sqlite3_changes()
        to compute this value. sqlite3_changes() returns the number of
        direct row changes in the most recent INSERT, UPDATE, or DELETE
        statement within the same trigger context. Unfortunately, the
        most recent INSERT, UPDATE, or DELETE statement may not be the
        last statement. As a consequence, if you INSERT 1 row, then
        do a SELECT, SQLResultSet.rowsAffected will be 1 for both the
        INSERT and the SELECT statements.

        The proposed solution is to use sqlite3_total_changes() instead
        of sqlite3_changes(). sqlite3_total_changes() returns the number
        of row changes caused by INSERT, UPDATE or DELETE statements since
        the database connection was opened. We now store the value
        returned by sqlite3_total_changes() before each statement in
        order to return the count difference in
        SQLiteDatabase::lastChanges().

        Test: storage/websql/execute-sql-rowsAffected.html

        * platform/sql/SQLiteDatabase.cpp:
        (WebCore::SQLiteDatabase::SQLiteDatabase):
        (WebCore::SQLiteDatabase::updateLastChangesCount):
        (WebCore):
        (WebCore::SQLiteDatabase::lastChanges):
        * platform/sql/SQLiteDatabase.h:
        (SQLiteDatabase):
        * platform/sql/SQLiteStatement.cpp:
        (WebCore::SQLiteStatement::step):

2012-10-10  Keishi Hattori  <keishi@webkit.org>

        REGRESSION (r129738): Calendar picker is too wide when the input is rtl
        https://bugs.webkit.org/show_bug.cgi?id=98881

        Reviewed by Kent Tamura.

        Calendar picker should use param.isCalendarRTL instead of param.isRTL but some were left.

        No new tests. Covered by ManualTests/forms/calendar-picker.html.

        * Resources/pagepopups/calendarPicker.js:
        (CalendarPicker.prototype.fixWindowSize): Calendar picker should use param.isCalendarRTL instead of param.isRTL.
        (DaysTable.prototype._handleKey): Ditto.

2012-10-10  Alexander Pavlov  <apavlov@chromium.org>

        Web Inspector: Semantically incorrect CSS rules result in broken source code data
        https://bugs.webkit.org/show_bug.cgi?id=98520

        Reviewed by Vsevolod Vlasov.

        Pop and throw away rule data from the stack when data have been collected for a semantically invalid CSS rule
        (which is not going to be created).

        * css/CSSParser.cpp:
        (WebCore::CSSParser::createImportRule):
        (WebCore::CSSParser::createFontFaceRule):
        (WebCore::CSSParser::createPageRule):
        (WebCore::CSSParser::createRegionRule):

2012-10-10  Zeno Albisser  <zeno@webkit.org>

        [Qt][Mac] GL_ARB_texture_rectangle must be activated when using ANGLE.
        https://bugs.webkit.org/show_bug.cgi?id=98387

        Check for the availability of GL_ARB_texture_rectangle extension.
        In case it is available, we activate the extension for ANGLE.
        This is necessary for WebGL on mac, because the GraphicsSurface
        on this platform is based on an IOSurface, which requires this extension.

        Reviewed by Noam Rosenthal.

        * platform/graphics/qt/GraphicsContext3DQt.cpp:
        (WebCore::GraphicsContext3DPrivate::initializeANGLE):

2012-10-10  Andreas Kling  <kling@webkit.org>

        ElementAttributeData: tighten member packing on 64-bit.
        <http://webkit.org/b/98861>

        Reviewed by Anders Carlsson.

        Pack m_isMutable and m_arraySize into the slack from the RefCounted base on 64-bit.
        218kB progression on Membuster3.

        * dom/ElementAttributeData.h:
        (ElementAttributeData):

2012-10-10  Alexandre Elias  <aelias@chromium.org>

        Text Autosizing: Counteract funky window sizing on Android.
        https://bugs.webkit.org/show_bug.cgi?id=98809

        Reviewed by Adam Barth.

        In Chrome for Android, the window sizes provided to WebCore are
        currently in physical screen pixels instead of
        device-scale-adjusted units. For example window width on a
        Galaxy Nexus is 720 instead of 360.  Text autosizing expects
        device-independent pixels.  When Chrome for Android cuts over to
        the new coordinate space, it will be tied to the setting
        applyPageScaleFactorInCompositor.

        No new tests.

        * rendering/TextAutosizer.cpp:
        (WebCore::TextAutosizer::processSubtree):

2012-10-09  Philip Rogers  <pdr@google.com>

        Recursively detach SVGElementInstances
        https://bugs.webkit.org/show_bug.cgi?id=98851

        Reviewed by Ryosuke Niwa and Abhishek Arya

        Before this patch, SVGElementInstance child nodes were not being detached. This
        patch makes detach() recursively detach SVGElementInstances.

        * svg/SVGElementInstance.cpp:
        (WebCore::SVGElementInstance::detach):

2012-10-09  Kenichi Ishibashi  <bashi@chromium.org>

        [Chromium] Fix harfbuzz-ng related code after r130231
        https://bugs.webkit.org/show_bug.cgi?id=98858

        Reviewed by Kent Tamura.

        Replace first/second with key/value.

        No new tests. No changes in behavior.

        * platform/graphics/harfbuzz/ng/HarfBuzzNGFaceSkia.cpp:
        (WebCore::harfbuzzGetGlyph):
        * platform/graphics/skia/SimpleFontDataSkia.cpp:
        (WebCore::SimpleFontData::canRenderCombiningCharacterSequence):

2012-10-09  Enrica Casucci  <enrica@apple.com>

        Only measure text once instead of twice when performing line layout.
        https://bugs.webkit.org/show_bug.cgi?id=98317
        <rdar://problem/12080821>

        Reviewed by Dan Bernstein.

        Since we are measuring each word to find out where the line break should occur,
        we should cache that information to avoid measuring the run again when
        creating the line box. The bulk of the change is in nextLineBreak, where
        the measurements are collected and placed in a vector so that they can
        be consumed in setLogicalWidthForTextRun where we used to measure the
        text one more time.
        Each entry in the vector is a WordMeasurement object that contains information
        about the start and end offset in the run, the renderer, the measured width
        and, possibly, a list of fallback fonts.
        When we need to compute the width of the run to create the line box, we add
        all the measurements for the given renderer in the run to get the total width.
        This optiomization is currently disabled for platforms using HarfBuzz.

        * platform/graphics/Font.cpp:
        (WebCore::Font::width): Added fallback fonts parameter.
        * platform/graphics/Font.h:
        (Font): Added fallback fonts parameter to the width static member function.
        This method is called when we compute the width using TextLayout.
        * platform/graphics/mac/ComplexTextController.cpp:
        (WebCore::TextLayout::width): Added fallback fonts parameter.
        (WebCore::Font::width):
        (WebCore::ComplexTextController::advance):
        * platform/graphics/mac/ComplexTextController.h:
        (ComplexTextController): Added fallback fonts parameter to advance method.
        * rendering/RenderBlock.h: Added WordMeasures parameter to few methods.
        * rendering/RenderBlockLineLayout.cpp:
        (WordMeasurement): Added new class to hold measurement information.
        (WebCore::setLogicalWidthForTextRun): This is where we compute the run width using the
        cached information.
        (WebCore::RenderBlock::computeInlineDirectionPositionsForLine): Added wordMeasures parameter.
        (WebCore::RenderBlock::createLineBoxesFromBidiRuns): Added wordMeasures parameter.
        (WebCore::RenderBlock::layoutRunsAndFloatsInRange): Added declaration of the WordMeasures
        vector and its use.
        (WebCore::textWidth): Added fallbackFonts parameter, since now we only measure once.
        (WebCore::RenderBlock::LineBreaker::nextLineBreak): This method has been modified to collect
        the measurements of the individual words and add them to the vector.

2012-10-09  Andreas Kling  <kling@webkit.org>

        GlyphPageTreeNode should use HashMap<OwnPtr>.
        <http://webkit.org/b/98845>

        Reviewed by Dan Bernstein.

        - Replace manual memory management by OwnPtrs.
        - Added a GlyphPageTreeNodeMap typedef to make call sites look a bit nicer.
        = Changed some hashmap get()/remove() pairs to use the more efficient take() instead.
        - Made the constructor private, it has no external clients.

        * platform/graphics/GlyphPageTreeNode.cpp:
        (WebCore::GlyphPageTreeNode::getRoot):
        (WebCore::GlyphPageTreeNode::pageCount):
        (WebCore::GlyphPageTreeNode::getChild):
        (WebCore::GlyphPageTreeNode::pruneCustomFontData):
        (WebCore::GlyphPageTreeNode::pruneFontData):
        (WebCore::GlyphPageTreeNode::showSubtree):
        * platform/graphics/GlyphPageTreeNode.h:
        (GlyphPageTreeNode):
        (WebCore::GlyphPageTreeNode::GlyphPageTreeNode):

2012-10-09  Kent Tamura  <tkent@chromium.org>

        Sub-fields in input[type=time] should not be focusable if the input is disabled or read-only
        https://bugs.webkit.org/show_bug.cgi?id=98850

        Reviewed by Kentaro Hara.

        Covered by additional test cases of
        time-multiple-fields/time-multiple-fields-keyboard-events.html and
        time-multiple-fields/time-multiple-fields-mouse-events.html.

        * html/shadow/DateTimeFieldElement.h:
        (FieldOwner): Add isFieldOwnerDisabledOrReadOnly.
        * html/shadow/DateTimeFieldElement.cpp:
        (WebCore::DateTimeFieldElement::isFocusable):
        Check isFieldOwnerDisabledOrReadOnly, and calls HTMLElement::isFocusable()
        just in case.
        * html/shadow/DateTimeEditElement.cpp:
        (WebCore::DateTimeEditElement::isFieldOwnerDisabledOrReadOnly): Added.
        * html/shadow/DateTimeEditElement.h:
        (DateTimeEditElement): Declare isFieldOwnerDisabledOrReadOnly.

2012-10-09  Robert Kroeger  <rjkroege@chromium.org>

        [chromium] revert fling deacceleration parameter change
        https://bugs.webkit.org/show_bug.cgi?id=98820

        Reviewed by Adrienne Walker.

        After an extended discussion, it has been decided that a previous
        adjustment to fling deacceleration parameters should be reverted.

        Tested by existing unit tests.

        * platform/TouchFlingPlatformGestureCurve.cpp:
        (WebCore::TouchFlingPlatformGestureCurve::createForTouchPad):
        (WebCore::TouchFlingPlatformGestureCurve::createForTouchScreen):

2012-10-09  Kent Tamura  <tkent@chromium.org>

        Should reject invalid dates constructed with multiple fields UI
        https://bugs.webkit.org/show_bug.cgi?id=98727

        Reviewed by Hajime Morita.

        In input[type=date] with multiple fields UI, we allow users to set
        day-of-month value to 1-31 regardless of the month value. So users can
        construct an invalid date such as "2012-02-31". We should sanitize such
        values.

        This change affects platforms with ENABLE_INPUT_TYPE_DATE &&
        ENABLE_INPUT_MULTIPLE_FIELDS_UI.

        Test: fast/forms/date-multiple-fields/date-multiple-fields-keyboard-events.html

        * html/BaseDateAndTimeInputType.h:
        (BaseDateAndTimeInputType): Make sanitizeValue protected to be called from
        BaseMultipleFieldsDateAndTimeInputType.
        * html/BaseMultipleFieldsDateAndTimeInputType.cpp:
        (WebCore::BaseMultipleFieldsDateAndTimeInputType::editControlValueChanged):
        Apply sanitizeValue to a value constructed in UI.
        (WebCore::BaseMultipleFieldsDateAndTimeInputType::restoreFormControlState):
        Ditto.

2012-10-09  Joe Mason  <jmason@rim.com>

        Check for null m_frame in NetworkJob
        https://bugs.webkit.org/show_bug.cgi?id=98830

        Reviewed by George Staikos.

        PR 220025

        * platform/network/blackberry/NetworkJob.cpp:
        (WebCore::NetworkJob::sendRequestWithCredentials):
        (WebCore::NetworkJob::storeCredentials):

2012-10-09  Jian Li  <jianli@chromium.org>

        Update the CSS property used to support draggable regions.
        https://bugs.webkit.org/show_bug.cgi?id=97156

        Reviewed by Adam Barth.

        The CSS property to support draggable regions has been changed from
        "-webkit-widget-region" to "-webkit-app-region" in the following syntax:
           -webkit-app-region: drag|no-drag

        The CSS parsing code for draggable regions is now different from the CSS
        parsing code for dashboard regions since we have quite different syntax.

        We still try to share as much rendering update code as possible for
        these two features. To make the shared code easier to understand for
        both features, the name "DashboardRegions" in the shared code is changed
        to "AnnotatedRegions" to work for both dashboard regions and draggable
        regions.

        Note that we still using WIDGET_REGION as feature name in order not to
        add more changes to this patch. It will be renamed to a more appropriate
        name in next patch. WIDGET_REGION is now only turned on for the chromium
        port.

        Test: fast/css/draggable-region-parser.html

        * Configurations/FeatureDefines.xcconfig: Disable WIDGET_REGION feature.
        * WebCore.exp.in: Update the exported symbol due to renaming.
        * css/CSSComputedStyleDeclaration.cpp: Update the CSS parsing.
        (WebCore):
        (WebCore::CSSComputedStyleDeclaration::getPropertyCSSValue):
        * css/CSSParser.cpp: Update the CSS parsing.
        (WebCore::CSSParser::parseValue):
        (WebCore):
        (WebCore::CSSParser::parseDashboardRegions):
        * css/CSSParserValues.cpp: Update the CSS parsing.
        (WebCore::CSSParserValue::createCSSValue):
        * css/CSSPrimitiveValue.cpp: Update the CSS parsing.
        (WebCore::isValidCSSUnitTypeForDoubleConversion):
        (WebCore):
        (WebCore::CSSPrimitiveValue::cleanup):
        (WebCore::CSSPrimitiveValue::customCssText):
        (WebCore::CSSPrimitiveValue::cloneForCSSOM):
        (WebCore::CSSPrimitiveValue::reportDescendantMemoryUsage):
        * css/CSSPrimitiveValue.h: Update the CSS parsing.
        (CSSPrimitiveValue):
        * css/CSSProperty.cpp:
        (WebCore::CSSProperty::isInheritedProperty):
        * css/CSSPropertyNames.in: Rename the CSS property for draggable region.
        * css/CSSValueKeywords.in: Add the keywords supported for the draggable region.
        * css/DashboardRegion.h: Remove WIDGET_REGION guard.
        (DashboardRegion):
        * css/StyleResolver.cpp: Update the CSS parsing.
        (WebCore::StyleResolver::collectMatchingRulesForList):
        * dom/Document.cpp: Rename dashboardRegions to annotatedRegions.
        (WebCore::Document::Document):
        (WebCore::Document::annotatedRegions):
        (WebCore::Document::setAnnotatedRegions):
        (WebCore::Document::reportMemoryUsage):
        * dom/Document.h: Rename dashboardRegions to annotatedRegions.
        (WebCore):
        (WebCore::Document::setAnnotatedRegionsDirty):
        (WebCore::Document::annotatedRegionsDirty):
        (WebCore::Document::hasAnnotatedRegions):
        (WebCore::Document::setHasAnnotatedRegions):
        (Document):
        * page/Chrome.cpp: Rename dashboardRegions to annotatedRegions.
        (WebCore::ChromeClient::annotatedRegionsChanged):
        * page/ChromeClient.h: Rename dashboardRegions to annotatedRegions.
        (ChromeClient):
        * page/FrameView.cpp: Rename dashboardRegions to annotatedRegions.
        (WebCore::FrameView::layout):
        (WebCore::FrameView::updateAnnotatedRegions):
        (WebCore::FrameView::paintContents):
        * page/FrameView.h: Rename dashboardRegions to annotatedRegions.
        (FrameView):
        * rendering/RenderInline.cpp:
        (WebCore::RenderInline::addAnnotatedRegions):
        * rendering/RenderInline.h: Rename dashboardRegions to annotatedRegions.
        (RenderInline):
        * rendering/RenderLayer.cpp: Rename dashboardRegions to annotatedRegions.
        (WebCore::RenderLayer::scrollTo):
        (WebCore::RenderLayer::setHasHorizontalScrollbar):
        (WebCore::RenderLayer::setHasVerticalScrollbar):
        (WebCore::RenderLayer::updateScrollbarsAfterLayout):
        * rendering/RenderListBox.cpp: Rename dashboardRegions to annotatedRegions.
        (WebCore::RenderListBox::setHasVerticalScrollbar):
        * rendering/RenderObject.cpp: Rename dashboardRegions to annotatedRegions.
        (WebCore::RenderObject::styleWillChange):
        (WebCore::RenderObject::addAnnotatedRegions):
        (WebCore::RenderObject::collectAnnotatedRegions):
        * rendering/RenderObject.h: Rename dashboardRegions to annotatedRegions.
        (WebCore::AnnotatedRegionValue::operator==):
        (WebCore::AnnotatedRegionValue::operator!=):
        (AnnotatedRegionValue):
        (RenderObject):
        * rendering/style/RenderStyle.cpp: Update the CSS parsing.
        (WebCore::RenderStyle::diff):
        (WebCore):
        * rendering/style/RenderStyle.h: Update the CSS parsing.
        * rendering/style/RenderStyleConstants.h: Update the CSS parsing.
        * rendering/style/StyleDashboardRegion.h: Update the CSS parsing.
        * rendering/style/StyleRareNonInheritedData.cpp: Update the CSS parsing.
        (WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData):
        (WebCore::StyleRareNonInheritedData::operator==):
        * rendering/style/StyleRareNonInheritedData.h: Update the CSS parsing.
        (WebCore):
        (StyleRareNonInheritedData):

2012-10-09  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r130811 and r130821.
        http://trac.webkit.org/changeset/130811
        http://trac.webkit.org/changeset/130821
        https://bugs.webkit.org/show_bug.cgi?id=98831

        Broke date-suggestion-picker-appearance-with-scroll-bar.html
        (Requested by abarth|gardening on #webkit).

        * WebCore.exp.in:
        * dom/ContainerNode.cpp:
        (WebCore::ContainerNode::getUpperLeftCorner):
        (WebCore::ContainerNode::getLowerRightCorner):
        * dom/MouseRelatedEvent.cpp:
        (WebCore::MouseRelatedEvent::computeRelativePosition):
        * dom/Node.cpp:
        (WebCore::Node::convertToPage):
        (WebCore::Node::convertFromPage):
        * editing/FrameSelection.cpp:
        (WebCore::CaretBase::absoluteBoundsForLocalRect):
        * editing/RenderedPosition.cpp:
        (WebCore::RenderedPosition::absoluteRect):
        * editing/VisiblePosition.cpp:
        (WebCore::VisiblePosition::absoluteCaretBounds):
        * html/HTMLSelectElement.cpp:
        (WebCore::HTMLSelectElement::listBoxDefaultEventHandler):
        * html/shadow/SliderThumbElement.cpp:
        (WebCore::SliderThumbElement::setPositionFromPoint):
        * html/shadow/SpinButtonElement.cpp:
        (WebCore::SpinButtonElement::defaultEventHandler):
        * page/FrameView.cpp:
        (WebCore::FrameView::convertFromRenderer):
        (WebCore::FrameView::convertToRenderer):
        * rendering/InlineTextBox.cpp:
        (WebCore::InlineTextBox::paintDocumentMarker):
        (WebCore::InlineTextBox::paintTextMatchMarker):
        (WebCore::InlineTextBox::computeRectForReplacementMarker):
        * rendering/LayoutState.cpp:
        (WebCore::LayoutState::LayoutState):
        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::absoluteQuads):
        * rendering/RenderBox.cpp:
        (WebCore::RenderBox::absoluteQuads):
        (WebCore::RenderBox::absoluteContentBox):
        (WebCore::RenderBox::mapLocalToContainer):
        (WebCore::RenderBox::mapAbsoluteToLocalPoint):
        * rendering/RenderBox.h:
        (RenderBox):
        * rendering/RenderBoxModelObject.cpp:
        (WebCore::RenderBoxModelObject::computeStickyPositionConstraints):
        (WebCore::RenderBoxModelObject::mapAbsoluteToLocalPoint):
        * rendering/RenderBoxModelObject.h:
        (RenderBoxModelObject):
        * rendering/RenderEmbeddedObject.cpp:
        (WebCore::RenderEmbeddedObject::isInUnavailablePluginIndicator):
        * rendering/RenderFrameSet.cpp:
        (WebCore::RenderFrameSet::userResize):
        * rendering/RenderGeometryMap.cpp:
        (WebCore::RenderGeometryMap::absolutePoint):
        * rendering/RenderInline.cpp:
        (WebCore::RenderInline::mapLocalToContainer):
        * rendering/RenderInline.h:
        (RenderInline):
        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::absoluteToContents):
        (WebCore::RenderLayer::convertToLayerCoords):
        (WebCore::RenderLayer::scrollTo):
        (WebCore::RenderLayer::calculateClipRects):
        (WebCore::RenderLayer::childrenClipRect):
        (WebCore::RenderLayer::selfClipRect):
        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::contentsVisible):
        * rendering/RenderMediaControls.cpp:
        (WebCore::RenderMediaControls::volumeSliderOffsetFromMuteButton):
        * rendering/RenderMenuList.cpp:
        (WebCore::RenderMenuList::showPopup):
        * rendering/RenderObject.cpp:
        (WebCore::RenderObject::absoluteFocusRingQuads):
        (WebCore::RenderObject::localToAbsolute):
        (WebCore::RenderObject::absoluteToLocal):
        (WebCore::RenderObject::mapLocalToContainer):
        (WebCore::RenderObject::mapAbsoluteToLocalPoint):
        (WebCore::RenderObject::localToContainerQuad):
        (WebCore::RenderObject::localToContainerPoint):
        * rendering/RenderObject.h:
        (RenderObject):
        (WebCore::RenderObject::localToAbsoluteQuad):
        * rendering/RenderText.cpp:
        (WebCore::RenderText::absoluteRectsForRange):
        (WebCore::RenderText::absoluteQuads):
        (WebCore::RenderText::absoluteQuadsForRange):
        * rendering/RenderTheme.cpp:
        (WebCore::RenderTheme::volumeSliderOffsetFromMuteButton):
        * rendering/RenderView.cpp:
        (WebCore::RenderView::mapLocalToContainer):
        (WebCore::RenderView::mapAbsoluteToLocalPoint):
        (WebCore::RenderView::selectionBounds):
        * rendering/RenderView.h:
        (RenderView):
        * rendering/RenderWidget.cpp:
        (WebCore::RenderWidget::updateWidgetGeometry):
        * rendering/svg/RenderSVGForeignObject.cpp:
        (WebCore::RenderSVGForeignObject::mapLocalToContainer):
        * rendering/svg/RenderSVGForeignObject.h:
        (RenderSVGForeignObject):
        * rendering/svg/RenderSVGInline.cpp:
        (WebCore::RenderSVGInline::mapLocalToContainer):
        * rendering/svg/RenderSVGInline.h:
        (RenderSVGInline):
        * rendering/svg/RenderSVGModelObject.cpp:
        (WebCore::RenderSVGModelObject::mapLocalToContainer):
        (WebCore::RenderSVGModelObject::absoluteQuads):
        * rendering/svg/RenderSVGModelObject.h:
        (RenderSVGModelObject):
        * rendering/svg/RenderSVGRoot.cpp:
        (WebCore::RenderSVGRoot::mapLocalToContainer):
        * rendering/svg/RenderSVGRoot.h:
        (RenderSVGRoot):
        * rendering/svg/RenderSVGText.cpp:
        (WebCore::RenderSVGText::mapLocalToContainer):
        (WebCore::RenderSVGText::absoluteQuads):
        * rendering/svg/RenderSVGText.h:
        (RenderSVGText):
        * rendering/svg/SVGRenderSupport.cpp:
        (WebCore::SVGRenderSupport::mapLocalToContainer):
        * svg/SVGSVGElement.cpp:
        (WebCore::SVGSVGElement::localCoordinateSpaceTransform):

2012-10-09  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r130812.
        http://trac.webkit.org/changeset/130812
        https://bugs.webkit.org/show_bug.cgi?id=98826

        Caused fast/text/shaping/shaping-selection-rect to fail
        (Requested by abarth|gardening on #webkit).

        * platform/graphics/Font.cpp:
        (WebCore::Font::width):
        * platform/graphics/Font.h:
        (Font):
        * platform/graphics/mac/ComplexTextController.cpp:
        (WebCore::TextLayout::width):
        (WebCore::Font::width):
        (WebCore::ComplexTextController::advance):
        * platform/graphics/mac/ComplexTextController.h:
        (ComplexTextController):
        * rendering/RenderBlock.h:
        (WebCore):
        (LineBreaker):
        (RenderBlock):
        * rendering/RenderBlockLineLayout.cpp:
        (WebCore::setLogicalWidthForTextRun):
        (WebCore::RenderBlock::computeInlineDirectionPositionsForLine):
        (WebCore::RenderBlock::createLineBoxesFromBidiRuns):
        (WebCore::RenderBlock::layoutRunsAndFloatsInRange):
        (WebCore::textWidth):
        (WebCore::RenderBlock::LineBreaker::nextLineBreak):

2012-10-09  Ryosuke Niwa  <rniwa@webkit.org>

        DOM/textarea-edit.html spends 35% of time in numGraphemeClusters
        https://bugs.webkit.org/show_bug.cgi?id=98711

        Reviewed by Kent Tamura.

        Since the number of characters is always greater than the number of grapheme clusters,
        we can avoid calling computeLengthForSubmission when the number of characters is less
        than maxlength. We still have to count the number of LFs since they all need to be
        converted into CRLFs. This improves WebKit's score on DOM/textarea-edit.html by 45%.

        * html/HTMLTextAreaElement.cpp:
        (WebCore::computeLengthForSubmission):
        (WebCore::numberOfLineBreaks):
        (WebCore::upperBoundForLengthForSubmission): Added.
        (WebCore::HTMLTextAreaElement::handleBeforeTextInsertedEvent):
        (WebCore::HTMLTextAreaElement::tooLong):

2012-10-09  Nate Chapin  <japhet@chromium.org>

        Make CachedResourceLoader RefCounted and have both Document
        and DocumentLoader hold RefPtrs. This is in preparation for
        caching main resources.
        https://bugs.webkit.org/show_bug.cgi?id=86787

        Reviewed by Adam Barth.

        No new tests, no functionality changes at this time.

        * WebCore.exp.in:
        * WebCore.xcodeproj/project.pbxproj:
        * dom/Document.cpp:
        (WebCore::Document::Document): Only create our own CachedResourceLoader
            if we were given a null frame.
        (WebCore::Document::~Document):
        (WebCore::Document::cachedResourceLoader):
        (WebCore):
        * dom/Document.h:
        (Document):
        * loader/DocumentLoader.cpp: Throughout, use our m_cachedResourceLoader instead
            of the Document's pointer.
        (WebCore::DocumentLoader::DocumentLoader): Create a CachedResourceLoader.
        (WebCore::DocumentLoader::~DocumentLoader):
        (WebCore::DocumentLoader::isLoadingInAPISense):
        (WebCore::DocumentLoader::subresource):
        (WebCore::DocumentLoader::getSubresources):
        * loader/DocumentLoader.h:
        (WebCore::DocumentLoader::cachedResourceLoader):
        (DocumentLoader):
        * loader/SubresourceLoader.cpp: Remove m_document, since it only existed to keep alive and access the CachedResourceLoader.
            It can now be accessed from m_documentLoader.
        (WebCore::SubresourceLoader::SubresourceLoader):
        (WebCore::SubresourceLoader::~SubresourceLoader):
        (WebCore::SubresourceLoader::willSendRequest):
        (WebCore::SubresourceLoader::releaseResources):
        * loader/SubresourceLoader.h:
        (SubresourceLoader):
        * loader/cache/CachedResourceLoader.cpp: Handle the possibility of a null Document in several places.
        (WebCore::CachedResourceLoader::CachedResourceLoader):
        (WebCore::CachedResourceLoader::~CachedResourceLoader):
        (WebCore::CachedResourceLoader::frame):
        (WebCore::CachedResourceLoader::canRequest):
        (WebCore::CachedResourceLoader::determineRevalidationPolicy):
        (WebCore::CachedResourceLoader::printAccessDeniedMessage):
        (WebCore::CachedResourceLoader::loadDone):
        * loader/cache/CachedResourceLoader.h:
        (WebCore):
        (WebCore::CachedResourceLoader::create): Add create(), make constructor private.
        (CachedResourceLoader):
        (WebCore::CachedResourceLoader::document):
        (WebCore::CachedResourceLoader::setDocument):
        (WebCore::CachedResourceLoader::clearDocumentLoader):

2012-10-09  Alexander Shalamov  <alexander.shalamov@intel.com>

        CSS Style is not recalculated when media attribute of style element is changed
        https://bugs.webkit.org/show_bug.cgi?id=96752

        Reviewed by Kenneth Rohde Christiansen.

        When "media" attribute of style element is changed, style should be recalculated.
        This patch modifies HTMLStyleElement::parseAttribute, so that when the media attribute
        is updated, new MediaQuerySet is created and applied to the style element then, document
        style is recalculated. Since media query set is updated for CSSStyleSheet, CSSOM wrapper
        for media query should be updated as well in order to sync with new media query set value.

        Test: fast/media/mq-js-update-media.html

        * css/CSSStyleSheet.cpp:
        (WebCore::CSSStyleSheet::setMediaQueries):
        * html/HTMLStyleElement.cpp:
        (WebCore::HTMLStyleElement::parseAttribute):

2012-10-09  Ben Murdoch  <benm@google.com>

        [chromium][Android] Add WebSecurityOrigin::grantLoadLocalResources()
        https://bugs.webkit.org/show_bug.cgi?id=97689

        Reviewed by Adam Barth.

        In addition to the WebKit/chromium side of the change, remove the
        ASSERT in SecurityOrigin::grantLoadLocalResources(). Android WebView
        is a legitimate user of this API in cases where neither of the
        ASSERT'd conditions hold.

        * page/SecurityOrigin.cpp:
        (WebCore::SecurityOrigin::grantLoadLocalResources): Remove ASSERT.

2012-10-09  Jon Lee  <jonlee@apple.com>

        Build fix for Qt Windows.

        * html/HTMLPlugInElement.h: Include Image.h.

2012-10-09  Enrica Casucci  <enrica@apple.com>

        Only measure text once instead of twice when performing line layout.
        https://bugs.webkit.org/show_bug.cgi?id=98317
        <rdar://problem/12080821>

        Reviewed by Dan Bernstein.

        Since we are measuring each word to find out where the line break should occur,
        we should cache that information to avoid measuring the run again when
        creating the line box. The bulk of the change is in nextLineBreak, where
        the measurements are collected and placed in a vector so that they can
        be consumed in setLogicalWidthForTextRun where we used to measure the
        text one more time.
        Each entry in the vector is a WordMeasurement object that contains information
        about the start and end offset in the run, the renderer, the measured width
        and, possibly, a list of fallback fonts.
        When we need to compute the width of the run to create the line box, we add
        all the measurements for the given renderer in the run to get the total width.

        * platform/graphics/Font.cpp:
        (WebCore::Font::width): Added fallback fonts parameter.
        * platform/graphics/Font.h:
        (Font): Added fallback fonts parameter to the width static member function.
        This method is called when we compute the width using TextLayout.
        * platform/graphics/mac/ComplexTextController.cpp:
        (WebCore::TextLayout::width): Added fallback fonts parameter.
        (WebCore::Font::width):
        (WebCore::ComplexTextController::advance):
        * platform/graphics/mac/ComplexTextController.h:
        (ComplexTextController): Added fallback fonts parameter to advance method.
        * rendering/RenderBlock.h: Added WordMeasures parameter to few methods.
        * rendering/RenderBlockLineLayout.cpp:
        (WordMeasurement): Added new class to hold measurement information.
        (WebCore::setLogicalWidthForTextRun): This is where we compute the run width using the
        cached information.
        (WebCore::RenderBlock::computeInlineDirectionPositionsForLine): Added wordMeasures parameter.
        (WebCore::RenderBlock::createLineBoxesFromBidiRuns): Added wordMeasures parameter.
        (WebCore::RenderBlock::layoutRunsAndFloatsInRange): Added declaration of the WordMeasures
        vector and its use.
        (WebCore::textWidth): Added fallbackFonts parameter, since now we only measure once.
        (WebCore::RenderBlock::LineBreaker::nextLineBreak): This method has been modified to collect
        the measurements of the individual words and add them to the vector.

2012-10-09  Levi Weintraub  <leviw@chromium.org>

        [Sub pixel layout] Fast-path iframe scrolling can picks up an extra pixel
        https://bugs.webkit.org/show_bug.cgi?id=98571

        Reviewed by Emil A Eklund.

        Refactoring all coordinate-switching functionality to use a single "mode" flag
        as opposed to having a bunch of boolean values. This enables the same set of
        options across the board, and a consistent interface. This was previously
        done for mapLocalToContainer.

        The imptetus for this for this stems from the one logical change in this patch
        which only effects sub-pixel layout. FrameView::convertToRenderer and
        convertFromRenderer return IntPoint coordinates, and need to also snap transform
        offsets to determine proper rects for scrolling.

        Unlabeled functions below are simply being updated to these new interfaces.

        Test: fast/sub-pixel/sub-pixel-iframe-copy-on-scroll.html

        * WebCore.exp.in:
        * dom/ContainerNode.cpp:
        (WebCore::ContainerNode::getUpperLeftCorner):
        (WebCore::ContainerNode::getLowerRightCorner):
        * dom/Element.cpp:
        (WebCore::Element::boundsInRootViewSpace):
        * dom/MouseRelatedEvent.cpp:
        (WebCore::MouseRelatedEvent::computeRelativePosition):
        * dom/Node.cpp:
        (WebCore::Node::convertToPage):
        (WebCore::Node::convertFromPage):
        * html/HTMLSelectElement.cpp:
        (WebCore::HTMLSelectElement::listBoxDefaultEventHandler):
        * html/shadow/SliderThumbElement.cpp:
        (WebCore::SliderThumbElement::setPositionFromPoint):
        * html/shadow/SpinButtonElement.cpp:
        (WebCore::SpinButtonElement::defaultEventHandler):
        * page/FrameView.cpp:
        (WebCore::FrameView::convertToRenderer): Now pixel-snaps offsets before passing
        them to TransformState, which transforms the coordinates.
        (WebCore::FrameView::convertFromRenderer): Ditto.
        * rendering/LayoutState.cpp:
        (WebCore::LayoutState::LayoutState):
        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::absoluteQuads):
        * rendering/RenderBox.cpp:
        (WebCore::RenderBox::absoluteQuads):
        (WebCore::RenderBox::mapLocalToContainer):
        (WebCore::RenderBox::mapAbsoluteToLocalPoint):
        * rendering/RenderBox.h:
        (RenderBox):
        * rendering/RenderBoxModelObject.cpp:
        (WebCore::RenderBoxModelObject::mapAbsoluteToLocalPoint):
        * rendering/RenderBoxModelObject.h:
        (RenderBoxModelObject):
        * rendering/RenderEmbeddedObject.cpp:
        (WebCore::RenderEmbeddedObject::isInUnavailablePluginIndicator):
        * rendering/RenderFrameSet.cpp:
        (WebCore::RenderFrameSet::userResize):
        * rendering/RenderGeometryMap.cpp:
        (WebCore::RenderGeometryMap::absolutePoint):
        * rendering/RenderInline.cpp:
        (WebCore::RenderInline::mapLocalToContainer):
        * rendering/RenderInline.h:
        (RenderInline):
        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::absoluteToContents):
        (WebCore::RenderLayer::calculateClipRects):
        * rendering/RenderMediaControls.cpp:
        (WebCore::RenderMediaControls::volumeSliderOffsetFromMuteButton):
        * rendering/RenderMenuList.cpp:
        (WebCore::RenderMenuList::showPopup):
        * rendering/RenderObject.cpp:
        (WebCore::RenderObject::localToAbsolute):
        (WebCore::RenderObject::absoluteToLocal):
        (WebCore::RenderObject::mapLocalToContainer):
        (WebCore::RenderObject::mapAbsoluteToLocalPoint):
        (WebCore::RenderObject::localToContainerQuad):
        (WebCore::RenderObject::localToContainerPoint):
        * rendering/RenderObject.h:
        (RenderObject): MapLocalToContainerFlags is now MapCoordinatesFlags since it's
        now used for other conversion methods.
        (WebCore::RenderObject::localToAbsoluteQuad):
        * rendering/RenderTheme.cpp:
        (WebCore::RenderTheme::volumeSliderOffsetFromMuteButton):
        * rendering/RenderView.cpp:
        (WebCore::RenderView::mapLocalToContainer):
        (WebCore::RenderView::mapAbsoluteToLocalPoint):
        * rendering/RenderView.h:
        (RenderView):
        * rendering/svg/RenderSVGForeignObject.cpp:
        (WebCore::RenderSVGForeignObject::mapLocalToContainer):
        * rendering/svg/RenderSVGForeignObject.h:
        (RenderSVGForeignObject):
        * rendering/svg/RenderSVGInline.cpp:
        (WebCore::RenderSVGInline::mapLocalToContainer):
        * rendering/svg/RenderSVGInline.h:
        (RenderSVGInline):
        * rendering/svg/RenderSVGModelObject.cpp:
        (WebCore::RenderSVGModelObject::mapLocalToContainer):
        * rendering/svg/RenderSVGModelObject.h:
        (RenderSVGModelObject):
        * rendering/svg/RenderSVGRoot.cpp:
        (WebCore::RenderSVGRoot::mapLocalToContainer):
        * rendering/svg/RenderSVGRoot.h:
        (RenderSVGRoot):
        * rendering/svg/RenderSVGText.cpp:
        (WebCore::RenderSVGText::mapLocalToContainer):
        * rendering/svg/RenderSVGText.h:
        (RenderSVGText):
        * rendering/svg/SVGRenderSupport.cpp:
        (WebCore::SVGRenderSupport::mapLocalToContainer):
        * svg/SVGSVGElement.cpp:
        (WebCore::SVGSVGElement::localCoordinateSpaceTransform):

2012-10-09  Jon Lee  <jonlee@apple.com>

        [WK2] Have plugins render offscreen to capture snapshot
        https://bugs.webkit.org/show_bug.cgi?id=98326
        <rdar://problem/12426658>

        Reviewed by Simon Fraser.

        Change updateSnapshot() to use a PassRefPtr<Image> instead of Image*. WebKit2 ultimately
        hands the image off to RenderSnapshottedPlugin. A CachedImage instance then manages the
        lifetime of the Image.

        * html/HTMLPlugInElement.h:
        (WebCore::HTMLPlugInElement::updateSnapshot):
        * html/HTMLPlugInImageElement.cpp:
        (WebCore::HTMLPlugInImageElement::updateSnapshot):
        * html/HTMLPlugInImageElement.h:
        (HTMLPlugInImageElement):
        * rendering/RenderSnapshottedPlugIn.cpp:
        (WebCore::RenderSnapshottedPlugIn::updateSnapshot): Updated to use the PassRefPtr<Image>
        pointer.
        * rendering/RenderSnapshottedPlugIn.h:
        (RenderSnapshottedPlugIn):

2012-10-09  Adam Barth  <abarth@webkit.org>

        Unreviewed. Move this file to where the build systems think it should
        be. See https://bugs.webkit.org/show_bug.cgi?id=94755

        * platform/graphics/CustomFilterConstants.h: Removed.
        * platform/graphics/filters/CustomFilterConstants.h: Copied from Source/WebCore/platform/graphics/CustomFilterConstants.h.

2012-10-09  Tony Chang  <tony@chromium.org>

        Use computeLogical* methods instead of updateLogical* methods in RenderImage
        https://bugs.webkit.org/show_bug.cgi?id=98802

        Reviewed by Eric Seidel.

        We were storing the old values of width/height, calling updateLogical{Width,Height}, then restoring
        the old values.  Instead, use the computeLogical{Width,Height} methods so we don't have to overwrite
        the current values.

        No new tests, this is just a refactoring.

        * rendering/RenderImage.cpp:
        (WebCore::RenderImage::imageDimensionsChanged):

2012-10-09  Enrica Casucci  <enrica@apple.com>

        [chromium] fast/text/international/text-spliced-font.html and fast/writing-mode/Kusa-Makura-
        background-canvas.html failing on the Mac after r130443
        https://bugs.webkit.org/show_bug.cgi?id=98545

        Reviewed by Tony Chang.

        Adding back the ! removed by mistake before submitting r130779. 

        * platform/graphics/FontFastPath.cpp:
        (WebCore::Font::glyphDataAndPageForCharacter):

2012-10-09  Artem Simonov  <asimonov@rim.com>

        [BlackBerry] EGL Context deleted prematurely in GraphicsContext3D destructor
        https://bugs.webkit.org/show_bug.cgi?id=98796

        Reviewed by George Staikos.

        Reordered destruction of GraphicsContext3D so that the compositing layer is
        destroyed first.

        * platform/graphics/blackberry/GraphicsContext3DBlackBerry.cpp:
        (WebCore::GraphicsContext3D::~GraphicsContext3D):

2012-10-09  Ben Wagner  <bungeman@chromium.org>

        Disable hinting when webkit-font-smoothing:antialiased is used on Mac.
        https://bugs.webkit.org/show_bug.cgi?id=98061

        Reviewed by Stephen White.

        Normal anti-aliased text matches subpixel anti-aliased text.
        However, text marked with webkit-font-smoothing:antialiased should be drawn without hinting to match Safari.
        See crbug.com/152304 . 

        Test is fast/css/font-smoothing.html, but DRT runs with font smoothing disabled, so no change visible. 

        * platform/graphics/skia/FontSkia.cpp:
        (WebCore::setupPaint):
        Set kNo_Hinting when webkit-font-smoothing is antialiased.

2012-10-09  Max Vujovic  <mvujovic@adobe.com>

        [CSS Shaders] Create constants for vertex attribute sizes and offsets
        https://bugs.webkit.org/show_bug.cgi?id=94755

        Reviewed by Dean Jackson.

        Factor out the vertex attribute size and offset constants into a new file,
        CustomFilterConstants.h. Replace literals in CustomFilterMeshGenerator with the constants.

        I could have added the constants to CustomFilterMeshGenerator.h, but this would make
        FECustomFilter depend on CustomFilterMeshGenerator.

        I also could have added the constants to CustomFilterMesh.h, but this would make
        CustomFilterMeshGenerator depend on CustomFilterMesh.

        No new tests. No change in behavior.

        * GNUmakefile.list.am:
        * Target.pri:
        * WebCore.gypi:
        * WebCore.vcproj/WebCore.vcproj:
        * WebCore.xcodeproj/project.pbxproj:
        * platform/graphics/CustomFilterConstants.h: Added.
        (WebCore):
        * platform/graphics/filters/CustomFilterMeshGenerator.h:
        (WebCore::CustomFilterMeshGenerator::floatsPerVertex):
            Use the new constants instead of literal values.
        * platform/graphics/filters/FECustomFilter.cpp:
        (WebCore::FECustomFilter::bindProgramAndBuffers):
            Pull the constant definitions out of here.

2012-10-09  Michael Saboff  <msaboff@apple.com>

        MarkupAccumulator should optimally handle 8 bit Strings
        https://bugs.webkit.org/show_bug.cgi?id=98224

        Reviewed by Ryosuke Niwa.

        Updated appendCharactersReplacingEntities to take a string, offset and length and process 8 or 16 bit
        data as appropriate.  Also made it a member function of MarkupAccumulator.

        No new tests, behavior covered by existing tests.

        * editing/MarkupAccumulator.cpp:
        (WebCore::MarkupAccumulator::appendCharactersReplacingEntities):
        (WebCore::MarkupAccumulator::appendAttributeValue):
        (WebCore::MarkupAccumulator::appendNodeValue):
        * editing/MarkupAccumulator.h:
        (MarkupAccumulator):
        * editing/markup.cpp:
        (WebCore::StyledMarkupAccumulator::appendText):
        (WebCore::urlToMarkup):

2012-10-09  Joshua Bell  <jsbell@chromium.org>

        IndexedDB: Overflowing key generator should throw ConstraintError
        https://bugs.webkit.org/show_bug.cgi?id=98807

        Reviewed by Tony Chang.

        After the WebKit implementation landed throwing DataError, public-webapps
        consensus was that the exception thrown should be ConstraintError. Trivial
        change, and we pass one more W3C test submission.

        Test: storage/indexeddb/key-generator.html

        * Modules/indexeddb/IDBObjectStoreBackendImpl.cpp:
        (WebCore::IDBObjectStoreBackendImpl::putInternal):

2012-10-08  Martin Robinson  <mrobinson@igalia.com>

        Fix the order of the statements in my previous build fix.

        Reviewed by Gustavo Noronha Silva.

        My previous build build fix for ResourceHandleSoup ordered the assignment
        of the local ResourceHandleInternal incorrectly. Instead of being before
        both assertions, it should be interspersed among them.

        * platform/network/soup/ResourceHandleSoup.cpp:
        (WebCore::createSoupMessageForHandleAndRequest):

2012-10-09  Beth Dakin  <bdakin@apple.com>

        https://bugs.webkit.org/show_bug.cgi?id=98457
        ScrollingStateNodes should be referenced via IDs on 
        RenderLayerBacking

        Reviewed by Simon Fraser.

        This patch associates all ScrollingStateNodes with a 
        RenderLayerBacking via a HashMap from RenderLayerBackings to 
        ScrollingStateNodes on ScrollingCoordinator. Prior to this patch, the 
        root ScrollingStateNode was created immediately upon creation of the 
        ScrollingCoordinator, and it was constantly re-used for every main 
        FrameView. This doesn't work in the new model since that doesn't 
        allow that ScrollingStateNode to have a definite association with a 
        RenderLayerBacking. So this patch does also introduce some lifetime 
        differences with the ScrollingStateNodes.

        If a page is going into the page cache, we should clear the state 
        tree. When the page is in the cache, we won't have access to the 
        RenderLayerBacking, and we don't want to be doing anything with the 
        ScrollingStateNodes anyway.
        * dom/Document.cpp:
        (WebCore::Document::setInPageCache):

        When a page is restored from the page cache, call 
        frameViewRootLayerDidChange() to re-create the state tree.
        * loader/HistoryController.cpp:
        (WebCore::HistoryController::restoreScrollPositionAndViewState):

        This new FrameView function will return the scrollLayerID for a given FrameView.
        * page/FrameView.cpp:
        (WebCore::FrameView::scrollLayerID):
        (WebCore):
        * page/FrameView.h:
        (FrameView):

        There is a lot of unfortunate fiddling with the terrible 
        if-defs in ScrollingCoordinator. I added a FIXME to the header
        noting how we can avoid this in the future.
        * page/scrolling/ScrollingCoordinator.cpp:

        All of this code used to refer to the rootStateNode directly. 
        Instead, now it looks up the proper ScrollingStateNode for the given 
        FrameView in the HashMap.
        (WebCore::ScrollingCoordinator::frameViewLayoutUpdated):
        (WebCore::ScrollingCoordinator::frameViewWheelEventHandlerCountChanged):
        (WebCore::ScrollingCoordinator::frameViewRootLayerDidChange):
        (WebCore::ScrollingCoordinator::requestScrollPositionUpdate):
        (WebCore::ScrollingCoordinator::updateMainFrameScrollLayerPosition):
        (WebCore::ScrollingCoordinator::recomputeWheelEventHandlerCountForFrameView):
        (WebCore::ScrollingCoordinator::setScrollLayerForNode):
        (WebCore::ScrollingCoordinator::setNonFastScrollableRegionForNode):
        (WebCore::ScrollingCoordinator::setScrollParametersForNode):
        (WebCore::ScrollingCoordinator::setWheelEventHandlerCountForNode):

        Returns the existing ScrollingStateNode for a given FrameView by 
        looking it up in the HashMap.
        (WebCore::ScrollingCoordinator::stateNodeForFrameView):

        This is called when a RenderLayerBacking is destroyed. At that time, 
        its associated ScrollingStateNode is destroyed.
        (WebCore::ScrollingCoordinator::detachFromStateTree):

        clearStateTree() clears the HashMap and destroys all of the nodes in 
        the current state tree.
        (WebCore::ScrollingCoordinator::clearStateTree):

        Creates a new root state node for the given FrameView.
        (WebCore::ScrollingCoordinator::ensureRootStateNodeForFrameView):

        Some new functions for the new node stuff.
        * page/scrolling/ScrollingCoordinator.h:
        * page/scrolling/ScrollingCoordinatorNone.cpp:
        (WebCore::ScrollingCoordinator::setShouldUpdateScrollLayerPositionOnMainThread):
        (WebCore::ScrollingCoordinator::supportsFixedPositionLayers):
        (WebCore::ScrollingCoordinator::setLayerIsContainerForFixedPositionLayers):
        (WebCore::ScrollingCoordinator::setLayerIsFixedToContainerLayer):
        (WebCore::ScrollingCoordinator::scrollableAreaScrollLayerDidChange):
        (WebCore::ScrollingCoordinator::detachFromStateTree):
        (WebCore::ScrollingCoordinator::clearStateTree):
        (WebCore::ScrollingCoordinator::ensureRootStateNodeForFrameView):
        (WebCore::setScrollParameters):
        (WebCore::setWheelEventHandlerCount):

        New remove functions are used when the sate tree is cleared and when 
        a RenderLayerBacking is destroyed.
        * page/scrolling/ScrollingStateNode.cpp:
        (WebCore::ScrollingStateNode::removeChild):
        (WebCore):
        * page/scrolling/ScrollingStateNode.h:
        (WebCore::ScrollingStateNode::isScrollingStateScrollingNode):
        (ScrollingStateNode):
        (WebCore::ScrollingStateNode::parent):

        New convenience function for casting to ScrollingStateScrollingNodes.
        * page/scrolling/ScrollingStateScrollingNode.h:
        (WebCore::toScrollingStateScrollingNode):
        (WebCore):

        No longer automatically create a root node upon creation of the 
        ScrollingStateTree. We now want to wait to create the root node until 
        we have a RenderLayerBacking to associate it with.
        * page/scrolling/ScrollingStateTree.cpp:
        (WebCore::ScrollingStateTree::ScrollingStateTree):
        (WebCore::ScrollingStateTree::removeNode):
        (WebCore):
        * page/scrolling/ScrollingStateTree.h:
        (WebCore::ScrollingStateTree::setRootStateNode):
        (ScrollingStateTree):

        RenderLayerBacking has a new data member called m_scrollLayerID. If 
        this RenderLayerBacking is represented in the scrolling tree, then 
        the ID with be unique and non-zero. 
        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::RenderLayerBacking):
        (WebCore::RenderLayerBacking::~RenderLayerBacking):
        (WebCore::generateScrollLayerID):
        (WebCore):
        (WebCore::RenderLayerBacking::attachToScrollingCoordinator):
        (WebCore::RenderLayerBacking::detachFromScrollingCoordinator):
        * rendering/RenderLayerBacking.h:
        (RenderLayerBacking):
        (WebCore::RenderLayerBacking::scrollLayerID):

        Move the call to ScrollingCooridinator::frameViewRootLayerDidChange() 
        from RenderLayerCompositor::attachRootLayer() to 
        RenderLayerCompositor:: updateBacking(). The problem with the old call 
        site is that there is no backing at that time, so we are trying to set 
        state on the root scrolling state node before we have enough 
        information to create that node and add it to the HashMap.
        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::updateBacking):
        (WebCore::RenderLayerCompositor::attachRootLayer):

2012-10-09  Florin Malita  <fmalita@chromium.org>

        SVGResources should use HashSet<AtomicString> instead of HashSet<AtomicStringImpl*>
        https://bugs.webkit.org/show_bug.cgi?id=98683

        Reviewed by Darin Adler.

        Eric's notes:

        SVGResources should use HashSet<AtomicString> instead of HashSet<AtomicStringImpl*>
        They do basically the same thing, and the former is much more common (and less code). It's
        also safe, on the off-chance that we're using AtomicStrings which might otherwise go away.

        No new tests, refactoring. 

        * rendering/svg/SVGResources.cpp:
        (WebCore::clipperFilterMaskerTags):
        (WebCore::markerTags):
        (WebCore::fillAndStrokeTags):
        (WebCore::chainableResourceTags):
        (WebCore::SVGResources::buildCachedResources):

2012-10-09  Enrica Casucci  <enrica@apple.com>

        [chromium] fast/text/international/text-spliced-font.html and fast/writing-mode/Kusa-Makura-background-canvas.html
        failing on the Mac after r130443
        https://bugs.webkit.org/show_bug.cgi?id=98545

        Reviewed by Tony Chang.

        Fixes a regression introduced with r130443.
        No new tests added since we already have tests covering this.
        Updated TestExpectations for chromium and mac.

        * platform/graphics/FontFastPath.cpp:
        (WebCore::Font::glyphDataAndPageForCharacter): Text orientation should not be
        taken into account if the character is an ideograph or a symbol.

2012-10-09  Philip Rogers  <pdr@google.com>

        Prevent animation when CSS attributeType is invalid.
        https://bugs.webkit.org/show_bug.cgi?id=94569

        Reviewed by Dirk Schulze.

        This patch changes hasValidAttributeType() to return false when
        we have attributeType=CSS with a non-CSS attribute name.

        Previously we would animate non-CSS attributes when attributeType was
        CSS which resulted in crashes. To track this case, this patch catches
        changes to targetElement, attributeName, and attributeType and checks
        if an invalid combination is present. If invalid, hasInvalidCSSAttributeType()
        will return true causing hasValidAttributeType() to return false and prevent
        the animation from running.

        Tests: svg/animations/animate-css-xml-attributeType.html
               svg/animations/invalid-css-attribute-crash-expected.svg
               svg/animations/invalid-css-attribute-crash.svg

        * svg/SVGAnimateElement.cpp:
        (WebCore::SVGAnimateElement::hasValidAttributeType):
        (WebCore::SVGAnimateElement::targetElementWillChange):
        * svg/SVGAnimationElement.cpp:
        (WebCore::SVGAnimationElement::SVGAnimationElement):
        (WebCore::SVGAnimationElement::isSupportedAttribute):

            This now supports the attributeType attribute which is stored in m_attributeType.

        (WebCore::SVGAnimationElement::parseAttribute):
        (WebCore::SVGAnimationElement::setAttributeType):

            Changes to attributeType, attributeName, and targetElement need to be tracked
            to determine when an invalid combination happens.

        (WebCore::SVGAnimationElement::targetElementWillChange):
        (WebCore):
        (WebCore::SVGAnimationElement::setAttributeName):
        (WebCore::SVGAnimationElement::checkInvalidCSSAttributeType):
        * svg/SVGAnimationElement.h:
        (WebCore::SVGAnimationElement::attributeType):
        (SVGAnimationElement):
        (WebCore::SVGAnimationElement::hasInvalidCSSAttributeType):
        * svg/animation/SVGSMILElement.cpp:
        (WebCore::SVGSMILElement::targetElement):
        * svg/animation/SVGSMILElement.h:
        (SVGSMILElement):

2012-10-09  Pravin D  <pravind.2k4@gmail.com>

        max-width property is does not overriding the width properties for css tables(display:table)
        https://bugs.webkit.org/show_bug.cgi?id=98455

        Reviewed by Tony Chang.

        The max-width property determines the maximum computed width an element can have. In case of css tables(display:table),
        the computed was not being limited by the max-width property. The current patch fixes this issue.

        Test: fast/table/css-table-max-width.html

        * rendering/RenderTable.cpp:
        (WebCore::RenderTable::updateLogicalWidth):
         Logic to compute the logical width of an element such that it does not exceed the max-width value.
         Also when both min-width and max-width are present, the following contraint is used to compute the logical width:
           1) min-width < Computed LogicalWidth < max-width, when min-width < max-width.
           2) Computed LogicalWidth = min-width, when min-width > max-width.

2012-10-09  Harald Alvestrand  <hta@google.com>

        Change PeerConnection getStats function to single value local / remote
        elements in RTCStatsReport.

        https://bugs.webkit.org/show_bug.cgi?id=98753

        Reviewed by Adam Barth.

        IDL of RTCStatsReport has been changed to make local/remote
        single valued RTCStatsElement attributes.
        The RTCStatsReport argument to index the list of RTCStatsElement
        in the local and remote functions has been removed.

        Tested by modifications to RTCPeerConnection-stats.html

        * Modules/mediastream/RTCStatsReport.cpp:
        (WebCore::RTCStatsReport::addElement):
        (WebCore::RTCStatsReport::addStatistic):
        * Modules/mediastream/RTCStatsReport.h:
        (WebCore::RTCStatsReport::local):
        (WebCore::RTCStatsReport::remote):
        (RTCStatsReport):
        * Modules/mediastream/RTCStatsReport.idl:
        * Modules/mediastream/RTCStatsResponse.cpp:
        (WebCore::RTCStatsResponse::addElement):
        (WebCore::RTCStatsResponse::addStatistic):
        * Modules/mediastream/RTCStatsResponse.h:
        (RTCStatsResponse):
        * platform/chromium/support/WebRTCStatsResponse.cpp:
        (WebKit::WebRTCStatsResponse::addElement):
        (WebKit::WebRTCStatsResponse::addStatistic):
        * platform/mediastream/RTCStatsResponseBase.h:
        (RTCStatsResponseBase):

2012-10-09  Antonio Gomes  <agomes@rim.com>

        Get rid of FIXED_POSITION_CREATES_STACKING_CONTEXT in favor of Settings::fixedPositionCreatesStackingContext()
        https://bugs.webkit.org/show_bug.cgi?id=98756

        Reviewed by Rob Buis.

        No behavior change so no new tests.

        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::collectMatchingRulesForList):

2012-10-09  Simon Hausmann  <simon.hausmann@digia.com>

        [Qt] Fix build with QtMultimedia

        Reviewed by Tor Arne Vestbø.

        This is an initial rudimentary port to of the QtMultimedia back-end,
        adapted to slight API changes and (more importantly) to the
        implementation of QAbstractVideoSurface instead of using
        QGraphicsVideoItem (which is in QtMultimediaWidgets).

        * WebCore.pri:
        * platform/graphics/qt/MediaPlayerPrivateQt.cpp:
        (WebCore::MediaPlayerPrivateQt::supportsType):
        (WebCore::MediaPlayerPrivateQt::MediaPlayerPrivateQt):
        (WebCore::MediaPlayerPrivateQt::~MediaPlayerPrivateQt):
        (WebCore::MediaPlayerPrivateQt::didLoadingProgress):
        (WebCore::MediaPlayerPrivateQt::totalBytes):
        (WebCore::MediaPlayerPrivateQt::setVisible):
        (WebCore::MediaPlayerPrivateQt::surfaceFormatChanged):
        (WebCore::MediaPlayerPrivateQt::setSize):
        (WebCore::MediaPlayerPrivateQt::removeVideoItem):
        (WebCore::MediaPlayerPrivateQt::restoreVideoItem):
        (WebCore):
        (WebCore::MediaPlayerPrivateQt::start):
        (WebCore::MediaPlayerPrivateQt::supportedPixelFormats):
        (WebCore::MediaPlayerPrivateQt::present):
        (WebCore::MediaPlayerPrivateQt::paint):
        (WebCore::MediaPlayerPrivateQt::paintCurrentFrameInContext):
        (WebCore::MediaPlayerPrivateQt::paintToTextureMapper):
        * platform/graphics/qt/MediaPlayerPrivateQt.h:
        (MediaPlayerPrivateQt):

2012-10-09  Garrett Casto  <gcasto@chromium.org>

        Allow users to specify a different hover image for TextFieldDecorationElement
        https://bugs.webkit.org/show_bug.cgi?id=93662

        Reviewed by Kent Tamura.

        * html/shadow/TextFieldDecorationElement.cpp:
        (WebCore::TextFieldDecorationElement::TextFieldDecorationElement):
        (WebCore::TextFieldDecorationElement::updateImage):
        (WebCore::TextFieldDecorationElement::defaultEventHandler): Handles mouseover and mouseout events.
        (WebCore::TextFieldDecorationElement::willRespondToMouseMoveEvents): Now returns true if the element is not disabled.
        (WebCore):
        * html/shadow/TextFieldDecorationElement.h:
        (TextFieldDecorator):
        (TextFieldDecorationElement):

2012-10-09  Allan Sandfeld Jensen  <allan.jensen@digia.com>

        [Qt] Uploading images to Google+ using QtWebKit does not work.
        https://bugs.webkit.org/show_bug.cgi?id=72329

        Reviewed by Jocelyn Turcotte.

        Implement handling of Blob FormData, including its extensions to the File FormData.

        * platform/network/qt/QNetworkReplyHandler.cpp:
        (WebCore::FormDataIODevice::FormDataIODevice):
        (WebCore::appendBlobResolved):
        (WebCore::FormDataIODevice::prepareFormElements):
        (WebCore::FormDataIODevice::computeSize):
        (WebCore::FormDataIODevice::moveToNextElement):
        (WebCore::FormDataIODevice::prepareCurrentElement):
        (WebCore::FormDataIODevice::openFileForCurrentElement):
        (WebCore::FormDataIODevice::readData):
        (WebCore::QNetworkReplyHandler::sendNetworkRequest):
        * platform/network/qt/QNetworkReplyHandler.h:
        (FormDataIODevice):

2012-10-09  Arpita Bahuguna  <arpitabahuguna@gmail.com>

        Text decorations specified on the containing block are not properly applied when ::first-line is present.
        https://bugs.webkit.org/show_bug.cgi?id=93829

        Reviewed by Abhishek Arya.

        If a container's style and its pseudo :first-line style have unique
        text-decorations specified for them, only the :first-line text-decoarations
        were being applied.

        The uploaded patch intends to first compute the text decoration colors
        for the containing box, followed by that of the first-line (if specified).

        This thus avoids the condition wherein our containing box's text-decorations
        were not getting applied at all since initially we were only computing
        for the first-line style.

        Test: fast/css/text-decorations-on-first-line-and-containing-block.html

        * rendering/InlineTextBox.cpp:
        (WebCore::InlineTextBox::paintDecoration):
        getTextDecorationColors() is first called for computing the containing box's
        text-decoration values and then for first-line style's text-decorations,
        if specified.

2012-10-09  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r130746.
        http://trac.webkit.org/changeset/130746
        https://bugs.webkit.org/show_bug.cgi?id=98749

        It made 45 tests crash on Qt (Requested by Ossy on #webkit).

        * platform/network/qt/QNetworkReplyHandler.cpp:
        (WebCore::FormDataIODevice::FormDataIODevice):
        (WebCore::FormDataIODevice::computeSize):
        (WebCore::FormDataIODevice::moveToNextElement):
        (WebCore::FormDataIODevice::openFileForCurrentElement):
        (WebCore::FormDataIODevice::readData):
        (WebCore::QNetworkReplyHandler::getIODevice):
        (WebCore::QNetworkReplyHandler::sendNetworkRequest):
        * platform/network/qt/QNetworkReplyHandler.h:
        (QNetworkReplyHandler):
        (FormDataIODevice):

2012-10-09  Allan Sandfeld Jensen  <allan.jensen@digia.com>

        [Qt] Uploading images to Google+ using QtWebKit does not work.
        https://bugs.webkit.org/show_bug.cgi?id=72329

        Reviewed by Jocelyn Turcotte.

        Implement handling of Blob FormData, including its extensions to the File FormData.

        * platform/network/qt/QNetworkReplyHandler.cpp:
        (WebCore::FormDataIODevice::FormDataIODevice):
        (WebCore::FormDataIODevice::computeSize):
        (WebCore::FormDataIODevice::moveToNextElement):
        (WebCore::FormDataIODevice::prepareCurrentElement):
        (WebCore::FormDataIODevice::openFileForCurrentElement):
        (WebCore::FormDataIODevice::readData):
        (WebCore::QNetworkReplyHandler::getIODevice):
        (WebCore::QNetworkReplyHandler::handleBlobDataIfAny):
        (WebCore::QNetworkReplyHandler::sendNetworkRequest):
        * platform/network/qt/QNetworkReplyHandler.h:
        (QNetworkReplyHandler):
        (FormDataIODevice):

2012-10-09  Keishi Hattori  <keishi@webkit.org>

        Page popup should be smarter about its layout
        https://bugs.webkit.org/show_bug.cgi?id=98499

        Reviewed by Kent Tamura.

        This change fixes these two issues:
        1. Page popup should reposition itself so it won't get clipped by screen(Win/Linux) or rootview(Mac) bounds.
        2. Page popup should resize itself when it doesn't fit.

        Test: platform/chromium/fast/forms/page-popup/page-popup-adjust-rect.html

        * Resources/pagepopups/calendarPicker.js:
        (initialize): We need to set global.params at the beginning because we need it for resizeWindow().
        * Resources/pagepopups/colorSuggestionPicker.js: Added global.params.
        (handleMessage):
        (initialize):
        (handleArgumentsTimeout):
        * Resources/pagepopups/pickerCommon.js:
        (Rect): Represents an axis aligned rectangle.
        (Rect.prototype.get maxX): Gets position of right edge.
        (Rect.prototype.get maxY): Gets position of bottom edge.
        (Rect.prototype.toString):
        (Rect.intersection): Returns the intersection of two rectangles.
        (resizeWindow): Resize window to a certain size. Don't allow shrinking.
        (adjustWindowRect): Calculates the best position and size for the popup.
        (_adjustWindowRectVertically):
        (_adjustWindowRectHorizontally):
        (setWindowRect): Sets the position and size of the popup to the given rect.
        * Resources/pagepopups/suggestionPicker.css:
        (.suggestion-list): Don't show horizontal scroll bar.
        * Resources/pagepopups/suggestionPicker.js:
        (SuggestionPicker.prototype._fixWindowSize): 
        * page/PagePopupClient.cpp:
        (WebCore::PagePopupClient::addProperty): For adding an int to JSON.
        (WebCore::PagePopupClient::addProperty): For adding an IntRect to JSON.
        (WebCore):
        * page/PagePopupClient.h:
        (PagePopupClient):

2012-10-09  Hajime Morrita  <morrita@google.com>

        [Refactoring] Scoped Style related code should have its own class.
        https://bugs.webkit.org/show_bug.cgi?id=98244

        Reviewed by Dimitri Glazkov.

        This change extracts StyleScopeResolver from StyleResolver to clarify
        the responsibility of the style scope handling. Now we can easily see
        where the style scoping needs to be involed.

        Coming Shadow DOM related change like @host rules will fit within this class.

        No new tests, refactoring.

        * CMakeLists.txt:
        * GNUmakefile.list.am:
        * Target.pri:
        * WebCore.gypi:
        * WebCore.xcodeproj/project.pbxproj:
        * css/CSSAllInOne.cpp:
        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::StyleResolver):
        (WebCore::StyleResolver::collectFeatures):
        (WebCore::StyleResolver::appendAuthorStylesheets):
        (WebCore::StyleResolver::pushParentElement):
        (WebCore::StyleResolver::popParentElement):
        (WebCore::StyleResolver::pushParentShadowRoot):
        (WebCore::StyleResolver::popParentShadowRoot):
        (WebCore::StyleResolver::matchScopedAuthorRules):
        (WebCore::StyleResolver::collectMatchingRulesForList):
        (WebCore::StyleResolver::reportMemoryUsage):
        * css/StyleResolver.h:
        (StyleResolver):
        * css/StyleScopeResolver.cpp: Added.
        (WebCore):
        (WebCore::StyleScopeResolver::StyleScopeResolver):
        (WebCore::StyleScopeResolver::~StyleScopeResolver):
        (WebCore::StyleScopeResolver::scopeFor):
        (WebCore::StyleScopeResolver::ruleSetFor):
        (WebCore::StyleScopeResolver::ensureRuleSetFor):
        (WebCore::StyleScopeResolver::setupStack):
        (WebCore::StyleScopeResolver::push):
        (WebCore::StyleScopeResolver::pop):
        (WebCore::StyleScopeResolver::collectFeaturesTo):
        (WebCore::StyleScopeResolver::reportMemoryUsage):
        * css/StyleScopeResolver.h: Added.
        (WebCore):
        (StyleScopeResolver):
        (WebCore::StyleScopeResolver::StackFrame::StackFrame):
        (StackFrame):
        (WebCore::StyleScopeResolver::hasScopedStyles):
        (WebCore::StyleScopeResolver::stackSize):
        (WebCore::StyleScopeResolver::stackFrameAt):
        (WebCore::StyleScopeResolver::matchesStyleBounds):
        (WebCore::StyleScopeResolver::stackIsConsistent):
        (WebCore::StyleScopeResolver::ensureStackConsistency):
        (WebCore::StyleScopeResolver::scopeFor):
        (WebCore::StyleScopeResolver::ensureRuleSetFor):

2012-10-08  Simon Hausmann  <simon.hausmann@digia.com>

        [Qt] Make RenderThemeQStyle/ScrollbarThemeQStyle compile without QStyle/QtWidgets
        https://bugs.webkit.org/show_bug.cgi?id=98268

        Reviewed by Tor Arne Vestbø.

        Extracted QStyle/QWidget related code into a QWebStyle class that implements the QStyleFacade interface.

        QStyleFacade is a pure interface that lives in WebCore/platform/qt
        (next to RenderThemeQStyle and ScrollbarThemeQStyle) and provides a
        minimal interface of what we need to draw with QStyle as well as basic
        hit testing and metric retrieval. It also provides a
        QStyleFacadeOption class that aggregates common meta-data for
        rendering primitives, such as direction, rectangle, state (sunken,
        enabled, etc.) or palette. It also provides some more slider/scrollbar
        specific fields in a slider sub-structure.

        RenderThemeQStyle/ScrollbarThemeQStyle used to instantiate specific QStyleOption sub-classes and populate
        them with state information from render objects, before calling straight to QStyle. Most of the common code
        was encapsulated in StylePainterQStyle.

        The new RenderThemeQStyle/ScrolllbarThemeQStyle uses common code in
        StylePainterQStyle to populate state into QStyleFacadeOption before
        calling into QStyleFacade.

        The style facade is then implemented by QStyleFacadeImp, which extracts
        meta-data from QStyleFacadeOption arguments, populates style
        primitive specific QStyleOption objects and then calls on QStyle.

        RenderThemeQStyle/ScrollbarThemeQStyle can only use interface methods
        from QStyleFacade. QStyleFacadeImp on the other hand will live in the
        separate QtWebKitWidgets library in the future and therefore cannot use
        any WebCore types.

        * Target.pri:
        * platform/qt/QStyleFacade.cpp: Added.
        (WebCore):
        (WebCore::QStyleFacade::styleForPage):
        * platform/qt/QStyleFacade.h: Added.
        (WebCore):
        (QStyleFacade):
        (WebCore::QStyleFacade::~QStyleFacade):
        (WebCore::QStyleFacadeOption::QStyleFacadeOption):
        (QStyleFacadeOption):
        * platform/qt/RenderThemeQStyle.cpp: Renamed from Source/WebKit/qt/WebCoreSupport/RenderThemeQStyle.cpp.
        (WebCore):
        (WebCore::RenderThemeQStyle::getStylePainter):
        (WebCore::StylePainterQStyle::StylePainterQStyle):
        (WebCore::StylePainterQStyle::init):
        (WebCore::RenderThemeQStyle::create):
        (WebCore::RenderThemeQStyle::setStyleFactoryFunction):
        (WebCore::RenderThemeQStyle::styleFactory):
        (WebCore::RenderThemeQStyle::RenderThemeQStyle):
        (WebCore::RenderThemeQStyle::~RenderThemeQStyle):
        (WebCore::RenderThemeQStyle::setPaletteFromPageClientIfExists):
        (WebCore::RenderThemeQStyle::inflateButtonRect):
        (WebCore::RenderThemeQStyle::computeSizeBasedOnStyle):
        (WebCore::RenderThemeQStyle::adjustButtonStyle):
        (WebCore::RenderThemeQStyle::setButtonPadding):
        (WebCore::RenderThemeQStyle::paintButton):
        (WebCore::RenderThemeQStyle::paintTextField):
        (WebCore::RenderThemeQStyle::adjustTextAreaStyle):
        (WebCore::RenderThemeQStyle::paintTextArea):
        (WebCore::RenderThemeQStyle::setPopupPadding):
        (WebCore::RenderThemeQStyle::colorPalette):
        (WebCore::RenderThemeQStyle::paintMenuList):
        (WebCore::RenderThemeQStyle::adjustMenuListButtonStyle):
        (WebCore::RenderThemeQStyle::paintMenuListButton):
        (WebCore::RenderThemeQStyle::animationDurationForProgressBar):
        (WebCore::RenderThemeQStyle::paintProgressBar):
        (WebCore::RenderThemeQStyle::paintSliderTrack):
        (WebCore::RenderThemeQStyle::adjustSliderTrackStyle):
        (WebCore::RenderThemeQStyle::paintSliderThumb):
        (WebCore::RenderThemeQStyle::adjustSliderThumbStyle):
        (WebCore::RenderThemeQStyle::paintSearchField):
        (WebCore::RenderThemeQStyle::adjustSearchFieldDecorationStyle):
        (WebCore::RenderThemeQStyle::paintSearchFieldDecoration):
        (WebCore::RenderThemeQStyle::adjustSearchFieldResultsDecorationStyle):
        (WebCore::RenderThemeQStyle::paintSearchFieldResultsDecoration):
        (WebCore::RenderThemeQStyle::paintInnerSpinButton):
        (WebCore::RenderThemeQStyle::initializeCommonQStyleOptions):
        (WebCore::RenderThemeQStyle::adjustSliderThumbSize):
        * platform/qt/RenderThemeQStyle.h: Renamed from Source/WebKit/qt/WebCoreSupport/RenderThemeQStyle.h.
        (WebCore):
        (RenderThemeQStyle):
        (WebCore::RenderThemeQStyle::qStyle):
        (StylePainterQStyle):
        (WebCore::StylePainterQStyle::isValid):
        (WebCore::StylePainterQStyle::paintButton):
        (WebCore::StylePainterQStyle::paintTextField):
        (WebCore::StylePainterQStyle::paintComboBox):
        (WebCore::StylePainterQStyle::paintComboBoxArrow):
        (WebCore::StylePainterQStyle::paintSliderTrack):
        (WebCore::StylePainterQStyle::paintSliderThumb):
        (WebCore::StylePainterQStyle::paintInnerSpinButton):
        (WebCore::StylePainterQStyle::paintProgressBar):
        (WebCore::StylePainterQStyle::paintScrollCorner):
        (WebCore::StylePainterQStyle::paintScrollBar):
        * platform/qt/ScrollbarThemeQStyle.cpp: Renamed from Source/WebKit/qt/WebCoreSupport/ScrollbarThemeQStyle.cpp.
        (WebCore):
        (WebCore::ScrollbarThemeQStyle::ScrollbarThemeQStyle):
        (WebCore::ScrollbarThemeQStyle::~ScrollbarThemeQStyle):
        (WebCore::scPart):
        (WebCore::scrollbarPart):
        (WebCore::initSliderStyleOption):
        (WebCore::ScrollbarThemeQStyle::paint):
        (WebCore::ScrollbarThemeQStyle::hitTest):
        (WebCore::ScrollbarThemeQStyle::shouldCenterOnThumb):
        (WebCore::ScrollbarThemeQStyle::invalidatePart):
        (WebCore::ScrollbarThemeQStyle::scrollbarThickness):
        (WebCore::ScrollbarThemeQStyle::thumbPosition):
        (WebCore::ScrollbarThemeQStyle::thumbLength):
        (WebCore::ScrollbarThemeQStyle::trackPosition):
        (WebCore::ScrollbarThemeQStyle::trackLength):
        (WebCore::ScrollbarThemeQStyle::paintScrollCorner):
        * platform/qt/ScrollbarThemeQStyle.h: Renamed from Source/WebKit/qt/WebCoreSupport/ScrollbarThemeQStyle.h.
        (WebCore):
        (ScrollbarThemeQStyle):
        (WebCore::ScrollbarThemeQStyle::qStyle):

2012-10-08  Kiran Muppala  <cmuppala@apple.com>

        Throttle DOM timers on hidden pages.
        https://bugs.webkit.org/show_bug.cgi?id=98474

        Reviewed by Maciej Stachowiak.

        When the visibility of a page changes to "hidden", all it's DOM timers are
        updated to align their fire times on one second intervals.  This limits the
        number of CPU wakes due to a hidden pages to one per second.

        Test: fast/dom/timer-throttling-hidden-page.html

        * Configurations/FeatureDefines.xcconfig:
        * WebCore.exp.in:
        * dom/Document.cpp:
        (WebCore):
        (WebCore::Document::timerAlignmentInterval):
        Read Page::timerAlignmentInterval and pass it along to DOMTimer.

        * dom/Document.h:
        (Document):
        * dom/ScriptExecutionContext.cpp:
        (WebCore):
        (WebCore::ScriptExecutionContext::didChangeTimerAlignmentInterval):
        Scan through self DOM Timers and tell them to recompute their fire
        time based on the updated alignment interval.
        (WebCore::ScriptExecutionContext::timerAlignmentInterval):

        * dom/ScriptExecutionContext.h:
        (ScriptExecutionContext):
        * page/DOMTimer.cpp:
        (WebCore):
        (WebCore::DOMTimer::alignedFireTime):
        If the document's alignment interval is non zero, round up the fire
        time to the next multiple of alignment interval.

        * page/DOMTimer.h:
        (DOMTimer):
        (WebCore::DOMTimer::defaultTimerAlignmentInterval):
        (WebCore::DOMTimer::setDefaultTimerAlignmentInterval):
        * page/Page.cpp:
        (WebCore::Page::Page):
        (WebCore):
        (WebCore::Page::setTimerAlignmentInterval):
        (WebCore::Page::timerAlignmentInterval):
        (WebCore::Page::setVisibilityState):
        Getter and Setter for alignment interval.  Expose setVisibilityState
        if either PAGE_VISIBILITY_API is enabled or if HIDDEN_PAGE_DOM_TIMER_REDUCTION
        is enabled.

        * page/Page.h:
        (Page):
        * page/Settings.cpp:
        (WebCore):
        (WebCore::Settings::setDefaultDOMTimerAlignmentInterval):
        (WebCore::Settings::defaultDOMTimerAlignmentInterval):
        (WebCore::Settings::setDOMTimerAlignmentInterval):
        (WebCore::Settings::domTimerAlignmentInterval):
        * page/Settings.h:
        (Settings):
        * page/SuspendableTimer.cpp:
        (WebCore::SuspendableTimer::suspend):
        Save the time remaining to the original unaligned fire time, so that
        on resuming, the fire time will be correctly aligned using the latest
        alignment interval.

        * platform/ThreadTimers.cpp:
        (WebCore::ThreadTimers::sharedTimerFiredInternal):
        Clear m_unalignedNextFireTime along with m_nextFireTime to keep
        them always in sync.

        * platform/Timer.cpp:
        (WebCore::TimerBase::TimerBase):
        (WebCore::TimerBase::setNextFireTime):
        Save the requested fire time in m_unalignedNextFireTime and
        set m_nextFireTime to the aligned value.  The unalinged value
        is used to recompute fire time if alignment interval changes.
        (WebCore):
        (WebCore::TimerBase::didChangeAlignmentInterval):
        Recompute next fire time from m_unalignedNextFireTime.
        (WebCore::TimerBase::nextUnalignedFireInterval):
        Interval from current time to the original unaligned fire time.

        * platform/Timer.h:
        (TimerBase):
        (WebCore::TimerBase::alignedFireTime):

2012-10-08  Andreas Kling  <kling@webkit.org>

        1.18MB below RenderTableSection::setCachedCollapsedBorderValue() on Membuster3.
        <http://webkit.org/b/98670>
        <rdar://problem/12454276>

        Reviewed by Anders Carlsson.

        Refactor CollapsedBorderValue to only store the bits and pieces from the BorderValue
        that it actually needs. Packed the whole thing into 64 bits.

        Reduces memory consumption by 547kB on Membuster3.

        * rendering/RenderTableCell.cpp:

            Add compile-time size assertion for CollapsedBorderValue.

        * rendering/style/CollapsedBorderValue.h:
        (WebCore::CollapsedBorderValue::CollapsedBorderValue):
        (WebCore::CollapsedBorderValue::width):
        (WebCore::CollapsedBorderValue::style):
        (WebCore::CollapsedBorderValue::color):
        (WebCore::CollapsedBorderValue::isTransparent):
        (WebCore::CollapsedBorderValue::precedence):
        (WebCore::CollapsedBorderValue::isSameIgnoringColor):
        (CollapsedBorderValue):

            Apply shrinkwrap to CollapsedBorderValue. Removed specialized copy constructor since
            the class only has primitive members now.

2012-10-08  Yoshifumi Inoue  <yosin@chromium.org>

        HTMLSelectElement::typeAheadFind depends on implementation dependent behavior
        https://bugs.webkit.org/show_bug.cgi?id=98710

        Reviewed by Kent Tamura.

        This patch gets rid of C/C++ implementation dependent behavior from
        HTMLSelectElement::typeAheadFind() which does modulo operation with
        a negative operand.

        HTMLSelectElement::typeAheadFind() contains expression with modulo
        operator and dividend can be -1 when the "select" element without
        "option" element but "optgroup" element.

        Test: fast/forms/select/select-typeahead-crash.html

        * html/HTMLSelectElement.cpp:
        (WebCore::HTMLSelectElement::typeAheadFind): Changed to do modulo
        operation with both operands are non-negative.

2012-10-08  Kent Tamura  <tkent@chromium.org>

        Take account of overflowing values for width calculation of a year sub-field
        https://bugs.webkit.org/show_bug.cgi?id=98506

        Reviewed by Eric Seidel.

        When we decide the width of a year field of an input[type=date]
        with the multiple fields UI, we need to take account of the
        current value width because we allow to set overflowing values to
        the input[type=date].

        This change affects only platforms with INPUT_TYPE_DATE &&
        INPUT_MULTIPLE_FIELDS_UI.

        Test: fast/forms/date-multiple-fields/date-multiple-fields-change-layout-by-value.html

        * html/shadow/DateTimeNumericFieldElement.cpp:
        (WebCore::DateTimeNumericFieldElement::customStyleForRenderer):
        Take account of the current value width.

2012-10-08  Tony Chang  <tony@chromium.org>

        image not displayed in flexbox
        https://bugs.webkit.org/show_bug.cgi?id=98611

        Reviewed by Ojan Vafai.

        Flexbox will override the width of a child and when stretching, will override the height of the child.
        When this happens, when an image loads, it checks to see if it's width/height has
        changed, and if so, does a relayout.  The overridden width/height was preventing this
        relayout from happening.

        To fix, we clear all the override sizes when we're done laying out the flex children.

        Test: css3/flexbox/relayout-image-load.html

        * rendering/RenderFlexibleBox.cpp:
        (WebCore::RenderFlexibleBox::layoutBlock): Clear child override sizes.
        (WebCore::RenderFlexibleBox::clearChildOverrideSizes):
        (WebCore::RenderFlexibleBox::computeMainAxisPreferredSizes): No longer need to clear the override size
        here since it should have already been cleared.
        * rendering/RenderFlexibleBox.h:

2012-10-08  Andreas Kling  <kling@webkit.org>

        REGRESSION(r130643): editing/pasteboard/data-transfer-item is failing on chromium.
        <http://webkit.org/b/98686>

        Reviewed by Tony Chang.

        Change ChromiumDataObject::createFromPasteboard() to use a ListHashSet instead of a HashSet so that
        item order is preserved.

        * platform/chromium/ChromiumDataObject.cpp:
        (WebCore::ChromiumDataObject::createFromPasteboard):

2012-10-08  Eric Seidel  <eric@webkit.org>

        Inline logicalHeightForRowSizing to shave another 2-3% off robohornet's resizecol.html
        https://bugs.webkit.org/show_bug.cgi?id=98703

        Reviewed by Emil A Eklund.

        This is very small potatoes.  There are much bigger wins for table layout yet, but
        this was an easy win.

        This function should probably be converted to use int's only, as table cells are pixel-sized
        according to our subpixel-experts.

        Also, I suspect there should be ways to early return with less-math in the common cases, but
        I've saved such for a later patch.

        Note that I changed from using paddingBefore/paddingAfter (which include the instrinsic padding)
        to calling computedCSSPaddingBefore/computedCSSPaddingAfter directly as well.

        This single function is about 11% of total time for robohornet's resizecol.

        * rendering/RenderTableCell.cpp:
        * rendering/RenderTableCell.h:
        (WebCore::RenderTableCell::logicalHeightForRowSizing):

2012-10-08  Alec Flett  <alecflett@chromium.org>

        IndexedDB: remove autogenerated objectStore/index id code
        https://bugs.webkit.org/show_bug.cgi?id=98085

        Reviewed by Tony Chang.

        Remove support for backend-generated objectstore and index
        ids. The frontend objects now manage that state during
        versionchange transactions. The IDBDatabaseBackendInterface and
        IDBObjectStoreBackendInterface methods will go away when
        https://bugs.webkit.org/show_bug.cgi?id=98682 lands.

        No new tests as this is part of a refactoring, existing indexeddb
        tests cover correctness.

        * Modules/indexeddb/IDBBackingStore.h:
        (IDBBackingStore):
        * Modules/indexeddb/IDBDatabase.cpp:
        (WebCore::IDBDatabase::createObjectStore):
        * Modules/indexeddb/IDBDatabaseBackendImpl.cpp:
        (WebCore::IDBDatabaseBackendImpl::createObjectStore):
        (WebCore::IDBDatabaseBackendImpl::createObjectStoreInternal):
        (WebCore::IDBDatabaseBackendImpl::loadObjectStores):
        * Modules/indexeddb/IDBDatabaseBackendInterface.h:
        (IDBDatabaseBackendInterface):
        * Modules/indexeddb/IDBLevelDBBackingStore.cpp:
        (WebCore::IDBLevelDBBackingStore::createObjectStore):
        (WebCore::setMaxIndexId):
        (WebCore::IDBLevelDBBackingStore::createIndex):
        * Modules/indexeddb/IDBLevelDBBackingStore.h:
        (IDBLevelDBBackingStore):
        * Modules/indexeddb/IDBObjectStore.cpp:
        (WebCore::IDBObjectStore::createIndex):
        * Modules/indexeddb/IDBObjectStoreBackendImpl.cpp:
        (WebCore::IDBObjectStoreBackendImpl::IDBObjectStoreBackendImpl):
        (WebCore::IDBObjectStoreBackendImpl::createIndex):
        (WebCore::IDBObjectStoreBackendImpl::createIndexInternal):
        * Modules/indexeddb/IDBObjectStoreBackendInterface.h:

2012-10-08  Jaehun Lim  <ljaehun.lim@samsung.com>

        [CAIRO] Adjust the source rect size when IMAGE_DECODER_DOWN_SAMPLING is enabled
        https://bugs.webkit.org/show_bug.cgi?id=98630

        Reviewed by Martin Robinson.

        IMAGE_DECODER_DOWN_SAMPLING scales down the size of the big image.
        CAIRO needs to adjust the source size to the scaled value.

        No new tests.

        * platform/graphics/cairo/BitmapImageCairo.cpp:
        (WebCore::BitmapImage::draw):

2012-10-08  Adam Barth  <abarth@webkit.org>

        Remove unused features of BlobBuilder
        https://bugs.webkit.org/show_bug.cgi?id=98331

        Reviewed by Eric Seidel.

        Now that we don't expose BlobBuilder as a web platform API, we can
        strip down the class to handle only those cases that are needed by the
        Blob constructor.

        I've also renamed the class from WebKitBlobBuilder to BlobBuilder and
        made it stack allocated rather than RefCounted. A future patch will
        actually move the files around. (I didn't want to mix moving code
        around with modifying the code.)

        * bindings/js/JSBlobCustom.cpp:
        (WebCore::JSBlobConstructor::constructJSBlob):
        * bindings/v8/custom/V8BlobCustom.cpp:
        (WebCore::V8Blob::constructorCallback):
        * fileapi/WebKitBlobBuilder.cpp:
        (WebCore):
        (WebCore::BlobBuilder::BlobBuilder):
        (WebCore::BlobBuilder::getBuffer):
        (WebCore::BlobBuilder::append):
        (WebCore::BlobBuilder::appendBytesData):
        (WebCore::BlobBuilder::getBlob):
        * fileapi/WebKitBlobBuilder.h:
        (WebCore):
        (BlobBuilder):
        * page/FeatureObserver.h:

2012-10-08  Martin Robinson  <mrobinson@igalia.com>

        Try to fix the debug build after r130699

        Move the assignment of the ResourceHandleInternal local to before
        the include statement where it is used.

        * platform/network/soup/ResourceHandleSoup.cpp:
        (WebCore::createSoupMessageForHandleAndRequest):

2012-10-08  Nate Chapin  <japhet@chromium.org>

        Post-r130226 Cleanup: Comment a complicated if statement and make it a helper.
        https://bugs.webkit.org/show_bug.cgi?id=98463

        Reviewed by Eric Seidel.

        No new tests, refactor only.

        * rendering/RenderLayer.cpp:
        (WebCore::frameElementAndViewPermitScroll):
        (WebCore::RenderLayer::scrollRectToVisible):

2012-10-06  Martin Robinson  <mrobinson@igalia.com>

        [Soup] Simplify the way that requests are started
        https://bugs.webkit.org/show_bug.cgi?id=98532

        Reviewed by Gustavo Noronha Silva.

        Simplify the creation of the libsoup request and message when kicking off
        requests, by elminating a bit of duplicate code.

        No new tests. This should not change any behavior.

        * platform/network/ResourceHandle.h:
        (ResourceHandle):
        * platform/network/soup/ResourceHandleSoup.cpp:
        (WebCore):
        (WebCore::ResourceHandleInternal::soupSession): Ensure the session
        is initialized when passing it to the caller.
        (WebCore::createSoupMessageForHandleAndRequest): Added this helper which
        takes care of creating the SoupMessage for HTTP/HTTPS requests.
        (WebCore::createSoupRequestAndMessageForHandle): Collapsed the HTTP and
        non-HTTP request creation into this helper.
        (WebCore::ResourceHandle::start): Call the new helper now and then sendPendingRequest.
        (WebCore::ResourceHandle::sendPendingRequest): Instead of having special
        helpers to create and send the request, duplicating the logic for sending it
        across the file, add this method which can be used in both cases.
        (WebCore::waitingToSendRequest): Reworked the hasBeenSent method to answer
        the question of whether or not the request is ready to be sent, but is unsent.
        (WebCore::ResourceHandle::platformSetDefersLoading): Use the new helper.
        * platform/network/soup/ResourceRequest.h:
        (ResourceRequest): Added a new method for getting the URL string for soup.
        * platform/network/soup/ResourceRequestSoup.cpp:
        (WebCore::ResourceRequest::urlStringForSoup): Added.

2012-10-08  Eric Seidel  <eric@webkit.org>

        Make no-column table-layout cases a little faster with inlining
        https://bugs.webkit.org/show_bug.cgi?id=98566

        Reviewed by Julien Chaffraix.

        This change is almost not worth it at only a couple percent boost on
        http://www.robohornet.org/tests/resizecol.html
        However, I think the logicalWidthFromTableColumn split it kinda nice
        so I've decided to post it anyway.

        * rendering/RenderTable.cpp:
        (WebCore::RenderTable::slowColElement):
        * rendering/RenderTable.h:
        (WebCore::RenderTable::colElement):
        (RenderTable):
        * rendering/RenderTableCell.cpp:
        (WebCore::RenderTableCell::logicalWidthFromTableColumn):
        * rendering/RenderTableCell.h:
        (WebCore::RenderTableCell::styleOrColLogicalWidth):
        (RenderTableCell):

2012-10-08  Arpita Bahuguna  <arpitabahuguna@gmail.com>

        Rename RenderObject::firstLineStyleSlowCase() to a more appropriate cachedFirstLineStyle()
        https://bugs.webkit.org/show_bug.cgi?id=98631

        Reviewed by Eric Seidel.

        Renaming firstLineStyleSlowCase() to cachedFirstLineStyle().

        The current name is confusing since the function actually gets the
        the cached first-line styles.
        It also makes the name more descriptive of its functionality
        and in accordance with RenderObject::uncachedFirstLineStyle().

        No new tests required for this change since no change in behavior is expected.

        * rendering/RenderObject.cpp:
        (WebCore::RenderObject::cachedFirstLineStyle):
        * rendering/RenderObject.h:
        (WebCore::RenderObject::firstLineStyle):
        (RenderObject):
        Renamed RenderObject::firstLineStyleSlowCase() to cachedFirstLineStyle()
        and made the associated changes.

2012-10-08  Sami Kyostila  <skyostil@chromium.org>

        Some non-scrollable elements are added to non-fast-scrollable region
        https://bugs.webkit.org/show_bug.cgi?id=97927

        Reviewed by James Robinson.

        Only RenderLayers that can actually be scrolled should be added to the
        ScrollingCoordinator's non-fast scrollable region. Otherwise we may
        needlessly fall back to main thread scrolling.

        Test: ScrollingCoordinatorChromiumTest.clippedBodyTest

        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::updateScrollbarsAfterLayout):
        (WebCore::RenderLayer::updateScrollbarsAfterStyleChange):

2012-10-08  Simon Fraser  <simon.fraser@apple.com>

        Move layerTreeAsText to window.internals
        https://bugs.webkit.org/show_bug.cgi?id=98690

        Reviewed by James Robinson.

        Add window.internals.layerTreeAsText(document), and change the tests to use it.
        I'll remove testRunner.layerTreeAsText() in a later patch.

        * testing/Internals.cpp:
        (WebCore::Internals::layerTreeAsText):
        * testing/Internals.h:
        (Internals):
        * testing/Internals.idl:

2012-10-08  Jon Lee  <jonlee@apple.com>

        Add render object that paints plugin snapshots
        https://bugs.webkit.org/show_bug.cgi?id=98322
        <rdar://problem/12426546>

        Reviewed by Simon Fraser.

        First, teach plugins to maintain a set of states when plugin snapshotting is enabled.

        Second, a new RenderSnapshottedPlugIn class is a RenderEmbeddedObject that knows how to paint
        snapshots when the plugin is not visibly playing. It maintains a RenderImageResource to
        the generated poster image.

        * html/HTMLPlugInElement.cpp:
        (WebCore::HTMLPlugInElement::HTMLPlugInElement): By default all plugins play on load.
        * html/HTMLPlugInElement.h: Move the inheritance of ImageLoaderClientBase down to
        HTMLPlugInImageElement, since that is the class that actually deals with image-based plugins.
        (WebCore::HTMLPlugInElement::displayState): Add bit for display state.
        (WebCore::HTMLPlugInElement::setDisplayState):
        (WebCore::HTMLPlugInElement::updateSnapshot):

        * html/HTMLPlugInImageElement.cpp:
        (WebCore::HTMLPlugInImageElement::HTMLPlugInImageElement): If plugin snapshotting is
        enabled, plugin state is set to wait for a poster image.
        (WebCore::HTMLPlugInImageElement::createRenderer): Create RenderSnapshottedPlugIn if
        plugin snapshotting is enabled.
        (WebCore::HTMLPlugInImageElement::updateSnapshot): Once a snapshot is available, update the
        renderer and set its state to wait for user input to start the plugin.
        * html/HTMLPlugInImageElement.h:
        (HTMLPlugInImageElement):

        * rendering/RenderObject.h:
        (WebCore::RenderObject::isSnapshottedPlugIn): Add new function to identify
        RenderSnapshottedPlugIn instances. Since RenderSnapshottedPlugIn inherits from
        RenderEmbeddedObject, isEmbeddedObject() still returns true.
        * rendering/RenderEmbeddedObject.h:
        (RenderEmbeddedObject): Elevate a few virtual methods to protected for
        RenderSnapshottedPlugIn to override.

        * rendering/RenderSnapshottedPlugIn.cpp: Added.
        (WebCore::RenderSnapshottedPlugIn::RenderSnapshottedPlugIn): Initialize snapshot
        resource.
        (WebCore::RenderSnapshottedPlugIn::~RenderSnapshottedPlugIn): Shut down snapshot
        image resource to remove the renderer as a client, and remove image from memory cache.
        (WebCore::RenderSnapshottedPlugIn::plugInImageElement): Convenience function to get the
        HTML element.
        (WebCore::RenderSnapshottedPlugIn::updateSnapshot): Cache the snapshot, and repaint.
        (WebCore::RenderSnapshottedPlugIn::paint): If the plugin is not playing, paint like a
        RenderImage does.
        (WebCore::RenderSnapshottedPlugIn::paintReplaced): Paint the snapshot and overlay if the
        plugin is not playing.
        (WebCore::RenderSnapshottedPlugIn::paintReplacedSnapshot): Inspired by
        RenderImage::paintReplaced() and RenderImage::paintIntoRect().
        * rendering/RenderSnapshottedPlugIn.h: Added.
        (WebCore::RenderSnapshottedPlugIn::isSnapshottedPlugin): Returns true.

        * rendering/RenderTheme.h: Add a function that paints the overlay on top of the snapshot.
        * rendering/RenderThemeMac.h:
        * rendering/RenderThemeMac.mm:
        (WebCore::RenderThemeMac::paintPlugInSnapshotOverlay):

        * WebCore.xcodeproj/project.pbxproj: Add new RenderSnapshottedPlugIn class.
        * CMakeLists.txt: Ditto.
        * GNUmakefile.list.am: Ditto.
        * Target.pri: Ditto.
        * WebCore.gypi: Ditto.
        * WebCore.vcproj/WebCore.vcproj: Ditto.
        * rendering/RenderingAllInOne.cpp: Ditto.

2012-10-08  Hans Muller  <hmuller@adobe.com>

        [CSS Exclusions] Add support for polygonal shapes
        https://bugs.webkit.org/show_bug.cgi?id=96811

        Reviewed by Dirk Schulze.

        Initial version of the layout support for polygonal exclusion shapes: the ExclusionPolygon class.
        Supports the public ExclusionShape operations using the algorithm described here:
        http://hansmuller-webkit.blogspot.com/2012/06/horizontal-box-polygon-intersection-for.html.
        Although both the "included" and "excluded" operations are supported, only the former is
        used, since only shape-inside is supported at the moment.

        The ExclusionPolygon class stores the polygon's edges in an interval tree.

        Polygon edges are represented by the ExclusionPolygonEdge struct, which records the indices of
        the pair of vertices joined by the edge.  Edge vertex index1 is usually less than index2, except
        the last edge where index2 is 0.  We plan to improve the algorithm that creates the edges
        by spanning vertices contained in sequences of more than two colinear vertices. For example,
        a triangular polygon might be specified with 5 vertices like this: 3,0 5,0, 5,5, 4,4 2,2, 0,0.
        By spanning the extra colinear points: 0,0 5,0, 5,5, which implies index1-index2 edges: 5-1 1-2 2-5.

        Although the implementation supports complex polygons, the layout code is limited to
        essentially rectangular shapes until a patch for https://bugs.webkit.org/show_bug.cgi?id=96813
        lands.

        Tests: fast/exclusions/shape-inside/shape-inside-polygon-rectangle.html
               fast/exclusions/shape-inside/shape-inside-simple-polygon-001.html
               fast/exclusions/shape-inside/shape-inside-simple-polygon-002.html
               fast/exclusions/shape-inside/shape-inside-simple-polygon-003.html
               fast/exclusions/shape-inside/shape-inside-simple-polygon-004.html

        * CMakeLists.txt:
        * GNUmakefile.list.am:
        * Target.pri:
        * WebCore.gypi:
        * WebCore.vcproj/WebCore.vcproj:
        * WebCore.xcodeproj/project.pbxproj:
        * rendering/ExclusionPolygon.cpp: Added.
        (WebCore):
        (EdgeIntersection): Internal description of the intersection of a polygon edge and a horizontal line.
        (WebCore::ExclusionPolygon::ExclusionPolygon): See the introductory text above for a description of this type.
        (WebCore::computeXIntersection): Find and classify the X intercept of a polygon edge with horizontal line, if any.
        (WebCore::ExclusionPolygon::rightVertexY): This method is used to decide if a horizontal line "crosses" a vertex.
        (WebCore::appendIntervalX): Append an x coordinate to a vector of ExclusionIntervals.
        (WebCore::ExclusionPolygon::computeXIntersections): Return a vector of the intersections of a horizontal line with the polygon's edges.
        (WebCore::ExclusionPolygon::computeEdgeIntersections): Return a vector of the X projections of the edges that overlap a horizonal rectangle.
        (WebCore::ExclusionPolygon::getExcludedIntervals): Return a SegmentList of the X intervals within a horizontal rectangle that overlap the polygon.
        (WebCore::ExclusionPolygon::getIncludedIntervals): Return the X intervals within a horizontal rectangle that fit inside the polygon.
        * rendering/ExclusionPolygon.h: Added.
        (WebCore):
        (ExclusionPolygon):
        (WebCore::ExclusionPolygon::getXAt): X coordinate of a polygon vertex
        (WebCore::ExclusionPolygon::getYAt): Y coordinate of a polygon vertex
        (WebCore::ExclusionPolygon::numberOfVertices):
        (WebCore::ExclusionPolygon::fillRule): A WindRule value that defines "inside" for self-intersecting polygons.
        (ExclusionPolygonEdge):
        (WebCore::ExclusionPolygonEdge::ExclusionPolygonEdge):
        (WebCore::ExclusionPolygonEdge::vertex1):
        (WebCore::ExclusionPolygonEdge::vertex2):
        (WebCore::ExclusionPolygonEdge::minX):
        (WebCore::ExclusionPolygonEdge::minY):
        (WebCore::ExclusionPolygonEdge::maxX):
        (WebCore::ExclusionPolygonEdge::maxY):
        * rendering/ExclusionShape.cpp:
        (WebCore::createExclusionPolygon): Return a new ExclusionPolygon.
        (WebCore):
        (WebCore::ExclusionShape::createExclusionShape): Added support for BasicShape::BASIC_SHAPE_POLYGON.
        * rendering/ExclusionShapeInsideInfo.cpp:
        (WebCore::ExclusionShapeInsideInfo::isExclusionShapeInsideInfoEnabledForRenderBlock): Enable BASIC_SHAPE_POLYGON shapes for RenderBlocks.

2012-10-08  Tony Chang  <tony@chromium.org>

        Replace 2 uses of updateLogicalHeight with computeLogicalHeight
        https://bugs.webkit.org/show_bug.cgi?id=98677

        Reviewed by Ojan Vafai.

        This is part of bug 96804.  Convert RenderTextControl and RenderSVGForeignObject to
        override the const computeLogicalHeight method rather than the updateLogicalHeight
        setter method.

        No new tests, there should be no behavior change as this is just a refactor.

        * rendering/RenderTextControl.cpp:
        (WebCore::RenderTextControl::computeLogicalHeight): Pass logicalHeight through rather than setting height.
        This is a slight correctness fix, although we don't support vertical inputs yet.
        * rendering/RenderTextControl.h:
        (RenderTextControl):
        * rendering/svg/RenderSVGForeignObject.cpp:
        (WebCore::RenderSVGForeignObject::computeLogicalHeight):
        * rendering/svg/RenderSVGForeignObject.h:
        (RenderSVGForeignObject):

2012-10-08  Min Qin  <qinmin@chromium.org>

        Upstream some tweaks for overlay play button on Android
        https://bugs.webkit.org/show_bug.cgi?id=98671

        Reviewed by Adam Barth.

        This change stops displaying the overlay play button if video height is too small
        No test for this. Will rebase layout test expectations for android later.

        * css/mediaControlsChromiumAndroid.css:
        (video::-webkit-media-controls-overlay-enclosure):

2012-10-08  Simon Fraser  <simon.fraser@apple.com>

        Some GraphicsLayer cleanup to separate the concepts of using a tile cache, and being the main tile cache layer
        https://bugs.webkit.org/show_bug.cgi?id=98574

        Reviewed by Dean Jackson.

        GraphicsLayerCA assumed that using a TileCache equated to being the main page tile
        cache layer, which has some special considerations. Make these two concepts separate
        to get closer to being able to use TileCaches in place of CATiledLayer.

        * platform/graphics/GraphicsLayer.h:
        (GraphicsLayer): Remove m_usingTileCache member, which was not appropriate
        for this class to have.
        * platform/graphics/GraphicsLayer.cpp:
        (WebCore::GraphicsLayer::GraphicsLayer): Remove init of m_usingTileCache.
        (WebCore::GraphicsLayer::debugBorderInfo): Can no longer use m_usingTileCache to
        get the blue color, so moved code into a virtual debugBorderInfo() method.
        (WebCore::GraphicsLayer::updateDebugIndicators): Call the virtual debugBorderInfo().
        * platform/graphics/GraphicsLayerClient.h: Remove the usingTileCache() callback;
        we now just cache this information in the GraphicsLayerCA on creation.
        * platform/graphics/ca/GraphicsLayerCA.cpp:
        (WebCore::GraphicsLayerCA::GraphicsLayerCA): Init m_isPageTileCacheLayer to false,
        then set to m_isPageTileCacheLayer if the client says we should create a tile cache.
        (WebCore::GraphicsLayerCA::platformCALayerShowRepaintCounter): Overidden to avoid duplicate repaint
        counters in the top-left tile.
        (WebCore::GraphicsLayerCA::updateLayerBackgroundColor): If this layer is the page tile cache layer,
        we allow setting of its background color.
        (WebCore::GraphicsLayerCA::debugBorderInfo): Overidden to use a blue color for tiles.
        (WebCore::GraphicsLayerCA::requiresTiledLayer): Don't make CATiledLayers for the page tile cache.
        * platform/graphics/ca/GraphicsLayerCA.h:
        (GraphicsLayerCA):
        * platform/graphics/ca/PlatformCALayerClient.h:
        (PlatformCALayerClient): Need to pass the platform layer into platformCALayerShowRepaintCounter()
        so we can distinguish between calls for tiles, and calls for the tile cache layer itself.
        * platform/graphics/ca/mac/TileCache.mm:
        (WebCore::TileCache::shouldShowRepaintCounters): Pass 0 to platformCALayerShowRepaintCounter() to
        indicate that we're asking about a tile.
        * platform/graphics/mac/WebLayer.mm:
        (drawLayerContents): Now we can just rely on platformCALayerShowRepaintCounter() to tell us whether
        to draw the repaint counter.
        (-[WebLayer setNeedsDisplayInRect:]):
        * platform/graphics/mac/WebTiledLayer.mm:
        (-[WebTiledLayer setNeedsDisplayInRect:]):
        * rendering/RenderLayerBacking.h:
        (WebCore::RenderLayerBacking::usingTileCache):
        (RenderLayerBacking):
        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::documentBackgroundColorDidChange): We can ask the RenderLayerBacking
        whether it's for the tile cache, rather than going to the GraphicsLayer.
        * platform/graphics/win/MediaPlayerPrivateQuickTimeVisualContext.cpp:
        (WebCore::MediaPlayerPrivateQuickTimeVisualContext::LayerClient::platformCALayerShowRepaintCounter):

2012-10-08  Huang Dongsung  <luxtella@company100.net>

        [Qt] Make ImageBufferQt use premultiplied converting functions in Color.h instead of its own mechanism.
        https://bugs.webkit.org/show_bug.cgi?id=98582

        Reviewed by Eric Seidel.

        Only Qt port failed canvas/philip/tests/2d.imageData.put.unchanged.html because
        ImageBufferQt converts from or to a premultiplied color using its own code. When
        we convert twice from an unmultiplied color to a premultiplied color and then to
        an unmultiplied color using this code, the calculated result are pretty
        different against the input color. It is why Gtk passes this test although Qt
        fails. Gtk port uses them in Color.h.

        In addition, Qt should use the functions in Color.h to reduce duplicated codes.

        Tests: canvas/philip/tests/2d.imageData.put.unchanged.html: Fixed a test case

        * platform/graphics/qt/ImageBufferQt.cpp:
        (WebCore::getImageData):
        (WebCore::convertBGRAToRGBA):
        (WebCore::ImageBuffer::putByteArray):

2012-10-08  Tab Atkins  <jackalmage@gmail.com>

        Remove "orphaned units" quirk
        https://bugs.webkit.org/show_bug.cgi?id=98553

        Reviewed by Eric Seidel.

        This patch removes our "orphaned units" quirk.
        We have an "orphaned units" quirk to match IE, which allows things like "width: 20 px;".
        But FF and Opera don't have it and aren't aware of bugs for it,
        and it's not in Simon Pieters' Quirks Mode spec <http://dvcs.w3.org/hg/quirks-mode/raw-file/tip/Overview.html>

        No new tests, because I'm killing a quirk.

        * css/CSSParser.cpp:
        (WebCore::CSSParser::parseValue):
        * css/CSSParser.h:
        (CSSParser):

2012-10-08  Robert Hogan  <robert@webkit.org>

        Border, margin and padding of an inline's inline ancestors counted twice
        https://bugs.webkit.org/show_bug.cgi?id=63074

        Reviewed by David Hyatt.

        In a line such as '<span><span><img>Text' the border, padding and margin belonging
        to the two spans was counted twice by RenderBlockLineLayout::nextLineBreak(): once
        when adding the width of the <img> object to the line, and a second time when adding
        the 'Text'. The result was that nextLineBreak() now had a length for the line that 
        exceeded the line's maximum length and inserted a bogus line break.

        This all happened because the helper function that is used to add in the border etc.
        from inline ancestors was crawling up the tree each time. It doesn't need to do that, it
        should stop crawling up the tree when the current object is not the first or last sibling below a parent.

        Test: fast/inline/bpm-inline-ancestors.html

        * rendering/RenderBlockLineLayout.cpp:
        (WebCore::shouldAddBorderPaddingMargin): Broke this check out into a helper function so that it 
        can help inlineLogicalWidth() return early and also treat empty RenderTexts the same as no previous/next
        sibling on the line. This ensures that collapsed leading space does not interfere with the decision to
        crawl up the ancestors accumulating border, padding, and margin.
        (WebCore):
        (WebCore::inlineLogicalWidth): Return early once the current child is no longer on the edge of its line - 
        this ensures the border, padding and margin of ancestors is not counted twice. 

2012-10-08  Mike West  <mkwst@chromium.org>

        Null-check for DOMWindow before feeding it to FeatureObserver.
        https://bugs.webkit.org/show_bug.cgi?id=98624

        Reviewed by Adam Barth.

        We shouldn't call out to FeatureObserver in
        ContentSecurityPolicy::didReceiveHeader if the policy's document doesn't
        have a DOMWindow.

        Test: http/tests/security/contentSecurityPolicy/xmlhttprequest-protected-resource-does-not-crash.html

        * page/ContentSecurityPolicy.cpp:
        (WebCore::ContentSecurityPolicy::didReceiveHeader):
            Null check 'document->domWindow' before passing it on.
        * page/FeatureObserver.cpp:
        (WebCore::FeatureObserver::observe):
            ASSERT 'domWindow'.

2012-10-08  Nate Chapin  <japhet@chromium.org>

        Loader cleanup : Simplify FrameLoader/DocumentLoader setupForReplace()
        https://bugs.webkit.org/show_bug.cgi?id=49072

        Reviewed by Eric Seidel.

        This patch contains one small known behavior change: multipart/x-mixed-replace main resources with text/html parts
        will no longer load the text/html progressively. In practice, loading the html progressively causes the document
        to get cleared as soon as the next part's data starts arriving, which leads to a blank page most of the time. This case
        seems to be pathological, as IE, FF, Opera and WebKit all do something different currently. This patch will cause
        us to behave like Firefox, which is the most sane of the current behaviors.

        Test: http/tests/multipart/multipart-html.php

        * loader/DocumentLoader.cpp:
        (WebCore::DocumentLoader::commitData): Use isMultipartReplacingLoad() helper.
        (WebCore::DocumentLoader::receivedData):
        (WebCore::DocumentLoader::setupForReplace): Renamed from setupForReplaceByMIMEType(). Call maybeFinishLoadingMultipartContent()
            instead of doing identical work inline. After we call frameLoader()->setReplacing(), we will never load progressively, so remove
            the if (doesProgressiveLoad(newMIMEType)) {} block.
        (WebCore::DocumentLoader::isMultipartReplacingLoad):
        (WebCore::DocumentLoader::maybeFinishLoadingMultipartContent): Inline the old DocumentLoader::setupForeReplace(), check
            frameLoader()->isReplacing() instead of the delete doesProgressiveLoad().
        * loader/DocumentLoader.h:
        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::setupForReplace): Move all calls to revertToProvisionalState here.
        * loader/MainResourceLoader.cpp:
        (WebCore::MainResourceLoader::didReceiveResponse): Call setupForReplace(), renamed from setupForReplaceByMIMEType().

2012-10-08  Zoltan Horvath  <zoltan@webkit.org>

        [Qt] r122720 causes performance regression with DirectFB on ARMv7
        https://bugs.webkit.org/show_bug.cgi?id=97548

        Reviewed by Jocelyn Turcotte.

        Revert the rest of r122720. This change modifies the NativeImagePtr from QImage* to QPixmap*.

        Covered by existing tests.

        * bridge/qt/qt_pixmapruntime.cpp:
        (JSC::Bindings::assignToHTMLImageElement):
        (JSC::Bindings::QtPixmapRuntime::toQt):
        * platform/DragImage.h:
        (WebCore):
        * platform/graphics/GraphicsContext.h:
        (GraphicsContext):
        * platform/graphics/Image.h:
        (Image):
        * platform/graphics/NativeImagePtr.h:
        (WebCore):
        * platform/graphics/gstreamer/ImageGStreamer.h:
        * platform/graphics/gstreamer/ImageGStreamerQt.cpp:
        (ImageGStreamer::ImageGStreamer):
        * platform/graphics/qt/GraphicsContext3DQt.cpp:
        (WebCore::GraphicsContext3D::getImageData):
        * platform/graphics/qt/GraphicsContextQt.cpp:
        (WebCore::GraphicsContext::pushTransparencyLayerInternal):
        (WebCore::GraphicsContext::beginPlatformTransparencyLayer):
        (WebCore::GraphicsContext::endPlatformTransparencyLayer):
        * platform/graphics/qt/ImageBufferDataQt.h:
        (ImageBufferData):
        * platform/graphics/qt/ImageBufferQt.cpp:
        (WebCore::ImageBufferData::ImageBufferData):
        (WebCore):
        (WebCore::ImageBufferData::toQImage):
        (WebCore::ImageBuffer::copyImage):
        (WebCore::ImageBuffer::clip):
        (WebCore::ImageBuffer::platformTransformColorSpace):
        (WebCore::getImageData):
        (WebCore::ImageBuffer::putByteArray):
        (WebCore::encodeImage):
        (WebCore::ImageBuffer::toDataURL):
        * platform/graphics/qt/ImageDecoderQt.cpp:
        (WebCore::ImageFrame::asNewNativeImage):
        * platform/graphics/qt/ImageQt.cpp:
        (graphics):
        (loadResourcePixmap):
        (WebCore::Image::loadPlatformResource):
        (WebCore::Image::setPlatformResource):
        (WebCore::Image::drawPattern):
        (WebCore::BitmapImage::BitmapImage):
        (WebCore::BitmapImage::draw):
        (WebCore::BitmapImage::checkForSolidColor):
        (WebCore::BitmapImage::create):
        * platform/graphics/qt/PatternQt.cpp:
        (WebCore::Pattern::createPlatformPattern):
        * platform/graphics/qt/StillImageQt.cpp:
        (WebCore::StillImage::StillImage):
        (WebCore::StillImage::~StillImage):
        (WebCore::StillImage::currentFrameHasAlpha):
        (WebCore::StillImage::size):
        (WebCore::StillImage::nativeImageForCurrentFrame):
        (WebCore::StillImage::draw):
        * platform/graphics/qt/StillImageQt.h:
        (WebCore::StillImage::create):
        (WebCore::StillImage::createForRendering):
        (StillImage):
        * platform/graphics/qt/TransparencyLayer.h:
        (WebCore::TransparencyLayer::TransparencyLayer):
        (TransparencyLayer):
        * platform/graphics/surfaces/qt/GraphicsSurfaceQt.cpp:
        (WebCore::GraphicsSurface::createReadOnlyImage):
        * platform/graphics/texmap/TextureMapperGL.cpp:
        (WebCore::BitmapTextureGL::updateContents):
        * platform/qt/ClipboardQt.cpp:
        (WebCore::ClipboardQt::createDragImage):
        (WebCore::ClipboardQt::declareAndWriteDragImage):
        * platform/qt/CursorQt.cpp:
        (WebCore::createCustomCursor):
        * platform/qt/DragImageQt.cpp:
        (WebCore::createDragImageFromImage):
        * platform/qt/PasteboardQt.cpp:
        (WebCore::Pasteboard::writeImage):

2012-10-08  Carlos Garcia Campos  <cgarcia@igalia.com>

        Unreviewed. Fix make distcheck.

        * GNUmakefile.list.am: Add missing header file to compilation.

2012-10-08  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r130619.
        http://trac.webkit.org/changeset/130619
        https://bugs.webkit.org/show_bug.cgi?id=98634

        Causes many crashes on the EFL bots. (Requested by rakuco on
        #webkit).

        * platform/RunLoop.h:
        (RunLoop):
        * platform/efl/RunLoopEfl.cpp:
        (WebCore::RunLoop::RunLoop):
        (WebCore::RunLoop::wakeUpEvent):
        (WebCore::RunLoop::wakeUp):

2012-10-08  Byungwoo Lee  <bw80.lee@samsung.com>

        [EFL] Use ecore_main_loop_thread_safe_call_async() to wakeup main loop.
        https://bugs.webkit.org/show_bug.cgi?id=98505

        Reviewed by Kenneth Rohde Christiansen.

        Instead of ecore_pipe_write(),
        use ecore_main_loop_thread_safe_call_async() to wakeup ecore main loop.

        According to the EFL API document, this function is designed to dispatch
        a function on ecore main loop by avoiding dead lock or race condition. 
        With this function, webkit doesn't need to maintain ecore pipe also.

        No new tests. The function to wakeup main loop is changed.

        * platform/RunLoop.h:
        (RunLoop):
        * platform/efl/RunLoopEfl.cpp:
        (WebCore::RunLoop::RunLoop):
        (WebCore::RunLoop::wakeUpEvent):
        (WebCore::RunLoop::wakeUp):

2012-10-07  Arpita Bahuguna  <arpitabahuguna@gmail.com>

        :first-line pseudo selector ignoring words created from :before
        https://bugs.webkit.org/show_bug.cgi?id=80794

        Reviewed by Daniel Bates.

        The :first-line pseudo-element style is not applied for content
        which is generated from the :before/:after pseudo-elements.

        Test: fast/css/first-line-style-for-before-after-content.html

        * rendering/RenderObject.cpp:
        (WebCore::firstLineStyleForCachedUncachedType):
        Added a new static helper function incorporating the common
        functionality of both uncachedFirstLineStyle() and firstLineStyleSlowCase()
        functions. It also modifies the functionality to handle the
        scenario when :first-line style needs to be applied on content
        generated from :before/:after.

        While getting the :first-line style we should also consider the case
        when the content is generated from a :before/:after pseudo-element in
        which case the RenderInline's parent should be considered for
        obtaining the first-line style.

        (WebCore):
        (WebCore::RenderObject::uncachedFirstLineStyle):
        (WebCore::RenderObject::firstLineStyleSlowCase):
        Moved the duplicate code between the two functions to the common
        helper function firstLineStyleForCachedUncachedType().

2012-10-07  Peter Wang  <peter.wang@torchmobile.com.cn>

        Web Inspector: The front-end should provide the position in original source file when set a breakpoint
        https://bugs.webkit.org/show_bug.cgi?id=93473

        Reviewed by Yury Semikhatsky.

        Since frontend truncates the indent, the first statement in a line must match the breakpoint (line, 0).
        With this patch JSC debugger can support both normal and "Pretty Print" mode.

        No new test case. This patch can be verified with cases in "LayoutTests/inspector/debugger/".

        * bindings/js/ScriptDebugServer.cpp:
        (WebCore::ScriptDebugServer::ScriptDebugServer):
        (WebCore::ScriptDebugServer::hasBreakpoint):
        (WebCore::ScriptDebugServer::createCallFrameAndPauseIfNeeded):
        (WebCore::ScriptDebugServer::pauseIfNeeded):
        * bindings/js/ScriptDebugServer.h:
        (ScriptDebugServer):

2012-10-07  Martin Robinson  <mrobinson@igalia.com>

        [Soup] Clean up ResourceError creation
        https://bugs.webkit.org/show_bug.cgi?id=98521

        Reviewed by Carlos Garcia Campos.

        Simplify the creation of ResourcErrors in ResourceHandleSoup. This is
        part of a process to make the libsoup networking backend more hackable.

        No new tests. This shouldn't change functionality.

        * GNUmakefile.list.am: Added new file.
        * PlatformEfl.cmake: Added new file.
        * platform/network/soup/ResourceError.h:
        (ResourceError): Added new factories.
        * platform/network/soup/ResourceErrorSoup.cpp: Added.
        (WebCore::failingURI): Added this helper.
        (WebCore::ResourceError::httpError): New factory.
        (WebCore::ResourceError::genericIOError): Ditto.
        (WebCore::ResourceError::tlsError): Ditto.
        (WebCore::ResourceError::timeoutError): Ditto.
        * platform/network/soup/ResourceHandleSoup.cpp:
        (WebCore::handleUnignoredTLSErrors): Created this helper which merges
        some of the logic from sendRequestCallback.
        (WebCore::sendRequestCallback): Use the new helper.
        (WebCore::requestTimeoutCallback): Use the new factory.

2012-10-07  Caio Marcelo de Oliveira Filho  <caio.oliveira@openbossa.org>

        Rename first/second to key/value in HashMap iterators
        https://bugs.webkit.org/show_bug.cgi?id=82784

        Reviewed by Eric Seidel.

        * Modules/geolocation/Geolocation.cpp:
        (WebCore::Geolocation::Watchers::find):
        (WebCore::Geolocation::Watchers::remove):
        * Modules/indexeddb/IDBDatabase.cpp:
        (WebCore::IDBDatabase::objectStoreNames):
        * Modules/indexeddb/IDBDatabaseBackendImpl.cpp:
        (WebCore::IDBDatabaseBackendImpl::metadata):
        * Modules/indexeddb/IDBFactoryBackendImpl.cpp:
        (WebCore::IDBFactoryBackendImpl::deleteDatabase):
        (WebCore::IDBFactoryBackendImpl::openBackingStore):
        (WebCore::IDBFactoryBackendImpl::open):
        * Modules/indexeddb/IDBObjectStore.cpp:
        (WebCore::IDBObjectStore::indexNames):
        (WebCore::IDBObjectStore::put):
        (WebCore::IDBObjectStore::index):
        (WebCore::IDBObjectStore::deleteIndex):
        * Modules/indexeddb/IDBObjectStoreBackendImpl.cpp:
        (WebCore::IDBObjectStoreBackendImpl::metadata):
        (WebCore::makeIndexWriters):
        (WebCore::IDBObjectStoreBackendImpl::deleteInternal):
        * Modules/indexeddb/IDBTransaction.cpp:
        (WebCore::IDBTransaction::objectStore):
        (WebCore::IDBTransaction::objectStoreDeleted):
        (WebCore::IDBTransaction::onAbort):
        (WebCore::IDBTransaction::dispatchEvent):
        * Modules/mediastream/MediaConstraintsImpl.cpp:
        (WebCore::MediaConstraintsImpl::getMandatoryConstraints):
        (WebCore::MediaConstraintsImpl::getMandatoryConstraintValue):
        * Modules/webdatabase/AbstractDatabase.cpp:
        (WebCore::AbstractDatabase::performOpenAndVerify):
        * Modules/webdatabase/DatabaseTracker.cpp:
        (WebCore::DatabaseTracker::interruptAllDatabasesForContext):
        * Modules/webdatabase/OriginUsageRecord.cpp:
        (WebCore::OriginUsageRecord::diskUsage):
        * Modules/webdatabase/SQLTransactionCoordinator.cpp:
        (WebCore::SQLTransactionCoordinator::acquireLock):
        (WebCore::SQLTransactionCoordinator::releaseLock):
        (WebCore::SQLTransactionCoordinator::shutdown):
        * Modules/webdatabase/chromium/DatabaseTrackerChromium.cpp:
        (WebCore::DatabaseTracker::interruptAllDatabasesForContext):
        * Modules/webdatabase/chromium/QuotaTracker.cpp:
        (WebCore::QuotaTracker::getDatabaseSizeAndSpaceAvailableToOrigin):
        (WebCore::QuotaTracker::updateDatabaseSize):
        * Modules/websockets/WebSocketDeflateFramer.cpp:
        (WebCore::WebSocketExtensionDeflateFrame::processResponse):
        * Modules/websockets/WebSocketExtensionDispatcher.cpp:
        (WebCore::WebSocketExtensionDispatcher::appendAcceptedExtension):
        * accessibility/AXObjectCache.cpp:
        (WebCore::AXObjectCache::~AXObjectCache):
        * bindings/gobject/DOMObjectCache.cpp:
        (WebKit::DOMObjectCache::clearByFrame):
        * bindings/js/DOMObjectHashTableMap.h:
        (WebCore::DOMObjectHashTableMap::~DOMObjectHashTableMap):
        (WebCore::DOMObjectHashTableMap::get):
        * bindings/js/JSDOMBinding.cpp:
        (WebCore::cacheDOMStructure):
        * bindings/js/JSDOMGlobalObject.cpp:
        (WebCore::JSDOMGlobalObject::visitChildren):
        * bindings/js/JSDOMGlobalObject.h:
        (WebCore::getDOMConstructor):
        * bindings/js/PageScriptDebugServer.cpp:
        (WebCore::PageScriptDebugServer::addListener):
        (WebCore::PageScriptDebugServer::removeListener):
        * bindings/js/ScriptCachedFrameData.cpp:
        (WebCore::ScriptCachedFrameData::ScriptCachedFrameData):
        (WebCore::ScriptCachedFrameData::restore):
        * bindings/js/ScriptController.cpp:
        (WebCore::ScriptController::~ScriptController):
        (WebCore::ScriptController::clearWindowShell):
        (WebCore::ScriptController::attachDebugger):
        (WebCore::ScriptController::updateDocument):
        (WebCore::ScriptController::createRootObject):
        (WebCore::ScriptController::collectIsolatedContexts):
        (WebCore::ScriptController::cleanupScriptObjectsForPlugin):
        (WebCore::ScriptController::clearScriptObjects):
        * bindings/js/ScriptController.h:
        (WebCore::ScriptController::windowShell):
        (WebCore::ScriptController::existingWindowShell):
        * bindings/js/ScriptDebugServer.cpp:
        (WebCore::ScriptDebugServer::setBreakpoint):
        (WebCore::ScriptDebugServer::removeBreakpoint):
        (WebCore::ScriptDebugServer::hasBreakpoint):
        * bindings/js/SerializedScriptValue.cpp:
        (WebCore::CloneSerializer::checkForDuplicate):
        (WebCore::CloneSerializer::dumpIfTerminal):
        (WebCore::CloneSerializer::write):
        * bindings/scripts/CodeGeneratorV8.pm:
        (GenerateImplementation):
        * bindings/scripts/test/V8/V8Float64Array.cpp:
        (WebCore::V8Float64Array::GetRawTemplate):
        (WebCore::V8Float64Array::GetTemplate):
        * bindings/scripts/test/V8/V8TestActiveDOMObject.cpp:
        (WebCore::V8TestActiveDOMObject::GetRawTemplate):
        (WebCore::V8TestActiveDOMObject::GetTemplate):
        * bindings/scripts/test/V8/V8TestCustomNamedGetter.cpp:
        (WebCore::V8TestCustomNamedGetter::GetRawTemplate):
        (WebCore::V8TestCustomNamedGetter::GetTemplate):
        * bindings/scripts/test/V8/V8TestEventConstructor.cpp:
        (WebCore::V8TestEventConstructor::GetRawTemplate):
        (WebCore::V8TestEventConstructor::GetTemplate):
        * bindings/scripts/test/V8/V8TestEventTarget.cpp:
        (WebCore::V8TestEventTarget::GetRawTemplate):
        (WebCore::V8TestEventTarget::GetTemplate):
        * bindings/scripts/test/V8/V8TestException.cpp:
        (WebCore::V8TestException::GetRawTemplate):
        (WebCore::V8TestException::GetTemplate):
        * bindings/scripts/test/V8/V8TestInterface.cpp:
        (WebCore::V8TestInterface::GetRawTemplate):
        (WebCore::V8TestInterface::GetTemplate):
        * bindings/scripts/test/V8/V8TestMediaQueryListListener.cpp:
        (WebCore::V8TestMediaQueryListListener::GetRawTemplate):
        (WebCore::V8TestMediaQueryListListener::GetTemplate):
        * bindings/scripts/test/V8/V8TestNamedConstructor.cpp:
        (WebCore::V8TestNamedConstructor::GetRawTemplate):
        (WebCore::V8TestNamedConstructor::GetTemplate):
        * bindings/scripts/test/V8/V8TestNode.cpp:
        (WebCore::V8TestNode::GetRawTemplate):
        (WebCore::V8TestNode::GetTemplate):
        * bindings/scripts/test/V8/V8TestObj.cpp:
        (WebCore::V8TestObj::GetRawTemplate):
        (WebCore::V8TestObj::GetTemplate):
        * bindings/scripts/test/V8/V8TestSerializedScriptValueInterface.cpp:
        (WebCore::V8TestSerializedScriptValueInterface::GetRawTemplate):
        (WebCore::V8TestSerializedScriptValueInterface::GetTemplate):
        * bindings/v8/DOMWrapperWorld.cpp:
        (WebCore::DOMWrapperWorld::deallocate):
        (WebCore::DOMWrapperWorld::ensureIsolatedWorld):
        * bindings/v8/NPV8Object.cpp:
        (WebCore::freeV8NPObject):
        (WebCore::npCreateV8ScriptObject):
        * bindings/v8/ScriptController.cpp:
        (WebCore::ScriptController::clearScriptObjects):
        (WebCore::ScriptController::resetIsolatedWorlds):
        (WebCore::ScriptController::ensureIsolatedWorldContext):
        (WebCore::ScriptController::existingWindowShellInternal):
        (WebCore::ScriptController::evaluateInIsolatedWorld):
        (WebCore::ScriptController::setIsolatedWorldSecurityOrigin):
        (WebCore::ScriptController::cleanupScriptObjectsForPlugin):
        (WebCore::ScriptController::collectIsolatedContexts):
        * bindings/v8/SerializedScriptValue.cpp:
        * bindings/v8/V8DOMMap.h:
        (WebCore::WeakReferenceMap::removeIfPresent):
        (WebCore::WeakReferenceMap::visit):
        * bindings/v8/V8PerContextData.cpp:
        (WebCore::V8PerContextData::dispose):
        * bindings/v8/npruntime.cpp:
        * bridge/IdentifierRep.cpp:
        (WebCore::IdentifierRep::get):
        * bridge/NP_jsobject.cpp:
        (ObjectMap::add):
        (ObjectMap::remove):
        * bridge/runtime_root.cpp:
        (JSC::Bindings::RootObject::invalidate):
        * css/CSSCanvasValue.cpp:
        (WebCore::CSSCanvasValue::canvasChanged):
        (WebCore::CSSCanvasValue::canvasResized):
        * css/CSSComputedStyleDeclaration.cpp:
        (WebCore::counterToCSSValue):
        * css/CSSCrossfadeValue.cpp:
        (WebCore::CSSCrossfadeValue::crossfadeChanged):
        * css/CSSFontFaceSource.cpp:
        (WebCore::CSSFontFaceSource::getFontData):
        * css/CSSFontSelector.cpp:
        (WebCore::CSSFontSelector::addFontFaceRule):
        (WebCore::CSSFontSelector::getFontData):
        * css/CSSImageGeneratorValue.cpp:
        (WebCore::CSSImageGeneratorValue::addClient):
        (WebCore::CSSImageGeneratorValue::removeClient):
        (WebCore::CSSImageGeneratorValue::getImage):
        * css/CSSSegmentedFontFace.cpp:
        (WebCore::CSSSegmentedFontFace::getFontData):
        * css/CSSSelector.cpp:
        (WebCore::CSSSelector::parsePseudoType):
        * css/CSSValuePool.cpp:
        (WebCore::CSSValuePool::createColorValue):
        (WebCore::CSSValuePool::createFontFamilyValue):
        (WebCore::CSSValuePool::createFontFaceValue):
        * css/PropertySetCSSStyleDeclaration.cpp:
        (WebCore::PropertySetCSSStyleDeclaration::cloneAndCacheForCSSOM):
        * css/RuleSet.cpp:
        (WebCore::reportAtomRuleMap):
        (WebCore::RuleSet::addToRuleSet):
        (WebCore::shrinkMapVectorsToFit):
        * css/StyleBuilder.cpp:
        (WebCore::ApplyPropertyCounter::applyInheritValue):
        (WebCore::ApplyPropertyCounter::applyValue):
        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::collectFeatures):
        (WebCore::StyleResolver::ruleSetForScope):
        (WebCore::StyleResolver::appendAuthorStylesheets):
        (WebCore::StyleResolver::sweepMatchedPropertiesCache):
        (WebCore::StyleResolver::collectMatchingRulesForList):
        * css/StyleSheetContents.cpp:
        (WebCore::StyleSheetContents::parserAddNamespace):
        (WebCore::StyleSheetContents::determineNamespace):
        * dom/CheckedRadioButtons.cpp:
        (WebCore::CheckedRadioButtons::addButton):
        (WebCore::CheckedRadioButtons::removeButton):
        * dom/ChildListMutationScope.cpp:
        (WebCore::ChildListMutationAccumulator::getOrCreate):
        * dom/Document.cpp:
        (WebCore::Document::windowNamedItems):
        (WebCore::Document::documentNamedItems):
        (WebCore::Document::getCSSCanvasElement):
        (WebCore::Document::cachedImmutableAttributeData):
        (WebCore::Document::getCachedLocalizer):
        * dom/DocumentMarkerController.cpp:
        (WebCore::DocumentMarkerController::markerContainingPoint):
        (WebCore::DocumentMarkerController::renderedRectsForMarkers):
        (WebCore::DocumentMarkerController::removeMarkers):
        (WebCore::DocumentMarkerController::repaintMarkers):
        (WebCore::DocumentMarkerController::invalidateRenderedRectsForMarkersInRect):
        (WebCore::DocumentMarkerController::showMarkers):
        * dom/DocumentOrderedMap.cpp:
        (WebCore::DocumentOrderedMap::remove):
        * dom/DocumentStyleSheetCollection.cpp:
        (WebCore::DocumentStyleSheetCollection::pageGroupUserSheets):
        * dom/ElementAttributeData.cpp:
        (WebCore::ensureAttrListForElement):
        * dom/EventDispatcher.cpp:
        (WebCore::EventRelatedTargetAdjuster::findRelatedTarget):
        * dom/IdTargetObserverRegistry.cpp:
        (WebCore::IdTargetObserverRegistry::addObserver):
        (WebCore::IdTargetObserverRegistry::removeObserver):
        * dom/MutationObserverInterestGroup.cpp:
        (WebCore::MutationObserverInterestGroup::isOldValueRequested):
        (WebCore::MutationObserverInterestGroup::enqueueMutationRecord):
        * dom/Node.cpp:
        (WebCore::Node::dumpStatistics):
        (WebCore::Node::clearRareData):
        (WebCore::NodeListsNodeData::invalidateCaches):
        (WebCore::collectMatchingObserversForMutation):
        * dom/NodeRareData.h:
        (WebCore::NodeListsNodeData::addCacheWithAtomicName):
        (WebCore::NodeListsNodeData::addCacheWithName):
        (WebCore::NodeListsNodeData::addCacheWithQualifiedName):
        (WebCore::NodeListsNodeData::adoptTreeScope):
        * dom/ProcessingInstruction.cpp:
        (WebCore::ProcessingInstruction::checkStyleSheet):
        * dom/ScriptExecutionContext.cpp:
        (WebCore::ScriptExecutionContext::canSuspendActiveDOMObjects):
        (WebCore::ScriptExecutionContext::suspendActiveDOMObjects):
        (WebCore::ScriptExecutionContext::resumeActiveDOMObjects):
        (WebCore::ScriptExecutionContext::stopActiveDOMObjects):
        (WebCore::ScriptExecutionContext::adjustMinimumTimerInterval):
        * dom/SelectorQuery.cpp:
        (WebCore::SelectorQueryCache::add):
        * dom/SpaceSplitString.cpp:
        (WebCore::SpaceSplitStringData::create):
        * dom/StyledElement.cpp:
        (WebCore::StyledElement::updateAttributeStyle):
        * editing/mac/AlternativeTextUIController.mm:
        (WebCore::AlternativeTextUIController::AlernativeTextContextController::alternativesForContext):
        * html/FormController.cpp:
        (WebCore::SavedFormState::serializeTo):
        (WebCore::SavedFormState::appendControlState):
        (WebCore::SavedFormState::takeControlState):
        (WebCore::SavedFormState::getReferencedFilePaths):
        (WebCore::FormKeyGenerator::formKey):
        (WebCore::FormController::createSavedFormStateMap):
        (WebCore::FormController::formElementsState):
        (WebCore::FormController::takeStateForFormElement):
        (WebCore::FormController::getReferencedFilePaths):
        * html/HTMLCollection.cpp:
        (WebCore::HTMLCollectionCacheBase::append):
        * html/canvas/WebGLFramebuffer.cpp:
        (WebCore::WebGLFramebuffer::getAttachment):
        (WebCore::WebGLFramebuffer::removeAttachmentFromBoundFramebuffer):
        (WebCore::WebGLFramebuffer::checkStatus):
        (WebCore::WebGLFramebuffer::deleteObjectImpl):
        (WebCore::WebGLFramebuffer::initializeAttachments):
        * inspector/CodeGeneratorInspector.py:
        * inspector/DOMPatchSupport.cpp:
        (WebCore::DOMPatchSupport::diff):
        (WebCore::DOMPatchSupport::innerPatchChildren):
        (WebCore::DOMPatchSupport::removeChildAndMoveToNew):
        * inspector/InjectedScriptManager.cpp:
        (WebCore::InjectedScriptManager::injectedScriptForId):
        (WebCore::InjectedScriptManager::injectedScriptIdFor):
        (WebCore::InjectedScriptManager::discardInjectedScriptsFor):
        (WebCore::InjectedScriptManager::releaseObjectGroup):
        (WebCore::InjectedScriptManager::injectedScriptFor):
        * inspector/InspectorCSSAgent.cpp:
        (WebCore::SelectorProfile::commitSelector):
        (WebCore::SelectorProfile::commitSelectorTime):
        (WebCore::SelectorProfile::toInspectorObject):
        (WebCore::UpdateRegionLayoutTask::onTimer):
        (WebCore::InspectorCSSAgent::forcePseudoState):
        (WebCore::InspectorCSSAgent::asInspectorStyleSheet):
        (WebCore::InspectorCSSAgent::assertStyleSheetForId):
        (WebCore::InspectorCSSAgent::didRemoveDOMNode):
        (WebCore::InspectorCSSAgent::didModifyDOMAttr):
        (WebCore::InspectorCSSAgent::resetPseudoStates):
        * inspector/InspectorConsoleAgent.cpp:
        (WebCore::InspectorConsoleAgent::stopTiming):
        (WebCore::InspectorConsoleAgent::count):
        * inspector/InspectorDOMAgent.cpp:
        (WebCore::InspectorDOMAgent::nodeForId):
        (WebCore::InspectorDOMAgent::performSearch):
        (WebCore::InspectorDOMAgent::getSearchResults):
        * inspector/InspectorDOMDebuggerAgent.cpp:
        (WebCore::InspectorDOMDebuggerAgent::willSendXMLHttpRequest):
        * inspector/InspectorDOMStorageAgent.cpp:
        (WebCore::InspectorDOMStorageAgent::clearFrontend):
        (WebCore::InspectorDOMStorageAgent::enable):
        (WebCore::InspectorDOMStorageAgent::storageId):
        (WebCore::InspectorDOMStorageAgent::getDOMStorageResourceForId):
        (WebCore::InspectorDOMStorageAgent::didUseDOMStorage):
        (WebCore::InspectorDOMStorageAgent::memoryBytesUsedByStorageCache):
        * inspector/InspectorDatabaseAgent.cpp:
        (WebCore::InspectorDatabaseAgent::enable):
        (WebCore::InspectorDatabaseAgent::databaseId):
        (WebCore::InspectorDatabaseAgent::findByFileName):
        (WebCore::InspectorDatabaseAgent::databaseForId):
        * inspector/InspectorDebuggerAgent.cpp:
        (WebCore::InspectorDebuggerAgent::setBreakpointByUrl):
        (WebCore::InspectorDebuggerAgent::removeBreakpoint):
        (WebCore::InspectorDebuggerAgent::resolveBreakpoint):
        (WebCore::InspectorDebuggerAgent::searchInContent):
        (WebCore::InspectorDebuggerAgent::getScriptSource):
        (WebCore::InspectorDebuggerAgent::didParseSource):
        * inspector/InspectorIndexedDBAgent.cpp:
        (WebCore):
        * inspector/InspectorMemoryAgent.cpp:
        (WebCore):
        * inspector/InspectorPageAgent.cpp:
        (WebCore::cachedResourcesForFrame):
        (WebCore::InspectorPageAgent::didClearWindowObjectInWorld):
        (WebCore::InspectorPageAgent::frameDetached):
        * inspector/InspectorProfilerAgent.cpp:
        (WebCore::InspectorProfilerAgent::getProfileHeaders):
        (WebCore):
        (WebCore::InspectorProfilerAgent::getProfile):
        * inspector/InspectorResourceAgent.cpp:
        (WebCore::buildObjectForHeaders):
        (WebCore::InspectorResourceAgent::willSendRequest):
        (WebCore::InspectorResourceAgent::documentThreadableLoaderStartedLoadingForClient):
        (WebCore::InspectorResourceAgent::willLoadXHR):
        (WebCore::InspectorResourceAgent::replayXHR):
        * inspector/InspectorState.cpp:
        (WebCore::InspectorState::getBoolean):
        (WebCore::InspectorState::getString):
        (WebCore::InspectorState::getLong):
        (WebCore::InspectorState::getDouble):
        (WebCore::InspectorState::getObject):
        * inspector/InspectorStyleSheet.cpp:
        (WebCore::InspectorStyle::styleWithProperties):
        (WebCore::InspectorStyleSheet::inspectorStyleForId):
        * inspector/InspectorValues.cpp:
        (WebCore::InspectorObjectBase::get):
        (WebCore::InspectorObjectBase::writeJSON):
        * inspector/InspectorWorkerAgent.cpp:
        (WebCore::InspectorWorkerAgent::workerContextTerminated):
        (WebCore::InspectorWorkerAgent::createWorkerFrontendChannelsForExistingWorkers):
        (WebCore::InspectorWorkerAgent::destroyWorkerFrontendChannels):
        * inspector/MemoryInstrumentationImpl.cpp:
        (WebCore::MemoryInstrumentationClientImpl::countObjectSize):
        * inspector/MemoryInstrumentationImpl.h:
        (WebCore::MemoryInstrumentationClientImpl::totalSize):
        (WebCore::MemoryInstrumentationClientImpl::reportedSizeForAllTypes):
        * inspector/NetworkResourcesData.cpp:
        (WebCore::NetworkResourcesData::setXHRReplayData):
        (WebCore::NetworkResourcesData::removeCachedResource):
        (WebCore::NetworkResourcesData::clear):
        * loader/CrossOriginAccessControl.cpp:
        (WebCore::isSimpleCrossOriginAccessRequest):
        (WebCore::createAccessControlPreflightRequest):
        * loader/CrossOriginPreflightResultCache.cpp:
        (WebCore::CrossOriginPreflightResultCacheItem::allowsCrossOriginHeaders):
        (WebCore::CrossOriginPreflightResultCache::canSkipPreflight):
        * loader/DocumentLoader.cpp:
        (WebCore::DocumentLoader::getSubresources):
        (WebCore::DocumentLoader::substituteResourceDeliveryTimerFired):
        * loader/MainResourceLoader.cpp:
        (WebCore::MainResourceLoader::didReceiveResponse):
        * loader/ResourceLoadScheduler.cpp:
        (WebCore::ResourceLoadScheduler::servePendingRequests):
        * loader/appcache/ApplicationCache.cpp:
        (WebCore::ApplicationCache::removeResource):
        (WebCore::ApplicationCache::clearStorageID):
        (WebCore::ApplicationCache::dump):
        * loader/appcache/ApplicationCacheGroup.cpp:
        (WebCore::ApplicationCacheGroup::didFinishLoadingManifest):
        (WebCore::ApplicationCacheGroup::startLoadingEntry):
        (WebCore::ApplicationCacheGroup::addEntry):
        * loader/appcache/ApplicationCacheHost.cpp:
        (WebCore::ApplicationCacheHost::fillResourceList):
        * loader/appcache/ApplicationCacheResource.cpp:
        (WebCore::ApplicationCacheResource::estimatedSizeInStorage):
        * loader/appcache/ApplicationCacheStorage.cpp:
        (WebCore::ApplicationCacheStorage::findOrCreateCacheGroup):
        (WebCore::ApplicationCacheStorage::cacheGroupForURL):
        (WebCore::ApplicationCacheStorage::fallbackCacheGroupForURL):
        (WebCore::ApplicationCacheStorage::store):
        (WebCore::ApplicationCacheStorage::empty):
        (WebCore::ApplicationCacheStorage::storeCopyOfCache):
        * loader/archive/ArchiveFactory.cpp:
        (WebCore::ArchiveFactory::registerKnownArchiveMIMETypes):
        * loader/cache/CachedRawResource.cpp:
        (WebCore::CachedRawResource::canReuse):
        * loader/cache/CachedResource.cpp:
        (WebCore::CachedResource::switchClientsToRevalidatedResource):
        (WebCore::CachedResource::updateResponseAfterRevalidation):
        * loader/cache/CachedResourceClientWalker.h:
        (WebCore::CachedResourceClientWalker::CachedResourceClientWalker):
        * loader/cache/CachedResourceLoader.cpp:
        (WebCore::CachedResourceLoader::~CachedResourceLoader):
        (WebCore::CachedResourceLoader::requestResource):
        (WebCore::CachedResourceLoader::reloadImagesIfNotDeferred):
        (WebCore::CachedResourceLoader::removeCachedResource):
        (WebCore::CachedResourceLoader::garbageCollectDocumentResources):
        * loader/cache/MemoryCache.cpp:
        (WebCore::MemoryCache::removeResourcesWithOrigin):
        (WebCore::MemoryCache::getOriginsWithCache):
        (WebCore::MemoryCache::getStatistics):
        (WebCore::MemoryCache::setDisabled):
        * loader/icon/IconDatabase.cpp:
        (WebCore::IconDatabase::removeAllIcons):
        (WebCore::IconDatabase::iconRecordCountWithData):
        (WebCore::IconDatabase::performPendingRetainAndReleaseOperations):
        * page/DOMWindow.cpp:
        (WebCore::DOMWindow::dispatchAllPendingBeforeUnloadEvents):
        (WebCore::DOMWindow::dispatchAllPendingUnloadEvents):
        * page/EventHandler.cpp:
        (WebCore::EventHandler::handleTouchEvent):
        * page/Frame.cpp:
        (WebCore::Frame::injectUserScripts):
        * page/PageGroup.cpp:
        (WebCore::PageGroup::pageGroup):
        (WebCore::PageGroup::closeLocalStorage):
        (WebCore::PageGroup::clearLocalStorageForAllOrigins):
        (WebCore::PageGroup::clearLocalStorageForOrigin):
        (WebCore::PageGroup::syncLocalStorage):
        (WebCore::PageGroup::addUserScriptToWorld):
        (WebCore::PageGroup::addUserStyleSheetToWorld):
        (WebCore::PageGroup::removeUserScriptFromWorld):
        (WebCore::PageGroup::removeUserStyleSheetFromWorld):
        * page/PageSerializer.cpp:
        (WebCore::PageSerializer::urlForBlankFrame):
        * page/SecurityPolicy.cpp:
        (WebCore::SecurityPolicy::addOriginAccessWhitelistEntry):
        (WebCore::SecurityPolicy::removeOriginAccessWhitelistEntry):
        * page/Settings.cpp:
        (WebCore::setGenericFontFamilyMap):
        (WebCore::getGenericFontFamilyForScript):
        * page/SpeechInput.cpp:
        (WebCore::SpeechInput::registerListener):
        * page/TouchDisambiguation.cpp:
        (WebCore::findGoodTouchTargets):
        * page/WindowFeatures.cpp:
        (WebCore::WindowFeatures::boolFeature):
        (WebCore::WindowFeatures::floatFeature):
        * page/animation/AnimationController.cpp:
        (WebCore::AnimationControllerPrivate::updateAnimations):
        (WebCore::AnimationControllerPrivate::suspendAnimationsForDocument):
        (WebCore::AnimationControllerPrivate::resumeAnimationsForDocument):
        (WebCore::AnimationControllerPrivate::numberOfActiveAnimations):
        * page/animation/CompositeAnimation.cpp:
        (WebCore::CompositeAnimation::clearRenderer):
        (WebCore::CompositeAnimation::updateTransitions):
        (WebCore::CompositeAnimation::updateKeyframeAnimations):
        (WebCore::CompositeAnimation::animate):
        (WebCore::CompositeAnimation::getAnimatedStyle):
        (WebCore::CompositeAnimation::setAnimating):
        (WebCore::CompositeAnimation::timeToNextService):
        (WebCore::CompositeAnimation::getAnimationForProperty):
        (WebCore::CompositeAnimation::suspendAnimations):
        (WebCore::CompositeAnimation::resumeAnimations):
        (WebCore::CompositeAnimation::overrideImplicitAnimations):
        (WebCore::CompositeAnimation::resumeOverriddenImplicitAnimations):
        (WebCore::CompositeAnimation::isAnimatingProperty):
        (WebCore::CompositeAnimation::numberOfActiveAnimations):
        * platform/Language.cpp:
        (WebCore::languageDidChange):
        * platform/MIMETypeRegistry.cpp:
        (WebCore::MIMETypeRegistry::getNormalizedMIMEType):
        * platform/audio/HRTFElevation.cpp:
        (WebCore::getConcatenatedImpulseResponsesForSubject):
        * platform/blackberry/CookieManager.cpp:
        (WebCore::CookieManager::generateHtmlFragmentForCookies):
        (WebCore::CookieManager::removeAllCookies):
        * platform/blackberry/CookieMap.cpp:
        (WebCore::CookieMap::removeOldestCookie):
        (WebCore::CookieMap::getAllChildCookies):
        * platform/cf/BinaryPropertyList.cpp:
        (WebCore::BinaryPropertyListPlan::writeIntegerArray):
        * platform/chromium/support/WebHTTPLoadInfo.cpp:
        (WebKit::addHeader):
        * platform/chromium/support/WebURLRequest.cpp:
        (WebKit::WebURLRequest::visitHTTPHeaderFields):
        * platform/chromium/support/WebURLResponse.cpp:
        (WebKit::WebURLResponse::addHTTPHeaderField):
        (WebKit::WebURLResponse::visitHTTPHeaderFields):
        * platform/graphics/DisplayRefreshMonitor.cpp:
        (WebCore::DisplayRefreshMonitorManager::ensureMonitorForClient):
        (WebCore::DisplayRefreshMonitorManager::unregisterClient):
        * platform/graphics/FontCache.cpp:
        (WebCore::FontCache::getCachedFontPlatformData):
        (WebCore::FontCache::getVerticalData):
        (WebCore::FontCache::getCachedFontData):
        (WebCore::FontCache::releaseFontData):
        (WebCore::FontCache::purgeInactiveFontData):
        * platform/graphics/GlyphPageTreeNode.cpp:
        (WebCore::GlyphPageTreeNode::treeGlyphPageCount):
        (WebCore::GlyphPageTreeNode::pageCount):
        (WebCore::GlyphPageTreeNode::pruneTreeCustomFontData):
        (WebCore::GlyphPageTreeNode::pruneTreeFontData):
        (WebCore::GlyphPageTreeNode::pruneCustomFontData):
        (WebCore::GlyphPageTreeNode::pruneFontData):
        (WebCore::GlyphPageTreeNode::showSubtree):
        (showGlyphPageTrees):
        * platform/graphics/TiledBackingStore.cpp:
        (WebCore::TiledBackingStore::updateTileBuffers):
        (WebCore::TiledBackingStore::resizeEdgeTiles):
        (WebCore::TiledBackingStore::setKeepRect):
        * platform/graphics/avfoundation/cf/MediaPlayerPrivateAVFoundationCF.cpp:
        (WebCore::AVFWrapper::avfWrapperForCallbackContext):
        * platform/graphics/blackberry/LayerTiler.cpp:
        (WebCore::LayerTiler::layerVisibilityChanged):
        (WebCore::LayerTiler::uploadTexturesIfNeeded):
        (WebCore::LayerTiler::addTileJob):
        (WebCore::LayerTiler::deleteTextures):
        (WebCore::LayerTiler::pruneTextures):
        (WebCore::LayerTiler::bindContentsTexture):
        * platform/graphics/blackberry/TextureCacheCompositingThread.cpp:
        (WebCore::TextureCacheCompositingThread::textureForTiledContents):
        (WebCore::TextureCacheCompositingThread::textureForColor):
        * platform/graphics/ca/GraphicsLayerCA.cpp:
        (WebCore::GraphicsLayerCA::moveOrCopyAnimations):
        (WebCore::GraphicsLayerCA::pauseAnimation):
        (WebCore::GraphicsLayerCA::layerDidDisplay):
        (WebCore::GraphicsLayerCA::updateGeometry):
        (WebCore::GraphicsLayerCA::updateTransform):
        (WebCore::GraphicsLayerCA::updateChildrenTransform):
        (WebCore::GraphicsLayerCA::updateMasksToBounds):
        (WebCore::GraphicsLayerCA::updateContentsVisibility):
        (WebCore::GraphicsLayerCA::updateContentsOpaque):
        (WebCore::GraphicsLayerCA::updateBackfaceVisibility):
        (WebCore::GraphicsLayerCA::updateFilters):
        (WebCore::GraphicsLayerCA::ensureStructuralLayer):
        (WebCore::GraphicsLayerCA::updateLayerDrawsContent):
        (WebCore::GraphicsLayerCA::updateContentsImage):
        (WebCore::GraphicsLayerCA::updateContentsRect):
        (WebCore::GraphicsLayerCA::updateMaskLayer):
        (WebCore::GraphicsLayerCA::updateLayerAnimations):
        (WebCore::GraphicsLayerCA::setAnimationOnLayer):
        (WebCore::GraphicsLayerCA::removeCAAnimationFromLayer):
        (WebCore::GraphicsLayerCA::pauseCAAnimationOnLayer):
        (WebCore::GraphicsLayerCA::suspendAnimations):
        (WebCore::GraphicsLayerCA::resumeAnimations):
        (WebCore::GraphicsLayerCA::findOrMakeClone):
        (WebCore::GraphicsLayerCA::setOpacityInternal):
        (WebCore::GraphicsLayerCA::updateOpacityOnLayer):
        * platform/graphics/ca/mac/TileCache.mm:
        (WebCore::TileCache::~TileCache):
        (WebCore::TileCache::setNeedsDisplay):
        (WebCore::TileCache::setScale):
        (WebCore::TileCache::setAcceleratesDrawing):
        (WebCore::TileCache::setTileDebugBorderWidth):
        (WebCore::TileCache::setTileDebugBorderColor):
        (WebCore::TileCache::revalidateTiles):
        * platform/graphics/ca/win/PlatformCALayerWin.cpp:
        (PlatformCALayer::animationStarted):
        (resubmitAllAnimations):
        (PlatformCALayer::animationForKey):
        * platform/graphics/chromium/FontCacheChromiumWin.cpp:
        (WebCore::LookupAltName):
        (WebCore::fontContainsCharacter):
        * platform/graphics/chromium/FontUtilsChromiumWin.cpp:
        (WebCore::getDerivedFontData):
        * platform/graphics/filters/CustomFilterGlobalContext.cpp:
        (WebCore::CustomFilterGlobalContext::~CustomFilterGlobalContext):
        (WebCore::CustomFilterGlobalContext::getValidatedProgram):
        (WebCore::CustomFilterGlobalContext::removeValidatedProgram):
        * platform/graphics/filters/CustomFilterProgram.cpp:
        (WebCore::CustomFilterProgram::notifyClients):
        * platform/graphics/harfbuzz/HarfBuzzSkia.cpp:
        (WebCore::getCachedHarfbuzzFace):
        (WebCore::releaseCachedHarfbuzzFace):
        * platform/graphics/harfbuzz/ng/HarfBuzzNGFace.cpp:
        (WebCore::HarfBuzzNGFace::HarfBuzzNGFace):
        (WebCore::HarfBuzzNGFace::~HarfBuzzNGFace):
        * platform/graphics/mac/SimpleFontDataCoreText.cpp:
        (WebCore::SimpleFontData::getCFStringAttributes):
        * platform/graphics/mac/SimpleFontDataMac.mm:
        (WebCore::SimpleFontData::canRenderCombiningCharacterSequence):
        * platform/graphics/opengl/Extensions3DOpenGLCommon.cpp:
        (WebCore::Extensions3DOpenGLCommon::getTranslatedShaderSourceANGLE):
        * platform/graphics/opengl/GraphicsContext3DOpenGLCommon.cpp:
        (WebCore::GraphicsContext3D::compileShader):
        (WebCore::GraphicsContext3D::mappedSymbolName):
        (WebCore::GraphicsContext3D::getShaderiv):
        (WebCore::GraphicsContext3D::getShaderInfoLog):
        (WebCore::GraphicsContext3D::getShaderSource):
        * platform/graphics/openvg/EGLDisplayOpenVG.cpp:
        (WebCore::EGLDisplayOpenVG::~EGLDisplayOpenVG):
        (WebCore::EGLDisplayOpenVG::destroySurface):
        (WebCore::EGLDisplayOpenVG::contextForSurface):
        * platform/graphics/texmap/TextureMapperGL.cpp:
        (WebCore::TextureMapperGLData::SharedGLData::currentSharedGLData):
        (WebCore::TextureMapperGLData::SharedGLData::~SharedGLData):
        * platform/graphics/texmap/TextureMapperShaderManager.cpp:
        (WebCore::TextureMapperShaderManager::getShaderProgram):
        (WebCore::TextureMapperShaderManager::getShaderForFilter):
        * platform/graphics/wince/FontPlatformData.cpp:
        (WebCore::FixedSizeFontData::create):
        * platform/gtk/DataObjectGtk.cpp:
        (WebCore::DataObjectGtk::forClipboard):
        * platform/gtk/GtkDragAndDropHelper.cpp:
        (WebCore::GtkDragAndDropHelper::handleGetDragData):
        (WebCore::GtkDragAndDropHelper::handleDragLeave):
        (WebCore::GtkDragAndDropHelper::handleDragMotion):
        (WebCore::GtkDragAndDropHelper::handleDragDataReceived):
        (WebCore::GtkDragAndDropHelper::handleDragDrop):
        * platform/gtk/RedirectedXCompositeWindow.cpp:
        (WebCore::filterXDamageEvent):
        * platform/gtk/RenderThemeGtk3.cpp:
        (WebCore::gtkStyleChangedCallback):
        (WebCore::getStyleContext):
        * platform/mac/ScrollbarThemeMac.mm:
        (+[WebScrollbarPrefsObserver appearancePrefsChanged:]):
        * platform/network/CredentialStorage.cpp:
        (WebCore::CredentialStorage::set):
        (WebCore::CredentialStorage::get):
        * platform/network/HTTPHeaderMap.cpp:
        (WebCore::HTTPHeaderMap::copyData):
        (WebCore::HTTPHeaderMap::get):
        * platform/network/MIMEHeader.cpp:
        (WebCore::MIMEHeader::parseHeader):
        * platform/network/ResourceHandle.cpp:
        (WebCore::ResourceHandle::create):
        * platform/network/ResourceRequestBase.cpp:
        (WebCore::ResourceRequestBase::addHTTPHeaderField):
        (WebCore::ResourceRequestBase::addHTTPHeaderFields):
        * platform/network/blackberry/ResourceRequestBlackBerry.cpp:
        (WebCore::ResourceRequest::targetTypeFromMimeType):
        (WebCore::ResourceRequest::initializePlatformRequest):
        * platform/network/cf/ResourceHandleCFNet.cpp:
        (WebCore::makeFinalRequest):
        * platform/network/cf/ResourceRequestCFNet.cpp:
        (WebCore::setHeaderFields):
        * platform/network/curl/ResourceHandleManager.cpp:
        (WebCore::ResourceHandleManager::initializeHandle):
        * platform/network/mac/ResourceRequestMac.mm:
        (WebCore::ResourceRequest::doUpdatePlatformRequest):
        * platform/network/qt/ResourceRequestQt.cpp:
        (WebCore::ResourceRequest::toNetworkRequest):
        * platform/network/soup/ResourceHandleSoup.cpp:
        (WebCore::sendRequestCallback):
        (WebCore::ResourceHandle::setClientCertificate):
        * platform/network/soup/ResourceRequestSoup.cpp:
        (WebCore::ResourceRequest::updateSoupMessage):
        (WebCore::ResourceRequest::toSoupMessage):
        * platform/network/soup/ResourceResponseSoup.cpp:
        (WebCore::ResourceResponse::toSoupMessage):
        * platform/network/win/ResourceHandleWin.cpp:
        (WebCore::ResourceHandle::start):
        * platform/qt/RunLoopQt.cpp:
        (WebCore::RunLoop::TimerBase::timerFired):
        * platform/text/LocaleToScriptMappingDefault.cpp:
        (WebCore::scriptNameToCode):
        (WebCore::localeToScriptCodeForFontSelection):
        * platform/text/TextEncodingRegistry.cpp:
        (WebCore::pruneBlacklistedCodecs):
        (WebCore::dumpTextEncodingNameMap):
        * platform/text/transcoder/FontTranscoder.cpp:
        (WebCore::FontTranscoder::converterType):
        * platform/text/win/TextCodecWin.cpp:
        (WebCore::LanguageManager::LanguageManager):
        (WebCore::getCodePage):
        (WebCore::TextCodecWin::registerExtendedEncodingNames):
        (WebCore::TextCodecWin::registerExtendedCodecs):
        (WebCore::TextCodecWin::enumerateSupportedEncodings):
        * platform/win/ClipboardUtilitiesWin.cpp:
        (WebCore::getDataMapItem):
        (WebCore::getClipboardData):
        (WebCore::setClipboardData):
        * platform/win/ClipboardWin.cpp:
        (WebCore::ClipboardWin::types):
        * platform/win/FileSystemWin.cpp:
        (WebCore::cachedStorageDirectory):
        * platform/win/RunLoopWin.cpp:
        (WebCore::RunLoop::TimerBase::timerFired):
        * platform/win/WCDataObject.cpp:
        (WebCore::WCDataObject::createInstance):
        * platform/wince/MIMETypeRegistryWinCE.cpp:
        (WebCore::MIMETypeRegistry::getPreferredExtensionForMIMEType):
        * platform/wx/ContextMenuWx.cpp:
        (WebCore::ContextMenu::appendItem):
        * plugins/PluginDatabase.cpp:
        (WebCore::PluginDatabase::refresh):
        (WebCore::PluginDatabase::MIMETypeForExtension):
        (WebCore::PluginDatabase::remove):
        * plugins/PluginMainThreadScheduler.cpp:
        (WebCore::PluginMainThreadScheduler::scheduleCall):
        (WebCore::PluginMainThreadScheduler::dispatchCalls):
        * plugins/PluginStream.cpp:
        (WebCore::PluginStream::startStream):
        * plugins/blackberry/PluginDataBlackBerry.cpp:
        (WebCore::PluginData::initPlugins):
        * plugins/wx/PluginDataWx.cpp:
        (WebCore::PluginData::initPlugins):
        * rendering/ExclusionShapeInsideInfo.cpp:
        (WebCore::ExclusionShapeInsideInfo::ensureExclusionShapeInsideInfoForRenderBlock):
        * rendering/FlowThreadController.cpp:
        (WebCore::FlowThreadController::unregisterNamedFlowContentNode):
        * rendering/InlineFlowBox.cpp:
        (WebCore::InlineFlowBox::requiresIdeographicBaseline):
        (WebCore::InlineFlowBox::addTextBoxVisualOverflow):
        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::clearFloats):
        * rendering/RenderBlockLineLayout.cpp:
        (WebCore::setLogicalWidthForTextRun):
        * rendering/RenderBoxModelObject.cpp:
        (WebCore::ImageQualityController::highQualityRepaintTimerFired):
        (WebCore::ImageQualityController::shouldPaintAtLowQuality):
        * rendering/RenderCounter.cpp:
        (WebCore::RenderCounter::destroyCounterNodes):
        (WebCore::RenderCounter::destroyCounterNode):
        (WebCore::updateCounters):
        (WebCore::RenderCounter::rendererStyleChanged):
        * rendering/RenderFlowThread.cpp:
        (WebCore::RenderFlowThread::setRegionRangeForBox):
        (WebCore::RenderFlowThread::getRegionRangeForBox):
        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::paint):
        (WebCore::performOverlapTests):
        * rendering/RenderLayerFilterInfo.cpp:
        (WebCore::RenderLayerFilterInfo::filterInfoForRenderLayer):
        (WebCore::RenderLayerFilterInfo::createFilterInfoForRenderLayerIfNeeded):
        * rendering/RenderNamedFlowThread.cpp:
        (WebCore::RenderNamedFlowThread::dependsOn):
        (WebCore::RenderNamedFlowThread::pushDependencies):
        * rendering/RenderRegion.cpp:
        (WebCore::RenderRegion::setRenderBoxRegionInfo):
        (WebCore::RenderRegion::setRegionObjectsRegionStyle):
        (WebCore::RenderRegion::restoreRegionObjectsOriginalStyle):
        (WebCore::RenderRegion::computeChildrenStyleInRegion):
        * rendering/RenderTableSection.cpp:
        (WebCore::RenderTableSection::cachedCollapsedBorder):
        * rendering/RenderThemeMac.mm:
        (WebCore::RenderThemeMac::systemColor):
        * rendering/RenderView.cpp:
        (WebCore::RenderView::selectionBounds):
        (WebCore::RenderView::setSelection):
        * rendering/RenderWidget.cpp:
        (WebCore::WidgetHierarchyUpdatesSuspensionScope::moveWidgets):
        * rendering/RootInlineBox.cpp:
        (WebCore::RootInlineBox::ascentAndDescentForBox):
        * rendering/VerticalPositionCache.h:
        (WebCore::VerticalPositionCache::get):
        * rendering/svg/RenderSVGInlineText.cpp:
        (WebCore::RenderSVGInlineText::characterStartsNewTextChunk):
        * rendering/svg/RenderSVGResourceFilter.cpp:
        (WebCore::RenderSVGResourceFilter::primitiveAttributeChanged):
        * rendering/svg/RenderSVGResourceGradient.cpp:
        (WebCore::RenderSVGResourceGradient::applyResource):
        * rendering/svg/RenderSVGResourcePattern.cpp:
        (WebCore::RenderSVGResourcePattern::applyResource):
        * rendering/svg/SVGResourcesCache.cpp:
        (WebCore::SVGResourcesCache::resourceDestroyed):
        * rendering/svg/SVGRootInlineBox.cpp:
        (WebCore::swapItemsInLayoutAttributes):
        * rendering/svg/SVGTextLayoutAttributes.cpp:
        (WebCore::SVGTextLayoutAttributes::dump):
        * rendering/svg/SVGTextLayoutAttributesBuilder.cpp:
        (WebCore::SVGTextLayoutAttributesBuilder::buildCharacterDataMap):
        (WebCore::SVGTextLayoutAttributesBuilder::fillCharacterDataMap):
        * rendering/svg/SVGTextLayoutEngine.cpp:
        (WebCore::SVGTextLayoutEngine::layoutTextOnLineOrPath):
        * rendering/svg/SVGTextMetricsBuilder.cpp:
        (WebCore::SVGTextMetricsBuilder::measureTextRenderer):
        * storage/StorageAreaSync.cpp:
        (WebCore::StorageAreaSync::syncTimerFired):
        (WebCore::StorageAreaSync::performImport):
        (WebCore::StorageAreaSync::sync):
        * storage/StorageMap.cpp:
        (WebCore::StorageMap::key):
        (WebCore::StorageMap::setItem):
        * storage/StorageNamespaceImpl.cpp:
        (WebCore::StorageNamespaceImpl::localStorageNamespace):
        (WebCore::StorageNamespaceImpl::copy):
        (WebCore::StorageNamespaceImpl::close):
        (WebCore::StorageNamespaceImpl::clearAllOriginsForDeletion):
        (WebCore::StorageNamespaceImpl::sync):
        * svg/SVGDocumentExtensions.cpp:
        (WebCore::SVGDocumentExtensions::removeAnimationElementFromTarget):
        (WebCore::SVGDocumentExtensions::removeAllAnimationElementsFromTarget):
        (WebCore::SVGDocumentExtensions::addPendingResource):
        (WebCore::SVGDocumentExtensions::isElementPendingResources):
        (WebCore::SVGDocumentExtensions::removeElementFromPendingResources):
        (WebCore::SVGDocumentExtensions::setOfElementsReferencingTarget):
        (WebCore::SVGDocumentExtensions::removeAllTargetReferencesForElement):
        (WebCore::SVGDocumentExtensions::removeAllElementReferencesForTarget):
        * svg/SVGElement.cpp:
        (WebCore::SVGElement::~SVGElement):
        * svg/animation/SMILTimeContainer.cpp:
        (WebCore::SMILTimeContainer::setElapsed):
        (WebCore::SMILTimeContainer::updateAnimations):
        * svg/graphics/SVGImageCache.cpp:
        (WebCore::SVGImageCache::~SVGImageCache):
        (WebCore::SVGImageCache::removeClientFromCache):
        (WebCore::SVGImageCache::requestedSizeAndScales):
        (WebCore::SVGImageCache::imageContentChanged):
        (WebCore::SVGImageCache::redraw):
        (WebCore::SVGImageCache::lookupOrCreateBitmapImageForRenderer):
        * svg/graphics/filters/SVGFilterBuilder.h:
        (WebCore::SVGFilterBuilder::effectReferences):
        (WebCore::SVGFilterBuilder::addBuiltinEffects):
        * svg/properties/SVGAnimatedProperty.h:
        (WebCore::SVGAnimatedProperty::~SVGAnimatedProperty):
        * svg/properties/SVGAttributeToPropertyMap.cpp:
        (WebCore::SVGAttributeToPropertyMap::addProperties):
        (WebCore::SVGAttributeToPropertyMap::synchronizeProperties):
        * workers/WorkerContext.cpp:
        (WebCore::WorkerContext::hasPendingActivity):
        * workers/WorkerEventQueue.cpp:
        (WebCore::WorkerEventQueue::close):
        * xml/XMLHttpRequest.cpp:
        (WebCore::XMLHttpRequest::setRequestHeaderInternal):
        (WebCore::XMLHttpRequest::getAllResponseHeaders):
        * xml/XPathFunctions.cpp:
        (WebCore::XPath::createFunction):
        * xml/XPathParser.cpp:
        (isAxisName):
        * xml/XSLTProcessorLibxslt.cpp:
        (WebCore::xsltParamArrayFromParameterMap):
        * xml/XSLTProcessorQt.cpp:
        (WebCore::XSLTProcessor::transformToString):

2012-10-07  Geoffrey Garen  <ggaren@apple.com>

        REGRESSION (r130584): Crashes in JSC::MarkedAllocator::allocateSlowCase, failing fast/dom/gc-dom-tree-lifetime.html
        https://bugs.webkit.org/show_bug.cgi?id=98612

        Reviewed by Darin Adler.

        Since DOM modification can happen outside of JS, calls into JS due to
        DOM modification need to take the JS lock.

        * bindings/js/JSNodeCustom.cpp:
        (WebCore::willCreatePossiblyOrphanedTreeByRemovalSlowCase): Take the JS
        lock before doing a JS allocation, since this may be a JS entrypoint.

        * bindings/js/JSNodeCustom.h:
        (WebCore::willCreatePossiblyOrphanedTreeByRemoval): Split out a slow case
        to help the inliner.

2012-10-07  Nick Carter  <nick@chromium.org>

        [chromium] Crash in WebCore::GraphicsLayerChromium::setContentsToImage
        https://bugs.webkit.org/show_bug.cgi?id=98456

        Reviewed by James Robinson.

        Handle null return of nativeImageForCurrentFrame.

        Test: compositing/images/truncated-direct-png-image.html

        * platform/graphics/chromium/GraphicsLayerChromium.cpp:
        (WebCore::GraphicsLayerChromium::setContentsToImage):

2012-10-07  Benjamin Poulain  <benjamin@webkit.org>

        WTFURL: implement URL port removal for HTMLAnchorElement
        https://bugs.webkit.org/show_bug.cgi?id=98604

        Reviewed by Adam Barth.

        * platform/KURLWTFURL.cpp:
        (WebCore::KURL::hasPort):
        (WebCore::KURL::removePort):
        (WebCore::KURL::isHierarchical):
        Implement those methods to pass the port removal test of HTMLAnchorElement.

2012-10-05  Dirk Schulze  <krit@webkit.org>

        SVG radialGradient should support 'fr' for focal radius (just like Canvas)
        https://bugs.webkit.org/show_bug.cgi?id=97986

        Reviewed by Daniel Bates.

        Update SVGRadialGradient to the changed behavior in SVG2: http://www.w3.org/TR/SVG2/pservers.html#RadialGradients
        SVG2 adds the focal radius for radial gradients. Color stops will start from the edge of
        the focal radius.
        The new specification does not limit the focal point to be inside the radial gradients radius.
        This makes SVGRadialGradient consistent with the radial gradient on Canvas.

        Test: svg/custom/radialGradient-focal-radius.svg

        * rendering/svg/RenderSVGResourceRadialGradient.cpp:
            Remove checks for position of focal point. The focal point
            can be placed every where outside the radius of the gradient now.
        (WebCore::RenderSVGResourceRadialGradient::focalRadius):
            Add new method to get the focal radius from SVGRadialGradientElement.
        (WebCore::RenderSVGResourceRadialGradient::buildGradient):
        * rendering/svg/RenderSVGResourceRadialGradient.h:
        (RenderSVGResourceRadialGradient):
        * rendering/svg/SVGRenderTreeAsText.cpp:
        (WebCore::writeSVGResourceContainer):
            Modify DRT output to include the focal radius.
        * svg/RadialGradientAttributes.h:
        (WebCore::RadialGradientAttributes::RadialGradientAttributes):
        (WebCore::RadialGradientAttributes::fr):
        (WebCore::RadialGradientAttributes::setFr):
        (WebCore::RadialGradientAttributes::hasFr):
        (RadialGradientAttributes):
            New setters and getters for focal radius.
        * svg/SVGRadialGradientElement.cpp:
        (WebCore):
        (WebCore::SVGRadialGradientElement::SVGRadialGradientElement):
        (WebCore::SVGRadialGradientElement::isSupportedAttribute):
        (WebCore::SVGRadialGradientElement::parseAttribute):
        (WebCore::SVGRadialGradientElement::collectGradientAttributes):
        (WebCore::SVGRadialGradientElement::selfHasRelativeLengths):
            Ditto.
        * svg/SVGRadialGradientElement.h:
        (SVGRadialGradientElement):
        * svg/SVGRadialGradientElement.idl:
        * svg/svgattrs.in:
            Add 'fr' as new attribute to the SVG attribute list.

2012-10-07  Glenn Adams  <glenn@skynav.com>

        Use start instead of -webkit-auto in default and quirks mode stylesheets.
        https://bugs.webkit.org/show_bug.cgi?id=98609

        Reviewed by Antti Koivisto.

        Change text-align use of legacy '-webkit-auto' to 'start' in the few places where it is used
        in default/quirks stylesheets.
        
        No new tests. No change of rendering/styling behavior. No performance impact.

        * css/html.css:
        (input, textarea, keygen, select, button, isindex):
        (ruby > rt):
        * css/quirks.css:
        (table):

2012-10-06  Raul Hudea  <rhudea@adobe.com>

        -webkit-clip-path should parse IRIs
        https://bugs.webkit.org/show_bug.cgi?id=96381

        Reviewed by Andreas Kling.

        Implemented the clipping via referencing a SVG clipPath. Currently it works only if the clipPath is defined
        before using it on an HTML element. The forward reference issue is tracked via https://bugs.webkit.org/show_bug.cgi?id=90405.

        Tests: css3/masking/clip-path-reference-userSpaceOnUse.html
               css3/masking/clip-path-reference.html
               fast/masking/parsing-clip-path-iri.html

        * css/CSSComputedStyleDeclaration.cpp:
        (WebCore::CSSComputedStyleDeclaration::getPropertyCSSValue): Add handling for SVG clipPath references.
        * css/CSSParser.cpp:
        (WebCore::CSSParser::parseValue): Add handling for SVG clipPath references.
        * css/StyleBuilder.cpp:
        (WebCore::ApplyPropertyClipPath::applyValue): Add handling for SVG references.
        * rendering/ClipPathOperation.h:
        (ReferenceClipPathOperation): Added a new class corresponding to SVG referenced clipPath.
        (WebCore::ReferenceClipPathOperation::create):
        (WebCore::ReferenceClipPathOperation::url):
        (WebCore::ReferenceClipPathOperation::fragment):
        (WebCore::ReferenceClipPathOperation::operator==):
        (WebCore::ReferenceClipPathOperation::ReferenceClipPathOperation):
        (WebCore):
        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::paintLayerContents): Add handling for ReferenceClipPathOperation.
        * rendering/svg/RenderSVGResourceClipper.h:
        (RenderSVGResourceClipper): Made applyClippingToContext public as it needs to be called directly for HTML elements.

2012-10-06  Pratik Solanki  <psolanki@apple.com>

        Reduce calls to CGImageSourceCopyPropertiesAtIndex from frameSizeAtIndex
        https://bugs.webkit.org/show_bug.cgi?id=98607

        Reviewed by Dan Bernstein.

        Refactor code so that we avoid a second call to CGImageSourceCopyPropertiesAtIndex under
        ImageSource::frameSizeAtIndex().

        No new tests because no functional change.

        * platform/graphics/cg/ImageSourceCG.cpp:
        (WebCore::orientationFromProperties):
        (WebCore):
        (WebCore::ImageSource::frameSizeAtIndex):
        (WebCore::ImageSource::orientationAtIndex):

2012-10-06  Mark Rowe  <mrowe@apple.com>

        Build fix.

        Stop calling -[NSSliderCell setTitle:]. It's never done anything on OS X.

        * rendering/RenderThemeMac.mm:
        (WebCore::RenderThemeMac::sliderThumbHorizontal):
        (WebCore::RenderThemeMac::sliderThumbVertical):

2012-10-06  Andreas Kling  <kling@webkit.org>

        Clipboard::types() should return an ordered collection.
        <http://webkit.org/b/98547>

        Reviewed by Darin Adler.

        Let Clipboard::types() return a ListHashSet<String> instead of a HashSet<String> to make sure
        it retains the order in which type strings are added.

        No test, this fixes an issue that was uncovered when lowering the default table size of WTF
        hash tables, causing the HashSet<String> to rehash and reorder itself.

        * bindings/js/JSClipboardCustom.cpp:
        (WebCore::JSClipboard::types):
        * bindings/v8/custom/V8ClipboardCustom.cpp:
        (WebCore::V8Clipboard::typesAccessorGetter):
        * dom/Clipboard.h:
        (Clipboard):
        * platform/blackberry/ClipboardBlackBerry.cpp:
        (WebCore::ClipboardBlackBerry::types):
        * platform/blackberry/ClipboardBlackBerry.h:
        (ClipboardBlackBerry):
        * platform/chromium/ChromiumDataObject.cpp:
        (WebCore::ChromiumDataObject::types):
        * platform/chromium/ChromiumDataObject.h:
        (ChromiumDataObject):
        * platform/chromium/ClipboardChromium.cpp:
        (WebCore::ClipboardChromium::types):
        * platform/chromium/ClipboardChromium.h:
        (ClipboardChromium):
        * platform/efl/ClipboardEfl.cpp:
        (WebCore::ClipboardEfl::types):
        * platform/efl/ClipboardEfl.h:
        (ClipboardEfl):
        * platform/gtk/ClipboardGtk.cpp:
        (WebCore::ClipboardGtk::types):
        * platform/gtk/ClipboardGtk.h:
        (ClipboardGtk):
        * platform/mac/ClipboardMac.h:
        (ClipboardMac):
        * platform/mac/ClipboardMac.mm:
        (WebCore::addHTMLClipboardTypesForCocoaType):
        (WebCore::ClipboardMac::types):
        * platform/qt/ClipboardQt.cpp:
        (WebCore::ClipboardQt::types):
        * platform/qt/ClipboardQt.h:
        (ClipboardQt):
        * platform/win/ClipboardWin.cpp:
        (WebCore::addMimeTypesForFormat):
        (WebCore::ClipboardWin::types):
        * platform/win/ClipboardWin.h:
        (ClipboardWin):
        * platform/wx/ClipboardWx.cpp:
        (WebCore::ClipboardWx::types):
        * platform/wx/ClipboardWx.h:
        (ClipboardWx):

2012-10-06  Geoffrey Garen  <ggaren@apple.com>

        If Node X is reachable from JavaScript, all Nodes in the same tree should be kept alive
        https://bugs.webkit.org/show_bug.cgi?id=88834

        Reviewed by Gavin Barraclough.

        Follow-up patch to address some comments by Darin Adler.

        * bindings/js/JSNodeCustom.h:
        (WebCore::willCreatePossiblyOrphanedTreeByRemoval): Save some space by
        collapsing comment lines. Use Node::hasChildNodes() for brevity.

2012-10-06  Benjamin Poulain  <benjamin@webkit.org>

        Fix weird use of KURL's protocolIs
        https://bugs.webkit.org/show_bug.cgi?id=98584

        Reviewed by Adam Barth.

        Converting a KURL to string is a bad idea.

        Invalid URLs can return a string that pass the tests, while an
        invalid URL will fail protocolIs().

        * loader/cache/CachedResource.cpp:
        (WebCore::CachedResource::removeClient):
        * platform/graphics/MediaPlayer.cpp:
        (WebCore::MediaPlayer::load):
        * platform/network/DataURL.cpp:
        (WebCore::handleDataURL):

2012-10-06  Dan Bernstein  <mitz@apple.com>

        WebCore part of <rdar://problem/12446507> [mac] WebKit clients cannot change the behavior of text-rendering: auto
        https://bugs.webkit.org/show_bug.cgi?id=98601

        Reviewed by Darin Adler.

        * WebCore.exp.in: Exported Font::setDefaultTypesettingFeatures().
        * platform/graphics/Font.cpp:
        (WebCore::Font::s_defaultTypesettingFeatures): Defined this static.
        (WebCore::Font::setDefaultTypesettingFeatures): Added this setter.
        (WebCore::Font::defaultTypesettingFeatures): Added this getter.
        * platform/graphics/Font.h:
        (WebCore::Font::typesettingFeatures): Changed to use the value of the new static member
        s_defaultTypesettingFeatures, rather than 0, if text-redering is set to auto.

2012-10-04  Geoffrey Garen  <ggaren@apple.com>

        If Node X is reachable from JavaScript, all Nodes in the same tree should be kept alive
        https://bugs.webkit.org/show_bug.cgi?id=88834

        Reviewed by Gavin Barraclough.

        * bindings/js/JSNodeCustom.cpp:
        (WebCore::isObservable): Clarified this comment, since it seems to have
        misled some folks. 

        * bindings/js/JSNodeCustom.h:
        (WebCore::willCreatePossiblyOrphanedTreeByRemoval): New helper function
        to ensure that a disconnected tree is visible to JavaScript.

        * bindings/js/ScriptState.cpp:
        (WebCore::mainWorldScriptState): Need to check for null because a document's
        frame can be null.

        * dom/ContainerNode.cpp:
        (WebCore::dispatchChildRemovalEvents): When we remove a subtree from the
        document, we sever the reference that JavaScript previously held by
        referencing its root. So, we give JavaScript an opportunity to establish
        a reference to the new root.

2012-10-06  Byungwoo Lee  <bw80.lee@samsung.com>

        Fix build warning : -Wunused-parameter.
        https://bugs.webkit.org/show_bug.cgi?id=98583

        Reviewed by Kentaro Hara.

        Use ASSERT_UNUSED() macro to remove build warning.

        * plugins/PluginStream.cpp:
        (WebCore::PluginStream::delayDeliveryTimerFired):
        (WebCore::PluginStream::didReceiveResponse):
        (WebCore::PluginStream::didReceiveData):
        (WebCore::PluginStream::didFail):
        (WebCore::PluginStream::didFinishLoading):
        * plugins/PluginView.cpp:
        (WebCore::PluginView::requestTimerFired):
        (WebCore::PluginView::invalidateTimerFired):

2012-10-05  Adam Barth  <abarth@webkit.org>

        [V8] toV8(Node*, ...) does more work than needed (6% faster on dom-traverse)
        https://bugs.webkit.org/show_bug.cgi?id=98567

        Reviewed by Kentaro Hara.

        This patch introduces toV8Fast for Node*. This function works a
        differently from the existing toV8 function in two ways:

        1) It uses the inline wrapper cache in Node to determine if we're
           executing in the main world. This is faster both in the case when
           isolated worlds exist because we don't need to retrieve any state
           for the current context.

        2) It doesn't attempt to inline the hash table lookup used to find the
           wrapper in the isolated world. There isn't a big need to inline this
           code since performance in the isolated world case is dominated by
           the hash table lookup.

        Because of these two changes, toV8Fast is small enough to inline into
        each attribute getter profitably. Over time, I would like to convert
        all the performance critical uses of toV8(Node*) to toV8Fast. At that
        point, we can delete toV8 and rename toV8Slow to toV8.

        * bindings/scripts/CodeGeneratorV8.pm:
        (GenerateHeader):
        (GenerateNormalAttrGetter):

2012-10-05  Huang Dongsung  <luxtella@company100.net>

        [mac] REGRESSION (r122215): Animated GIF outside the viewport doesn't play when scrolled into view.
        https://bugs.webkit.org/show_bug.cgi?id=94874

        Reviewed by Simon Fraser.

        Rollback previous patch because this patch caused two problems.
        1. GIF animation is occasionally paused when tiled scrolling is enabled.
        2. This change regressed Apple's Membuster benchmark by ~20% (80MB.)

        * loader/cache/CachedImage.cpp:
        (WebCore::CachedImage::shouldPauseAnimation):
        * loader/cache/CachedImage.h:
        (CachedImage):
        * loader/cache/CachedResource.h:
        * loader/cache/MemoryCache.cpp:
        (WebCore::MemoryCache::pruneLiveResourcesToSize):
        * rendering/RenderObject.cpp:
        (WebCore::RenderObject::willRenderImage):

2012-10-05  Xianzhu Wang  <wangxianzhu@chromium.org>

        OpenTypeVerticalData issue with DroidSansFallback.ttf on chromium-android and chromium-linux
        https://bugs.webkit.org/show_bug.cgi?id=97824

        Reviewed by Tony Chang.

        The issue occurred when a font that contains vert GSUB table but doesn't have
        a DFLT script and the first script doesn't have vert feature. Added logic to
        handle the case.

        Test: fast/writing-mode/vertical-subst-font-vert-no-dflt.html

        * platform/graphics/opentype/OpenTypeVerticalData.cpp:
        (FeatureList):
        (WebCore::OpenType::FeatureList::findFeature): Added to find the matching feature in FeatureList.
        (WebCore::OpenType::GSUBTable::feature): Added logic to handle the case of no DFLT script and no vert feature under the first script.

2012-10-05  Tony Chang  <tony@chromium.org>

        Form controls should always be horizontal
        https://bugs.webkit.org/show_bug.cgi?id=98563

        Reviewed by Ojan Vafai.

        Fix a regression where we didn't force form controls to be horizontal.

        Tests: fast/dom/HTMLMeterElement/meter-writing-mode.html
               fast/dom/HTMLProgressElement/progress-writing-mode.html
               fast/table/colspanMinWidth-vertical.html

        * css/html.css:
        (input, textarea, keygen, select, button, isindex, meter, progress):

2012-10-05  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r130556 and r130564.
        http://trac.webkit.org/changeset/130556
        http://trac.webkit.org/changeset/130564
        https://bugs.webkit.org/show_bug.cgi?id=98572

        The patch wasn't reviewed by a reviewer and it is breaking
        Chromium Windows (Requested by jchaffraix on #webkit).

        * WebCore.exp.in:
        * WebCore.xcodeproj/project.pbxproj:
        * css/mediaControls.css:
        (video::-webkit-media-text-track-container):
        (video::-webkit-media-text-track-past-nodes):
        (video::-webkit-media-text-track-future-nodes):
        (video::-webkit-media-text-track-display):
        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::HTMLMediaElement):
        (WebCore::HTMLMediaElement::attach):
        (WebCore::HTMLMediaElement::userIsInterestedInThisLanguage):
        (WebCore::HTMLMediaElement::userIsInterestedInThisTrackKind):
        (WebCore::HTMLMediaElement::setClosedCaptionsVisible):
        (WebCore::HTMLMediaElement::updateClosedCaptionsControls):
        * html/HTMLMediaElement.h:
        (HTMLMediaElement):
        * html/shadow/MediaControlElements.cpp:
        (WebCore):
        (WebCore::MediaControlTextTrackContainerElement::updateSizes):
        * html/shadow/MediaControlElements.h:
        (MediaControlTextTrackContainerElement):
        * html/shadow/MediaControlRootElement.cpp:
        (WebCore::MediaControlRootElement::updateTextTrackDisplay):
        * html/shadow/MediaControlRootElement.h:
        (MediaControlRootElement):
        * html/shadow/MediaControls.h:
        (MediaControls):
        * html/track/TextTrack.cpp:
        (WebCore::TextTrack::TextTrack):
        (WebCore::TextTrack::isValidKindKeyword):
        (WebCore::TextTrack::setKind):
        (WebCore::TextTrack::setMode):
        (WebCore::TextTrack::mode):
        * html/track/TextTrack.h:
        (WebCore::TextTrack::create):
        (WebCore::TextTrack::kind):
        (TextTrack):
        (WebCore::TextTrack::label):
        (WebCore::TextTrack::setLabel):
        (WebCore::TextTrack::language):
        (WebCore::TextTrack::setLanguage):
        * html/track/TextTrackCue.cpp:
        (WebCore::TextTrackCueBox::TextTrackCueBox):
        (WebCore::TextTrackCueBox::shadowPseudoId):
        (WebCore):
        (WebCore::TextTrackCue::updateDisplayTree):
        * html/track/TextTrackCue.h:
        (TextTrackCueBox):
        (TextTrackCue):
        * platform/mac/WebCoreSystemInterface.h:
        * platform/mac/WebCoreSystemInterface.mm:
        * rendering/CaptionPreferencesChangedListener.h: Removed.
        * rendering/RenderTheme.h:
        (WebCore):
        (RenderTheme):
        * rendering/RenderThemeMac.h:
        (RenderThemeMac):
        * rendering/RenderThemeMac.mm:
        (WebCore):
        (WebCore::RenderThemeMac::RenderThemeMac):
        (WebCore::RenderThemeMac::~RenderThemeMac):

2012-10-05  Tim Horton  <timothy_horton@apple.com>

        [cg] GraphicsContextCG should ask CG whether the shadow offset workaround is required
        https://bugs.webkit.org/show_bug.cgi?id=98565
        <rdar://problem/12436468>

        Reviewed by Simon Fraser.

        On Mountain Lion and above, CG can tell us whether we need to work around incorrect
        shadow offsets. Prior to Mountain Lion, we should assume we need to apply the workaround.

        No new tests, as this requires an obscure configuration to test.

        * WebCore.exp.in:
        * platform/graphics/cg/GraphicsContextCG.cpp:
        (WebCore::applyShadowOffsetWorkaroundIfNeeded):
        (WebCore::GraphicsContext::setPlatformShadow):
        * platform/mac/WebCoreSystemInterface.h: Add wkCGContextDrawsWithCorrectShadowOffsets.
        * platform/mac/WebCoreSystemInterface.mm: Add wkCGContextDrawsWithCorrectShadowOffsets.

2012-10-05  Anders Carlsson  <andersca@apple.com>

        Try to fix the build.

        * rendering/RenderThemeMac.mm:
        (WebCore::RenderThemeMac::captionsWindowColor):

2012-10-05  Eric Seidel  <eric@webkit.org>

        Remove needless virtual calls and inline RenderStyle::logical* to make table layout faster
        https://bugs.webkit.org/show_bug.cgi?id=98550

        Reviewed by Andreas Kling.

        This shaved another 5% (100ms) off of the runtime of resizecol.html microbenchmark:
        http://www.robohornet.org/tests/resizecol.html

        * rendering/AutoTableLayout.cpp:
        (WebCore::AutoTableLayout::recalcColumn):
        * rendering/style/RenderStyle.cpp:
        * rendering/style/RenderStyle.h:

2012-10-04  Eric Carlson  <eric.carlson@apple.com>

        Allow ports to override text track rendering style
        https://bugs.webkit.org/show_bug.cgi?id=97800
        <rdar://problem/12044964>

        Reviewed by Silvia Pfeiffer.

        * WebCore.exp.in: Export new WebkitSystemInterface functions.
        * WebCore.xcodeproj/project.pbxproj: Add CaptionPreferencesChangedListener.h.

        * css/mediaControls.css: Rearrange the caption CSS so it is possible to style the cue window,
            background, and text independently.

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::HTMLMediaElement): Initialize m_disableCaptions with theme->userPrefersCaptions().
        (WebCore::HTMLMediaElement::attach): Register for caption preferences change callbacks.
        (WebCore::HTMLMediaElement::detach): Unregister for caption preferences change callbacks.
        (WebCore::HTMLMediaElement::userPrefersCaptions): Return theme->userPrefersCaptions().
        (WebCore::HTMLMediaElement::userIsInterestedInThisTrackKind): Consider userPrefersCaptions().
        (WebCore::HTMLMediaElement::setClosedCaptionsVisible): Move the code that marks all tracks as
            un-configured to markCaptionAndSubtitleTracksAsUnconfigured so it can be reused.
        (WebCore::HTMLMediaElement::captionPreferencesChanged): New, force a reevaluation of all text tracks.
        (WebCore::HTMLMediaElement::markCaptionAndSubtitleTracksAsUnconfigured): New, code moved from 
            setClosedCaptionsVisible
        * html/HTMLMediaElement.h: Inherit from CaptionPreferencesChangedListener.

        * html/shadow/MediaControlElements.cpp:
        (WebCore::MediaControlTextTrackContainerElement::userCaptionPreferencesChanged): New, if theme
            has a captions style sheet override, inject it into the current page group, otherwise
            remove injected sheet.
        (WebCore::MediaControlTextTrackContainerElement::updateSizes): Get rid of unnecessary member
            variable. Get caption font scale from theme instead of hard coding.
        * html/shadow/MediaControlElements.h:

        * html/shadow/MediaControlRootElement.cpp:
        (WebCore::MediaControlRootElement::userCaptionPreferencesChanged): New.
        (WebCore::MediaControlRootElement::updateTextTrackDisplay):
        * html/shadow/MediaControlRootElement.h: Add userCaptionPreferencesChanged, minor cleanup.

        * html/shadow/MediaControls.h:
        (WebCore::MediaControls::userCaptionPreferencesChanged): New.

        * html/track/TextTrackCue.cpp:
        (WebCore::TextTrackCueBox::TextTrackCueBox): Set the shadow pseudo id.
        (WebCore::TextTrackCueBox::textTrackCueBoxShadowPseudoId): New, class method to return the 
            shadow pseudo id so it can be used elsewhere.
        (WebCore::TextTrackCueBox::shadowPseudoId): Call textTrackCueBoxShadowPseudoId.
        (WebCore::TextTrackCue::pastNodesShadowPseudoId): New, class method to return the 
            shadow pseudo id so it can be used elsewhere.
        (WebCore::TextTrackCue::futureNodesShadowPseudoId): Ditto.
        (WebCore::TextTrackCue::updateDisplayTree):
        * html/track/TextTrackCue.h:

        * platform/mac/WebCoreSystemInterface.h: Updated.
        * platform/mac/WebCoreSystemInterface.mm: Ditto.

        * rendering/CaptionPreferencesChangedListener.h: Added.

        * rendering/RenderTheme.h:
        (WebCore::RenderTheme::userPrefersCaptions): New, default do-nothing implementation.
        (WebCore::RenderTheme::userHasCaptionPreferences): Ditto.
        (WebCore::RenderTheme::captionFontSizeScale): Ditto.
        (WebCore::RenderTheme::captionsStyleSheetOverride): Ditto.
        (WebCore::RenderTheme::registerForCaptionPreferencesChangedCallbacks): Ditto.
        (WebCore::RenderTheme::unregisterForCaptionPreferencesChangedCallbacks): Ditto.

        * rendering/RenderThemeMac.h:
        * rendering/RenderThemeMac.mm:
        (WebCore::userCaptionPreferencesChangedNotificationCallback): New, receives preference changed notifications.
        (WebCore::RenderThemeMac::RenderThemeMac): Initialize m_listeningForCaptionPreferenceNotifications.
        (WebCore::RenderThemeMac::~RenderThemeMac): Unregister for notifications if necessary.
        (WebCore::RenderThemeMac::userHasCaptionPreferences): New, passthrough to WKSI function.
        (WebCore::RenderThemeMac::userPrefersCaptions): Ditto.
        (WebCore::RenderThemeMac::captionsWindowColor): Return Color with user's caption window color preference.
        (WebCore::RenderThemeMac::captionsBackgroundColor): Return Color with user's caption 
            background color preference.
        (WebCore::RenderThemeMac::captionsTextColor): Return Color with user's caption text color preference.
        (WebCore::RenderThemeMac::captionsEdgeColorForTextColor): Return Color for text edge effect.
        (WebCore::RenderThemeMac::cssPropertyWithTextEdgeColor): Return String with CSS to set a text-shadow
            or webkit-text-stroke property.
        (WebCore::RenderThemeMac::cssColorProperty): Return a String with css to set a property 
            with a color value.
        (WebCore::RenderThemeMac::captionsTextEdgeStyle): Return a String with css to style caption 
            text with the user's preferred text edge stye.
        (WebCore::RenderThemeMac::captionsDefaultFont): Return a String with css to style caption
            text with the user's preferred font.
        (WebCore::RenderThemeMac::captionsStyleSheetOverride): Return a String with css to style captions
            with the user's preferred style.
        (WebCore::RenderThemeMac::captionFontSizeScale): Return the user's preferred caption font scale.
        (WebCore::RenderThemeMac::captionPreferencesChanged): Notify listeners of caption preference change.
        (WebCore::RenderThemeMac::registerForCaptionPreferencesChangedCallbacks): Add a caption preferences 
            changes listener.
        (WebCore::RenderThemeMac::unregisterForCaptionPreferencesChangedCallbacks): Remove a caption preferences
            changes listener.

2012-10-05  Takashi Sakamoto  <tasak@google.com>

        Inline continuations create :after generated content on style recalcs
        https://bugs.webkit.org/show_bug.cgi?id=93170

        Reviewed by Abhishek Arya.

        The bug is caused by RenderInline::styleDidChange's setContinuation(0).
        RenderObjectChildList uses continuation to know whether the given
        renderer should have AFTER render object or not.
        However, setContinuation(0) makes RenderObjectChildList to
        misunderstand that all continuations are last continuation.
        To avoid the misunderstanding, added a new flag to class
        RenderObejctChildList to enable/disable updating :after content (and
        also :before content).

        Tests: fast/css-generated-content/after-with-inline-continuation.html
               fast/css-generated-content/dynamic-apply-after-for-inline.html

        * rendering/RenderInline.cpp:
        (WebCore::RenderInline::styleDidChange):
        Disable upating :after content for continuations which are not
        the last one during setStyle just after setContinuation(0).
        The setStyle invokes RenderInline::styleDidChange and also invokes
        updateBeforeAfterContent via the styleDidChange. This means,
        the last continuation's updateBeforeAfterContent is also invoked
        after setContinuation(0). We have to update :after for the last
        continuation.
        * rendering/RenderObjectChildList.cpp:
        (WebCore):
        (WebCore::RenderObjectChildList::updateBeforeAfterContent):
        If s_updateBeforeAfterContent is false, quickly exit
        updateBeforeAfterContent.
        * rendering/RenderObjectChildList.h:
        (RenderObjectChildList):
        Added a new flag s_enableUpdateBeforeAfterContent to enable/disable
        updating :before or :after content.

2012-10-05  Simon Fraser  <simon.fraser@apple.com>

        Don't assume that TileCache layers are opaque
        https://bugs.webkit.org/show_bug.cgi?id=98555

        Reviewed by Dean Jackson.

        TileCache previously set all its tile CALayers as opaque.
        However, we will need non-opaque tile caches when we use this
        tile cache for tiled layers, so add a member function to
        control tile opacity.
        
        RenderLayerBacking already calls m_graphicsLayer->setContentsOpaque()
        using the FrameView's notion of opaqueness, so this change will
        cause the main tile cache to be non-opaque if external forces have
        set the FrameView to be non-opaque.
        
        Also tweak the layer border widths on tiled layers.

        * platform/graphics/ca/mac/TileCache.h:
        (TileCache):
        (WebCore::TileCache::tilesAreOpaque):
        * platform/graphics/ca/mac/TileCache.mm:
        (WebCore::TileCache::TileCache):
        (WebCore::TileCache::setTilesOpaque):
        (WebCore::TileCache::createTileLayer):
        * platform/graphics/ca/mac/WebTileCacheLayer.mm:
        (-[WebTileCacheLayer setOpaque:]):
        (-[WebTileCacheLayer isOpaque]):
        (-[WebTileCacheLayer setBorderWidth:]):

2012-10-05  Tony Chang  <tony@chromium.org>

        Fix margin box ascent computation in flexbox
        https://bugs.webkit.org/show_bug.cgi?id=98540

        Reviewed by Ojan Vafai.

        The margin box ascent doesn't depend on the margin below the box.

        Tests: css3/flexbox/flex-align.html: Fixed a test case and removed a FIXME.
               css3/flexbox/flex-align-vertical-writing-mode.html: Similar test case.

        * rendering/RenderFlexibleBox.cpp:
        (WebCore::RenderFlexibleBox::marginBoxAscentForChild):

2012-10-05  Ojan Vafai  <ojan@chromium.org>

        Deprecated flexboxes subtract scrollbar width/height twice
        https://bugs.webkit.org/show_bug.cgi?id=98552

        Reviewed by Tony Chang.

        This is a regression from http://trac.webkit.org/changeset/119507.
        The problem is that contentHeight subtracts the scrollbar and
        RenderDeprecatedFlexbox subtracts the scrollbar.

        -Make it so that we only access override sizes if one has been set.
        I think this makes the calling code more clear.
        -If we don't have one set, grab the height/width - borderAndPadding.
        -Add a FIXME to change this all back to being borderbox sizes.
        There's something trick with making table padding/border work right for that
        though (noted in the original patch).

        Test: fast/flexbox/flexing-overflow-scroll-item.html

        * rendering/RenderBox.cpp:
        (WebCore::RenderBox::overrideLogicalContentWidth):
        (WebCore::RenderBox::overrideLogicalContentHeight):
        (WebCore::RenderBox::availableLogicalHeightUsing):
        * rendering/RenderBox.h:
        (RenderBox):
        * rendering/RenderDeprecatedFlexibleBox.cpp:
        (WebCore::contentWidthForChild):
        (WebCore):
        (WebCore::contentHeightForChild):
        (WebCore::RenderDeprecatedFlexibleBox::layoutHorizontalBox):
        (WebCore::RenderDeprecatedFlexibleBox::layoutVerticalBox):
        (WebCore::RenderDeprecatedFlexibleBox::allowedChildFlex):

2012-10-05  Eric Seidel  <eric@webkit.org>

        Make tables which don't use col/row span much faster to layout
        https://bugs.webkit.org/show_bug.cgi?id=98221

        Reviewed by Julien Chaffraix.

        My sense is that most tables on webpages do not use colspan/rowspan
        so I stole another bit from RenderTableCell::m_column to avoid
        having to re-parse the colSpan/rowSpan attributes for every cell
        when doing table layout.
        This made these symbols disappear from biggrid.html/redraw.html (dglazkov's spreadsheets benchmarks)
        as well as moved our robohornet/resizecol.html number from an average of 3221ms to 2608ms (~20%!).

        I removed m_hasHTMLTableCellElement (from http://trac.webkit.org/changeset/97691)
        since it was attempting to do the same sort of optimization.

        * rendering/RenderTableCell.cpp:
        (WebCore::RenderTableCell::RenderTableCell):
        (WebCore::RenderTableCell::parseColSpanFromDOM):
        (WebCore::RenderTableCell::parseRowSpanFromDOM):
        (WebCore::RenderTableCell::layout):
        * rendering/RenderTableCell.h:
        (WebCore::RenderTableCell::colSpan):
        (WebCore::RenderTableCell::rowSpan):
        (RenderTableCell):

2012-10-05  Oli Lan  <olilan@chromium.org>

        Allow EventHandler to handle longpress gestures, including longpress selection on Android.
        https://bugs.webkit.org/show_bug.cgi?id=98173
        
        Reviewed by Ryosuke Niwa.

        Adds handling for GestureLongPress to EventHandler::handleGestureEvent, with a new
        handleGestureLongPress method. On Android, this method selects the closest word
        if the gesture event was over non-link text.

        This is tested via a new chromium test WebViewTest.LongPressSelection.  

        * page/EventHandler.cpp:
        (WebCore::EventHandler::selectClosestWordFromHitTestResult):
        (WebCore::EventHandler::selectClosestWordFromMouseEvent):
        (WebCore):
        (WebCore::EventHandler::handleGestureEvent):
        (WebCore::EventHandler::handleGestureLongPress):
        * page/EventHandler.h:
        (EventHandler):

2012-10-05  Tab Atkins  <jackalmage@gmail.com>

        <marquee> element forces itself to be at least 1em high, regardless of 'height' declaration
        https://bugs.webkit.org/show_bug.cgi?id=18098

        Reviewed by Eric Seidel.

        This restriction originally existed to match IE, but IE changed some time ago to be normal instead.
        We're the last browser, afaict, to still enforce this de-facto restriction.
        This patch makes <marquee> instead act like a normal element.

        Tests: fast/css/MarqueeLayoutTest.html (rewritten from the older, bad version)

        * rendering/RenderMarquee.cpp:
        (WebCore::RenderMarquee::updateMarqueeStyle):

2012-10-05  Joe Mason  <jmason@rim.com>

        [BlackBerry] Fix regression in proxy auth
        https://bugs.webkit.org/show_bug.cgi?id=98533

        Reviewed by Yong Li.

        The proxy auth dialog gets the proxy address from
        BlackBerry::Platform::Settings::proxyAddress, which returns
        "host:port", but we try to parse it with a KURL, which expects
        "scheme://host:port".  Since this is an http proxy, add http:// to the
        url to get it to parse.

        PR 220567.

        * platform/network/blackberry/NetworkJob.cpp:
        (WebCore::NetworkJob::sendRequestWithCredentials):

2012-10-05  Jer Noble  <jer.noble@apple.com>

        No autorelease pool in place, causing buildup of autoreleased objects.
        https://bugs.webkit.org/show_bug.cgi?id=98522
        <rdar://problem/11647950>

        Reviewed by Alexey Proskuryakov.

        Wrap each timer callback in an AutodrainPool, ensuring an autorelease
        pool is present during calls from C/C++ into ObjC.

        * platform/cf/RunLoopTimerCF.cpp:
        (WebCore::timerFired):

2012-10-05  Ryosuke Niwa  <rniwa@webkit.org>

        Deleting across multiple paragraphs can change the style of surrounding text
        https://bugs.webkit.org/show_bug.cgi?id=97266

        Reviewed by Levi Weintraub.

        Preserve editing styles from CSS rules in wrappingStyleForSerialization as well as inline styles
        even when we're not annotating. We don't want to preserve all styles because it's against
        the user expectation to keep borders, etc... when merging paragraphs. We also don't want to copy
        styles from a mail blockquote because that's not a style the user has applied. See the comment
        in EditingStyle::wrappingStyleForSerialization.

        Test: editing/deleting/merge-paragraph-with-style-from-rule.html

        * editing/EditingStyle.cpp:
        (WebCore::EditingStyle::mergeInlineAndImplicitStyleOfElement):
        (WebCore::EditingStyle::wrappingStyleForSerialization):

2012-10-05  Dan Bernstein  <mitz@apple.com>

        Reversing a GlyphBuffer needlessly queries its size multiple times
        https://bugs.webkit.org/show_bug.cgi?id=98530

        Reviewed by Simon Fraser.

        No new tests because there is no change in behavior.

        * WebCore.xcodeproj/project.pbxproj:
        * platform/graphics/FontFastPath.cpp:
        (WebCore::Font::getGlyphsAndAdvancesForSimpleText): Replaced the condition
        (i < glyphBuffer.size() / 2) with the equivalent test (i < end).
        * platform/graphics/mac/FontComplexTextMac.cpp:
        (WebCore::Font::getGlyphsAndAdvancesForComplexText): Ditto.

2012-10-05  José Dapena Paz  <jdapena@igalia.com>

        [GTK] Add support for creating EGL contexts
        https://bugs.webkit.org/show_bug.cgi?id=77921

        Reviewed by Martin Robinson.

        This patch adds support for EGL, using OpenGL and OpenGL ES 2. Both
        options are set up on compile time, with the configure options
        --enable-egl and --enable-gles2.

        The implementation only adds support for EGL on top of X11, to
        isolate the changes to the minimum. More changes should come
        later to enable EGL for other targets (as Wayland).

        No new tests required, as existing WebGL and AC tests should cover
        the cases.

        * GNUmakefile.am:
        * GNUmakefile.list.am:
        * platform/graphics/GraphicsContext3D.h:
        (GraphicsContext3D):
        * platform/graphics/OpenGLESShims.h:
        * platform/graphics/cairo/GLContext.cpp:
        (WebCore):
        (WebCore::GLContext::sharedX11Display):
        (WebCore::GLContext::cleanupSharedX11Display):
        (WebCore::activeContextList):
        (WebCore::GLContext::addActiveContext):
        (WebCore::GLContext::removeActiveContext):
        (WebCore::GLContext::cleanupActiveContextsAtExit):
        (WebCore::GLContext::createContextForWindow):
        (WebCore::GLContext::createOffscreenContext):
        * platform/graphics/cairo/GLContext.h:
        (GLContext):
        * platform/graphics/cairo/GraphicsContext3DCairo.cpp:
        (WebCore::GraphicsContext3D::create):
        (WebCore::GraphicsContext3D::GraphicsContext3D):
        (WebCore::GraphicsContext3D::~GraphicsContext3D):
        (WebCore::GraphicsContext3D::isGLES2Compliant):
        * platform/graphics/cairo/GraphicsContext3DPrivate.cpp:
        (WebCore::GraphicsContext3DPrivate::paintToTextureMapper):
        * platform/graphics/clutter/GraphicsContext3DClutter.cpp:
        * platform/graphics/efl/GraphicsContext3DEfl.cpp:
        * platform/graphics/egl/GLContextEGL.cpp: Added.
        (WebCore):
        (WebCore::sharedEGLDisplay):
        (WebCore::getEGLConfig):
        (WebCore::GLContextEGL::createWindowContext):
        (WebCore::GLContextEGL::createPbufferContext):
        (WebCore::GLContextEGL::createPixmapContext):
        (WebCore::GLContextEGL::createContext):
        (WebCore::GLContextEGL::GLContextEGL):
        (WebCore::GLContextEGL::~GLContextEGL):
        (WebCore::GLContextEGL::canRenderToDefaultFramebuffer):
        (WebCore::GLContextEGL::defaultFrameBufferSize):
        (WebCore::GLContextEGL::makeContextCurrent):
        (WebCore::GLContextEGL::swapBuffers):
        (WebCore::GLContextEGL::waitNative):
        (WebCore::GLContextEGL::platformContext):
        * platform/graphics/egl/GLContextEGL.h: Added.
        (WebCore):
        (GLContextEGL):
        * platform/graphics/glx/GLContextGLX.cpp:
        (WebCore::GLContextGLX::createWindowContext):
        (WebCore::GLContextGLX::createPbufferContext):
        (WebCore::GLContextGLX::createPixmapContext):
        (WebCore::GLContextGLX::createContext):
        (WebCore::GLContextGLX::~GLContextGLX):
        (WebCore::GLContextGLX::defaultFrameBufferSize):
        (WebCore::GLContextGLX::makeContextCurrent):
        (WebCore::GLContextGLX::swapBuffers):
        (WebCore):
        (WebCore::GLContextGLX::waitNative):
        * platform/graphics/glx/GLContextGLX.h:
        (GLContextGLX):
        * platform/graphics/mac/GraphicsContext3DMac.mm:
        * platform/graphics/opengl/GraphicsContext3DOpenGL.cpp:
        (WebCore::GraphicsContext3D::releaseShaderCompiler):
        (WebCore):
        * platform/graphics/opengl/GraphicsContext3DOpenGLES.cpp:
        (WebCore::GraphicsContext3D::readPixels):
        (WebCore::GraphicsContext3D::reshapeFBOs):
        (WebCore::GraphicsContext3D::renderbufferStorage):
        * platform/graphics/qt/GraphicsContext3DQt.cpp:
        * platform/graphics/texmap/TextureMapper.h:
        * platform/gtk/RedirectedXCompositeWindow.cpp:
        (WebCore::RedirectedXCompositeWindow::RedirectedXCompositeWindow):
        (WebCore::RedirectedXCompositeWindow::~RedirectedXCompositeWindow):
        (WebCore::RedirectedXCompositeWindow::resize):
        * platform/gtk/RedirectedXCompositeWindow.h:

2012-10-04  Jon Lee  <jonlee@apple.com>

        Add a setting to enable plugin snapshotting
        https://bugs.webkit.org/show_bug.cgi?id=98319
        <rdar://problem/12426480>

        Reviewed by Brady Eidson.

        Add a new bit for this preference.

        * page/Settings.cpp:
        (WebCore::Settings::Settings): Preference is false by default.
        * page/Settings.h: Added m_plugInSnapshottingEnabled bit.
        (WebCore::Settings::setPlugInSnapshottingEnabled): Set the bit.
        (WebCore::Settings::plugInSnapshottingEnabled): Return the bit.

2012-10-05  Vsevolod Vlasov  <vsevik@chromium.org>

        Unreviewed inspector front-end closure compilaiton fixes.

        * inspector/InjectedScriptCanvasModuleSource.js:
        * inspector/InjectedScriptExterns.js:
        (InjectedScriptHost.prototype.getInternalProperties):
        * inspector/front-end/DockController.js:
        * inspector/front-end/externs.js:
        (InspectorFrontendHostAPI.prototype.requestSetDockSide):

2012-10-05  Tab Atkins  <jackalmage@gmail.com>

        Replace uses of prefixed properties with unprefixed versions in the UA stylesheets
        https://bugs.webkit.org/show_bug.cgi?id=98453

        Reviewed by Ojan Vafai.

        Switched 'border-radius' and 'box-shadow' to their unprefixed version in the UA stylesheets.

        No new tests, because the unprefixed properties have the same behavior as the prefixed.

        * css/fullscreenQuickTime.css:
        (video:-webkit-full-screen::-webkit-media-controls-panel):
        * css/html.css:
        (keygen, select):
        (select[size][multiple]):
        (select[size="1"]):
        (::-webkit-validation-bubble-message):
        * css/themeBlackBerry.css:
        (input, textarea):
        * css/themeChromiumAndroid.css:
        (select[size][multiple]):
        * css/themeQtNoListboxes.css:
        (select[size][multiple]):
        * css/themeWin.css:
        (select[size="1"]):
        * css/view-source.css:
        (.webkit-html-message-bubble):

2012-10-05  Kevin Ellis  <kevers@chromium.org>

        [chromium] Only inflate the height of rows in a popup menu when a touch device is detected.
        https://bugs.webkit.org/show_bug.cgi?id=98515

        Reviewed by Adam Barth.

        Enforces a minimum row height for popup menus when a touch device is
        detected.  In a previous patch (r127597), the sizing of popup was 
        consolidated for touch and non-touch.  Based on user feedback, reverting
        to the old behavior for non-touch and only adding padding for touch
        devices seems like a much safer strategy.  This patch is not a direct
        revert of r127567 since the padding previously used for touch is a bit
        excessive.

        Covered by existing tests.

        * platform/chromium/PopupListBox.cpp:
        (WebCore::PopupListBox::getRowHeight):
        * platform/chromium/PopupMenuChromium.cpp:
        (WebCore):
        * platform/chromium/PopupMenuChromium.h:
        (WebCore::PopupMenuChromium::optionRowHeightForTouch):
        (WebCore::PopupMenuChromium::setOptionRowHeightForTouch):
        (PopupMenuChromium):

2012-10-05  Alexander Pavlov  <apavlov@chromium.org>

        Web Inspector: [Styles] Unable to edit properties in broken stylesheets
        https://bugs.webkit.org/show_bug.cgi?id=98246

        Reviewed by Vsevolod Vlasov.

        Pop source data for invalid rules off the stack whenever we have consecutive CSSParser::markRuleHeaderStart() invocations.

        Test: inspector/styles/parse-stylesheet-errors.html

        * css/CSSParser.cpp:
        (WebCore::CSSParser::popRuleData):
        (WebCore::CSSParser::markRuleHeaderStart):
        (WebCore::CSSParser::markRuleBodyStart):
        * css/CSSParser.h:
        (CSSParser):

2012-10-05  Gabor Rapcsanyi  <rgabor@webkit.org>

        Add ARM-NEON support to VectorMath in WebAudio
        https://bugs.webkit.org/show_bug.cgi?id=98131

        Reviewed by Zoltan Herczeg.

        Speed up vector operations in WebAudio with NEON intrinsics.

        * platform/audio/VectorMath.cpp:
        (WebCore::VectorMath::vsma):
        (WebCore::VectorMath::vsmul):
        (WebCore::VectorMath::vadd):
        (WebCore::VectorMath::vmul):
        (WebCore::VectorMath::zvmul):
        (WebCore::VectorMath::vsvesq):
        (WebCore::VectorMath::vmaxmgv):

2012-10-05  Simon Hausmann  <simon.hausmann@digia.com>

        Unreviewed, rolling out r130495.
        http://trac.webkit.org/changeset/130495
        https://bugs.webkit.org/show_bug.cgi?id=98268

        Made WK2 tests crash.

        * Target.pri:
        * platform/qt/QStyleFacade.cpp: Removed.
        * platform/qt/QStyleFacade.h: Removed.

2012-10-05  Simon Hausmann  <simon.hausmann@digia.com>

        [Qt] Make RenderThemeQStyle/ScrollbarThemeQStyle compile without QStyle/QtWidgets
        https://bugs.webkit.org/show_bug.cgi?id=98268

        Reviewed by Tor Arne Vestbø.

        Extracted QStyle/QWidget related code into a QWebStyle class that implements the QStyleFacade interface.

        QStyleFacade is a pure interface that lives in WebCore/platform/qt
        (next to RenderThemeQStyle and ScrollbarThemeQStyle) and provides a
        minimal interface of what we need to draw with QStyle as well as basic
        hit testing and metric retrieval. It also provides a
        QStyleFacadeOption class that aggregates common meta-data for
        rendering primitives, such as direction, rectangle, state (sunken,
        enabled, etc.) or palette. It also provides some more slider/scrollbar
        specific fields in a slider sub-structure.

        RenderThemeQStyle/ScrollbarThemeQStyle used to instantiate specific QStyleOption sub-classes and populate
        them with state information from render objects, before calling straight to QStyle. Most of the common code
        was encapsulated in StylePainterQStyle.

        The new RenderThemeQStyle/ScrolllbarThemeQStyle uses common code in
        StylePainterQStyle to populate state into QStyleFacadeOption before
        calling into QStyleFacade.

        The style facade is then implemented by QStyleFacadeImp, which extracts
        meta-data from QStyleFacadeOption arguments, populates style
        primitive specific QStyleOption objects and then calls on QStyle.

        RenderThemeQStyle/ScrollbarThemeQStyle can only use interface methods
        from QStyleFacade. QStyleFacadeImp on the other hand will live in the
        separate QtWebKitWidgets library in the future and therefore cannot use
        any WebCore types.

        * Target.pri:
        * platform/qt/QStyleFacade.cpp: Added.
        (WebCore):
        (WebCore::QStyleFacade::styleForPage):
        * platform/qt/QStyleFacade.h: Added.
        (WebCore):
        (QStyleFacade):
        (WebCore::QStyleFacade::~QStyleFacade):
        (WebCore::QStyleFacadeOption::QStyleFacadeOption):
        (QStyleFacadeOption):
        * platform/qt/RenderThemeQStyle.cpp: Renamed from Source/WebKit/qt/WebCoreSupport/RenderThemeQStyle.cpp.
        (WebCore):
        (WebCore::RenderThemeQStyle::getStylePainter):
        (WebCore::StylePainterQStyle::StylePainterQStyle):
        (WebCore::StylePainterQStyle::init):
        (WebCore::RenderThemeQStyle::create):
        (WebCore::RenderThemeQStyle::setStyleFactoryFunction):
        (WebCore::RenderThemeQStyle::styleFactory):
        (WebCore::RenderThemeQStyle::RenderThemeQStyle):
        (WebCore::RenderThemeQStyle::~RenderThemeQStyle):
        (WebCore::RenderThemeQStyle::setPaletteFromPageClientIfExists):
        (WebCore::RenderThemeQStyle::inflateButtonRect):
        (WebCore::RenderThemeQStyle::computeSizeBasedOnStyle):
        (WebCore::RenderThemeQStyle::adjustButtonStyle):
        (WebCore::RenderThemeQStyle::setButtonPadding):
        (WebCore::RenderThemeQStyle::paintButton):
        (WebCore::RenderThemeQStyle::paintTextField):
        (WebCore::RenderThemeQStyle::adjustTextAreaStyle):
        (WebCore::RenderThemeQStyle::paintTextArea):
        (WebCore::RenderThemeQStyle::setPopupPadding):
        (WebCore::RenderThemeQStyle::colorPalette):
        (WebCore::RenderThemeQStyle::paintMenuList):
        (WebCore::RenderThemeQStyle::adjustMenuListButtonStyle):
        (WebCore::RenderThemeQStyle::paintMenuListButton):
        (WebCore::RenderThemeQStyle::animationDurationForProgressBar):
        (WebCore::RenderThemeQStyle::paintProgressBar):
        (WebCore::RenderThemeQStyle::paintSliderTrack):
        (WebCore::RenderThemeQStyle::adjustSliderTrackStyle):
        (WebCore::RenderThemeQStyle::paintSliderThumb):
        (WebCore::RenderThemeQStyle::adjustSliderThumbStyle):
        (WebCore::RenderThemeQStyle::paintSearchField):
        (WebCore::RenderThemeQStyle::adjustSearchFieldDecorationStyle):
        (WebCore::RenderThemeQStyle::paintSearchFieldDecoration):
        (WebCore::RenderThemeQStyle::adjustSearchFieldResultsDecorationStyle):
        (WebCore::RenderThemeQStyle::paintSearchFieldResultsDecoration):
        (WebCore::RenderThemeQStyle::paintInnerSpinButton):
        (WebCore::RenderThemeQStyle::initializeCommonQStyleOptions):
        (WebCore::RenderThemeQStyle::adjustSliderThumbSize):
        * platform/qt/RenderThemeQStyle.h: Renamed from Source/WebKit/qt/WebCoreSupport/RenderThemeQStyle.h.
        (WebCore):
        (RenderThemeQStyle):
        (WebCore::RenderThemeQStyle::qStyle):
        (StylePainterQStyle):
        (WebCore::StylePainterQStyle::isValid):
        (WebCore::StylePainterQStyle::paintButton):
        (WebCore::StylePainterQStyle::paintTextField):
        (WebCore::StylePainterQStyle::paintComboBox):
        (WebCore::StylePainterQStyle::paintComboBoxArrow):
        (WebCore::StylePainterQStyle::paintSliderTrack):
        (WebCore::StylePainterQStyle::paintSliderThumb):
        (WebCore::StylePainterQStyle::paintInnerSpinButton):
        (WebCore::StylePainterQStyle::paintProgressBar):
        (WebCore::StylePainterQStyle::paintScrollCorner):
        (WebCore::StylePainterQStyle::paintScrollBar):
        * platform/qt/ScrollbarThemeQStyle.cpp: Renamed from Source/WebKit/qt/WebCoreSupport/ScrollbarThemeQStyle.cpp.
        (WebCore):
        (WebCore::ScrollbarThemeQStyle::ScrollbarThemeQStyle):
        (WebCore::ScrollbarThemeQStyle::~ScrollbarThemeQStyle):
        (WebCore::scPart):
        (WebCore::scrollbarPart):
        (WebCore::initSliderStyleOption):
        (WebCore::ScrollbarThemeQStyle::paint):
        (WebCore::ScrollbarThemeQStyle::hitTest):
        (WebCore::ScrollbarThemeQStyle::shouldCenterOnThumb):
        (WebCore::ScrollbarThemeQStyle::invalidatePart):
        (WebCore::ScrollbarThemeQStyle::scrollbarThickness):
        (WebCore::ScrollbarThemeQStyle::thumbPosition):
        (WebCore::ScrollbarThemeQStyle::thumbLength):
        (WebCore::ScrollbarThemeQStyle::trackPosition):
        (WebCore::ScrollbarThemeQStyle::trackLength):
        (WebCore::ScrollbarThemeQStyle::paintScrollCorner):
        * platform/qt/ScrollbarThemeQStyle.h: Renamed from Source/WebKit/qt/WebCoreSupport/ScrollbarThemeQStyle.h.
        (WebCore):
        (ScrollbarThemeQStyle):
        (WebCore::ScrollbarThemeQStyle::qStyle):

2012-10-05  Andrei Bucur  <abucur@adobe.com>

        Incomplete repaint of boxes with inset box-shadow and padding when resized
        https://bugs.webkit.org/show_bug.cgi?id=59863

        Reviewed by Simon Fraser.

        The patch extends the repaint rectangle to include the inset shadow extent for renderers that resize and need to be repainted. The rectangle computations are also better fragmented and easier to read.

        New Test: fast/repaint/box-shadow-inset-repaint.html

        * rendering/RenderObject.cpp:
        (WebCore::RenderObject::repaintAfterLayoutIfNeeded):
        * rendering/style/RenderStyle.cpp:
        (WebCore::RenderStyle::getShadowInsetExtent):
        (WebCore):
        * rendering/style/RenderStyle.h:

2012-10-04  Kent Tamura  <tkent@chromium.org>

        Fix sub-field width to the maximum width of a placeholder and the maximum value
        https://bugs.webkit.org/show_bug.cgi?id=98481

        Reviewed by Hajime Morita.

        We can't assume a placeholder text is shorter than the width of
        digits. The placeholder string for the year field of
        input[type=week] is "----", but input[type=date] will have a
        localized string for it.

        We should set the 'width' CSS property to the maximum of the
        placeholder width and the maximum value width in order to prevent
        the field width from growing/narrowing.

        Before this patch, we secured four digits space for a year field,
        and allowed the field to grow its width when a larger year is
        set. After this patch, we don't allow it to grow because the
        'width' property is set to the maximum width.

        Update week-multiple-fields-appearance-basic.html, and the
        following tests are affected.
        - fast/forms/week-multiple-fields/week-multiple-fields-appearance-pseudo-classes.html
        - fast/forms/week-multiple-fields/week-multiple-fields-appearance-pseudo-elements.html
        - fast/forms/week-multiple-fields/week-multiple-fields-appearance-style.html

        * html/shadow/DateTimeNumericFieldElement.cpp:
        (WebCore::DateTimeNumericFieldElement::DateTimeNumericFieldElement):
        Enable customStyleForRenderer.
        (WebCore::DateTimeNumericFieldElement::customStyleForRenderer):
        Added. The code is similar to DateTimeSymbolicFieldElement::customStyleForRenderer().
        (WebCore::DateTimeNumericFieldElement::formatValue):
        Made a function with the code in value(). This is used in
        customStyleForRenderer() and value().
        (WebCore::DateTimeNumericFieldElement::value): Use formatValue().
        * html/shadow/DateTimeNumericFieldElement.h:
        (DateTimeNumericFieldElement): Declare new functions.

2012-10-05  Kent Tamura  <tkent@chromium.org>

        Improve spelling and performance of Localizer.cpp
        https://bugs.webkit.org/show_bug.cgi?id=98485

        Reviewed by Kentaro Hara.

        Some improvements pointed in webkit.org/b/98229#c5.

        No new tests because of no behavior change.

        * platform/text/Localizer.h:
        (Localizer):
         - Rename dateTimeFormatWithSecond to dateTimeFormatWithSeconds
         - Rename dateTimeFormatWithoutSecond to dateTimeFormatWithoutSeconds
         - Add data members: m_dateTimeFormatWithSeconds and m_dateTimeFormatWithoutSeconds.
        * platform/text/Localizer.cpp:
        (WebCore::Localizer::timeFormat): Check isNull instead of isEmpty
        (WebCore::Localizer::shortTimeFormat): Ditto.
        (WebCore::Localizer::dateTimeFormatWithSeconds):
        - Renamed.
        - Cache the concatenation result to a data member.
        (WebCore::Localizer::dateTimeFormatWithoutSeconds): Ditto.

        * html/DateTimeInputType.cpp:
        (WebCore::DateTimeInputType::setupLayoutParameters): Follow the renaming.
        * html/DateTimeLocalInputType.cpp:
        (WebCore::DateTimeLocalInputType::setupLayoutParameters): Ditto.

2012-10-04  Kenichi Ishibashi  <bashi@chromium.org>

        [WebSocket] ExtensionParser should have its own file
        https://bugs.webkit.org/show_bug.cgi?id=98475

        Reviewed by Yuta Kitamura.

        Factor out ExtensionParser from WebSocketExtensionDispatcher and rename it as WebSocketExtensionParser.
        WebSocketExtensionParser has its own file.

        No changes in behavior. Added a test case for parsing Sec-WebSocket-Extensions field as a chromium unit test.

        * CMakeLists.txt: Added WebSocketExtensionParser.
        * GNUmakefile.list.am: Ditto.
        * Modules/websockets/WebSocketExtensionDispatcher.cpp:
        (WebCore::WebSocketExtensionDispatcher::processHeaderValue):
        Use WebSocketExtensionParser::parseExtension() to parser extension header value.
        * Modules/websockets/WebSocketExtensionParser.cpp: Added.
        (WebCore):
        (WebCore::WebSocketExtensionParser::finished): Moved from ExtensionParser.
        (WebCore::WebSocketExtensionParser::parsedSuccessfully): Ditto.
        (WebCore::isSeparator): Ditto.
        (WebCore::WebSocketExtensionParser::skipSpaces): Ditto.
        (WebCore::WebSocketExtensionParser::consumeToken): Ditto.
        (WebCore::WebSocketExtensionParser::consumeQuotedString): Ditto.
        (WebCore::WebSocketExtensionParser::consumeQuotedStringOrToken): Ditto.
        (WebCore::WebSocketExtensionParser::consumeCharacter): Ditto.
        (WebCore::WebSocketExtensionParser::parseExtension): Moved from WebSocketExtensionDispatcher.
        * Modules/websockets/WebSocketExtensionParser.h: Added.
        (WebCore):
        (WebSocketExtensionParser):
        (WebCore::WebSocketExtensionParser::WebSocketExtensionParser):
        (WebCore::WebSocketExtensionParser::currentToken):
        * Target.pri: Added WebSocketExtensionParser.
        * WebCore.gypi: Ditto.
        * WebCore.vcproj/WebCore.vcproj: Ditto.
        * WebCore.xcodeproj/project.pbxproj: Ditto.

2012-10-04  Kunihiko Sakamoto  <ksakamoto@chromium.org>

        <input> size attribute should throw INDEX_SIZE_ERR when set to 0
        https://bugs.webkit.org/show_bug.cgi?id=61675

        Reviewed by Kent Tamura.

        According to the spec, the size IDL attribute of input elements is limited
        to only non-negative numbers greater than zero. It should throw INDEX_SIZE_ERR
        exception when set to 0. New behavior matches both Firefox and IE.
        Spec: http://www.w3.org/TR/html5/common-input-element-attributes.html#the-size-attribute

        Test: fast/dom/HTMLInputElement/input-size-attribute.html

        * html/HTMLInputElement.cpp:
        (WebCore::HTMLInputElement::setSize):
        * html/HTMLInputElement.h:
        (HTMLInputElement):
        * html/HTMLInputElement.idl:

2012-10-04  Kent Tamura  <tkent@chromium.org>

        Fix font for date/time input types.
        https://bugs.webkit.org/show_bug.cgi?id=98478

        Reviewed by Kentaro Hara.

        input[type=date] should use monospace font if
        ENABLE_INPUT_MULTIPLE_FIELDS_UI && ENABLE_INPUT_TYPE_DATE.

        For other date/time types, they should use monospace font only
        if their types are enabled. input[type="foo"] matches input
        element with type="foo" even if the foo type is not supported.

        The input[type=date] change is covered by
        fast/forms/date/calendar-picker-appearance.html,
        platform/chromium/fast/forms/date/date-suggestion-picker-appearance*.html

        * css/html.css:
        (input[type="date"]):
        (input[type="datetime"]):
        (input[type="datetime-local"]):
        (input[type="month"]):
        (input[type="time"]):

2012-10-04  Hajime Morrita  <morrita@google.com>

        [Refactoring] Some classes in StyleResolver.cpp/h could have its own file.
        https://bugs.webkit.org/show_bug.cgi?id=98469

        Reviewed by Dimitri Glazkov.

        This change extracts RuleData, RuleSet, RuleFeature and Featurs class
        to its own file: RuleSet.h/cpp and RuleFeature.h/cpp

        RuleFeature class is moved fro StyleResolver inner class to plain WebCore class.
        Feaures class is renamed to RuleFeatureSet to avoid possible name conflict.

        No new tests. Just splitting file and doing simple rename.

        * CMakeLists.txt:
        * GNUmakefile.list.am:
        * Target.pri:
        * WebCore.gypi:
        * WebCore.xcodeproj/project.pbxproj:
        * css/CSSAllInOne.cpp:
        * css/RuleFeature.cpp: Added.
        (WebCore):
        (WebCore::RuleFeatureSet::add):
        (WebCore::RuleFeatureSet::clear):
        (WebCore::RuleFeatureSet::reportMemoryUsage):
        * css/RuleFeature.h: Added.
        (WebCore):
        (RuleFeature):
        (WebCore::RuleFeature::RuleFeature):
        (RuleFeatureSet):
        (WebCore::RuleFeatureSet::RuleFeatureSet):
        * css/RuleSet.cpp: Added.
        (WebCore):
        (WebCore::isSelectorMatchingHTMLBasedOnRuleHash):
        (WebCore::selectorListContainsUncommonAttributeSelector):
        (WebCore::isCommonAttributeSelectorAttribute):
        (WebCore::containsUncommonAttributeSelector):
        (WebCore::RuleData::RuleData):
        (WebCore::RuleData::reportMemoryUsage):
        (WebCore::reportAtomRuleMap):
        (WebCore::RuleSet::reportMemoryUsage):
        (WebCore::RuleSet::RuleSetSelectorPair::reportMemoryUsage):
        (WebCore::collectFeaturesFromSelector):
        (WebCore::collectFeaturesFromRuleData):
        (WebCore::RuleSet::addToRuleSet):
        (WebCore::RuleSet::addRule):
        (WebCore::RuleSet::addPageRule):
        (WebCore::RuleSet::addRegionRule):
        (WebCore::RuleSet::addRulesFromSheet):
        (WebCore::RuleSet::addStyleRule):
        (WebCore::shrinkMapVectorsToFit):
        (WebCore::RuleSet::shrinkToFit):
        * css/RuleSet.h: Added.
        (WebCore):
        (RuleData):
        (WebCore::RuleData::position):
        (WebCore::RuleData::rule):
        (WebCore::RuleData::selector):
        (WebCore::RuleData::selectorIndex):
        (WebCore::RuleData::hasFastCheckableSelector):
        (WebCore::RuleData::hasMultipartSelector):
        (WebCore::RuleData::hasRightmostSelectorMatchingHTMLBasedOnRuleHash):
        (WebCore::RuleData::containsUncommonAttributeSelector):
        (WebCore::RuleData::specificity):
        (WebCore::RuleData::linkMatchType):
        (WebCore::RuleData::hasDocumentSecurityOrigin):
        (WebCore::RuleData::isInRegionRule):
        (WebCore::RuleData::descendantSelectorIdentifierHashes):
        (SameSizeAsRuleData):
        (RuleSet):
        (WebCore::RuleSet::create):
        (WebCore::RuleSet::disableAutoShrinkToFit):
        (WebCore::RuleSet::features):
        (WebCore::RuleSet::idRules):
        (WebCore::RuleSet::classRules):
        (WebCore::RuleSet::tagRules):
        (WebCore::RuleSet::shadowPseudoElementRules):
        (WebCore::RuleSet::linkPseudoClassRules):
        (WebCore::RuleSet::focusPseudoClassRules):
        (WebCore::RuleSet::universalRules):
        (WebCore::RuleSet::pageRules):
        (WebCore::RuleSet::RuleSetSelectorPair::RuleSetSelectorPair):
        (RuleSetSelectorPair):
        (WebCore::RuleSet::RuleSet):
        * css/StyleResolver.cpp:
        (WebCore):
        (WebCore::makeRuleSet):
        (WebCore::StyleResolver::collectMatchingRulesForList):
        * css/StyleResolver.h:
        (StyleResolver):

2012-10-04  Adam Barth  <abarth@webkit.org>

        FeatureObserver should distinguish between legacy HTML and text notifications
        https://bugs.webkit.org/show_bug.cgi?id=98441

        Reviewed by Tony Chang.

        We might be able to drop support for legacy HTML notifications before
        we can drop support for legacy text notifications. We should measure
        and find out.

        * Modules/notifications/NotificationCenter.idl:
        * page/FeatureObserver.h:

2012-10-04  Pravin D  <pravind.2k4@gmail.com>

        Removing the unused member variable m_wasMalformed from HTMLFormElement class and its related code frgment.
        https://bugs.webkit.org/show_bug.cgi?id=98444

        Reviewed by Eric Seidel.

        The member variable m_wasMalformed of HTMLFormElement class was used to determine if the <form> tag was malformed or not.
        This information was used elsewhere to decide if bottom margins have to be included for such a <form>.
        However currently this member variable is not being set by any code following code refactoring in HTML parser class.

        Code cleanup patch. No new tests required.

        * html/HTMLFormElement.cpp:
        (WebCore::HTMLFormElement::HTMLFormElement):
          Removed m_wasMalformed initialization.

        * html/HTMLFormElement.h:
        (HTMLFormElement):
         Removed m_wasMalformed variable.
         Removed m_wasMalformed variable's setter and getter functions.

        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::layoutBlock):
         Removed code fragment using/dependent on m_wasMalformed.

2012-10-04  Rik Cabanier  <cabanier@adobe.com>

        Turn Compositing on by default in WebKit build
        https://bugs.webkit.org/show_bug.cgi?id=98315

        Reviewed by Simon Fraser.

        enable -webkit-blend-mode on trunk.

        No new tests. Existing blending test were updated.

        * Configurations/FeatureDefines.xcconfig:
        * css/CSSPropertyNames.in:
        * css/CSSValueKeywords.in:

2012-10-04  Hayato Ito  <hayato@chromium.org>

        [Refactoring] Introduce a traversal strategy in SelectorChecker
        https://bugs.webkit.org/show_bug.cgi?id=97298

        Reviewed by Antti Koivisto.

        We extract DOM traversal code from SelectorChecker so that we can use another traversal strategy.
        Another traversal strategy will be introduced in Bug 96990.

        Since this code path is very hot, we were very careful not to regress performance.
        We will use template specialization to change the traversal implementation.

        We confirmed that this patch does not regress SelectorCheckerPerformance. I have checked the performance of
        the added test in my Linux Box using run-perf-tests.

        The performance of the added test before using this patch was:

          RESULT CSS: PseudoClassSelectors= 3399.68308031 runs/s
          median= 3404.48685564 runs/s, stdev= 37.3480114449 runs/s, min= 3272.64871114 runs/s, max= 3438.72385184 runs/s

        When we used this patch, the performance was:

          RESULT CSS: PseudoClassSelectors= 3367.74473886 runs/s
          median= 3367.12072755 runs/s, stdev= 14.1464547639 runs/s, min= 3348.55881171 runs/s, max= 3395.98212857 runs/s

        Test: PerformanceTests/CSS/PseudoClass-Selectors.html

        * css/SelectorChecker.cpp:
        (WebCore):
        (WebCore::SelectorChecker::checkSelector): Make this a template method to accept another Context type.
        Another Context type will be introduced in coming patch.
        (WebCore::SelectorChecker::checkOneSelector):
        (WebCore::SelectorChecker::DOMTraversalStrategy::isFirstChild):
        (WebCore::SelectorChecker::DOMTraversalStrategy::isLastChild):
        (WebCore::SelectorChecker::DOMTraversalStrategy::isFirstOfType):
        (WebCore::SelectorChecker::DOMTraversalStrategy::isLastOfType):
        (WebCore::SelectorChecker::DOMTraversalStrategy::countElementsBefore):
        (WebCore::SelectorChecker::DOMTraversalStrategy::countElementsOfTypeBefore):
        (WebCore::SelectorChecker::DOMTraversalStrategy::countElementsAfter):
        (WebCore::SelectorChecker::DOMTraversalStrategy::countElementsOfTypeAfter):
        * css/SelectorChecker.h:
        (WebCore::SelectorChecker::SelectorCheckingContext::SelectorCheckingContext):
        (SelectorCheckingContext):
        (SelectorChecker):
        (DOMTraversalStrategy): Extracted the DOM traversal code from SelectorChecker. Another traversal code
        will be introduced the coming patch.

2012-10-04  Eric Seidel  <eric@webkit.org>

        SVGAttributeHashTranslator does not need to copy QualifiedName in the common case
        https://bugs.webkit.org/show_bug.cgi?id=98473

        Reviewed by Adam Barth.

        I tested this using instruments on a test case which modified SVG attributes in a loop.
        I believe pdr has some perf-tests in this area, but they weren't needed here.  A simple sample showed this as a huge win,
        since we're no longer creating a QualifiedName (and thus adding it to the hash) on each QualifiedName-based lookup in SVG.

        * svg/SVGElement.h:
        (WebCore::SVGAttributeHashTranslator::hash):
        (WebCore::SVGAttributeHashTranslator::equal):

2012-10-04  Julien Chaffraix  <jchaffraix@webkit.org>

        Split the intrinsic padding update code out of RenderTableSection::layoutRows
        https://bugs.webkit.org/show_bug.cgi?id=98454

        Reviewed by Eric Seidel.

        RenderTableSection::layoutRows is very long and it's difficult to see what's
        going on. This change moves the intrinsic padding update code into RenderTableCell
        for clarity. While at it, cleaned up a bit the code (renaming variables, functions).

        Change covered by existing table tests.

        * rendering/RenderTableCell.cpp:
        (WebCore::RenderTableCell::computeIntrinsicPadding):
        Added this new function that does the update. Removed the 'default' case, replaced by
        the explicit label BASELINE_MIDDLE.

        * rendering/RenderTableCell.h:
        (WebCore::RenderTableCell::setIntrinsicPaddingBefore):
        (WebCore::RenderTableCell::setIntrinsicPaddingAfter):
        (WebCore::RenderTableCell::setIntrinsicPadding):
        Moved those setters to the private section as we want other classes
        to use computeIntrinsicPadding.

        * rendering/RenderTableSection.cpp:
        (WebCore::RenderTableSection::layoutRows):
        Replaced the code with a call to RenderTableCell::computeIntrinsicPadding.
        Also moved 2 variables in the loop per our coding style.

        * rendering/RenderTableSection.h:
        (WebCore::RenderTableSection::rowBaseline):
        Renamed to match our coding style.

2012-10-04  Nate Chapin  <japhet@chromium.org>

        Crash in EventHandler::mouseMoved().
        https://bugs.webkit.org/show_bug.cgi?id=98460

        Reviewed by Abhishek Arya.

        No new tests, this fixes fast/events/mouse-moved-remove-frame-crash.html.

        * page/EventHandler.cpp:
        (WebCore::EventHandler::mouseMoved):

2012-10-04  Adam Barth  <abarth@webkit.org>

        [V8] NotificationCenter leaks because it uses buggy custom bindings
        https://bugs.webkit.org/show_bug.cgi?id=98445

        Reviewed by Tony Chang.

        There's no reason to use custom bindings here. All they do is cause leaks..

        * Modules/notifications/NotificationCenter.idl:
        * bindings/v8/custom/V8NotificationCenterCustom.cpp:

2012-10-04  Tab Atkins  <jackalmage@gmail.com>

        Selector specificity categories "overflow" into higher categories
        https://bugs.webkit.org/show_bug.cgi?id=98295

        Reviewed by Eric Seidel.

        This patch adds per-component overflow guards for CSS selector specificity.
        Previously, we didn't guard against overflow. 
        Since we stored each component as a byte mapped into a single unsigned int for the whole specificity,
        256 of a particular simple selector was equivalent to 1 of the next-higher-group selector.
        This violated the Selectors specification,
        which requires the components to be compared lexicographically.

        Tests: /fast/selectors/specificity-overflow.html

        * css/CSSSelector.cpp:
        (WebCore::CSSSelector::specificity):

2012-10-04  Enrica Casucci  <enrica@apple.com>

        Font::glyphDataAndPageForCharacter doesn't account for text orientation when using systemFallback on a cold cache.
        https://bugs.webkit.org/show_bug.cgi?id=98452.

        Reviewed by Dan Bernstein.

        The text orientation was considered only when there is a cache hit.
        This change moves the logic to handle text orientation to a separate
        inline function that is called also when the glyph is added to the cache.

        Test: fast/text/vertical-rl-rtl-linebreak.html

        * platform/graphics/FontFastPath.cpp:
        (WebCore::applyTextOrientationForCharacter): Added.
        (WebCore::Font::glyphDataAndPageForCharacter): Modified to use the new function in
        both cases of cold and warm cache.

2012-10-04  Adam Klein  <adamk@chromium.org>

        MutationRecord attributeName should be null for non attribute changes
        https://bugs.webkit.org/show_bug.cgi?id=98438

        Reviewed by Ojan Vafai.

        Test: fast/mutation/mutation-record-nullity.html

        * dom/MutationRecord.idl:

2012-10-04  Simon Fraser  <simon.fraser@apple.com>

        Final part of "sync" to "flush" renaming
        https://bugs.webkit.org/show_bug.cgi?id=98430

        Reviewed by Tim Horton.

        Change method names on GraphicsLayer and GraphicsLayerClient that
        refer to "sync" to use the term "flush" instead, to be consistent
        with the rest of the code.

        * platform/graphics/GraphicsLayer.h:
        (WebCore::GraphicsLayer::flushCompositingState):
        (WebCore::GraphicsLayer::flushCompositingStateForThisLayerOnly):
        * platform/graphics/GraphicsLayerClient.h:
        (GraphicsLayerClient):
        * platform/graphics/blackberry/GraphicsLayerBlackBerry.h:
        (WebCore::GraphicsLayerBlackBerry::notifyFlushRequired):
        * platform/graphics/blackberry/LayerWebKitThread.cpp:
        (WebCore::LayerWebKitThread::setNeedsCommit):
        * platform/graphics/ca/GraphicsLayerCA.cpp:
        (WebCore::GraphicsLayerCA::flushCompositingState):
        (WebCore::GraphicsLayerCA::flushCompositingStateForThisLayerOnly):
        (WebCore::GraphicsLayerCA::platformCALayerDidCreateTiles):
        (WebCore::GraphicsLayerCA::positionForCloneRootLayer):
        (WebCore::GraphicsLayerCA::noteLayerPropertyChanged):
        * platform/graphics/ca/GraphicsLayerCA.h:
        (GraphicsLayerCA):
        * platform/graphics/texmap/GraphicsLayerTextureMapper.cpp:
        (WebCore::GraphicsLayerTextureMapper::notifyChange):
        (WebCore::GraphicsLayerTextureMapper::flushCompositingStateForThisLayerOnly):
        (WebCore::GraphicsLayerTextureMapper::flushCompositingState):
        * platform/graphics/texmap/GraphicsLayerTextureMapper.h:
        (GraphicsLayerTextureMapper):
        * platform/graphics/texmap/TextureMapperLayer.cpp:
        (WebCore::TextureMapperLayer::flushCompositingState):
        (WebCore::TextureMapperLayer::flushCompositingStateSelf):
        * platform/graphics/texmap/TextureMapperLayer.h:
        (TextureMapperLayer):
        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::notifyFlushRequired):
        * rendering/RenderLayerBacking.h:
        (RenderLayerBacking):
        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::flushPendingLayerChanges):
        * rendering/RenderLayerCompositor.h:
        (WebCore::RenderLayerCompositor::notifyFlushRequired):

2012-10-04  Tab Atkins  <tabatkins@google.com>

        1ex should equal .5em when the font has no x-height metric
        https://bugs.webkit.org/show_bug.cgi?id=80360

        Reviewed by Eric Seidel.

        Updated FontMetrics and CSSPrimitiveValue to have/use an explicit "hasXHeight" flag to determine how to size an 'ex' unit.

        Updated a few of the platform font files to set the flag properly.

        Patch cleanup by David Barr <davidbarr@chromium.org>.

        Test: fast/css/ex-unit-with-no-x-height.html

        * css/CSSPrimitiveValue.cpp:
        (WebCore::CSSPrimitiveValue::computeLengthDouble):
        * platform/graphics/FontMetrics.h:
        (WebCore::FontMetrics::FontMetrics):
        (WebCore::FontMetrics::setXHeight):
        (FontMetrics):
        (WebCore::FontMetrics::hasXHeight):
        (WebCore::FontMetrics::setHasXHeight):
        (WebCore::FontMetrics::reset):
        * platform/graphics/skia/SimpleFontDataSkia.cpp:
        (WebCore::SimpleFontData::platformInit):

2012-10-04  Ryosuke Niwa  <rniwa@webkit.org>

        Build fix after r130411. Add the right offset.
        Also use RefPtr instead of a raw pointer for next and previous pointers.

        * editing/ReplaceSelectionCommand.cpp:
        (WebCore::ReplaceSelectionCommand::mergeTextNodesAroundPosition):

2012-10-04  Alec Flett  <alecflett@chromium.org>

        IndexedDB: promote objectstore/index backend ids to the frontend
        https://bugs.webkit.org/show_bug.cgi?id=97834

        Reviewed by Tony Chang.

        Expose int64-based database/objectStore/index ids to the renderer,
        step 1 of 2. Support both styles of createObjectStore and
        createIndex: those that take an explicit id, and those that take
        -1, meaning to autogenerate an id on the backend. In part 2, after
        the chromium side lands, support for the autogenerated ids will be
        removed. (See https://bugs.webkit.org/show_bug.cgi?id=98085)

        This is a part of larger refactoring work to ultimately make the interface
        between the frontend and the backend simpler.

        No new tests, extensive ASSERTs and existing tests cover correctness.

        * Modules/indexeddb/IDBBackingStore.h:
        (IDBBackingStore):
        * Modules/indexeddb/IDBDatabase.cpp:
        (WebCore::IDBDatabase::createObjectStore):
        * Modules/indexeddb/IDBDatabaseBackendImpl.cpp:
        (WebCore::IDBDatabaseBackendImpl::IDBDatabaseBackendImpl):
        (WebCore::IDBDatabaseBackendImpl::openInternal):
        (WebCore::IDBDatabaseBackendImpl::metadata):
        (WebCore::IDBDatabaseBackendImpl::createObjectStore):
        (WebCore):
        (WebCore::IDBDatabaseBackendImpl::createObjectStoreInternal):
        (WebCore::IDBDatabaseBackendImpl::loadObjectStores):
        * Modules/indexeddb/IDBDatabaseBackendImpl.h:
        (IDBDatabaseBackendImpl):
        * Modules/indexeddb/IDBDatabaseBackendInterface.h:
        (IDBDatabaseBackendInterface):
        * Modules/indexeddb/IDBIndexBackendImpl.cpp:
        (WebCore::IDBIndexBackendImpl::metadata):
        * Modules/indexeddb/IDBIndexBackendImpl.h:
        (WebCore::IDBIndexBackendImpl::create):
        (IDBIndexBackendImpl):
        * Modules/indexeddb/IDBLevelDBBackingStore.cpp:
        (WebCore):
        (WebCore::getMaxObjectStoreId):
        (WebCore::IDBLevelDBBackingStore::getIDBDatabaseMetaData):
        (WebCore::IDBLevelDBBackingStore::deleteDatabase):
        (WebCore::IDBLevelDBBackingStore::getObjectStores):
        (WebCore::setMaxObjectStoreId):
        (WebCore::IDBLevelDBBackingStore::createObjectStore):
        (WebCore::getMaxIndexId):
        (WebCore::setMaxIndexId):
        (WebCore::IDBLevelDBBackingStore::createIndex):
        * Modules/indexeddb/IDBLevelDBBackingStore.h:
        (IDBLevelDBBackingStore):
        * Modules/indexeddb/IDBMetadata.h:
        (WebCore::IDBDatabaseMetadata::IDBDatabaseMetadata):
        (IDBDatabaseMetadata):
        (WebCore::IDBObjectStoreMetadata::IDBObjectStoreMetadata):
        (IDBObjectStoreMetadata):
        (WebCore::IDBIndexMetadata::IDBIndexMetadata):
        (IDBIndexMetadata):
        * Modules/indexeddb/IDBObjectStore.cpp:
        (WebCore::IDBObjectStore::createIndex):
        * Modules/indexeddb/IDBObjectStoreBackendImpl.cpp:
        (WebCore::IDBObjectStoreBackendImpl::IDBObjectStoreBackendImpl):
        (WebCore::IDBObjectStoreBackendImpl::metadata):
        (WebCore::IDBObjectStoreBackendImpl::createIndex):
        (WebCore):
        (WebCore::IDBObjectStoreBackendImpl::createIndexInternal):
        * Modules/indexeddb/IDBObjectStoreBackendImpl.h:
        (WebCore::IDBObjectStoreBackendImpl::create):
        (IDBObjectStoreBackendImpl):
        * Modules/indexeddb/IDBObjectStoreBackendInterface.h:
2012-10-04  Pravin D  <pravind.2k4@gmail.com>

        Layout broken after cloning and re-inserting a table with a misplaced <form>
        https://bugs.webkit.org/show_bug.cgi?id=86746

        Reviewed by Julien Chaffraix.

        There is a concept of demotion for a <form> contained in a table. A <form> is demoted if its immediate parent
        is either a <table>, table sections (tbody, etc) or a table row (tr). A renderer for such a <form> is created only
        if its display is one of the table display types (TABLE, INLINE_TABLE, TABLE_FOOTER_GROUP, etc).
        However when a <table> containing a demoted <form> is cloned, the <form> does not retain its demotion state and 
        results in the table getting improperly rendered.

        Test: fast/table/form-with-non-table-display-inside-table-elements.html

        * html/HTMLFormElement.cpp:
        (WebCore::HTMLFormElement::copyNonAttributePropertiesFromElement):
          Extended the virtual function for HTMLFormElement class specific implementation.
          The function is used to copy any necessary state information(member variables) associated with
          the <form> element being cloned to the current node.
          For HTMLFormElement node the member variable can be classified into five groups based on the 
          information they hold:
            1) Variables containing information regarding <form> subtree and elements associated with it.
               These get updated as and when an element is added to the <form> subtree.
            2) Variables containing <form> submit state information.
            3) Flag to hold information if reset() has been called.
            4) Flag(m_wasDemoted) that indicates whether the form is demoted or not, based on which it needs to
               be handled differently during creation of its renderer.
               This information is currently being updated only during the HTML tree construction phase.
            5) Flag(m_wasMalformed) to hold information if the <form> is malformed or not.

          Variables of group (1) will be updated as and when elements are added to the <form> subtree. Whereas,
          (2) and (3) hold instance specific information, thus copying them is not required. Also (5) is currently not
          being used(not set by any code).

          On the other hand, (4) is required to be copied during cloning as this information cannot be accessed
          during the cloning process.

        (WebCore):
        * html/HTMLFormElement.h:
          Added copyNonAttributePropertiesFromElement() declaration.

2012-10-04  Dean Jackson  <dino@apple.com>

        Attribute and Uniform variable names need translation in shader
        https://bugs.webkit.org/show_bug.cgi?id=70989

        Reviewed by Tim Horton (and Darin Adler).

        WebGL specifies some maximum lengths for variable names (attributes
        and uniforms). Also, some GL drivers have issues with long names. For
        that reason, ANGLE has an option to rewrite the shader, translating
        long names into short names. Turning this on helps shaders compile,
        but we need to keep a mapping between the original names and the
        translated names, so that we bind to the right location from user code
        (which won't ever see the translated source).

        This provided an opportunity to clean up some other bits of code:
        CSS Filters examined the uniform names after a compilation; It can
        now use the variable name map. I also added a typedef for the
        HashMaps that keep the shader, the source code and the variable name
        mappings.

        I also opened a followup bug to make sure these tables are deleted
        when the associated shaders (or linked programs) go away:
        https://bugs.webkit.org/show_bug.cgi?id=98204

        Covered by existing tests (with some enhancements):
        - fast/canvas/webgl/attrib-location-length-limits.html:
        - fast/canvas/webgl/uniform-location-length-limits.html:

        * platform/graphics/ANGLEWebKitBridge.cpp:
        (WebCore::getSymbolInfo): Extracts all the information on symbols (either attributes
        or uniforms) from the newly compiled shader.
        (WebCore):
        (WebCore::ANGLEWebKitBridge::compileShaderSource): New method name.
        * platform/graphics/ANGLEWebKitBridge.h:
        (WebCore::getUniforms): Deleted this method.
        (WebCore::ANGLEShaderSymbol::isSampler): Make sure the symbol is a uniform.
        (ANGLEWebKitBridge):
        * platform/graphics/GraphicsContext3D.h:
        (WebCore::GraphicsContext3D::SymbolInfo::SymbolInfo): A new object that
        holds the size, type and translated name of a symbol from a WebGL shader.
        (ShaderSourceEntry):
        (WebCore::GraphicsContext3D::ShaderSourceEntry::ShaderSourceEntry): Now keeps track
        of the translated source code and symbol mappings.
        (WebCore::GraphicsContext3D::ShaderSourceEntry::symbolMap): Helper function to
        get the member variable corresponding to the type of symbol you're asking fo.
        * platform/graphics/filters/CustomFilterValidatedProgram.cpp:
        (WebCore::CustomFilterValidatedProgram::CustomFilterValidatedProgram): Calls new method
        name which also produces a set of symbols to examine.
        * platform/graphics/opengl/Extensions3DOpenGLCommon.cpp:
        (WebCore::Extensions3DOpenGLCommon::getTranslatedShaderSourceANGLE): We now can pass
        in some extra compile options to do translation of long symbol names. Also fill the
        map of translated symbol names.
        * platform/graphics/opengl/GraphicsContext3DOpenGLCommon.cpp:
        (WebCore::GraphicsContext3D::compileShader):
        (WebCore::GraphicsContext3D::mappedSymbolName): Returns the mapped name for
        a shader symbol if it was translated during compilation.
        (WebCore):
        (WebCore::GraphicsContext3D::getAttribLocation):
        (WebCore::GraphicsContext3D::getShaderiv):
        (WebCore::GraphicsContext3D::getShaderInfoLog):
        (WebCore::GraphicsContext3D::getShaderSource):
        (WebCore::GraphicsContext3D::getUniformLocation):

2012-10-04  Alpha Lam  <hclam@chromium.org>

        [skia] Drawing a subrect of bitmap image is misaligned
        https://bugs.webkit.org/show_bug.cgi?id=95121

        Reviewed by Stephen White.

        When drawing a subrect of BitmapImage and the subrect is not aligned
        to integer boundaries, skia expands it to the closest enclosing integer
        rectangle. This creates prominent rendering artifacts when an image
        is used as background and its sub-regions are invalidated frequently.

        This patch fixes the problem by doing alignment to integer boundaries
        and clipping for both cases of RESAMPLE_AWESOME and RESAMPLE_LINEAR.

        A clip rect is applied to the canvas using original destination
        rectangle, while source and destination rectangles are enlarged
        appropriately to ensure source rectangle is aligned.

        This patch also fixes a closely related problem. In RESAMPLE_AWESOME
        resampling mode the previous algorithm applies different approximated
        scale factor for each scaled image fragment. This caused the stitched
        image to look ugly.

        Scale factor is approximated using entire image size, this gives a
        more accurate approximation because of greater denominator and a
        consistent scale factor across all fragments.

        Changes in Skia enable caching of the scaled image and return the
        scaled fragment because scale factor is now consistent for all
        fragments.

        Tests: fast/images/paint-subrect-grid.html
               fast/images/paint-subrect.html
               fast/images/repaint-subrect-grid.html

        * platform/graphics/skia/ImageSkia.cpp:
        (WebCore::computeResamplingMode): Use float for width and height.
        (WebCore):
        (WebCore::areBoundariesIntegerAligned):
        (WebCore::computeBitmapDrawRects):
        (WebCore::extractScaledImageFragment):
        (WebCore::drawResampledBitmap): New algorithm for drawing scaled image fragment.
        (WebCore::paintSkBitmap):
        (WebCore::Image::drawPattern):
        (WebCore::BitmapImage::draw): Use SkRect instead of SkIRect.
        (WebCore::BitmapImageSingleFrameSkia::draw):
        * platform/graphics/skia/NativeImageSkia.cpp:
        Changing the algorithm for extracting a scaled image fragment.
        A fragment is now identified by (scaledImageSize, scaledImageSubset).
        (WebCore::NativeImageSkia::hasResizedBitmap):
        (WebCore::NativeImageSkia::resizedBitmap):
        (WebCore::NativeImageSkia::shouldCacheResampling):
        (WebCore::NativeImageSkia::CachedImageInfo::CachedImageInfo):
        (WebCore):
        (WebCore::NativeImageSkia::CachedImageInfo::isEqual):
        (WebCore::NativeImageSkia::CachedImageInfo::set):
        (WebCore::NativeImageSkia::CachedImageInfo::rectInSubset):
        * platform/graphics/skia/NativeImageSkia.h:
        (NativeImageSkia):
        (CachedImageInfo):

2012-10-03  Ryosuke Niwa  <rniwa@webkit.org>

        ReplaceSelectionCommand should merge text nodes
        https://bugs.webkit.org/show_bug.cgi?id=98188

        Reviewed by Levi Weintraub.

        Added mergeTextNodesAroundPosition to ReplaceSelectionCommand to merge text nodes after the replace in
        completeHTMLReplacement. Also fixed a bunch of bugs in other classes and functions to make this work.

        This behavior change is tested by existing tests.

        * editing/InsertParagraphSeparatorCommand.cpp:
        (WebCore::InsertParagraphSeparatorCommand::doApply): When splitting a text node, place the insertionPosition
        at the end of the first half. Leaving it at the beginning of the second half confuses the rest of the code in
        the function. However, the logic to handle the "insignificant" white spaces needs the position at the start of
        the second half. So keep this position.
        * editing/ReplaceSelectionCommand.cpp:
        (WebCore::ReplaceSelectionCommand::doApply): Update visibleStart after inserting a paragraph separator so that
        the logic to cleanup the nested div checks the right condition (right beneath it starting with a long comment).
        (WebCore::ReplaceSelectionCommand::addSpacesForSmartReplace): Insert a space for smart paste at the appropriate
        offset instead of at the end of endNode. Also update the layout before obtaining startDownstream as we may have 
        modified the DOM by inserting a space for endNode. Finally, a non-breaking space should be treated like a space
        isCharacterSmartReplaceExempt for the purpose of smart replace. e.g. if we're inserting "world" after
        "hello&nbsp;", we shouldn't be inserting another space between "hello" and "world".
        (WebCore::ReplaceSelectionCommand::completeHTMLReplacement):
        (WebCore::ReplaceSelectionCommand::mergeTextNodesAroundPosition): Added. Merge text nodes around position, and
        adjust position and positionOnlyToBeUpdated accordingly. We need to call updatePositionForNodeRemoval when
        positions were before or after the text node.
        * editing/ReplaceSelectionCommand.h:
        (ReplaceSelectionCommand):

2012-10-04  Tony Chang  <tony@chromium.org>

        Fix <input type="month"> tests
        https://bugs.webkit.org/show_bug.cgi?id=98426

        Reviewed by Ojan Vafai.

        The month picker uses flexbox and assumes that it will be aligned with
        the last line box. This looks visually correct. I will follow up on
        www-style to see what the expected behavior is.

        Tests: fast/forms/month-multiple-fields tests cover this.

        * rendering/RenderFlexibleBox.cpp:
        * rendering/RenderFlexibleBox.h:

2012-10-04  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r130396.
        http://trac.webkit.org/changeset/130396
        https://bugs.webkit.org/show_bug.cgi?id=98421

        This patch is causing crashes on 4 tests on Lion Debug and
        Mountain Lion Debug (Requested by jernoble on #webkit).

        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::calculateCompositedBounds):
        (WebCore::RenderLayerCompositor::requiresCompositingForPosition):
        * rendering/RenderLayerCompositor.h:
        * testing/InternalSettings.cpp:
        (WebCore::InternalSettings::Backup::Backup):
        (WebCore::InternalSettings::Backup::restoreTo):
        * testing/InternalSettings.h:
        (Backup):

2012-10-04  Tony Chang  <tony@chromium.org>

        inline-flex baseline is sometimes wrong
        https://bugs.webkit.org/show_bug.cgi?id=96188

        Reviewed by Ojan Vafai.

        Implement the necessary methods to get the proper baseline alignment of flexbox.
        We were falling back to the inline-block behavior.

        Test: css3/flexbox/flexbox-baseline.html

        * rendering/RenderFlexibleBox.cpp:
        (WebCore::RenderFlexibleBox::RenderFlexibleBox):
        (WebCore::RenderFlexibleBox::baselinePosition): Used to get the baseline of the box.
        Mostly just the first line box baseline.
        (WebCore):
        (WebCore::RenderFlexibleBox::lastLineBoxBaseline): This is used for getting the baseline when in an inline-block.
        We actually don't want the last line, but the flexbox's baseline.
        (WebCore::RenderFlexibleBox::firstLineBoxBaseline): Compute the baseline according to the rules in the spec.
        (WebCore::RenderFlexibleBox::repositionLogicalHeightDependentFlexItems): Keep track of the number of children on the
        first line so we don't have to re-compute this when getting the baseline.
        (WebCore::RenderFlexibleBox::crossAxisExtentForChild): Make const.
        (WebCore::RenderFlexibleBox::mainAxisExtentForChild): Make const.
        (WebCore::RenderFlexibleBox::hasAutoMarginsInCrossAxis): Make const.
        * rendering/RenderFlexibleBox.h: Add a size_t to keep track of how many children are in the first line.

2012-10-04  Xianzhu Wang  <wangxianzhu@chromium.org>

        [Chromium] Should set unitsPerEm in SimpleFontDataSkia.cpp
        https://bugs.webkit.org/show_bug.cgi?id=98100

        Reviewed by Stephen White.

        At least on chromium-linux and chromium-android, unitsPerEm was not set
        according to the information in the font, causing at least problems in
        OpenTypeVerticalData when calculating vertical advance.

        Test: fast/writing-mode/vertical-font-vmtx-units-per-em.html

        * platform/graphics/skia/SimpleFontDataSkia.cpp:
        (WebCore::SimpleFontData::platformInit):

2012-10-04  Simon Fraser  <simon.fraser@apple.com>

        Standardize on "flush" terminology for compositing layer flushing/syncing
        https://bugs.webkit.org/show_bug.cgi?id=98321

        Reviewed by Simon Fraser.

        Rename compositing-related methods that refer to "syncing" to instead
        refer to "flushing".

        * WebCore.exp.in:
        * loader/EmptyClients.h:
        (WebCore::EmptyChromeClient::scheduleCompositingLayerFlush):
        * page/ChromeClient.h:
        (ChromeClient):
        * page/FrameView.cpp:
        (WebCore::FrameView::flushCompositingStateForThisFrame):
        (WebCore::FrameView::flushCompositingStateIncludingSubframes):
        (WebCore::FrameView::paintContents):
        * page/FrameView.h:
        (FrameView):
        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::scheduleLayerFlush):
        (WebCore::RenderLayerCompositor::flushPendingLayerChanges):

2012-10-04  Peter Rybin  <peter.rybin@gmail.com>

        Web Inspector: expose object internal properties such as PrimitiveValue or BoundThis
        https://bugs.webkit.org/show_bug.cgi?id=94397

        Reviewed by Yury Semikhatsky.

        Internal property access is built from Injected Script to V8 debug API. JSC binding
        has a stub imlpementation. Protocol is updated to explicitly reflect internal properties.

        Test: inspector-protocol/runtime-getProperties.html

        * bindings/js/JSInjectedScriptHostCustom.cpp:
        (WebCore::JSInjectedScriptHost::getInternalProperties):
        (WebCore):
        * bindings/v8/DebuggerScript.js:
        * bindings/v8/ScriptDebugServer.cpp:
        (WebCore::ScriptDebugServer::getInternalProperties):
        (WebCore):
        * bindings/v8/ScriptDebugServer.h:
        (ScriptDebugServer):
        * bindings/v8/custom/V8InjectedScriptHostCustom.cpp:
        (WebCore::V8InjectedScriptHost::getInternalPropertiesCallback):
        (WebCore):
        * inspector/InjectedScript.cpp:
        (WebCore::InjectedScript::getInternalProperties):
        (WebCore):
        * inspector/InjectedScript.h:
        (InjectedScript):
        * inspector/InjectedScriptHost.idl:
        * inspector/InjectedScriptSource.js:
        (.):
        * inspector/Inspector.json:
        * inspector/InspectorRuntimeAgent.cpp:
        (WebCore::InspectorRuntimeAgent::getProperties):
        * inspector/InspectorRuntimeAgent.h:
        (InspectorRuntimeAgent):

2012-10-04  Sami Kyostila  <skyostil@chromium.org>

        Fixed position visibility check does not consider descendants
        https://bugs.webkit.org/show_bug.cgi?id=98144

        Reviewed by Simon Fraser.

        The check against creating composition layers for invisible fixed positioned
        elements is too aggressive in that it does not consider descendants of the
        fixed positioned element that may be visible even though the element itself is
        out of view.

        Fix the problem by calculating the true composited bounds of the fixed
        element instead of just using the size of the fixed layer. Because calculating
        the true bounds may be expensive, it is only done if the fixed layer itself is
        invisible.

        Test: compositing/layer-creation/fixed-position-absolute-descendant.html

        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::calculateCompositedBounds):
        (WebCore::RenderLayerCompositor::requiresCompositingForPosition):
        * rendering/RenderLayerCompositor.h:

2012-10-04  Vsevolod Vlasov  <vsevik@chromium.org>

        Web Inspector: When uiSourceCode content has diverged from VM script, call frames should be shown in temporary script based uiSourceCodes.
        https://bugs.webkit.org/show_bug.cgi?id=98385

        Reviewed by Pavel Feldman.

        When javaScriptSource diverges from VM, ResourceScriptMapping now switches debugging
        to temporary VM scripts based uiSourceCode with isDivergedReplacement property set.
        Added hasDivergedFromVM and isDivergingFromVM properties to JavaScriptSource.
        JavaScriptSourceFrame and ScriptSnippetsModel are updated to process breakpoint changes correctly.

        * inspector/front-end/BreakpointManager.js:
        (WebInspector.BreakpointManager.prototype.restoreBreakpoints):
        (WebInspector.BreakpointManager.prototype._uiSourceCodeRemoved):
        * inspector/front-end/JavaScriptSource.js:
        (WebInspector.JavaScriptSource.prototype.workingCopyCommitted):
        (WebInspector.JavaScriptSource.prototype.workingCopyChanged):
        (WebInspector.JavaScriptSource.prototype.fireHasDivergedFromVMChanged):
        * inspector/front-end/JavaScriptSourceFrame.js:
        (WebInspector.JavaScriptSourceFrame.prototype.commitEditing):
        (WebInspector.JavaScriptSourceFrame.prototype._hasDivergedFromVM):
        (WebInspector.JavaScriptSourceFrame.prototype.onTextChanged):
        (WebInspector.JavaScriptSourceFrame.prototype._getBreakpointDecorations):
        (WebInspector.JavaScriptSourceFrame.prototype._muteBreakpointsWhileEditing):
        (WebInspector.JavaScriptSourceFrame.prototype._didEditContent):
        (WebInspector.JavaScriptSourceFrame.prototype._restoreBreakpointsAfterEditing):
        (WebInspector.JavaScriptSourceFrame.prototype._addBreakpointDecoration):
        * inspector/front-end/ResourceScriptMapping.js:
        (WebInspector.ResourceScriptMapping.prototype.rawLocationToUILocation):
        (WebInspector.ResourceScriptMapping.prototype._hasDivergedFromVMChanged):
        (WebInspector.ResourceScriptMapping.prototype._bindUISourceCodeToScripts):
        (WebInspector.ResourceScriptMapping.prototype._getOrCreateTemporaryUISourceCode):
        * inspector/front-end/ScriptSnippetModel.js:
        (WebInspector.ScriptSnippetModel.prototype._createUISourceCodeForScript):
        (WebInspector.ScriptSnippetModel.prototype._restoreBreakpoints):
        * inspector/front-end/ScriptsPanel.js:
        (WebInspector.ScriptsPanel.prototype._revealExecutionLine):
        * inspector/front-end/UISourceCode.js:
        (WebInspector.UISourceCode.prototype.formatted):

2012-10-04  Vsevolod Vlasov  <vsevik@chromium.org>

        Web Inspector: Scripts panel should not automatically switch to snippet evaluation when previously evaluated snippet is edited.
        https://bugs.webkit.org/show_bug.cgi?id=98402

        Reviewed by Pavel Feldman.

        Scripts panel does not automatically switch to snippet evaluation when
        one edits previously evaluated snippet.

        * inspector/front-end/ScriptSnippetModel.js:
        (WebInspector.ScriptSnippetModel.prototype._createUISourceCodeForScript):
        * inspector/front-end/ScriptsPanel.js:
        (WebInspector.ScriptsPanel.prototype._revealExecutionLine):

2012-10-04  Balazs Kelemen  <kbalazs@webkit.org>

        Don't allow to disable compositing in forced compositing mode
        https://bugs.webkit.org/show_bug.cgi?id=98048

        Reviewed by Jocelyn Turcotte.

        Make forced compositing mode imply accelerated compositing. This will
        avoid unexpected situations for platforms that don't want to support
        the non-accelerated rendering path.

        Covered by existing tests.

        * WebCore.exp.in: Export Settings::setAcceleratedCompositingEnabled
        because it has been deinlined.
        * page/Settings.cpp:
        (WebCore::Settings::setAcceleratedCompositingEnabled):
        (WebCore::Settings::setForceCompositingMode):
        (WebCore):
        * page/Settings.h:
        (Settings):
        (WebCore::Settings::forceCompositingMode): Make it const as a side fix.

2012-10-04  Harald Alvestrand  <hta@google.com>

        Change RTCPeerConnection GetStats to use Date timestamp format
        https://bugs.webkit.org/show_bug.cgi?id=98263

        Reviewed by Yury Semikhatsky.

        Tested by extension to RTCPeerConnection-stats test.

        * Modules/mediastream/RTCStatsElement.cpp:
        (WebCore::RTCStatsElement::create):
        (WebCore::RTCStatsElement::RTCStatsElement):
        * Modules/mediastream/RTCStatsElement.h: long -> double
        (RTCStatsElement):
        (WebCore::RTCStatsElement::timestamp):
        * Modules/mediastream/RTCStatsElement.idl: long -> Date
        * Modules/mediastream/RTCStatsReport.cpp:
        (WebCore::RTCStatsReport::addElement):
        * Modules/mediastream/RTCStatsReport.h:
        (RTCStatsReport):
        * Modules/mediastream/RTCStatsResponse.cpp:
        (WebCore::RTCStatsResponse::addElement):
        * Modules/mediastream/RTCStatsResponse.h:
        (RTCStatsResponse):
        * platform/chromium/support/WebRTCStatsResponse.cpp:
        (WebKit::WebRTCStatsResponse::addElement):
        * platform/mediastream/RTCStatsResponseBase.h:
        (RTCStatsResponseBase):

2012-10-04  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r130377.
        http://trac.webkit.org/changeset/130377
        https://bugs.webkit.org/show_bug.cgi?id=98392

        Chromium Win compilation is broken (Requested by yurys on
        #webkit).

        * Modules/mediastream/RTCStatsElement.cpp:
        (WebCore::RTCStatsElement::create):
        (WebCore::RTCStatsElement::RTCStatsElement):
        * Modules/mediastream/RTCStatsElement.h:
        (RTCStatsElement):
        (WebCore::RTCStatsElement::timestamp):
        * Modules/mediastream/RTCStatsElement.idl:
        * Modules/mediastream/RTCStatsReport.cpp:
        (WebCore::RTCStatsReport::addElement):
        * Modules/mediastream/RTCStatsReport.h:
        (RTCStatsReport):
        * Modules/mediastream/RTCStatsResponse.cpp:
        (WebCore::RTCStatsResponse::addElement):
        * Modules/mediastream/RTCStatsResponse.h:
        (RTCStatsResponse):
        * platform/chromium/support/WebRTCStatsResponse.cpp:
        (WebKit::WebRTCStatsResponse::addElement):
        * platform/mediastream/RTCStatsResponseBase.h:
        (RTCStatsResponseBase):

2012-10-04  Harald Alvestrand  <hta@google.com>

        Change RTCPeerConnection GetStats to use Date timestamp format
        https://bugs.webkit.org/show_bug.cgi?id=98263

        Reviewed by Adam Barth.

        Tested by extension to RTCPeerConnection-stats test.

        * Modules/mediastream/RTCStatsElement.cpp:
        (WebCore::RTCStatsElement::create):
        (WebCore::RTCStatsElement::RTCStatsElement):
        * Modules/mediastream/RTCStatsElement.h: long -> double
        (RTCStatsElement):
        (WebCore::RTCStatsElement::timestamp):
        * Modules/mediastream/RTCStatsElement.idl: long -> Date
        * Modules/mediastream/RTCStatsReport.cpp:
        (WebCore::RTCStatsReport::addElement):
        * Modules/mediastream/RTCStatsReport.h:
        (RTCStatsReport):
        * Modules/mediastream/RTCStatsResponse.cpp:
        (WebCore::RTCStatsResponse::addElement):
        * Modules/mediastream/RTCStatsResponse.h:
        (RTCStatsResponse):
        * platform/chromium/support/WebRTCStatsResponse.cpp:
        (WebKit::WebRTCStatsResponse::addElement):
        * platform/mediastream/RTCStatsResponseBase.h:
        (RTCStatsResponseBase):

2012-10-05  Kent Tamura  <tkent@chromium.org>

        [Chromium] Enable the multiple fields UI for input[type=date]
        https://bugs.webkit.org/show_bug.cgi?id=98351

        Reviewed by Hajime Morita.

        Touch files related to ENABLE_INPUT_TYPE_DATE_LEGACY_UI to avoid build
        issues.

        No new tests. Many tests will be landed shortly.

        * html/DateInputType.cpp:
        * html/DateInputType.h:

2012-10-04  Kent Tamura  <tkent@chromium.org>

        Add code for input[type=date] with the multiple fields UI
        https://bugs.webkit.org/show_bug.cgi?id=98340

        Reviewed by Hajime Morita.

        The new code is available if !ENABLE(INPUT_TYPE_DATE_LEGACY_UI). At this
        moment, there are no platforms enabling the new code. We're going to
        enable it soon on desktop Chromium, and add tests. Then we're going to
        remove the code for ENABLE(INPUT_TYPE_DATE_LEGACY_UI).

        ENABLE(INPUT_TYPE_DATE_LEGACY_UI) means the current UI; input[type=date]
        is represetnted as a kind of text field, and it has code to invoke a
        calendar picker.
        ENABLE(CALENDAR_PICKER) was used wrongly. It meant calendar picker
        support + text field UI of input[type=date]. Now it means only calendar
        picker support.

        * html/DateInputType.h:
        (WebCore): If ENABLE(INPUT_MULTIPLE_FIELDS_UI) &&
        !ENABLE(INPUT_TYPE_DATE_LEGACY_UI), change the base class to the class
        for multiple fields UI.
        (DateInputType): Wrap the code for text fields behavior and calendar
        picker UI with ENABLE(INPUT_TYPE_DATE_LEGACY_UI). Add functions for
        ENABLE(INPUT_MULTIPLE_FIELDS_UI)
        * html/DateInputType.cpp:
        (WebCore::DateInputType::DateInputType):
        Change the flag name; CALENDAR_PICKER -> INPUT_TYPE_DATE_LEGACY_UI
        (WebCore): ditto.
        (WebCore::DateInputType::formatDateTimeFieldsState):
        A callback for multiple fields UI. This constructs a string value from
        each of values of multiple fields.
        Note that we don't need to do +1 to month().
        (WebCore::DateInputType::setupLayoutParameters):
        A callback for multiple fields UI. Passes information to build UI.

        * html/BaseMultipleFieldsDateAndTimeInputType.h:
        (BaseMultipleFieldsDateAndTimeInputType):
        Add m_pickerIndicatorIsAlwaysVisible member, wrap some members with flags.
        * html/BaseMultipleFieldsDateAndTimeInputType.cpp:
        (WebCore::BaseMultipleFieldsDateAndTimeInputType::BaseMultipleFieldsDateAndTimeInputType):
        Initialize m_pickerIndicatorIsAlwaysVisible.
        (WebCore::BaseMultipleFieldsDateAndTimeInputType::createShadowSubtree):
        If a type supports calendar picker, we should always show the picker
        indicator. We introduce m_pickerIndicatorIsAlwaysVisible flag, and ask
        RenderTheme for support status of each of types.
        Add a local variable 'document' to avoid multiple element()->document().
        (WebCore::BaseMultipleFieldsDateAndTimeInputType::updatePickerIndicatorVisibility):
        - If m_pickerIndicatorIsAlwaysVisible, don't hide the picker indicator element.
        - Wrap the code with appropriate flags.

        * rendering/RenderTheme.h:
        (WebCore::RenderTheme::supportsCalendarPicker): Added.
        * rendering/RenderThemeChromiumMac.h: Override supportsCalendarPicker.
        * rendering/RenderThemeChromiumMac.mm:
        (WebCore::RenderThemeChromiumMac::supportsCalendarPicker):
        Added. Delegate to RenderThemeChromiumCommon.
        * rendering/RenderThemeChromiumSkia.h: Override supportsCalendarPicker.
        * rendering/RenderThemeChromiumSkia.cpp:
        (WebCore::RenderThemeChromiumSkia::supportsCalendarPicker):
        Added. Delegate to RenderThemeChromiumCommon.
        * rendering/RenderThemeChromiumCommon.h:
        (RenderThemeChromiumCommon): Declare supportsCalendarPicker.
        * rendering/RenderThemeChromiumCommon.cpp:
        (WebCore::RenderThemeChromiumCommon::supportsCalendarPicker):
        Returns true if the type is "date."

        * html/DateTimeFieldsState.h:
        (DateTimeFieldsState): Add a comment for the m_month field.

2012-10-04  Kent Tamura  <tkent@chromium.org>

        DateTimeYearFieldElement should respect min/max values specified by page authors
        https://bugs.webkit.org/show_bug.cgi?id=98227

        Reviewed by Hajime Morita.

        Before this patch, we always set 1 to the minimum limit and 275760 to
        the maximum limit for a year field, and a user can specify any year
        regardless of min/max attributes. Such wide range is unnecessary for
        normal applications and we should provide a way to limit the range.

        Test: fast/forms/month-multiple-fields/month-multiple-fields-keyboard-events.html

        * html/shadow/DateTimeFieldElements.h:
        To add four constructor arguments, introduce Parameters struct.
        Actually, we add the followings;
         - minimum year in UI
         - maximum year in UI
         - min attribute is specified
         - max attribute is specified
        (Parameters):
        (WebCore::DateTimeYearFieldElement::Parameters::Parameters):
        (DateTimeYearFieldElement):
        * html/shadow/DateTimeFieldElements.cpp:
        (WebCore::DateTimeYearFieldElement::DateTimeYearFieldElement): ditto.
        (WebCore::DateTimeYearFieldElement::create): ditto.
        (WebCore::DateTimeYearFieldElement::clampValueForHardLimits):
        Override DateTimeNumericFieldElement::clampValueForHardLimits.
        By this, we allow to set out-of-range year values.
        (WebCore::currentFullYear): A helper to get the current year.
        (WebCore::DateTimeYearFieldElement::defaultValueForStepDown):
        If the field has no value and step down operation occurs,
         - the field has the current year if the max attribute is not specified.
         - the field has the maximum value otherwise.
        (WebCore::DateTimeYearFieldElement::defaultValueForStepUp): Similar change.

        * html/shadow/DateTimeNumericFieldElement.h:
        (DateTimeNumericFieldElement): Declare clampValueForHardLimits.
        * html/shadow/DateTimeNumericFieldElement.cpp:
        (WebCore::DateTimeNumericFieldElement::clampValueForHardLimits):
        (WebCore::DateTimeNumericFieldElement::setValueAsInteger):
        Call clampValueForHardLimits instead of clampValue in order to
        distinguish limits for UI and limits for internal value update.

        * html/shadow/DateTimeEditElement.h:
        (LayoutParameters): Add minimumYear and maximumYear members.
        (WebCore::DateTimeEditElement::LayoutParameters::LayoutParameters):
        Initialize minimumYear and maximumYear.
        (WebCore::DateTimeEditElement::LayoutParameters::undefinedYear):
        Represents 'undefined' value for minimumYear and maximumYear.
        * html/shadow/DateTimeEditElement.cpp:
        (WebCore::DateTimeEditBuilder::visitField):
        Preparas DateTimeYearField::Parameters and pass it to the DateTimeYearField factory.

        * html/BaseMultipleFieldsDateAndTimeInputType.cpp:
        (WebCore::BaseMultipleFieldsDateAndTimeInputType::fullYear):
        A helper to get a year value from an attribute value string.
        * html/BaseMultipleFieldsDateAndTimeInputType.h:
        (BaseMultipleFieldsDateAndTimeInputType): Add fullYear().

        * html/DateTimeInputType.cpp:
        (WebCore::DateTimeInputType::setupLayoutParameters):
        Set LayoutParameters::minimumYear and maximumYear.
        * html/DateTimeLocalInputType.cpp:
        (WebCore::DateTimeLocalInputType::setupLayoutParameters): ditto.
        * html/MonthInputType.cpp:
        (WebCore::MonthInputType::setupLayoutParameters): ditto.
        * html/WeekInputType.cpp:
        (WebCore::WeekInputType::setupLayoutParameters): ditto.

2012-10-03  Adam Barth  <abarth@webkit.org>

        Unreviewed. Fix parse error in vcproj file.

        * WebCore.vcproj/WebCore.vcproj:

2012-10-03  Keishi Hattori  <keishi@webkit.org>

        Implement localizeValue for TimeInputType
        https://bugs.webkit.org/show_bug.cgi?id=98237

        Reviewed by Kent Tamura.

        We want to localize time values for the suggestion picker.
        DateTimeStringBuilder parses a format and creates a formatted string.

        Added chromium unit test LocaleMacTest.formatTime

        * html/BaseMultipleFieldsDateAndTimeInputType.cpp:
        (WebCore::BaseMultipleFieldsDateAndTimeInputType::shouldHaveSecondField): Moved from LayoutParameters because we want to use it inside localizeValue.
        (WebCore):
        * html/BaseMultipleFieldsDateAndTimeInputType.h:
        (BaseMultipleFieldsDateAndTimeInputType):
        * html/DateTimeInputType.cpp:
        (WebCore::DateTimeInputType::setupLayoutParameters):
        * html/DateTimeLocalInputType.cpp:
        (WebCore::DateTimeLocalInputType::setupLayoutParameters):
        * html/TimeInputType.cpp:
        (WebCore::TimeInputType::localizeValue):
        (WebCore):
        (WebCore::TimeInputType::setupLayoutParameters):
        * html/TimeInputType.h:
        (TimeInputType):
        * html/shadow/DateTimeEditElement.cpp:
        (WebCore):
        * html/shadow/DateTimeEditElement.h:
        (WebCore::DateTimeEditElement::LayoutParameters::LayoutParameters):
        * platform/text/LocaleICU.cpp:
        (WebCore::LocaleICU::formatDateTime): Calls Localizer::formatDateTime if the date component is not a date.
        * platform/text/LocaleICU.h:
        (LocaleICU):
        * platform/text/LocaleWin.cpp:
        (WebCore::LocaleWin::formatDateTime): Calls Localizer::formatDateTime if the date component is not a date.
        * platform/text/LocaleWin.h:
        (LocaleWin):
        * platform/text/LocaleNone.cpp:
        (LocaleNone):
        (WebCore::LocaleNone::formatDateTime):
        * platform/text/Localizer.cpp:
        (DateTimeStringBuilder):
        (WebCore):
        (WebCore::DateTimeStringBuilder::DateTimeStringBuilder): Takes a
        Localizer pointer. This is used inside the Localizer so the Localizer
        will out live the DateTimeStringBuilder.
        (WebCore::DateTimeStringBuilder::build): Builds a localized string for the given format.
        (WebCore::DateTimeStringBuilder::zeroPadString):
        (WebCore::DateTimeStringBuilder::appendNumber): Appends a number with left zero padding to match width.
        (WebCore::DateTimeStringBuilder::visitField):
        (WebCore::DateTimeStringBuilder::visitLiteral):
        (WebCore::DateTimeStringBuilder::toString): Returns the localized string.
        (WebCore::Localizer::formatDateTime):
        * platform/text/Localizer.h:
        * platform/text/mac/LocaleMac.h:
        (LocaleMac):
        * platform/text/mac/LocaleMac.mm:
        (WebCore::LocaleMac::formatDateTime): Calls Localizer::formatDateTime if the date component is not a date.

2012-10-03  Douglas Stockwell  <dstockwell@chromium.org>

        Chromium needs support for border radius clipping
        https://bugs.webkit.org/show_bug.cgi?id=69866

        Reviewed by Stephen White.

        Changes to make this suitably efficient have already landed upstream in skia:
        http://code.google.com/p/skia/source/detail?r=2924

        Covered by existing tests.

        * rendering/RenderLayer.cpp:

2012-10-03  Benjamin Poulain  <bpoulain@apple.com>

        Simplify attribute access in Element::computeInheritedLanguage
        https://bugs.webkit.org/show_bug.cgi?id=98327

        Reviewed by Andreas Kling.

        * dom/Element.cpp:
        (WebCore::Element::computeInheritedLanguage):
        By using Element::fastGetAttribute(), we check for the existence of attributeData twice
        and do a bunch of useless operation on AtomicString.

        By using ElementAttributeData directly, we can cut it to the two important branch.

2012-10-03  Kangil Han  <kangil.han@samsung.com>

        Fix unused parameter compile warnings.
        https://bugs.webkit.org/show_bug.cgi?id=98243

        Reviewed by Alexey Proskuryakov.

        Fixed unused parameter compile warning by removing parameter names and adding UNUSED_PARAM usage.

        * plugins/PluginDebug.cpp:
        (WebCore::prettyNameForNPPVariable):
        * plugins/npapi.cpp:
        (NPN_MemFlush):
        (NPN_RequestRead):
        (NPN_GetJavaPeer):

2012-10-03  Adam Barth  <abarth@webkit.org>

        Measure the usage of WebSQLDatabase
        https://bugs.webkit.org/show_bug.cgi?id=98330

        Reviewed by Ojan Vafai.

        WebKit is the only engine that implements WebSQLDatabase. This patch
        causes us to measure its usage so we can see how quickly web sites move
        to IndexedDB.

        * Modules/webdatabase/DOMWindowWebDatabase.idl:
        * page/FeatureObserver.h:

2012-10-03  Arnaud Renevier  <a.renevier@sisa.samsung.com>

        [soup] WebKit crashes when doing a http request
        https://bugs.webkit.org/show_bug.cgi?id=98055

        Reviewed by Martin Robinson.

        On i386, (d->m_firstRequest.timeoutInterval() * 1000) results in 0 if
        timeoutInterval() is INT_MAX. So, set default timeout to 0 to avoid
        calling soup_add_timeout with a 0 value.

        Also, if resource handle is deleted before "request-started" signal is
        emitted, soupMessage handle points to a deleted object, and a crash
        occurs. So, reset soupMessage handle data in
        cleanupSoupRequestOperation so it won't happen anymore.

        Lastly, if timeout occurs before request is completed, handle is
        deleted, and crash occurs in sendRequestCallback due to an early
        destroyed handle. To avoid that, call handle->cancel in
        requestTimeoutCallback. There is no need to call
        cleanupSoupRequestOperation anymore since handle->cancel will trigger
        sendRequestCallback, and as handle is deleted,
        cleanupSoupRequestOperation will be called automatically.

        No new tests yet, tests will be added with the patch in bug 74802.

        * platform/network/ResourceRequestBase.cpp:
        (WebCore):
        * platform/network/soup/ResourceHandleSoup.cpp:
        (WebCore::cleanupSoupRequestOperation):
        (WebCore::ResourceHandle::platformSetDefersLoading):
        (WebCore::requestTimeoutCallback):

2012-10-03  Adam Barth  <abarth@webkit.org>

        Remove support for ENABLE(LEGACY_WEBKIT_BLOB_BUILDER)
        https://bugs.webkit.org/show_bug.cgi?id=98301

        Reviewed by Eric Seidel.

        According to anonymous usage statistics, the APIs guarded by
        ENABLE(LEGACY_WEBKIT_BLOB_BUILDER) are used on approximately 0.006% of
        web pages. Given that this feature is only enabled in GTK and Chromium,
        it seems likely that we should remove it.

        * CMakeLists.txt:
        * DerivedSources.make:
        * DerivedSources.pri:
        * GNUmakefile.features.am:
        * GNUmakefile.list.am:
        * WebCore.gypi:
        * WebCore.xcodeproj/project.pbxproj:
        * fileapi/WebKitBlobBuilder.idl: Removed.
        * page/DOMWindow.idl:

2012-10-03  Beth Dakin  <bdakin@apple.com>

        https://bugs.webkit.org/show_bug.cgi?id=98313
        ScrollingStateNode should keep a Vector of children instead of child 
        pointers

        Reviewed by Simon Fraser.

        This patch re-names ScrollingStateNode::cloneNode() to 
        ScrollingStateNode::cloneAndResetNode(). The new function resets the 
        change properties of the current node after cloning it, and it also 
        takes care of cloning children, which the old function did not do.

        m_firstChild and m_nextSibling are gone. Use the m_children Vector 
        instead.
        * page/scrolling/ScrollingStateNode.cpp:
        (WebCore::ScrollingStateNode::cloneAndResetChildNodes):
        (WebCore::ScrollingStateNode::appendChild):
        * page/scrolling/ScrollingStateNode.h:
        (ScrollingStateNode):
        (WebCore::ScrollingStateNode::parent):
        (WebCore::ScrollingStateNode::setParent):

        Reset the change properties and clone children in cloneAndResetNode()
        * page/scrolling/ScrollingStateScrollingNode.cpp:
        (WebCore::ScrollingStateScrollingNode::cloneAndResetNode):
        * page/scrolling/ScrollingStateScrollingNode.h:

        Yay, this function can be vastly simplified now that we don't have 
        those messy child and sibling pointers.
        * page/scrolling/ScrollingStateTree.cpp:
        (WebCore::ScrollingStateTree::commit):

2012-10-03  Ojan Vafai  <ojan@chromium.org>

        Replace uses of -webkit-box-sizing with box-sizing
        https://bugs.webkit.org/show_bug.cgi?id=98312

        Reviewed by Tony Chang.

        No need to use the prefixed version when the unprefixed works the same.
        No new tests since there's no change in behavior..

        * css/html.css:

2012-10-03  Joshua Bell  <jsbell@chromium.org>

        IndexedDB: Don't do full commit for empty transactions
        https://bugs.webkit.org/show_bug.cgi?id=89239

        Reviewed by Tony Chang.

        Don't bother creating a leveldb write batch if there's nothing in the transaction
        to commit. Note that a read-only transaction may still have index cleanup so may
        not be an empty transaction.

        This cuts the Lookup2 benchmark in http://reyesr.github.com/html5-storage-benchmark/
        from 70s to 2s.

        Covered by existing tests, e.g. storage/indexeddb/transaction-basics.html

        * platform/leveldb/LevelDBTransaction.cpp:
        (WebCore::LevelDBTransaction::commit):

2012-10-03  Adam Klein  <adamk@chromium.org>

        Remove bogus FIXME from Document.idl
        https://bugs.webkit.org/show_bug.cgi?id=98302

        Reviewed by Adam Barth.

        The FIXME claimed that document.body throwing an exception was not
        specced, but in fact it is:
        http://www.whatwg.org/specs/web-apps/current-work/multipage/dom.html#dom-document-body

        * dom/Document.idl:

2012-10-03  Joshua Bell  <jsbell@chromium.org>

        IndexedDB: Memory leak when deleting object stores with indexes
        https://bugs.webkit.org/show_bug.cgi?id=98292

        Reviewed by Tony Chang.

        Reference cycles between IDBObjectStore and IDBIndex instances are explicitly
        broken when the transaction completes (and the spec allows traversal to fail).
        Deleted stores need to have the reference cycle broken too.

        Caught by running valgrind over: storage/indexeddb/keypath-basics.html

        * Modules/indexeddb/IDBTransaction.cpp:
        (WebCore::IDBTransaction::objectStoreDeleted): Add store to set.
        (WebCore::IDBTransaction::dispatchEvent): Notify stores in set.
        * Modules/indexeddb/IDBTransaction.h: Add set of deleted stores.

2012-10-03  Adam Barth  <abarth@webkit.org>

        CSSNamespace.h is empty and should be deleted
        https://bugs.webkit.org/show_bug.cgi?id=98304

        Reviewed by Eric Seidel.

        There's no reason to have this file in the repository.

        * GNUmakefile.list.am:
        * WebCore.gypi:
        * WebCore.vcproj/WebCore.vcproj:
        * WebCore.xcodeproj/project.pbxproj:
        * css/CSSNamespace.h: Removed.

2012-10-03  Arnaud Renevier  <a.renevier@sisa.samsung.com>

        Build failure with css filters enabled and accelerated compositing disabled
        https://bugs.webkit.org/show_bug.cgi?id=95908

        Reviewed by Tony Chang.

        Do not try to setBackingNeedsRepaint when building without accelerated
        compositing.

        Also, allow painting with filter (paintsWithFilters returns true if
        renderer has filter) when accelerated compositing is not enabled.

        No functional change, so no new tests.

        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::styleChanged):

2012-10-03  Emil A Eklund  <eae@chromium.org>

        Round image sizes when zooming
        https://bugs.webkit.org/show_bug.cgi?id=98205

        Reviewed by Eric Seidel.

        We currently floor image sizes when zooming which can result in
        images being rendered at one pixel less than the actual size.
        This is especially likely to happen for very large images.

        Test: fast/sub-pixel/zoomed-image-tiles.html

        * loader/cache/CachedImage.cpp:
        (WebCore::CachedImage::imageSizeForRenderer):

2012-10-03  Hugo Parente Lima  <hugo.lima@openbossa.org>

        [WK2] PageViewportController.cpp is supposed to be a generic WebKit2 file but only works with Qt port.
        https://bugs.webkit.org/show_bug.cgi?id=98186

        Reviewed by Noam Rosenthal.

        Remove the implicit conversion from WebCore::FloatSize to QSize.

        * platform/graphics/FloatSize.h:
        (FloatSize):

2012-10-03  Levi Weintraub  <leviw@chromium.org>

        [Sub-pixel layout] incorrect rendering when painting sub-layers as their own root
        https://bugs.webkit.org/show_bug.cgi?id=97484

        Reviewed by Eric Seidel.

        When in compositing mode, layer painting can be triggered through the backing store. When this
        happens, a non-top-level RenderLayer is called to paint as its own root. Normally, we attempt to preserve
        the proper sub-pixel accumulation through layers to their children, but since we're not
        starting with the top-level layer, we haven't properly accumulated one, and convertToLayerCoords,
        another source of correctly getting the sub-pixel offset for a layer, also avoids crawling
        past the listed root layer.

        When painting a root layer, we're aligned to the surface we're painting to, so we round our
        offset to avoid moving objects around.

        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::paintLayerContents):

2012-10-03  Jeff Timanus  <twiz@chromium.org>

        [chromium] Expose settings value to conditionally enable pinch-zoom scaling in the Chromium compositor.  The
        flag defaults to disabled, so this change should be a no-op for scaling/scrolling behaviour.
        https://bugs.webkit.org/show_bug.cgi?id=93292

        Reviewed by James Robinson.

        Tests:  Existing page-scale layout tests.

        * page/Frame.cpp:
        (WebCore::Frame::frameScaleFactor):
        * page/Settings.cpp:
        (WebCore::Settings::Settings):
        * page/Settings.h:
        (WebCore::Settings::setApplyPageScaleFactorInCompositor):
        (WebCore::Settings::applyPageScaleFactorInCompositor):
        (Settings):

2012-10-03  Stephen Chenney  <schenney@chromium.org>

        Font data is purged while fonts are still using it
        https://bugs.webkit.org/show_bug.cgi?id=93640

        Reviewed by Eric Seidel.

        Move the handling of custom font pruning from Document to FontFallbackList.
        The previous inplementation allowed fonts to be removed before all their
        clients were done. This change moves handling of custom font purging to the
        FontFallbackList class, which is the shared object that is only removed
        when all clients of a font are done with it. This fixes a crash in Angry
        Birds due to a seamless iframe and some failing tests in fast/frames/seamless.

        The specific element that causes problems is:
        <iframe id="ingame_frame0" name="ingame_frame0" frameborder="0" seamless="true"
          src="http://chrome.angrybirds.com/ingame_graphic.html"
          onload="this.style.opacity = 1; parent.adLoaded();" scrolling="no"
          style="opacity: 1; -webkit-transition: opacity 1s ease-in-out 0s;
          position: absolute; border: 0px; width: 312px; height: 320px; z-index:
          300; overflow: hidden; visibility: visible;"></iframe>
        The source document uses the same font as the embedding document.

        Tests: fast/frames/seamless/seamless-custom-font-pruning-crash.html
               fast/frames/seamless/seamless-nested-crash.html

        * css/CSSFontFaceSource.cpp:
        (WebCore::CSSFontFaceSource::getFontData): Remove code to register the font with the document.
        * css/CSSSegmentedFontFace.cpp:
        (WebCore::CSSSegmentedFontFace::getFontData): Remove code to register the font with the document.
        * dom/Document.cpp:
        (WebCore::Document::~Document): Remove code that records and purges custom fonts.
        (WebCore):
        (WebCore::Document::reportMemoryUsage): Remove reference to non-existent objects.
        * dom/Document.h:
        (WebCore):
        (Document): Remove method declarations for custom font handling.
        * platform/graphics/FontFallbackList.h:
        (FontFallbackList): Moved some code around and made non-copyable.
        (WebCore::FontFallbackList::setGlyphPageZero): Moved.
        (WebCore::FontFallbackList::setGlyphPages): Moved.
        * platform/graphics/GlyphPageTreeNode.cpp:
        (WebCore::GlyphPageTreeNode::pruneFontData): Removed unnecessary null check.
        * platform/graphics/SegmentedFontData.cpp:
        (WebCore::SegmentedFontData::~SegmentedFontData): Added code to prune the Glyph pages when this is deleted.
        * platform/graphics/SimpleFontData.cpp:
        (WebCore::SimpleFontData::~SimpleFontData): Added code to prune the Glyph pages when this is deleted.

2012-10-03  Adam Barth  <abarth@webkit.org>

        Crash when calling document.open during unload
        https://bugs.webkit.org/show_bug.cgi?id=98287

        Reviewed by Nate Chapin.

        Calling document.open results in us nulling out m_documentLoader. This
        code doesn't properly handle that case and crashes.

        Test: fast/parser/document-open-in-unload.html

        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::commitProvisionalLoad):

2012-10-03  Benjamin Poulain  <bpoulain@apple.com>

        Element::computeInheritedLanguage: evaluate the while() condition after fetching the string
        https://bugs.webkit.org/show_bug.cgi?id=98220

        Reviewed by Andreas Kling.

        * dom/Element.cpp:
        (WebCore::Element::computeInheritedLanguage):
        The condition is never false on the first execution. Move the condition to the
        end of the loop for fun and profit.

2012-10-03  Hans Wennborg  <hans@chromium.org>

        Speech JavaScript API: Add SpeechRecognition.interimResults attribute
        https://bugs.webkit.org/show_bug.cgi?id=98279

        Reviewed by Adam Barth.

        Add the interimResults attribute and pass it to the embedder. It was
        added to the spec draft in
        http://dvcs.w3.org/hg/speech-api/rev/d25fea0d029c

        Tested in fast/speech/scripted/basics.html

        * Modules/speech/SpeechRecognition.cpp:
        (WebCore::SpeechRecognition::start):
        (WebCore::SpeechRecognition::SpeechRecognition):
        * Modules/speech/SpeechRecognition.h:
        (WebCore::SpeechRecognition::interimResults):
        (WebCore::SpeechRecognition::setInterimResults):
        * Modules/speech/SpeechRecognition.idl:
        * Modules/speech/SpeechRecognitionClient.h:
        (SpeechRecognitionClient):
        * Modules/speech/SpeechRecognitionController.h:
        (WebCore::SpeechRecognitionController::start):

2012-10-03  Hans Wennborg  <hans@chromium.org>

        Speech JavaScript API: Remove resultdeleted event
        https://bugs.webkit.org/show_bug.cgi?id=98272

        Reviewed by Adam Barth.

        Remove the resultdeleted event. This was never used, and was removed
        from the spec draft in
        http://dvcs.w3.org/hg/speech-api/rev/f9d53ab8b449

        The fast/speech/scripted/basics.html test is updated to reflect this.

        * Modules/speech/SpeechRecognition.cpp:
        * Modules/speech/SpeechRecognition.h:
        (SpeechRecognition):
        * Modules/speech/SpeechRecognition.idl:
        * Modules/speech/SpeechRecognitionEvent.cpp:
        * Modules/speech/SpeechRecognitionEvent.h:
        (SpeechRecognitionEvent):
        * dom/EventNames.h:
        (WebCore):

2012-09-16  Mark Hahnenberg  <mhahnenberg@apple.com>

        Delayed structure sweep can leak structures without bound
        https://bugs.webkit.org/show_bug.cgi?id=96546

        Reviewed by Geoffrey Garen.

        This patch gets rid of the separate Structure allocator in the MarkedSpace and adds two new destructor-only
        allocators. We now have separate allocators for our three types of objects: those objects with no destructors,
        those objects with destructors and with immortal structures, and those objects with destructors that don't have 
        immortal structures. All of the objects of the third type (destructors without immortal structures) now 
        inherit from a new class named JSDestructibleObject (which in turn is a subclass of JSNonFinalObject), which stores 
        the ClassInfo for these classes at a fixed offset for safe retrieval during sweeping/destruction.

        No new tests.

        * ForwardingHeaders/runtime/JSDestructableObject.h: Added.
        * bindings/js/JSDOMWrapper.h: Inherits from JSDestructibleObject.
        (JSDOMWrapper):
        (WebCore::JSDOMWrapper::JSDOMWrapper):
        * bindings/scripts/CodeGeneratorJS.pm: Add finalizers to anything that inherits from JSGlobalObject,
        e.g. JSDOMWindow and JSWorkerContexts. For those classes we also need to define needsDestruction as true.
        (GenerateHeader):
        * bridge/objc/objc_runtime.h: Inherit from JSDestructibleObject.
        (ObjcFallbackObjectImp):
        * bridge/objc/objc_runtime.mm:
        (Bindings):
        (JSC::Bindings::ObjcFallbackObjectImp::ObjcFallbackObjectImp):
        * bridge/runtime_array.cpp: Use a finalizer so that JSArray isn't forced to inherit from JSDestructibleObject.
        (JSC):
        (JSC::RuntimeArray::destroy):
        * bridge/runtime_array.h:
        (JSC::RuntimeArray::create):
        (JSC):
        * bridge/runtime_object.cpp: Inherit from JSDestructibleObject.
        (Bindings):
        (JSC::Bindings::RuntimeObject::RuntimeObject):
        * bridge/runtime_object.h:
        (RuntimeObject):

2012-10-02  Anders Carlsson  <andersca@apple.com>

        Change most GraphicsLayer::create calls to use the version that takes a GraphicsLayerFactory
        https://bugs.webkit.org/show_bug.cgi?id=98217

        Reviewed by Andreas Kling.

        * WebCore.exp.in:
        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::createGraphicsLayer):
        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::updateOverflowControlsLayers):
        (WebCore::RenderLayerCompositor::ensureRootLayer):

2012-10-03  Joshua Bell  <jsbell@chromium.org>

        IndexedDB: Optimize encodeString/decodeString
        https://bugs.webkit.org/show_bug.cgi?id=97794

        Reviewed by Tony Chang.

        Optimize string encoding/decoding, which showed up as a CPU hot spot during profiling.
        The backing store uses big-endian ordering of 16-bit code unit strings, so a memcopy
        isn't sufficient, but the code used StringBuilder::append() character-by-character
        and custom byte-swapping which was slow.

        Ran a test w/ DumpRenderTree (to avoid multiprocess overhead) taking a 10k character string
        and putting it 20k times and getting it 20k times. On my test box, mean time before the
        patch was 8.2s, mean time after the patch was 4.6s.

        Tested by Chromium's webkit_unit_tests --gtest_filter='IDBLevelDBCodingTest.*String*'

        * Modules/indexeddb/IDBLevelDBCoding.cpp:
        (WebCore::IDBLevelDBCoding::encodeString):
        (WebCore::IDBLevelDBCoding::decodeString):

2012-10-03  Keishi Hattori  <keishi@webkit.org>

        Implement DataList UI for input type time on chromium
        https://bugs.webkit.org/show_bug.cgi?id=98240

        Reviewed by Kent Tamura.

        This adds datalist UI for input type time. We add the picker indicator to
        BaseMultipleFieldsDateAndTimeInputType. We enclose the dateTimeEdit element
        and picker indicator inside a new div element so we can position the picker
        indicator in the same place as input type=date.

        Tests: platform/chromium/fast/forms/time/time-suggestion-picker-appearance-rtl.html
               platform/chromium/fast/forms/time/time-suggestion-picker-appearance-with-scroll-bar.html
               platform/chromium/fast/forms/time/time-suggestion-picker-appearance.html
               platform/chromium/fast/forms/time/time-suggestion-picker-key-operations.html
               platform/chromium/fast/forms/time/time-suggestion-picker-mouse-operations.html

        * css/html.css:
        (input::-webkit-date-and-time-container):
        * html/BaseMultipleFieldsDateAndTimeInputType.cpp:
        (WebCore::BaseMultipleFieldsDateAndTimeInputType::BaseMultipleFieldsDateAndTimeInputType):
        (WebCore::BaseMultipleFieldsDateAndTimeInputType::createShadowSubtree): Creates a picker indicator.
        (WebCore::BaseMultipleFieldsDateAndTimeInputType::handleKeydownEvent): Open the picker on Alt+Down.
        (WebCore):
        (WebCore::BaseMultipleFieldsDateAndTimeInputType::listAttributeTargetChanged): Updates picker visibility.
        (WebCore::BaseMultipleFieldsDateAndTimeInputType::updatePickerIndicatorVisibility): In the future, DateInputType can override
        this so the picker indicator is always visible.
        (WebCore::BaseMultipleFieldsDateAndTimeInputType::hidePickerIndicator):
        (WebCore::BaseMultipleFieldsDateAndTimeInputType::showPickerIndicator):
        * html/BaseMultipleFieldsDateAndTimeInputType.h:
        (WebCore):
        (BaseMultipleFieldsDateAndTimeInputType):
        * html/shadow/DateTimeFieldElement.cpp:
        (WebCore::DateTimeFieldElement::defaultKeyboardEventHandler): Ignore Alt+down because it should trigger the picker to open.
        * rendering/RenderThemeChromiumCommon.cpp:
        (WebCore::RenderThemeChromiumCommon::supportsDataListUI): Add time to the list.

2012-10-03  Andreas Kling  <kling@webkit.org>

        Give CSSValueList backing vector an inline capacity.
        <http://webkit.org/b/98266>
        <rdar://problem/12421425>

        Reviewed by Anders Carlsson.

        Set an inline capacity of 4 on the CSSValue vector backing CSSValueList. This avoids an extra heap allocation
        in the common case, and reduces total memory use across the board, since the majority of CSSValueLists have
        at least 1 item, and the Vector will bump from 0 to 16 capacity on the first append.

        394kB progression on Membuster3.

        * css/CSSValueList.h:
        (CSSValueList):

2012-10-03  Ilya Tikhonovsky  <loislo@chromium.org>

        Web Inspector: NMI: instrument NativeImageSkia.
        https://bugs.webkit.org/show_bug.cgi?id=96277

        Reviewed by Yury Semikhatsky.

        * platform/graphics/skia/NativeImageSkia.cpp:
        (WebCore::NativeImageSkia::reportMemoryUsage):
        (WebCore::reportMemoryUsage):

2012-10-03  Pavel Feldman  <pfeldman@chromium.org>

        Web Inspector: remember the last dock option so that user could toggle between dock to bottom and right
        https://bugs.webkit.org/show_bug.cgi?id=98255

        Reviewed by Vsevolod Vlasov.

        - Introduced DockController.js that covers the dock mechanics
        - Removed dock orientation from the settings
        - Storing the last dock option to present it as default
        - Simplified the multi-option status bar button

        * WebCore.gypi:
        * WebCore.vcproj/WebCore.vcproj:
        * inspector/compile-front-end.py:
        * inspector/front-end/DockController.js: Added.
        (WebInspector.DockController):
        (WebInspector.DockController.prototype.get element):
        (WebInspector.DockController.prototype.setDocked.set if):
        (WebInspector.DockController.prototype.setDocked):
        (WebInspector.DockController.prototype.setDockingUnavailable):
        (WebInspector.DockController.prototype._updateUI.get states):
        (WebInspector.DockController.prototype._updateUI):
        (WebInspector.DockController.prototype._decorateButtonForTargetState):
        (WebInspector.DockController.prototype._createDockOptions):
        (WebInspector.DockController.prototype._toggleDockState):
        (WebInspector.DockController.prototype.isCompactMode):
        (WebInspector.DockController.prototype.setCompactMode):
        * inspector/front-end/InspectorFrontendAPI.js:
        (InspectorFrontendAPI.setAttachedWindow):
        * inspector/front-end/InspectorFrontendHostStub.js:
        (.WebInspector.InspectorFrontendHostStub.prototype.requestAttachWindow):
        (.WebInspector.InspectorFrontendHostStub.prototype.requestDetachWindow):
        * inspector/front-end/Settings.js:
        * inspector/front-end/SettingsScreen.js:
        (WebInspector.GenericSettingsTab):
        * inspector/front-end/StatusBarButton.js:
        (WebInspector.StatusBarButton):
        * inspector/front-end/Toolbar.js:
        (WebInspector.Toolbar):
        (WebInspector.Toolbar.prototype.setCompactMode):
        (WebInspector.Toolbar.prototype._toolbarDragStart):
        (WebInspector.Toolbar.prototype._toolbarDrag):
        * inspector/front-end/WebKit.qrc:
        * inspector/front-end/externs.js:
        (WebInspector.toggleSearchingForNode):
        * inspector/front-end/inspector.css:
        (body.undocked.platform-mac-snowleopard #toolbar):
        (body.undocked.platform-mac-snowleopard #toolbar-dropdown):
        * inspector/front-end/inspector.html:
        * inspector/front-end/inspector.js:
        (WebInspector._createGlobalStatusBarItems):
        (windowLoaded):
        (WebInspector.setDockingUnavailable):
        * inspector/front-end/inspectorCommon.css:
        (body.dock-to-right:not(.undocked)):
        (body.dock-to-right.inactive:not(.undocked)):

2012-10-03  Vsevolod Vlasov  <vsevik@chromium.org>

        Web Inspector: UISourceCode commitWorkingCopy should not fail when original script had syntax error.
        https://bugs.webkit.org/show_bug.cgi?id=97272

        Reviewed by Pavel Feldman.

        This patch is based on patch by John J. Barton.

        * inspector/front-end/JavaScriptSource.js:
        (WebInspector.JavaScriptSource.prototype.workingCopyCommitted): added rawLocation null check.

2012-10-03  Alexander Pavlov  <apavlov@chromium.org>

        Web Inspector: After "Edit as HTML", any click outside box should stop editing
        https://bugs.webkit.org/show_bug.cgi?id=98258

        Reviewed by Vsevolod Vlasov.

        Make the DOM tree OL span the entire height of its container in the Elements panel to catch mouse events.

        * inspector/front-end/elementsPanel.css:
        (#elements-content > ol):

2012-10-03  Dongwoo Joshua Im  <dw.im@samsung.com>

        [EFL] Skeleton code of File system API.
        https://bugs.webkit.org/show_bug.cgi?id=91187

        Reviewed by Gyuyoung Kim.

        Add skeleton code of File System API on EFL port.
        Implementation patches will be created later.

        No new tests because this is just skeleton code.

        * CMakeLists.txt: Add new files which created by other patches in Modules/filesystem/ directory.
        * PlatformEfl.cmake: Add AsyncFileSystemEfl.cpp.
        * platform/AsyncFileSystem.cpp:
        (WebCore):
        * platform/efl/AsyncFileSystemEfl.cpp: Added.
        * platform/efl/AsyncFileSystemEfl.h: Added.

2012-10-03  Andreas Kling  <kling@webkit.org>

        Shrink ElementRareData by moving bool flags to NodeRareData.
        <http://webkit.org/b/98225>

        Reviewed by Antti Koivisto.

        Move all bool flags from ElementRareData to the bitfield in its base class NodeRareData.
        This shrinks ElementRareData by 8 bytes (on 64-bit) and saves a whopping 58kB on Membuster3.
        Also removed some double raredata hash lookups.

        * dom/Element.cpp:
        (WebCore::Element::detach):
        (WebCore::Element::recalcStyle):
        (WebCore::Element::ensureShadow):
        (WebCore::Element::setStyleAffectedByEmpty):
        (WebCore::Element::styleAffectedByEmpty):
        (WebCore::Element::setIsInCanvasSubtree):
        (WebCore::Element::isInCanvasSubtree):
        (WebCore::Element::containsFullScreenElement):
        (WebCore::Element::setContainsFullScreenElement):
        * dom/ElementRareData.h:
        (ElementRareData):
        (WebCore::ElementRareData::ElementRareData):
        * dom/NodeRareData.h:
        (WebCore::NodeRareData::styleAffectedByEmpty):
        (WebCore::NodeRareData::setStyleAffectedByEmpty):
        (WebCore::NodeRareData::isInCanvasSubtree):
        (WebCore::NodeRareData::setIsInCanvasSubtree):
        (NodeRareData):
        (WebCore::NodeRareData::containsFullScreenElement):
        (WebCore::NodeRareData::setContainsFullScreenElement):

2012-10-03  Jussi Kukkonen  <jussi.kukkonen@intel.com>

        getComputedStyle perspective-origin is based on the wrong bounding box
        https://bugs.webkit.org/show_bug.cgi?id=98027

        Reviewed by Simon Fraser.

        perspective-origin for ComputedStyleDeclaration is currently calculated using the
        wrong bounding box (sizingBox() which ends up as the contentbox).

        Start using borderbox for ComputedStyleDeclaration perspective-origin, similar to
        what transform-origin already does.

        Test: fast/css/getComputedStyle/getComputedStyle-origin-percentage.html

        * css/CSSComputedStyleDeclaration.cpp:
        (WebCore::CSSComputedStyleDeclaration::getPropertyCSSValue):

2012-10-03  Patrick Gansterer  <paroga@webkit.org>

        Build fix for WinCE after r130160.

        * platform/graphics/FontFastPath.cpp:
        (WebCore::Font::glyphDataAndPageForCharacter):

2012-10-03  Tommy Widenflycht  <tommyw@google.com>

        MediaStream API: RTCPeerConnection should send down its handler via the FrameLoaderClient directly after creation.
        https://bugs.webkit.org/show_bug.cgi?id=98149

        Reviewed by Adam Barth.

        The chromium implementation needs to know which Frame created a PeerConnection so
        that the right housekeeping can take place correctly.

        Not testable in DRT, but have verified the change manually and with our pyautotests.

        * Modules/mediastream/RTCPeerConnection.cpp:
        (WebCore::RTCPeerConnection::RTCPeerConnection):
        * loader/FrameLoaderClient.h:
        (WebCore):
        (FrameLoaderClient):
        (WebCore::FrameLoaderClient::dispatchWillStartUsingPeerConnectionHandler):
        * platform/mediastream/chromium/RTCPeerConnectionHandlerChromium.cpp:
        (WebCore::RTCPeerConnectionHandlerChromium::toWebRTCPeerConnectionHandler):
        (WebCore):
        (WebCore::RTCPeerConnectionHandlerChromium::RTCPeerConnectionHandlerChromium):
        (WebCore::RTCPeerConnectionHandlerChromium::initialize):
        * platform/mediastream/chromium/RTCPeerConnectionHandlerChromium.h:
        (RTCPeerConnectionHandlerChromium):

2012-10-03  Eugene Klyuchnikov  <eustas.bug@gmail.com>

        Web Inspector: Profiles: taking heap snapshot causes error message in console.
        https://bugs.webkit.org/show_bug.cgi?id=97890

        Reviewed by Yury Semikhatsky.

        Actual problem is that proxy loader is closed twice.

        "_snapshotReceived" should never try to close receiver,
        because it is a callback fired by close.

        Also minor glitches fixed:
         - taking snapshot shows "Loading..." status first,
        and then "Saving xxx%";
         - after all chunks are sent "Parsing" status is set and
        then is replaced with "Saving 100%";
         - removed dead code in proxy;
         - proxy was ignoring callback parameter;
         - "Loading %d\%" is not localized.

        * English.lproj/localizedStrings.js: Added missing "Loading %d%" string.
        * inspector/front-end/HeapSnapshotProxy.js: Removed dead code.
        (WebInspector.HeapSnapshotLoaderProxy):
        (WebInspector.HeapSnapshotLoaderProxy.prototype.write): Make this method
        interface-conformant.
        * inspector/front-end/HeapSnapshotView.js:
        (WebInspector.HeapProfileHeader): Fixed update-status and
        finish-transfer logic.

2012-10-03  Jochen Eisinger  <jochen@chromium.org>

        Make sure that user gestures can't be consumed twice
        https://bugs.webkit.org/show_bug.cgi?id=97483

        Reviewed by Adam Barth.

        Instead of a simple counter, use a ref counted token to track how many
        user gestures happened and where consumed. When creating a timer that
        is supposed to forward the user gesture, take a reference to this token
        and reinstantiate the UserGestureIndicator with that token when the
        timer is triggered.

        Tests: platform/chromium/fast/events/popup-forwarded-gesture-blocked.html
               platform/chromium/fast/events/popup-forwarded-gesture.html

        * dom/UserGestureIndicator.cpp:
        (WebCore):
        (WebCore::UserGestureIndicator::UserGestureIndicator):
        (WebCore::UserGestureIndicator::~UserGestureIndicator):
        (WebCore::UserGestureIndicator::processingUserGesture):
        (WebCore::UserGestureIndicator::consumeUserGesture):
        (WebCore::UserGestureIndicator::currentToken):
        * dom/UserGestureIndicator.h:
        (Token):
        (WebCore::UserGestureIndicator::Token::~Token):
        (UserGestureIndicator):
        * page/DOMTimer.cpp:
        (WebCore::DOMTimer::DOMTimer):
        (WebCore::DOMTimer::fired):
        * page/DOMTimer.h:
        (DOMTimer):

2012-10-03  Dominic Mazzoni  <dmazzoni@google.com>

        AX: Heap-use-after-free when deleting a ContainerNode with an AX object
        https://bugs.webkit.org/show_bug.cgi?id=98073

        Reviewed by Hajime Morita.

        Calls axObjectCache()->remove(this) in ~ContainerNode so that the AX tree
        doesn't try to access the container node while walking up the parent chain
        from one of the container node's children.

        Test: accessibility/container-node-delete-causes-crash.html

        * dom/ContainerNode.cpp:
        (WebCore::ContainerNode::~ContainerNode):
        * dom/Node.cpp:
        (WebCore::Node::~Node):
        * dom/Node.h:
        (WebCore::Node::document):
        (WebCore::Node::documentInternal):

2012-10-03  Vsevolod Vlasov  <vsevik@chromium.org>

        Web Inspector: SourceURL should be taken from debugger agent when possible.
        https://bugs.webkit.org/show_bug.cgi?id=98239

        Reviewed by Yury Semikhatsky.

        Removed a check that sourceURL coming from js engine is the same as the one parsed by debugger agent.
        Alwys use the one from debugger agent now.

        * inspector/InspectorDebuggerAgent.cpp:
        (WebCore::InspectorDebuggerAgent::didParseSource):

2012-10-03  Ilya Tikhonovsky  <loislo@chromium.org>

        Unreviewed. Touch FrameView.cpp file for fixing mac bot compilation.

        * page/FrameView.cpp:
        (WebCore):

2012-10-02  Ilya Tikhonovsky  <loislo@chromium.org>

        Web Inspector: "Load profile..." context menu item has to be shown only for left column with the list of profiles.
        https://bugs.webkit.org/show_bug.cgi?id=98163

        Reviewed by Yury Semikhatsky.

        The text was changed to "Load Heap Snapshot..."
        Also I changed "Save profile..." to "Save Heap Snapshot..." because other profiles don't support Save/Load operations yet.
        The Load context menu item will appear only when the user clicked in sidebar the tree empty space or a profile.

        * English.lproj/localizedStrings.js:
        * inspector/front-end/ProfilesPanel.js:
        (WebInspector.ProfilesPanel.prototype._handleContextMenuEvent):
        (WebInspector.ProfileSidebarTreeElement.prototype.handleContextMenuEvent):

2012-10-03  Harald Alvestrand  <hta@google.com>

        Add data passing to the GetStats interface of RTCPeerConnection
        https://bugs.webkit.org/show_bug.cgi?id=98003

        Reviewed by Adam Barth.

        Added an RTCStatsResponseBase interface to platform, and let the
        RTCStatsRequestImpl class produce an implementation of it that's returned
        to WebCore.

        Tested by extension of the RTCPeerConnection-stats.html test.

        * Modules/mediastream/RTCStatsElement.cpp:
        (WebCore::RTCStatsElement::addStatistic):
        (WebCore):
        * Modules/mediastream/RTCStatsElement.h:
        (RTCStatsElement):
        * Modules/mediastream/RTCStatsReport.cpp:
        (WebCore):
        (WebCore::RTCStatsReport::addElement):
        (WebCore::RTCStatsReport::addStatistic):
        * Modules/mediastream/RTCStatsReport.h:
        (RTCStatsReport):
        * Modules/mediastream/RTCStatsRequestImpl.cpp:
        (WebCore::RTCStatsRequestImpl::createResponse):
        (WebCore):
        (WebCore::RTCStatsRequestImpl::requestSucceeded):
        * Modules/mediastream/RTCStatsRequestImpl.h:
        (RTCStatsRequestImpl):
        * Modules/mediastream/RTCStatsResponse.cpp:
        (WebCore::RTCStatsResponse::create):
        (WebCore::RTCStatsResponse::addReport):
        (WebCore):
        (WebCore::RTCStatsResponse::addElement):
        (WebCore::RTCStatsResponse::addStatistic):
        * Modules/mediastream/RTCStatsResponse.h:
        (RTCStatsResponse):
        * WebCore.gypi:
        * platform/chromium/support/WebRTCStatsRequest.cpp:
        (WebKit::WebRTCStatsRequest::response):
        (WebKit):
        (WebKit::WebRTCStatsRequest::requestSucceeded):
        * platform/chromium/support/WebRTCStatsResponse.cpp: Added.
        (WebKit):
        (WebKit::WebRTCStatsResponse::WebRTCStatsResponse):
        (WebKit::WebRTCStatsResponse::assign):
        (WebKit::WebRTCStatsResponse::reset):
        (WebKit::WebRTCStatsResponse::operator WTF::PassRefPtr<WebCore::RTCStatsResponseBase>):
        (WebKit::WebRTCStatsResponse::addReport):
        (WebKit::WebRTCStatsResponse::addElement):
        (WebKit::WebRTCStatsResponse::addStatistic):
        * platform/mediastream/RTCStatsRequest.h:
        (WebCore):
        (RTCStatsRequest):
        * platform/mediastream/RTCStatsResponseBase.h: Added.
        (WebCore):
        (RTCStatsResponseBase):
        (WebCore::RTCStatsResponseBase::~RTCStatsResponseBase):

2012-10-02  Carlos Garcia Campos  <cgarcia@igalia.com>

        [GTK] Add API to get the web view that initiated a custom URI request to WebKit2 GTK+
        https://bugs.webkit.org/show_bug.cgi?id=97895

        Reviewed by Martin Robinson.

        * platform/network/NetworkingContext.h:
        (NetworkingContext): Add initiatingPageID().
        * platform/network/ResourceHandle.h:
        (ResourceHandle): Add static method
        getSoupRequestInitiaingPageID().
        * platform/network/ResourceHandleInternal.h:
        (ResourceHandleInternal): Add initiatingPageID().
        * platform/network/soup/ResourceHandleSoup.cpp:
        (WebCore::ResourceHandleInternal::initiatingPageID): Get the
        initiating page ID of the resource handle networking context.
        (WebCore::setSoupRequestInitiaingPageID): Helper function to
        attach a page ID to a SoupRequest.
        (WebCore::startHTTPRequest): Call setSoupRequestInitiaingPageID()
        to attch the initiating page ID to the SoupRequest.
        (WebCore::startNonHTTPRequest): Ditto.
        (WebCore::ResourceHandle::getSoupRequestInitiaingPageID): Static
        method to get the page ID attached to a SoupRequest.

2012-10-03  Kent Tamura  <tkent@chromium.org>

        Introduce DateComponents::minimumYear and maximumYear
        https://bugs.webkit.org/show_bug.cgi?id=98230

        Reviewed by Kentaro Hara.

        Share same difinitions in DateComponents.cpp and DateTimeFieldElements.cpp.

        No new tests. This doesn't change any bahevior.

        * platform/DateComponents.h:
        (WebCore::DateComponents::minimumYear): Moved from DateComponents.cpp.
        (WebCore::DateComponents::maximumYear): ditto.
        * platform/DateComponents.cpp:
        (WebCore): Move out static minimumYear and maximumYear.
        (WebCore::DateComponents::parseYear): Use DateCompnents::minimumYear and/or maximumYear.
        (WebCore::withinHTMLDateLimits): ditto.
        (WebCore::DateComponents::parseWeek): ditto.
        (WebCore::DateComponents::setMonthsSinceEpoch): ditto.
        (WebCore::DateComponents::setMillisecondsSinceEpochForWeek): ditto.

        * html/shadow/DateTimeFieldElements.cpp:
        (WebCore): Remove minimumYear and maximumYear.
        (WebCore::DateTimeYearFieldElement::DateTimeYearFieldElement):
        Use DateComponents::minimumYear and maximumYear.


2012-10-02  Arko Saha  <arko@motorola.com>

        Microdata: itemprop names must not override builtin properties.
        https://bugs.webkit.org/show_bug.cgi?id=98025

        Reviewed by Kentaro Hara.

        We should look in the prototype for functions before assuming it as
        an item's name. Return false if the prototype of the object has a
        property (function) with propertyName.
        Named properties Spec: http://dev.w3.org/2006/webapi/WebIDL/#idl-named-properties
        Named property visibility algorithm:
        http://dev.w3.org/2006/webapi/WebIDL/#indexed-and-named-properties
        ...
        7. If the result of calling the [[HasProperty]] internal method on
        prototype with property name P is true, then return false.
        ...
        Also [OverrideBuiltins] is not declared for any of the properties,
        hence no overriding is allowed in this case.

        Test: fast/dom/MicroData/itemprop-names-override-builtin-properties.html

        * bindings/scripts/CodeGeneratorJS.pm:
        (GenerateGetOwnPropertySlotBody):
        (GenerateGetOwnPropertyDescriptorBody):

2012-10-02  Keishi Hattori  <keishi@webkit.org>

        REGRESSION (r129738): Suggestion picker label is placed in the wrong location
        https://bugs.webkit.org/show_bug.cgi?id=98094

        Reviewed by Kent Tamura.

        We needed to reverse padding-left/right when rtl.

        No new tests. Covered by date-suggestion-picker-appearance.html.

        * Resources/pagepopups/suggestionPicker.css:
        (.suggestion-list-entry .label):
        (.rtl .suggestion-list-entry .label):

2012-10-02  Yury Semikhatsky  <yurys@chromium.org>

        Provide memory instrumentation for HashCountedSet
        https://bugs.webkit.org/show_bug.cgi?id=98138

        Reviewed by Pavel Feldman.

        Replaced addHashCountedSet calls with addMember that now automatically
        detects HashCountedSet and calls appropriate routine.

        * css/CSSImageGeneratorValue.cpp:
        (WebCore::CSSImageGeneratorValue::reportBaseClassMemoryUsage):
        * loader/cache/CachedResource.cpp:

2012-10-02  Nandor Huszka  <hnandor@inf.u-szeged.hu>

        Buildfix after r130235.

        Reviewed by Csaba Osztrogonác.

        systemAllowsMultisamplingOnATICards was deleted from GraphicsContext3D,
        but function body remained in GraphicsContext3DOpenGLES. Delete method body.

        * platform/graphics/opengl/GraphicsContext3DOpenGLES.cpp:

2012-10-02  Kent Tamura  <tkent@chromium.org>

        Fix assertion failures on Chromium Debug bots for datetime/datetime-local input types.

        * html/shadow/DateTimeFieldElements.cpp:
        If a placeholder stirng is empty, use a sequence of "-".
        (WebCore::DateTimeDayFieldElement::create):
        (WebCore::DateTimeMonthFieldElement::create):
        (WebCore::DateTimeYearFieldElement::create):

2012-10-02  MORITA Hajime  <morrita@google.com>

        https://bugs.webkit.org/show_bug.cgi?id=98134
        [Refactoring] StyleResolver::matchScopedAuthorRules() could be simpler.

        Reviewed by Dimitri Glazkov.

        matchScopedAuthorRules() did have some optimization which only
        makes sense for heavily nested shadow tree. However, we don't see
        such type of usage of Shadow DOM and this looks premature
        optimization. This change unified its triple for loop into one,
        which makes the code much simpler.

        No new tests. Covered by existing tests.

        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::matchScopedAuthorRules):

2012-10-02  Kent Tamura  <tkent@chromium.org>

        Introduce Localizer::dateTimeFormatWithSecond and dateTimeFormatWithoutSecond
        https://bugs.webkit.org/show_bug.cgi?id=98229

        Reviewed by Kentaro Hara.

        Unify identical code in DateTimeInputType and DateTimeLocalInputType as
        Localizer member functions.
        They still have some common code. We'll address it later.

        No new tests. This doesn't change any behavior.

        * platform/text/Localizer.h:
        (Localizer): Add dateTimeFormatWithSecond and dateTimeFormatWithoutSecond.
        * platform/text/Localizer.cpp:
        (WebCore::Localizer::dateTimeFormatWithSecond):
        Implemented. Just concatenating dateFormat, a space, and timeFormat.
        (WebCore::Localizer::dateTimeFormatWithoutSecond):
        Implemented. Just concatenating dateFormat, a space, and shortTimeFormat.

        * html/DateTimeInputType.cpp:
        (WebCore::DateTimeInputType::setupLayoutParameters):
        Use dateTimeFormatWithSecond and dateTimeFormatWithoutSecond.
        * html/DateTimeLocalInputType.cpp:
        (WebCore::DateTimeLocalInputType::setupLayoutParameters): ditto.

2012-10-03  Kent Tamura  <tkent@chromium.org>

        Refactoring: DateTimeEditBuilder had better hold LayoutParameters
        https://bugs.webkit.org/show_bug.cgi?id=98228

        Reviewed by Kentaro Hara.

        Stop copying multiple members of LayoutParameters in DateTimeEditBuilder
        constructor. This change improves code size and runtime cost.

        No new tests. This doesn't change user-visible behavior.

        * html/shadow/DateTimeEditElement.cpp:
        (DateTimeEditBuilder): Add a comment about lifetime of objects.
        (WebCore::DateTimeEditBuilder::stepRange):
        Added. A helper to access m_parameters.stepRange.
        (WebCore::DateTimeEditBuilder::DateTimeEditBuilder):
        Remove m_stepRange, m_localizer, m_placeholderFor* members.
        Add m_parameters.
        (WebCore::DateTimeEditBuilder::needMillisecondField):
        Use stepRange() instead of m_stepRange.
        (WebCore::DateTimeEditBuilder::visitField):
        Use m_parameters.placeholderFor*.
        (WebCore::DateTimeEditBuilder::shouldMillisecondFieldReadOnly):
        Use stepRange() instead of m_stepRange.
        (WebCore::DateTimeEditBuilder::shouldMinuteFieldReadOnly): ditto.
        (WebCore::DateTimeEditBuilder::shouldSecondFieldReadOnly): ditto.

2012-10-02  Kent Tamura  <tkent@chromium.org>

        Implement LocaleICU::dateFormat
        https://bugs.webkit.org/show_bug.cgi?id=98118

        Reviewed by Hajime Morita.

        http://trac.webkit.org/changeset/130127 introduced
        Localizer::dateFormat, and this is its implementation for LocaleICU
        classs. The code is going to be used when
        ENABLE_INPUT_MULTIPLE_FIELDS_UI is enabled.

        No new tests. The function is not used yet.

        * platform/text/LocaleICU.cpp:
        (WebCore::LocaleICU::dateFormat):
        Implemented. Note that m_shortDateFormat is a UDateFormat object, which
        knows various format information.
        * platform/text/LocaleICU.h:
        (LocaleICU): Add m_dateFormat to cache the format string.

2012-10-02  Kent Tamura  <tkent@chromium.org>

        [Mac][Chromium-Mac] Implement LocaleMac::dateFormat
        https://bugs.webkit.org/show_bug.cgi?id=98116

        Reviewed by Hajime Morita.

        http://trac.webkit.org/changeset/130127 introduced
        Localizer::dateFormat, and this is its implementation for LocaleICU
        classs. The code is going to be used when
        ENABLE_INPUT_MULTIPLE_FIELDS_UI is enabled.

        No new tests. The function is not used yet.

        * platform/text/mac/LocaleMac.h:
        (LocaleMac): Declare m_dateFormat.
        * platform/text/mac/LocaleMac.mm:
        (WebCore::LocaleMac::dateFormat): Implemented.

2012-10-02  Kent Tamura  <tkent@chromium.org>

        [Chromium-Win] Implement LocaleWin::dateFormat
        https://bugs.webkit.org/show_bug.cgi?id=98117

        Reviewed by Kentaro Hara.

        http://trac.webkit.org/changeset/130127 introduced
        Localizer::dateFormat, and this is its implementation for LocaleICU
        classs. The code is going to be used when
        ENABLE_INPUT_MULTIPLE_FIELDS_UI is enabled.

        Tests: Added a new test to WebKit/chromium/tests/LocaleWinTest.cpp.

        * platform/text/LocaleWin.cpp:
        (WebCore::parseDateFormat):
        Fix a continuous apostrophes parsing bug; "abc''''def" produced "abc'''def"
        (WebCore::appendAsLDMLLiteral):
        A helper function to make a literal string for LDML.
        (WebCore::convertWindowsDateFormatToLDML):
        Creates an LDML format from a parsed date format tokens.
        (WebCore::LocaleWin::dateFormat):
        Implemented. This uses convertWindowsDateFormatToLDML.
        (WebCore::LocaleWin::dateFormat):
        Added for testing. The source windows format is specified as a function
        argument.
        * platform/text/LocaleWin.h:
        (LocaleWin): Declare m_dateFormat and dateFormat().

2012-10-02  Ian Vollick  <vollick@chromium.org>

        [chromium] Fix spelling of isNVIDIA override in Extensions3DChromium
        https://bugs.webkit.org/show_bug.cgi?id=98219

        Reviewed by Dean Jackson.

        The override in Extensions3dChromium should have been spelled isNVIDIA, not isNVidia.

        No new tests. No change in functionality.

        * platform/graphics/chromium/Extensions3DChromium.h:
        (WebCore::Extensions3DChromium::isNVIDIA):

2012-10-02  Anders Carlsson  <andersca@apple.com>

        Try to fix the Snow Leopard build.

        * platform/graphics/opengl/Extensions3DOpenGLCommon.cpp:

2012-10-02  Joshua Bell  <jsbell@chromium.org>

        Add htons/htonl definitions and implementations
        https://bugs.webkit.org/show_bug.cgi?id=98054

        Reviewed by Darin Adler.

        Update users of htons and friends to use new wtf/ByteOrder.h header.

        No new tests - just refactoring.

        * platform/graphics/WOFFFileFormat.cpp:
        * platform/graphics/chromium/VDMXParser.cpp:

== Rolled over to ChangeLog-2012-10-02 ==
