2012-10-04  Dean Jackson  <dino@apple.com>

        Attribute and Uniform variable names need translation in shader
        https://bugs.webkit.org/show_bug.cgi?id=70989

        Reviewed by Tim Horton (and Darin Adler).

        WebGL specifies some maximum lengths for variable names (attributes
        and uniforms). Also, some GL drivers have issues with long names. For
        that reason, ANGLE has an option to rewrite the shader, translating
        long names into short names. Turning this on helps shaders compile,
        but we need to keep a mapping between the original names and the
        translated names, so that we bind to the right location from user code
        (which won't ever see the translated source).

        This provided an opportunity to clean up some other bits of code:
        CSS Filters examined the uniform names after a compilation; It can
        now use the variable name map. I also added a typedef for the
        HashMaps that keep the shader, the source code and the variable name
        mappings.

        I also opened a followup bug to make sure these tables are deleted
        when the associated shaders (or linked programs) go away:
        https://bugs.webkit.org/show_bug.cgi?id=98204

        Covered by existing tests (with some enhancements):
        - fast/canvas/webgl/attrib-location-length-limits.html:
        - fast/canvas/webgl/uniform-location-length-limits.html:

        * platform/graphics/ANGLEWebKitBridge.cpp:
        (WebCore::getSymbolInfo): Extracts all the information on symbols (either attributes
        or uniforms) from the newly compiled shader.
        (WebCore):
        (WebCore::ANGLEWebKitBridge::compileShaderSource): New method name.
        * platform/graphics/ANGLEWebKitBridge.h:
        (WebCore::getUniforms): Deleted this method.
        (WebCore::ANGLEShaderSymbol::isSampler): Make sure the symbol is a uniform.
        (ANGLEWebKitBridge):
        * platform/graphics/GraphicsContext3D.h:
        (WebCore::GraphicsContext3D::SymbolInfo::SymbolInfo): A new object that
        holds the size, type and translated name of a symbol from a WebGL shader.
        (ShaderSourceEntry):
        (WebCore::GraphicsContext3D::ShaderSourceEntry::ShaderSourceEntry): Now keeps track
        of the translated source code and symbol mappings.
        (WebCore::GraphicsContext3D::ShaderSourceEntry::symbolMap): Helper function to
        get the member variable corresponding to the type of symbol you're asking fo.
        * platform/graphics/filters/CustomFilterValidatedProgram.cpp:
        (WebCore::CustomFilterValidatedProgram::CustomFilterValidatedProgram): Calls new method
        name which also produces a set of symbols to examine.
        * platform/graphics/opengl/Extensions3DOpenGLCommon.cpp:
        (WebCore::Extensions3DOpenGLCommon::getTranslatedShaderSourceANGLE): We now can pass
        in some extra compile options to do translation of long symbol names. Also fill the
        map of translated symbol names.
        * platform/graphics/opengl/GraphicsContext3DOpenGLCommon.cpp:
        (WebCore::GraphicsContext3D::compileShader):
        (WebCore::GraphicsContext3D::mappedSymbolName): Returns the mapped name for
        a shader symbol if it was translated during compilation.
        (WebCore):
        (WebCore::GraphicsContext3D::getAttribLocation):
        (WebCore::GraphicsContext3D::getShaderiv):
        (WebCore::GraphicsContext3D::getShaderInfoLog):
        (WebCore::GraphicsContext3D::getShaderSource):
        (WebCore::GraphicsContext3D::getUniformLocation):

2012-10-04  Alpha Lam  <hclam@chromium.org>

        [skia] Drawing a subrect of bitmap image is misaligned
        https://bugs.webkit.org/show_bug.cgi?id=95121

        Reviewed by Stephen White.

        When drawing a subrect of BitmapImage and the subrect is not aligned
        to integer boundaries, skia expands it to the closest enclosing integer
        rectangle. This creates prominent rendering artifacts when an image
        is used as background and its sub-regions are invalidated frequently.

        This patch fixes the problem by doing alignment to integer boundaries
        and clipping for both cases of RESAMPLE_AWESOME and RESAMPLE_LINEAR.

        A clip rect is applied to the canvas using original destination
        rectangle, while source and destination rectangles are enlarged
        appropriately to ensure source rectangle is aligned.

        This patch also fixes a closely related problem. In RESAMPLE_AWESOME
        resampling mode the previous algorithm applies different approximated
        scale factor for each scaled image fragment. This caused the stitched
        image to look ugly.

        Scale factor is approximated using entire image size, this gives a
        more accurate approximation because of greater denominator and a
        consistent scale factor across all fragments.

        Changes in Skia enable caching of the scaled image and return the
        scaled fragment because scale factor is now consistent for all
        fragments.

        Tests: fast/images/paint-subrect-grid.html
               fast/images/paint-subrect.html
               fast/images/repaint-subrect-grid.html

        * platform/graphics/skia/ImageSkia.cpp:
        (WebCore::computeResamplingMode): Use float for width and height.
        (WebCore):
        (WebCore::areBoundariesIntegerAligned):
        (WebCore::computeBitmapDrawRects):
        (WebCore::extractScaledImageFragment):
        (WebCore::drawResampledBitmap): New algorithm for drawing scaled image fragment.
        (WebCore::paintSkBitmap):
        (WebCore::Image::drawPattern):
        (WebCore::BitmapImage::draw): Use SkRect instead of SkIRect.
        (WebCore::BitmapImageSingleFrameSkia::draw):
        * platform/graphics/skia/NativeImageSkia.cpp:
        Changing the algorithm for extracting a scaled image fragment.
        A fragment is now identified by (scaledImageSize, scaledImageSubset).
        (WebCore::NativeImageSkia::hasResizedBitmap):
        (WebCore::NativeImageSkia::resizedBitmap):
        (WebCore::NativeImageSkia::shouldCacheResampling):
        (WebCore::NativeImageSkia::CachedImageInfo::CachedImageInfo):
        (WebCore):
        (WebCore::NativeImageSkia::CachedImageInfo::isEqual):
        (WebCore::NativeImageSkia::CachedImageInfo::set):
        (WebCore::NativeImageSkia::CachedImageInfo::rectInSubset):
        * platform/graphics/skia/NativeImageSkia.h:
        (NativeImageSkia):
        (CachedImageInfo):

2012-10-03  Ryosuke Niwa  <rniwa@webkit.org>

        ReplaceSelectionCommand should merge text nodes
        https://bugs.webkit.org/show_bug.cgi?id=98188

        Reviewed by Levi Weintraub.

        Added mergeTextNodesAroundPosition to ReplaceSelectionCommand to merge text nodes after the replace in
        completeHTMLReplacement. Also fixed a bunch of bugs in other classes and functions to make this work.

        This behavior change is tested by existing tests.

        * editing/InsertParagraphSeparatorCommand.cpp:
        (WebCore::InsertParagraphSeparatorCommand::doApply): When splitting a text node, place the insertionPosition
        at the end of the first half. Leaving it at the beginning of the second half confuses the rest of the code in
        the function. However, the logic to handle the "insignificant" white spaces needs the position at the start of
        the second half. So keep this position.
        * editing/ReplaceSelectionCommand.cpp:
        (WebCore::ReplaceSelectionCommand::doApply): Update visibleStart after inserting a paragraph separator so that
        the logic to cleanup the nested div checks the right condition (right beneath it starting with a long comment).
        (WebCore::ReplaceSelectionCommand::addSpacesForSmartReplace): Insert a space for smart paste at the appropriate
        offset instead of at the end of endNode. Also update the layout before obtaining startDownstream as we may have 
        modified the DOM by inserting a space for endNode. Finally, a non-breaking space should be treated like a space
        isCharacterSmartReplaceExempt for the purpose of smart replace. e.g. if we're inserting "world" after
        "hello&nbsp;", we shouldn't be inserting another space between "hello" and "world".
        (WebCore::ReplaceSelectionCommand::completeHTMLReplacement):
        (WebCore::ReplaceSelectionCommand::mergeTextNodesAroundPosition): Added. Merge text nodes around position, and
        adjust position and positionOnlyToBeUpdated accordingly. We need to call updatePositionForNodeRemoval when
        positions were before or after the text node.
        * editing/ReplaceSelectionCommand.h:
        (ReplaceSelectionCommand):

2012-10-04  Tony Chang  <tony@chromium.org>

        Fix <input type="month"> tests
        https://bugs.webkit.org/show_bug.cgi?id=98426

        Reviewed by Ojan Vafai.

        The month picker uses flexbox and assumes that it will be aligned with
        the last line box. This looks visually correct. I will follow up on
        www-style to see what the expected behavior is.

        Tests: fast/forms/month-multiple-fields tests cover this.

        * rendering/RenderFlexibleBox.cpp:
        * rendering/RenderFlexibleBox.h:

2012-10-04  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r130396.
        http://trac.webkit.org/changeset/130396
        https://bugs.webkit.org/show_bug.cgi?id=98421

        This patch is causing crashes on 4 tests on Lion Debug and
        Mountain Lion Debug (Requested by jernoble on #webkit).

        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::calculateCompositedBounds):
        (WebCore::RenderLayerCompositor::requiresCompositingForPosition):
        * rendering/RenderLayerCompositor.h:
        * testing/InternalSettings.cpp:
        (WebCore::InternalSettings::Backup::Backup):
        (WebCore::InternalSettings::Backup::restoreTo):
        * testing/InternalSettings.h:
        (Backup):

2012-10-04  Tony Chang  <tony@chromium.org>

        inline-flex baseline is sometimes wrong
        https://bugs.webkit.org/show_bug.cgi?id=96188

        Reviewed by Ojan Vafai.

        Implement the necessary methods to get the proper baseline alignment of flexbox.
        We were falling back to the inline-block behavior.

        Test: css3/flexbox/flexbox-baseline.html

        * rendering/RenderFlexibleBox.cpp:
        (WebCore::RenderFlexibleBox::RenderFlexibleBox):
        (WebCore::RenderFlexibleBox::baselinePosition): Used to get the baseline of the box.
        Mostly just the first line box baseline.
        (WebCore):
        (WebCore::RenderFlexibleBox::lastLineBoxBaseline): This is used for getting the baseline when in an inline-block.
        We actually don't want the last line, but the flexbox's baseline.
        (WebCore::RenderFlexibleBox::firstLineBoxBaseline): Compute the baseline according to the rules in the spec.
        (WebCore::RenderFlexibleBox::repositionLogicalHeightDependentFlexItems): Keep track of the number of children on the
        first line so we don't have to re-compute this when getting the baseline.
        (WebCore::RenderFlexibleBox::crossAxisExtentForChild): Make const.
        (WebCore::RenderFlexibleBox::mainAxisExtentForChild): Make const.
        (WebCore::RenderFlexibleBox::hasAutoMarginsInCrossAxis): Make const.
        * rendering/RenderFlexibleBox.h: Add a size_t to keep track of how many children are in the first line.

2012-10-04  Xianzhu Wang  <wangxianzhu@chromium.org>

        [Chromium] Should set unitsPerEm in SimpleFontDataSkia.cpp
        https://bugs.webkit.org/show_bug.cgi?id=98100

        Reviewed by Stephen White.

        At least on chromium-linux and chromium-android, unitsPerEm was not set
        according to the information in the font, causing at least problems in
        OpenTypeVerticalData when calculating vertical advance.

        Test: fast/writing-mode/vertical-font-vmtx-units-per-em.html

        * platform/graphics/skia/SimpleFontDataSkia.cpp:
        (WebCore::SimpleFontData::platformInit):

2012-10-04  Simon Fraser  <simon.fraser@apple.com>

        Standardize on "flush" terminology for compositing layer flushing/syncing
        https://bugs.webkit.org/show_bug.cgi?id=98321

        Reviewed by Simon Fraser.

        Rename compositing-related methods that refer to "syncing" to instead
        refer to "flushing".

        * WebCore.exp.in:
        * loader/EmptyClients.h:
        (WebCore::EmptyChromeClient::scheduleCompositingLayerFlush):
        * page/ChromeClient.h:
        (ChromeClient):
        * page/FrameView.cpp:
        (WebCore::FrameView::flushCompositingStateForThisFrame):
        (WebCore::FrameView::flushCompositingStateIncludingSubframes):
        (WebCore::FrameView::paintContents):
        * page/FrameView.h:
        (FrameView):
        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::scheduleLayerFlush):
        (WebCore::RenderLayerCompositor::flushPendingLayerChanges):

2012-10-04  Peter Rybin  <peter.rybin@gmail.com>

        Web Inspector: expose object internal properties such as PrimitiveValue or BoundThis
        https://bugs.webkit.org/show_bug.cgi?id=94397

        Reviewed by Yury Semikhatsky.

        Internal property access is built from Injected Script to V8 debug API. JSC binding
        has a stub imlpementation. Protocol is updated to explicitly reflect internal properties.

        Test: inspector-protocol/runtime-getProperties.html

        * bindings/js/JSInjectedScriptHostCustom.cpp:
        (WebCore::JSInjectedScriptHost::getInternalProperties):
        (WebCore):
        * bindings/v8/DebuggerScript.js:
        * bindings/v8/ScriptDebugServer.cpp:
        (WebCore::ScriptDebugServer::getInternalProperties):
        (WebCore):
        * bindings/v8/ScriptDebugServer.h:
        (ScriptDebugServer):
        * bindings/v8/custom/V8InjectedScriptHostCustom.cpp:
        (WebCore::V8InjectedScriptHost::getInternalPropertiesCallback):
        (WebCore):
        * inspector/InjectedScript.cpp:
        (WebCore::InjectedScript::getInternalProperties):
        (WebCore):
        * inspector/InjectedScript.h:
        (InjectedScript):
        * inspector/InjectedScriptHost.idl:
        * inspector/InjectedScriptSource.js:
        (.):
        * inspector/Inspector.json:
        * inspector/InspectorRuntimeAgent.cpp:
        (WebCore::InspectorRuntimeAgent::getProperties):
        * inspector/InspectorRuntimeAgent.h:
        (InspectorRuntimeAgent):

2012-10-04  Sami Kyostila  <skyostil@chromium.org>

        Fixed position visibility check does not consider descendants
        https://bugs.webkit.org/show_bug.cgi?id=98144

        Reviewed by Simon Fraser.

        The check against creating composition layers for invisible fixed positioned
        elements is too aggressive in that it does not consider descendants of the
        fixed positioned element that may be visible even though the element itself is
        out of view.

        Fix the problem by calculating the true composited bounds of the fixed
        element instead of just using the size of the fixed layer. Because calculating
        the true bounds may be expensive, it is only done if the fixed layer itself is
        invisible.

        Test: compositing/layer-creation/fixed-position-absolute-descendant.html

        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::calculateCompositedBounds):
        (WebCore::RenderLayerCompositor::requiresCompositingForPosition):
        * rendering/RenderLayerCompositor.h:

2012-10-04  Vsevolod Vlasov  <vsevik@chromium.org>

        Web Inspector: When uiSourceCode content has diverged from VM script, call frames should be shown in temporary script based uiSourceCodes.
        https://bugs.webkit.org/show_bug.cgi?id=98385

        Reviewed by Pavel Feldman.

        When javaScriptSource diverges from VM, ResourceScriptMapping now switches debugging
        to temporary VM scripts based uiSourceCode with isDivergedReplacement property set.
        Added hasDivergedFromVM and isDivergingFromVM properties to JavaScriptSource.
        JavaScriptSourceFrame and ScriptSnippetsModel are updated to process breakpoint changes correctly.

        * inspector/front-end/BreakpointManager.js:
        (WebInspector.BreakpointManager.prototype.restoreBreakpoints):
        (WebInspector.BreakpointManager.prototype._uiSourceCodeRemoved):
        * inspector/front-end/JavaScriptSource.js:
        (WebInspector.JavaScriptSource.prototype.workingCopyCommitted):
        (WebInspector.JavaScriptSource.prototype.workingCopyChanged):
        (WebInspector.JavaScriptSource.prototype.fireHasDivergedFromVMChanged):
        * inspector/front-end/JavaScriptSourceFrame.js:
        (WebInspector.JavaScriptSourceFrame.prototype.commitEditing):
        (WebInspector.JavaScriptSourceFrame.prototype._hasDivergedFromVM):
        (WebInspector.JavaScriptSourceFrame.prototype.onTextChanged):
        (WebInspector.JavaScriptSourceFrame.prototype._getBreakpointDecorations):
        (WebInspector.JavaScriptSourceFrame.prototype._muteBreakpointsWhileEditing):
        (WebInspector.JavaScriptSourceFrame.prototype._didEditContent):
        (WebInspector.JavaScriptSourceFrame.prototype._restoreBreakpointsAfterEditing):
        (WebInspector.JavaScriptSourceFrame.prototype._addBreakpointDecoration):
        * inspector/front-end/ResourceScriptMapping.js:
        (WebInspector.ResourceScriptMapping.prototype.rawLocationToUILocation):
        (WebInspector.ResourceScriptMapping.prototype._hasDivergedFromVMChanged):
        (WebInspector.ResourceScriptMapping.prototype._bindUISourceCodeToScripts):
        (WebInspector.ResourceScriptMapping.prototype._getOrCreateTemporaryUISourceCode):
        * inspector/front-end/ScriptSnippetModel.js:
        (WebInspector.ScriptSnippetModel.prototype._createUISourceCodeForScript):
        (WebInspector.ScriptSnippetModel.prototype._restoreBreakpoints):
        * inspector/front-end/ScriptsPanel.js:
        (WebInspector.ScriptsPanel.prototype._revealExecutionLine):
        * inspector/front-end/UISourceCode.js:
        (WebInspector.UISourceCode.prototype.formatted):

2012-10-04  Vsevolod Vlasov  <vsevik@chromium.org>

        Web Inspector: Scripts panel should not automatically switch to snippet evaluation when previously evaluated snippet is edited.
        https://bugs.webkit.org/show_bug.cgi?id=98402

        Reviewed by Pavel Feldman.

        Scripts panel does not automatically switch to snippet evaluation when
        one edits previously evaluated snippet.

        * inspector/front-end/ScriptSnippetModel.js:
        (WebInspector.ScriptSnippetModel.prototype._createUISourceCodeForScript):
        * inspector/front-end/ScriptsPanel.js:
        (WebInspector.ScriptsPanel.prototype._revealExecutionLine):

2012-10-04  Balazs Kelemen  <kbalazs@webkit.org>

        Don't allow to disable compositing in forced compositing mode
        https://bugs.webkit.org/show_bug.cgi?id=98048

        Reviewed by Jocelyn Turcotte.

        Make forced compositing mode imply accelerated compositing. This will
        avoid unexpected situations for platforms that don't want to support
        the non-accelerated rendering path.

        Covered by existing tests.

        * WebCore.exp.in: Export Settings::setAcceleratedCompositingEnabled
        because it has been deinlined.
        * page/Settings.cpp:
        (WebCore::Settings::setAcceleratedCompositingEnabled):
        (WebCore::Settings::setForceCompositingMode):
        (WebCore):
        * page/Settings.h:
        (Settings):
        (WebCore::Settings::forceCompositingMode): Make it const as a side fix.

2012-10-04  Harald Alvestrand  <hta@google.com>

        Change RTCPeerConnection GetStats to use Date timestamp format
        https://bugs.webkit.org/show_bug.cgi?id=98263

        Reviewed by Yury Semikhatsky.

        Tested by extension to RTCPeerConnection-stats test.

        * Modules/mediastream/RTCStatsElement.cpp:
        (WebCore::RTCStatsElement::create):
        (WebCore::RTCStatsElement::RTCStatsElement):
        * Modules/mediastream/RTCStatsElement.h: long -> double
        (RTCStatsElement):
        (WebCore::RTCStatsElement::timestamp):
        * Modules/mediastream/RTCStatsElement.idl: long -> Date
        * Modules/mediastream/RTCStatsReport.cpp:
        (WebCore::RTCStatsReport::addElement):
        * Modules/mediastream/RTCStatsReport.h:
        (RTCStatsReport):
        * Modules/mediastream/RTCStatsResponse.cpp:
        (WebCore::RTCStatsResponse::addElement):
        * Modules/mediastream/RTCStatsResponse.h:
        (RTCStatsResponse):
        * platform/chromium/support/WebRTCStatsResponse.cpp:
        (WebKit::WebRTCStatsResponse::addElement):
        * platform/mediastream/RTCStatsResponseBase.h:
        (RTCStatsResponseBase):

2012-10-04  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r130377.
        http://trac.webkit.org/changeset/130377
        https://bugs.webkit.org/show_bug.cgi?id=98392

        Chromium Win compilation is broken (Requested by yurys on
        #webkit).

        * Modules/mediastream/RTCStatsElement.cpp:
        (WebCore::RTCStatsElement::create):
        (WebCore::RTCStatsElement::RTCStatsElement):
        * Modules/mediastream/RTCStatsElement.h:
        (RTCStatsElement):
        (WebCore::RTCStatsElement::timestamp):
        * Modules/mediastream/RTCStatsElement.idl:
        * Modules/mediastream/RTCStatsReport.cpp:
        (WebCore::RTCStatsReport::addElement):
        * Modules/mediastream/RTCStatsReport.h:
        (RTCStatsReport):
        * Modules/mediastream/RTCStatsResponse.cpp:
        (WebCore::RTCStatsResponse::addElement):
        * Modules/mediastream/RTCStatsResponse.h:
        (RTCStatsResponse):
        * platform/chromium/support/WebRTCStatsResponse.cpp:
        (WebKit::WebRTCStatsResponse::addElement):
        * platform/mediastream/RTCStatsResponseBase.h:
        (RTCStatsResponseBase):

2012-10-04  Harald Alvestrand  <hta@google.com>

        Change RTCPeerConnection GetStats to use Date timestamp format
        https://bugs.webkit.org/show_bug.cgi?id=98263

        Reviewed by Adam Barth.

        Tested by extension to RTCPeerConnection-stats test.

        * Modules/mediastream/RTCStatsElement.cpp:
        (WebCore::RTCStatsElement::create):
        (WebCore::RTCStatsElement::RTCStatsElement):
        * Modules/mediastream/RTCStatsElement.h: long -> double
        (RTCStatsElement):
        (WebCore::RTCStatsElement::timestamp):
        * Modules/mediastream/RTCStatsElement.idl: long -> Date
        * Modules/mediastream/RTCStatsReport.cpp:
        (WebCore::RTCStatsReport::addElement):
        * Modules/mediastream/RTCStatsReport.h:
        (RTCStatsReport):
        * Modules/mediastream/RTCStatsResponse.cpp:
        (WebCore::RTCStatsResponse::addElement):
        * Modules/mediastream/RTCStatsResponse.h:
        (RTCStatsResponse):
        * platform/chromium/support/WebRTCStatsResponse.cpp:
        (WebKit::WebRTCStatsResponse::addElement):
        * platform/mediastream/RTCStatsResponseBase.h:
        (RTCStatsResponseBase):

2012-10-05  Kent Tamura  <tkent@chromium.org>

        [Chromium] Enable the multiple fields UI for input[type=date]
        https://bugs.webkit.org/show_bug.cgi?id=98351

        Reviewed by Hajime Morita.

        Touch files related to ENABLE_INPUT_TYPE_DATE_LEGACY_UI to avoid build
        issues.

        No new tests. Many tests will be landed shortly.

        * html/DateInputType.cpp:
        * html/DateInputType.h:

2012-10-04  Kent Tamura  <tkent@chromium.org>

        Add code for input[type=date] with the multiple fields UI
        https://bugs.webkit.org/show_bug.cgi?id=98340

        Reviewed by Hajime Morita.

        The new code is available if !ENABLE(INPUT_TYPE_DATE_LEGACY_UI). At this
        moment, there are no platforms enabling the new code. We're going to
        enable it soon on desktop Chromium, and add tests. Then we're going to
        remove the code for ENABLE(INPUT_TYPE_DATE_LEGACY_UI).

        ENABLE(INPUT_TYPE_DATE_LEGACY_UI) means the current UI; input[type=date]
        is represetnted as a kind of text field, and it has code to invoke a
        calendar picker.
        ENABLE(CALENDAR_PICKER) was used wrongly. It meant calendar picker
        support + text field UI of input[type=date]. Now it means only calendar
        picker support.

        * html/DateInputType.h:
        (WebCore): If ENABLE(INPUT_MULTIPLE_FIELDS_UI) &&
        !ENABLE(INPUT_TYPE_DATE_LEGACY_UI), change the base class to the class
        for multiple fields UI.
        (DateInputType): Wrap the code for text fields behavior and calendar
        picker UI with ENABLE(INPUT_TYPE_DATE_LEGACY_UI). Add functions for
        ENABLE(INPUT_MULTIPLE_FIELDS_UI)
        * html/DateInputType.cpp:
        (WebCore::DateInputType::DateInputType):
        Change the flag name; CALENDAR_PICKER -> INPUT_TYPE_DATE_LEGACY_UI
        (WebCore): ditto.
        (WebCore::DateInputType::formatDateTimeFieldsState):
        A callback for multiple fields UI. This constructs a string value from
        each of values of multiple fields.
        Note that we don't need to do +1 to month().
        (WebCore::DateInputType::setupLayoutParameters):
        A callback for multiple fields UI. Passes information to build UI.

        * html/BaseMultipleFieldsDateAndTimeInputType.h:
        (BaseMultipleFieldsDateAndTimeInputType):
        Add m_pickerIndicatorIsAlwaysVisible member, wrap some members with flags.
        * html/BaseMultipleFieldsDateAndTimeInputType.cpp:
        (WebCore::BaseMultipleFieldsDateAndTimeInputType::BaseMultipleFieldsDateAndTimeInputType):
        Initialize m_pickerIndicatorIsAlwaysVisible.
        (WebCore::BaseMultipleFieldsDateAndTimeInputType::createShadowSubtree):
        If a type supports calendar picker, we should always show the picker
        indicator. We introduce m_pickerIndicatorIsAlwaysVisible flag, and ask
        RenderTheme for support status of each of types.
        Add a local variable 'document' to avoid multiple element()->document().
        (WebCore::BaseMultipleFieldsDateAndTimeInputType::updatePickerIndicatorVisibility):
        - If m_pickerIndicatorIsAlwaysVisible, don't hide the picker indicator element.
        - Wrap the code with appropriate flags.

        * rendering/RenderTheme.h:
        (WebCore::RenderTheme::supportsCalendarPicker): Added.
        * rendering/RenderThemeChromiumMac.h: Override supportsCalendarPicker.
        * rendering/RenderThemeChromiumMac.mm:
        (WebCore::RenderThemeChromiumMac::supportsCalendarPicker):
        Added. Delegate to RenderThemeChromiumCommon.
        * rendering/RenderThemeChromiumSkia.h: Override supportsCalendarPicker.
        * rendering/RenderThemeChromiumSkia.cpp:
        (WebCore::RenderThemeChromiumSkia::supportsCalendarPicker):
        Added. Delegate to RenderThemeChromiumCommon.
        * rendering/RenderThemeChromiumCommon.h:
        (RenderThemeChromiumCommon): Declare supportsCalendarPicker.
        * rendering/RenderThemeChromiumCommon.cpp:
        (WebCore::RenderThemeChromiumCommon::supportsCalendarPicker):
        Returns true if the type is "date."

        * html/DateTimeFieldsState.h:
        (DateTimeFieldsState): Add a comment for the m_month field.

2012-10-04  Kent Tamura  <tkent@chromium.org>

        DateTimeYearFieldElement should respect min/max values specified by page authors
        https://bugs.webkit.org/show_bug.cgi?id=98227

        Reviewed by Hajime Morita.

        Before this patch, we always set 1 to the minimum limit and 275760 to
        the maximum limit for a year field, and a user can specify any year
        regardless of min/max attributes. Such wide range is unnecessary for
        normal applications and we should provide a way to limit the range.

        Test: fast/forms/month-multiple-fields/month-multiple-fields-keyboard-events.html

        * html/shadow/DateTimeFieldElements.h:
        To add four constructor arguments, introduce Parameters struct.
        Actually, we add the followings;
         - minimum year in UI
         - maximum year in UI
         - min attribute is specified
         - max attribute is specified
        (Parameters):
        (WebCore::DateTimeYearFieldElement::Parameters::Parameters):
        (DateTimeYearFieldElement):
        * html/shadow/DateTimeFieldElements.cpp:
        (WebCore::DateTimeYearFieldElement::DateTimeYearFieldElement): ditto.
        (WebCore::DateTimeYearFieldElement::create): ditto.
        (WebCore::DateTimeYearFieldElement::clampValueForHardLimits):
        Override DateTimeNumericFieldElement::clampValueForHardLimits.
        By this, we allow to set out-of-range year values.
        (WebCore::currentFullYear): A helper to get the current year.
        (WebCore::DateTimeYearFieldElement::defaultValueForStepDown):
        If the field has no value and step down operation occurs,
         - the field has the current year if the max attribute is not specified.
         - the field has the maximum value otherwise.
        (WebCore::DateTimeYearFieldElement::defaultValueForStepUp): Similar change.

        * html/shadow/DateTimeNumericFieldElement.h:
        (DateTimeNumericFieldElement): Declare clampValueForHardLimits.
        * html/shadow/DateTimeNumericFieldElement.cpp:
        (WebCore::DateTimeNumericFieldElement::clampValueForHardLimits):
        (WebCore::DateTimeNumericFieldElement::setValueAsInteger):
        Call clampValueForHardLimits instead of clampValue in order to
        distinguish limits for UI and limits for internal value update.

        * html/shadow/DateTimeEditElement.h:
        (LayoutParameters): Add minimumYear and maximumYear members.
        (WebCore::DateTimeEditElement::LayoutParameters::LayoutParameters):
        Initialize minimumYear and maximumYear.
        (WebCore::DateTimeEditElement::LayoutParameters::undefinedYear):
        Represents 'undefined' value for minimumYear and maximumYear.
        * html/shadow/DateTimeEditElement.cpp:
        (WebCore::DateTimeEditBuilder::visitField):
        Preparas DateTimeYearField::Parameters and pass it to the DateTimeYearField factory.

        * html/BaseMultipleFieldsDateAndTimeInputType.cpp:
        (WebCore::BaseMultipleFieldsDateAndTimeInputType::fullYear):
        A helper to get a year value from an attribute value string.
        * html/BaseMultipleFieldsDateAndTimeInputType.h:
        (BaseMultipleFieldsDateAndTimeInputType): Add fullYear().

        * html/DateTimeInputType.cpp:
        (WebCore::DateTimeInputType::setupLayoutParameters):
        Set LayoutParameters::minimumYear and maximumYear.
        * html/DateTimeLocalInputType.cpp:
        (WebCore::DateTimeLocalInputType::setupLayoutParameters): ditto.
        * html/MonthInputType.cpp:
        (WebCore::MonthInputType::setupLayoutParameters): ditto.
        * html/WeekInputType.cpp:
        (WebCore::WeekInputType::setupLayoutParameters): ditto.

2012-10-03  Adam Barth  <abarth@webkit.org>

        Unreviewed. Fix parse error in vcproj file.

        * WebCore.vcproj/WebCore.vcproj:

2012-10-03  Keishi Hattori  <keishi@webkit.org>

        Implement localizeValue for TimeInputType
        https://bugs.webkit.org/show_bug.cgi?id=98237

        Reviewed by Kent Tamura.

        We want to localize time values for the suggestion picker.
        DateTimeStringBuilder parses a format and creates a formatted string.

        Added chromium unit test LocaleMacTest.formatTime

        * html/BaseMultipleFieldsDateAndTimeInputType.cpp:
        (WebCore::BaseMultipleFieldsDateAndTimeInputType::shouldHaveSecondField): Moved from LayoutParameters because we want to use it inside localizeValue.
        (WebCore):
        * html/BaseMultipleFieldsDateAndTimeInputType.h:
        (BaseMultipleFieldsDateAndTimeInputType):
        * html/DateTimeInputType.cpp:
        (WebCore::DateTimeInputType::setupLayoutParameters):
        * html/DateTimeLocalInputType.cpp:
        (WebCore::DateTimeLocalInputType::setupLayoutParameters):
        * html/TimeInputType.cpp:
        (WebCore::TimeInputType::localizeValue):
        (WebCore):
        (WebCore::TimeInputType::setupLayoutParameters):
        * html/TimeInputType.h:
        (TimeInputType):
        * html/shadow/DateTimeEditElement.cpp:
        (WebCore):
        * html/shadow/DateTimeEditElement.h:
        (WebCore::DateTimeEditElement::LayoutParameters::LayoutParameters):
        * platform/text/LocaleICU.cpp:
        (WebCore::LocaleICU::formatDateTime): Calls Localizer::formatDateTime if the date component is not a date.
        * platform/text/LocaleICU.h:
        (LocaleICU):
        * platform/text/LocaleWin.cpp:
        (WebCore::LocaleWin::formatDateTime): Calls Localizer::formatDateTime if the date component is not a date.
        * platform/text/LocaleWin.h:
        (LocaleWin):
        * platform/text/LocaleNone.cpp:
        (LocaleNone):
        (WebCore::LocaleNone::formatDateTime):
        * platform/text/Localizer.cpp:
        (DateTimeStringBuilder):
        (WebCore):
        (WebCore::DateTimeStringBuilder::DateTimeStringBuilder): Takes a
        Localizer pointer. This is used inside the Localizer so the Localizer
        will out live the DateTimeStringBuilder.
        (WebCore::DateTimeStringBuilder::build): Builds a localized string for the given format.
        (WebCore::DateTimeStringBuilder::zeroPadString):
        (WebCore::DateTimeStringBuilder::appendNumber): Appends a number with left zero padding to match width.
        (WebCore::DateTimeStringBuilder::visitField):
        (WebCore::DateTimeStringBuilder::visitLiteral):
        (WebCore::DateTimeStringBuilder::toString): Returns the localized string.
        (WebCore::Localizer::formatDateTime):
        * platform/text/Localizer.h:
        * platform/text/mac/LocaleMac.h:
        (LocaleMac):
        * platform/text/mac/LocaleMac.mm:
        (WebCore::LocaleMac::formatDateTime): Calls Localizer::formatDateTime if the date component is not a date.

2012-10-03  Douglas Stockwell  <dstockwell@chromium.org>

        Chromium needs support for border radius clipping
        https://bugs.webkit.org/show_bug.cgi?id=69866

        Reviewed by Stephen White.

        Changes to make this suitably efficient have already landed upstream in skia:
        http://code.google.com/p/skia/source/detail?r=2924

        Covered by existing tests.

        * rendering/RenderLayer.cpp:

2012-10-03  Benjamin Poulain  <bpoulain@apple.com>

        Simplify attribute access in Element::computeInheritedLanguage
        https://bugs.webkit.org/show_bug.cgi?id=98327

        Reviewed by Andreas Kling.

        * dom/Element.cpp:
        (WebCore::Element::computeInheritedLanguage):
        By using Element::fastGetAttribute(), we check for the existence of attributeData twice
        and do a bunch of useless operation on AtomicString.

        By using ElementAttributeData directly, we can cut it to the two important branch.

2012-10-03  Kangil Han  <kangil.han@samsung.com>

        Fix unused parameter compile warnings.
        https://bugs.webkit.org/show_bug.cgi?id=98243

        Reviewed by Alexey Proskuryakov.

        Fixed unused parameter compile warning by removing parameter names and adding UNUSED_PARAM usage.

        * plugins/PluginDebug.cpp:
        (WebCore::prettyNameForNPPVariable):
        * plugins/npapi.cpp:
        (NPN_MemFlush):
        (NPN_RequestRead):
        (NPN_GetJavaPeer):

2012-10-03  Adam Barth  <abarth@webkit.org>

        Measure the usage of WebSQLDatabase
        https://bugs.webkit.org/show_bug.cgi?id=98330

        Reviewed by Ojan Vafai.

        WebKit is the only engine that implements WebSQLDatabase. This patch
        causes us to measure its usage so we can see how quickly web sites move
        to IndexedDB.

        * Modules/webdatabase/DOMWindowWebDatabase.idl:
        * page/FeatureObserver.h:

2012-10-03  Arnaud Renevier  <a.renevier@sisa.samsung.com>

        [soup] WebKit crashes when doing a http request
        https://bugs.webkit.org/show_bug.cgi?id=98055

        Reviewed by Martin Robinson.

        On i386, (d->m_firstRequest.timeoutInterval() * 1000) results in 0 if
        timeoutInterval() is INT_MAX. So, set default timeout to 0 to avoid
        calling soup_add_timeout with a 0 value.

        Also, if resource handle is deleted before "request-started" signal is
        emitted, soupMessage handle points to a deleted object, and a crash
        occurs. So, reset soupMessage handle data in
        cleanupSoupRequestOperation so it won't happen anymore.

        Lastly, if timeout occurs before request is completed, handle is
        deleted, and crash occurs in sendRequestCallback due to an early
        destroyed handle. To avoid that, call handle->cancel in
        requestTimeoutCallback. There is no need to call
        cleanupSoupRequestOperation anymore since handle->cancel will trigger
        sendRequestCallback, and as handle is deleted,
        cleanupSoupRequestOperation will be called automatically.

        No new tests yet, tests will be added with the patch in bug 74802.

        * platform/network/ResourceRequestBase.cpp:
        (WebCore):
        * platform/network/soup/ResourceHandleSoup.cpp:
        (WebCore::cleanupSoupRequestOperation):
        (WebCore::ResourceHandle::platformSetDefersLoading):
        (WebCore::requestTimeoutCallback):

2012-10-03  Adam Barth  <abarth@webkit.org>

        Remove support for ENABLE(LEGACY_WEBKIT_BLOB_BUILDER)
        https://bugs.webkit.org/show_bug.cgi?id=98301

        Reviewed by Eric Seidel.

        According to anonymous usage statistics, the APIs guarded by
        ENABLE(LEGACY_WEBKIT_BLOB_BUILDER) are used on approximately 0.006% of
        web pages. Given that this feature is only enabled in GTK and Chromium,
        it seems likely that we should remove it.

        * CMakeLists.txt:
        * DerivedSources.make:
        * DerivedSources.pri:
        * GNUmakefile.features.am:
        * GNUmakefile.list.am:
        * WebCore.gypi:
        * WebCore.xcodeproj/project.pbxproj:
        * fileapi/WebKitBlobBuilder.idl: Removed.
        * page/DOMWindow.idl:

2012-10-03  Beth Dakin  <bdakin@apple.com>

        https://bugs.webkit.org/show_bug.cgi?id=98313
        ScrollingStateNode should keep a Vector of children instead of child 
        pointers

        Reviewed by Simon Fraser.

        This patch re-names ScrollingStateNode::cloneNode() to 
        ScrollingStateNode::cloneAndResetNode(). The new function resets the 
        change properties of the current node after cloning it, and it also 
        takes care of cloning children, which the old function did not do.

        m_firstChild and m_nextSibling are gone. Use the m_children Vector 
        instead.
        * page/scrolling/ScrollingStateNode.cpp:
        (WebCore::ScrollingStateNode::cloneAndResetChildNodes):
        (WebCore::ScrollingStateNode::appendChild):
        * page/scrolling/ScrollingStateNode.h:
        (ScrollingStateNode):
        (WebCore::ScrollingStateNode::parent):
        (WebCore::ScrollingStateNode::setParent):

        Reset the change properties and clone children in cloneAndResetNode()
        * page/scrolling/ScrollingStateScrollingNode.cpp:
        (WebCore::ScrollingStateScrollingNode::cloneAndResetNode):
        * page/scrolling/ScrollingStateScrollingNode.h:

        Yay, this function can be vastly simplified now that we don't have 
        those messy child and sibling pointers.
        * page/scrolling/ScrollingStateTree.cpp:
        (WebCore::ScrollingStateTree::commit):

2012-10-03  Ojan Vafai  <ojan@chromium.org>

        Replace uses of -webkit-box-sizing with box-sizing
        https://bugs.webkit.org/show_bug.cgi?id=98312

        Reviewed by Tony Chang.

        No need to use the prefixed version when the unprefixed works the same.
        No new tests since there's no change in behavior..

        * css/html.css:

2012-10-03  Joshua Bell  <jsbell@chromium.org>

        IndexedDB: Don't do full commit for empty transactions
        https://bugs.webkit.org/show_bug.cgi?id=89239

        Reviewed by Tony Chang.

        Don't bother creating a leveldb write batch if there's nothing in the transaction
        to commit. Note that a read-only transaction may still have index cleanup so may
        not be an empty transaction.

        This cuts the Lookup2 benchmark in http://reyesr.github.com/html5-storage-benchmark/
        from 70s to 2s.

        Covered by existing tests, e.g. storage/indexeddb/transaction-basics.html

        * platform/leveldb/LevelDBTransaction.cpp:
        (WebCore::LevelDBTransaction::commit):

2012-10-03  Adam Klein  <adamk@chromium.org>

        Remove bogus FIXME from Document.idl
        https://bugs.webkit.org/show_bug.cgi?id=98302

        Reviewed by Adam Barth.

        The FIXME claimed that document.body throwing an exception was not
        specced, but in fact it is:
        http://www.whatwg.org/specs/web-apps/current-work/multipage/dom.html#dom-document-body

        * dom/Document.idl:

2012-10-03  Joshua Bell  <jsbell@chromium.org>

        IndexedDB: Memory leak when deleting object stores with indexes
        https://bugs.webkit.org/show_bug.cgi?id=98292

        Reviewed by Tony Chang.

        Reference cycles between IDBObjectStore and IDBIndex instances are explicitly
        broken when the transaction completes (and the spec allows traversal to fail).
        Deleted stores need to have the reference cycle broken too.

        Caught by running valgrind over: storage/indexeddb/keypath-basics.html

        * Modules/indexeddb/IDBTransaction.cpp:
        (WebCore::IDBTransaction::objectStoreDeleted): Add store to set.
        (WebCore::IDBTransaction::dispatchEvent): Notify stores in set.
        * Modules/indexeddb/IDBTransaction.h: Add set of deleted stores.

2012-10-03  Adam Barth  <abarth@webkit.org>

        CSSNamespace.h is empty and should be deleted
        https://bugs.webkit.org/show_bug.cgi?id=98304

        Reviewed by Eric Seidel.

        There's no reason to have this file in the repository.

        * GNUmakefile.list.am:
        * WebCore.gypi:
        * WebCore.vcproj/WebCore.vcproj:
        * WebCore.xcodeproj/project.pbxproj:
        * css/CSSNamespace.h: Removed.

2012-10-03  Arnaud Renevier  <a.renevier@sisa.samsung.com>

        Build failure with css filters enabled and accelerated compositing disabled
        https://bugs.webkit.org/show_bug.cgi?id=95908

        Reviewed by Tony Chang.

        Do not try to setBackingNeedsRepaint when building without accelerated
        compositing.

        Also, allow painting with filter (paintsWithFilters returns true if
        renderer has filter) when accelerated compositing is not enabled.

        No functional change, so no new tests.

        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::styleChanged):

2012-10-03  Emil A Eklund  <eae@chromium.org>

        Round image sizes when zooming
        https://bugs.webkit.org/show_bug.cgi?id=98205

        Reviewed by Eric Seidel.

        We currently floor image sizes when zooming which can result in
        images being rendered at one pixel less than the actual size.
        This is especially likely to happen for very large images.

        Test: fast/sub-pixel/zoomed-image-tiles.html

        * loader/cache/CachedImage.cpp:
        (WebCore::CachedImage::imageSizeForRenderer):

2012-10-03  Hugo Parente Lima  <hugo.lima@openbossa.org>

        [WK2] PageViewportController.cpp is supposed to be a generic WebKit2 file but only works with Qt port.
        https://bugs.webkit.org/show_bug.cgi?id=98186

        Reviewed by Noam Rosenthal.

        Remove the implicit conversion from WebCore::FloatSize to QSize.

        * platform/graphics/FloatSize.h:
        (FloatSize):

2012-10-03  Levi Weintraub  <leviw@chromium.org>

        [Sub-pixel layout] incorrect rendering when painting sub-layers as their own root
        https://bugs.webkit.org/show_bug.cgi?id=97484

        Reviewed by Eric Seidel.

        When in compositing mode, layer painting can be triggered through the backing store. When this
        happens, a non-top-level RenderLayer is called to paint as its own root. Normally, we attempt to preserve
        the proper sub-pixel accumulation through layers to their children, but since we're not
        starting with the top-level layer, we haven't properly accumulated one, and convertToLayerCoords,
        another source of correctly getting the sub-pixel offset for a layer, also avoids crawling
        past the listed root layer.

        When painting a root layer, we're aligned to the surface we're painting to, so we round our
        offset to avoid moving objects around.

        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::paintLayerContents):

2012-10-03  Jeff Timanus  <twiz@chromium.org>

        [chromium] Expose settings value to conditionally enable pinch-zoom scaling in the Chromium compositor.  The
        flag defaults to disabled, so this change should be a no-op for scaling/scrolling behaviour.
        https://bugs.webkit.org/show_bug.cgi?id=93292

        Reviewed by James Robinson.

        Tests:  Existing page-scale layout tests.

        * page/Frame.cpp:
        (WebCore::Frame::frameScaleFactor):
        * page/Settings.cpp:
        (WebCore::Settings::Settings):
        * page/Settings.h:
        (WebCore::Settings::setApplyPageScaleFactorInCompositor):
        (WebCore::Settings::applyPageScaleFactorInCompositor):
        (Settings):

2012-10-03  Stephen Chenney  <schenney@chromium.org>

        Font data is purged while fonts are still using it
        https://bugs.webkit.org/show_bug.cgi?id=93640

        Reviewed by Eric Seidel.

        Move the handling of custom font pruning from Document to FontFallbackList.
        The previous inplementation allowed fonts to be removed before all their
        clients were done. This change moves handling of custom font purging to the
        FontFallbackList class, which is the shared object that is only removed
        when all clients of a font are done with it. This fixes a crash in Angry
        Birds due to a seamless iframe and some failing tests in fast/frames/seamless.

        The specific element that causes problems is:
        <iframe id="ingame_frame0" name="ingame_frame0" frameborder="0" seamless="true"
          src="http://chrome.angrybirds.com/ingame_graphic.html"
          onload="this.style.opacity = 1; parent.adLoaded();" scrolling="no"
          style="opacity: 1; -webkit-transition: opacity 1s ease-in-out 0s;
          position: absolute; border: 0px; width: 312px; height: 320px; z-index:
          300; overflow: hidden; visibility: visible;"></iframe>
        The source document uses the same font as the embedding document.

        Tests: fast/frames/seamless/seamless-custom-font-pruning-crash.html
               fast/frames/seamless/seamless-nested-crash.html

        * css/CSSFontFaceSource.cpp:
        (WebCore::CSSFontFaceSource::getFontData): Remove code to register the font with the document.
        * css/CSSSegmentedFontFace.cpp:
        (WebCore::CSSSegmentedFontFace::getFontData): Remove code to register the font with the document.
        * dom/Document.cpp:
        (WebCore::Document::~Document): Remove code that records and purges custom fonts.
        (WebCore):
        (WebCore::Document::reportMemoryUsage): Remove reference to non-existent objects.
        * dom/Document.h:
        (WebCore):
        (Document): Remove method declarations for custom font handling.
        * platform/graphics/FontFallbackList.h:
        (FontFallbackList): Moved some code around and made non-copyable.
        (WebCore::FontFallbackList::setGlyphPageZero): Moved.
        (WebCore::FontFallbackList::setGlyphPages): Moved.
        * platform/graphics/GlyphPageTreeNode.cpp:
        (WebCore::GlyphPageTreeNode::pruneFontData): Removed unnecessary null check.
        * platform/graphics/SegmentedFontData.cpp:
        (WebCore::SegmentedFontData::~SegmentedFontData): Added code to prune the Glyph pages when this is deleted.
        * platform/graphics/SimpleFontData.cpp:
        (WebCore::SimpleFontData::~SimpleFontData): Added code to prune the Glyph pages when this is deleted.

2012-10-03  Adam Barth  <abarth@webkit.org>

        Crash when calling document.open during unload
        https://bugs.webkit.org/show_bug.cgi?id=98287

        Reviewed by Nate Chapin.

        Calling document.open results in us nulling out m_documentLoader. This
        code doesn't properly handle that case and crashes.

        Test: fast/parser/document-open-in-unload.html

        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::commitProvisionalLoad):

2012-10-03  Benjamin Poulain  <bpoulain@apple.com>

        Element::computeInheritedLanguage: evaluate the while() condition after fetching the string
        https://bugs.webkit.org/show_bug.cgi?id=98220

        Reviewed by Andreas Kling.

        * dom/Element.cpp:
        (WebCore::Element::computeInheritedLanguage):
        The condition is never false on the first execution. Move the condition to the
        end of the loop for fun and profit.

2012-10-03  Hans Wennborg  <hans@chromium.org>

        Speech JavaScript API: Add SpeechRecognition.interimResults attribute
        https://bugs.webkit.org/show_bug.cgi?id=98279

        Reviewed by Adam Barth.

        Add the interimResults attribute and pass it to the embedder. It was
        added to the spec draft in
        http://dvcs.w3.org/hg/speech-api/rev/d25fea0d029c

        Tested in fast/speech/scripted/basics.html

        * Modules/speech/SpeechRecognition.cpp:
        (WebCore::SpeechRecognition::start):
        (WebCore::SpeechRecognition::SpeechRecognition):
        * Modules/speech/SpeechRecognition.h:
        (WebCore::SpeechRecognition::interimResults):
        (WebCore::SpeechRecognition::setInterimResults):
        * Modules/speech/SpeechRecognition.idl:
        * Modules/speech/SpeechRecognitionClient.h:
        (SpeechRecognitionClient):
        * Modules/speech/SpeechRecognitionController.h:
        (WebCore::SpeechRecognitionController::start):

2012-10-03  Hans Wennborg  <hans@chromium.org>

        Speech JavaScript API: Remove resultdeleted event
        https://bugs.webkit.org/show_bug.cgi?id=98272

        Reviewed by Adam Barth.

        Remove the resultdeleted event. This was never used, and was removed
        from the spec draft in
        http://dvcs.w3.org/hg/speech-api/rev/f9d53ab8b449

        The fast/speech/scripted/basics.html test is updated to reflect this.

        * Modules/speech/SpeechRecognition.cpp:
        * Modules/speech/SpeechRecognition.h:
        (SpeechRecognition):
        * Modules/speech/SpeechRecognition.idl:
        * Modules/speech/SpeechRecognitionEvent.cpp:
        * Modules/speech/SpeechRecognitionEvent.h:
        (SpeechRecognitionEvent):
        * dom/EventNames.h:
        (WebCore):

2012-09-16  Mark Hahnenberg  <mhahnenberg@apple.com>

        Delayed structure sweep can leak structures without bound
        https://bugs.webkit.org/show_bug.cgi?id=96546

        Reviewed by Geoffrey Garen.

        This patch gets rid of the separate Structure allocator in the MarkedSpace and adds two new destructor-only
        allocators. We now have separate allocators for our three types of objects: those objects with no destructors,
        those objects with destructors and with immortal structures, and those objects with destructors that don't have 
        immortal structures. All of the objects of the third type (destructors without immortal structures) now 
        inherit from a new class named JSDestructibleObject (which in turn is a subclass of JSNonFinalObject), which stores 
        the ClassInfo for these classes at a fixed offset for safe retrieval during sweeping/destruction.

        No new tests.

        * ForwardingHeaders/runtime/JSDestructableObject.h: Added.
        * bindings/js/JSDOMWrapper.h: Inherits from JSDestructibleObject.
        (JSDOMWrapper):
        (WebCore::JSDOMWrapper::JSDOMWrapper):
        * bindings/scripts/CodeGeneratorJS.pm: Add finalizers to anything that inherits from JSGlobalObject,
        e.g. JSDOMWindow and JSWorkerContexts. For those classes we also need to define needsDestruction as true.
        (GenerateHeader):
        * bridge/objc/objc_runtime.h: Inherit from JSDestructibleObject.
        (ObjcFallbackObjectImp):
        * bridge/objc/objc_runtime.mm:
        (Bindings):
        (JSC::Bindings::ObjcFallbackObjectImp::ObjcFallbackObjectImp):
        * bridge/runtime_array.cpp: Use a finalizer so that JSArray isn't forced to inherit from JSDestructibleObject.
        (JSC):
        (JSC::RuntimeArray::destroy):
        * bridge/runtime_array.h:
        (JSC::RuntimeArray::create):
        (JSC):
        * bridge/runtime_object.cpp: Inherit from JSDestructibleObject.
        (Bindings):
        (JSC::Bindings::RuntimeObject::RuntimeObject):
        * bridge/runtime_object.h:
        (RuntimeObject):

2012-10-02  Anders Carlsson  <andersca@apple.com>

        Change most GraphicsLayer::create calls to use the version that takes a GraphicsLayerFactory
        https://bugs.webkit.org/show_bug.cgi?id=98217

        Reviewed by Andreas Kling.

        * WebCore.exp.in:
        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::createGraphicsLayer):
        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::updateOverflowControlsLayers):
        (WebCore::RenderLayerCompositor::ensureRootLayer):

2012-10-03  Joshua Bell  <jsbell@chromium.org>

        IndexedDB: Optimize encodeString/decodeString
        https://bugs.webkit.org/show_bug.cgi?id=97794

        Reviewed by Tony Chang.

        Optimize string encoding/decoding, which showed up as a CPU hot spot during profiling.
        The backing store uses big-endian ordering of 16-bit code unit strings, so a memcopy
        isn't sufficient, but the code used StringBuilder::append() character-by-character
        and custom byte-swapping which was slow.

        Ran a test w/ DumpRenderTree (to avoid multiprocess overhead) taking a 10k character string
        and putting it 20k times and getting it 20k times. On my test box, mean time before the
        patch was 8.2s, mean time after the patch was 4.6s.

        Tested by Chromium's webkit_unit_tests --gtest_filter='IDBLevelDBCodingTest.*String*'

        * Modules/indexeddb/IDBLevelDBCoding.cpp:
        (WebCore::IDBLevelDBCoding::encodeString):
        (WebCore::IDBLevelDBCoding::decodeString):

2012-10-03  Keishi Hattori  <keishi@webkit.org>

        Implement DataList UI for input type time on chromium
        https://bugs.webkit.org/show_bug.cgi?id=98240

        Reviewed by Kent Tamura.

        This adds datalist UI for input type time. We add the picker indicator to
        BaseMultipleFieldsDateAndTimeInputType. We enclose the dateTimeEdit element
        and picker indicator inside a new div element so we can position the picker
        indicator in the same place as input type=date.

        Tests: platform/chromium/fast/forms/time/time-suggestion-picker-appearance-rtl.html
               platform/chromium/fast/forms/time/time-suggestion-picker-appearance-with-scroll-bar.html
               platform/chromium/fast/forms/time/time-suggestion-picker-appearance.html
               platform/chromium/fast/forms/time/time-suggestion-picker-key-operations.html
               platform/chromium/fast/forms/time/time-suggestion-picker-mouse-operations.html

        * css/html.css:
        (input::-webkit-date-and-time-container):
        * html/BaseMultipleFieldsDateAndTimeInputType.cpp:
        (WebCore::BaseMultipleFieldsDateAndTimeInputType::BaseMultipleFieldsDateAndTimeInputType):
        (WebCore::BaseMultipleFieldsDateAndTimeInputType::createShadowSubtree): Creates a picker indicator.
        (WebCore::BaseMultipleFieldsDateAndTimeInputType::handleKeydownEvent): Open the picker on Alt+Down.
        (WebCore):
        (WebCore::BaseMultipleFieldsDateAndTimeInputType::listAttributeTargetChanged): Updates picker visibility.
        (WebCore::BaseMultipleFieldsDateAndTimeInputType::updatePickerIndicatorVisibility): In the future, DateInputType can override
        this so the picker indicator is always visible.
        (WebCore::BaseMultipleFieldsDateAndTimeInputType::hidePickerIndicator):
        (WebCore::BaseMultipleFieldsDateAndTimeInputType::showPickerIndicator):
        * html/BaseMultipleFieldsDateAndTimeInputType.h:
        (WebCore):
        (BaseMultipleFieldsDateAndTimeInputType):
        * html/shadow/DateTimeFieldElement.cpp:
        (WebCore::DateTimeFieldElement::defaultKeyboardEventHandler): Ignore Alt+down because it should trigger the picker to open.
        * rendering/RenderThemeChromiumCommon.cpp:
        (WebCore::RenderThemeChromiumCommon::supportsDataListUI): Add time to the list.

2012-10-03  Andreas Kling  <kling@webkit.org>

        Give CSSValueList backing vector an inline capacity.
        <http://webkit.org/b/98266>
        <rdar://problem/12421425>

        Reviewed by Anders Carlsson.

        Set an inline capacity of 4 on the CSSValue vector backing CSSValueList. This avoids an extra heap allocation
        in the common case, and reduces total memory use across the board, since the majority of CSSValueLists have
        at least 1 item, and the Vector will bump from 0 to 16 capacity on the first append.

        394kB progression on Membuster3.

        * css/CSSValueList.h:
        (CSSValueList):

2012-10-03  Ilya Tikhonovsky  <loislo@chromium.org>

        Web Inspector: NMI: instrument NativeImageSkia.
        https://bugs.webkit.org/show_bug.cgi?id=96277

        Reviewed by Yury Semikhatsky.

        * platform/graphics/skia/NativeImageSkia.cpp:
        (WebCore::NativeImageSkia::reportMemoryUsage):
        (WebCore::reportMemoryUsage):

2012-10-03  Pavel Feldman  <pfeldman@chromium.org>

        Web Inspector: remember the last dock option so that user could toggle between dock to bottom and right
        https://bugs.webkit.org/show_bug.cgi?id=98255

        Reviewed by Vsevolod Vlasov.

        - Introduced DockController.js that covers the dock mechanics
        - Removed dock orientation from the settings
        - Storing the last dock option to present it as default
        - Simplified the multi-option status bar button

        * WebCore.gypi:
        * WebCore.vcproj/WebCore.vcproj:
        * inspector/compile-front-end.py:
        * inspector/front-end/DockController.js: Added.
        (WebInspector.DockController):
        (WebInspector.DockController.prototype.get element):
        (WebInspector.DockController.prototype.setDocked.set if):
        (WebInspector.DockController.prototype.setDocked):
        (WebInspector.DockController.prototype.setDockingUnavailable):
        (WebInspector.DockController.prototype._updateUI.get states):
        (WebInspector.DockController.prototype._updateUI):
        (WebInspector.DockController.prototype._decorateButtonForTargetState):
        (WebInspector.DockController.prototype._createDockOptions):
        (WebInspector.DockController.prototype._toggleDockState):
        (WebInspector.DockController.prototype.isCompactMode):
        (WebInspector.DockController.prototype.setCompactMode):
        * inspector/front-end/InspectorFrontendAPI.js:
        (InspectorFrontendAPI.setAttachedWindow):
        * inspector/front-end/InspectorFrontendHostStub.js:
        (.WebInspector.InspectorFrontendHostStub.prototype.requestAttachWindow):
        (.WebInspector.InspectorFrontendHostStub.prototype.requestDetachWindow):
        * inspector/front-end/Settings.js:
        * inspector/front-end/SettingsScreen.js:
        (WebInspector.GenericSettingsTab):
        * inspector/front-end/StatusBarButton.js:
        (WebInspector.StatusBarButton):
        * inspector/front-end/Toolbar.js:
        (WebInspector.Toolbar):
        (WebInspector.Toolbar.prototype.setCompactMode):
        (WebInspector.Toolbar.prototype._toolbarDragStart):
        (WebInspector.Toolbar.prototype._toolbarDrag):
        * inspector/front-end/WebKit.qrc:
        * inspector/front-end/externs.js:
        (WebInspector.toggleSearchingForNode):
        * inspector/front-end/inspector.css:
        (body.undocked.platform-mac-snowleopard #toolbar):
        (body.undocked.platform-mac-snowleopard #toolbar-dropdown):
        * inspector/front-end/inspector.html:
        * inspector/front-end/inspector.js:
        (WebInspector._createGlobalStatusBarItems):
        (windowLoaded):
        (WebInspector.setDockingUnavailable):
        * inspector/front-end/inspectorCommon.css:
        (body.dock-to-right:not(.undocked)):
        (body.dock-to-right.inactive:not(.undocked)):

2012-10-03  Vsevolod Vlasov  <vsevik@chromium.org>

        Web Inspector: UISourceCode commitWorkingCopy should not fail when original script had syntax error.
        https://bugs.webkit.org/show_bug.cgi?id=97272

        Reviewed by Pavel Feldman.

        This patch is based on patch by John J. Barton.

        * inspector/front-end/JavaScriptSource.js:
        (WebInspector.JavaScriptSource.prototype.workingCopyCommitted): added rawLocation null check.

2012-10-03  Alexander Pavlov  <apavlov@chromium.org>

        Web Inspector: After "Edit as HTML", any click outside box should stop editing
        https://bugs.webkit.org/show_bug.cgi?id=98258

        Reviewed by Vsevolod Vlasov.

        Make the DOM tree OL span the entire height of its container in the Elements panel to catch mouse events.

        * inspector/front-end/elementsPanel.css:
        (#elements-content > ol):

2012-10-03  Dongwoo Joshua Im  <dw.im@samsung.com>

        [EFL] Skeleton code of File system API.
        https://bugs.webkit.org/show_bug.cgi?id=91187

        Reviewed by Gyuyoung Kim.

        Add skeleton code of File System API on EFL port.
        Implementation patches will be created later.

        No new tests because this is just skeleton code.

        * CMakeLists.txt: Add new files which created by other patches in Modules/filesystem/ directory.
        * PlatformEfl.cmake: Add AsyncFileSystemEfl.cpp.
        * platform/AsyncFileSystem.cpp:
        (WebCore):
        * platform/efl/AsyncFileSystemEfl.cpp: Added.
        * platform/efl/AsyncFileSystemEfl.h: Added.

2012-10-03  Andreas Kling  <kling@webkit.org>

        Shrink ElementRareData by moving bool flags to NodeRareData.
        <http://webkit.org/b/98225>

        Reviewed by Antti Koivisto.

        Move all bool flags from ElementRareData to the bitfield in its base class NodeRareData.
        This shrinks ElementRareData by 8 bytes (on 64-bit) and saves a whopping 58kB on Membuster3.
        Also removed some double raredata hash lookups.

        * dom/Element.cpp:
        (WebCore::Element::detach):
        (WebCore::Element::recalcStyle):
        (WebCore::Element::ensureShadow):
        (WebCore::Element::setStyleAffectedByEmpty):
        (WebCore::Element::styleAffectedByEmpty):
        (WebCore::Element::setIsInCanvasSubtree):
        (WebCore::Element::isInCanvasSubtree):
        (WebCore::Element::containsFullScreenElement):
        (WebCore::Element::setContainsFullScreenElement):
        * dom/ElementRareData.h:
        (ElementRareData):
        (WebCore::ElementRareData::ElementRareData):
        * dom/NodeRareData.h:
        (WebCore::NodeRareData::styleAffectedByEmpty):
        (WebCore::NodeRareData::setStyleAffectedByEmpty):
        (WebCore::NodeRareData::isInCanvasSubtree):
        (WebCore::NodeRareData::setIsInCanvasSubtree):
        (NodeRareData):
        (WebCore::NodeRareData::containsFullScreenElement):
        (WebCore::NodeRareData::setContainsFullScreenElement):

2012-10-03  Jussi Kukkonen  <jussi.kukkonen@intel.com>

        getComputedStyle perspective-origin is based on the wrong bounding box
        https://bugs.webkit.org/show_bug.cgi?id=98027

        Reviewed by Simon Fraser.

        perspective-origin for ComputedStyleDeclaration is currently calculated using the
        wrong bounding box (sizingBox() which ends up as the contentbox).

        Start using borderbox for ComputedStyleDeclaration perspective-origin, similar to
        what transform-origin already does.

        Test: fast/css/getComputedStyle/getComputedStyle-origin-percentage.html

        * css/CSSComputedStyleDeclaration.cpp:
        (WebCore::CSSComputedStyleDeclaration::getPropertyCSSValue):

2012-10-03  Patrick Gansterer  <paroga@webkit.org>

        Build fix for WinCE after r130160.

        * platform/graphics/FontFastPath.cpp:
        (WebCore::Font::glyphDataAndPageForCharacter):

2012-10-03  Tommy Widenflycht  <tommyw@google.com>

        MediaStream API: RTCPeerConnection should send down its handler via the FrameLoaderClient directly after creation.
        https://bugs.webkit.org/show_bug.cgi?id=98149

        Reviewed by Adam Barth.

        The chromium implementation needs to know which Frame created a PeerConnection so
        that the right housekeeping can take place correctly.

        Not testable in DRT, but have verified the change manually and with our pyautotests.

        * Modules/mediastream/RTCPeerConnection.cpp:
        (WebCore::RTCPeerConnection::RTCPeerConnection):
        * loader/FrameLoaderClient.h:
        (WebCore):
        (FrameLoaderClient):
        (WebCore::FrameLoaderClient::dispatchWillStartUsingPeerConnectionHandler):
        * platform/mediastream/chromium/RTCPeerConnectionHandlerChromium.cpp:
        (WebCore::RTCPeerConnectionHandlerChromium::toWebRTCPeerConnectionHandler):
        (WebCore):
        (WebCore::RTCPeerConnectionHandlerChromium::RTCPeerConnectionHandlerChromium):
        (WebCore::RTCPeerConnectionHandlerChromium::initialize):
        * platform/mediastream/chromium/RTCPeerConnectionHandlerChromium.h:
        (RTCPeerConnectionHandlerChromium):

2012-10-03  Eugene Klyuchnikov  <eustas.bug@gmail.com>

        Web Inspector: Profiles: taking heap snapshot causes error message in console.
        https://bugs.webkit.org/show_bug.cgi?id=97890

        Reviewed by Yury Semikhatsky.

        Actual problem is that proxy loader is closed twice.

        "_snapshotReceived" should never try to close receiver,
        because it is a callback fired by close.

        Also minor glitches fixed:
         - taking snapshot shows "Loading..." status first,
        and then "Saving xxx%";
         - after all chunks are sent "Parsing" status is set and
        then is replaced with "Saving 100%";
         - removed dead code in proxy;
         - proxy was ignoring callback parameter;
         - "Loading %d\%" is not localized.

        * English.lproj/localizedStrings.js: Added missing "Loading %d%" string.
        * inspector/front-end/HeapSnapshotProxy.js: Removed dead code.
        (WebInspector.HeapSnapshotLoaderProxy):
        (WebInspector.HeapSnapshotLoaderProxy.prototype.write): Make this method
        interface-conformant.
        * inspector/front-end/HeapSnapshotView.js:
        (WebInspector.HeapProfileHeader): Fixed update-status and
        finish-transfer logic.

2012-10-03  Jochen Eisinger  <jochen@chromium.org>

        Make sure that user gestures can't be consumed twice
        https://bugs.webkit.org/show_bug.cgi?id=97483

        Reviewed by Adam Barth.

        Instead of a simple counter, use a ref counted token to track how many
        user gestures happened and where consumed. When creating a timer that
        is supposed to forward the user gesture, take a reference to this token
        and reinstantiate the UserGestureIndicator with that token when the
        timer is triggered.

        Tests: platform/chromium/fast/events/popup-forwarded-gesture-blocked.html
               platform/chromium/fast/events/popup-forwarded-gesture.html

        * dom/UserGestureIndicator.cpp:
        (WebCore):
        (WebCore::UserGestureIndicator::UserGestureIndicator):
        (WebCore::UserGestureIndicator::~UserGestureIndicator):
        (WebCore::UserGestureIndicator::processingUserGesture):
        (WebCore::UserGestureIndicator::consumeUserGesture):
        (WebCore::UserGestureIndicator::currentToken):
        * dom/UserGestureIndicator.h:
        (Token):
        (WebCore::UserGestureIndicator::Token::~Token):
        (UserGestureIndicator):
        * page/DOMTimer.cpp:
        (WebCore::DOMTimer::DOMTimer):
        (WebCore::DOMTimer::fired):
        * page/DOMTimer.h:
        (DOMTimer):

2012-10-03  Dominic Mazzoni  <dmazzoni@google.com>

        AX: Heap-use-after-free when deleting a ContainerNode with an AX object
        https://bugs.webkit.org/show_bug.cgi?id=98073

        Reviewed by Hajime Morita.

        Calls axObjectCache()->remove(this) in ~ContainerNode so that the AX tree
        doesn't try to access the container node while walking up the parent chain
        from one of the container node's children.

        Test: accessibility/container-node-delete-causes-crash.html

        * dom/ContainerNode.cpp:
        (WebCore::ContainerNode::~ContainerNode):
        * dom/Node.cpp:
        (WebCore::Node::~Node):
        * dom/Node.h:
        (WebCore::Node::document):
        (WebCore::Node::documentInternal):

2012-10-03  Vsevolod Vlasov  <vsevik@chromium.org>

        Web Inspector: SourceURL should be taken from debugger agent when possible.
        https://bugs.webkit.org/show_bug.cgi?id=98239

        Reviewed by Yury Semikhatsky.

        Removed a check that sourceURL coming from js engine is the same as the one parsed by debugger agent.
        Alwys use the one from debugger agent now.

        * inspector/InspectorDebuggerAgent.cpp:
        (WebCore::InspectorDebuggerAgent::didParseSource):

2012-10-03  Ilya Tikhonovsky  <loislo@chromium.org>

        Unreviewed. Touch FrameView.cpp file for fixing mac bot compilation.

        * page/FrameView.cpp:
        (WebCore):

2012-10-02  Ilya Tikhonovsky  <loislo@chromium.org>

        Web Inspector: "Load profile..." context menu item has to be shown only for left column with the list of profiles.
        https://bugs.webkit.org/show_bug.cgi?id=98163

        Reviewed by Yury Semikhatsky.

        The text was changed to "Load Heap Snapshot..."
        Also I changed "Save profile..." to "Save Heap Snapshot..." because other profiles don't support Save/Load operations yet.
        The Load context menu item will appear only when the user clicked in sidebar the tree empty space or a profile.

        * English.lproj/localizedStrings.js:
        * inspector/front-end/ProfilesPanel.js:
        (WebInspector.ProfilesPanel.prototype._handleContextMenuEvent):
        (WebInspector.ProfileSidebarTreeElement.prototype.handleContextMenuEvent):

2012-10-03  Harald Alvestrand  <hta@google.com>

        Add data passing to the GetStats interface of RTCPeerConnection
        https://bugs.webkit.org/show_bug.cgi?id=98003

        Reviewed by Adam Barth.

        Added an RTCStatsResponseBase interface to platform, and let the
        RTCStatsRequestImpl class produce an implementation of it that's returned
        to WebCore.

        Tested by extension of the RTCPeerConnection-stats.html test.

        * Modules/mediastream/RTCStatsElement.cpp:
        (WebCore::RTCStatsElement::addStatistic):
        (WebCore):
        * Modules/mediastream/RTCStatsElement.h:
        (RTCStatsElement):
        * Modules/mediastream/RTCStatsReport.cpp:
        (WebCore):
        (WebCore::RTCStatsReport::addElement):
        (WebCore::RTCStatsReport::addStatistic):
        * Modules/mediastream/RTCStatsReport.h:
        (RTCStatsReport):
        * Modules/mediastream/RTCStatsRequestImpl.cpp:
        (WebCore::RTCStatsRequestImpl::createResponse):
        (WebCore):
        (WebCore::RTCStatsRequestImpl::requestSucceeded):
        * Modules/mediastream/RTCStatsRequestImpl.h:
        (RTCStatsRequestImpl):
        * Modules/mediastream/RTCStatsResponse.cpp:
        (WebCore::RTCStatsResponse::create):
        (WebCore::RTCStatsResponse::addReport):
        (WebCore):
        (WebCore::RTCStatsResponse::addElement):
        (WebCore::RTCStatsResponse::addStatistic):
        * Modules/mediastream/RTCStatsResponse.h:
        (RTCStatsResponse):
        * WebCore.gypi:
        * platform/chromium/support/WebRTCStatsRequest.cpp:
        (WebKit::WebRTCStatsRequest::response):
        (WebKit):
        (WebKit::WebRTCStatsRequest::requestSucceeded):
        * platform/chromium/support/WebRTCStatsResponse.cpp: Added.
        (WebKit):
        (WebKit::WebRTCStatsResponse::WebRTCStatsResponse):
        (WebKit::WebRTCStatsResponse::assign):
        (WebKit::WebRTCStatsResponse::reset):
        (WebKit::WebRTCStatsResponse::operator WTF::PassRefPtr<WebCore::RTCStatsResponseBase>):
        (WebKit::WebRTCStatsResponse::addReport):
        (WebKit::WebRTCStatsResponse::addElement):
        (WebKit::WebRTCStatsResponse::addStatistic):
        * platform/mediastream/RTCStatsRequest.h:
        (WebCore):
        (RTCStatsRequest):
        * platform/mediastream/RTCStatsResponseBase.h: Added.
        (WebCore):
        (RTCStatsResponseBase):
        (WebCore::RTCStatsResponseBase::~RTCStatsResponseBase):

2012-10-02  Carlos Garcia Campos  <cgarcia@igalia.com>

        [GTK] Add API to get the web view that initiated a custom URI request to WebKit2 GTK+
        https://bugs.webkit.org/show_bug.cgi?id=97895

        Reviewed by Martin Robinson.

        * platform/network/NetworkingContext.h:
        (NetworkingContext): Add initiatingPageID().
        * platform/network/ResourceHandle.h:
        (ResourceHandle): Add static method
        getSoupRequestInitiaingPageID().
        * platform/network/ResourceHandleInternal.h:
        (ResourceHandleInternal): Add initiatingPageID().
        * platform/network/soup/ResourceHandleSoup.cpp:
        (WebCore::ResourceHandleInternal::initiatingPageID): Get the
        initiating page ID of the resource handle networking context.
        (WebCore::setSoupRequestInitiaingPageID): Helper function to
        attach a page ID to a SoupRequest.
        (WebCore::startHTTPRequest): Call setSoupRequestInitiaingPageID()
        to attch the initiating page ID to the SoupRequest.
        (WebCore::startNonHTTPRequest): Ditto.
        (WebCore::ResourceHandle::getSoupRequestInitiaingPageID): Static
        method to get the page ID attached to a SoupRequest.

2012-10-03  Kent Tamura  <tkent@chromium.org>

        Introduce DateComponents::minimumYear and maximumYear
        https://bugs.webkit.org/show_bug.cgi?id=98230

        Reviewed by Kentaro Hara.

        Share same difinitions in DateComponents.cpp and DateTimeFieldElements.cpp.

        No new tests. This doesn't change any bahevior.

        * platform/DateComponents.h:
        (WebCore::DateComponents::minimumYear): Moved from DateComponents.cpp.
        (WebCore::DateComponents::maximumYear): ditto.
        * platform/DateComponents.cpp:
        (WebCore): Move out static minimumYear and maximumYear.
        (WebCore::DateComponents::parseYear): Use DateCompnents::minimumYear and/or maximumYear.
        (WebCore::withinHTMLDateLimits): ditto.
        (WebCore::DateComponents::parseWeek): ditto.
        (WebCore::DateComponents::setMonthsSinceEpoch): ditto.
        (WebCore::DateComponents::setMillisecondsSinceEpochForWeek): ditto.

        * html/shadow/DateTimeFieldElements.cpp:
        (WebCore): Remove minimumYear and maximumYear.
        (WebCore::DateTimeYearFieldElement::DateTimeYearFieldElement):
        Use DateComponents::minimumYear and maximumYear.


2012-10-02  Arko Saha  <arko@motorola.com>

        Microdata: itemprop names must not override builtin properties.
        https://bugs.webkit.org/show_bug.cgi?id=98025

        Reviewed by Kentaro Hara.

        We should look in the prototype for functions before assuming it as
        an item's name. Return false if the prototype of the object has a
        property (function) with propertyName.
        Named properties Spec: http://dev.w3.org/2006/webapi/WebIDL/#idl-named-properties
        Named property visibility algorithm:
        http://dev.w3.org/2006/webapi/WebIDL/#indexed-and-named-properties
        ...
        7. If the result of calling the [[HasProperty]] internal method on
        prototype with property name P is true, then return false.
        ...
        Also [OverrideBuiltins] is not declared for any of the properties,
        hence no overriding is allowed in this case.

        Test: fast/dom/MicroData/itemprop-names-override-builtin-properties.html

        * bindings/scripts/CodeGeneratorJS.pm:
        (GenerateGetOwnPropertySlotBody):
        (GenerateGetOwnPropertyDescriptorBody):

2012-10-02  Keishi Hattori  <keishi@webkit.org>

        REGRESSION (r129738): Suggestion picker label is placed in the wrong location
        https://bugs.webkit.org/show_bug.cgi?id=98094

        Reviewed by Kent Tamura.

        We needed to reverse padding-left/right when rtl.

        No new tests. Covered by date-suggestion-picker-appearance.html.

        * Resources/pagepopups/suggestionPicker.css:
        (.suggestion-list-entry .label):
        (.rtl .suggestion-list-entry .label):

2012-10-02  Yury Semikhatsky  <yurys@chromium.org>

        Provide memory instrumentation for HashCountedSet
        https://bugs.webkit.org/show_bug.cgi?id=98138

        Reviewed by Pavel Feldman.

        Replaced addHashCountedSet calls with addMember that now automatically
        detects HashCountedSet and calls appropriate routine.

        * css/CSSImageGeneratorValue.cpp:
        (WebCore::CSSImageGeneratorValue::reportBaseClassMemoryUsage):
        * loader/cache/CachedResource.cpp:

2012-10-02  Nandor Huszka  <hnandor@inf.u-szeged.hu>

        Buildfix after r130235.

        Reviewed by Csaba Osztrogonác.

        systemAllowsMultisamplingOnATICards was deleted from GraphicsContext3D,
        but function body remained in GraphicsContext3DOpenGLES. Delete method body.

        * platform/graphics/opengl/GraphicsContext3DOpenGLES.cpp:

2012-10-02  Kent Tamura  <tkent@chromium.org>

        Fix assertion failures on Chromium Debug bots for datetime/datetime-local input types.

        * html/shadow/DateTimeFieldElements.cpp:
        If a placeholder stirng is empty, use a sequence of "-".
        (WebCore::DateTimeDayFieldElement::create):
        (WebCore::DateTimeMonthFieldElement::create):
        (WebCore::DateTimeYearFieldElement::create):

2012-10-02  MORITA Hajime  <morrita@google.com>

        https://bugs.webkit.org/show_bug.cgi?id=98134
        [Refactoring] StyleResolver::matchScopedAuthorRules() could be simpler.

        Reviewed by Dimitri Glazkov.

        matchScopedAuthorRules() did have some optimization which only
        makes sense for heavily nested shadow tree. However, we don't see
        such type of usage of Shadow DOM and this looks premature
        optimization. This change unified its triple for loop into one,
        which makes the code much simpler.

        No new tests. Covered by existing tests.

        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::matchScopedAuthorRules):

2012-10-02  Kent Tamura  <tkent@chromium.org>

        Introduce Localizer::dateTimeFormatWithSecond and dateTimeFormatWithoutSecond
        https://bugs.webkit.org/show_bug.cgi?id=98229

        Reviewed by Kentaro Hara.

        Unify identical code in DateTimeInputType and DateTimeLocalInputType as
        Localizer member functions.
        They still have some common code. We'll address it later.

        No new tests. This doesn't change any behavior.

        * platform/text/Localizer.h:
        (Localizer): Add dateTimeFormatWithSecond and dateTimeFormatWithoutSecond.
        * platform/text/Localizer.cpp:
        (WebCore::Localizer::dateTimeFormatWithSecond):
        Implemented. Just concatenating dateFormat, a space, and timeFormat.
        (WebCore::Localizer::dateTimeFormatWithoutSecond):
        Implemented. Just concatenating dateFormat, a space, and shortTimeFormat.

        * html/DateTimeInputType.cpp:
        (WebCore::DateTimeInputType::setupLayoutParameters):
        Use dateTimeFormatWithSecond and dateTimeFormatWithoutSecond.
        * html/DateTimeLocalInputType.cpp:
        (WebCore::DateTimeLocalInputType::setupLayoutParameters): ditto.

2012-10-03  Kent Tamura  <tkent@chromium.org>

        Refactoring: DateTimeEditBuilder had better hold LayoutParameters
        https://bugs.webkit.org/show_bug.cgi?id=98228

        Reviewed by Kentaro Hara.

        Stop copying multiple members of LayoutParameters in DateTimeEditBuilder
        constructor. This change improves code size and runtime cost.

        No new tests. This doesn't change user-visible behavior.

        * html/shadow/DateTimeEditElement.cpp:
        (DateTimeEditBuilder): Add a comment about lifetime of objects.
        (WebCore::DateTimeEditBuilder::stepRange):
        Added. A helper to access m_parameters.stepRange.
        (WebCore::DateTimeEditBuilder::DateTimeEditBuilder):
        Remove m_stepRange, m_localizer, m_placeholderFor* members.
        Add m_parameters.
        (WebCore::DateTimeEditBuilder::needMillisecondField):
        Use stepRange() instead of m_stepRange.
        (WebCore::DateTimeEditBuilder::visitField):
        Use m_parameters.placeholderFor*.
        (WebCore::DateTimeEditBuilder::shouldMillisecondFieldReadOnly):
        Use stepRange() instead of m_stepRange.
        (WebCore::DateTimeEditBuilder::shouldMinuteFieldReadOnly): ditto.
        (WebCore::DateTimeEditBuilder::shouldSecondFieldReadOnly): ditto.

2012-10-02  Kent Tamura  <tkent@chromium.org>

        Implement LocaleICU::dateFormat
        https://bugs.webkit.org/show_bug.cgi?id=98118

        Reviewed by Hajime Morita.

        http://trac.webkit.org/changeset/130127 introduced
        Localizer::dateFormat, and this is its implementation for LocaleICU
        classs. The code is going to be used when
        ENABLE_INPUT_MULTIPLE_FIELDS_UI is enabled.

        No new tests. The function is not used yet.

        * platform/text/LocaleICU.cpp:
        (WebCore::LocaleICU::dateFormat):
        Implemented. Note that m_shortDateFormat is a UDateFormat object, which
        knows various format information.
        * platform/text/LocaleICU.h:
        (LocaleICU): Add m_dateFormat to cache the format string.

2012-10-02  Kent Tamura  <tkent@chromium.org>

        [Mac][Chromium-Mac] Implement LocaleMac::dateFormat
        https://bugs.webkit.org/show_bug.cgi?id=98116

        Reviewed by Hajime Morita.

        http://trac.webkit.org/changeset/130127 introduced
        Localizer::dateFormat, and this is its implementation for LocaleICU
        classs. The code is going to be used when
        ENABLE_INPUT_MULTIPLE_FIELDS_UI is enabled.

        No new tests. The function is not used yet.

        * platform/text/mac/LocaleMac.h:
        (LocaleMac): Declare m_dateFormat.
        * platform/text/mac/LocaleMac.mm:
        (WebCore::LocaleMac::dateFormat): Implemented.

2012-10-02  Kent Tamura  <tkent@chromium.org>

        [Chromium-Win] Implement LocaleWin::dateFormat
        https://bugs.webkit.org/show_bug.cgi?id=98117

        Reviewed by Kentaro Hara.

        http://trac.webkit.org/changeset/130127 introduced
        Localizer::dateFormat, and this is its implementation for LocaleICU
        classs. The code is going to be used when
        ENABLE_INPUT_MULTIPLE_FIELDS_UI is enabled.

        Tests: Added a new test to WebKit/chromium/tests/LocaleWinTest.cpp.

        * platform/text/LocaleWin.cpp:
        (WebCore::parseDateFormat):
        Fix a continuous apostrophes parsing bug; "abc''''def" produced "abc'''def"
        (WebCore::appendAsLDMLLiteral):
        A helper function to make a literal string for LDML.
        (WebCore::convertWindowsDateFormatToLDML):
        Creates an LDML format from a parsed date format tokens.
        (WebCore::LocaleWin::dateFormat):
        Implemented. This uses convertWindowsDateFormatToLDML.
        (WebCore::LocaleWin::dateFormat):
        Added for testing. The source windows format is specified as a function
        argument.
        * platform/text/LocaleWin.h:
        (LocaleWin): Declare m_dateFormat and dateFormat().

2012-10-02  Ian Vollick  <vollick@chromium.org>

        [chromium] Fix spelling of isNVIDIA override in Extensions3DChromium
        https://bugs.webkit.org/show_bug.cgi?id=98219

        Reviewed by Dean Jackson.

        The override in Extensions3dChromium should have been spelled isNVIDIA, not isNVidia.

        No new tests. No change in functionality.

        * platform/graphics/chromium/Extensions3DChromium.h:
        (WebCore::Extensions3DChromium::isNVIDIA):

2012-10-02  Anders Carlsson  <andersca@apple.com>

        Try to fix the Snow Leopard build.

        * platform/graphics/opengl/Extensions3DOpenGLCommon.cpp:

2012-10-02  Joshua Bell  <jsbell@chromium.org>

        Add htons/htonl definitions and implementations
        https://bugs.webkit.org/show_bug.cgi?id=98054

        Reviewed by Darin Adler.

        Update users of htons and friends to use new wtf/ByteOrder.h header.

        No new tests - just refactoring.

        * platform/graphics/WOFFFileFormat.cpp:
        * platform/graphics/chromium/VDMXParser.cpp:

== Rolled over to ChangeLog-2012-10-02 ==
