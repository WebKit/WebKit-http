2012-05-22  Jer Noble  <jer.noble@apple.com>

        REGRESSION (r98359): Video does not render on http://panic.com/dietcoda/
        https://bugs.webkit.org/show_bug.cgi?id=87171

        Reviewed by Maciej Stachowiak.

        No new tests; behavior is very timing specific and only occurs on a subset of all platforms.

        Instead of calling prepareForRendering() from metadataLoaded(), which may fail and cause subsequent
        calls to prepareForRendering() to short circuit, call createVideoLayer() directly, which achieves
        the original goals of the fix for http://webkit.org/b/70448, but without breaking subsequent calls
        to prepareForRendering() if called at the wrong time.

        * platform/graphics/avfoundation/MediaPlayerPrivateAVFoundation.cpp:
        (WebCore::MediaPlayerPrivateAVFoundation::metadataLoaded):

2012-05-22  Tim Horton  <timothy_horton@apple.com>

        Add a quirk for applications that depend on the relative ordering of progressCompleted/didFinishLoad
        https://bugs.webkit.org/show_bug.cgi?id=87178
        <rdar://problem/11468434>

        Reviewed by Maciej Stachowiak.

        Some applications depend on the relative ordering of progressCompleted/didFinishLoad, which was changed
        to be more correct in http://trac.webkit.org/changeset/94105. For applications built before 94105, we can
        provide the old behavior. For the time being, this will only apply to Mail.app.

        No new tests, will not affect behavior for any application except Mail.

        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::checkLoadCompleteForThisFrame):
        * page/Settings.cpp:
        (WebCore::Settings::Settings):
        * page/Settings.h:
        (WebCore::Settings::setNeedsDidFinishLoadOrderQuirk):
        (WebCore::Settings::needsDidFinishLoadOrderQuirk):

2012-05-22  Alexis Menard  <alexis.menard@openbossa.org>

        Move some CSS regions properties to CSSParser::isValidKeywordPropertyAndValue.
        https://bugs.webkit.org/show_bug.cgi?id=87169

        Reviewed by Tony Chang.

        Move some CSS regions properties to the fast path implemented by
        CSSParser::isValidKeywordPropertyAndValue.

        No new tests : Existing tests should cover.

        * css/CSSParser.cpp:
        (WebCore::isValidKeywordPropertyAndValue):
        (WebCore::isKeywordPropertyID):
        (WebCore::CSSParser::parseValue):

2012-05-22  Emil A Eklund  <eae@chromium.org>

        Represents margins as box and simplify writing mode logic
        https://bugs.webkit.org/show_bug.cgi?id=86952

        Reviewed by Eric Seidel.
        
        Add a new class, FractionalLayoutBox, that represents the four sides of a
        box and change RenderBox to use it to represent margins.

        The new box class is intended to be used to represent things like
        margins, paddings and borders where the current rect class isn't a good
        fit. It also encapsulated a lot of the horizontal/vertical writing mode
        and bidi logic allowing it to be reused.

        No new tests, no change in functionality.

        * CMakeLists.txt:
        * GNUmakefile.list.am:
        * Target.pri:
        * WebCore.gypi:
        * WebCore.vcproj/WebCore.vcproj:
        * WebCore.xcodeproj/project.pbxproj:
        * platform/graphics/FractionalLayoutBoxExtent.cpp: Added.
        * platform/graphics/FractionalLayoutBoxExtent.h: Added.
        * rendering/LayoutTypes.h:
        * rendering/RenderBlock.cpp:
        * rendering/RenderBox.cpp:
        * rendering/RenderBox.h:
        * rendering/RenderScrollbarPart.cpp:
        * rendering/RenderScrollbarPart.h:

2012-05-22  Kentaro Hara  <haraken@chromium.org>

        [V8] Replace 'throwTypeError(); return Undefined();' with 'return throwTypeError();'
        https://bugs.webkit.org/show_bug.cgi?id=87106

        Reviewed by Adam Barth.

        This patch replaces

            throwTypeError();
            return v8::Undefined();

        with

            return throwTypeError();

        No tests. No change in behavior.

        * bindings/scripts/CodeGeneratorV8.pm:
        (GenerateOverloadedFunctionCallback):
        (GenerateParametersCheck):
        * bindings/scripts/test/V8/V8TestObj.cpp:
        (WebCore::TestObjV8Internal::overloadedMethodCallback):
        (WebCore::TestObjV8Internal::overloadedMethod1Callback):

2012-05-22  Dan Bernstein  <mitz@apple.com>

        REGRESSION (r105513): CSS max-width is not applied to SVG element
        https://bugs.webkit.org/show_bug.cgi?id=87050

        Reviewed by Darin Adler.

        Tests: svg/css/max-height.html
               svg/css/max-width.html

        * rendering/svg/RenderSVGRoot.cpp:
        (WebCore::RenderSVGRoot::computeReplacedLogicalWidth): Changed to also call into the base
        class implementation of this function if max-width was specified.
        (WebCore::RenderSVGRoot::computeReplacedLogicalHeight): Changed to call into the bas class
        implementation of this function if either height or max-height were specified.

2012-05-22  Kentaro Hara  <haraken@chromium.org>

        [V8] Pass Isolate to throwTypeError()
        https://bugs.webkit.org/show_bug.cgi?id=87111

        Reviewed by Adam Barth.

        The objective is to pass Isolate around in V8 bindings.
        This patch passes Isolate to throwTypeError() in custom bindings.

        No tests. No change in behavior.

        * bindings/v8/custom/V8ArrayBufferCustom.cpp:
        (WebCore::V8ArrayBuffer::constructorCallback):
        * bindings/v8/custom/V8ArrayBufferViewCustom.h:
        (WebCore::constructWebGLArrayWithArrayBufferArgument):
        (WebCore::constructWebGLArray):
        * bindings/v8/custom/V8AudioBufferSourceNodeCustom.cpp:
        (WebCore::V8AudioBufferSourceNode::bufferAccessorSetter):
        * bindings/v8/custom/V8AudioContextCustom.cpp:
        (WebCore::V8AudioContext::constructorCallback):
        * bindings/v8/custom/V8BlobCustom.cpp:
        (WebCore::V8Blob::constructorCallback):
        * bindings/v8/custom/V8ClipboardCustom.cpp:
        (WebCore::V8Clipboard::setDragImageCallback):
        * bindings/v8/custom/V8DOMFormDataCustom.cpp:
        (WebCore::V8DOMFormData::constructorCallback):
        * bindings/v8/custom/V8DataViewCustom.cpp:
        (WebCore::V8DataView::constructorCallback):
        * bindings/v8/custom/V8HTMLDocumentCustom.cpp:
        (WebCore::V8HTMLDocument::openCallback):
        * bindings/v8/custom/V8HTMLImageElementConstructor.cpp:
        (WebCore::v8HTMLImageElementConstructorCallback):
        * bindings/v8/custom/V8HTMLInputElementCustom.cpp:
        (WebCore::V8HTMLInputElement::selectionStartAccessorGetter):
        (WebCore::V8HTMLInputElement::selectionStartAccessorSetter):
        (WebCore::V8HTMLInputElement::selectionEndAccessorGetter):
        (WebCore::V8HTMLInputElement::selectionEndAccessorSetter):
        (WebCore::V8HTMLInputElement::selectionDirectionAccessorGetter):
        (WebCore::V8HTMLInputElement::selectionDirectionAccessorSetter):
        (WebCore::V8HTMLInputElement::setSelectionRangeCallback):
        * bindings/v8/custom/V8HTMLMediaElementCustom.cpp:
        (WebCore::V8HTMLMediaElement::controllerAccessorSetter):
        * bindings/v8/custom/V8InjectedScriptHostCustom.cpp:
        (WebCore::V8InjectedScriptHost::inspectedObjectCallback):
        * bindings/v8/custom/V8IntentConstructor.cpp:
        (WebCore::V8Intent::constructorCallback):
        * bindings/v8/custom/V8MessageChannelConstructor.cpp:
        (WebCore::V8MessageChannel::constructorCallback):
        * bindings/v8/custom/V8NotificationCenterCustom.cpp:
        (WebCore::V8NotificationCenter::requestPermissionCallback):
        * bindings/v8/custom/V8SQLResultSetRowListCustom.cpp:
        (WebCore::V8SQLResultSetRowList::itemCallback):
        * bindings/v8/custom/V8WebKitMutationObserverCustom.cpp:
        (WebCore::V8WebKitMutationObserver::constructorCallback):
        * bindings/v8/custom/V8WebKitPointConstructor.cpp:
        (WebCore::V8WebKitPoint::constructorCallback):
        * bindings/v8/custom/V8WebSocketCustom.cpp:
        (WebCore::V8WebSocket::constructorCallback):
        * bindings/v8/custom/V8XMLHttpRequestConstructor.cpp:
        (WebCore::V8XMLHttpRequest::constructorCallback):

2012-05-22  Kentaro Hara  <haraken@chromium.org>

        [V8] Replace 'setDOMException(); return Undefined();' with 'return setDOMException();'
        https://bugs.webkit.org/show_bug.cgi?id=87102

        Reviewed by Adam Barth.

        This patch replaces

            setDOMException();
            return v8::Undefined();

        with

            return setDOMException();

        In addition, just in case, this patch replaces

            if (...)
                setDOMException();
            return v8::Undefined();

        with

            if (...)
                return setDOMException();
            return v8::Undefined();

        because people might insert some code just above
        'return v8::Undefined()' in the future.

        No tests. No change in behavior.

        * bindings/v8/custom/V8ArrayBufferViewCustom.h:
        (WebCore::constructWebGLArrayWithArrayBufferArgument):
        (WebCore::setWebGLArrayHelper):
        * bindings/v8/custom/V8DOMWindowCustom.cpp:
        (WebCore::WindowSetTimeoutImpl):
        * bindings/v8/custom/V8DataViewCustom.cpp:
        (WebCore::V8DataView::getInt8Callback):
        (WebCore::V8DataView::getUint8Callback):
        (WebCore::V8DataView::setInt8Callback):
        (WebCore::V8DataView::setUint8Callback):
        * bindings/v8/custom/V8DirectoryEntrySyncCustom.cpp:
        (WebCore::V8DirectoryEntrySync::getDirectoryCallback):
        (WebCore::V8DirectoryEntrySync::getFileCallback):
        * bindings/v8/custom/V8HTMLOptionsCollectionCustom.cpp:
        (WebCore::V8HTMLOptionsCollection::addCallback):
        * bindings/v8/custom/V8NodeCustom.cpp:
        (WebCore::V8Node::insertBeforeCallback):
        (WebCore::V8Node::replaceChildCallback):
        (WebCore::V8Node::removeChildCallback):
        (WebCore::V8Node::appendChildCallback):
        * bindings/v8/custom/V8SVGLengthCustom.cpp:
        (WebCore::V8SVGLength::valueAccessorGetter):
        (WebCore::V8SVGLength::convertToSpecifiedUnitsCallback):
        * bindings/v8/custom/V8WebGLRenderingContextCustom.cpp:
        (WebCore::getObjectParameter):
        (WebCore::V8WebGLRenderingContext::getFramebufferAttachmentParameterCallback):
        (WebCore::V8WebGLRenderingContext::getParameterCallback):
        (WebCore::V8WebGLRenderingContext::getProgramParameterCallback):
        (WebCore::V8WebGLRenderingContext::getShaderParameterCallback):
        (WebCore::V8WebGLRenderingContext::getUniformCallback):
        (WebCore::vertexAttribAndUniformHelperf):
        (WebCore::uniformHelperi):
        (WebCore::uniformMatrixHelper):
        * bindings/v8/custom/V8WebKitMutationObserverCustom.cpp:
        (WebCore::V8WebKitMutationObserver::observeCallback):
        * bindings/v8/custom/V8XMLHttpRequestCustom.cpp:
        (WebCore::V8XMLHttpRequest::responseAccessorGetter):

2012-05-22  Martin Robinson  <mrobinson@igalia.com>

        [TextureMapper] [Cairo] Implement repaint counters
        https://bugs.webkit.org/show_bug.cgi?id=87062

        Reviewed by Gustavo Noronha Silva.

        No new tests. This just adds a debugging feature that shouldn't
        affect the normal drawing of a page.

        * platform/graphics/texmap/TextureMapperLayer.cpp:
        (WebCore::TextureMapperLayer::updateBackingStore): Now, if repaint counters are
        enabled, increment the repaint count and call drawRepaintCounter.
        (WebCore::TextureMapperLayer::drawRepaintCounter): Added.
        * platform/graphics/texmap/TextureMapperLayer.h:
        (TextureMapperLayer): Added declaration for drawRepaintCounter.

2012-05-22  Simon Fraser  <simon.fraser@apple.com>

        Use the same animation begin time while updating compositing layers
        https://bugs.webkit.org/show_bug.cgi?id=87080

        Reviewed by Dean Jackson.
        
        Tidied up some beginAnimationUpdate/endAnimationUpdate logic,
        but further cleaning is required. We currently bracket some calls
        to recaclcStyle() with begin/endAnimationUpdate, but not all.
        We don't bracket layout, or compositing updates. This patch
        adds bracketing around compositing updates, in order to be
        able to add some assertions in a later patch that rely on
        RenderLayer::currentTransform() giving consistent results,
        since currentTransform() depends on the animation begin time.
        
        Made AnimationController::beginAnimationUpdate() and
        AnimationController::endAnimationUpdate() nestable by adding
        a counter.
        
        Added a stack-based class, AnimationUpdateBlock, which
        calls begin/endAnimationUpdate.
        
        Replaced calls to begin/endAnimationUpdate in Document::updateStyleIfNeeded()
        and Document::styleResolverChanged() with AnimationUpdateBlock. Filed a bug
        to cover other calls to recalcStyle which might need this (87159).
        
        Removed a call to beginAnimationUpdate() in Document::implicitOpen(),
        which was added in r42415. I believe that r57390 makes this unnecessary,
        and was not able to reproduce the original bug after removing it. It
        was the only unpaired beginAnimationUpdate call.
        
        Made AnimationControllerPrivate::getAnimatedStyleForRenderer() not 
        use a new beginTime each time it was called, so its beginTime now
        depends on some earlier beginAnimationUpdate.
        
        Fixed CSSComputedStyleDeclaration::getPropertyCSSValue() to use
        an AnimationUpdateBlock so that calls to computed style do
        use the current time to compute an animating value (as before).

        Not testable.

        * css/CSSComputedStyleDeclaration.cpp:
        (WebCore::CSSComputedStyleDeclaration::getPropertyCSSValue):
        * dom/Document.cpp:
        (WebCore::Document::updateStyleIfNeeded):
        (WebCore::Document::implicitOpen):
        (WebCore::Document::styleResolverChanged):
        * page/animation/AnimationController.cpp:
        (WebCore::AnimationControllerPrivate::getAnimatedStyleForRenderer):
        (WebCore::AnimationController::AnimationController):
        (WebCore::AnimationController::beginAnimationUpdate):
        (WebCore::AnimationController::endAnimationUpdate):
        * page/animation/AnimationController.h:
        (AnimationController):
        (WebCore):
        (AnimationUpdateBlock):
        (WebCore::AnimationUpdateBlock::AnimationUpdateBlock):
        (WebCore::AnimationUpdateBlock::~AnimationUpdateBlock):
        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::updateCompositingLayers):

2012-05-22  Tony Chang  <tony@chromium.org>

        REGRESSION(r117613): Dromaeo/jslib-style-prototype regressed by 20%
        https://bugs.webkit.org/show_bug.cgi?id=87142

        Reviewed by Alexis Menard.

        Move CSSPropertyDisplay back into isValidKeywordPropertyAndValue.
        Pass in the parser context so we can check whether we're grid or not.

        No new tests. Covered by Dromaeo/jslib-style-prototype perf test.

        * css/CSSParser.cpp:
        (WebCore::isValidKeywordPropertyAndValue):
        (WebCore::isKeywordPropertyID):
        (WebCore::parseKeywordValue):
        (WebCore::CSSParser::parseValue):
        (WebCore::CSSParser::parseFont):

== Rolled over to ChangeLog-2012-05-22 ==
