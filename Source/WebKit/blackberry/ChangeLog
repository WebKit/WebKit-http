2012-03-06  Jonathan Dong  <jonathan.dong@torchmobile.com.cn>

        [BlackBerry] function rename issue after MediaPlayerPrivateBlackBerry.[cpp\h] upstream
        https://bugs.webkit.org/show_bug.cgi?id=80377

        Reviewed by Rob Buis.

        As some of the function names changed in class MediaPlayerPrivate
        with the upstream of MediaPlayerPrivateBlackBerry.[cpp|h], we
        should update WebKit/blackberry/Api/WebPage.cpp which uses these
        functions accordingly.
        Renamed functions in class MediaPlayerPrivate:
        windowGet() -> getWindow()
        windowPositionGet() -> getWindowPosition()
        mmrContextNameGet() -> mmrContextName()

        * Api/WebPage.cpp:
        (BlackBerry::WebKit::WebPagePrivate::enterFullscreenForNode):

2012-03-05  Eli Fidler  <efidler@rim.com>

        The minimum font size WebSetting should actually change the LOGICAL font size in WebCore.
        https://bugs.webkit.org/show_bug.cgi?id=80312
        RIM PR: 139874

        Reviewed by George Staikos.

        * Api/WebPage.cpp:
        (BlackBerry::WebKit::WebPagePrivate::didChangeSettings):

2012-03-05  Jakob Petsovits  <jpetsovits@rim.com>

        Make accelerated compositing work again with direct rendering.
        https://bugs.webkit.org/show_bug.cgi?id=80181
        RIM PR: 139110

        Reviewed by Antonio Gomes.
        Internally reviewed by Arvid Nilsson.

        The significant amount of refactoring and optimization work
        that has gone into accelerated compositing missed out on
        some of the code paths that are being used in direct rendering.

        Animations were relying on blitVisibleContents() only (which
        is a no-op in direct rendering mode). There were early returns
        which are suitable to determine whether screen contents need
        to be updated at all; however, when we're already forcing a
        re-render then those checks would cause the composition surface
        not to appear at all, or avoid drawing new animation frames.

        We went through dispatchMessage(), potentially causing
        mismatches between rendered (but not yet posted) back content
        and layers composited on top of it. As we're rendering onto
        the sole target surface (the window) directly and posting
        from the same thread, we have to wait for compositing on the
        UI thread to finish before posting the window.

        In turn, this patch combines both drawSubLayers() and
        blendCompositingSurface() calls into one method, reducing
        the number of messages to the UI thread within
        renderDirectToWindow() to one.

        blendCompositingMessage() in renderDirectToScreen() was called
        with contents coordinates rather than viewport coordinates.
        That caused some of the composited content to be cut off when
        the scroll position wasn't (0, 0).

        We called copyPreviousContentsToBackSurfaceOfWindow() twice for
        one frame, in both renderDirectToWindow() and invalidateWindow().
        Only one of those (the latter one) is necessary.

        * Api/BackingStore.cpp:
        (BlackBerry::WebKit::BackingStorePrivate::BackingStorePrivate):
        (BlackBerry::WebKit::BackingStorePrivate::renderDirectToWindow):
        (BlackBerry::WebKit::BackingStorePrivate::drawSubLayers):
        (WebKit):
        (BlackBerry::WebKit::BackingStorePrivate::drawAndBlendLayersForDirectRendering):
        * Api/BackingStore.h:
        (WebKit):
        * Api/BackingStore_p.h:
        (BackingStorePrivate):
        (BlackBerry::WebKit::BackingStorePrivate::isDirectRenderingAnimationMessageScheduled):
        (BlackBerry::WebKit::BackingStorePrivate::setDirectRenderingAnimationMessageScheduled):
        * Api/WebPage_p.h:
        (BlackBerry::WebKit::WebPagePrivate::isAcceleratedCompositingActive):
        (WebPagePrivate):
        * WebKitSupport/WebPageCompositor.cpp:
        (BlackBerry::WebKit::WebPageCompositor::WebPageCompositor):
        (BlackBerry::WebKit::WebPageCompositor::~WebPageCompositor):
        (BlackBerry::WebKit::WebPageCompositor::drawLayers):
        (BlackBerry::WebKit::WebPageCompositor::animationTimerFired):
        * WebKitSupport/WebPageCompositor.h:
        (WebPageCompositor):

2012-03-05  George Staikos  <gstaikos@rim.com>

        [BlackBerry] DOMSupport visibleSelectionForRangeInputElement incorrectly dereferences a null range.
        https://bugs.webkit.org/show_bug.cgi?id=80274

        Reviewed by Antonio Gomes.

        A null range can be returned so we should not blindly deref it.
        Reviewed Internally by Mike Fenton.

        * WebKitSupport/DOMSupport.cpp:
        (BlackBerry::WebKit::DOMSupport::visibleSelectionForRangeInputElement):

2012-03-04  Jonathan Dong  <jonathan.dong@torchmobile.com.cn>

        [BlackBerry] upstream CredentialManager and CredentialTransformData implementation
        https://bugs.webkit.org/show_bug.cgi?id=80107

        Reviewed by Antonio Gomes.

        Initial upstream of CredentialManager.[h|cpp] and
        CredentialTransformData.[h|cpp].
        No new test.

        * WebCoreSupport/CredentialManager.cpp: Added.
        (WebCore):
        (WebCore::CredentialManager::CredentialManager):
        (WebCore::CredentialManager::autofillAuthenticationChallenge):
        (WebCore::CredentialManager::autofillPasswordForms):
        (WebCore::CredentialManager::saveCredentialIfConfirmed):
        * WebCoreSupport/CredentialManager.h: Added.
        (WebKit):
        (WebCore):
        (CredentialManager):
        * WebCoreSupport/CredentialTransformData.cpp: Added.
        (WebCore::CredentialTransformData::CredentialTransformData):
        (WebCore):
        (WebCore::CredentialTransformData::url):
        (WebCore::CredentialTransformData::credential):
        (WebCore::CredentialTransformData::setCredential):
        (WebCore::CredentialTransformData::findPasswordFormFields):
        * WebCoreSupport/CredentialTransformData.h: Added.
        (WebCore):
        (CredentialTransformData):
        (WebCore::CredentialTransformData::isValid):
        (WebCore::CredentialTransformData::protectionSpace):

2012-03-04  Antonio Gomes  <agomes@rim.com>

        [BlackBerry] Fixed positioned element not correctly positioned after orientation change, when viewport metatag is used
        https://bugs.webkit.org/show_bug.cgi?id=80228
        PR #138865

        Reviewed by George Staikos.

        Viewport size changes in two main scenarios:
        - orientation changes;
        - virtual keyboard pop up/hide.

        When we are setting a new viewport size, we need to
        update the FixedReportedSize of the mainframe. This size
        is used to return innerWidth|Heigth as well as to calculate
        the fixed position elements height relative to the RenderView [1].

        [1] RenderBox::containingBlockLogicalHeightForPositioned.

        When we are rotating, we need to delay setting the new FixedReportedSize
        till we layout and are able to figure out the new contents size. At this
        time we call setFixedReportedSize, but we do not reposition the fixed elemts
        afterwards.

        Patch adds a call to FrameView::repaintFixedElementsAfterScrolling, after
        setting the new size.

        Source/WebKit/blackberry:
        * Api/WebPage.cpp:
        (BlackBerry::WebKit::WebPagePrivate::setViewportSize):

2012-03-02  Mike Fenton  <mifenton@rim.com>

        [BlackBerry] Expose WebInspector state to client and clean up WebSettings
        https://bugs.webkit.org/show_bug.cgi?id=80177

        Reviewed by Antonio Gomes.

        Expose the Web Inspector state to WebPage client's and
        re-order initialization of WebSettings to be alphabetical
        matching their definitions.

        * Api/WebPage.cpp:
        (BlackBerry::WebKit::WebPage::isWebInspectorEnabled):
        * Api/WebPage.h:
        * Api/WebSettings.cpp:
        (BlackBerry::WebKit::WebSettings::standardSettings):

2012-03-02  Arvid Nilsson  <anilsson@rim.com>

        Accelerated compositing: Checkerboard never goes away
        https://bugs.webkit.org/show_bug.cgi?id=79020
        RIM PR #134164

        Reviewed by Adam Treat.

        Checkerboard appears in accelerated compositing layers when there's no
        texture for (part of) a layer. The layer renderer queues up some render
        jobs and schedules a commit to make the WebKit thread process those
        jobs. Render jobs performed during commit cause texture upload jobs to
        be scheduled on the UI thread. Texture uploads are performed when next
        drawing the layers.

        Unfortunately, sometimes commit operation happens without a subsequent
        call draw the layers.

        In order to implement one-shot drawing sync, I added a call to
        commitRootLayerIfNeeded() in BackingStore::renderContents(), and
        I was lucky that most of the time, renderContents() is followed by
        blit(Visible)Contents() which in turn draws the layers.
        However, render is not always followed by a blit, for example when
        rendering offscreen tiles in BackingStore::renderOnIdle(), and in
        direct rendering mode.

        Fixed by making sure that every call to commitRootLayerIfNeeded() that
        returns true is followed by a call to drawLayersOnCommit(), unless a
        blit was requested already.

        Also tweak the logic for one-shot drawing sync to make the code in
        drawLayersOnCommit() reusable outside of rootLayerCommitTimerFired().

        * Api/BackingStore.cpp:
        (BlackBerry::WebKit::BackingStorePrivate::BackingStorePrivate):
        (BlackBerry::WebKit::BackingStorePrivate::renderOnTimer):
        (BlackBerry::WebKit::BackingStorePrivate::renderOnIdle):
        (BlackBerry::WebKit::BackingStorePrivate::willFireTimer):
        (BlackBerry::WebKit::BackingStorePrivate::renderDirectToWindow):
        (BlackBerry::WebKit::BackingStorePrivate::render):
        (BlackBerry::WebKit::BackingStorePrivate::blitVisibleContents):
        (BlackBerry::WebKit::BackingStorePrivate::blitContents):
        (BlackBerry::WebKit::BackingStorePrivate::renderContents):
        (WebKit):
        (BlackBerry::WebKit::BackingStorePrivate::drawLayersOnCommitIfNeeded):
        * Api/BackingStore_p.h:
        (BackingStorePrivate):
        (BlackBerry::WebKit::BackingStorePrivate::willDrawLayersOnCommit):

2012-03-02  Adam Treat  <atreat@rim.com>

        https://bugs.webkit.org/show_bug.cgi?id=80161
        PR: 141157

        BlackBerryPlatformScreen.h API has been updated.  Reflect those
        changes in our usage.

        Reviewed by Antonio Gomes.
        Internally reviewed by Jakob Petsovits.

        * Api/BackingStore.cpp:
        (BlackBerry::WebKit::BackingStorePrivate::tileWidth):
        (BlackBerry::WebKit::BackingStorePrivate::tileHeight):
        * Api/WebPage.cpp:
        (BlackBerry::WebKit::WebPagePrivate::init):
        (BlackBerry::WebKit::WebPagePrivate::transformedViewportSize):
        (BlackBerry::WebKit::WebPagePrivate::fixedLayoutSize):
        (BlackBerry::WebKit::WebPagePrivate::recomputeVirtualViewportFromViewportArguments):
        (BlackBerry::WebKit::WebPagePrivate::setDefaultLayoutSize):
        (BlackBerry::WebKit::WebPagePrivate::defaultMaxLayoutSize):
        * WebCoreSupport/FrameLoaderClientBlackBerry.cpp:
        (WebCore::FrameLoaderClientBlackBerry::restoreViewState):
        * WebKitSupport/SurfacePool.cpp:
        (BlackBerry::WebKit::createCompositingSurface):

2012-03-02  Konrad Piascik  <kpiascik@rim.com>

        [BlackBerry] Set the devicePixelRatio from the results of computeViewportAttributes
        https://bugs.webkit.org/show_bug.cgi?id=80160

        Reviewed by Antonio Gomes.

        Tested by going to layout test fast/viewport/viewport-95.html and viewport-93.html
        Previously when executing window.devicePixelRatio these two pages returned 1 now
        they report the devicePixelRatio returned by computeViewportAttributes.

        * Api/WebPage.cpp:
        (BlackBerry::WebKit::WebPagePrivate::recomputeVirtualViewportFromViewportArguments):

2012-03-02  Jacky Jiang  <zhajiang@rim.com>

        Fix a warning in InputHandler::learnText()
        https://bugs.webkit.org/show_bug.cgi?id=80049

        Reviewed by Antonio Gomes.

        Fix a warning of the comparison "textInField.length() <=
        MaxLearnTextDataSize" in InputHandler::learnText().

        Rubber-stamped internally by Mike Fenton.

        * WebKitSupport/InputHandler.cpp:
        (BlackBerry::WebKit::InputHandler::learnText):

2012-03-01  Andy Chen  <andchen@rim.com>

        [BlackBerry] Implement features for find-in-page
        https://bugs.webkit.org/show_bug.cgi?id=79820

        Reviewed by Antonio Gomes.

        - Make it be able to search text around the whole page instead of single frame.
        - Make it be able to start new search from active selection and last active match.

        No new tests as this patch doesn't change behavior.

        * Api/WebPage.cpp:
        (BlackBerry::WebKit::WebPagePrivate::frameUnloaded):
        * Api/WebPage_p.h:
        * WebCoreSupport/FrameLoaderClientBlackBerry.cpp:
        (WebCore::FrameLoaderClientBlackBerry::dispatchWillClose):
        (WebCore::FrameLoaderClientBlackBerry::detachedFromParent2):
        * WebKitSupport/DOMSupport.cpp:
        (BlackBerry::WebKit::DOMSupport::incrementFrame):
        * WebKitSupport/DOMSupport.h:
        * WebKitSupport/InPageSearchManager.cpp:
        (BlackBerry::WebKit::InPageSearchManager::findNextString):
        (BlackBerry::WebKit::InPageSearchManager::shouldSearchForText):
        (BlackBerry::WebKit::InPageSearchManager::findAndMarkText):
        (BlackBerry::WebKit::InPageSearchManager::setMarkerActive):
        (BlackBerry::WebKit::InPageSearchManager::frameUnloaded):
        * WebKitSupport/InPageSearchManager.h:
        * WebKitSupport/InputHandler.cpp:
        (BlackBerry::WebKit::InputHandler::frameUnloaded):
        * WebKitSupport/InputHandler.h:

2012-03-01  Charles Wei  <charles.wei@torchmobile.com.cn>

        [BlackBerry] Web Notification crashes the browser.
        https://bugs.webkit.org/show_bug.cgi?id=79897

        Reviewed by Antonio Gomes.

        The reason of the crash is that it still uses the iterator
        after been removed from the container, which invalidates the
        iterator. 
        We should stop processing after we have found the element
        and removed from the container through the iterator.

        This patch only fixes the crash issue, but not any notification
        functionality issue, which is tracked seperatly.

        Test case: http://sandbox.gtaero.net/chrome/notifications.php

        * WebCoreSupport/NotificationPresenterImpl.cpp:
        (WebKit::NotificationPresenterImpl::onPermission):
        (WebKit::NotificationPresenterImpl::notificationClicked):

2012-03-01  Mike Fenton  <mifenton@rim.com>

        Autocomplete attribute should apply to textarea's.
        https://bugs.webkit.org/show_bug.cgi?id=79929

        Reviewed by Antonio Gomes.

        Add local static Qualified name for autocorrect attribute.

        * WebKitSupport/DOMSupport.cpp:
        (BlackBerry::WebKit::DOMSupport::elementSupportsAutocorrect):

2012-02-29  Mike Fenton  <mifenton@rim.com>

        Autocomplete attribute should apply to textarea's.
        https://bugs.webkit.org/show_bug.cgi?id=79929

        Reviewed by Antonio Gomes.

        Allow the autocomplete attribute to bubble back to the form setting.

        Expand support to include checking autocorrect, autocomplete and
        name/id matching to text areas.

        Reviewed internally by Nima Ghanavatian and Gen Mak.

        * WebKitSupport/DOMSupport.cpp:
        (BlackBerry::WebKit::DOMSupport::elementSupportsAutocorrect):
        (BlackBerry::WebKit::DOMSupport::elementSupportsAutocomplete):
        (BlackBerry::WebKit::DOMSupport::elementAttributeState):
        * WebKitSupport/DOMSupport.h:
        * WebKitSupport/InputHandler.cpp:
        (BlackBerry::WebKit::inputStyle):

2012-02-29  Max Feil  <mfeil@rim.com>

        [BlackBerry] Add support for FLAC audio and OGG/Vorbis audio
        https://bugs.webkit.org/show_bug.cgi?id=79519

        Reviewed by Antonio Gomes.

        * Api/WebSettings.cpp:
        (BlackBerry::WebKit::mimeTypeAssociationMap):

2012-02-28  Konrad Piascik  <kpiascik@rim.com>

        [BlackBerry] Change the API to use std::string
        https://bugs.webkit.org/show_bug.cgi?id=79818

        Reviewed by Antonio Gomes.

        * Api/WebPage.cpp:
        (BlackBerry::WebKit::WebPage::dispatchInspectorMessage):
        * Api/WebPage.h:

2012-02-28  Jacky Jiang  <zhajiang@rim.com>

        [BlackBerry] x86 build fix after cleaning up WebPage.cpp
        https://bugs.webkit.org/show_bug.cgi?id=79814

        Reviewed by Antonio Gomes.

        x86 build fix, keep WebPage::destroyWebPageCompositor() method where it
        was which was outside of USE(ACCELERATED_COMPOSITING).

        * Api/WebPage.cpp:
        (BlackBerry::WebKit::WebPage::destroyWebPageCompositor):
        (WebKit):

2012-02-28  Mike Fenton  <mifenton@rim.com>

        [BlackBerry] Remove unused focusedNodeChange notifications from the Chrome client.
        https://bugs.webkit.org/show_bug.cgi?id=79794

        Reviewed by Rob Buis.

        Remove unused notification for focusedNodeChanged.

        Internally reviewed by Gen Mak.

        * Api/WebPageClient.h:
        * WebCoreSupport/ChromeClientBlackBerry.cpp:
        (WebCore::ChromeClientBlackBerry::focusedNodeChanged):

2012-02-27  Jacky Jiang  <zhajiang@rim.com>

        [BlackBerry] Upstream BlackBerry API web page related files
        https://bugs.webkit.org/show_bug.cgi?id=74380

        Reviewed by Antonio Gomes.

        Clean up WebPage.{h, cpp} and WebPage_p.h.
        - Remove WebPage::mainFrame() as it is bad to expose WebCore::Frame in
          the public API, adapt to the change by adding a new method
          WebPagePrivate::core(Const WebPage*) and expose it to
          DumpRenderTreeSupport.
        - Rename WebPage::spellCheckingEnabled to
          WebPage::setSpellCheckingEnabled.
        - Remove unused WebPage::focusNodeRect().
        - Remove extra blank lines.
        - Put WebPage methods and their associated WebPagePrivate methods
          together.

        No new tests as this patch doesn't change behavior.

        * Api/WebPage.cpp:
        (BlackBerry::WebKit::WebPage::WebPage):
        (WebKit):
        (BlackBerry::WebKit::WebPage::~WebPage):
        (BlackBerry::WebKit::WebPagePrivate::core):
        (BlackBerry::WebKit::WebPage::load):
        (BlackBerry::WebKit::WebPage::loadExtended):
        (BlackBerry::WebKit::WebPage::loadFile):
        (BlackBerry::WebKit::WebPage::download):
        (BlackBerry::WebKit::WebPage::loadString):
        (BlackBerry::WebKit::WebPage::executeJavaScript):
        (BlackBerry::WebKit::WebPage::executeJavaScriptInIsolatedWorld):
        (BlackBerry::WebKit::WebPage::stopLoading):
        (BlackBerry::WebKit::WebPage::prepareToDestroy):
        (BlackBerry::WebKit::WebPage::setScrollPosition):
        (BlackBerry::WebKit::WebPage::scrollBy):
        (BlackBerry::WebKit::WebPage::notifyInRegionScrollStatusChanged):
        (BlackBerry::WebKit::WebPage::zoomToFitScale):
        (BlackBerry::WebKit::WebPage::initialScale):
        (BlackBerry::WebKit::WebPage::maximumScale):
        (BlackBerry::WebKit::WebPage::scrollPosition):
        (BlackBerry::WebKit::WebPage::viewportSize):
        (BlackBerry::WebKit::WebPage::activeNodeContext):
        (BlackBerry::WebKit::WebPage::assignFocus):
        (BlackBerry::WebKit::WebPage::blockZoomAnimationFinished):
        (BlackBerry::WebKit::WebPage::onInputLocaleChanged):
        (BlackBerry::WebKit::WebPage::setScreenOrientation):
        (BlackBerry::WebKit::WebPage::applyPendingOrientationIfNeeded):
        (BlackBerry::WebKit::WebPage::setViewportSize):
        (BlackBerry::WebKit::WebPage::setDefaultLayoutSize):
        (BlackBerry::WebKit::WebPage::setScrollOriginPoint):
        (BlackBerry::WebKit::WebPage::textEncoding):
        (BlackBerry::WebKit::WebPage::forcedTextEncoding):
        (BlackBerry::WebKit::WebPage::setForcedTextEncoding):
        (BlackBerry::WebKit::WebPage::setSpellCheckingEnabled):
        (BlackBerry::WebKit::parentLayer):
        (BlackBerry::WebKit::WebPagePrivate::inRegionScrollableAreasForPoint):
        (BlackBerry::WebKit::WebPage::destroyWebPageCompositor):
        * Api/WebPage.h:
        (WebCore):
        (WebKit):
        * Api/WebPage_p.h:
        (WebCore):
        (WebKit):
        * WebKitSupport/DumpRenderTreeSupport.cpp:
        (DumpRenderTreeSupport::corePage):
        (DumpRenderTreeSupport::numberOfPendingGeolocationPermissionRequests):
        (DumpRenderTreeSupport::resetGeolocationMock):
        (DumpRenderTreeSupport::setMockGeolocationError):
        (DumpRenderTreeSupport::setMockGeolocationPermission):
        (DumpRenderTreeSupport::setMockGeolocationPosition):
        (DumpRenderTreeSupport::scalePageBy):
        * WebKitSupport/DumpRenderTreeSupport.h:
        (WebCore):
        (DumpRenderTreeSupport):

2012-02-27  Mike Fenton  <mifenton@rim.com>

        [BlackBerry] Selection handling should be entirely directional
        https://bugs.webkit.org/show_bug.cgi?id=79692

        Reviewed by Antonio Gomes.

        Make all VisibleSelections directional.

        * WebKitSupport/SelectionHandler.cpp:
        (BlackBerry::WebKit::SelectionHandler::updateOrHandleInputSelection):
        (BlackBerry::WebKit::SelectionHandler::setSelection):

2012-02-27  Ed Baker  <edbaker@rim.com>

        [BlackBerry] Dragging a selection handle outside of the content bounding box does not update the selection range correctly
        https://bugs.webkit.org/show_bug.cgi?id=78608

        Ensure that when selection handles leave the content bounding box that
        the handle not being dragged remains fixed. Do not apply padding to a
        direction that would cause the selection to shrink when performing the
        handle direction detection.

        Reviewed by Antonio Gomes.

        * WebKitSupport/DOMSupport.cpp:
        (BlackBerry::WebKit::DOMSupport::convertPointToFrame):
        * WebKitSupport/DOMSupport.h:
        * WebKitSupport/SelectionHandler.cpp:
        (BlackBerry::WebKit::clamp):
        (BlackBerry::WebKit::directionalVisiblePositionAtExtentOfBox):
        (BlackBerry::WebKit::SelectionHandler::extendSelectionToFieldBoundary):
        (BlackBerry::WebKit::SelectionHandler::setSelection):
        (BlackBerry::WebKit::SelectionHandler::clipPointToVisibleContainer):
        * WebKitSupport/SelectionHandler.h:

2012-02-27  Leo Yang  <leo.yang@torchmobile.com.cn>

        [BlackBerry] Upstream accelerated compositing helper class
        https://bugs.webkit.org/show_bug.cgi?id=78448

        Reviewed by Antonio Gomes.

        Initial upstream, no new tests.

        * WebKitSupport/FrameLayers.cpp: Added.
        * WebKitSupport/FrameLayers.h: Added.

2012-02-26  Hajime Morrita  <morrita@chromium.org>

        Move ChromeClient::showContextMenu() to ContextMenuClient
        https://bugs.webkit.org/show_bug.cgi?id=79427

        Reviewed by Adam Barth.

        * WebCoreSupport/ChromeClientBlackBerry.h:
        (ChromeClientBlackBerry):

2012-02-24  Mike Fenton  <mifenton@rim.com>

        [BlackBerry] Eliminate excessive BlackBerry::Platform use in InputHandler
        https://bugs.webkit.org/show_bug.cgi?id=79393

        Reviewed by Antonio Gomes.

        Cleanup usage of BlackBerry::Platform in InputHandler.

        * WebKitSupport/InputHandler.cpp:
        (BlackBerry::WebKit::convertStringToWchar):
        (BlackBerry::WebKit::convertStringToWcharVector):
        (BlackBerry::WebKit::convertSpannableStringToString):
        (BlackBerry::WebKit::InputHandler::learnText):
        (BlackBerry::WebKit::InputHandler::setElementUnfocused):
        (BlackBerry::WebKit::InputHandler::shouldAcceptInputFocus):
        (BlackBerry::WebKit::InputHandler::setElementFocused):
        (BlackBerry::WebKit::InputHandler::nodeTextChanged):
        (BlackBerry::WebKit::InputHandler::ensureFocusTextElementVisible):
        (BlackBerry::WebKit::InputHandler::frameUnloaded):
        (BlackBerry::WebKit::InputHandler::selectionChanged):
        (BlackBerry::WebKit::InputHandler::setSelection):
        (BlackBerry::WebKit::InputHandler::handleKeyboardInput):
        (BlackBerry::WebKit::InputHandler::deleteTextRelativeToCursor):
        (BlackBerry::WebKit::InputHandler::deleteText):
        (BlackBerry::WebKit::InputHandler::spannableTextInRange):
        (BlackBerry::WebKit::InputHandler::setComposingRegion):
        (BlackBerry::WebKit::InputHandler::finishComposition):
        (BlackBerry::WebKit::InputHandler::setText):
        (BlackBerry::WebKit::InputHandler::setTextAttributes):
        (BlackBerry::WebKit::InputHandler::setRelativeCursorPosition):
        (BlackBerry::WebKit::InputHandler::setSpannableTextAndRelativeCursor):
        (BlackBerry::WebKit::InputHandler::setComposingText):
        (BlackBerry::WebKit::InputHandler::commitText):

2012-02-24  Mike Fenton  <mifenton@rim.com>

        [BlackBerry] Eliminate excessive BlackBerry::Platform use in SelectionHandler.
        https://bugs.webkit.org/show_bug.cgi?id=79391

        Reviewed by Antonio Gomes.

        Clean up usage of BlackBerry::Platform in SelectionHandler and
        explicitly define what namespace to use for ambiguous objects like
        IntRect and IntPoint.

        * WebKitSupport/SelectionHandler.cpp:
        (BlackBerry::WebKit::SelectionHandler::cancelSelection):
        (BlackBerry::WebKit::SelectionHandler::getConsolidatedRegionOfTextQuadsForSelection):
        (BlackBerry::WebKit::visiblePositionForPointIgnoringClipping):
        (BlackBerry::WebKit::directionOfPointRelativeToRect):
        (BlackBerry::WebKit::SelectionHandler::shouldUpdateSelectionOrCaretForPoint):
        (BlackBerry::WebKit::SelectionHandler::setCaretPosition):
        (BlackBerry::WebKit::directionalVisiblePositionAtExtentOfBox):
        (BlackBerry::WebKit::pointIsOutsideOfBoundingBoxInDirection):
        (BlackBerry::WebKit::SelectionHandler::extendSelectionToFieldBoundary):
        (BlackBerry::WebKit::SelectionHandler::updateOrHandleInputSelection):
        (BlackBerry::WebKit::SelectionHandler::clipPointToFocusNode):
        (BlackBerry::WebKit::SelectionHandler::setSelection):
        (BlackBerry::WebKit::SelectionHandler::selectAtPoint):
        (BlackBerry::WebKit::SelectionHandler::selectObject):
        (BlackBerry::WebKit::comparePointsToReferencePoint):
        (BlackBerry::WebKit::minXMinYCorner):
        (BlackBerry::WebKit::maxXMinYCorner):
        (BlackBerry::WebKit::minXMaxYCorner):
        (BlackBerry::WebKit::maxXMaxYCorner):
        (BlackBerry::WebKit::caretLocationForRect):
        (BlackBerry::WebKit::caretComparisonPointForRect):
        (BlackBerry::WebKit::adjustCaretRects):
        (BlackBerry::WebKit::SelectionHandler::clipRegionToVisibleContainer):
        (BlackBerry::WebKit::referencePoint):
        (BlackBerry::WebKit::SelectionHandler::selectionPositionChanged):
        (BlackBerry::WebKit::SelectionHandler::caretPositionChanged):
        (BlackBerry::WebKit::SelectionHandler::selectionContains):

2012-02-24  Shinya Kawanaka  <shinyak@chromium.org>

        SpellCheckRequest needs to know the context where the spellcheck happened.
        https://bugs.webkit.org/show_bug.cgi?id=79320

        Reviewed by Hajime Morita.

        * WebCoreSupport/EditorClientBlackBerry.cpp:
        (WebCore::EditorClientBlackBerry::requestCheckingOfString):
        * WebCoreSupport/EditorClientBlackBerry.h:
        (EditorClientBlackBerry):

2012-02-24  Charles Wei  <charles.wei@torchmobile.com.cn>

        [BlackBerry] Anchor mailto: with target set won't launch Messaging application when clicked
        https://bugs.webkit.org/show_bug.cgi?id=79318

        Need to give the client a chance to decide how to handle the new window request.

        Reviewed by Rob Buis.

        * WebCoreSupport/FrameLoaderClientBlackBerry.cpp:
        (WebCore::FrameLoaderClientBlackBerry::dispatchDecidePolicyForNewWindowAction):

2012-02-23  Mike Fenton  <mifenton@rim.com>

        [BlackBerry] Selection handler has compile failure with logs enabled.
        https://bugs.webkit.org/show_bug.cgi?id=79392

        Reviewed by Antonio Gomes.

        Build Fix.  Update log to avoid usage of toString which was removed.

        * WebKitSupport/SelectionHandler.cpp:
        (BlackBerry::WebKit::SelectionHandler::selectionPositionChanged):

2012-02-19  Antonio Gomes  <agomes@rim.com>

        Fat fingers - Add a clearer way to distinguish the node we want (shadow or non-shadow)
        https://bugs.webkit.org/show_bug.cgi?id=79256
        PR #127814 / MKS_2587410

        Reviewed by Rob Buis.

        Patch adds a cleaner way for call sites of FatFingersResult to
        query for the appropriated target node: shadow or non-shadow DOM nodes.

        It also renames FatFingersResults::validNode to ::node, assuming
        that "invalid" nodes are not applicable in any context.

        * Api/WebPage.cpp:
        (BlackBerry::WebKit::WebPagePrivate::clearDocumentData):
        (BlackBerry::WebKit::WebPagePrivate::contextNode):
        (BlackBerry::WebKit::WebPagePrivate::handleMouseEvent):
        * WebKitSupport/FatFingers.h:
        (FatFingersResult):
        (BlackBerry::WebKit::FatFingersResult::node):
        (BlackBerry::WebKit::FatFingersResult::nodeAsElementIfApplicable):
        * WebKitSupport/SelectionHandler.cpp:
        (BlackBerry::WebKit::SelectionHandler::selectAtPoint):
        * WebKitSupport/TouchEventHandler.cpp:
        (BlackBerry::WebKit::TouchEventHandler::touchHoldEvent):
        (BlackBerry::WebKit::TouchEventHandler::handleTouchPoint):

2012-02-23  Jacky Jiang  <zhajiang@rim.com>

        [BlackBerry] Upstream BlackBerry API web page related files
        https://bugs.webkit.org/show_bug.cgi?id=74380

        Reviewed by Antonio Gomes.

        Initial upstream, no new tests.

        * Api/WebPage.cpp: Added.
        * Api/WebPage.h: Added.
        * Api/WebPage_p.h: Added.

2012-02-23  Leo Yang  <leo.yang@torchmobile.com.cn>

        [BlackBerry] Remove unused ChromeClientBlackBerry::platformCompositingWindow(), platformWindow() and WebPageClient::compositingWindow()
        https://bugs.webkit.org/show_bug.cgi?id=78681

        Reviewed by Antonio Gomes.

        * Api/WebPageClient.h:
        * WebCoreSupport/ChromeClientBlackBerry.cpp:
        (WebCore):
        * WebCoreSupport/ChromeClientBlackBerry.h:
        (ChromeClientBlackBerry):

2012-02-23  Leo Yang  <leo.yang@torchmobile.com.cn>

        [BlackBerry] Upstream GLES2Context.{h, cpp}
        https://bugs.webkit.org/show_bug.cgi?id=79196

        Reviewed by Rob Buis.

        Initial upstream, no new tests.

        * WebKitSupport/GLES2Context.cpp: Added.
        * WebKitSupport/GLES2Context.h: Added.

2012-02-23  Mike Fenton  <mifenton@rim.com>

        [BlackBerry] InputHandler requires cleanup of Navigation Mode handling.
        https://bugs.webkit.org/show_bug.cgi?id=79366

        Reviewed by Rob Buis.

        Cleanup InputHandler navigation based code.

        1) Remove the concept of NavigationMode and replace it
           with simple showKeyboard calls.

        2) Remove navigation move events and replace with standard
           key events.

        3) Standardize function/variable names and remove obsolete
           functions.

        * Api/WebPageClient.h:
        * WebKitSupport/InputHandler.cpp:
        (BlackBerry::WebKit::InputHandler::InputHandler):
        (BlackBerry::WebKit::InputHandler::nodeFocused):
        (BlackBerry::WebKit::InputHandler::setElementUnfocused):
        (BlackBerry::WebKit::InputHandler::setElementFocused):
        (BlackBerry::WebKit::InputHandler::ensureFocusTextElementVisible):
        (BlackBerry::WebKit::InputHandler::setDelayKeyboardVisibilityChange):
        (BlackBerry::WebKit::InputHandler::processPendingKeyboardVisibilityChange):
        (BlackBerry::WebKit::InputHandler::notifyClientOfKeyboardVisibilityChange):
        * WebKitSupport/InputHandler.h:
        (InputHandler):
        * WebKitSupport/SelectionHandler.cpp:
        (BlackBerry::WebKit::SelectionHandler::setCaretPosition):
        (BlackBerry::WebKit::SelectionHandler::updateOrHandleInputSelection):
        * WebKitSupport/TouchEventHandler.cpp:
        (BlackBerry::WebKit::TouchEventHandler::touchEventCancel):
        (BlackBerry::WebKit::TouchEventHandler::handleTouchPoint):

2012-02-21  Ryosuke Niwa  <rniwa@webkit.org>

        Remove the remaining uses of CSSStyleDeclaration in Editor
        https://bugs.webkit.org/show_bug.cgi?id=78939

        Reviewed by Enrica Casucci.

        * WebCoreSupport/EditorClientBlackBerry.cpp:
        (WebCore::EditorClientBlackBerry::shouldApplyStyle):
        * WebCoreSupport/EditorClientBlackBerry.h:
        (EditorClientBlackBerry):

2012-02-22  Mike Fenton  <mifenton@rim.com>

        [BlackBerry] InputHandler has signed vs unsigned comparison.
        https://bugs.webkit.org/show_bug.cgi?id=79261

        Fix warning by casting the unsigned int to an int.

        Reviewed by Rob Buis.

        * WebKitSupport/InputHandler.cpp:
        (BlackBerry::WebKit::InputHandler::rectForCaret):

2012-02-22  Ryosuke Niwa  <rniwa@webkit.org>

        Remove the remaining uses of CSSStyleDeclaration in Editor
        https://bugs.webkit.org/show_bug.cgi?id=78939

        Reviewed by Enrica Casucci.

        * WebCoreSupport/EditorClientBlackBerry.cpp:
        (WebCore::EditorClientBlackBerry::shouldApplyStyle):
        * WebCoreSupport/EditorClientBlackBerry.h:
        (EditorClientBlackBerry):

2012-02-18  Antonio Gomes  <agomes@rim.com>

        Fat fingers - cache the first rect-based hit test so we do not need to do it again
        https://bugs.webkit.org/show_bug.cgi?id=79115

        Reviewed by Adam Treat.

        Our FatFingers implementation runs currently in two phases:
        the first checks for the elements intrinsically clickable;
        the second checks for elements made clickable by the page
        (for example, a div with a onclick event listener attached to it).
        For each phase, we perform a rect hittest, which is not needed since
        the result of each is the same.

        Patch introduces a caching mechanism so we avoid on rect hittest:
        when the first phase runs, it caches each nodeset per document in
        a hashmap. This second phase works with the cached results.

        No behavioral change, but performance is better since we
        avoid one (possibly expensive) rect hittest.

        I measured the performance gain on https://www.kvd.se/, and we
        save up to 0.04 seconds, by caching and re-using the results.

        * WebKitSupport/FatFingers.cpp:
        (BlackBerry::WebKit::dumpHitTestResult):
        (BlackBerry::WebKit::FatFingers::findBestPoint):
        (BlackBerry::WebKit::FatFingers::findIntersectingRegions):
        (BlackBerry::WebKit::FatFingers::cachingStrategy):
        (WebKit):
        (BlackBerry::WebKit::FatFingers::getNodesFromRect):
        * WebKitSupport/FatFingers.h:

2012-02-20  Antonio Gomes  <agomes@rim.com>

        All default video/audio control elements should be rect-hit testable (Part II)
        PR #139518 / MKS_3005538

        Reviewed by George Staikos.

        Add HTMLInputElement::isMediaControlElement as a criteria
        to consider a element as clickable.

        Note that is should be only used while in the "ClickableByDefault"
        phase of FatFingers.

        * WebKitSupport/FatFingers.cpp:
        (BlackBerry::WebKit::FatFingers::isElementClickable):

2012-02-16  Antonio Gomes  <agomes@rim.com>

        [BlackBerry] Implemented a way to defer client navigation change client notifications
        https://bugs.webkit.org/show_bug.cgi?id=78848

        Reviewed by Rob Buis.

        Currently we postpone touch_down till touch_up if user touches
        the screen and an input field has the WebKit focus. This is done
        so we can scroll the page without hidding the vkb needlessly.

        However, it breaks the conversion of touch to mouse events
        if an input field has the focus in the following scenario:
        an <input type=text> is focused and an user grab and-drag
        a <input type=range> knob/slide. It does not work until the
        user unfocuses the currently focused edit field.

        Patch introduces a way to unfocus a currently focused input field,
        without requesting the client to show or hide the virtual keyboard
        right way. Instead it gets a delayed notification of the vkb mode requested
        at either touch_released/mouse_up or touch_cancel time.

        For now, due to content side issues with major web sites,
        only delay navigation mode notification changes if we are not dealing with
        input modes.

        * WebKitSupport/InputHandler.cpp:
        (BlackBerry::WebKit::InputHandler::InputHandler):
        (BlackBerry::WebKit::InputHandler::nodeFocused):
        (BlackBerry::WebKit::InputHandler::setElementFocused):
        (BlackBerry::WebKit::InputHandler::setNavigationMode):
        (WebKit):
        (BlackBerry::WebKit::InputHandler::setDelayClientNotificationOfNavigationModeChange):
        (BlackBerry::WebKit::InputHandler::processPendingClientNavigationModeChangeNotification):
        (BlackBerry::WebKit::InputHandler::notifyClientOfNavigationModeChange):
        (BlackBerry::WebKit::InputHandler::willOpenPopupForNode):
        (BlackBerry::WebKit::InputHandler::setPopupListIndexes):
        (BlackBerry::WebKit::InputHandler::spannableTextInRange):
        (BlackBerry::WebKit::InputHandler::removeComposedText):
        (BlackBerry::WebKit::InputHandler::firstSpanInString):
        (BlackBerry::WebKit::InputHandler::setText):
        (BlackBerry::WebKit::InputHandler::setRelativeCursorPosition):
        * WebKitSupport/InputHandler.h:
        (InputHandler):

2012-02-16  Antonio Gomes  <agomes@rim.com>

        Crash @WebPagePrivate::enqueueRenderingOfClippedContentOfScrollableNodeAfterInRegionScrolling MKS_2986818
        https://bugs.webkit.org/show_bug.cgi?id=78845

        Reviewed by Rob Buis.

        We were trying to operate on a cached Node when its page/frame/document
        were gone to PageCache already. To avoid such problems, lets clean up
        any document data we have cached when the Frame goes into the cache.

        * WebCoreSupport/FrameLoaderClientBlackBerry.cpp:
        (WebCore::FrameLoaderClientBlackBerry::didSaveToPageCache):
        (WebCore):
        * WebCoreSupport/FrameLoaderClientBlackBerry.h:
        (FrameLoaderClientBlackBerry):

2012-02-16  Antonio Gomes  <agomes@rim.com>

        [BlackBerry] Upstream touch handling related classes
        https://bugs.webkit.org/show_bug.cgi?id=78509

        Reviewed by Adam Treat and Rob Buis.

        FatFingers is the class responsible to the whole touch
        accuracy of the BlackBerry port. Initial upstream.

        * WebKitSupport/FatFingers.cpp: Added.
        (WebKit):
        (BlackBerry::WebKit::FatFingers::fingerRectForPoint):
        (BlackBerry::WebKit::hasMousePressListener):
        (BlackBerry::WebKit::FatFingers::isElementClickable):
        (BlackBerry::WebKit::isFieldWithText):
        (BlackBerry::WebKit::distanceBetweenPoints):
        (BlackBerry::WebKit::compareDistanceBetweenPoints):
        (BlackBerry::WebKit::isValidFrameOwner):
        (BlackBerry::WebKit::FatFingers::FatFingers):
        (BlackBerry::WebKit::FatFingers::~FatFingers):
        (BlackBerry::WebKit::FatFingers::findBestPoint):
        (BlackBerry::WebKit::FatFingers::checkFingerIntersection):
        (BlackBerry::WebKit::FatFingers::findIntersectingRegions):
        (BlackBerry::WebKit::FatFingers::checkForClickableElement):
        (BlackBerry::WebKit::FatFingers::checkForText):
        (BlackBerry::WebKit::FatFingers::getPaddings):
        (BlackBerry::WebKit::FatFingers::nodesFromRect):
        (BlackBerry::WebKit::FatFingers::getRelevantInfoFromPoint):
        (BlackBerry::WebKit::FatFingers::setSuccessfulFatFingersResult):
        * WebKitSupport/FatFingers.h: Added.
        (WebCore):
        (WebKit):
        (FatFingersResult):
        (BlackBerry::WebKit::FatFingersResult::FatFingersResult):
        (BlackBerry::WebKit::FatFingersResult::reset):
        (BlackBerry::WebKit::FatFingersResult::originPosition):
        (BlackBerry::WebKit::FatFingersResult::adjustedPosition):
        (BlackBerry::WebKit::FatFingersResult::positionWasAdjusted):
        (BlackBerry::WebKit::FatFingersResult::isTextInput):
        (BlackBerry::WebKit::FatFingersResult::isValid):
        (BlackBerry::WebKit::FatFingersResult::validNode):
        (BlackBerry::WebKit::FatFingersResult::nodeAsElementIfApplicable):
        (FatFingers):

2012-02-16  Antonio Gomes  <agomes@rim.com>

        [BlackBerry] Upstream touch handling related classes
        https://bugs.webkit.org/show_bug.cgi?id=78509

        Reviewed by Adam Treat.

        Initial upstream of the Blackberry specific single touch event
        handler class.

        * blackberry/WebKitSupport/TouchEventHandler.cpp: Added.
        (WebKit):
        (BlackBerry::WebKit::hasMouseMoveListener):
        (BlackBerry::WebKit::hasTouchListener):
        (BlackBerry::WebKit::elementExpectsMouseEvents):
        (BlackBerry::WebKit::shouldConvertTouchToMouse):
        (BlackBerry::WebKit::TouchEventHandler::TouchEventHandler):
        (BlackBerry::WebKit::TouchEventHandler::~TouchEventHandler):
        (BlackBerry::WebKit::TouchEventHandler::shouldSuppressMouseDownOnTouchDown):
        [BlackBerry] Upstream touch handling related classes
        https://bugs.webkit.org/show_bug.cgi?id=78509

        Reviewed by Rob Buis.

        InRegionScrollableArea specializes the BlackBerry specific ScrollViewBase,
        working as a read-only wrapper object for a scrollable areas in the page.
        It is used in our client side to control in-region scrolling (scrollable boxes,
        inner frames, etc).

        Initial upstream.

        * WebKitSupport/InRegionScrollableArea.cpp: Added.
        (WebKit):
        (BlackBerry::WebKit::InRegionScrollableArea::InRegionScrollableArea):
        (BlackBerry::WebKit::InRegionScrollableArea::calculateMinimumScrollPosition):
        (BlackBerry::WebKit::InRegionScrollableArea::calculateMaximumScrollPosition):
        (BlackBerry::WebKit::InRegionScrollableArea::layer):
        (BlackBerry):
        * WebKitSupport/InRegionScrollableArea.h: Added.
        (WebCore):
        (WebKit):
        (InRegionScrollableArea):

2012-02-16  Antonio Gomes  <agomes@rim.com>

        (BlackBerry::WebKit::TouchEventHandler::touchEventCancel):
        (BlackBerry::WebKit::TouchEventHandler::touchHoldEvent):
        (BlackBerry::WebKit::TouchEventHandler::handleTouchPoint):
        (BlackBerry::WebKit::TouchEventHandler::spellCheck):
        (BlackBerry::WebKit::TouchEventHandler::handleFatFingerPressed):
        (BlackBerry::WebKit::elementForTapHighlight):
        (BlackBerry::WebKit::TouchEventHandler::drawTapHighlight):
        * blackberry/WebKitSupport/TouchEventHandler.h: Added.
        (WebCore):
        (WebKit):
        (TouchEventHandler):
        (BlackBerry::WebKit::TouchEventHandler::lastFatFingersResult):
        (BlackBerry::WebKit::TouchEventHandler::resetLastFatFingersResult):

