// Automatically generated by opcode_generator.py -i bytecode/opcodes -o bytecode/OpcodeDefinitions.h -m definition. Do not edit.

namespace JSC {

#define FOR_EACH_OPCODE_ID(macro) \
    macro(op_enter, 1) \
    macro(op_create_activation, 2) \
    macro(op_init_lazy_reg, 2) \
    macro(op_create_arguments, 2) \
    macro(op_create_this, 2) \
    macro(op_convert_this, 3) \
    macro(op_new_object, 2) \
    macro(op_new_array, 4) \
    macro(op_new_array_buffer, 4) \
    macro(op_new_regexp, 3) \
    macro(op_mov, 3) \
    macro(op_not, 3) \
    macro(op_eq, 4) \
    macro(op_eq_null, 3) \
    macro(op_neq, 4) \
    macro(op_neq_null, 3) \
    macro(op_stricteq, 4) \
    macro(op_nstricteq, 4) \
    macro(op_less, 4) \
    macro(op_lesseq, 4) \
    macro(op_greater, 4) \
    macro(op_greatereq, 4) \
    macro(op_pre_inc, 2) \
    macro(op_pre_dec, 2) \
    macro(op_post_inc, 3) \
    macro(op_post_dec, 3) \
    macro(op_to_jsnumber, 3) \
    macro(op_negate, 3) \
    macro(op_add, 5) \
    macro(op_mul, 5) \
    macro(op_div, 5) \
    macro(op_mod, 4) \
    macro(op_sub, 5) \
    macro(op_lshift, 4) \
    macro(op_rshift, 4) \
    macro(op_urshift, 4) \
    macro(op_bitand, 5) \
    macro(op_bitxor, 5) \
    macro(op_bitor, 5) \
    macro(op_check_has_instance, 2) \
    macro(op_instanceof, 5) \
    macro(op_typeof, 3) \
    macro(op_is_undefined, 3) \
    macro(op_is_boolean, 3) \
    macro(op_is_number, 3) \
    macro(op_is_string, 3) \
    macro(op_is_object, 3) \
    macro(op_is_function, 3) \
    macro(op_in, 4) \
    macro(op_resolve, 4) \
    macro(op_resolve_skip, 5) \
    macro(op_resolve_global, 6) \
    macro(op_resolve_global_dynamic, 7) \
    macro(op_get_scoped_var, 5) \
    macro(op_put_scoped_var, 4) \
    macro(op_get_global_var, 4) \
    macro(op_get_global_var_watchable, 5) \
    macro(op_put_global_var, 3) \
    macro(op_put_global_var_check, 5) \
    macro(op_resolve_base, 5) \
    macro(op_ensure_property_exists, 3) \
    macro(op_resolve_with_base, 5) \
    macro(op_resolve_with_this, 5) \
    macro(op_get_by_id, 9) \
    macro(op_get_by_id_out_of_line, 9) \
    macro(op_get_by_id_self, 9) \
    macro(op_get_by_id_proto, 9) \
    macro(op_get_by_id_chain, 9) \
    macro(op_get_by_id_getter_self, 9) \
    macro(op_get_by_id_getter_proto, 9) \
    macro(op_get_by_id_getter_chain, 9) \
    macro(op_get_by_id_custom_self, 9) \
    macro(op_get_by_id_custom_proto, 9) \
    macro(op_get_by_id_custom_chain, 9) \
    macro(op_get_by_id_generic, 9) \
    macro(op_get_array_length, 9) \
    macro(op_get_string_length, 9) \
    macro(op_get_arguments_length, 4) \
    macro(op_put_by_id, 9) \
    macro(op_put_by_id_out_of_line, 9) \
    macro(op_put_by_id_transition, 9) \
    macro(op_put_by_id_transition_direct, 9) \
    macro(op_put_by_id_transition_direct_out_of_line, 9) \
    macro(op_put_by_id_transition_normal, 9) \
    macro(op_put_by_id_transition_normal_out_of_line, 9) \
    macro(op_put_by_id_replace, 9) \
    macro(op_put_by_id_generic, 9) \
    macro(op_del_by_id, 4) \
    macro(op_get_by_val, 6) \
    macro(op_get_argument_by_val, 6) \
    macro(op_get_by_pname, 7) \
    macro(op_put_by_val, 5) \
    macro(op_del_by_val, 4) \
    macro(op_put_by_index, 4) \
    macro(op_put_getter_setter, 5) \
    macro(op_jmp, 2) \
    macro(op_jtrue, 3) \
    macro(op_jfalse, 3) \
    macro(op_jeq_null, 3) \
    macro(op_jneq_null, 3) \
    macro(op_jneq_ptr, 4) \
    macro(op_jless, 4) \
    macro(op_jlesseq, 4) \
    macro(op_jgreater, 4) \
    macro(op_jgreatereq, 4) \
    macro(op_jnless, 4) \
    macro(op_jnlesseq, 4) \
    macro(op_jngreater, 4) \
    macro(op_jngreatereq, 4) \
    macro(op_jmp_scopes, 3) \
    macro(op_loop, 2) \
    macro(op_loop_if_true, 3) \
    macro(op_loop_if_false, 3) \
    macro(op_loop_if_less, 4) \
    macro(op_loop_if_lesseq, 4) \
    macro(op_loop_if_greater, 4) \
    macro(op_loop_if_greatereq, 4) \
    macro(op_loop_hint, 1) \
    macro(op_switch_imm, 4) \
    macro(op_switch_char, 4) \
    macro(op_switch_string, 4) \
    macro(op_new_func, 4) \
    macro(op_new_func_exp, 3) \
    macro(op_call, 6) \
    macro(op_call_eval, 6) \
    macro(op_call_varargs, 5) \
    macro(op_tear_off_activation, 3) \
    macro(op_tear_off_arguments, 2) \
    macro(op_ret, 2) \
    macro(op_call_put_result, 3) \
    macro(op_ret_object_or_this, 3) \
    macro(op_method_check, 1) \
    macro(op_construct, 6) \
    macro(op_strcat, 4) \
    macro(op_to_primitive, 3) \
    macro(op_get_pnames, 6) \
    macro(op_next_pname, 7) \
    macro(op_push_scope, 2) \
    macro(op_pop_scope, 1) \
    macro(op_push_new_scope, 4) \
    macro(op_catch, 2) \
    macro(op_throw, 2) \
    macro(op_throw_reference_error, 2) \
    macro(op_debug, 5) \
    macro(op_profile_will_call, 2) \
    macro(op_profile_did_call, 2) \
    macro(op_end, 2)

const int maxOpcodeLength = 9;

}
