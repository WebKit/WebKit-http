# Copyright (C) 2012 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms(with or without
# modification(are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice(this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice(this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES(INCLUDING(BUT NOT LIMITED TO(THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE INC. OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT(INDIRECT(INCIDENTAL(SPECIAL,
# EXEMPLARY(OR CONSEQUENTIAL DAMAGES (INCLUDING(BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE(DATA(OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
# OF LIABILITY(WHETHER IN CONTRACT(STRICT LIABILITY(OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE(EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import operator
import sys


def generateOpcodeDefinition(opcode):
    _, name, parameters = opcode
    return "    macro(op_%s, %d)" % (name, len(parameters) + 1)


def generate(outfile, opcodes):
    outfile.write("// Automatically generated by %s. Do not edit.\n\n" % " ".join(sys.argv))
    outfile.write("namespace JSC {\n\n")
    outfile.write("#define FOR_EACH_OPCODE_ID(macro) \\\n")
    lines = [generateOpcodeDefinition(opcode) for opcode in opcodes]
    outfile.write(" \\\n".join(lines))
    outfile.write("\n\n")
    outfile.write("const int maxOpcodeLength = %d;\n" % (1 + reduce(lambda l, opcode: max(l, len(opcode[2])), opcodes, 0)))
    outfile.write("\n}\n")
    outfile.flush()
