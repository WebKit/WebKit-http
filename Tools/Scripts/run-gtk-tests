#!/usr/bin/env python
#
# Copyright (C) 2011 Igalia S.L.
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Library General Public
# License as published by the Free Software Foundation; either
# version 2 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Library General Public License for more details.
#
# You should have received a copy of the GNU Library General Public License
# along with this library; see the file COPYING.LIB.  If not, write to
# the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
# Boston, MA 02110-1301, USA.

import subprocess
import os
import sys
import time
import optparse
from gi.repository import Gio, GLib

TIMEOUT=180 # seconds

class TestRunner:

    TEST_DIRS = [ "unittests", "WebKit2APITests" ]
    # FIXME: https://bugs.webkit.org/show_bug.cgi?id=74717
    SKIPPED = [ "unittests/testdownload", "unittests/testwebview", "unittests/testwebresource",
                # WebKit2APITests/TestDownloads is consistently timing
                # out on the 32bit release and 64bit debug bots.
                # https://bugs.webkit.org/show_bug.cgi?id=76910
                "WebKit2APITests/TestDownloads" ]

    def __init__(self, tests=[]):

        # FIXME: webkit-build-directory --configuration always returns
        # Release because we never call set-webkit-configuration.
        #build_directory_script = os.path.join(os.path.dirname(__file__), "webkit-build-directory")
        #build_directory = self._executive.run_command([build_directory_script, "--configuration"]).rstrip()

        def is_valid_build_directory(build_dir):
            return os.path.exists(os.path.join(build_dir, ".libs"))

        script_dir = os.path.dirname(__file__)
        top_level = os.path.normpath(os.path.join(script_dir, "..", ".."))
        build_directory = os.path.join(top_level, 'WebKitBuild', 'Release')
        if not is_valid_build_directory(build_directory):
            build_directory = os.path.join(top_level, 'WebKitBuild', 'Debug')

        self._a11y_registryd = None
        self._timed_out = False
        self._gtk_tools_directory = os.path.join(top_level, "Tools", "gtk")
        self._programs_path = os.path.join(build_directory, "Programs")
        self._tests = self._get_tests(tests)

    def _get_tests(self, tests):
        if tests:
            return tests

        tests = []
        for test_dir in self.TEST_DIRS:
            absolute_test_dir = os.path.join(self._programs_path, test_dir)
            if not os.path.isdir(absolute_test_dir):
                continue
            for test_file in os.listdir(absolute_test_dir):
                if not test_file.lower().startswith("test"):
                    continue
                test_relative_path = os.path.join(test_dir, test_file)
                if test_relative_path in self.SKIPPED:
                    sys.stdout.write("Skipping test %s\n" % (test_relative_path))
                    sys.stdout.flush()
                    continue

                test_path = os.path.join(self._programs_path, test_relative_path)
                if os.path.isfile(test_path) and os.access(test_path, os.X_OK):
                    tests.append(test_path)
        return tests

    def _lookup_atspi2_binary(self, jhbuild_path, filename):
        process = subprocess.Popen([jhbuild_path ,'pkg-config', '--variable=exec_prefix', 'atspi-2'], stdout=subprocess.PIPE)
        stdout = process.communicate()[0]
        exec_prefix = stdout.rstrip('\r\n')
        paths_to_check = [ 'libexec',
                           'lib/at-spi2-core',
                           'lib32/at-spi2-core',
                           'lib64/at-spi2-core' ]
        for path in paths_to_check:
            filepath = os.path.join(exec_prefix, path, filename)
            if os.path.isfile(filepath):
                return filepath

        return None

    def _run_command_when_dbus_service_appears(self, service_name, handler):
        def on_name_appeared(*args):
            handler()

        def on_name_vanished(*args):
            pass

        Gio.bus_watch_name(Gio.BusType.SESSION, service_name,
                           Gio.BusNameWatcherFlags.NONE, on_name_appeared, on_name_vanished)


    def _check_if_tests_have_timed_out(self):
        if time.time() - self._start_time <= TIMEOUT:
            return False
        sys.stdout.write("Tests timed out after %d seconds\n" % TIMEOUT)
        sys.stdout.flush()
        self._timed_out = True
        return True

    def _ensure_accessibility_daemon_is_running(self, jhbuild_path, test_env):
        a11y_registryd_path = self._lookup_atspi2_binary(jhbuild_path, 'at-spi2-registryd')
        if a11y_registryd_path:
            try:
                self._a11y_registryd = subprocess.Popen([a11y_registryd_path], env=test_env)
            except:
                sys.stderr.write("Failed to run the accessibility registry\n")
                sys.stderr.flush()
                self._a11y_registryd = None

    def run(self, options):
        if not self._tests:
            sys.stderr.write("ERROR: tests not found in %s.\n" % (self._programs_path))
            sys.stderr.flush()
            return 1

        test_env = os.environ
        test_env["DISPLAY"] = options.display
        test_env["WEBKIT_INSPECTOR_PATH"] = os.path.abspath(os.path.join(self._programs_path, 'resources', 'inspector'))
        test_env['GSETTINGS_BACKEND'] = 'memory'

        failed_tests = []

        jhbuild_path = os.path.join(self._gtk_tools_directory, "run-with-jhbuild")

        # Make sure the accessibility bus is launched.
        a11y_bus_launcher_path = self._lookup_atspi2_binary(jhbuild_path, 'at-spi-bus-launcher')
        assert(a11y_bus_launcher_path)
        try:
            a11y_bus_launcher = subprocess.Popen([a11y_bus_launcher_path], env=test_env)
        except:
            sys.stderr.write("Failed to launch the accessibility bus\n")
            sys.stderr.flush()
            return 1

        loop = GLib.MainLoop()
        self._start_time = time.time()

        def run_tests():
            self._ensure_accessibility_daemon_is_running(jhbuild_path, test_env)

            for test in self._tests:
                tester_command = [jhbuild_path , 'gtester']
                if options.verbose:
                    tester_command.append('--verbose')
                tester_command.append(test)
                process = subprocess.Popen(tester_command, env=test_env)
                if process.wait():
                    failed_tests.append(test)

                if self._check_if_tests_have_timed_out():
                    break

            if self._a11y_registryd:
                self._a11y_registryd.terminate()

            a11y_bus_launcher.terminate()

            if failed_tests:
                names = [os.path.basename(t) for t in failed_tests]
                sys.stdout.write("Tests failed: %s\n" % ", ".join(names))
                sys.stdout.flush()

            loop.quit()

        self._run_command_when_dbus_service_appears("org.a11y.Bus", run_tests)
        loop.run()

        return len(failed_tests) or int(self._timed_out)

if __name__ == "__main__":
    option_parser = optparse.OptionParser(usage='usage: %prog [options] [test...]')
    option_parser.add_option('-v', '--verbose',
                             action='store_true', dest='verbose',
                             help='Run gtester in verbose mode')
    option_parser.add_option('--display', action='store', dest='display', default=':55',
                             help='Display to run Xvfb')
    options, args = option_parser.parse_args()

    try:
        xvfb = subprocess.Popen(["Xvfb", options.display, "-screen", "0", "800x600x24", "-nolisten", "tcp"],
                                 stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    except:
        sys.stderr.write("Failed to run Xvfb\n")
        sys.stderr.flush()
        sys.exit(1)

    try:
        sys.exit(TestRunner(args).run(options))
    finally:
        xvfb.kill()
