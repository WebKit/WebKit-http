#!/usr/bin/perl -w

# Copyright (C) 2009 Google Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer. 
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution. 
# 3.  Neither the name of Apple Computer, Inc. ("Apple") nor the names of
#     its contributors may be used to endorse or promote products derived
#     from this software without specific prior written permission. 
#
# THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS "AS IS" AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# Update script for the WebKit Chromium Port.

use File::Path;
use FindBin;
use Getopt::Long;
use lib $FindBin::Bin;
use webkitdirs;

determineIsChromiumAndroid();

chdir("Source/WebKit/chromium") or die $!;

# Find gclient or install it.
my $gclientPath;
if (commandExists('gclient')) {
    $gclientPath = 'gclient';
} elsif (-e 'depot_tools/gclient') {
    $gclientPath = 'depot_tools/gclient';
} else {
    print "Installing chromium's depot_tools...\n";
    system("svn co http://src.chromium.org/svn/trunk/tools/depot_tools") == 0 or die $1;
    $gclientPath = 'depot_tools/gclient';
}

if (! -e ".gclient") {
    # If .gclient configuration file doesn't exist, create it.
    print "Configuring gclient...\n";
    system($gclientPath,
           "config", 
           "--spec=solutions=[{'name':'./','url':None}]") == 0 or die $!;
}

# Set certain gyp settings for the Android build
if (isChromiumAndroid()) {
    # FIXME: Add code to automatically download the NDK
    my $host_os = isLinux() ? "linux" : "mac";
    $ENV{GYP_DEFINES} = "OS=android host_os=" . $host_os . " target_arch=arm arm_neon=1 armv7=1 arm_thumb=1 linux_fpic=1 use_openssl=1 use_system_libjpeg=0 linux_use_tcmalloc=0";
    $ENV{GYP_ANDROID_BUILD} = 1;
}

my $force = 0;
GetOptions(
  'force' => \$force,
);

# Execute gclient sync.
print "Updating chromium port dependencies using gclient...\n";
my @gclientArgs = ($gclientPath, "sync");
push @gclientArgs, "--force" if $force;
push @gclientArgs, "--delete_unversioned_trees" if $force;
push @gclientArgs, "--deps=unix,android" if isChromiumAndroid();

my $cmd = join(" ",@gclientArgs);
my $max_attempts = 3;
my $rc = -1;

# The following will call glient up to $max_attempts times before
# it gives up and fails.  We need this because glcient can fail
# for several reasons, some of which are transient (flakiness).

for (1 .. $max_attempts) {
    $rc = system($cmd);
    print "Re-trying '" . $cmd . "'\n" if $rc != 0;
    last if $rc == 0;
}

die "Error: '$cmd' failed $max_attempts tries and returned " . $rc if ($rc);
